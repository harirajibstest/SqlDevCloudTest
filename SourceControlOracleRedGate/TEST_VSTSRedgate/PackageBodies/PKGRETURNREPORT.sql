CREATE OR REPLACE PACKAGE BODY "TEST_VSTSRedgate"."PKGRETURNREPORT" AS

  Procedure prcExtractReport
    (   ParamData   in  Gconst.gClobType%Type,
        ErrorData   out NoCopy Gconst.gClobType%Type,
        ProcessData out NoCopy Gconst.gClobType%Type,
        GenCursor   out Gconst.DataCursor,
        NextCursor  out Gconst.DataCursor,
        CursorNo3   out Gconst.DataCursor,
        CursorNo4   out Gconst.DataCursor,
        CursorNo5   out Gconst.DataCursor,
        CursorNo6   out Gconst.DataCursor) AS

    numRecords          number;
    numError            number;
    numAction           number(4);
    numRecordSets       number(1);
    profitLoss          number(15);
    CompanyCode         number (10);
    varUserID           varchar2(30);
    varReportID         varchar2(30);
    numMonthendRate     number(15,6);
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
    datWorkDate         date;
    datSystemDate       date;
    xmlDoc              xmlType;
    Error_Occurred      Exception;


    QUERY_STR VARCHAR2(4000);
    Query_STR1 VARCHAR2(4000);
    QUERY_STR2 VARCHAR2(4000);
    Query_STR3 VARCHAR2(4000);
    QUERY_STR4 VARCHAR2(4000);
    Query_STR5 VARCHAR2(4000);
    QUERY_STR6 VARCHAR2(4000);
    Query_STR7 VARCHAR2(4000);
    Query_STR8 VARCHAR2(4000);
    QUERY_STR9 VARCHAR2(4000);
    Query_STR10 VARCHAR2(4000);
    Query_STR11 VARCHAR2(4000);
    Query_STR12 VARCHAR2(4000);
    Query_STR13 VARCHAR2(4000);
    Query_STR14 VARCHAR2(4000);
    Query_STR15 VARCHAR2(4000);
    Query_STR16 VARCHAR2(4000);
    Query_STR17 VARCHAR2(4000);
    Query_STR18 VARCHAR2(4000);
    mFieldCondition Varchar2(4000);

    DealNumber varchar2(4000);
    BaseCurrency varchar2(4000);
    SerialNumber varchar2(4000);
    CompanyName varchar2(4000);
    LocalBank varchar2(4000);
    NUMSELCTEDCOMPANY number(8);    
    finalCondition varchar2(4000);
    temp varchar2(4000);
    varGroupField  varchar(500);
    frmDate Date;
    toDate Date;
    tempDate date;
    dattemp date;
    tempDate1 date;
    dattemp1 date;
    varCompanyField varchar(50);
    temp1 varchar2(500);
    varsiva varchar2(32767);
  BEGIN
    /* TODO implementation required */

    numError := 0;
    numRecords := 0;
    xmlDoc := xmlType(ParamData);
    dbms_lob.createTemporary (ProcessData,  TRUE);
    numError := 1;
    numRecordSets := 1;
    varOperation    := 'Extracting Parameters';
    numAction       := NVL(GConst.fncXMLExtract(xmlDoc, 'Action', numAction),0);
    varReportID     := GConst.fncXMLExtract(xmlDoc, 'ReportID', varReportID);
    datWorkDate     := GConst.fncXMLExtract(xmlDoc, 'WorkDate', datWorkDate);
    varUserID       := GConst.fncXMLExtract(xmlDoc, 'UserCode', varUserID);
    CompanyName     := GConst.fncxmlExtract(xmltype(ParamData),'CompanyID',CompanyName);
    frmDate         := GConst.fncxmlExtract(xmltype(ParamData),'AsonDate',frmDate);
--    frmDate         := GConst.fncxmlExtract(xmltype(ParamData),'FromDate',frmDate); -- frmDate is AsonDate
    toDate          := GConst.fncxmlExtract(xmltype(ParamData),'ToDate',toDate);
    LocalBank       :=  GConst.fncxmlExtract(xmltype(ParamData),   'LocalBank',LocalBank);
    
    insert into temp2 values('frmDate:'||frmDate||'toDate'||toDate||'test');commit;
    begin
		    varGroupField   := Nvl(GConst.fncxmlExtract(xmldoc, 'GroupField', varGroupField), '');
		exception
		      when others then
		      varGroupField  :='';
		end;
    begin
      finalCondition  :=  gconst.fncreturnparam(paramdata,'Condition');
    exception
      when others then
        finalCondition  :='';
    end;

   if finalCondition = 'ALL' then
    finalcondition := '';
  End If;

  If DealNumber = 'ALL' THEN
    DealNumber :='>0';
  End If;


  begin

     select nvl(repm_company_field,'')
       into varCompanyField
      From Trsystem003
      where repm_report_id = varReportID;
  exception
     when no_data_found then
        varCompanyField:= 'a';
  end ;

    if varCompanyField != 'a' then
      finalCondition  := nvl(finalCondition,'') || ' and ' || varCompanyField  || ' in (select usco_company_code
                          from trsystem022a where usco_user_id =' || '''' ||  varUserID ||'''' || ')';

      End If;


  if numAction = GConst.REPORTMENULOAD then
    open GenCursor for
                select  menu_menu_id "Menu ID", menu_description "Menu Description",
                        menu_program_unit "Program Unit", '' "Program ACL",
                        menu_child_level "Child Level", menu_parent_id "Parent ID",
                        rept_report_id ReportID, rept_report_file ReportFile,
                        a.rept_report_param.getStringVal() ReportParam,
                        rept_assembly_name AssemblyName
                from    MenuFile, ReportTable a
                where   menu_program_unit = rept_report_id(+)
                        and (menu_menu_id = 50 or menu_menu_id >= 1000)
                        --and menu_menu_id <=1002 )
                        AND NVL(MENU_RECORD_STATUS, 10200001) NOT IN (10200005, 10200006)
                order by menu_parent_id, menu_menu_id;
        Goto Process_End;
  end if;

 ----------------------------Added By Shrihari V on 20052014-----------------------------------
if varReportID= 'OPENPOS' then
  Open Gencursor For
    select
          pkgreturncursor.fncgetdescription(trad_product_category,2) as ProductCategory,
          pkgreturncursor.fncgetdescription(trad_subproduct_code,2)as SubCategory,
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
          trad_user_reference as BankRef,
          trad_maturity_date as Duedate,
          pkgreturncursor.fncgetdescription(trad_trade_currency,2) as Currency,
          trad_trade_fcy as Amount,
          trad_contract_no as Agreement,
          pkgreturncursor.fncgetdescription(trad_buyer_seller,2)as Vendor,
          frmDate as AsonDate,
          TODATE as TODATE,
          pkgreturncursor.fncgetdescription(trad_company_code,1) as Company,
          round(pkgforexprocess.fncgetoutstanding(TRAD_TRADE_REFERENCE,0,0,1,TODATE),2) as Outstanding
    from trtran002
    where trad_record_status=10200005
          --and (trad_process_complete=12400002 or trad_complete_date=null)
          and((TRAD_PROCESS_COMPLETE = 12400001  AND trad_complete_date >TODATE) or TRAD_PROCESS_COMPLETE = 12400002)
          and trad_reference_date between frmDate and TODATE;
          --and (trad_process_complete=12400002 or trad_complete_date>TODATE)
          --and trad_reference_date between frmDate and TODATE;
    Goto Process_End;
  end if;


--------------------------------ends------------------------------------------

----------------------------Added By Shrihari V on 20052014-----------------------------------
  if varReportID= 'SETTLEDPOS' then
    OPEN GenCursor for
      select
          pkgreturncursor.fncgetdescription(trad_company_code,1)as Company,
          pkgreturncursor.fncgetdescription(trad_product_category,2) as ProductCategory,
          pkgreturncursor.fncgetdescription(trad_subproduct_code,2)as SubCategory,
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
          trad_user_reference as BankRef,
          trad_maturity_date as Duedate,
          pkgreturncursor.fncgetdescription(trad_trade_currency,2) as Currency,
          trad_trade_fcy as Amount,
         (b.CashAmount+b.ForwardAmount) as SettledAmt,
          trad_contract_no as Agreement,
          pkgreturncursor.fncgetdescription(trad_buyer_seller,2)as Vendor,
          round(b.cashrate,4) as CashRate,
          round(b.forwardrate,4) as FwdRate,
          round(b.Edpisa,4) as EDinPaisa,
         round(((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount),4) as NetRate,
          round((((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount))*(b.CashAmount+b.ForwardAmount),2) as AmtinINR,
         '' as FwdContractNo,
        b.CashAmount as Cash,
          round(b.CashAmount*((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount),4) as CashinINR,
          b.ForwardAmount as FwdAmt,
          frmDate as AsonDate,
          TODATE as TODATE
      from trtran002 a, ( select cdel_trade_reference, sum(decode(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
           (sum(decode(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate)
             / sum(decode(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
           sum((case when deal_deal_type!=25400001 then cdel_cancel_amount else 0 end)) ForwardAmount,
            (sum( (case when deal_deal_type!=25400001 then cdel_cancel_amount else 0 end)* cdel_cancel_rate)
             / sum( (case when deal_deal_type!=25400001 then cdel_cancel_amount else 1 end))) Forwardrate,
             sum(CDEL_PROFIT_LOSS)EdBenifit,
             sum(cdel_cancel_rate - deal_exchange_rate)Edpisa
           from trtran001, trtran006
            where deal_deal_number= cdel_deal_number
            and deal_record_status not in (10200005,10200006)
            and cdel_record_status not in(10200005,10200006)
            and cdel_cancel_date between frmDate and TODATE
            group by cdel_trade_reference) b
      where a.trad_trade_reference= b.cdel_trade_reference
        and a.trad_record_status  not in(10200006)
       and trad_reference_date between frmDate and TODATE;
  Goto Process_End;
  end if;
---------------------------------------------ends----------------------------------------

----------------------------added by Shrihari V on 31-05-2014-----------------------------------------
if varReportID = 'INWARDREMITTANCERPT'  then
  --open gencursor for
  Query_Str:='select * from(select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,            
            (select REMT_REMITTANCE_REFERENCE from trtran008a
              where remt_remittance_reference= cdel_trade_reference
              and remt_record_status not in (10200005,10200006)
              )as ContractNo,
            c.cdel_cancel_amount as Amount ,
             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
                               c.cdel_cancel_rate end),'||''''||'999d9999'||''''||') as NetRate,
            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
                               else  c.cdel_Spot_rate end),'||''''||'999d9999'||''''||')as Spot,
            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
                               else c.cdel_forward_rate end ),'||''''||'990d9999'||''''||')as FwdRate , 
            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
                               else c.cdel_margin_rate end),'||''''||'990d9999'||''''||') as Margin,
            deal_maturity_date as MaturityDate,
            (case when c.cdel_cancel_type=27000001 then            
                      to_char((d.deal_exchange_rate),'||''''||'999d9999'||''''||') else null end )as BookingRate,
            c.cdel_profit_loss as PandL,
            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs, ';          
          Query_Str1:='(case  when nvl((select remt_remittance_type from 
                        trtran008a 
                        where remt_remittance_reference= cdel_trade_reference
                        and remt_record_status not in (10200005,10200006)),'||''''||''||''''||')=33900001
                        then  '||''''||'Inward Remittance'||''''||'
                  end) DealType,
                    (select REMT_BANK_REFERENCE from trtran008a
                    where remt_remittance_reference= cdel_trade_reference
                    and remt_record_status not in (10200005,10200006)
                    )as Remarks,
                    (select REMT_REMITTANCE_DETAILS from trtran008a
                    where remt_remittance_reference= cdel_trade_reference
                    and remt_record_status not in (10200005,10200006)
                    )as Description,
                    to_char(deal_maturity_date,'||''''||'MON-yy'||''''||') as monthorder1,
                    to_char(CDEL_CANCEL_DATE,'||''''||'yyyymm'||''''||') as monthorder, 
                  '||''''||frmDate||''''||' as AsonDate,
                  '||''''||toDate||''''||' as ToDate,
                  '||vargroupfield ||'
     from trtran001 d inner join trtran006 c
       on deal_deal_number= cdel_deal_number
     where deal_record_status not in (10200005,10200006)
      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
      and (CDEL_CANCEL_DATE between  '||''''||frmDate||''''||'  and  '||''''||toDate||''''||'))
    where DealType='||''''||'Inward Remittance'||''''||'
    '||finalcondition||'
    order by monthorder asc,MaturityDate';
    delete from temp;commit;
    insert into temp values (Query_Str,Query_Str1);
    open Gencursor for (Query_Str||Query_Str1);
   Goto Process_End;   
  End If;

---------------------------- Shrihari V on 31-05-2014 Ends Here----------------------


----------------------------added by Shrihari V on 31-05-2014-----------------------------------------
If  Varreportid ='CONTRACTPOSITIONBANK' Then
   Open Gencursor For
  SELECT 3 AS DisplayOrder,
        'Hedged' as  Status,
         frmDate as datDateAsOn,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
         pkgreturncursor.fncgetdescription(deal_company_code,1)  as CompanyCode,
         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
         to_char(deal_maturity_date,'MON-yy')as MaturityMonth,
         to_char(deal_maturity_date,'YYYYMM') as monthorder,
         round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2)as  AmountLocal1,
                     nvl( CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(to_date(frmDate,'dd/mm/yyyy'),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy1,

                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),1),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy2,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),2),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy3,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),3),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy4,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),4),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy5,
                     nvl( CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),5),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),0) end,0) as  AmountFcy6,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),6),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy7,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),7),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy8,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),8),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy9,
                     nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),9),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy10,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),10),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy11,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),11),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy12,
                 --avg (DEAL_EXCHANGE_RATE)
         initcap('Amt') as  Datatype,
         initcap('Rate') as Datatype1,

         nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(to_date(frmDate,'dd/mm/yyyy'),'MON') then
        nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate1,

        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),1),'MON') then
                nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate2,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),2),'MON') then
               nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate3,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),3),'MON') then
                nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate4,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),4),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate5,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),5),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate6,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),6),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate7,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),7),'MON') then
                nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate8,

        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),8),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate9,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),9),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate10,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),10),'MON') then
              nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate11,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),11),'MON') then
                nvl(( case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate12

   from trtran001
   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   --and deal_backup_deal=33300001
    and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0

    and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
                          or DEAL_PROCESS_COMPLETE = 12400002)
                          and deal_maturity_date >=frmDate
                           and pkgreturncursor.fncgetdescription(deal_backup_deal,2) = 'NewsPrint'
  group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),deal_backup_deal,
             deal_company_code,DEAL_BASE_CURRENCY, DEAL_COUNTER_PARTY,deal_MATURITY_DATE
    Order by monthorder ;

Goto Process_End;
 end if;
---------------------------- Shrihari V on 31-05-2014 Ends Here----------------------
If  Varreportid ='POSITIONCATEGORYWISE' Then
delete from temp;commit;
insert into temp values(varGroupField,finalCondition);
QUERY_STR := 'SELECT 3 AS DisplayOrder,
        ''Hedged'' as  Status,
         '||''''||frmDate||''''||' as datDateAsOn,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
         pkgreturncursor.fncgetdescription(deal_company_code,1)  as CompanyCode,
         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
         to_char(deal_maturity_date,''MON-yy'')as MaturityMonth,
         to_char(deal_maturity_date,''YYYYMM'') as monthorder,
         round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,'||''''||frmDate||''''||')*deal_exchange_rate)/1000000),2)as  AmountLocal1,
                     nvl( round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,'||''''||frmDate||''''||'))),2),0) as  AmountFcy,
         initcap(''Amt'') as  Datatype,
         initcap(''Rate'') as Datatype1,
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,'||''''||frmDate||''''||')* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,'||''''||frmDate||''''||')),4) as WtRate
                    ' || varGroupField || '
   from trtran001
   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'||''''||frmDate||''''||') <> 0
    and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'||''''||frmDate||''''||')
                          or DEAL_PROCESS_COMPLETE = 12400002)
                          and deal_maturity_date >='||''''||frmDate||''''||'';
    --delete from temp;commit;
    insert into temp values(QUERY_STR,finalCondition);
    Open Gencursor For QUERY_STR||finalCondition  ||'group by to_char(deal_maturity_date,''YYYYMM''),to_char(deal_maturity_date,''MON-yy''),deal_backup_deal,
             deal_company_code,DEAL_BASE_CURRENCY, DEAL_COUNTER_PARTY Order by monthorder' ;
    Goto Process_End;
 end if;

----------------------------added by Shrihari V on 31-05-2014-----------------------------------------
 if varReportID= 'AMORTISATION' then
    OPEN GenCursor for
    SELECT
       deal_dealer_remarks as ContractNo,
       deal_execute_date as DealDate,
       pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
       pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
       deal_base_amount as FwdCover,
       deal_spot_rate as Spot,
       deal_margin_rate Margin,
       deal_maturity_date as DueDate,
       (deal_forward_rate+deal_margin_rate) as Premium,
       deal_forward_rate+deal_margin_rate+deal_spot_rate as NetRate,
       (deal_forward_rate+deal_margin_rate)*deal_base_amount as FwdPremium,
       (fncAmountization (deal_deal_number,frmDate)) col1,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,1)),'month'))) col2,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,2)),'month'))) col3,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,3)),'month'))) col4,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,4)),'month'))) col5,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,5)),'month'))) col6,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,6)),'month'))) col7,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,7)),'month'))) col8,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,8)),'month'))) col9,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,9)),'month'))) col10,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,10)),'month'))) col11,
       (fncAmountization (deal_deal_number,trunc((add_months(frmDate,11)),'month'))) col12,
       frmDate as AsonDate,
       Todate As Todate ,
       pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company
      from trtran001
      where deal_process_complete =12400002
      and deal_execute_date<=frmDate;
    Goto Process_End;
  end if;

        if varReportID= 'TERMLOANACCSTMNT1' then

            OPEN GenCursor for
            select
                  pkgReturnCursor.fncGetdescription(TLON_COMPANY_CODE,1)as COMPANYCODE,
                  PkgReturnCursor.fncGetdescription(TLON_LOCATION_CODE,1) as LOCATIONCODE,
                  TLON_BANK_REFERENCE AS BANKREFERNECE,
                  TLON_LOAN_NUMBER as LoanNumber,
                  PkgReturnCursor.fncGetdescription(TLON_LOCAL_BANK,2) as LocalBank,
                  TLON_INSTALMENT_AMOUNT AS INSTALMENTAMOUNT,
                  TLON_LIBOR_RATE AS LIBORRATE,
                  TLON_INTEREST_SPREAD AS INTRESTSPREAD,
                  TLON_SANCTIONED_FCY AS SACTIONEDFCY,
                  TLON_SANCTIONED_RATE AS SACTIONRATE,
                  TLON_SANCTIONED_INR AS SACTIONINR,
                  TLON_DUE_DATE AS DUEDATE,
                  PkgReturnCursor.fncGetdescription(TLON_PERIOD_TYPE,2) AS PERIODTYPE,
                  TLON_PERIOD_NUMBER AS PERIODNUMBER,
                  PkgReturnCursor.fncGetdescription(TLON_INSTALMENT_TYPE,2) AS INSTALMENTTYPE,
                  PkgReturnCursor.fncGetdescription(TLON_FLOAT_RATE,2) AS FLOATRATE,
                   PkgReturnCursor.fncGetdescription(TLON_INTEREST_TYPE,2) AS INTRESTTYPE,
                  PkgReturnCursor.fncGetdescription(TLON_CURRENCY_CODE,2) AS CURRENCY,
                  --(select  PKGMASTERMAINTENANCE.fncReturnBalance(TLON_LOAN_NUMBER,1,23600007, datWorkDate,1) from dual)as CLOSINGBALANCE,
                  0  as CLOSINGBALANCE,
                  TLON_INTEREST_RATE AS INTERESTRATE,
                  TLON_REFERENCE_DATE AS LOANREFERENCEDATE,
                  TLON_LOAN_REMARKS AS LOANREMARKS,
                  TLON_REFERENCE_DATE as OPENDATE,
                  TRPY_REPAID_FCY as IntrestAmount,
                   PkgReturnCursor.fncGetdescription(TRPY_DEBIT_TYPE,2) as DEBITTYPE,
                  PkgReturnCursor.fncGetdescription(TRPY_TRANSFER_CODE,1) as TRANSFERCODE,

                  (select sum(TRPY_REPAID_FCY) from trtran082 where
                   TRPY_TRANSFER_CODE=14600002 and
                   TRPY_RECORD_STATUS not in(10200005,10200006)
                   and TRPY_LOAN_NUMBER=b.TRPY_LOAN_NUMBER
                   group by TRPY_LOAN_NUMBER)- (select sum(TRPY_REPAID_FCY) from trtran082 where
                   TRPY_TRANSFER_CODE=14600001 and
                   TRPY_RECORD_STATUS not in(10200005,10200006)
                   and TRPY_LOAN_NUMBER=b.TRPY_LOAN_NUMBER
                   group by TRPY_LOAN_NUMBER ) BALANCEAMOUNT,

          --        csmt_serial_number "Srl", csmt_transaction_date "VoucherDate",
          --        csmt_cheque_number "ChequeNo", csmt_voucher_detail "VoucherDetail",
          --        csmt_debit_amount "Debit", csmt_credit_amount "Credit",
          --        csmt_balance_amount "Balance",  PKGRETURNCURSOR.FNCGETDESCRIPTION(CSMT_COMPANY_CODE,1) as CompanyName,
          --        PKGRETURNCURSOR.FNCGETDESCRIPTION( CSMT_LOCAL_BANK,1) AS LocalBank,CSMT_ACCOUNT_NUMBER AS AccountNo
                  frmDate as AsonDate,
                  Todate as ToDate
                  from trtran081,trtran082 b
                  --,trsystem971
                  --where TLON_LOAN_NUMBER=CSMT_ACCOUNT_NUMBER
                  where TLON_RECORD_STATUS not in(10200005,10200006)
                 -- order by csmt_transaction_date,csmt_serial_number;
                   and TLON_LOAN_NUMBER=TRPY_LOAN_NUMBER;
             Goto Process_End;
       end if;
-----------------Abhijeet Added New Report on 31-05-2014   ----------------------
------Abhijieet Modifed on 11-JUn-14 ------
If Varreportid = 'USDINRMOVEMENT' then

       -- Open Gencursor For
--             select
--             DRAT_EFFECTIVE_DATE EFFECTIVEDATE,
--             min(DRAT_SPOT_BID) MINRATE,
--             max(DRAT_SPOT_BID) MAXRATE,
--             frmdate as frmdate,
--                todate as todate,
--              round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,
--               (SELECT max(DRAT_SPOT_BID) OPENBID FROM TRTRAN012 B WHERE B.DRAT_EFFECTIVE_DATE=A.DRAT_EFFECTIVE_DATE
--              AND B.DRAT_SERIAL_NUMBER=1 AND B.DRAT_CURRENCY_CODE=30400004 AND B.DRAT_FOR_CURRENCY =30400003 ) OPENRATE,
--               (SELECT max(DRAT_SPOT_BID) OPENBID FROM TRTRAN012 B
--                 WHERE B.DRAT_EFFECTIVE_DATE=A.DRAT_EFFECTIVE_DATE
--                   AND B.DRAT_SERIAL_NUMBER= (select max( DRAT_SERIAL_NUMBER)
--                                              from TRTRAN012 c
--                                              where C.DRAT_CURRENCY_CODE=30400004
--                                              and C.DRAT_FOR_CURRENCY =30400003
--                                              and C.DRAT_EFFECTIVE_DATE=B.DRAT_EFFECTIVE_DATE)
--                   AND B.DRAT_CURRENCY_CODE=30400004
--                   AND B.DRAT_FOR_CURRENCY =30400003 ) CLOSERATE,
--                to_char(DRAT_EFFECTIVE_DATE,'MON-YY') MONTHORDER,
--                round(sum(cdel_cancel_amount*CDEL_CANCEL_RATE),2) CancelAmountinr,
--                sum(cdel_cancel_amount) CancelAmount
--            from trtran012 a left outer join  TRTRAN006
--            on a.DRAT_EFFECTIVE_DATE=CDEL_CANCEL_DATE
--            where  a.DRAT_CURRENCY_CODE=30400004 and a.DRAT_FOR_CURRENCY=30400003
--            and  a.DRAT_RECORD_STATUS not in (10200005,10200006)
--            and cdel_RECORD_STATUS not in (10200005,10200006)
--            and a.DRAT_EFFECTIVE_DATE between frmdate and todate
--            group by a.DRAT_EFFECTIVE_DATE
--            order by a.DRAT_EFFECTIVE_DATE;
           -- insert into temp values(


        Query_Str:=' select EFFECTIVEDATE,MINRATE,MAXRATE,'||''''||frmdate||''''||' as frmdate,'||''''||todate||''''||' as todate,OPENRATE,
              CLOSERATE,MONTHORDER,WEIGHTEDAVGRATE,(CancelAmountinr/1000000)CancelAmountinr,
              (CancelAmount/1000000)as CancelAmount,(CancelPandL.PANDL/1000000) PANDL
        from (select DRAT_EFFECTIVE_DATE EFFECTIVEDATE,
             min(DRAT_SPOT_BID) MINRATE,
             max(DRAT_SPOT_BID) MAXRATE,
              '||''''||frmdate||''''||' as  frmdate ,
             '||''''||todate||''''||' as  todate ,
            (SELECT max(DRAT_SPOT_BID) OPENBID
               FROM TRTRAN012 B
               WHERE B.DRAT_EFFECTIVE_DATE=A.DRAT_EFFECTIVE_DATE
                 AND B.DRAT_SERIAL_NUMBER=1
                 AND B.DRAT_CURRENCY_CODE=30400004
                 AND B.DRAT_FOR_CURRENCY =30400003 ) OPENRATE,
              (SELECT max(DRAT_SPOT_BID) OPENBID FROM TRTRAN012 B
                 WHERE B.DRAT_EFFECTIVE_DATE=A.DRAT_EFFECTIVE_DATE
                   AND B.DRAT_SERIAL_NUMBER= (select max( DRAT_SERIAL_NUMBER)
                                              from TRTRAN012 c
                                              where C.DRAT_CURRENCY_CODE=30400004
                                              and C.DRAT_FOR_CURRENCY =30400003
                                              and C.DRAT_EFFECTIVE_DATE=B.DRAT_EFFECTIVE_DATE)
                   AND B.DRAT_CURRENCY_CODE=30400004
                   AND B.DRAT_FOR_CURRENCY =30400003 ) CLOSERATE,
                    to_char(DRAT_EFFECTIVE_DATE,'||''''||'MON-YY'||''''||') MONTHORDER
                    '|| vargroupfield ||'
            from trtran012 a
            where  a.DRAT_CURRENCY_CODE=30400004 and a.DRAT_FOR_CURRENCY=30400003
            and  a.DRAT_RECORD_STATUS not in (10200005,10200006)
            and a.DRAT_EFFECTIVE_DATE  between '||''''||frmdate||''''||' and '||''''||todate||''''||'
            group by a.DRAT_EFFECTIVE_DATE
            order by a.DRAT_EFFECTIVE_DATE) rates ';
    Query_Str1:=' left outer join
         --(select round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)-sum(CDEL_PROFIT_LOSS)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,

            (select round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,
              --   to_char(cdel_cancel_DATE,'||''''||'MON-YY'||''''||') MONTHORDER,
                 cdel_cancel_DATE,
               -- round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,
               round(sum(cdel_cancel_amount*CDEL_CANCEL_RATE),4) CancelAmountinr,
              -- round(sum(cdel_cancel_amount*CDEL_CANCEL_RATE)-sum(CDEL_PROFIT_LOSS)),4) CancelAmountinr,
              --  round((sum(cdel_cancel_amount*cdel_cancel_RATE) -nvl(Pandl.Pandl,0))/sUM(cdel_cancel_amount),2) USDINR,
              sum(cdel_cancel_amount) CancelAmount
               from trtran006 left outer join trtran001
              on deal_deal_number=cdel_deal_number
              left outer join trtran002
              on Trad_Trade_Reference=Cdel_Trade_Reference
              where cdel_record_status not in  (10200005,10200006)
              and deal_record_status not in (10200005,10200006)
              and cdel_cancel_type =27000002
              and cdel_cancel_DATE  between '||''''||frmdate||''''||' and '||''''||todate||''''||'
              and deal_base_currency=30400004
              and TRAD_PRODUCT_CATEGORY=33300001
              group by  cdel_cancel_DATE) cancelamt
          on  rates. EFFECTIVEDATE= cancelamt.cdel_cancel_DATE left outer join
          (select cdel_cancel_date, sum(cdel_profit_loss) PANDL
              from trtran006 left outer join trtran001
              on deal_deal_number=cdel_deal_number
              where cdel_record_status not in  (10200005,10200006)
              and deal_record_status not in (10200005,10200006)
              and cdel_cancel_type =27000001
              and cdel_cancel_DATE between '||''''||frmdate||''''||' and '||''''||todate||''''||'
              and deal_base_currency=30400004
              and DEAL_BACKUP_DEAL=33300001
             group by  cdel_cancel_DATE) CancelPandL
       on rates.EFFECTIVEDATE= CancelPandL.cdel_cancel_date
      where rates. EFFECTIVEDATE between '||''''||frmdate||''''||' and '||''''||todate||''''||'      
      order by 1';
      insert into temp values(Query_Str,Query_Str1);commit;
      Open Gencursor for (Query_Str||Query_Str1);
            Goto Process_End;
         End If;




--commented for new updated on 18062014
--  If Varreportid = 'HEDGERATIO' then
--     if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--
--  Open Gencursor For
--              with x as ( select
--                           HDAY_CALENDAR_DATE ,
--                           to_char(HDAY_CALENDAR_DATE,'MON-YY') MONTHORDER,
--                          (select
--                          sum (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,HDAY_CALENDAR_DATE))
--                           from
--                           trtran001
--                           where
--                           DEAL_RECORD_STATUS not in(10200005,10200006)
--                           and
--                           ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date >HDAY_CALENDAR_DATE) or DEAL_PROCESS_COMPLETE = 12400002)
--                           and  DEAL_BACKUP_DEAL=33300001)DEALSOUTSTANDING,
--                           -- DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date > HDAY_CALENDAR_DATE)
--                           --and frmdate= HDAY_CALENDAR_DATE
--
--                            (select
--                              sum( pkgforexprocess.fncPurchaseContractOS( trad_trade_reference,HDAY_CALENDAR_DATE,trad_maturity_date,trad_contract_no)) "OutstandingAmount"
--                              from
--                              trtran002
--                              where
--                              TRAD_RECORD_STATUS not in(10200005,10200006)
--                              and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_complete_date >HDAY_CALENDAR_DATE) or TRAD_PROCESS_COMPLETE = 12400002)
--                              and TRAD_PRODUCT_CATEGORY=33300001)
--                             -- and  (TRAD_PROCESS_COMPLETE = 12400001 and TRAD_complete_date > HDAY_CALENDAR_DATE))
--                              TRADEOUTSTANDING
--
--
--                          from
--                          TRSYSTEM001
--                          where
--                          HDAY_LOCATION_CODE=30299999
--                           and HDAY_CALENDAR_DATE between frmdate and todate
--                           and HDAY_DAY_STATUS in (26400002,26400003,26400005)
--                           and HDAY_RECORD_STATUS not in(10200005,10200006)) select HDAY_CALENDAR_DATE "CancelDate",DEALSOUTSTANDING,TRADEOUTSTANDING ,
--                             round(((DEALSOUTSTANDING/TRADEOUTSTANDING)*100),2) "hegderatioamount",
--                              '60%' "Minimum",
--                              '75%' "Maximum",
--                              frmdate as frmdate,
--                              todate as todate,
--                               to_char(HDAY_CALENDAR_DATE,'MON-YY') MONTHORDER
--                             from x;
--
--    Goto Process_End;
-- End If;

---new updates by Abhijeet as on 18062014
-- If Varreportid = 'HEDGERATIO' then
--     if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--  
--  Open Gencursor For
--              with x as ( select
--                           HDAY_CALENDAR_DATE ,
--                           to_char(HDAY_CALENDAR_DATE,'MON-YY') MONTHORDER,
--                          (select
--                          sum (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,HDAY_CALENDAR_DATE))
--                           from 
--                           trtran001
--                           where
--                           DEAL_RECORD_STATUS not in(10200005,10200006)
--                           and
--                           ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date >HDAY_CALENDAR_DATE) or DEAL_PROCESS_COMPLETE = 12400002)
--                           and  DEAL_BACKUP_DEAL=33300001)DEALSOUTSTANDING,
--                           -- DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date > HDAY_CALENDAR_DATE) 
--                           --and frmdate= HDAY_CALENDAR_DATE
--
--                            (select
--                              sum( pkgForexProcess.fncGetOutstanding(trad_trade_reference, 0,gconst.UTILCONTRACTOS,1,HDAY_CALENDAR_DATE))
--                    --pkgforexprocess.fncPurchaseContractOS( trad_trade_reference,HDAY_CALENDAR_DATE,trad_maturity_date,trad_contract_no)) "OutstandingAmount"
--                              from
--                              trtran002 
--                              where
--                              TRAD_RECORD_STATUS not in(10200005,10200006) 
--                              and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_complete_date >HDAY_CALENDAR_DATE) or TRAD_PROCESS_COMPLETE = 12400002)
--                              and TRAD_PRODUCT_CATEGORY=33300001)
--                             -- and  (TRAD_PROCESS_COMPLETE = 12400001 and TRAD_complete_date > HDAY_CALENDAR_DATE))
--                              TRADEOUTSTANDING
--                              
--                              
--                          from 
--                          TRSYSTEM001
--                          where
--                          HDAY_LOCATION_CODE=30299999
--                           and HDAY_CALENDAR_DATE between frmdate and todate
--                           and HDAY_DAY_STATUS in (26400002,26400003,26400005)
--                           and HDAY_RECORD_STATUS not in(10200005,10200006)) select HDAY_CALENDAR_DATE "CancelDate",DEALSOUTSTANDING,TRADEOUTSTANDING ,
--                             round(((DEALSOUTSTANDING/TRADEOUTSTANDING)*100),2) "hegderatioamount",
--                              '60%' "Minimum",
--                              '75%' "Maximum",
--                              frmdate as frmdate,
--                              todate as todate,
--                               to_char(HDAY_CALENDAR_DATE,'MON-YY') MONTHORDER
--                             from x
--                             order by HDAY_CALENDAR_DATE;
--   
--    Goto Process_End;   
-- End If;
If Varreportid = 'HEDGERATIO' then
     if (to_char(frmDate,'MM') <=4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
  
  --Open Gencursor For
            Query_Str:='  with x as ( select
                           HDAY_CALENDAR_DATE ,
                           pkgreturncursor.fncgetdescription(HDAY_LOCATION_CODE,2) AS LocationName,
                           to_char(HDAY_CALENDAR_DATE,'||''''||'MON-YY'||''''||') MONTHORDER,
                          (select
                          sum (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,HDAY_CALENDAR_DATE))
                           from 
                           trtran001
                           where
                           DEAL_RECORD_STATUS not in(10200005,10200006)
                           and
                           ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date >HDAY_CALENDAR_DATE) or DEAL_PROCESS_COMPLETE = 12400002)
                           and  DEAL_BACKUP_DEAL=33300001)DEALSOUTSTANDING,
                           -- DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date > HDAY_CALENDAR_DATE) 
                           --and frmdate= HDAY_CALENDAR_DATE

                            (select
                              sum( pkgforexprocess.fncPurchaseContractOS( trad_trade_reference,HDAY_CALENDAR_DATE,trad_maturity_date,trad_contract_no)) "OutstandingAmount"
                              from
                              trtran002 
                              where
                              TRAD_RECORD_STATUS not in(10200005,10200006) 
                              and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_complete_date >HDAY_CALENDAR_DATE) or TRAD_PROCESS_COMPLETE = 12400002)
                              and TRAD_PRODUCT_CATEGORY=33300001)
                             -- and  (TRAD_PROCESS_COMPLETE = 12400001 and TRAD_complete_date > HDAY_CALENDAR_DATE))
                              TRADEOUTSTANDING
                              
                              
                          from 
                          TRSYSTEM001
                          where
                       --   HDAY_LOCATION_CODE=30299999
                            HDAY_CALENDAR_DATE between '||''''||frmdate||''''||' and '||''''||todate||''''||'
                           and HDAY_DAY_STATUS in (26400002,26400003,26400005)
                           and HDAY_RECORD_STATUS not in(10200005,10200006)
                                '||finalcondition||') select HDAY_CALENDAR_DATE "CancelDate",LocationName,DEALSOUTSTANDING,TRADEOUTSTANDING ,
                             round(((DEALSOUTSTANDING/TRADEOUTSTANDING)*100),2) "hegderatioamount",
                              '||''''||'60%'||''''||' "Minimum",
                              '||''''||'75%'||''''||' "Maximum",
                              '||''''||frmdate||''''||' as frmdate,
                              '||''''||todate||''''||' as todate,
                               to_char(HDAY_CALENDAR_DATE,'||''''||'MON-YY'||''''||') MONTHORDER
                             from x                                                  
                             order by HDAY_CALENDAR_DATE
                             ';
                             
                             delete from temp;commit;
                             insert into temp values(Query_Str,finalcondition);commit;
   Open genCursor for (Query_Str);
    Goto Process_End;   
 End If;
------------------------ Abhijeet End Here  ---------------------------------



--------------------------------------------------------------------------------
--Report  Query Specification Begin

  if varReportID = 'DEALCONFIRMATIONREPORT' then

    Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DealNumber,DEAL_EXECUTE_DATE AS ExecuteDate,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,1) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,1) as OTHERCRNCY,
                        DEAL_COUNTER_PARTY AS CPARTY,DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,
                        DEAL_BASE_AMOUNT AS BASEAMT,DEAL_OTHER_AMOUNT AS OTHERAMT,
                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) AS AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM,
                        DEAL_MATURITY_DATE AS MATURITYDATE,LBNK_ADDRESS_1 AS BKADDR1,LBNK_ADDRESS_2 AS BKADDR2,LBNK_ADDRESS_3 AS BKADDR3,LBNK_ADDRESS_4 AS BKADDR4,LBNK_CONTACT_PERSON AS CTPERSON,
                        LBNK_LONG_DESCRIPTION AS BKNAME,pkgreturnreport.GetSystemDate() as SystemDate ,
                         pkgreturnreport.getCompanyName() as CompanyName
                from    TRTRAN001,TRMASTER306
                where   TRMASTER306.LBNK_PICK_CODE = TRTRAN001.DEAL_COUNTER_PARTY AND
                        DEAL_record_status NOT IN('||gconst.statusinactive||','||gconst.statusdeleted||','||gconst.STATUSPOSTCANCEL||','||gconst.STATUSAUTHORIZED||')';

    OPEN GenCursor for Query_Str||finalCondition || ' order by DEAL_DEAL_NUMBER ';
    Goto Process_End;
  end if;

  if varReportID = 'DEALREGISTERVIEW' then

    Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DealNumber,DEAL_EXECUTE_DATE AS ExecuteDate,DEAL_EXECUTE_TIME as ExecuteTime,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,
                        DEAL_BASE_AMOUNT AS BASEAMT,
                        (select user_user_name from trsystem022 where user_user_id = DEAL_USER_ID ) as  DealerName,
                        DEAL_OTHER_AMOUNT as OTHERAMT,
                        --(case when DEAL_OTHER_CURRENCY != '||gconst.INDIANRUPEE||' then DEAL_OTHER_AMOUNT else 0 end) AS OTHERAMT,
                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) AS AMTLCL,
                        decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AmountLocal,
                        DEAL_MATURITY_FROM AS MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001
                where   DEAL_record_status NOT IN('||gconst.statusinactive||','||gconst.statusdeleted||') ';

    OPEN GenCursor for Query_STR|| finalCondition || ' order by DEAL_DEAL_NUMBER ';
    Goto Process_End;
  End if;


  if   ((varReportID= 'TRADEDEALFORTHEDAY')
       or (varReportID= 'REMTRADEDEALFORTHEDAY')
       or (varReportID='REMTRADEDEALFORTHEDAY')
       or (varReportID='REMTRADEDEALFORSPOT')
       or (varReportID='REMTRADEDEALFORTOM'))
       THEN
       Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,DEAL_SERIAL_NUMBER AS SERIALNUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,DEAL_TIME_STAMP as TIMESTMP,DEAL_USER_ID as USERID,
                        DEAL_BASE_AMOUNT AS BASEAMT,
                        DEAL_OTHER_AMOUNT as OTHERAMT,
                        --(case when DEAL_OTHER_CURRENCY != '||gconst.INDIANRUPEE||' then DEAL_OTHER_AMOUNT else 0 end) AS OTHERAMT,
                        decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AmountLocal,
                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) as AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM, DEAL_MATURITY_DATE AS MATURITYDATE,deal_execute_time as ExecuteTime,'
                        ||''''||frmDate||''''||' as FromDate,'||''''||toDate||''''||' as ToDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001
                where   DEAL_HEDGE_TRADE in(26000002) and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') ';

    if ((varReportID='REMTRADEDEALFORTHEDAY') or (varReportID='REMTRADEDEALFORSPOT') or (varReportID='REMTRADEDEALFORTOM')) THEN
                Query_Str := Query_Str || ' and deal_process_complete = 12400002 ' ;
    end if;
    --insert into temp values(Query_Str,finalcondition);commit;
    OPEN GenCursor for Query_Str||finalcondition||' order by DEAL_DEAL_NUMBER,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY';

    Goto Process_End;
  end if;
  If (Varreportid='IMPORTSUNHEDGED') Then

  Query_Str := 'SELECT
        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) as BuyerSeller,
        pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') outstanding,
        (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as UnhedgeAmount,
        TRAD_REFERENCE_DATE as ReferenceDate,
        TRAD_MATURITY_FROM as DuedateLC,
        TRAD_MATURITY_DATE as DuedateBC,
        nvl(trad_spot_rate,0) as CostFixRate,
        TRAD_Forward_RATE as FWDPrimium,
        nvl(trad_spot_rate,0) + nvl(TRAD_Forward_RATE,0) as Totalrate,
        fncFrwdPrimium('''||frmDate||''','''||frmDate||''',2) as RbiRefRate,
        fncFrwdPrimium(TRAD_MATURITY_DATE,'''||frmDate||''',1)FWDPrimiumRBI,
        fncFrwdPrimium(TRAD_MATURITY_DATE,'''||frmDate||''',1) + fncFrwdPrimium('''||frmDate||''','''||frmDate||''',2)as TotalRateRbi,
        trad_trade_rate -
        (fncFrwdPrimium(TRAD_MATURITY_DATE,'''||frmDate||''',1) + fncFrwdPrimium('''||frmDate||''','''||frmDate||''',2))as MTM,
        (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0))
        * (trad_trade_rate - (fncFrwdPrimium(TRAD_MATURITY_DATE,'''||frmDate||''',1) + fncFrwdPrimium('''||frmDate||''','''||frmDate||''',2)))MTMAmt,
        pkgreturnreport.getCompanyName( '''||varUserID||''' ) as CompanyName,
        to_char(to_date(TRAD_MATURITY_DATE,'||'''dd/mm/yyyy'''||'),'||'''MON YY'''||')  as matmonth,
        to_char(to_date(TRAD_MATURITY_DATE,'||'''dd/mm/yyyy'''||'),'||'''YYYYMM'''||') as matyear,
        '''||frmDate||''' as  FromDate ,
        '''||ToDate||''' as ToDate,
        (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) * trad_spot_rate as CostFixInr,
        (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) * (trad_spot_rate + nvl(TRAD_Forward_RATE,0)) as SpotINR
        '||varGroupfield||'
   FROM   trtran002
   WHERE  (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) > 0
   AND TRAD_RECORD_STATUS not in(10200005,10200006,10200012) and
       ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > '''||frmDate||''') or TRAD_PROCESS_COMPLETE = 12400002) and
       TRAD_MATURITY_DATE > '''||frmDate||'''';
--        to_char('''||frmDate||''','||'''dd-MM-yyyy'''||') as  FromDate ,
--        to_char('''||ToDate||''','||'''dd-MM-yyyy'''||') as ToDate,

       delete from temp;commit;
       insert into temp values(Query_Str,finalCondition);

   Open Gencursor For Query_Str||finalCondition||'order by to_char(to_date(TRAD_MATURITY_DATE,'||'''dd/mm/yyyy'''||'),'||'''YYYYMM'''||')';
   Goto Process_End;
 End If;


  If (Varreportid='M2MFOREXOUTSTANDING' or Varreportid='OUTSTANDINGFOREXHEDGED' ) Then
   Open Gencursor For
       SELECT  DEAL_DEAL_NUMBER      as DealNumber,
        DEAL_USER_REFERENCE         as DealRef,
        DEAL_EXECUTE_DATE           as TradeDate,
        DEAL_MATURITY_DATE          as ValueDate,
        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) as AmountFCY,
        --DEAL_BASE_AMOUNT            as AmountFCY,
        DEAL_OTHER_AMOUNT           as AmountINR,
        DEAL_EXCHANGE_RATE          as ExchangeRate,
        fncFrwdPrimium(deal_maturity_date,frmDate,1) FWDPrimium,
        fncFrwdPrimium(deal_maturity_date,frmDate,1) + fncFrwdPrimium(frmDate,frmDate,2)   as SpotRate,
        Round((fncFrwdPrimium(deal_maturity_date,frmDate,1)/(DEAL_MATURITY_DATE - DEAL_EXECUTE_DATE)) * ((to_date(frmDate,'dd-mm-yy')) - DEAL_EXECUTE_DATE),4) as FWDPrimiumUpto,
        Round(Round((fncFrwdPrimium(deal_maturity_date,frmDate,1)/(DEAL_MATURITY_DATE - DEAL_EXECUTE_DATE)) * ((to_date(frmDate,'dd-mm-yy')) - DEAL_EXECUTE_DATE),4) *  DEAL_BASE_AMOUNT,2) as FWDInr,
        Round((fncFrwdPrimium(deal_maturity_date,frmDate,1) + (fncFrwdPrimium(frmDate,frmDate,2)) - DEAL_EXCHANGE_RATE ) * pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate),2) as MTMInr,
        (DEAL_MATURITY_DATE - DEAL_EXECUTE_DATE) as TotalDays,
        ((to_date(frmDate,'dd-mm-yy')) - DEAL_EXECUTE_DATE)as NoDaysAson,
        pkgreturnreport.GetSystemDate() as SystemDate,
        pkgreturnreport.getCompanyName(varUserID) as CompanyName,
        to_char(frmDate,'dd-MM-yyyy') as  FromDate ,
        to_char(ToDate,'dd-MM-yyyy') as ToDate,
        to_char(frmDate,'dd-MM-yyyy') as  UptoDate,
        fncFrwdPrimium(frmDate,frmDate,2) as RbiRefRate
      FROM trtran001
      where  DEAL_RECORD_STATUS not in(10200005,10200006) and DEAL_MATURITY_DATE >= to_date(frmDate,'dd-mm-yy')and DEAL_EXECUTE_DATE <= to_date(frmDate,'dd-mm-yy')
      AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
      ORDER BY  DEAL_MATURITY_DATE;
 Goto Process_End;
end if;

   If Varreportid='FOREXEXPOSURE' THEN
   prcDerivativesPortfolio(frmDate,toDate) ;
   Open Gencursor For
       select
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(to_date(frmDate,'dd/mm/yyyy'),'MON') then
              OPENAMOUNT else 0  end as clm1,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),1),'MON') then
              OPENAMOUNT else 0  end as clm2,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),2),'MON') then
              OPENAMOUNT else 0  end as clm3,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),3),'MON') then
              OPENAMOUNT else 0  end as clm4,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),4),'MON') then
              OPENAMOUNT else 0  end as clm5,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),5),'MON') then
              OPENAMOUNT else 0  end as clm6,

          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(to_date(frmDate,'dd/mm/yyyy'),'MON') then
              Open_balance else 0  end as clm7,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),1),'MON') then
              Open_balance else 0  end as clm8,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),2),'MON') then
              Open_balance else 0  end as clm9,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),3),'MON') then
              Open_balance else 0  end as clm10,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),4),'MON') then
              Open_balance else 0  end as clm11,
          case when to_char(to_date(matdate,'dd/mm/yyyy'),'MON') = to_char(add_months(to_date(frmDate,'dd/mm/yyyy'),5),'MON') then
              Open_balance else 0  end as clm12,

          case slno
          when 1 then 'Import Payments'
          when 2 then 'Import Forward Contract'
          when 3 then 'Buyers Credit'
          when 4 then 'Export Collection'
          when 5 then 'Export Forward Contract'
          when 6 then 'PCFC/FCL' end
          as SerialNo ,
          rec_no as RecordNo ,
          pkgreturncursor.fncgetdescription(TRADECURRENCY,1) TradeCurrency,
          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
          frmDate as FromDate,toDate as ToDate
      from trsystem977 order by slno ;
   Goto Process_End;
 End If;


  if  (varReportID='TRADEDEALBYMATURITYDATE') then
   Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,DEAL_SERIAL_NUMBER AS SERIALNUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,DEAL_TIME_STAMP as TIMESTMP,DEAL_USER_ID as USERID,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as BASEAMT,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * DEAL_EXCHANGE_RATE) as OTHERAMT,
                        decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AmountLocal,
                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) as AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM, DEAL_MATURITY_DATE AS MATURITYDATE,deal_execute_time as ExecuteTime,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001
                where   DEAL_HEDGE_TRADE in(26000002) and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||')  and
                        ((deal_process_complete = 12400001  and deal_complete_date >  '||''''||frmDate||''''||') or deal_process_complete = 12400002) ';

    OPEN GenCursor for Query_Str||finalcondition||' order by DEAL_DEAL_NUMBER,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY';
    Goto Process_End;
  end if;

 if varReportID ='TRDDEALMATUREDBYNXTTWODAYS' or  varReportID ='REMTRDDEALMATUREDBYNXTTWODAYS'  then

   --toDate := frmDate + 2;
    OPEN GenCursor for
                select  DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,DEAL_SERIAL_NUMBER AS SERIALNUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,DEAL_TIME_STAMP as TIMESTMP,DEAL_USER_ID as USERID,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,toDate) as BASEAMT,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,toDate) * DEAL_EXCHANGE_RATE) as OTHERAMT,
                        DEAL_EXECUTE_TIME as ExecuteTime,
                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,gconst.INDIANRUPEE,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) AS AMTLCL,
                        decode(DEAL_OTHER_CURRENCY,gconst.INDIANRUPEE,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AmountLocal,
                        DEAL_MATURITY_FROM AS MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        pkgreturnreport.GetSystemDate() as SystemDate,frmDate as AsonDate,toDate as ToDate,
                         pkgreturnreport.getCompanyName(varUserID ) as CompanyName
                from    TRTRAN001
                where   DEAL_HEDGE_TRADE in(gconst.HEDGEDEAL)
                    --  and   ((deal_process_complete = 12400001  and deal_complete_date > toDate) or deal_process_complete = 12400002)
                       and  DEAL_record_status NOT IN(gconst.statusdeleted,gconst.statusinactive)
                        and deal_maturity_date between frmDate and toDate
                order by DEAL_MATURITY_DATE;
    Goto Process_End;
  end if;

if varReportID= 'OUTSTANDINGTRADEDEAL' then

    OPEN GenCursor for
                select  DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,DEAL_SERIAL_NUMBER AS SERIALNUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,DEAL_TIME_STAMP as TIMESTMP,
                        (select user_user_name from trsystem022 where user_user_id = DEAL_USER_ID ) as USERID,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, toDate) as  BASEAMT,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, toDate) *  DEAL_EXCHANGE_RATE) as OTHERAMT,
                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,gconst.INDIANRUPEE,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) AS AMTLCL,
                        decode(DEAL_OTHER_CURRENCY,gconst.INDIANRUPEE,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) as AmountLocal,
                        DEAL_MATURITY_FROM AS MATURITYFRM,
                        deal_execute_time as ExecuteTime,DEAL_MATURITY_DATE AS MATURITYDATE,
                        pkgreturnreport.GetSystemDate() as SystemDate,frmDate as AsonDate,
                        frmDate as FromDate,toDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from    TRTRAN001
                where    DEAL_HEDGE_TRADE in(gconst.TRADEDEAL)  and
                        ((deal_process_complete = 12400001  and deal_complete_date > toDate) or deal_process_complete = 12400002)
                        and deal_execute_date between frmDate and toDate
                        and   deal_record_status not in(gconst.statusdeleted,gconst.statusinactive)
                order by deal_maturity_date;
    Goto Process_End;
  end if;

   IF varReportID ='DAILYAUDITTRAIALTRDDEAL'  THEN

   -- OPEN GenCursor for

  Query_Str:='Select * From
(
 select IMAGETYPE as Stage,DATESTAMP as DateStamp,'||''''||'Forward'||''''||' as DealType,DEAL_COMPANY_CODE as CompanyCode,
                       pkgreturncursor.fncgetdescription(deal_record_status,2) as ImageType,
                       Workdate as ExecuteDate,
                       Deal_Deal_Number As Dealnumber,
                       pkgreturncursor.fncgetdescription(deal_counter_party,2) as CounterParty,
                       Pkgreturncursor.Fncgetdescription(Deal_Base_Currency,2) As Basecurrency,
                       pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                       Pkgreturncursor.Fncgetdescription(Deal_Buy_Sell,2) As Buysell,
                       deal_base_amount as BaseAmount,
                       Deal_Other_Amount As Otheramount,
                       Deal_Spot_Rate As Spotrate,
                       Deal_Forward_Rate As Forwardrate,
                       DEAL_MARGIN_RATE as MarginRate,
                       Deal_Exchange_Rate As Exchangerate,
                     --  Deal_Maturity_From As Maturityfrom,
                       deal_maturity_date as MaturityDate,
                      extractValue(DEAL_ENTRY_DETAIL,'||''''||'AuditTrails/AuditTrail/UserName'||''''||') As Userid,
                       Deal_Dealer_Remarks As Dealerremarks ,
                       '||''''||frmDate||''''||'  as FromDate,'||''''||toDate||''''||'  as ToDate,
                        sysdate as WorkDate,pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName('||'''' ||varUserID ||''''||') as CompanyName
                From   Trsystem101
                Where  Workdate Between  '||''''||frmDate||''''||'  And '||''''||toDate||''''||' 
                  And Deal_Record_Status Not In (10200001,10200005)';

  Query_Str1:='Union
                Select Imagetype As Stage,Datestamp As Datestamp,'||''''||'Future'||''''||' as DealType,CFUT_COMPANY_CODE as CompanyCode,
                       Pkgreturncursor.Fncgetdescription(CFUT_RECORD_STATUS,2) As Imagetype,
                       Workdate As Executedate,
                       Cfut_Deal_Number As Dealnumber,
                       Pkgreturncursor.Fncgetdescription(Cfut_Counter_Party,2) As Counterparty,
                       Pkgreturncursor.Fncgetdescription(Cfut_Base_Currency,2) As Basecurrency,
                       Pkgreturncursor.Fncgetdescription(Cfut_Other_Currency,2) As Othercurrency,
                       Pkgreturncursor.Fncgetdescription(Cfut_Buy_Sell,2) As Buysell,
                       Cfut_Base_Amount As Baseamount,
                       Cfut_Other_Amount As Otheramount,
                       0 As Spotrate,
                       0 As Forwardrate,
                       0 As Marginrate,
                       Cfut_Exchange_Rate As Exchangerate,
                     -- '' As Maturityfrom,
                       CFUT_MATURITY_DATE As Maturitydate,
                       extractValue(CFUT_ENTRY_DETAIL,'||''''||'AuditTrails/AuditTrail/UserName'||''''||') As Userid,
                       CFUT_DEALER_REMARK As Dealerremarks ,
                       '||''''||frmDate||''''||'  as FromDate,'||''''||toDate||''''||'  as ToDate,
                       sysdate as WorkDate,pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName( '||''''||varUserID||''''||' ) as CompanyName
                From   Trsystem105
                Where  Workdate Between   '||''''||frmDate||''''||' And  '||''''||toDate||''''||'
                  And Cfut_Record_Status Not In (10200001,10200005)';
 Query_Str2:='union
               Select Imagetype As Stage,Datestamp As Datestamp,'||''''||'Option'||''''||' As Dealtype,COPT_COMPANY_CODE as CompanyCode,
                       Pkgreturncursor.Fncgetdescription(COPT_RECORD_STATUS,2) As Imagetype,
                       Workdate As Executedate,
                       Copt_Deal_Number As Dealnumber,
                       Pkgreturncursor.Fncgetdescription(Copt_Counter_Party,2) As Counterparty,
                       Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) As Basecurrency,
                       Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) As Othercurrency,
                       '||''''||''||''''||' As Buysell,
                       Copt_Base_Amount As Baseamount,
                       Copt_Other_Amount As Otheramount,
                      BP As Spotrate,
                      Bc As Forwardrate,
                      Sp As Marginrate,
                      SC As Exchangerate,
                     -- '' As Maturityfrom,
                       Copt_Maturity_Date As Maturitydate,
                       extractValue(COPT_ENTRY_DETAIL,'||''''||'AuditTrails/AuditTrail/UserName'||''''||') As Userid,
                       Copt_Dealer_Remark As Dealerremarks ,
                      '||''''||frmDate||''''||' as FromDate,'||''''||toDate||''''||' as ToDate,
                       sysdate as WorkDate,pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName( '||''''||varUserID||''''||'  ) as CompanyName
                       --- '||Vargroupfield||'
                From   Trsystem107
                
                Where  Workdate Between  '||''''||frmDate||''''||' And '||''''||toDate||''''||' 
                  And Copt_Record_Status Not In (10200001,10200005) )
               Where CompanyCode In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id='||''''||varUserID||''''||')
                Order By Dealnumber,Datestamp';
                      
                      delete from temp;commit;
                      insert into temp values(Query_Str,Query_Str1);commit;
                       insert into temp values(finalcondition,Query_Str2);commit;
    open gencursor for (Query_Str||Query_Str1||Query_Str2);
    Goto Process_End;
  End If;

  if varReportID= 'REMINDER' then

    Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,DEAL_SERIAL_NUMBER AS SERIALNUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,1)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,DEAL_TIME_STAMP as TIMESTMP,DEAL_USER_ID as USERID,
                        DEAL_BASE_AMOUNT AS BASEAMT,DEAL_OTHER_AMOUNT AS OTHERAMT,
                        pkgreturnreport.fncConvRs(DEAL_AMOUNT_LOCAL) AS AMTLCL,
                        DEAL_AMOUNT_LOCAL as AmountLocal,
                        DEAL_MATURITY_FROM AS MATURITYFRM,
                        DEAL_MATURITY_DATE AS MATURITYDATE,pkgreturnreport.GetSystemDate() as SystemDate,
                from   TRTRAN001
                where  DEAL_HEDGE_TRADE in(26000002) and
                       DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and ' || finalCondition ;

    OPEN GenCursor for Query_Str;
    Goto Process_End;
  end if;


 if varReportID='HDGDEALMATUREDONNXTTWODAYS'  then

     Query_Str :='  select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
                        h.FCY,h.ExchangeRate,
                        h.EXECUTEDDATE,h.USERID,
                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,h.BACKUPDEAL,
                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
                        t.TradeReference,t.TRADFCY,t.TRADEINR,
                        t.TRADERATE,t.ProductDescription,t.UserReference,
                        t.TradeMaturity,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as toDate  ' || varGroupField || '
                from ';
                    Query_Str1 :='(select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
                               pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,2) as COMPANYDESC,
                               pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                               pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                               pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                               pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                                pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) AS BACKUPDEAL,
                               pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                               DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                               pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                               DEAL_MATURITY_FROM AS MATURITYFROM,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate,
                               deal_COMPANY_CODE,DEAL_BASE_CURRENCY,DEAL_BUY_SELL,DEAL_COUNTER_PARTY,DEAL_BACKUP_DEAL
                       from    TRTRAN004,TRTRAN001
                       where   deal_RECORD_STATUS not in(10200006,10200005) and
                               HEDG_RECORD_STATUS  not in(10200006,10200005) and
                               deal_hedge_trade = 26000001 and
                               DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+)  and
                               deal_serial_number = hedg_deal_serial (+) and
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) between '||''''||frmDate||''''||' and '||''''||toDate||''''||' and
                               ((deal_process_complete = 12400001  and deal_complete_date > '||''''||toDate||''''||') or deal_process_complete = 12400002)
                      )h, ';
                       Query_Str2 :='  (select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                               pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                               pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                               TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
                               pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
                               TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                               TRAD_MATURITY_DATE as TradeMaturity
                        from   trtran002
                        where  TRAD_RECORD_STATUS not in(10200006,10200005)
                      )t
                 where  h.TRADREFERENCENO = t.TradeReference (+) ';
insert into temp(tt,tt1) values(Query_Str, query_str1 || query_str2);
commit;
      OPEN GenCursor for Query_Str||Query_Str1 ||query_str2;  
    Goto Process_End;
  end if;
     --  if   ((varReportID='HEDGEDEALFORTHEDAY') OR (varReportID='HEDGEDEALBYMATURITYDATE') or
--        (varReportID='REMHEDGEDEALFORTHEDAY')  or (varReportID='REMHDGDEALMATUREDONNXTTWODAYS') or
--        (varReportID='REMHEDGEDEALFORTOM') or (varReportID='REMHEDGEDEALFORSPOT')) THEN
--
--    Query_Str :='select HEDG_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,HEDG_DEAL_NUMBER AS DEALNO,
--                        pkgreturncursor.fncgetdescription(HEDG_COMPANY_CODE,1) as COMPANYDESC,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
--                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
--                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
--                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),1)  AS FCY,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),2) as ExchangeRate,
--                        DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
--                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),3),
--
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),5)))  as HEDGELCLAMT,
--                        DEAL_LOCAL_RATE AS LOCALRATE,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),1) AS BASEAMT,
--                        DEAL_MATURITY_FROM AS MATURITYFROM,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER)) AS MATURITYDATE,
--                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
--                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
--                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
--                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
--                        pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
--                        TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
--                        TRAD_MATURITY_DATE as TradeMaturity,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),3) as OtherAmount,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),4) as LocalRate,
--                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                FROM    TRTRAN004,TRTRAN002,TRTRAN001
--                WHERE   deal_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||') and
--                        HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER AND
--                        HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE ';
--    if varReportID= 'HEDGEDEALFORTHEDAY'  then
--                Query_Str := Query_Str || finalCondition || ' order by DEAL_DEAL_NUMBER ';
--    elsif  varReportID = 'HEDGEDEALBYMATURITYDATE' then
--                Query_Str := Query_Str ||' and
--                             PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER)) =
--                             '||''''||frmDate||''''||'
--                             and ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
--                             ORDER BY DEAL_MATURITY_DATE ';
--
--    elsif ((varReportID='REMHEDGEDEALFORTHEDAY') or (varReportID='REMHEDGEDEALFORTOM') or (varReportID='REMHEDGEDEALFORSPOT')) THEN
--                Query_Str := Query_Str || ' and deal_process_complete = 12400002 ' || finalCondition;
--    end if;
--    if  varReportID='REMHDGDEALMATUREDONNXTTWODAYS' then
--                toDate := frmDate + 2;
--                Query_Str := Query_Str ||' and deal_maturity_date between '||''''||(frmDate+1)||''''||' and '||''''||toDate||'''';
--    end if;
--    insert into temp values(Query_Str,varReportID);
--    commit;
--
--    OPEN GenCursor for Query_Str;
--    Goto Process_End;
--  end if;
if (varReportID='HEDGEDEALBYMATURITYDATE')  THEN

    Query_Str :='select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
                        h.FCY,h.ExchangeRate,
                        h.EXECUTEDDATE,h.USERID,
                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,
                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
                        t.TradeReference,t.TRADFCY,t.TRADEINR,
                        t.TRADERATE,t.ProductDescription,t.UserReference,
                        t.TradeMaturity,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from ';
                     Query_Str1 :='(select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
                                pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
                                pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                                pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                                pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                                DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                                pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                                DEAL_MATURITY_FROM AS MATURITYFROM,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate
                        from    TRTRAN004,TRTRAN001
                        where   deal_RECORD_STATUS not in(10200006,10200005) and
                                HEDG_RECORD_STATUS not in(10200006,10200005) and
                                deal_hedge_trade = 26000001 and
                                DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+)  and
                                deal_serial_number = hedg_deal_serial (+) and
                                --need to check below function
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) = '||''''||frmDate||''''||' and
                                ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                        )h,';
             Query_Str2 :='(select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                                pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                                pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                                TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
                                pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
                                TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                                TRAD_MATURITY_DATE as TradeMaturity
                         from   trtran002
                         where  TRAD_RECORD_STATUS not in(10200006,10200005)
                         )t
                 where  h.TRADREFERENCENO = t.TradeReference (+)
                 order by h.MATURITYDATE ';
   -- delete from temp;commit;
    insert into temp values(Query_Str,Query_Str1 ||Query_Str2);commit;
    OPEN GenCursor for Query_Str||Query_Str1 ||Query_Str2;
    Goto Process_End;
  end if;


 If Varreportid='ForwardDEALTICKET' THEN
  Query_Str :='
       SELECT  DEAL_DEAL_NUMBER AS DEALNUMBER,
        DEAL_EXECUTE_DATE AS EXDATE,
        pkgreturncursor.fncgetdescription (DEAL_BUY_SELL,2) AS BUYSELL,
        pkgreturncursor.fncgetdescription (DEAL_BASE_CURRENCY,2)  '||'||'||''''||'/'||''''||'||' ||'
        pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2) AS CURRENCY,
        DEAL_BASE_AMOUNT AS BASAMT,
        DEAL_EXCHANGE_RATE AS EXRATE,
        pkgreturncursor.fncgetdescription (DEAL_COUNTER_PARTY,2) AS BANK,
        DEAL_MATURITY_DATE AS MATURITYDATE,

        DEAL_DEALER_REMARKS AS REMARKS,
         DEAL_SPOT_RATE as spotrate,
        DEAL_MARGIN_RATE as marginrate,
        DEAL_Forward_RATE as frwrate,
        pkgreturncursor.fncgetdescription (DEAL_COMPANY_CODE,1) as CompanyName,
        to_date('||''''||frmDate||''''||') as FromDate,
        to_date('||''''||toDate||''''||') as ToDate
      FROM   TRTRAN001
      WHERE  deal_execute_date between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
       and  deal_record_status not in(10200005,10200006) ';
       Insert Into Temp Values (Query_Str,finalcondition);Commit;
     Open Gencursor For Query_Str || finalcondition || ' order by deal_execute_date' ;

 Goto Process_End;
 End If;

 If Varreportid='OPTIONDEALTICKET' THEN

  Query_Str :='

SELECT  COPT_DEAL_NUMBER AS DEALNUMBER,
        COPT_EXECUTE_DATE AS EXDATE,
--        (SELECT pkgreturncursor.fncgetdescription (COSU_BUY_SELL,2)
--          FROM TRTRAN072
--          WHERE COSU_DEAL_NUMBER=COPT_DEAL_NUMBER
--             GROUP BY COSU_BUY_SELL)AS BUYSELL,
        pkgreturncursor.fncgetdescription (COPT_BASE_CURRENCY,2)  '||'||'||''''||'/'||''''||'||' ||'
        pkgreturncursor.fncgetdescription (COPT_OTHER_CURRENCY,2) AS CURRENCY,
        COPT_BASE_AMOUNT AS BASAMT,
         ( select round( avg(cosu_strike_rate),4) from trtran072
          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
            and cosu_option_type=32400001) "BC",
         (select avg(cosu_strike_rate) from trtran072
           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
             and cosu_option_type=32400002) "BP",
         (select avg(cosu_strike_rate) from trtran072
           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
             and cosu_option_type=32400002) "SP",
         (select avg(cosu_strike_rate) from trtran072
           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
             and cosu_option_type=32400001) "SC",
        pkgreturncursor.fncgetdescription (COPT_COUNTER_PARTY,2) AS BANK,
        COPT_EXPIRY_DATE AS MATURITYDATE,
        COPT_MATURITY_DATE AS SETTLEMENTDATE,
        COPT_PREMIUM_RATE  AS PREMRATE,
        COPT_PREMIUM_AMOUNT AS PREMAMOUNT,
        pkgreturncursor.fncgetdescription (COPT_REFRATE_CODE,2) as REFRATECODE,
        COPT_EXCHANGE_CODE as EXCHANGECODE,
        COPT_PREMIUM_EXRATE AS PREMEXRATE,
        COPT_PREMIUM_LOCAL AS PREMLOCAL,
        COPT_DEALER_REMARK AS REMARKS,
        COPT_PREMIUM_VALUEDATE  AS VALUEDATE,
        COPT_TIME_STAMP AS TIMESTAM,
       pkgreturncursor.fncgetdescription ( COPT_COMPANY_CODE,1) CompanyName,
        pkgreturncursor.fncgetdescription ( COPT_CONTRACT_TYPE,1) CONTRACTTYPE,
      --   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
         to_date('||''''||frmDate||''''||') as FromDate,
        to_date('||''''||toDate||''''||') as ToDate
 FROM   TRTRAN071
 WHERE   COPT_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
        and  COPT_RECORD_STATUS not in(10200005,10200006)';
          Insert Into Temp Values (Query_Str,finalcondition);Commit;
     Open Gencursor For Query_Str || finalcondition || ' order by COPT_EXECUTE_DATE' ;

   Goto Process_End;
 End If;


 If Varreportid='OPTIONDEALTICKETCANCLE' THEN

  Query_Str :='

SELECT  COPT_DEAL_NUMBER AS DEALNUMBER,
        COPT_EXECUTE_DATE AS EXDATE,

        pkgreturncursor.fncgetdescription (COPT_BASE_CURRENCY,2)  || '/' ||
        pkgreturncursor.fncgetdescription (COPT_OTHER_CURRENCY,2) AS CURRENCY,
        COPT_BASE_AMOUNT AS BASAMT,
         ( select round( avg(cosu_strike_rate),4) from trtran072
          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
            and cosu_option_type=32400001) "BC",
         (select avg(cosu_strike_rate) from trtran072
           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
             and cosu_option_type=32400002) "BP",
         (select avg(cosu_strike_rate) from trtran072
           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
             and cosu_option_type=32400002) "SP",
         (select avg(cosu_strike_rate) from trtran072
           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
             and cosu_option_type=32400001) "SC",
        pkgreturncursor.fncgetdescription (COPT_COUNTER_PARTY,2) AS BANK,
        COPT_EXPIRY_DATE AS MATURITYDATE,
        COPT_MATURITY_DATE AS SETTLEMENTDATE,
        COPT_PREMIUM_RATE  AS PREMRATE,
        COPT_PREMIUM_AMOUNT AS PREMAMOUNT,
        COPT_PREMIUM_EXRATE AS PREMEXRATE,
        COPT_PREMIUM_LOCAL AS PREMLOCAL,
        COPT_DEALER_REMARK AS REMARKS,
        COPT_PREMIUM_VALUEDATE  AS VALUEDATE,
        COPT_TIME_STAMP AS TIMESTAM,
        CORV_RBI_REFRATE AS CANCLERATE,
        CORV_PROFIT_LOSS AS AMOUNTTPAYABLE,
        CORV_EXERCISE_DATE as cancledate,
         pkgreturncursor.fncgetdescription ( COPT_COMPANY_CODE,1) CompanyName,
       --  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
       to_date('||''''||frmDate||''''||') as FromDate,
        to_date('||''''||toDate||''''||') as ToDate
 FROM   TRTRAN071,TRTRAN073
 WHERE  COPT_DEAL_NUMBER=CORV_DEAL_NUMBER
       and  COPT_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
       AND  CORV_RECORD_STATUS not in(10200005,10200006)
       AND  COPT_RECORD_STATUS not in(10200005,10200006)';
       Insert Into Temp Values (Query_Str,finalcondition);Commit;
     Open Gencursor For Query_Str || finalcondition || 'order by COPT_EXECUTE_DATE ' ;
   Goto Process_End;
 End If;

 If Varreportid='ForwardDEALTICKETEXE' THEN
  Query_Str :=' SELECT  CDEL_DEAL_NUMBER AS DEALNUMBER,
        CDEL_CANCEL_DATE AS EXDATE,
        pkgreturncursor.fncgetdescription (DEAL_BUY_SELL,2) AS BUYSELL,
        pkgreturncursor.fncgetdescription (DEAL_BASE_CURRENCY,2)  '||'||'||''''||'/'||''''||'||' ||'
        pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2) AS CURRENCY,
        CDEL_CANCEL_AMOUNT AS BASAMT,
        CDEL_CANCEL_RATE AS EXRATE,
        pkgreturncursor.fncgetdescription (DEAL_COUNTER_PARTY,2) AS BANK,
        DEAL_MATURITY_DATE AS MATURITYDATE,
        DEAL_DEALER_REMARKS AS REMARKS,
         DEAL_SPOT_RATE as spotrate,
        DEAL_MARGIN_RATE as marginrate,
        DEAL_Forward_RATE as frwrate,
        pkgreturncursor.fncgetdescription (DEAL_COMPANY_CODE,1) as CompanyName,
        to_date('||''''||frmDate||''''||') as FromDate,
        to_date('||''''||toDate||''''||') as ToDate
      FROM   TRTRAN001,trtran006
      WHERE  DEAL_DEAL_NUMBER=CDEL_DEAL_NUMBER
        and CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
       and  deal_record_status not in(10200005,10200006) ';
        Insert Into Temp Values (Query_Str,finalcondition);Commit;
     Open Gencursor For Query_Str || finalcondition || ' order by CDEL_CANCEL_DATE' ;
     Goto Process_End;
 End If;

--if varReportID='HEDGEDEALFORTHEDAY' then
--
--     Query_Str :='select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
--                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
--                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
--                        h.FCY,h.ExchangeRate,
--                        h.EXECUTEDDATE,h.USERID,
--                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,
--                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
--                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
--                        t.TradeReference,t.TRADFCY,t.TRADEINR,
--                        t.TRADERATE,t.ProductDescription,t.UserReference,
--                        t.TradeMaturity,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                 from  ';
--                     Query_Str1 :='(select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
--                                pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
--                                pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
--                                pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
--                                pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
--                                pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
--                                pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
--                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
--                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
--                                DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
--                                pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
--                                                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
--                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
--                                DEAL_MATURITY_FROM AS MATURITYFROM,
--                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
--                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
--                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate
--                        from    TRTRAN004,TRTRAN001
--                        where   deal_RECORD_STATUS not in(10200006,10200005) and
--                                HEDG_RECORD_STATUS not in(10200006,10200005) and
--                                deal_hedge_trade = 26000001 and
--                                DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+) and
--                                deal_serial_number = hedg_deal_serial (+) '||finalCondition||'
--                        )h,';
--          Query_Str2 :='(select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
--                                pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
--                                pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
--                                TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
--                                pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
--                                TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
--                                TRAD_MATURITY_DATE as TradeMaturity
--                         from   trtran002
--                         where  TRAD_RECORD_STATUS not in(10200006,10200005)
--                         )t
--                 where  h.TRADREFERENCENO = t.TradeReference (+)
--                 order by h.DEALNO';
--      delete from temp;commit;
--      insert into temp values(Query_Str,Query_Str1 || Query_Str2);commit;
--      OPEN GenCursor for Query_Str||Query_Str1 ||Query_Str2;
--    Goto Process_End;
--  end if;


if varReportID='HEDGEDEALFORTHEDAY' then

     Query_Str :='select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
                        h.FCY,h.ExchangeRate,
                        h.EXECUTEDDATE,h.USERID,
                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,
                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
                        t.TradeReference,t.TRADFCY,t.TRADEINR,
                        t.TRADERATE,t.ProductDescription,t.UserReference,
                        t.TradeMaturity,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from  ';
                     Query_Str1 :='(select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
                                pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
                                pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                                pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                                pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                                DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                                pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                                DEAL_MATURITY_FROM AS MATURITYFROM,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate
                        from    TRTRAN004,TRTRAN001
                        where   deal_RECORD_STATUS not in(10200006,10200005) and
                             --   HEDG_RECORD_STATUS not in(10200006,10200005) and
                                deal_hedge_trade = 26000001 and
                                DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+) and
                                deal_serial_number = hedg_deal_serial (+)
                                '||finalCondition||'
                        )h,';
          Query_Str2 :='(select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                                pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                                pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                                TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
                                pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
                                TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                                TRAD_MATURITY_DATE as TradeMaturity
                         from   trtran002
                         where  TRAD_RECORD_STATUS not in(10200006,10200005)
                         )t
                 where  h.TRADREFERENCENO = t.TradeReference (+)
                 order by h.DEALNO';
      delete from temp;commit;
      insert into temp values(Query_Str,Query_Str1 || Query_Str2);commit;
      OPEN GenCursor for Query_Str||Query_Str1 ||Query_Str2;
    Goto Process_End;
  end if;

  if  ((varReportID='REMHEDGEDEALFORTHEDAY')  or (varReportID='REMHEDGEDEALFORTOM') or (varReportID='REMHEDGEDEALFORSPOT')) then

    Query_Str :='select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
                        h.FCY,h.ExchangeRate,
                        h.EXECUTEDDATE,h.USERID,
                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,
                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
                        t.TradeReference,t.TRADFCY,t.TRADEINR,
                        t.TRADERATE,t.ProductDescription,t.UserReference,
                        t.TradeMaturity,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as toDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from
                        (select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
                                pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
                                pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                                pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                                pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                                DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                                pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                                DEAL_MATURITY_FROM AS MATURITYFROM,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate
                        from    TRTRAN004,TRTRAN001
                        where   deal_RECORD_STATUS not in(10200006,10200005) and
                                HEDG_RECORD_STATUS  not in(10200006,10200005) and
                                deal_hedge_trade = 26000001 and
                                DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+) and
                                deal_serial_number = hedg_deal_serial (+) and
                                deal_process_complete = 12400002 '|| finalCondition||'
                        )h, ';
          Query_Str1 :='        (select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                                pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                                pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                                TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
                                pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
                                TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                                TRAD_MATURITY_DATE as TradeMaturity
                         from   trtran002
                         where  TRAD_RECORD_STATUS not in(10200006,10200005)
                         )t
                 where  h.TRADREFERENCENO = t.TradeReference (+)
                 order by h.DEALNO';
    OPEN GenCursor for Query_Str||Query_Str1;
    Goto Process_End;
  end if;

  if varReportID='REMHDGDEALMATUREDONNXTTWODAYS' then
      Query_Str :='select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
                        h.FCY,h.ExchangeRate,
                        h.EXECUTEDDATE,h.USERID,
                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,
                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
                        t.TradeReference,t.TRADFCY,t.TRADEINR,
                        t.TRADERATE,t.ProductDescription,t.UserReference,
                        t.TradeMaturity,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as toDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from
                        (select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
                                pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
                                pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                                pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                                pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                                pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                                DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                                pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                                DEAL_MATURITY_FROM AS MATURITYFROM,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate
                        from    TRTRAN004,TRTRAN001
                        where   deal_RECORD_STATUS not in(10200006,10200005) and
                                HEDG_RECORD_STATUS  not in(10200006,10200005) and
                                deal_hedge_trade = 26000001 and
                                DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+) and
                                deal_serial_number = hedg_deal_serial (+) and
                                deal_maturity_date between '||''''||(frmDate+1)||''''||' and '||''''||(toDate+2)||''''||'
                        )h, ';
          Query_Str1 :='(select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                                pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                                pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                                TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
                                pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
                                TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                                TRAD_MATURITY_DATE as TradeMaturity
                         from   trtran002
                         where  TRAD_RECORD_STATUS not in(10200006,10200005)
                         )t
                 where  h.TRADREFERENCENO = t.TradeReference (+) ';
insert into temp(tt,tt1) values('dddd', query_str || query_str1);
commit;
      OPEN GenCursor for Query_Str||Query_Str1;
    Goto Process_End;
  end if;

--  if varReportID='HDGDEALMATUREDONNXTTWODAYS'  then
--
--    OPEN GenCursor for
--                select  HEDG_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,HEDG_DEAL_NUMBER AS DEALNO,
--                        pkgreturncursor.fncgetdescription(HEDG_COMPANY_CODE,1) as COMPANYDESC,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
--                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
--                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
--                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),1)  AS FCY,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),2) as ExchangeRate,
--                        DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
--                        pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),3),
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),5)))  as HEDGELCLAMT,
--                        DEAL_LOCAL_RATE AS LOCALRATE,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),1) AS BASEAMT,
--                        DEAL_MATURITY_FROM AS MATURITYFROM,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER)) AS MATURITYDATE,
--                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
--                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
--                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
--                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
--                        pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
--                        TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
--                        TRAD_MATURITY_DATE as TradeMaturity,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),3) as OtherAmount,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),4) as LocalRate,
--                        pkgreturnreport.GetSystemDate() as SystemDate,frmDate as AsonDate,toDate as ToDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                FROM    TRTRAN004,TRTRAN002,TRTRAN001
--                WHERE   deal_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive) and
--                        HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER AND
--                        ((deal_process_complete = 12400001  and deal_complete_date > toDate) or deal_process_complete = 12400002) and
--                        HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE  and
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER)) between
--                                                    frmDate  and toDate order by DEAL_MATURITY_DATE ;
--    Goto Process_End;
--  end if;

if varReportID='HDGDEALMATUREDONNXTTWODAYS'  then

    OPEN GenCursor for
                select h.COMPANYCODE,h.TRADREFERENCENO,h.DEALNO,
                        h.COMPANYDESC,h.BASECRNCY,h.OTHERCRNCY,h.COUNTERPRTY,
                        h.COUNTERPRTY,h.BUYSELL,h.SWAPOUTRIGHT,
                        h.FCY,h.ExchangeRate,
                        h.EXECUTEDDATE,h.USERID,
                        h. HEDGELCLAMT,h.LOCALRATE,h.BASEAMT,
                        h.MATURITYDATE,h.MATURITYFROM,h.OtherAmount,h.LocalRate,
                        t.TRADECRNCY,t.IMPORTEXPORT,t.LOCALBANK,
                        t.TradeReference,t.TRADFCY,t.TRADEINR,
                        t.TRADERATE,t.ProductDescription,t.UserReference,
                        t.TradeMaturity,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
                        frmDate as AsonDate,toDate as ToDate
                from
                       (select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,deal_deal_number AS DEALNO,
                               pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
                               pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                               pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                               pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                               pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                               pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                               DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                               pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                               DEAL_MATURITY_FROM AS MATURITYFROM,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate
                       from    TRTRAN004,TRTRAN001
                       where   deal_RECORD_STATUS not in(10200006,10200005) and
                               HEDG_RECORD_STATUS  not in(10200006,10200005) and
                               deal_hedge_trade = 26000001 and
                               DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+)  and
                               deal_serial_number = hedg_deal_serial (+) and
                               PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) between frmDate and toDate and
                               ((deal_process_complete = 12400001  and deal_complete_date > toDate) or deal_process_complete = 12400002)
                       )h,
                       (select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                               pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                               pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                               TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_FCY AS TRADFCY,
                               pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
                               TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                               TRAD_MATURITY_DATE as TradeMaturity
                        from   trtran002
                        where  TRAD_RECORD_STATUS not in(10200006,10200005)
                       )t
                 where  h.TRADREFERENCENO = t.TradeReference (+)
                 order by h.MATURITYDATE;
    Goto Process_End;
  end if;

  if varReportID = 'ForwardSUMMARY'  then
  Query_Str :='
  select  a.COMPANY,a.Bank,
         pkgreturncursor.fncgetdescription(deal_backup_deal, 2) backupdeal,
         sum(decode(buysell, 25300001, a.BASEAMT, 0)) buyamt,
         sum(decode(buysell, 25300002, a.BASEAMT, 0)) sellamt,
         sum(a.BASEAMT) BASEAMT,
        sum( pkgreturnreport.fncgetprofitloss(a.BaseAmt,a.M2MRate,a.ExchangeRate,a.buysell)) PROFITLOSS ,
          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
        '||''''||frmDate||''''||' as FromDate,'||''''||toDate||''''||' as ToDate
  from  (select pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) COMPANY,
               pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) BANK,
               pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1, 1,  '||''''||frmDate||''''||') BASEAMT,
               DEAL_EXCHANGE_RATE ExchangeRate, deal_buy_sell buysell,
               deal_backup_deal,
               pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,
                    '||''''||frmDate||''''||',   deal_buy_sell,
               pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY, '||''''||frmDate||''''||',
               deal_maturity_date),null, 1) M2MRate,
               '||''''||frmDate||''''||' as FromDate,'||''''||toDate||''''||' as ToDate
         FROM TRTRAN001
      WHERE ((deal_process_complete                               = 12400001
      AND deal_complete_date                                      > '||''''||frmDate||''''||')
      OR deal_process_complete                                    = 12400002)
      AND DEAL_RECORD_STATUS NOT                                 IN (10200005,10200006)
      '||finalcondition||') a
       group by  a.COMPANY, a.Bank, a.buysell, deal_backup_deal, pkgreturnreport.getCompanyName(), '||''''||frmDate||''''||', '||''''||toDate||''''||'';

   OPEN GenCursor for Query_Str;
   Goto Process_End;
   end if;

   if varReportID= 'M2MRPTMONTHWISE' then
   LocalBank := 'dd/mm/yyyy';
   mFieldCondition := 'MON';
--   OPEN GenCursor for
--        Insert Into Temp Values ('enter','enter2');Commit;
   Query_Str :=   'SELECT pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) Company,
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) Bank,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)Buysale,
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1)Remarks,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm1,';
  Query_Str1 :=      'CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),1),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm2,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),2),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm3,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),3),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm4,';
Query_Str2 :=       '        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),4),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm5,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),5),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm6,';
 Query_Str3 := 'CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),6),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm7,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),7),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm8,';
  Query_Str4 :=    'CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),8),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm9,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),9),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm10,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),10),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm11,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),11),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm12,';
    Query_Str5 :=     'TRUNC(ROUND(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Bookingrate,
        TRUNC(ROUND(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Cancelrate,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'))Outstanding,
        SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell)) profitloss,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Bookoutstanding,';
    Query_Str6 :=    '        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Canceloutstanig,
        '||''''||frmDate||''''||' AS FromDate, pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CURRENCY,
        '||''''||toDate||''''||'  AS ToDate ' || varGroupField || '
      FROM TRTRAN001
  WHERE ((deal_process_complete = 12400001
      AND deal_complete_date        > '||''''||frmDate||''''||')
      OR deal_process_complete      = 12400002)
      AND DEAL_RECORD_STATUS NOT   IN (10200005,10200006) and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') <> 0
      '||finalcondition||'
      GROUP BY pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2),DEAL_BASE_CURRENCY,
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2),
        pkgreturnreport.getCompanyName(),
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2),
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1),DEAL_BUY_SELL,DEAL_COMPANY_CODE,DEAL_BACKUP_DEAL,
        DEAL_MATURITY_DATE,
        '||''''||frmDate||''''||',
        '||''''||toDate||''''||'';

        Insert Into Temp Values (Query_Str,Query_Str1);Commit;
        Insert Into Temp Values (Query_Str2,Query_Str3);Commit;
        Insert Into Temp Values (Query_Str4,Query_Str5);Commit;
         Insert Into Temp Values (Query_Str6,'chandra');Commit;
        OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4||Query_Str5||Query_Str6 ;
        Goto Process_End;
 end if;


  if varReportID= 'M2MRPTMONTHWISECRS' then
   LocalBank := 'dd/mm/yyyy';
   mFieldCondition := 'MON';
--   OPEN GenCursor for
--        Insert Into Temp Values ('enter','enter2');Commit;
   Query_Str :=   'SELECT pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) Company,
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) Bank,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)Buysale,
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1)Remarks,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm1,';
  Query_Str1 :=      'CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),1),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm2,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),2),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm3,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),3),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm4,';
Query_Str2 :=       '        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),4),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm5,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),5),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm6,';
 Query_Str3 := 'CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),6),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm7,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),7),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm8,';
  Query_Str4 :=    'CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),8),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm9,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),9),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm10,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),10),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm11,
        CASE
          WHEN TO_CHAR(to_date(DEAL_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),11),'||''''||mFieldCondition||''''||')
          THEN SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))
        END AS Clm12,';
    Query_Str5 :=     'TRUNC(ROUND(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Bookingrate,
        TRUNC(ROUND(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Cancelrate,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'))Outstanding,
        SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell)) profitloss,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Bookoutstanding,';
    Query_Str6 :=    '        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Canceloutstanig,
        '||''''||frmDate||''''||' AS FromDate,
        '||''''||toDate||''''||'  AS ToDate ' || varGroupField || '
      FROM TRTRAN001
  WHERE ((deal_process_complete = 12400001
      AND deal_complete_date        > '||''''||frmDate||''''||')
      OR deal_process_complete      = 12400002)
      AND DEAL_RECORD_STATUS NOT   IN (10200005,10200006) and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') <> 0
      '||finalcondition||'
      GROUP BY pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2),
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2),
        pkgreturnreport.getCompanyName(),
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2),
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1),DEAL_BUY_SELL,DEAL_COMPANY_CODE,DEAL_BACKUP_DEAL,
        DEAL_MATURITY_DATE,
        '||''''||frmDate||''''||',
        '||''''||toDate||''''||'';

        OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4||Query_Str5||Query_Str6 ;
        Goto Process_End;
 end if;


  if varReportID= 'OPTIONSUMMARY' then

Query_str := 'select  pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) COMPANY,
        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) BANK,
        --sum(COPT_BASE_AMOUNT) basamt,
        sum(pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||'))basamt,
        nvl(sum(CORV_PROFIT_LOSS),0) profitloss,
        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
       '||''''||frmDate||''''||' as FromDate
 --updated by nilesh on 050412
 From trtran071 left outer join trtran073
 on COPT_DEAL_NUMBER=CORV_DEAL_NUMBER
 where  ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
  and (COPT_EXECUTE_DATE <= '||''''||frmDate||''''||')
   and copt_record_status not in(10200005,10200006)
       -- AND (COPT_PROCESS_COMPLETE =12400002 or
       group by COPT_COMPANY_CODE, COPT_COUNTER_PARTY
       order by copt_company_code,copt_counter_party';

       insert into temp values (Query_str,'');
       commit;
  OPEN GenCursor for Query_str;
        Goto Process_End;
  end if;


  If Varreportid='OVERALLDEALSPANDL' THEN
Open Gencursor For
          with tblDeals as
          (select copt_counter_party bank,
          sum(decode(copt_backup_deal, 33300001, copt_base_amount, 0)) Bullion,
          sum(decode(copt_backup_deal, 33300002, copt_base_amount, 0)) B2B,
          sum(decode(copt_backup_deal, 33300003, copt_base_amount, 0)) Forward,
          sum(decode(copt_backup_deal, 33300004, copt_base_amount, 0)) SBLC,
          sum(decode(copt_backup_deal, 33300005, copt_base_amount, 0)) outright,
          sum(copt_base_amount) Options
          from trtran071
          where copt_process_complete  = 12400002
          group by copt_counter_party)
          select pkgReturnCursor.fncGetDescription(lbnk_pick_code, 2) bankname,
          pkgReturnCursor.fncGetDescription(lbnk_company_code, 2) companyname, a.*,
          NVL((select sum(deal_base_amount)
            from trtran001
            where lbnk_pick_code = deal_counter_party
            and deal_process_complete = 12400002),0) Forwards,
            pkgreturnreport.getCompanyName(varUserID) as CompanyName1,
            frmDate as  FromDate ,
            ToDate as ToDate
          from trmaster306
          left outer join tbldeals a
          on lbnk_pick_code = bank
          order by lbnk_company_code, lbnk_pick_code;
    Goto Process_End;
 End If;

--------------- 16-jun-09 updates ends
if varReportID =  'OUTSTANDINGHEDGEDEAL' then
  numError:=fncGetOustanding(frmdate,finalcondition);

    Query_Str:=' select COMPANYCODE,TRADREFERENCENO,DEALNO,HDGUSERREF,
          COMPANYDESC,BASECRNCY,OTHERCRNCY,
          COUNTERPRTY,BUYSELL,SWAPOUTRIGHT,
          FCY,ExchangeRate,EXECUTEDDATE,USERID,
          HEDGELCLAMT,LOCALRATE,BASEAMT,
          MATURITYFROM,MATURITYDATE,OtherAmount,LocalRate,
          TTRADECRNCY as TRADECRNCY,TIMPORTEXPORT as IMPORTEXPORT,
          TLOCALBANK as LOCALBANK,
          TTradeReference as TradeReference,TTRADFCY as TRADFCY,
          pkgreturnreport.fncconvrs(TTRADEINR) as TRADEINR,
          TTRADERATE as TRADERATE,TProductDescription as ProductDescription,
          TUserReference as UserReference,TTradeMaturityFrm as TradeMaturityFrm,
          TTradeMaturity as TradeMaturity,
          pkgreturncursor.fncgetdescription(COMPANYCODE,2) as company,
          COMPANYCODE as companycode,
          to_date('||''''||frmDate||''''||') as AsonDate,
          pkgreturnreport.GetSystemDate() as SystemDate,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
          DEALBANKREFE as DealBankRef,TTRADEDATE as TradeDate
          from trsystem989 where fcy >0  ' ;--|| finalcondition;

   OPEN GenCursor for
        Query_Str || ' order by EXECUTEDDATE ' ;

                   --                         (select deal_COMPANY_CODE AS COMPANYCODE,HEDG_TRADE_REFERENCE AS TRADREFERENCENO,
--                                 deal_deal_number AS DEALNO,deal_user_reference as HDGUSERREF,
--                                 pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
--                                 pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
--                                 pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
--                                 pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
--                                 pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
--                                 pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
--                                 pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) AS FCY,
--                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
--                                 DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
--                                 pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
--                                                                  PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
--                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
--                                 DEAL_MATURITY_FROM AS MATURITYFROM,
--                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
--                                 PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
--                                 decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2),PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4)) as LocalRate
--                         from    TRTRAN004,TRTRAN001
--                         where   deal_RECORD_STATUS not in(10200006,10200005) and
--                                 deal_hedge_trade = 26000001 and
--                                 DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+)  and
--                                 deal_serial_number = hedg_deal_serial (+) and
--                                 ((deal_process_complete = 12400001  and deal_complete_date > frmDate) or deal_process_complete = 12400002) and
--                                 deal_execute_date <= frmDate
--                         )h,
--                         (select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
--                                 pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
--                                 pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
--                                 TRAD_TRADE_REFERENCE as TradeReference,
--                                 PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,gconst.AMOUNTFCY,frmDate) AS TRADFCY,
--                                 pkgreturnreport.fncConvRs(TRAD_TRADE_INR) AS TRADEINR,
--                                 TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
--                                 TRAD_MATURITY_FROM as TradeMaturityFrm ,TRAD_MATURITY_DATE as TradeMaturity
--                          from   trtran002
--                          where  TRAD_RECORD_STATUS not in(10200006,10200005)
--                         )t,
--                         (select pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) AS TRADECRNCY,
--                                 pkgreturncursor.fncgetdescription(FCLN_LOAN_TYPE,1) AS IMPORTEXPORT,
--                                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) as LOCALBANK,
--                                 FCLN_LOAN_NUMBER as TradeReference,
--                                 --PKGFOREXPROCESS.FNCGETOUTSTANDING(FCLN_LOAN_NUMBER, 0,0,gconst.AMOUNTFCY,frmDate) AS TRADFCY,
--                                 FCLN_SANCTIONED_FCY AS TRADFCY,
--                                 pkgreturnreport.fncConvRs(FCLN_SANCTIONED_INR) AS TRADEINR,
--                                 FCLN_CONVERSION_RATE AS TRADERATE,' ' as ProductDescription,FCLN_BANK_REFERENCE as UserReference,
--                                 FCLN_MATURITY_FROM as TradeMaturityFrm ,FCLN_MATURITY_TO as TradeMaturity
--                          from   trtran005
--                          where  fcln_RECORD_STATUS not in(10200006,10200005)) l
--
--                   where  h.TRADREFERENCENO = t.TradeReference (+)
--                      and h.TRADREFERENCENO = l.TradeReference (+)

        Goto Process_End;
   end if;

  if varReportID = 'REVERSEDCANCELLEDTRDDEAL' or varReportID ='TRDREVERSEDONSAMEDAY' then

    Query_Str :='select pkgreturncursor.fncgetdescription(cdel_Company_code,2) as COMPLONGDESC,
                        CDEL_DEAL_NUMBER as DEALNO,DEAL_DEALER_REMARKS as  BankDealNo,CDEL_DEALER_REMARK as CancelDealNo,
                        DEAL_EXECUTE_DATE AS EXDATE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(deal_hedge_trade,2) as DealType,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,DEAL_OTHER_CURRENCY AS CurrencyCode,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) AS BKNAME,
                        CDEL_TRADE_REFERENCE AS UnderlyingBank,
                        DEAL_BASE_AMOUNT AS BASEAMT,
                        --pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) AS BASEAMT,
                        DEAL_EXCHANGE_RATE AS EXRATE,
                        DEAL_OTHER_AMOUNT  AS OTHERAMT,
                        --(pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) *  deal_exchange_rate) AS OTHERAMT,
                        decode(DEAL_LOCAL_RATE,0,DEAL_EXCHANGE_RATE,DEAL_LOCAL_RATE) as LCRATE,
                        pkgreturnreport.fncConvRs(decode(DEAL_AMOUNT_LOCAL,0,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) as AMTLCL,
                        CDEL_CANCEL_AMOUNT as CancelAmount,CDEL_CANCEL_RATE  as CancelRate,CDEL_OTHER_AMOUNT as CancelOtherAmt,
                        decode(CDEL_LOCAL_RATE,0,1,CDEL_LOCAL_RATE) as  CancelLocalRate,
                        decode(CDEL_CANCEL_INR,0,CDEL_OTHER_AMOUNT,CDEL_CANCEL_INR) as CancelInr,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        cdel_profit_loss as NewProfitLoss,
                        abs((case when cdel_profit_loss > 0 then  cdel_profit_loss else 0 end)) as Profit,
                        abs((case when cdel_profit_loss < 0 then  cdel_profit_loss else 0 end)) as Loss,
                        CDEL_DEALER_REMARK as DealerRemarks,
                        CDEL_CANCEL_DATE as CancelDate,DEAL_MATURITY_DATE AS MATURITYDATE,DEAL_MATURITY_FROM as MATURITYFRM,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as CancelType,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                        to_date('||''''||frmDate||''''||') as FromDate,to_date('||''''||todate||''''||') as ToDate
                from    trtran001,trtran006
                where   deal_deal_number = cdel_deal_number
                        and deal_serial_number = cdel_deal_serial ';
    if  varReportID = 'REVERSEDCANCELLEDTRDDEAL' then
                Query_Str := Query_Str || ' and DEAL_HEDGE_TRADE in('||GConst.TRADEDEAL||')
                                            and  CDEL_CANCEL_DATE <= DEAL_MATURITY_DATE
                                            and  cdel_record_status in (10200001,10200003,10200004)';
    elsif varReportID ='TRDREVERSEDONSAMEDAY' then
                Query_Str := Query_Str || ' and DEAL_HEDGE_TRADE in('||GConst.TRADEDEAL||')
                                            and CDEL_CANCEL_DATE = DEAL_EXECUTE_DATE
                                            and cdel_record_status in (10200001,10200003,10200004)';
    end if;
    --insert into temp values (Query_Str,finalCondition); commit;
    OPEN GenCursor for Query_Str || finalCondition ||  ' order by  CDEL_CANCEL_DATE,CDEL_DEAL_NUMBER ';
    Goto Process_End;
 end if;

 if varReportID = 'EXCHANGERATEREPORT' then

            Query_Str :='select  pkgreturncursor.fncgetdescription(DRAT_CURRENCY_CODE,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(DRAT_FOR_CURRENCY,2) AS FORCRNCY,
                        drat_rate_time as RateTime,
                        DRAT_CREATE_DATE as CreateDate,
                        DRAT_ADD_DATE as AddDate,
                        DRAT_SERIAL_NUMBER as SrNo,
                        drat_effective_date AS EffectiveDate,drat_spot_bid AS SPOTBID,drat_spot_ask AS SPOTASK,
                        drat_month1_bid AS MONTH1BID,drat_month1_ask  AS MONTH1ASK,drat_month2_bid AS MONTH2BID,drat_month2_ask AS MONTH2ASK,
                        drat_month3_bid AS MONTH3BID,drat_month3_ask AS MONTH3ASK,drat_month4_bid as MONTH4BID,drat_month4_ask as MONTH4ASK,
                        drat_month5_bid as MONTH5BID,drat_month5_ask as MONTH5ASK,drat_month6_bid AS MONTH6BID,drat_month6_ask AS MONTH6ASK,
                        drat_month7_bid as MONTH7BID,drat_month7_ask as MONTH7ASK,drat_month8_bid as MONTH8BID,drat_month8_ask as MONTH8ASK,
                        drat_month9_bid AS MONTH9BID,drat_month9_ask AS MONTH9ASK,drat_month10_bid AS MONTH10BID,drat_month10_ask AS MONTH10ASK,
                        drat_month9_bid AS MONTH11BID,drat_month11_ask AS MONTH11ASK,drat_month12_bid AS MONTH12BID,drat_month12_ask AS MONTH12ASK,
                        to_date('||''''||frmDate||''''||') as FromDate,to_date('||''''||toDate ||''''||') as ToDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN012  
                where   DRAT_FOR_CURRENCY != DRAT_CURRENCY_CODE
                        and DRAT_EFFECTIVE_DATE between  to_date('||''''||frmDate||''''||') and to_date('||''''||toDate ||''''||')'; 
                  OPEN GenCursor for Query_Str ||finalCondition|| 'ORDER BY DRAT_SERIAL_NUMBER,decode(DRAT_FOR_CURRENCY,30400003,1,30400004, 2)';
                  insert into temp values(Query_Str,finalCondition);commit;
    Goto Process_End;                  
  end if; 
-- Created on 15-Aug-2009 by Ramya
  if varReportID='EXCHANGERATERPTDATRANGE' then
    Query_Str := 'select  pkgreturncursor.fncgetdescription(DRAT_CURRENCY_CODE,2) as BASECRNCY,
                          pkgreturncursor.fncgetdescription(DRAT_FOR_CURRENCY,2) AS FORCRNCY,
                          drat_rate_time as RateTime, DRAT_SERIAL_NUMBER as Srno,
                          drat_effective_date AS EffectiveDate,drat_spot_bid AS SPOTBID,drat_spot_ask AS SPOTASK,
                          drat_month1_bid AS MONTH1BID,drat_month1_ask  AS MONTH1ASK,drat_month2_bid AS MONTH2BID,drat_month2_ask AS MONTH2ASK,
                          drat_month3_bid AS MONTH3BID,drat_month3_ask AS MONTH3ASK,drat_month4_bid as MONTH4BID,drat_month4_ask as MONTH4ASK,
                          drat_month5_bid as MONTH5BID,drat_month5_ask as MONTH5ASK,drat_month6_bid AS MONTH6BID,drat_month6_ask AS MONTH6ASK,
                          drat_month7_bid as MONTH7BID,drat_month7_ask as MONTH7ASK,drat_month8_bid as MONTH8BID,drat_month8_ask as MONTH8ASK,
                          drat_month9_bid AS MONTH9BID,drat_month9_ask AS MONTH9ASK,drat_month10_bid AS MONTH10BID,drat_month10_ask AS MONTH10ASK,
                          drat_month9_bid AS MONTH11BID,drat_month11_ask AS MONTH11ASK,drat_month12_bid AS MONTH12BID,drat_month12_ask AS MONTH12ASK,
                          to_date('||''''||frmDate||''''||') as FromDate,to_date('||''''||toDate ||''''||')as ToDate,
                          pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                  from    TRTRAN012  a
                  where   DRAT_FOR_CURRENCY != DRAT_CURRENCY_CODE
                          and drat_serial_number = (select max(drat_serial_number)
                                                    from trtran012
                                                    where drat_effective_date = a.DRAT_EFFECTIVE_DATE
                                                          and DRAT_CURRENCY_CODE = a.drat_currency_code
                                                          and drat_for_currency = a.drat_for_currency) ';
     --insert into temp values(Query_Str,finalCondition);commit;
     OPEN GenCursor for Query_Str ||finalCondition||' ORDER BY DRAT_EFFECTIVE_DATE,decode(DRAT_FOR_CURRENCY,30400003,1,30400004, 2)';
    Goto Process_End;
  end if;


  if varReportID = 'TRADEVIOLATIONREPORT' THEN
 -- modified on 31-july-09 by ramya to display violation details
 --insert into temp values(varReportID,frmDate);commit;
    OPEN GenCursor for
                select RDEL_RISK_DATE as ExecuteDate,
                       RDEL_RISK_REFERENCE as RickReference,RDEL_DEAL_NUMBER as DealNumber,
                       pkgreturncursor.fncgetdescription(RDEL_RISK_TYPE,1) as RiskTypes,
                       RDEL_LIMIT_USD as Limit,RDEL_AMOUNT_EXCESS as ExcessAmount,
                       pkgreturncursor.fncgetdescription(RDEL_ACTION_TAKEN,1) as ActionTaken,
                       RDEL_STAKE_HOLDER UserId,
                       RDEL_MOBILE_NUMBER as MobNo,
                       RDEL_EMAIL_ID as MailId,
                       RDEL_MESSAGE_TEXT Remarks,
                       pkgreturncursor.fncgetdescription(RDEL_SENT_STATUS,1) as SentStatus,
                       RDEL_SENT_TIMESTAMP as SentTimeStamp,
                       frmDate as FromDate,
                       toDate as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(varUserID ) as CompanyName
                from   trtran011
                where  RDEL_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive) and
                       RDEL_RISK_DATE between frmDate and toDate
                order by RDEL_RISK_DATE;
    Goto Process_End;
  end if;

  if varReportID ='TRADOVERALLCRNCYPOSITION'  THEN

    numError := pkgforexprocess.fncRiskGenerate(frmDate, GConst.TRADEDEAL);commit;
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(crsk_risk_type,1) as RiskType,
                        decode(crsk_currency_code,0, pkgreturncursor.fncGetDescription(crsk_risk_type,1),
                        pkgreturncursor.fncGetDescription(crsk_currency_code,2)) as CurrencyCode,
                        nvl(crsk_position_fcy,0) as PositionFcy,crsk_position_usd as PsitionUsd,
                        pkgreturnreport.fncConvRs(crsk_position_inr) as PositionInr,
                        nvl(crsk_allowed_usd,0) as AllowedUsd,NVL(crsk_allowed_inr,0) as AllowedInr,
                        CRSK_ASON_DATE as AsonDate, pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from    trsystem996
                where   crsk_ason_date =frmDate
                        and crsk_risk_type  in(21000001,21000002)
                        and nvl(crsk_user_id,'0')='0'
                order by crsk_risk_type desc, pkgreturncursor.fncGetDescription(crsk_currency_code,1);
    Goto Process_End;
  end if;

  if  varReportID = 'TRADPARTICULARCRNCYPOSITION' then

    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(dpos_currency_code,2) as CurrencyCode,
                        dpos_purchase_amount as PurchaseFcy,dpos_sale_amount as SalesFcy,
                        pkgreturnreport.fncConvRs(dpos_purchase_inr) as PurchaseInr,
                        pkgreturnreport.fncConvRs(dpos_sale_inr) as SalesInr,
                        decode(dpos_position_code,12400001,'O/B',12400002,'O/S','') as Status,
                        dpos_day_position as PositionFcy,
                        pkgreturnreport.fncConvRs(dpos_position_inr) as PositionInr,
                        pkgreturnreport.GetSystemDate() as SystemDate,dpos_position_date as AsonDate,
                         pkgreturnreport.getCompanyName(varUserID) as CompanyName
                from    trsystem032
                where   dpos_position_date = frmDate and
                        dpos_user_id = '0' and
                        dpos_position_type = GConst.TRADEDEAL;
    Goto Process_End;
  end if;

  if varReportID = 'HDGEOVERALLCRNCYPOSITION'  then

    Query_Str1 :='T%';
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    Query_Str :='select pkgreturncursor.fncGetDescription(POSN_COMPANY_CODE,1) as CompanyCode,
                        pkgreturncursor.fncGetDescription(POSN_CURRENCY_CODE,2) as CurrencyCode,
                        pkgreturncursor.fncGetDescription(POSN_ACCOUNT_CODE,1) as AccountCode,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_TRANSACTION_AMOUNT else 0 end) as AssetsFcy,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_TRANSACTION_AMOUNT else 0 end) as LiabilitiesFcy,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_INR_VALUE else 0 end) as AssetsInr,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_INR_VALUE else 0 end) as LiabilitiesInr,'||
                        ''''||frmDate||''''||' as ReferenceDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                FROM    TRSYSTEM997
                where   posn_reference_number not like '||''''||Query_Str1||'''';
    OPEN GenCursor for Query_Str||' GROUP BY posn_company_code,POSN_CURRENCY_CODE,POSN_ACCOUNT_CODE
                                    order by posn_company_code ';
    Goto Process_End;
  end if;

   if varReportID ='ASSETSLIABILITIESRPT'  then

    Query_Str1 :='Z%';
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    -- updated by ramya on 11-jun-09 Revalue_inr replace with POSN_INR_VALUE
    Query_Str :='select pkgreturncursor.fncGetDescription(POSN_COMPANY_CODE,2) as CompanyCode,
                        pkgreturncursor.fncGetDescription(POSN_CURRENCY_CODE,2) as CurrencyCode,
                        pkgreturncursor.fncGetDescription(POSN_ACCOUNT_CODE,1) as AccountCode,
                        round(sum((case when POSN_ACCOUNT_CODE <= 25900050 then POSN_TRANSACTION_AMOUNT else 0 end)/1000000),2) as AssetsFcy,
                        round(sum((case when POSN_ACCOUNT_CODE > 25900050 then POSN_TRANSACTION_AMOUNT else 0 end)/1000000),2) as LiabilitiesFcy,
                        round(sum((case when POSN_ACCOUNT_CODE <= 25900050 then POSN_REVALUE_USD else 0 end)/1000000),2) as AssetsUsd,
                        round(sum((case when POSN_ACCOUNT_CODE > 25900050 then POSN_REVALUE_USD else 0 end)/1000000),2) as LiabilitiesUsd,
                        round(sum((case when POSN_ACCOUNT_CODE <= 25900050 then POSN_INR_VALUE else 0 end)/10000000),2) as AssetsInr,
                        round(sum((case when POSN_ACCOUNT_CODE > 25900050 then POSN_INR_VALUE else 0 end)/10000000),2) as LiabilitiesInr,
                        to_date('||''''||frmDate||''''||') as ReferenceDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                FROM    TRSYSTEM997
                where   posn_reference_number not like '||''''||Query_Str1||''''||'
                and posn_account_code not in (25900012,25900022,25900023,25900062,25900079,25900084,25900085)
                /*and posn_due_date >='||''''||frmDate||'''*/';



   --   insert into temp values(Query_Str ,null);
     --                               commit;

    OPEN GenCursor for Query_Str ||finalCondition||' GROUP BY posn_company_code,POSN_CURRENCY_CODE,POSN_ACCOUNT_CODE
                                    order by posn_company_code ';
    Goto Process_End;
  end if;

  if varReportID ='GAPWISEASSETSLIABILITIESRPT'  then

    Query_Str1 :='Z%';
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    -- updated by ramya on 11-jun-09 Revalue_inr replace with POSN_INR_VALUE
    Query_Str :='select --pkgreturncursor.fncGetDescription(POSN_COMPANY_CODE,1) as CompanyCode,
                        pkgreturncursor.fncGetDescription(POSN_CURRENCY_CODE,2) as CurrencyCode,
                        pkgreturncursor.fncGetDescription(POSN_ACCOUNT_CODE,1) as AccountCode,
                        posn_due_date as Gap,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_TRANSACTION_AMOUNT else 0 end) as AssetsFcy,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_TRANSACTION_AMOUNT else 0 end) as LiabilitiesFcy,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_REVALUE_USD else 0 end) as AssetsUsd,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_REVALUE_USD else 0 end) as LiabilitiesUsd,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_INR_VALUE else 0 end) as AssetsInr,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_INR_VALUE else 0 end) as LiabilitiesInr,
                        to_date('||''''||frmDate||''''||') as ReferenceDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                FROM    TRSYSTEM997
                      where   posn_reference_number not like '||''''||Query_Str1||''' and and posn_account_code not in (25900012,25900022,25900023,25900062,25900079,25900084,25900085) ';
     OPEN GenCursor for Query_Str ||finalCondition||' GROUP BY POSN_CURRENCY_CODE,posn_due_date,POSN_ACCOUNT_CODE
                                     order by POSN_ACCOUNT_CODE ';

    commit;
    Goto Process_End;
  end if;

  if varReportID = 'CONSOLIDATEDCURRENCYPOS' then

    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    -- updated by ramya on 11-jun-09 posn_revalue_usd,Revalue_inr replace with POSN_USD_VALUE,POSN_INR_VALUE
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(POSN_ACCOUNT_CODE,1) as AccountCode,
                 round((sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_TRANSACTION_AMOUNT else 0 end)/100000),2) as AssetsFcy,
                 round(( sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_TRANSACTION_AMOUNT else 0 end)/100000),2) as LiabilitiesFcy,
                 round((sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_REVALUE_USD else 0 end)/100000),2) as AssetsUsd,
                 round(( sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_REVALUE_USD else 0 end)/100000),2) as LiabilitiesUsd,
                 round(( sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_INR_VALUE else 0 end)/10000000),2) as AssetsInr,
                 round((sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_INR_VALUE else 0 end)/10000000),2) as LiabilitiesInr,
                        frmDate as ReferenceDate,pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                FROM    TRSYSTEM997
                where   posn_Reference_date <= frmDate
                GROUP BY POSN_ACCOUNT_CODE
                order by POSN_ACCOUNT_CODE;
    Goto Process_End;
  end if;

  if varReportID = 'ALMREPORT' then
   numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
   Query_Str1 := 'Z';
   Query_Str := 'select pkgreturncursor.fncGetDescription(posn_company_code,1) as CompanyCode,
                        pkgreturncursor.fncGetDescription(posn_currency_code,2) as CurrencyCode,
                        pkgreturncursor.fncGetDescription(posn_account_code,1) as AccountCode,
                        posn_reference_number as ReferenceNumber,posn_reference_serial as ReferenceSerial,
                        posn_reference_date as ReferenceDate,posn_due_date as MaturityDate,
                        pkgreturncursor.fncGetDescription(posn_counter_party,2) as CounterParty,
                        posn_transaction_amount as AmountFcy,posn_fcy_rate as FcyRate,
                        round((posn_m2m_inrrate/posn_usd_rate),5) as RateUsd,
                        (case when POSN_ACCOUNT_CODE <= 25900050 then posn_inr_value else 0 end) as AssetsUsd,
                        (case when POSN_ACCOUNT_CODE > 25900050 then posn_inr_value else 0 end) as LiabilitiesUsd,
                        posn_m2m_usdrate as RateUsd,posn_m2m_inrrate as RateInr,posn_revalue_inr as InrValue,
                        posn_position_usd as PositionUsd,posn_position_inr as PositionInr,'||''''||frmDate||''''||' as frmDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trsystem997
                where   posn_reference_number not like '||''''||Query_Str1||'''';

  OPEN GenCursor for Query_Str ||finalCondition||' order by posn_company_code,POSN_CURRENCY_CODE,POSN_ACCOUNT_CODE';
  end if;
---aakash 09 Apri 13 11:53 am
-- if VARREPORTID = 'HEDGEGAPREPORT' then
--insert into TEMP values (VARREPORTID,null);
--commit;
--    Query_str1 := 'TRD%';
--      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--    --numError :=pkgforexprocess.fncriskpopulate(frmDate, GConst.TRADEDEAL);commit;
--    Query_Str :='select pkgreturncursor.fncGetDescription(posn_company_code,1) as Company,
--                        pkgreturncursor.fncGetDescription(posn_currency_code,2) as Currency,
--                        decode(POSN_MATURITY_MONTH,0,''Spot'',to_char(add_months('||''''||datWorkDate||''''||',POSN_MATURITY_MONTH-1),''Mon'')) as Gap,
--                       -- POSN_MATURITY_MONTH as Gap,
--                        '||''''||frmDate||''''||' as AsonDate,
--                        sum((case when posn_account_code <= 25900050 then posn_transaction_amount else 0 end )/100000)as AssetsFcy,
--                        sum((case when posn_account_code > 25900050 then posn_transaction_amount else 0 end)/100000) as LiabilitiesFcy,
--                        sum((case when posn_account_code <= 25900050 then posn_usd_value else 0 end )/100000)as AssetsUsd,
--                        sum((case when posn_account_code > 25900050 then  posn_usd_value  else 0 end)/100000) as LiabilitiesUsd,
--                        sum((case when posn_account_code <= 25900050 then  posn_inr_value else 0 end )/10000000)as AssetsInr,
--                        sum((case when posn_account_code > 25900050 then posn_inr_value  else 0 end)/10000000) as LiabilitiesInr,
--                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trsystem997
--                where   posn_reference_number not like '||''''||Query_str1||''''||'
--                and posn_due_date >= '||''''||frmDate||'''';
--    --pkgreturncursor.fncGetDescription( POSN_ACCOUNT_CODE,2) as AccountCode,
--   -- OPEN GenCursor for Query_Str||finalCondition ||' group by posn_company_code,posn_currency_code,posn_maturity_month
--         --               order by posn_maturity_month ';
--         delete from temp;commit;
--         insert into TEMP values(QUERY_STR||FINALCONDITION,null);
--    commit;
--    OPEN GenCursor for Query_Str||finalCondition ||' group by POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_MATURITY_MONTH
--                         order by posn_maturity_month';
--  GOTO PROCESS_END;
--  end if;
-------------------------------------
--by ishwar as on 07/06/13
--------------------------------------
 if VARREPORTID = 'HEDGEGAPREPORT' then
insert into TEMP values (VARREPORTID,null);
commit;
    Query_str1 := 'TRD%';
      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    --numError :=pkgforexprocess.fncriskpopulate(frmDate, GConst.TRADEDEAL);commit;
    Query_Str :='select pkgreturncursor.fncGetDescription(posn_company_code,1) as Company,
                        pkgreturncursor.fncGetDescription(posn_currency_code,2) as Currency,


                       --decode(POSN_MATURITY_MONTH,0,''Spot'',to_char(add_months('||''''||datWorkDate||''''||',POSN_MATURITY_MONTH-1),''Mon'')) as Gap,
         --              to_char(to_date(posn_due_date,'||''''||'dd/mm/yyyy'||''''||'),'||''''||'mon yy'||''''||') as Gap,
                          to_char(posn_due_date,'||''''||'YYMM'||''''||') as Gap,
                        --POSN_MATURITY_MONTH as Gap,
                        '||''''||frmDate||''''||' as AsonDate,
                        sum((case when posn_account_code <= 25900050 then posn_transaction_amount else 0 end )/1000000)as AssetsFcy,
                        sum((case when posn_account_code > 25900050 then posn_transaction_amount else 0 end)/1000000) as LiabilitiesFcy,
                        sum((case when posn_account_code <= 25900050 then posn_usd_value else 0 end )/1000000)as AssetsUsd,
                        sum((case when posn_account_code > 25900050 then  posn_usd_value  else 0 end)/1000000) as LiabilitiesUsd,
                        sum((case when posn_account_code <= 25900050 then  posn_inr_value else 0 end )/10000000)as AssetsInr,
                        sum((case when posn_account_code > 25900050 then posn_inr_value  else 0 end)/10000000) as LiabilitiesInr,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trsystem997
                where   posn_reference_number not like '||''''||Query_str1||''''||'
                and posn_account_code not in (25900012,25900022,25900023,25900062,25900079,25900084,25900085)
                /*and posn_due_date >= '||''''||frmDate||'''*/';
    --pkgreturncursor.fncGetDescription( POSN_ACCOUNT_CODE,2) as AccountCode,
   -- OPEN GenCursor for Query_Str||finalCondition ||' group by posn_company_code,posn_currency_code,posn_maturity_month
         --               order by posn_maturity_month ';
        insert into TEMP values(QUERY_STR||FINALCONDITION,null);
        --group by POSN_COMPANY_CODE,POSN_CURRENCY_CODE, to_char(to_date(posn_due_date,'||''''||'dd/mm/yyyy'||''''||'),'||''''||'mon yy'||''''||')
        --                 order by to_char(to_date(posn_due_date,'||''''||'dd/mm/yyyy'||''''||'),'||''''||'mon yy'||''''||')
    commit;
    OPEN GenCursor for Query_Str||finalCondition ||' group by POSN_COMPANY_CODE,POSN_CURRENCY_CODE,to_char(posn_due_date,'||''''||'YYMM'||''''||')
                         order by to_char(posn_due_date,'||''''||'YYMM'||''''||')';
  GOTO PROCESS_END;
  end if;

   ------
  if varReportID = 'TRADEGAPREPORT'  THEN

    --numError :=pkgforexprocess.fncRiskGenerate(frmDate, GConst.TRADEDEAL);commit;
    numError :=pkgforexprocess.fncriskpopulate(frmDate, GConst.TRADEDEAL);commit;
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,2) Currency,
                        sum(decode(CRSK_BUY_SELL,25300002,CRSK_POSITION_FCY,0)) SaleFcy,
                        sum(decode(CRSK_BUY_SELL,25300001,CRSK_POSITION_FCY,0)) PurchaseFcy,
                        sum(decode(CRSK_BUY_SELL,25300002,CRSK_POSITION_USD,0)) SaleUsd,
                        sum(decode(CRSK_BUY_SELL,25300001,CRSK_POSITION_USD,0)) PurchaseUsd,
                        sum(decode(CRSK_BUY_SELL,25300002,CRSK_POSITION_INR,0)) SaleInr,
                        sum(decode(CRSK_BUY_SELL,25300001,CRSK_POSITION_INR,0)) PurchaseInr,
                        sum(CRSK_POSITION_USD) as PositionUsd,
                        sum(CRSK_POSITION_INR) as PositionInr,
                        decode(CRSK_MATURITY_MONTH,'0','Spot',1,'Month 1',2,'Month 2',3,'Month 3',4,'Month 4',5,'Month 5',6,'Month 6',7,'Month 7',8,'Month 8',9,'Month 9',10,'Month 10',11,'Month 11',12,'Month 12') as Gap,
                        max(CRSK_ASON_DATE) as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,  pkgreturnreport.getCompanyName(varUserID ) as CompanyName
                from    trsystem996
                where   nvl(CRSK_RISK_TYPE,0) =0
                        --and nvl(crsk_user_id,'0')!='0'
                        and CRSK_ASON_DATE = frmDate
                group by CRSK_CURRENCY_CODE,crsk_maturity_month order by CRSK_MATURITY_MONTH;
    goto Process_End;
  end if;

 if varReportID = 'FCYLOANDUEFORTHEDAY' or varReportID = 'REMFCYLOANDUEFORTHEDAY'  then

--    Query_Str :='select pkgreturncursor.fncgetdescription(fcln_company_code,1) as CompanyCode,
--                        Fcln_loan_number as LoanNumber,
--                        pkgreturncursor.fncgetdescription(fcln_loan_type,2) as LoanType,
--                        pkgreturncursor.fncgetdescription(fcln_local_bank,1) as LocalBank,
--                        pkgreturncursor.fncgetdescription(fcln_foreign_bank,1) as ForeignBank,
--                        fcln_sanction_date as SactionDate,
--                        pkgreturncursor.fncgetdescription(fcln_currency_code,2) as CurrencyCode,
--                        fcln_sanctioned_fcy as SanctionedFcy,
--                        pkgreturnreport.fncConvRs(fcln_sanctioned_inr) as SactionedInr,
--                        fcln_maturity_from as MaturityFrom,fcln_maturity_to as MaturityTo,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trtran005
--                where   fcln_record_status  not in('||gconst.statusinactive||','||gconst.statusdeleted||') ';
--    OPEN GenCursor for  Query_Str|| finalcondition || ' order by Fcln_loan_number';

      OPEN GenCursor for
                   select FCLN_LOAN_NUMBER LoanNumber,FCLN_SANCTION_DATE SactionDate,
                          FCLN_BANK_REFERENCE BankRef,
                          pkgreturncursor.fncgetdescription(FCLN_LOAN_TYPE,2) LoanType,
                          pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) CurrencyCode,
                          pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) LocalBank,
                          pkgreturncursor.fncgetdescription(FCLN_FOREIGN_BANK,2) ForeignBank,
                          FCLN_SANCTIONED_FCY SanctionedFcy,
                          FCLN_CONVERSION_RATE SanctionedRate,
                          FCLN_SANCTIONED_INR SactionedInr,
                          TRLN_TRADE_REFERENCE TradeReference,
                          TRLN_ADJUSTED_DATE AdjustedDate,
                          nvl(TRLN_ADJUSTED_FCY,0) AdjustedFcy,
                          TRLN_ADJUSTED_RATE AdjustedRate,
                          nvl((select sum(BREL_REVERSAL_FCY) from trtran003 where BREL_TRADE_REFERENCE= FCLN_LOAN_NUMBER and brel_RECORD_STATUS not in (10200005,10200006)),0) ClosureAmount,
                          (FCLN_SANCTIONED_FCY- nvl((select sum(BREL_REVERSAL_FCY) from trtran003 where BREL_TRADE_REFERENCE= FCLN_LOAN_NUMBER and brel_RECORD_STATUS not in (10200005,10200006)),0)) OSAmt,
                          fcln_maturity_from as MaturityFrom,fcln_maturity_to as MaturityTo,
                          pkgreturnreport.GetSystemDate() as SystemDate,
                           pkgreturnreport.getCompanyName(varUserID ) as CompanyName
                  from  trtran005,trtran007
                 where FCLN_LOAN_NUMBER = TRLN_LOAN_NUMBER(+)
                   and nvl(FCLN_RECORD_STATUS,10200001) not in (10200005,10200006)
                   and nvl(TRLN_RECORD_STATUS,10200001) not in (10200005,10200006)
              order by FCLN_BANK_REFERENCE,FCLN_LOAN_NUMBER;
    Goto Process_End;
  end if;

  ---commented by aakash 11-jun-13 12:02 pm
-- if varReportID = 'FCYLOANDUEFORNXTFIVEDAYS'  then
--
--    OPEN GenCursor for
--                select  pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE,1) as CompanyCode,
--                        FCLN_LOAN_NUMBER as LoanNumber,FCLN_BANK_REFERENCE as BankRef,
--                        pkgreturncursor.fncgetdescription(FCLN_LOAN_TYPE,2) as LoanType,
--                        pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,1) as LocalBank,
--                        pkgreturncursor.fncgetdescription(FCLN_FOREIGN_BANK,1) as ForeignBank,
--                        FCLN_SANCTION_DATE as SactionDate,
--                        pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) as CurrencyCode,
--                        --FCLN_SANCTIONED_FCY as SanctionedFcy,
--                        (FCLN_SANCTIONED_FCY - (select nvl(sum(BREL_REVERSAL_FCY),0)
--                                                from trtran003
--                                               where brel_trade_reference= a.FCLN_LOAN_NUMBER
--                                                 and brel_record_status not in(10200005,10200006))) as SanctionedFcy,
--                        --pkgreturnreport.fncConvRs(fcln_sanctioned_inr) as SactionedInr,
--                        fcln_sanctioned_inr as SactionedInr,
--                        FCLN_MATURITY_FROM as MaturityFrom,FCLN_MATURITY_TO as MaturityTo,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                        frmDate as AsonDate,toDate as ToDate,
--                         pkgreturnreport.getCompanyName( varUserID  ) as CompanyName
--                from    trtran005 a
--                where   FCLN_RECORD_STATUS  NOT IN(10200005,10200006)
--                        and ((FCLN_process_complete = 12400001  and FCLN_complete_date >toDate) or FCLN_process_complete = 12400002)
--                        --and FCLN_MATURITY_TO between frmDate and toDate
--                order by FCLN_LOAN_NUMBER;
--    Goto Process_End;
--  end if;
------UPDATED BY AAKASH/ISHWAR 11-JUN-13 12:03 PM
if varReportID = 'FCYLOANDUEFORNXTFIVEDAYS'  then

    OPEN GenCursor for
                select  pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE,1) as CompanyCode,
                        FCLN_LOAN_NUMBER as LoanNumber,FCLN_BANK_REFERENCE as BankRef,
                        pkgreturncursor.fncgetdescription(FCLN_LOAN_TYPE,2) as LoanType,
                        pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,1) as LocalBank,
                        pkgreturncursor.fncgetdescription(FCLN_FOREIGN_BANK,1) as ForeignBank,
                        FCLN_SANCTION_DATE as SactionDate,
                        pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) as CurrencyCode,
                        --FCLN_SANCTIONED_FCY as SanctionedFcy,
                        (FCLN_SANCTIONED_FCY - (select nvl(sum(BREL_REVERSAL_FCY),0)
                                                from trtran003
                                               where brel_trade_reference= a.FCLN_LOAN_NUMBER
                                                 and brel_record_status not in(10200005,10200006))) as SanctionedFcy,
                        --pkgreturnreport.fncConvRs(fcln_sanctioned_inr) as SactionedInr,
                        fcln_sanctioned_inr as SactionedInr,
                        FCLN_MATURITY_FROM as MaturityFrom,FCLN_MATURITY_TO as MaturityTo,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        frmDate as AsonDate,toDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
                         FCLN_CONVERSION_RATE as ConvRate
                from    trtran005 a
                where   FCLN_RECORD_STATUS  NOT IN(10200005,10200006)
                        and ((FCLN_process_complete = 12400001  and FCLN_complete_date >toDate) or FCLN_process_complete = 12400002)
                        --and FCLN_MATURITY_TO between frmDate and toDate
                --order by 6
                UNION

                        select  pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE,1) as CompanyCode,
                        BCRD_BUYERS_CREDIT as LoanNumber,'' as BankRef,
                        pkgreturncursor.fncgetdescription(23600001,2) as LoanType,
                        pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK,1) as LocalBank,
                        pkgreturncursor.fncgetdescription(BCRD_FOREIGN_BANK,1) as ForeignBank,
                        BCRD_SANCTION_DATE as SactionDate,
                        pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE,2) as CurrencyCode,
                        --FCLN_SANCTIONED_FCY as SanctionedFcy,
                        (BCRD_SANCTIONED_FCY - (select nvl(sum(BREL_REVERSAL_FCY),0)
                                                from trtran003
                                               where brel_trade_reference= a.BCRD_BUYERS_CREDIT
                                                 and brel_record_status not in(10200005,10200006))) as SanctionedFcy,
                        --pkgreturnreport.fncConvRs(fcln_sanctioned_inr) as SactionedInr,
                        BCRD_SANCTIONED_INR as SactionedInr,
                        BCRD_DUE_DATE as MaturityFrom,BCRD_DUE_DATE as MaturityTo,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        frmDate as AsonDate,toDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID  ) as CompanyName ,
                         BCRD_CONVERSION_RATE as CovRate
                from    trtran045 a
                where   BCRD_RECORD_STATUS  NOT IN(10200005,10200006)
                        and ((BCRD_PROCESS_COMPLETE = 12400001  and BCRD_COMPLETION_DATE >toDate) or BCRD_PROCESS_COMPLETE = 12400002)
                        --and FCLN_MATURITY_TO between frmDate and toDate
                order by 6 ;
    Goto Process_End;
  end if;

--END
 if varReportID = 'TRADEMATUREDFORTHEDAY' or varReportID = 'REMTRADEMATUREDFORTHEDAY' then

   Query_Str :='select  pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as CompanyCode,
                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_ENTRY_DATE as EntryDate,
                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,2) as ImportExport,
                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LocalBank,
                        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,1) as BuyerSeller,
                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
                        TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_TRADE_FCY as TradeFcy,
                        TRAD_TRADE_INR as TradeInr,TRAD_TRADE_RATE as TradeRate,
                        TRAD_MATURITY_FROM as MaturityFrom,TRAD_MATURITY_DATE as MaturityDate,
                        to_Date('||''''||frmDate||''''||') as FromDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran002
                where   TRAD_RECORD_STATUS not in('||gconst.statusinactive||','||gconst.statusdeleted||')
                        and ((trad_process_complete = 12400001  and trad_complete_date > '||''''||toDate||''''||') or trad_process_complete = 12400002) ';
    OPEN GenCursor for Query_Str||finalCondition;
    Goto Process_End;
  end if;
---------------------------------------------------------------
  if  varReportID = 'TRADEMATUREDNXTFIVEDAYS' or varReportID = 'REMTRADEMATUREDNXTFIVEDAYS' then

   Query_Str :='select  pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as CompanyCode,
                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_ENTRY_DATE as EntryDate,
                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,2) as ImportExport,
                        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,1) as BuyerSeller,
                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
                        TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_TRADE_FCY as TradeFcy,
                        TRAD_TRADE_INR as TradeInr,TRAD_TRADE_RATE as TradeRate,
                        TRAD_MATURITY_FROM as MaturityFrom,TRAD_MATURITY_DATE as MaturityDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                        to_Date('||''''||frmDate||''''||') as FromDate, to_date('||''''||toDate||''''||') as ToDate
                from    trtran002
                where   TRAD_RECORD_STATUS not in('||gconst.statusinactive||','||gconst.statusdeleted||')
                        and ((trad_process_complete = 12400001  and trad_complete_date > '||''''||toDate||''''||') or trad_process_complete = 12400002) ';
  --delete from temp;commit;
 insert into temp values(Query_Str,finalCondition);commit;
  OPEN GenCursor for  Query_Str||finalCondition;
  Goto Process_End;
  end if;

  if  varReportID = 'RISKPOSITIONFORTHEDAY' then --counterpartywiseposition

    numError :=pkgforexprocess.fncRiskGenerate(frmDate, GConst.TRADEDEAL);commit;
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(crsk_risk_type,1) as RiskType,
                        pkgreturncursor.fncGetDescription(crsk_currency_code,2) as CurrencyCode,
                        pkgreturncursor.fncGetDescription(crsk_counter_party,1) as CouterParty,
                        pkgreturncursor.fncGetDescription(crsk_buy_sell,2) as BuySell,
                        crsk_ason_date as AonDate,crsk_user_id as UserId,crsk_maturity_month as MaturityMonth,
                        nvl(crsk_position_fcy,0) as PositionFcy,nvl(crsk_position_usd,0) as PositionUsd,
                        pkgreturnreport.fncConvRs(nvl(crsk_position_inr,0)) as PostionInr,
                        nvl(crsk_allowed_usd,0) as AllowedUsd,
                        pkgreturnreport.fncConvRs(nvl(crsk_allowed_inr,0)) as AllowedInr,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName( varUserID  ) as CompanyName
                from    trsystem996
                where   crsk_ason_date = frmDate and
                        crsk_risk_type in(21000006)
                order by crsk_risk_type desc, pkgreturncursor.fncGetDescription(crsk_currency_code,1);
    Goto Process_End;
  end if;

 if varReportID = 'DEALERWISEPERFORMANCEFORTRADE'  then

    Query_Str1 :='Buy';
    mFieldCondition :='Sale';
    Query_Str :='select pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,
                        deal_maturity_date  as DueDate,deal_exchange_rate as FcyRate,
                        --deal_base_amount as TransactionAmount,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
                        --deal_other_amount as InrValue,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||')  * deal_exchange_rate) as InrValue,
                        --POSN_M2M_INRRATE as M2mInrRate,
                        (pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
                        --((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)) *  deal_base_amount) as RevalueInr,
                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))
                              * pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') ) as RevalueInr,
                        0 as PositionInr,'||''''||frmDate||''''||' as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran001
                where   deal_hedge_trade = 26000002 and
                        deal_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||','||gconst.STATUSPOSTCANCEL||') and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002) and
                        deal_execute_date <= '||''''||frmDate||'''';

    OPEN GenCursor for Query_Str||' order by deal_deal_number';
    Goto Process_End;
  end if;
  if varReportID = 'DEALERWISEEVALUATION' then  -- Dealer Wise Profit Evaluation Report

    OPEN GenCursor for
--                select  pkgreturncursor.fncgetdescription(dpos_currency_code,2) as currencycode,
--                        dpos_day_position as dayposition,dpos_holding_rate as holdingrate,
--                        (dpos_day_position * dpos_holding_rate ) as  holdinginrvalue,
--                        drat_spot_ask  as mtmrate,dpos_position_date as positiondate,
--                        (dpos_day_position * drat_spot_ask)  as m2minrvalue,
--                        ((dpos_day_position * dpos_holding_rate ) -   (dpos_day_position * drat_spot_ask)) as profitloss,
--                        decode(dpos_position_code,12400001,'Over Bought',12400002,'Over Sold') as status,
--                        (select user_user_name from trsystem022 where user_user_id = dpos_user_id) as userid,
--                        pkgreturnreport.getsystemdate() as systemdate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trsystem032 a, trtran012
--                where   dpos_currency_code = drat_currency_code
--                        and  drat_for_currency = 30400003
--                        and dpos_position_date = (select max(hday_calendar_date) from trsystem001 where hday_day_status = 26400005 and hday_calendar_date < frmdate)
--                        and drat_effective_date = frmdate
--                        and dpos_position_type = 26000002
--                        and dpos_day_position  not in(0)
--                        and dpos_user_id  !='0'
--                        and drat_serial_number = 2;
                select  pkgreturncursor.fncgetdescription(DPOS_CURRENCY_CODE,2) as CurrencyCode,
                        DPOS_DAY_POSITION as DayPosition,DPOS_HOLDING_RATE as HoldingRate,
                        (DPOS_DAY_POSITION * DPOS_HOLDING_RATE ) as  HoldingInrValue,
                        (pkgforexprocess.fncGetRate(dpos_currency_code,30400003,frmDate,(decode(dpos_position_code,12400002,25300002,12400001,25300001)),0,null,0))  as MtmRate,
                        dpos_position_date as PositionDate,
                        (DPOS_DAY_POSITION * (pkgforexprocess.fncGetRate(dpos_currency_code,30400003,frmDate,(decode(dpos_position_code,12400002,25300002,12400001,25300001)),0,null,0)))  as M2mInrValue,
                        -- ((DPOS_DAY_POSITION * DPOS_HOLDING_RATE ) -   (DPOS_DAY_POSITION * DRAT_SPOT_ASK)) as ProfitLoss,
                        dpos_position_code as ProfitLoss,
                        decode(DPOS_POSITION_CODE,12400001,'Over Bought',12400002,'Over Sold') as Status,
                        (select user_user_name from trsystem022 where user_user_id = dpos_user_id) as UserId,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName( varUserID) as CompanyName
                from    trsystem032 a
                where   dpos_position_date = (select max(HDAY_CALENDAR_DATE) from trsystem001 where HDAY_DAY_STATUS = 26400005 and HDAY_CALENDAR_DATE < frmDate)
                        and dpos_position_type = GConst.TRADEDEAL
                        and dpos_Day_position  not in(0)
                        and dpos_user_id  !='0';
    Goto Process_End;
  end if;
  if varReportID ='LOSSESONTRDINGPOSITION' then

    Query_Str1 :='Buy';
    mFieldCondition :='Sale';
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    Query_Str :='select pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) as CurrencyCode,
                        pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as AccountCode,
                        (case when POSN_ACCOUNT_CODE <= 25900050 then '||''''||Query_Str1||''''||' else '||''''||mFieldCondition||''''||' end) as BuySell,
                        (select user_user_name from trsystem022 where user_user_id = posn_dealer_id) as UserId,
                        POSN_REFERENCE_NUMBER as ReferenceNumber,POSN_REFERENCE_DATE as ReferenceDate,
                        POSN_DUE_DATE  as DueDate,POSN_FCY_RATE as FcyRate,
                        POSN_TRANSACTION_AMOUNT as TransactionAmount,
                        pkgreturnreport.fncConvRs(POSN_INR_VALUE) as InrValue,
                        POSN_M2M_INRRATE as M2mInrRate,
                        pkgreturnreport.fncConvRs(POSN_REVALUE_INR) as RevalueInr,
                        abs(POSN_POSITION_INR) as PositionInr,
                        POSN_ACCOUNT_CODE as AccountType,
                        pkgreturnreport.GetSystemDate() as SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRSYSTEM997,TRTRAN001
                where   POSN_REFERENCE_NUMBER = DEAL_DEAL_NUMBER
                        and posn_reference_serial = deal_serial_number
                        and DEAL_HEDGE_TRADE IN('||GConst.TRADEDEAL||')
                        and POSN_POSITION_INR < 0 ';
    OPEN GenCursor for Query_Str||finalCondition||' order by POSN_Dealer_ID,POSN_REFERENCE_NUMBER';
    Goto Process_End;
  end if;
if varReportID  = 'TRADEDEALM2MREPORT' then
    Query_Str1 :='Buy';
    mFieldCondition :='Sale';
    Query_Str :='select pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,
                        deal_maturity_date  as DueDate,deal_exchange_rate as FcyRate,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||')  * deal_exchange_rate) as InrValue,
                         --(pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,deal_execute_date,deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))as M2mInrRate,
                        pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||',deal_maturity_date)),deal_maturity_date) as M2mInrRate,
                        --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, deal_execute_date, deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
                        decode(deal_other_currency,30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'||''''||frmDate||''''||', deal_buy_sell,0,deal_maturity_date,0)) as WashRate,
                        (pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||',deal_maturity_date)),deal_maturity_date)
                                                    *  pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as RevalueInr,
                        0 as PositionInr,
                        to_Date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran001
                where   deal_hedge_trade = 26000002 and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002) ';

    OPEN GenCursor for Query_Str||finalCondition|| ' order by deal_maturity_date ' ;
    Goto Process_End;
  end if;

--  if  varReportID = 'HEDGEDEALM2MREPORT' then
--
--    Query_Str :='select pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
--                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
--                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
--                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
--                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,
--                        deal_maturity_date  as DueDate,deal_exchange_rate as FcyRate,
--                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,
--                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
--                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,
--                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * deal_exchange_rate ) as InrValue,
--                        (pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))as M2mInrRate,
--                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
--                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))
--                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))) as RevalueInr,
--                        0 as PositionInr,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trtran001
--                where   deal_hedge_trade = 26000001 and
--                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
--                        --hedg_deal_serial = deal_serial_number and
--                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
--                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002) ';
----                      deal_maturity_date > '||''''||frmDate||''''||' and
----                      deal_execute_date <= '||''''||frmDate||'''';
----                      (deal_complete_date is null or
----                      deal_complete_date > '||''''||frmDate||''''||') ';
----    insert into temp values(Query_Str,finalCondition);commit;
--    OPEN GenCursor for Query_Str||finalCondition||' order by deal_maturity_date ' ;
--    Goto Process_End;
--  end if;
-- if  varReportID = 'HEDGEDEALM2MREPORT' then
--    -- here fncgetoutstanding is used to get the actual amount on 19-may-09
--    Query_Str :='select pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
--                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
--                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
--                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
--                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,
--                        deal_maturity_date  as DueDate,deal_exchange_rate as FcyRate,
--                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,
--                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
--                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,
--                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * deal_exchange_rate ) as InrValue,
--                        round((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)),4)as M2mInrRate,
--                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
--                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))
--                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))) as RevalueInr,
--                        0 as PositionInr,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trtran001
--                where   deal_hedge_trade = 26000001 and
--                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
--                        --hedg_deal_serial = deal_serial_number and
--                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
--                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002) ';
----                      deal_maturity_date > '||''''||frmDate||''''||' and
----                      deal_execute_date <= '||''''||frmDate||'''';
----                      (deal_complete_date is null or
----                      deal_complete_date > '||''''||frmDate||''''||') ';
----    insert into temp values(Query_Str,finalCondition);commit;
--    OPEN GenCursor for Query_Str||finalCondition||' order by deal_maturity_date ' ;
--    Goto Process_End;
--  end if;

if  varReportID ='HEDGEDEALM2MREPORT' then
    -- here fncgetoutstanding is used to get the actual amount on 19-may-09
    Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                        pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE,2) as LocationName,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterParty,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,DEAL_USER_REFERENCE as BnkREf,
                        deal_maturity_from as FrmDueDate,deal_maturity_date  as DueDate,
                        deal_exchange_rate as FcyRate,
                        DEAL_SPOT_RATE AS Spot,
                        DEAL_FORWARD_RATE as Forward,
                        DEAl_MARGIN_RATE as Margin,
                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * deal_exchange_rate ) as InrValue,
                        round((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)),4)as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))
                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))) as RevalueInr,
                        0 as PositionInr,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter,';
                       Query_Str1 :='pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BackupDeal,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdiscr ,
                        decode(deal_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade
                        ' || varGroupField || '
                from    trtran001
                where   --deal_hedge_trade = 26000001 and
                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
                        --hedg_deal_serial = deal_serial_number and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                         '||finalcondition||'';

                        delete from temp1;commit;
                        insert into temp1 values(Query_Str,Query_Str1);commit;
--                      (deal_complete_date is null or
--                      deal_complete_date > '||''''||frmDate||''''||') ';
     --   insert into temp values(Query_Str,finalCondition);commit;
    OPEN GenCursor for Query_Str||Query_Str1||finalCondition||' order by pkgreturncursor.fncgetdescription(deal_base_currency,2),
                                                             pkgreturncursor.fncgetdescription(deal_other_currency,2),
                                                             deal_maturity_date ' ;


    Goto Process_End;
  end if;



-- OPTION TRADE DEAL NEW --

if VARREPORTID = 'OUTSTANDINGDEALS'  then
   QUERY_STR := 'select COPT_COMPANY_CODE AS COMPANYCODE,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
                 pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmDate||''''||') AS BASEAMT,
                 COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400001) "SC",
                   COPT_PREMIUM_VALUEDATE AS PAIDDATE,
                   COPT_USER_REFERENCE AS USERREFNO,
                   pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
                   copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
                   corv_exercise_date cancelDate, corv_exercise_rate cancelRate,
                   corv_profit_loss as profitloss,CORV_PANDL_USD as GainLossUsd,
                  -- decode(copt_process_complete,12400002, ''Open'',12400001,''Close'') as openclose,
                  case
                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,

                   pkgreturnreport.GetSystemDate() as SystemDate,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                   '||''''||FRMDATE||''''||' as  FromDate,
                   '||''''||TODATE||''''||'  as ToDate   ' || varGroupField || '
          FROM trtran071
          LEFT OUTER JOIN trtran073
          ON corv_deal_number = copt_deal_number
          and corv_record_status not in(10200005,10200006)

     WHERE  ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > '||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
          and (COPT_EXECUTE_DATE <= '||''''||frmDate||''''||')
          and copt_record_status not in(10200005,10200006)
          and pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,1,15,1, '||''''||frmDate||''''||') > 0
              '|| FINALCONDITION||'
          order by copt_maturity_date';
          insert into TEMP values(QUERY_STR || FINALCONDITION,null);
          commit;
          open GENCURSOR for QUERY_STR    ;

     GOTO PROCESS_END;
 end if;

 If (Varreportid='OUTSTANDINGOPTBANKWISE') or (Varreportid='OUTSTANDINGOPTCOMPANY') THEN
  OPEN GenCursor for
                select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                sum( pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,frmDate)) AS BaseAmount,
                --pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
                --substr(pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2),1, instr( pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2),'(')-1) CounterParty,
              case when COPT_COUNTER_PARTY like'%306%' then
                        substr(pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2),1, instr( pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2),'(')-1)
                else
                pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) end as  CounterParty,

                pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) as LocalBank,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                frmDate as AsonDate,
                frmDate as FromDate,
                toDate  as ToDate
from trtran071
where     ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > frmDate) or copt_PROCESS_COMPLETE = 12400002)
           and (COPT_EXECUTE_DATE <= frmDate)
           and copt_record_status not in(10200005,10200006)
       group by COPT_COMPANY_CODE, COPT_COUNTER_PARTY  ;

    Goto Process_End;
 end if;

  -- ForwardS OUTSTANDING SUMMARY --
   If (Varreportid='OUTSTANDINGSUMBANKWISE') or (Varreportid='OUTSTANDINGSUMCOMPANYWISE') THEN

      query_str := 'select pkgreturncursor.fncGetdescription(deal_company_code,2) Company,
                           sum(decode(deal_buy_sell, 25300001, pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||gconst.utiltradedeal||''''||','||''''||gconst.amountfcy||''''||','||''''||frmdate||''''||'), 0)) buyamt,
                           sum(decode(deal_buy_sell, 25300002, pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||gconst.utiltradedeal||''''||','||''''||gconst.amountfcy||''''||','||''''||frmdate||''''||'), 0)) sellamt,
                           sum( pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||gconst.utiltradedeal||''''||','||''''||gconst.amountfcy||''''||','||''''||frmdate||''''||')) AS BaseAmount,
                           substr(pkgreturncursor.fncGetdescription(deal_counter_party,2),1, instr( pkgreturncursor.fncGetdescription(deal_counter_party,2),''('')-1) CounterParty,
                           pkgreturncursor.fncGetdescription(deal_counter_party,2) as bank,
                           pkgreturncursor.fncGetdescription(deal_backup_deal,2) as BackupDeal,
                            pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                           '||''''||frmdate||''''||' as  FromDate,
                           '||''''||todate||''''||'  as ToDate
                           ' || vargroupfield || '
                      from trtran001
                     where ((deal_process_complete = 12400001  and deal_complete_date >  '||''''||frmdate||''''||') or deal_process_complete = 12400002)
                       and (deal_execute_date <=  '||''''||frmdate||''''||')
                       and deal_record_status not in(10200005,10200006)
                             '|| finalcondition||'
                     group by deal_company_code, deal_counter_party,
                           deal_buy_sell, deal_backup_deal ';

            open gencursor
             for query_str;

       goto process_end;
   end if;


   -- OPTIONS OUTSTANDING MONTHLY TABULAR FORM --
   IF Varreportid='OPTMNTLYSMRYTABULAR' THEN

      Query_Str:='select pkgreturncursor.fncgetdescription(copt_company_code, 2) company,
                         pkgreturncursor.fncgetdescription(copt_base_currency, 2) currency,
                         pkgreturncursor.fncgetdescription(copt_counter_party, 2) bank,
                         last_day(copt_maturity_date) mat_month,
                         substr(to_date(last_day(copt_maturity_date),'''||'dd-mon-yyyy'||'''),4,8) m_month,
                        -- sum(copt_base_amount/1000000) amt,
                        sum( pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,''' ||GConst.UTILOPTIONHEDGEDEAL|| ''',''' ||GConst.AMOUNTFCY|| ''',''' || frmdate || ''')/1000000) AS amt,
                         to_date(''' || frmdate || ''') asondate,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                    from trtran071
                    where
                   ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > ''' || frmdate || ''') or copt_PROCESS_COMPLETE = 12400002)
                   and copt_record_status not in(10200005,10200006)
                     ' || finalcondition || '
                group by copt_company_code,
                         copt_base_currency,
                         copt_counter_party,
                         last_day(copt_maturity_date)
                order by copt_company_code,
                         copt_base_currency,
                         copt_counter_party,
                         last_day(copt_maturity_date)';

      OPEN Gencursor
       FOR Query_Str;

      GOTO Process_End;
   END IF;


 -- ForwardS OUTSTANDING MONTHLY TABULAR FORM --
   IF Varreportid='FWDMNTLYSMRYTABULAR'  THEN

      Query_Str:='select pkgreturncursor.fncgetdescription(deal_company_code, 2) company,
                         pkgreturncursor.fncgetdescription(deal_base_currency, 2) currency,
                         pkgreturncursor.fncgetdescription(deal_counter_party, 2) bank,
                         last_day(deal_maturity_date) mat_month,
                         substr(to_date(last_day(deal_maturity_date),''' ||'dd-mon-yyyy'||'''),4,8) m_month,
                         --sum(deal_base_amount) amt,
                         SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')/1000000)amt,
                         to_date(''' || frmdate || ''') asondate,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                    from trtran001
                   where deal_record_status not in (10200005, 10200006)
                     and deal_process_complete = 12400002 '
                         || finalcondition || '
                group by deal_company_code,
                         deal_counter_party,
                         deal_base_currency,
                         last_day(deal_maturity_date)
                order by deal_company_code,
                         deal_counter_party,
                         deal_base_currency,
                         last_day(deal_maturity_date)';

      OPEN Gencursor
       FOR Query_Str;

      GOTO Process_End;
   END IF;

IF Varreportid= 'FWDMNTLYSMRYTABBANKWISE' THEN

   Query_Str:='select pkgreturncursor.fncgetdescription(deal_company_code, 2) company,
                      pkgreturncursor.fncgetdescription(deal_base_currency, 2) currency,
                      pkgreturncursor.fncgetdescription(deal_counter_party, 2) bank,
                      last_day(deal_maturity_date) mat_month,
                      substr(to_date(last_day(deal_maturity_date),''' ||'dd-mon-yyyy'||'''),4,8) m_month,
                      --sum(deal_base_amount) amt,
                      SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')/1000000)amt,
                      to_date(''' || frmdate || ''') asondate,
                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from trtran001
                where deal_record_status not in (10200005, 10200006)
                  and deal_process_complete = 12400002 '
                      || finalcondition || '
             group by deal_counter_party,
                      deal_company_code,
                      deal_base_currency,
                      last_day(deal_maturity_date)
             order by deal_counter_party,
                      deal_company_code,
                      deal_base_currency,
                      last_day(deal_maturity_date)';

   delete from temp;
  Insert Into Temp Values ('siva', Query_Str);
  Commit;

   OPEN Gencursor
    FOR Query_Str;

   GOTO Process_End;
END IF;

-- PROJECTED CASH FLOW - ForwardS --

  if varReportID = 'FWDPRJECTEDCASHFLOW' then

     --delete from temp;
     --insert into temp values ('siva', 'report called');
     --commit;

     Query_Str := 'select deal_deal_number as dealnumber,
                          --pkgreturncursor.fncgetdescription(deal_company_code,1) as complongdesc,
                          pkgreturncursor.fncgetdescription(deal_counter_party,2) as bankdesc,
                          pkgreturncursor.fncgetdescription(deal_company_code,2) as companycode,
                          pkgreturncursor.fncgetdescription(deal_backup_deal,1)Trans,
                          pkgreturncursor.fncgetdescription(deal_backup_deal,1) as transaction,
                          deal_company_code as compcode, deal_counter_party as counterpartycode,
                          cdel_cancel_date as canceldate,
                          cdel_cancel_amount as cancelamt,
                          d.cdel_spot_rate as cancelspot,
                          d.cdel_Forward_rate as cancelForward,
                          cdel_cancel_rate as netcancel,
                      -- pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as profitlossinr,
                          nvl(cdel_profit_loss,0) as profitlossinr,
                          --decode(round(decode(cdel_profit_loss,0,0,(decode(cdel_profit_loss,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2),1,0,round(decode(cdel_profit_loss,0,0,(decode(cdel_profit_loss,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2)) as profitlossusd,
                         pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as m2m,
                         deal_user_reference as bankref,
                          pkgreturncursor.fncgetdescription(deal_buy_sell,2) as buysal,
                          pkgreturncursor.fncgetdescription(deal_base_currency,2) as basecurrency,';
        Query_Str1 :='    pkgreturncursor.fncgetdescription(deal_other_currency,2) as othercurrency,
                          pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterparty,
                          deal_execute_date as exedate,
                          pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') as baseamt,
                          deal_exchange_rate as exerate,deal_Forward_rate as forwrate,
                          deal_maturity_date as maturitydate,deal_spot_rate as spotrate,
                          deal_user_reference as refno,
                          pkgreturncursor.fncgetdescription(deal_backup_deal,2) as backupdeal,
                          (select (case when trad_import_export <= 25300050 then
                                             ''Export''
                                        when trad_import_export > 25300050 then
                                             ''Import''
                                    end) catg
                            from trtran002,
                                 trtran004
                           where trad_trade_reference = hedg_trade_reference
                             and hedg_deal_number = deal_deal_number
                           group by trad_import_export) as importexport,
                          pkgreturnreport.getsystemdate() as systemdate,
                           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                          pkgforexprocess.fncgetspotduedate(deal_counter_party,deal_maturity_date,-2) as spotduedate,
                          '||''''||frmDate||''''||' as  fromdate,
                          '||''''||ToDate||''''||'  as todate
                     from trtran001 a
                     left outer join trtran006 d
                       on cdel_deal_number = deal_deal_number
                     and  deal_serial_number = cdel_deal_serial
                    and CDEL_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||')
                    where deal_record_status not in('|| GCONST.STATUSDELETED ||','|| GCONST.STATUSINACTIVE ||')
                    '|| FINALCONDITION||'';
     open Gencursor
      for Query_Str||Query_Str1 ;

      delete from temp;
      insert into temp values (Query_Str,Query_Str1);
      commit;
     Goto Process_End;
  end if;
 -- added by nilesh on 16/05/2012 for Forward outstanding trade deal report
if varReportID = 'FRWDOUTSTANDINGTRADEDEAL' then


         Query_Str := ' select  DEAL_DEAL_NUMBER AS DEALNUMBER,
                  --pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS BANKDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) AS CompanyCode,
                  pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Trans,
                  --DEAL_COMPANY_CODE AS COMPCODE,
                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
                  CDEL_CANCEL_DATE AS CancelDate,
                  cdel_cancel_amount as CancelAmt,
                  d.CDEL_SPOT_RATE as CancelSpot,
                  d.CDEL_Forward_RATE as CancelForward,
                  cdel_cancel_rate as NetCancel,
                  nvl(CDEL_PROFIT_LOSS,0) as profitlossINR,
                  pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as m2m,
                  decode(round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2),1,0,round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2)) as profitlossUSD,
                  Deal_user_reference as bankref,
                    pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSAL,
                  pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                  pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
                 --pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPARTY,
                 DEAL_EXECUTE_DATE AS EXEDATE,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                DEAL_BASE_AMOUNT AS BASEAMT,
               --  DEAL_BASE_AMOUNT AS BASEAMT,
                 DEAL_EXCHANGE_RATE AS EXERATE,DEAL_Forward_RATE AS FORWRATE,
                 DEAL_MATURITY_DATE AS MATURITYDATE,DEAL_SPOT_RATE AS SPOTRATE,
                 DEAL_USER_REFERENCE as REFNO,
                 pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BACKUPDEAL,
                 /* commented by Nilesh as not required for this report
                 (select (case
                  when trad_import_export <= 25300050 then
                  ' || '''Exp''' || '
                  when trad_import_export > 25300050 then
                  ' || '''Imp''' || '
                  end) Catg
                 from trtran002, trtran004
                 where TRAD_TRADE_REFERENCE=HEDG_TRADE_REFERENCE
                 and HEDG_DEAL_NUMBER=DEAL_DEAL_NUMBER
                  group by trad_import_export) as importexport, comment ends here*/
                 pkgreturnreport.GetSystemDate() as SystemDate,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
                 '||''''||frmDate||''''||' as  FromDate,
                 '||''''||ToDate||''''||'  as ToDate,';

 Query_Str1 :='   DEAL_MATURITY_FROM MATURITYFRM,
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmDate||''''||') * DEAL_EXCHANGE_RATE AS OutstandingINR,
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmDate||''''||') AS OutstandingFCY
                 ' || varGroupField || '
  from trtran001 a
  left outer join trtran006 d on CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
  where   DEAL_RECORD_STATUS not in('||''''||gconst.statusdeleted||''''||','||''''||gconst.statusinactive||''''||' )
      and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > '||''''||ToDate||''''||') or DEAL_PROCESS_COMPLETE = 12400002)
      '|| finalcondition||'';
      delete from temp;commit;
      insert into temp values (Query_str,Query_str1);commit;
      insert into temp values (finalcondition,'FRWDOUTSTANDINGTRADEDEAL');commit;
      Open Gencursor For Query_Str || Query_Str1||finalcondition   ;
     Goto Process_End;
 end if;


--------------------Added by shrihari on 25-04-2014-----------
----- modified by shrihari on 02-07-2014 ------------
if varReportID ='REALIZEDPLCLOSEDTRADES' then
   Query_Str := 'select  DEAL_DEAL_NUMBER AS DEALNUMBER,
                  --pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS BANKDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) AS CompanyCode,
                  pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE,2) AS LocationCode,
                  pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Trans,
                  pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Category,
                  --DEAL_COMPANY_CODE AS COMPCODE,
                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,1) as CounterParty,
                      DEAL_BASE_AMOUNT as BookAmt,
                  CDEL_CANCEL_DATE AS CancelDate,
                  cdel_cancel_amount as CancelAmt,
                  Case When d.Cdel_Cancel_Type=27000001
                  Then ' || '''C'''||'
                  Else
                  ' || '''D'''||'
                  end as "Cancelled/Delivered" ,
                  d.CDEL_SPOT_RATE as CancelSpot,
                  d.CDEL_Forward_RATE as CancelForward,
                  cdel_cancel_rate as NetCancel,
                     (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
                  nvl(CDEL_PROFIT_LOSS,0) as profitlossINR,
                  /*pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as m2m,*/
                  decode(round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2),1,0,round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2)) as profitlossUSD,
                  Deal_user_reference as bankref,
                  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSAL,
                  pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                  --pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPARTY,
                  pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
                 ';

          Query_Str1 := '       DEAL_EXECUTE_DATE AS EXEDATE,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') AS BASEAMT,
               --DEAL_BASE_AMOUNT AS BASEAMT,
                 DEAL_EXCHANGE_RATE AS EXERATE,
                 --(DEAL_SPOT_RATE+DEAL_Forward_Rate+Deal_Margin_Rate) AS EXERATE,
                 DEAL_Forward_RATE AS FORWRATE,
                 DEAL_MATURITY_DATE AS MATURITYDATE,
                 DEAL_SPOT_RATE AS SPOTRATE,
                 DEAL_USER_REFERENCE as REFNO,
                 pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BACKUPDEAL,
                  (select(case
                  when trad_import_export <= 25900050 then
                 ' || '''Exp''' || '
                  when trad_import_export > 25900050 then
                  '||'''Imp'''||'
                  end) Catg from trtran002 where TRAD_TRADE_REFERENCE = CDEL_TRADE_REFERENCE)as importexport,

                 pkgreturnreport.GetSystemDate() as SystemDate,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
              -- pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
                  DEAL_MATURITY_DATE as spotduedate,
                 '||''''||frmDate||''''||' as  FromDate,
                 '||''''||ToDate||''''||'  as ToDate,
                 deal_margin_rate as Margin,
                 pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair,
                 pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry
                 ' || varGroupField || '
   from trtran001,trtran006 d
   where CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
     and deal_serial_number = cdel_deal_serial
     and deal_deal_type not in (25400001)
      and DEAL_RECORD_STATUS not in (10200005,10200006)
      and CDEL_RECORD_STATUS not in (10200005,10200006)
      '|| finalcondition||'
        order by CDEL_CANCEL_DATE';
      --                 (select (case
--                  when trad_import_export <= 25300050 then
--                  ' || '''Exp''' || '
--                  when trad_import_export > 25300050 then
--                  ' || '''Imp''' || '
--                  end) Catg
--                 from trtran002, trtran004
--                 where TRAD_TRADE_REFERENCE=HEDG_TRADE_REFERENCE
--                 and HEDG_DEAL_NUMBER=DEAL_DEAL_NUMBER
--                  group by trad_import_export) as importexport,

      delete from temp; commit;
     insert into temp values (Query_Str,Query_str1);
      commit;
      insert into temp values(Query_Str,finalcondition);commit;
       Open Gencursor For Query_Str||Query_Str1;
     Goto Process_End;
 end if;

------------ends here---------------------

--------added by shrihari on25-04-2014--------------------

 --if varReportID ='FXANALYSISCONSOLIDATED' THEN

-- Query_Str := 'select
         --pkgreturncursor.fncgetdescription(deal_company_code,1) as Company,
  --       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as Company,
  --       deal_deal_number as DealNo,
  ---       pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
  --       pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry ,
    --     pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
--         pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrrency,
--         pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
--         deal_user_reference as BankRefNo ,
--         a.deal_execute_date as BookingDate  ,
--         a.deal_base_amount as BookingAmt,
--         a.deal_spot_rate as Spot,
--         a.deal_forward_rate as Forward,
--         a.deal_margin_rate as Margin,
--         a.deal_exchange_rate as NetRate,
--         a.deal_maturity_date as DueDate,';

--  Query_Str1 := ' cancelamount as CancelledAmt,
--         Utilizedamount as UtilizedAmt,
         --pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') as Outstanding,
  --       cancelPnl ,
 --        UtilizedpnL,
 --        cancelPnl+UtilizedpnL as TotalPnL ,
 --        '||''''||frmDate||''''||' as AsonDate,
 --        '||''''||ToDate||''''||' as ToDate,
---         pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair

--         ' || varGroupField || '

--         from trtran001 a inner join
 --            (select  sum(case when b.cdel_cancel_type =27000001 then cdel_cancel_amount else 0 end) cancelamount,
 --                     sum(case when b.cdel_cancel_type =27000002 then cdel_cancel_amount else 0 end) Utilizedamount,
 --                     sum(case when b.cdel_cancel_type =27000001 then cdel_profit_loss else 0 end) cancelPnl,
 --                     sum(case when b.cdel_cancel_type =27000002 then cdel_profit_loss else 0 end) UtilizedpnL,
--                      cdel_deal_number
 --               from trtran006 b
 --               where cdel_record_status not in (10200005,10200006)
 --               and cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
 --               group by cdel_deal_number ) b
--         on  deal_deal_number=cdel_deal_number
 --        where deal_record_status not in (10200005,10200006)
 --        '|| finalcondition||'
--         ';
--delete from temp;commit;
  --   insert into temp values (Query_Str,Query_str1);
 --     commit;
 --       Open Gencursor For Query_Str||Query_Str1 ;

-- Query_Str := 'select DEAL_DEAL_NUMBER AS DEALNUMBER,
--                  --pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
--                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS BANKDESC,
--                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) AS CompanyCode,
--                  pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Trans,
--                  --DEAL_COMPANY_CODE AS COMPCODE,
--                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
--                      DEAL_BASE_AMOUNT as BookAmt,
--                  CDEL_CANCEL_DATE AS CancelDate,
--              cdel_cancel_amount as CancelAmt,
--               Case When d.Cdel_Cancel_Type=27000001
--                  Then ' || '''C'''||'
--                  Else
--                  ' || '''D'''||'
--                  end as "Cancelled/Delivered" ,
--                  d.CDEL_SPOT_RATE as CancelSpot,
--                  d.CDEL_Forward_RATE as CancelForward,
--                  cdel_cancel_rate as NetCancel,
--                     (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
--                  nvl(sum(CDEL_PROFIT_LOSS),0) as profitlossINR,
--                  /*pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as m2m,*/
--                  decode(round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2),1,0,round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2)) as profitlossUSD,
--                  Deal_user_reference as bankref,
--                  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSAL,
--                  pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
--                  --pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPARTY,
--                  pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
--                 ';
--
--          Query_Str1 := '       DEAL_EXECUTE_DATE AS EXEDATE,
--                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmDate||''''||') AS BASEAMT,
--               --DEAL_BASE_AMOUNT AS BASEAMT,
--                 DEAL_EXCHANGE_RATE AS EXERATE,
--                 DEAL_Forward_RATE AS FORWRATE,
--                 DEAL_MATURITY_DATE AS MATURITYDATE,
--                 DEAL_SPOT_RATE AS SPOTRATE,
--                 DEAL_USER_REFERENCE as REFNO,
--                 pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BACKUPDEAL,
--                 (select (case
--                  when trad_import_export <= 25300050 then
--                  ' || '''Exp''' || '
--                  when trad_import_export > 25300050 then
--                  ' || '''Imp''' || '
--                  end) Catg
--                 from trtran002, trtran004
--                 where TRAD_TRADE_REFERENCE=HEDG_TRADE_REFERENCE
--                 and HEDG_DEAL_NUMBER=DEAL_DEAL_NUMBER
--                  group by trad_import_export) as importexport,
--                 pkgreturnreport.GetSystemDate() as SystemDate,
--                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--              -- pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
--                  DEAL_MATURITY_DATE as spotduedate,
--                 '||''''||frmDate||''''||' as  FromDate,
--                  Case when d.Cdel_Cancel_Type=27000001
--                  then cdel_cancel_amount
--                  end as "Cancelled Amt",
--                  Case when d.Cdel_Cancel_Type=27000002
--                  then cdel_cancel_amount
--                  end as "Utilized Amt",
--
--
--                 '||''''||ToDate||''''||'  as ToDate,
--                 0 as "Margin",
--                 0 as "P/LCancelled",
--                 0 as "P/LUtilized"
--                 ' || varGroupField || '
--   from trtran001,trtran006 d
--   where CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
--     and deal_serial_number = cdel_deal_serial
--      and DEAL_RECORD_STATUS not in (10200005,10200006)
--      and CDEL_RECORD_STATUS not in (10200005,10200006)
--      '|| finalcondition||'
--      group by DEAL_DEAL_NUMBER,DEAL_COUNTER_PARTY,DEAL_COMPANY_CODE,DEAL_BACKUP_DEAL,
--      DEAL_BASE_AMOUNT,CDEL_CANCEL_DATE,cdel_cancel_amount,Cdel_Cancel_Type,
--       d.CDEL_SPOT_RATE, d.CDEL_Forward_RATE,d.cdel_cancel_rate,Cdel_local_rate,
--       deal_other_currency,Deal_user_reference,cdel_profit_loss,DEAL_BUY_SELL,
--       DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,DEAL_EXECUTE_DATE,DEAL_EXCHANGE_RATE,
--       DEAL_Forward_RATE,DEAL_MATURITY_DATE,DEAL_SPOT_RATE,DEAL_USER_REFERENCE,
--       DEAL_BACKUP_DEAL,deal_serial_number,DEAL_MARGIN_RATE';
--     insert into temp values (Query_Str,Query_str1);
--      commit;
--       Open Gencursor For Query_Str||Query_Str1 ;
  --   Goto Process_End;
-- end if;
------------ends here---------------------
----- Modified By Shrihari  on 29-Apr-2014
--if varReportID ='FXANALYSISCONSOLIDATED' THEN
--
-- Query_Str := 'select
--         --pkgreturncursor.fncgetdescription(deal_company_code,1) as Company,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as Company,
--         deal_deal_number as DealNo,
--         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
--         pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry ,
--         pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
--         pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrrency,
--         pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
--         deal_user_reference as BankRefNo ,
--         a.deal_execute_date as BookingDate  ,
--         a.deal_base_amount as BookingAmt,
--         a.deal_spot_rate as Spot,
--         a.deal_forward_rate as Forward,
--         a.deal_margin_rate as Margin,
--         a.deal_exchange_rate as NetRate,
--         a.deal_maturity_date as DueDate,';
--
--  Query_Str1 := ' cancelamount as CancelledAmt,
--         Utilizedamount as UtilizedAmt,
--         pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') as Outstanding,
--         cancelPnl ,
--         UtilizedpnL,
--         cancelPnl+UtilizedpnL as TotalPnL ,
--         '||''''||frmDate||''''||' as AsonDate,
--         '||''''||ToDate||''''||' as ToDate,
--         pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair
--
--         ' || varGroupField || '
--
--        from trtran001 a left outer join
--             (select  sum(case when b.cdel_cancel_type =27000001 then cdel_cancel_amount else 0 end) cancelamount,
--                      sum(case when b.cdel_cancel_type =27000002 then cdel_cancel_amount else 0 end) Utilizedamount,
--                      sum(case when b.cdel_cancel_type =27000001 then cdel_profit_loss else 0 end) cancelPnl,
--                      sum(case when b.cdel_cancel_type =27000002 then cdel_profit_loss else 0 end) UtilizedpnL,
--                      cdel_deal_number
--                from trtran006 b
--                where cdel_record_status not in (10200005,10200006)
--                and cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
--                group by cdel_deal_number ) b
--         on  deal_deal_number=cdel_deal_number
--         where deal_record_status not in (10200005,10200006)
--         and a.deal_deal_type not in (25400001)
--         '|| finalcondition||'
--         order by a.deal_execute_date
--         ';
--         delete from temp;commit;
--     insert into temp values (Query_Str,Query_str1);
--      commit;
--        Open Gencursor For Query_Str||Query_Str1 ;
--
---- Query_Str := 'select DEAL_DEAL_NUMBER AS DEALNUMBER,
----                  --pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
----                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS BANKDESC,
----                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) AS CompanyCode,
----                  pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Trans,
----                  --DEAL_COMPANY_CODE AS COMPCODE,
----                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
----                      DEAL_BASE_AMOUNT as BookAmt,
----                  CDEL_CANCEL_DATE AS CancelDate,
----              cdel_cancel_amount as CancelAmt,
----               Case When d.Cdel_Cancel_Type=27000001
----                  Then ' || '''C'''||'
----                  Else
----                  ' || '''D'''||'
----                  end as "Cancelled/Delivered" ,
----                  d.CDEL_SPOT_RATE as CancelSpot,
----                  d.CDEL_Forward_RATE as CancelForward,
----                  cdel_cancel_rate as NetCancel,
----                     (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
----                  nvl(sum(CDEL_PROFIT_LOSS),0) as profitlossINR,
----                  /*pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as m2m,*/
----                  decode(round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2),1,0,round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2)) as profitlossUSD,
----                  Deal_user_reference as bankref,
----                  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSAL,
----                  pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
----                  --pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPARTY,
----                  pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
----                 ';
----
----          Query_Str1 := '       DEAL_EXECUTE_DATE AS EXEDATE,
----                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
----                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmDate||''''||') AS BASEAMT,
----               --DEAL_BASE_AMOUNT AS BASEAMT,
----                 DEAL_EXCHANGE_RATE AS EXERATE,
----                 DEAL_Forward_RATE AS FORWRATE,
----                 DEAL_MATURITY_DATE AS MATURITYDATE,
----                 DEAL_SPOT_RATE AS SPOTRATE,
----                 DEAL_USER_REFERENCE as REFNO,
----                 pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BACKUPDEAL,
----                 (select (case
----                  when trad_import_export <= 25300050 then
----                  ' || '''Exp''' || '
----                  when trad_import_export > 25300050 then
----                  ' || '''Imp''' || '
----                  end) Catg
----                 from trtran002, trtran004
----                 where TRAD_TRADE_REFERENCE=HEDG_TRADE_REFERENCE
----                 and HEDG_DEAL_NUMBER=DEAL_DEAL_NUMBER
----                  group by trad_import_export) as importexport,
----                 pkgreturnreport.GetSystemDate() as SystemDate,
----                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
----              -- pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
----                  DEAL_MATURITY_DATE as spotduedate,
----                 '||''''||frmDate||''''||' as  FromDate,
----                  Case when d.Cdel_Cancel_Type=27000001
----                  then cdel_cancel_amount
----                  end as "Cancelled Amt",
----                  Case when d.Cdel_Cancel_Type=27000002
----                  then cdel_cancel_amount
----                  end as "Utilized Amt",
----
----
----                 '||''''||ToDate||''''||'  as ToDate,
----                 0 as "Margin",
----                 0 as "P/LCancelled",
----                 0 as "P/LUtilized"
----                 ' || varGroupField || '
----   from trtran001,trtran006 d
----   where CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
----     and deal_serial_number = cdel_deal_serial
----      and DEAL_RECORD_STATUS not in (10200005,10200006)
----      and CDEL_RECORD_STATUS not in (10200005,10200006)
----      '|| finalcondition||'
----      group by DEAL_DEAL_NUMBER,DEAL_COUNTER_PARTY,DEAL_COMPANY_CODE,DEAL_BACKUP_DEAL,
----      DEAL_BASE_AMOUNT,CDEL_CANCEL_DATE,cdel_cancel_amount,Cdel_Cancel_Type,
----       d.CDEL_SPOT_RATE, d.CDEL_Forward_RATE,d.cdel_cancel_rate,Cdel_local_rate,
----       deal_other_currency,Deal_user_reference,cdel_profit_loss,DEAL_BUY_SELL,
----       DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,DEAL_EXECUTE_DATE,DEAL_EXCHANGE_RATE,
----       DEAL_Forward_RATE,DEAL_MATURITY_DATE,DEAL_SPOT_RATE,DEAL_USER_REFERENCE,
----       DEAL_BACKUP_DEAL,deal_serial_number,DEAL_MARGIN_RATE';
----     insert into temp values (Query_Str,Query_str1);
----      commit;
----       Open Gencursor For Query_Str||Query_Str1 ;
--     Goto Process_End;
-- end if;
--------------ends here ---------------------

if varReportID ='FXANALYSISCONSOLIDATED' THEN
  dattemp := (frmDate - 1);
 delete from temp; commit;
  insert into temp values (finalcondition,'Before');
  
  select replace ( finalcondition, 'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY')||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''' ,'')  
   into  finalcondition from dual;
-- And DEAL_MATURITY_DATE  between '01-Jan-2015' and '27-Apr-2015' 
  
  insert into temp values (finalcondition,'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY') ||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''');
  
  
 Query_Str := 'select 
         pkgreturncursor.fncgetdescription(deal_company_code,2) as CompanyName,
          pkgreturncursor.fncgetdescription(deal_location_code,2) as LocationName,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as Company,
         deal_deal_number as DealNo,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
         pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry ,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
         pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrrency,
         pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
         deal_user_reference as BankRefNo ,
         a.deal_execute_date as BookingDate  , 
         a.deal_base_amount as BookingAmt, 
         a.deal_spot_rate as Spot,
         a.deal_forward_rate as Forward,
         a.deal_margin_rate as Margin,
         a.deal_exchange_rate as NetRate,
         a.deal_maturity_date as DueDate,'; 
         
  Query_Str1 := '  pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||dattemp||''''||') as outstandingason,
        nvl(cancelamount,0) as CancelledAmt,
         nvl(Utilizedamount,0) as UtilizedAmt,
         pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') as Outstanding,
         nvl(cancelPnl,0)cancelPnl ,
         nvl(UtilizedpnL,0)UtilizedpnL,
         nvl(cancelPnl,0)+nvl(UtilizedpnL,0) as TotalPnL ,
         '||''''||frmDate||''''||' as AsonDate,
         '||''''||ToDate||''''||' as ToDate,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair
    
         ' || varGroupField || ' 
         
         from trtran001 a left outer join
             (select  nvl(sum(case when b.cdel_cancel_type =27000001 then cdel_cancel_amount else 0 end),0) cancelamount,
                      nvl(sum(case when b.cdel_cancel_type =27000002 then cdel_cancel_amount else 0 end),0) Utilizedamount,
                      nvl(sum(case when b.cdel_cancel_type =27000001 then cdel_profit_loss else 0 end),0) cancelPnl,
                      nvl(sum(case when b.cdel_cancel_type =27000002 then cdel_profit_loss else 0 end),0) UtilizedpnL,
                      cdel_deal_number, Min(cdel_cancel_date) Utlizeddate
                from trtran006 b
                where cdel_record_status not in (10200005,10200006)
                and cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
                group by cdel_deal_number) b
         on  deal_deal_number=cdel_deal_number
         where deal_record_status not in (10200005,10200006)
         and a.deal_deal_type not in (25400001) 
         and ((a.deal_execute_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||')
              or (nvl(Utlizeddate,''' || '01-Jan-1900' ||''') between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'))
          '|| finalcondition||' 
         order by a.deal_execute_date ';
         
          
  --       delete from temp;commit;
     insert into temp values (Query_Str,Query_str1);
      commit;
        Open Gencursor For Query_Str||Query_Str1 ;  
     Goto Process_End;      
 end if;

-- ADDED ON 24-05-12

if varReportID ='CONSOLPLFOROPTION' or varReportID ='CONSOLPLFOROPTIONBANKWISE' then
   Query_Str := 'select
 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
pkgreturncursor.fncgetdescription(copt_Company_code, 2) CompanyCode,
pkgreturncursor.fncgetdescription(copt_counter_party, 2) CounterParty,
sum(CORV_BASE_AMOUNT) totalbase,
sum(CORV_PROFIT_LOSS) totalpl,
'||''''||frmDate||''''||' as  FromDate,
                 '||''''||ToDate||''''||'  as ToDate
                     ' || varGroupField || '
FROM trtran071
          LEFT OUTER JOIN trtran073
          ON corv_deal_number = copt_deal_number
                 --  and  COPT_SERIAL_NUMBER=COSU_SERIAL_NUMBER
                     AND corv_record_status not in(10200005,10200006)
         WHERE      copt_record_status not in(10200005,10200006)
                    and  copt_record_status not in(10200005,10200006)
                --    and CORV_EXERCISE_DATE between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
                    '|| finalcondition||'
                    group by COPT_COUNTER_PARTY, COPT_company_code';
     insert into temp values (Query_Str,finalcondition);
      commit;
       Open Gencursor For Query_Str ;
     Goto Process_End;
 end if;

--
--ADDING FOR CONSOLIDATED ForwardS REPORT 04062012
--
if VARREPORTID = 'UNREALIZEDPANDLOPT' then
 QUERY_STR := '
                 select COPT_DEAL_NUMBER As DealNumber,
                 COPT_COMPANY_CODE AS COMPANYCODE,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
                pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmDate||''''||') AS BASEAMT,
                 COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400001) "SC",
                   COPT_PREMIUM_VALUEDATE AS PAIDDATE,
                   COPT_USER_REFERENCE AS USERREFNO,
                   copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
                   corv_exercise_date cancelDate, corv_exercise_rate cancelRate,
                   --corv_profit_loss as profitloss,
                  (select sum(MTMR_MTM_AMOUNT) from trtran075 where COPT_DEAL_NUMBER=MTMR_IBS_REF_NO and MTMR_REPORT_DATE=(select max(MTMR_REPORT_DATE) from trtran075)) profitloss,
                  -- CORV_PANDL_USD as GainLossUsd,
                   (select sum(MTMR_MTM_USD) from trtran075 where COPT_DEAL_NUMBER=MTMR_IBS_REF_NO and MTMR_REPORT_DATE=(select max(MTMR_REPORT_DATE) from trtran075))GainLossUsd,
                   case
                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,

               -- decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
                   pkgreturnreport.GetSystemDate() as SystemDate,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                   '||''''||FRMDATE||''''||' as  FromDate,
                   '||''''||TODATE||''''||'  as ToDate   ' || varGroupField || '
          FROM trtran071
          LEFT OUTER JOIN trtran073
          ON corv_deal_number = copt_deal_number
          and corv_record_status not in(10200005,10200006)

     WHERE  ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > '||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
          and (COPT_EXECUTE_DATE <= '||''''||frmDate||''''||')
          and copt_record_status not in(10200005,10200006)
          and pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,1,15,1, '||''''||frmDate||''''||') > 0
              '|| FINALCONDITION||'
          order by copt_maturity_date';
                     insert into TEMP values(QUERY_STR || FINALCONDITION,null);
                     commit;
                     open GENCURSOR for QUERY_STR    ;

     GOTO PROCESS_END;
 end if;

if varReportID ='CONSOLPLForward' then
   Query_Str := 'select
 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
pkgreturncursor.fncgetdescription(deal_Company_code, 2) CompanyCode,
pkgreturncursor.fncgetdescription(deal_counter_party, 2) CounterParty,
sum(deal_BASE_AMOUNT) totalbase,
sum(cdel_PROFIT_LOSS) totalpl,
'||''''||frmDate||''''||' as  FromDate,
                 '||''''||ToDate||''''||'  as ToDate
                     ' || varGroupField || '
FROM trtran001,trtran006
           WHERE deal_deal_number = cdel_deal_number
                and deal_serial_number = cdel_deal_serial
                     AND cdel_record_status not in(10200005,10200006)
                     and deal_record_status not in(10200005,10200006)
                    -- And cdel_cancel_DATE  between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
                    '|| finalcondition||'
                    group by deal_COUNTER_PARTY, deal_company_code';
     insert into temp values (Query_Str,finalcondition);
      commit;
       Open Gencursor For Query_Str ;
     Goto Process_End;
 end if;

 --
 --CONSOLIDATION Forward REPORT ENDS
 --


-- added on 29-aug-09 for vraj   by ramya
if varReportID = 'HEDGEREALIZEDPROFITLOSS' then

    Query_Str :='select CDEL_DEAL_NUMBER as DEALNO,DEAL_USER_REFERENCE as BnkRef,DEAL_EXECUTE_DATE AS EXDATE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,
                        --DEAL_BASE_AMOUNT AS BASEAMT,
                        pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) as BASEAMT,
                        DEAL_LOCAL_RATE as LCRATE,
                        decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) as AMTLCL,
                        --DEAL_OTHER_AMOUNT  AS OTHERAMT,
                        (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) * deal_exchange_rate)  as OTHERAMT,
                        CDEL_CANCEL_INR as CancelInr,
                        CDEL_CANCEL_RATE  as CancelRate,
                        (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
                        --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0))) as WashRate,
                        CDEL_LOCAL_RATE  as CancelLocalRate,
                        CDEL_OTHER_AMOUNT as CancelOtherAmt,CDEL_CANCEL_AMOUNT as CancelAmount,
                        CDEL_DEALER_REMARK as DealerRemarks,CDEL_CANCEL_DATE as CancelDate,
                        DEAL_MATURITY_FROM as MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        (case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
                        (abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
                        CDEL_PROFIT_LOSS as NewProfitLoss,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as CancelType,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
                        to_date('||''''||frmDate||''''||') as FromDate,to_Date('||''''||todate||''''||') as ToDate
                from    trtran001,trtran006
                where   cdel_deal_number  = deal_deal_number
                      --  and cdel_deal_serial  = deal_serial_number
                        and CDEL_CANCEL_TYPE= 27000001
                        and CDEL_DEAL_TYPE = 26000001
                        and deal_RECORD_STATUS not in(10200005,10200006)
                        and CDEL_RECORD_STATUS not in(10200005,10200006)
                        and cdel_deal_number not in(select LMOD_REFERENCE_NUMBER from trtran009 where LMOD_RECORD_STATUS in(10200001,10200002,10200003,10200004) )  ';
    open GenCursor for Query_Str||finalCondition||' order by DEAL_EXECUTE_DATE,DEAL_COUNTER_PARTY,cdel_deal_number,cdel_reverse_serial';
--    insert into temp values(Query_Str,finalCondition);commit;
    GoTo Process_End;
  end if;

-- if  varReportID =  'PARTIALDELIVARYUNDERHEDGING' or   varReportID =  'PARTIALDELIVARYUNDERHEDGINGDET' then
--
--    Query_Str :='select deal_deal_number as DealNumber,DEAL_EXECUTE_DATE as ExecuteDate,
--                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) as BuySell,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
--                        deal_base_amount as BaseAmount,Deal_exchange_rate as TradeRate,
--                        pkgreturnreport.fncConvRs(decode(deal_other_amount,0,deal_amount_local,deal_other_amount)) as OtherAmount,
--                        DEAL_MATURITY_DATE as MaturityDate,cdel_trade_reference as TradeReference,
--                        CDEL_CANCEL_DATE as CancelDate,CDEL_REVERSE_SERIAL as CdelReverseSerial,
--                        CDEL_CANCEL_AMOUNT as CancelAmount,CDEL_CANCEL_RATE as CancelRate,
--                        decode(CDEL_OTHER_AMOUNT,0,CDEL_CANCEL_INR,CDEL_OTHER_AMOUNT) as CdelOtherAmount,
--                        decode(DEAL_OTHER_CURRENCY,30400003,(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE),(CDEL_CANCEL_AMOUNT*CDEL_LOCAL_RATE)) as CdelCancelInr,
--
--                        (select (deal_base_amount
--                             - (nvl((select sum(cdel_cancel_amount)
--                                     from   trtran006
--                                     where  CDEL_CANCEL_DATE  between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
--                                            and cdel_deal_number = m.cdel_deal_number
--                                            and CDEL_REVERSE_SERIAL <= m.CDEL_REVERSE_SERIAL
--                                            and cdel_record_status not in(10200005,10200006)
--                                            and cdel_cancel_type  = 27000002),0)))
--                        from trtran001 a
--                        where a.deal_deal_number = m.cdel_deal_number
--                              and a.deal_record_status not in(10200005,10200006)) as OutstandingAmt,
--
--                        --(pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||toDate||''''||',m.cdel_cancel_date,m.cdel_reverse_serial) - cdel_cancel_amount) as OutstandingAmt,
--                        --pkgreturnreport.fncConvRs(CDEL_CANCEL_INR) as  CdelCancelInr,
--                        (SELECT brel_user_reference
--                        FROM trtran003
--                        WHERE brel_trade_reference=(SELECT trad_trade_reference
--                                                   from trtran002
--                                                   WHERE trad_reverse_reference=cdel_trade_reference
--                                                         AND trad_reverse_serial=cdel_reverse_serial)) as VoucherNo,
--                        CDEL_DEALER_REMARK as DealerRemarks,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    TRTRAN001,trtran006 m
--                where   --deal_deal_number = hedg_deal_number and
--                       -- deal_serial_number = hedg_deal_serial and
--                        deal_deal_number = cdel_deal_number and
--                       -- deal_serial_number = cdel_deal_serial and
--                        cdel_cancel_type = 27000002 and
--                        deal_base_amount != cdel_cancel_amount ';
-- insert into temp values(Query_Str,finalCondition);commit;
--    OPEN GenCursor for Query_Str||finalCondition || ' order by CDEL_CANCEL_DATE,deal_deal_number ' ;
--    Goto Process_End;
--  end if;
--


---added for almus as on 06/12/2013

  if varReportID='EXPOSUREHEDGEDUNHEDGED' then
    OPEN GenCursor for
      SELECT pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,2)                 AS CompanyCode,
        SUM(pkgForexProcess.fncGetOutstanding (trad_trade_reference,0,0,1,frmDate)) AS Outstanding,
        (SELECT SUM(HEDG_HEDGED_FCY)
        FROM trtran004,
          TRTRAN002
        WHERE HEDG_TRADE_REFERENCE=TRTRAN002.trad_trade_reference
        ) AS Hedgeamount,
        SUM((pkgForexProcess.fncGetOutstanding (trad_trade_reference,0,0,1,frmDate) -
        (SELECT NVL(SUM(HEDG_HEDGED_FCY),0)
        FROM trtran004
        WHERE HEDG_TRADE_REFERENCE = trad_trade_reference
        ))) Unhedgedamount,
        pkgreturnreport.getCompanyName(varUserID) AS CompanyName,
        frmDate                                   AS frmdate,
        toDate                                    AS todate
      FROM TRTRAN002
      WHERE TRAD_RECORD_STATUS NOT IN(10200005,10200006,10200012)
      AND ((TRAD_PROCESS_COMPLETE   = 12400001
      AND trad_complete_date        > frmDate)
      OR TRAD_PROCESS_COMPLETE      = 12400002)
      AND TRAD_MATURITY_DATE        > frmDate
      GROUP BY TRAD_COMPANY_CODE;
    Goto Process_End;
  end if;
---------------------------------------
 if VARREPORTID= 'CONCALLNUMBER' then
   SELECT FNCUSERPNLPOPULATE(FRMDATE,VARUSERID,'N')
   INTO NUMRECORDS FROM DUAL;
   SELECT MAX( HDAY_CALENDAR_DATE) INTO DATTEMP
  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
   And Hday_Day_Status Not In (26400007,26400008,26400009);

OPEN GenCursor for
        SELECT USERID,
       pkgreturncursor.fncgetdescription(Deal_type,2) AS DealType,
        SUM(NVL(FRWDTD,0)) + SUM(NVL(FRWMTD,0)) + SUM(NVL(FRWYTD,0)) + SUM(NVL(FURDTD,0)) + SUM(NVL(FURMTD,0))+ SUM(NVL(FURYTD,0)) +
        SUM(NVL(OPTDTD,0)) + SUM(NVL(OPTMTD,0)) + SUM(NVL(OPTYTD,0)) + SUM(NVL(FRWMTM,0)) + SUM(NVL(FURMTM,0))+ SUM(NVL(OPTMTM,0)) Amount,
        TO_DATE(frmDate)                            AS FromDate,
        to_date(toDate)                             AS ToDate,
        pkgreturnreport.getCompanyName(varUserID)       AS CompanyName,
        pkgreturnReport.getCompanyNameFooter()          AS CompanyFooter
      FROM trsystem983
      WHERE
        hedgetrade     = 26000002
        and ason_date <= frmDate
      AND COMPANYCODE IN
        (SELECT usco_company_code FROM trsystem022a WHERE usco_user_id = varUserID)
       GROUP BY   Deal_type,  USERID  ORDER BY 1,2 DESC ;

   Goto Process_End;
  end if;
  --------------------------------



-------------------
if  varReportID =  'PARTIALDELIVARYUNDERHEDGING' or   varReportID =  'PARTIALDELIVARYUNDERHEDGINGDET' then
 Query_Str :='select HEDG_DEAL_NUMBER as DealNumber,DEAL_EXECUTE_DATE as ExecuteDate,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) as BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
                        deal_base_amount as BaseAmount,Deal_exchange_rate as TradeRate,
                        pkgreturnreport.fncConvRs(decode(deal_other_amount,0,deal_amount_local,deal_other_amount)) as OtherAmount,
                        DEAL_MATURITY_DATE as MaturityDate,cdel_trade_reference as TradeReference,
                        CDEL_CANCEL_DATE as CancelDate,CDEL_REVERSE_SERIAL as CdelReverseSerial,
                        CDEL_CANCEL_AMOUNT as CancelAmount,CDEL_CANCEL_RATE as CancelRate,
                        decode(CDEL_OTHER_AMOUNT,0,CDEL_CANCEL_INR,CDEL_OTHER_AMOUNT) as CdelOtherAmount,
                        decode(DEAL_OTHER_CURRENCY,30400003,(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE),(CDEL_CANCEL_AMOUNT*CDEL_LOCAL_RATE)) as CdelCancelInr,
                        (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||toDate||''''||',m.cdel_cancel_date,m.cdel_reverse_serial) - cdel_cancel_amount) as OutstandingAmt,
                        --pkgreturnreport.fncConvRs(CDEL_CANCEL_INR) as  CdelCancelInr,
                        (SELECT brel_user_reference
                        FROM trtran003
                        WHERE brel_trade_reference=(SELECT trad_trade_reference
                                                   from trtran002
                                                   WHERE trad_reverse_reference=cdel_trade_reference
                                                         AND trad_reverse_serial=cdel_reverse_serial
                                                         and trad_record_status not in(10200005,10200006))
                                                          and brel_record_status not in(10200005,10200006)
                                                         and brel_reverse_serial= cdel_reverse_serial) as VoucherNo,
                        CDEL_DEALER_REMARK as DealerRemarks,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001,trtran004,trtran006 m
                where   deal_deal_number = hedg_deal_number and
                        deal_serial_number = hedg_deal_serial and
                        deal_deal_number = cdel_deal_number and
                        deal_serial_number = cdel_deal_serial and
                        cdel_trade_reference = hedg_trade_Reference and
                        cdel_record_status not in(10200005,10200006) and
                        deal_record_status not in(10200005,10200006) and
                        hedg_record_status not in(10200005,10200006) and
                        cdel_cancel_type = 27000002';
    --insert into temp values(Query_Str,finalCondition);commit;
    OPEN GenCursor for Query_Str||finalCondition || ' order by CDEL_CANCEL_DATE,deal_deal_number ' ;
    Goto Process_End;
  end if;
  if varReportID = 'CANCELLATIONOFHDGCONTRACT'   then

    Query_Str :='select CDEL_DEAL_NUMBER as DealNumber,DEAL_EXECUTE_DATE as ExecuteDate,CDEL_CANCEL_DATE as CancelDate,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,DEAL_OTHER_CURRENCY as CurrencyCode,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as Buysell,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
                        DEAL_BASE_AMOUNT as BaseAmount,PKGRETURNCURSOR.fncRollover(CDEL_DEAL_NUMBER,2)  as ExchangeRate
                        --DEAL_EXCHANGE_RATE as ExchangeRate
                        ,DEAL_OTHER_AMOUNT as OtherAmount,
                        deal_local_rate as LocalRate,
                        decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AmountLocal,
                        DEAL_MATURITY_DATE as MaturityDate,
                        CDEL_CANCEL_AMOUNT as CancelAmount,CDEL_CANCEL_RATE as CancelRate,
                        decode(CDEL_OTHER_AMOUNT,0,CDEL_CANCEL_INR,CDEL_OTHER_AMOUNT) as CdelOtherAmount,
                        decode(CDEL_LOCAL_RATE,0,1,CDEL_LOCAL_RATE) as CdelLocalRate,CDEL_CANCEL_INR as  CancelInr,CDEL_DEALER_REMARK as DealerRemarks,
                        (DEAL_BASE_AMOUNT-CDEL_CANCEL_AMOUNT) as BalanceAmount,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / cdel_local_rate)),4) as ProfitLoss,
                        cdel_profit_loss as  NewProfitLoss,
                        abs((case when cdel_profit_loss > 0 then  cdel_profit_loss else 0 end)) as Profit,
                        abs((case when cdel_profit_loss < 0 then  cdel_profit_loss else 0 end)) as Loss,
                        pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as Status,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        hedg_trade_reference as TradeReference
                from    trtran006,trtran001,trtran004
                where   hedg_deal_number = cdel_deal_number and
                        hedg_deal_serial = deal_serial_number and
                        cdel_deal_number = deal_deal_number and
                        cdel_deal_serial = deal_serial_number and
                        cdel_deal_type in('||GConst.HEDGEDEAL||') and
                        cdel_record_status not in(10200005,10200006) and
                        CDEL_CANCEL_TYPE = 27000002 ';
--    insert into temp values(Query_Str,finalCondition);commit;
    open GenCursor for  Query_Str ||finalCondition || ' order by CDEL_CANCEL_DATE';
    GoTo Process_End;
  end if;



--if  varReportID = 'COMPLETEDELIVARYOFHEDGE'  then
--
--    Query_Str1 := 'Import';
--    temp := 'Export';
--    Query_Str:='SELECT deal_deal_number AS DealNumber, cdel_trade_reference AS TradeReference ,
--                       deal_execute_date AS ExecuteDate,
--                       pkgreturncursor.fncgetdescription(deal_base_currency,2) AS  BaseCurrency,
--                       pkgreturncursor.fncgetdescription(deal_other_currency,2) AS OtherCurrency,
--                       decode(deal_buy_sell,25300001,'||''''||Query_Str1||''''||','||''''||temp||''''||') as BuySell,
--                       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
--                       deal_base_amount AS BaseAmount,
--                       --pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',CDEL_TRADE_REFERENCE) as BaseAmount,
--                       (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||toDate||''''||',m.cdel_cancel_date,m.cdel_reverse_serial) - cdel_cancel_amount) as OutstandingAmt,
--                       deal_exchange_rate AS ExchangeRate,deal_other_amount as OtherAmount,
--                       cdel_cancel_date AS CancelDate,cdel_cancel_amount AS CancelAmount,cdel_cancel_rate AS CancelRate,
--                       decode(deal_other_currency,30400003,(cdel_cancel_rate * cdel_cancel_amount),0) as CancelInr,
--                       (DEAL_BASE_AMOUNT-CDEL_CANCEL_AMOUNT) as BalanceAmount,
--                        decode(cdel_delivery_from,null,
--                           (select brel_user_reference
--                             from trtran003
--                             where brel_reversal_type in (25800001,25800052)
--                             and  brel_reversal_fcy=m.cdel_cancel_amount
--                             -- and  brel_trade_reference = m.cdel_trade_reference
--                             and brel_trade_reference = (select trad_trade_reference
--                                                          from trtran002
--                                                          where TRAD_REVERSE_REFERENCE = m.CDEL_TRADE_REFERENCE
--                                                               and trad_complete_date = m.CDEL_CANCEL_DATE
--                                                               and trad_trade_fcy = m.cdel_cancel_amount
--                                                               and trad_record_status not in (10200005,10200006)
--                                                               )
--                             and brel_record_status not in(10200005,10200006)
--                             and to_date(brel_create_date) = to_date(m.cdel_create_date)),
--                             (select brel_user_reference
--                               from trtran003
--                              where brel_trade_reference= m.cdel_trade_reference
--                               and  brel_reversal_fcy=m.cdel_cancel_amount
--                               and brel_record_status not in(10200005,10200006)
--                               and to_date(brel_create_date) = to_date(m.cdel_create_date)
--                               )) as VoucherNo,
--                      pkgreturnreport.GetSystemDate() as SystemDate,
--                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                      to_date('||''''||frmDate||''''||') as FromDate,
--                      to_date('||''''||toDate||''''||') as AsonDate
--                FROM  trtran006 m,trtran001
--                WHERE cdel_cancel_type  =27000002
--                AND   cdel_deal_number  = deal_deal_number
--                AND   cdel_deal_serial  = deal_serial_number
--                AND   cdel_record_status  NOT IN(10200005,10200006) ';
--    --insert into temp values(Query_Str,finalCondition);commit;
--    open GenCursor for  Query_Str ||finalCondition || ' order by CDEL_CANCEL_DATE,deal_deal_number';
--    GoTo Process_End;
--  end if;
--
 if  varReportID = 'COMPLETEDELIVARYOFHEDGE'  then

    Query_Str1 := 'Import';
    temp := 'Export';
    Query_Str:='SELECT deal_deal_number AS DealNumber, cdel_trade_reference AS TradeReference ,
                       deal_execute_date AS ExecuteDate,
                       pkgreturncursor.fncgetdescription(deal_base_currency,2) AS  BaseCurrency,
                       pkgreturncursor.fncgetdescription(deal_other_currency,2) AS OtherCurrency,
                       decode(deal_buy_sell,25300001,'||''''||Query_Str1||''''||','||''''||temp||''''||') as BuySell,
                       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
                       deal_base_amount AS BaseAmount,
                       --pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',CDEL_TRADE_REFERENCE) as BaseAmount,
                       (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||toDate||''''||',m.cdel_cancel_date,m.cdel_reverse_serial) - cdel_cancel_amount) as OutstandingAmt,
                       deal_exchange_rate AS ExchangeRate,deal_other_amount as OtherAmount,
                       cdel_cancel_date AS CancelDate,cdel_cancel_amount AS CancelAmount,cdel_cancel_rate AS CancelRate,
                       decode(deal_other_currency,30400003,(cdel_cancel_rate * cdel_cancel_amount),0) as CancelInr,
                       (DEAL_BASE_AMOUNT-CDEL_CANCEL_AMOUNT) as BalanceAmount,
                        decode(cdel_delivery_from,null,
                           (select brel_user_reference
                             from trtran003
                             where brel_reversal_type in (25800001,25800052)
                             and  brel_reversal_fcy=m.cdel_cancel_amount
                             -- and  brel_trade_reference = m.cdel_trade_reference
                             and brel_trade_reference = (select trad_trade_reference
                                                          from trtran002
                                                          where TRAD_REVERSE_REFERENCE = m.CDEL_TRADE_REFERENCE
                                                               and trad_complete_date = m.CDEL_CANCEL_DATE
                                                               and trad_trade_fcy = m.cdel_cancel_amount
                                                               and trad_record_status not in (10200005,10200006)
                                                               )
                             and brel_record_status not in(10200005,10200006)
                             and to_date(brel_create_date) = to_date(m.cdel_create_date)),
                             (select brel_user_reference
                               from trtran003
                              where brel_trade_reference= m.cdel_trade_reference
                               and  brel_reversal_fcy=m.cdel_cancel_amount
                               and brel_record_status not in(10200005,10200006)
                               and to_date(brel_create_date) = to_date(m.cdel_create_date)
                               )) as VoucherNo,
                      pkgreturnreport.GetSystemDate() as SystemDate,
                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                      to_date('||''''||frmDate||''''||') as FromDate,
                      to_date('||''''||toDate||''''||') as AsonDate
                      ' || varGroupField || '
                FROM  trtran006 m,trtran001
                WHERE cdel_cancel_type  =27000002
                AND   cdel_deal_number  = deal_deal_number
                AND   cdel_deal_serial  = deal_serial_number
                AND   cdel_record_status  NOT IN(10200005,10200006)
                and DEAL_PROCESS_COMPLETE=12400001';
    --insert into temp values(Query_Str,finalCondition);commit;
    open GenCursor for  Query_Str ||finalCondition || ' order by CDEL_CANCEL_DATE,deal_deal_number';
    GoTo Process_End;
  end if;


  if  varReportID ='EXTENSIONOFHDGCONTRACT' then

    Query_Str :='select DEAL_DEAL_NUMBER as DealNumber,DEAL_EXECUTE_DATE as ExecuteDate,
                        pkgReturnCursor.fncGetDescription(DEAL_BUY_SELL,2) as BuySell,
                        pkgReturnCursor.fncGetDescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
                        pkgReturnCursor.fncGetDescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
                        DEAL_EXCHANGE_RATE as ExchangeRate,DEAL_LOCAL_RATE as LocalRate,
                        DEAL_BASE_AMOUNT as BaseAmount,DEAL_OTHER_AMOUNT as OtherAmount,
                        pkgreturnreport.fncConvRs(DEAL_AMOUNT_LOCAL) as AmountLocal,
                        DEAL_MATURITY_FROM as MaturityFrom,DEAL_MATURITY_DATE as MaturityDate,
                        LMOD_REFERENCE_NUMBER as ReferenceNumber,
                        LMOD_ENHANCED_RATE as EnhancedRate,LMOD_ENHANCED_FCY as EnhancedFcy,
                        LMOD_OTHER_AMOUNT as lmodOtherAmount,LMOD_LOCAL_RATE as LmodLocalRate,
                        pkgreturnreport.fncConvRs(LMOD_LOCAL_AMOUNT)  as LmodLocalAmount,
                        LMOD_DEAL_REMARKS as DealRemarks,
                        LMOD_LOCAL_RATE as  ExtCharges, LMOD_LOCAL_AMOUNT as  BalanceAmt,
                        LMOD_CHANGE_DATE as ChangeDate,LMOD_MATURITY_FROM as LmodMaturityFrm,
                        LMOD_MATURITY_DATE as LmodMaturityDate,pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
                        to_date('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate
                from    trtran001,trtran009
                where   LMOD_REFERENCE_NUMBER = deal_deal_number
                        and lmod_reference_serial = deal_serial_number ';

    open GenCursor for Query_Str||finalCondition||' order by DEAL_DEAL_NUMBER ';
    GoTo Process_End;
  end if;


if varReportID = 'TRADEDEALHOLDINGRATEM2MREPORT' then

    numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate); commit;
    open GenCursor for
                select  pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as AccountCode,
                        pkgReturnCursor.fncGetDescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
                        pkgReturnCursor.fncGetDescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
                        POSN_REFERENCE_NUMBER as ReferenceNumber,POSN_REFERENCE_DATE as ReferenceDate,
                        POSN_DUE_DATE as DueDate ,DEAL_MATURITY_DATE as MaturityDate,
                        POSN_FCY_RATE as FcyRate,POSN_TRANSACTION_AMOUNT as TransactionAmount,
                        POSN_INR_VALUE as InrValue,
                        --POSN_M2M_INRRATE as M2mInrRate,
                        (pkgforexprocess.fncGetRate(posn_currency_code,30400003,posn_reference_date,(case when posn_account_code < 25900050 then 25300001 else 25300002 end),0,DEAL_MATURITY_DATE,0))as M2mInrRate,
                        POSN_REVALUE_INR as RevalueInr,
                        POSN_POSITION_INR as PositionInr,POSN_ACCOUNT_CODE as AccountType,
                        DEAL_USER_ID as UserId,DPOS_HOLDING_RATE as HoldingRate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturncursor.fncgetdescription(CompanyName,1) as CompDesc
                from    trsystem997,trsystem032,trtran001
                where   DPOS_POSITION_DATE = (select max(HDAY_CALENDAR_DATE) from trsystem001 where HDAY_DAY_STATUS = GConst.DAYCLOSED and HDAY_CALENDAR_DATE < frmDate)
                        and POSN_CURRENCY_CODE=DPOS_CURRENCY_CODE
                        and POSN_REFERENCE_DATE = frmDate
                        and POSN_REFERENCE_NUMBER = DEAL_DEAL_NUMBER
                        and posn_reference_serial = deal_serial_number
                        and deal_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive)
                        and deal_hedge_trade = GConst.TRADEDEAL
                        and dpos_position_type = GConst.TRADEDEAL
                        and dpos_user_id = '0'
                order by DEAL_MATURITY_DATE ;
    GoTo Process_End;
  end if;

  if  varReportID = 'TRADETRANSACTIONEXCESS' then

    Query_Str :='select DEAL_EXECUTE_DATE as ExecuteDate,DEAL_DEAL_NUMBER as DealNumber,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as BuySell,
                        DEAL_OTHER_AMOUNT as OtherAmount,DEAL_BASE_AMOUNT as BaseAmount,
                        DEAL_EXCHANGE_RATE as ExchangeRate,DEAL_AMOUNT_LOCAL as AmountLocal,
                        DEAL_MATURITY_DATE as MaturityDate,
                        DEAL_USER_ID as UserId,DEAL_DEALER_REMARKS as DealerRemarks,
                        RDEL_LIMIT_USD as Limit,RDEL_AMOUNT_EXCESS as ExcessAmount,
                        pkgreturncursor.fncgetdescription(RDEL_ACTION_TAKEN,1) as ActionTaken,
                        pkgreturncursor.fncgetdescription(RDEL_RISK_TYPE,1) as RiskTypes,
                        to_date('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran001,trtran011
                where   deal_hedge_trade in (26000001)
                        and deal_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||')
                        and DEAL_DEAL_NUMBER = RDEL_DEAL_NUMBER
                        and deal_serial_number = rdel_serial_number ';
    insert into temp values(Query_Str,finalCondition);commit;
    open GenCursor for Query_Str||finalCondition;
    GoTo Process_End ;
  end if;

  if  varReportID = 'TRADEDEALERWISEPOSITION' then --Dealerwise Position Report for the Trade Deal

    Query_Str1 := frmDate;
    OPEN GenCursor for
                select  dpos_user_id as DealerId,
                        dpos_holding_rate as HoldingRate,
                        pkgreturncursor.fncGetDescription(dpos_currency_code,2) as CurrencyCode,
                        nvl((select dpos_day_position
                             from   trsystem032
                             where  dpos_position_date = (select max(hday_calendar_date) from trsystem001 where hday_day_status = 26400005 and hday_calendar_date < frmDate) and
                                    dpos_user_id = b.dpos_user_id and
                                    dpos_currency_code= b.dpos_currency_code
                         ),0) as  OpenPosition,
                         (decode((select dpos_position_code
                                  from trsystem032
                                  where  dpos_position_date = (select max(hday_calendar_date) from trsystem001 where hday_day_status = 26400005 and hday_calendar_date < '05-feb-09') and
                                         dpos_user_id = b.dpos_user_id and
                                  dpos_currency_code= b.dpos_currency_code
                        ),12400001,'O/B',12400002,'O/S','')) as  OpenPosStatus,
                        dpos_purchase_amount as PurchaseFcy,dpos_sale_amount as SalesFcy,
                        decode(dpos_position_code,12400001,'O/B',12400002,'O/S','') as Status,
                        dpos_day_position as Position,
                        pkgreturnreport.GetSystemDate() as SystemDate,dpos_position_date as ReferenceDate,
                         pkgreturnreport.getCompanyName( varUserID  ) as CompanyName
                from    trsystem032 b
                where   dpos_position_date = frmDate and
                        dpos_user_id != '0' and
                        dpos_position_type= GConst.TRADEDEAL
                order by dpos_user_id,dpos_currency_code;
    Goto Process_End;
  end if;

  if varReportID = 'HDGEPARTICULARCRNCYPOSITION' then

    Query_Str :='T%';
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;

    Query_Str :='select pkgreturncursor.fncGetDescription(POSN_CURRENCY_CODE,2) as CurrencyCode,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_TRANSACTION_AMOUNT else 0 end) as AssetsFcy,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_TRANSACTION_AMOUNT else 0 end) as LiabilitiesFcy,
                        sum(case when POSN_ACCOUNT_CODE <= 25900050 then POSN_INR_VALUE else 0 end) as AssetsInr,
                        sum(case when POSN_ACCOUNT_CODE > 25900050 then POSN_INR_VALUE else 0 end) as LiabilitiesInr,
                        max(POSN_REFERENCE_DATE) as ReferenceDate,pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                FROM    TRSYSTEM997
                where   posn_reference_number not like '||''''||Query_Str||'''';
    OPEN GenCursor for Query_Str||finalCondition||' GROUP BY POSN_CURRENCY_CODE';
    Goto Process_End;
  End if;

 if varReportID = 'MERCHANTDEALREALIZATIONREPORT' then
      open GenCursor for
--               select TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_REFERENCE as ReverseReference,
--                      trad_user_reference as UserReference,
--                      trad_reverse_serial as RevSerial,
--                      (select trad_reverse_reference from trtran002 where trad_trade_reference = a.trad_trade_reference) as PurchaseRef,
--                      nvl((select trad_trade_fcy from trtran002 where trad_trade_reference = a.trad_reverse_reference),0) as PurchaseAmt,
--                      pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,2) as ImportExport,
--                      pkgreturncursor.fncgetdescription(TRAD_Local_Bank,2) as LocalBank,
--                      trad_entry_date as EntryDate,
--                      pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
--                      trad_trade_fcy as TradeFcy,
--                      trad_trade_rate as TradeRate,
--                      0 as BillAmount,
--                      TRAD_MATURITY_DATE as MaturityDate,
--                      0 as ReversalInr,
--                      frmDate as FromDate,toDate as ToDate,
--                      pkgreturnreport.GetSystemDate() as SystemDate,
--                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from  trtran002 a,trtran003
--                where trad_trade_reference in (select TRAD_REVERSE_REFERENCE
--                                               from   trtran002)
--                      and TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
--                      and trad_import_export in  (25900053,25900001)
--                      and trad_record_status not in (10200005,10200006)
--                      and brel_record_status not in (10200005,10200006)
--                      --and trad_entry_date between frmDate and toDate
--              union
--
--              select  trad_trade_reference as TradeReference,trad_reverse_reference as ReverseReference,
--                      brel_user_reference as UserReference,
--                      trad_reverse_serial as RevSerial,
--                      '' as PurchaseRef,
--                      0 as  PurchaseAmt,
--                      --(select trad_reverse_reference from trtran002 t where t.trad_trade_reference = l.trad_reverse_reference) as PurchaseRef,
--                      --(select trad_trade_fcy  from trtran002 where trad_trade_reference = (select trad_reverse_reference from trtran002 t where t.trad_trade_reference = l.trad_reverse_reference)) as  PurchaseAmt,
--                      '' as ImportExport,
--                      '' as LocalBank,
--                      brel_entry_date as EntryDate,
--                      '' as TradeCurrency,
--                      0 as TradeFcy,
--                      0 as TradeRate,
--                      trad_trade_fcy as  BillAmt,
--                      sysdate as MaturityDate,
--                      brel_reversal_fcy as ReversalInr,
--                      frmDate as FromDate,toDate as ToDate,
--                      pkgreturnreport.GetSystemDate() as SystemDate,
--                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from  trtran002 l,trtran003
--                where trad_reverse_reference in (
--                            select TRAD_TRADE_REFERENCE
--                            from   trtran002,trtran003
--                            where  trad_trade_reference in (select TRAD_REVERSE_REFERENCE
--                                                            from   trtran002)
--                                   and TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
--                                   and brel_reversal_type not in(25800008))
--                      and TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
--                      --and trad_entry_date between frmDate and toDate
--                      and brel_entry_date between frmDate and toDate
--                      and trad_record_status not in (10200005,10200006)
--                      and brel_record_status not in (10200005,10200006)
--                      and brel_reversal_type in(25800052,25800001)
--                order by 2,3;

            select TRAD_TRADE_REFERENCE as TradeReference,TRAD_TRADE_REFERENCE as ReverseReference,
                      trad_user_reference as UserReference,
                      trad_reverse_serial as RevSerial,
                      (select trad_reverse_reference from trtran002 where trad_trade_reference = a.trad_trade_reference) as PurchaseRef,
                      nvl((select trad_trade_fcy from trtran002 where trad_trade_reference = a.trad_reverse_reference),0) as PurchaseAmt,
                      pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,2) as ImportExport,
                      pkgreturncursor.fncgetdescription(TRAD_Local_Bank,2) as LocalBank,
                      trad_entry_date as EntryDate,
                      pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
                      trad_trade_fcy as TradeFcy,
                      trad_trade_rate as TradeRate,
                      0 as BillAmount,
                      TRAD_MATURITY_DATE as MaturityDate,
                      0 as ReversalInr,
                      TRAD_IMPORT_EXPORT as ImportExportCode,
                       frmDate as FromDate,toDate as ToDate,
                      pkgreturnreport.GetSystemDate() as SystemDate,
                       pkgreturnreport.getCompanyName(varUserID ) as CompanyName
                from  trtran002 a--,trtran003
                where
                    --trad_trade_reference in (select TRAD_REVERSE_REFERENCE
--                                               from   trtran002)
--                      and
--                      TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
                     trad_import_export in(25900017,25900001)
                       and (trad_reverse_reference is null or trad_import_export in (25900001) )
                      and trad_record_status not in (10200005,10200006)
                      --and brel_record_status not in (10200005,10200006)
                      and trad_entry_date between frmDate and toDate
              union ALL
              select  trad_trade_reference as TradeReference,trad_reverse_reference as ReverseReference,
                      brel_user_reference as UserReference,
                      trad_reverse_serial as RevSerial,
                      '' as PurchaseRef,
                      0 as  PurchaseAmt,
                      --(select trad_reverse_reference from trtran002 t where t.trad_trade_reference = l.trad_reverse_reference) as PurchaseRef,
                      --(select trad_trade_fcy  from trtran002 where trad_trade_reference = (select trad_reverse_reference from trtran002 t where t.trad_trade_reference = l.trad_reverse_reference)) as  PurchaseAmt,
                      pkgreturncursor.fncgetdescription(BREL_REVERSAL_TYPE,2) as ImportExport,
                      '' as LocalBank,
                      brel_entry_date as EntryDate,
                      '' as TradeCurrency,
                      0 as TradeFcy,
                      0 as TradeRate,
                      trad_trade_fcy as  BillAmt,
                      sysdate as MaturityDate,
                      brel_reversal_fcy as ReversalInr,
                      TRAD_IMPORT_EXPORT as ImportExportCode,
                      frmDate as FromDate,toDate as ToDate,
                      pkgreturnreport.GetSystemDate() as SystemDate,
                       pkgreturnreport.getCompanyName( varUserID) as CompanyName
                from  trtran002 l,trtran003
                where trad_reverse_reference in (
                            select TRAD_TRADE_REFERENCE
                            from   trtran002,trtran003
                            where  trad_trade_reference in (select TRAD_REVERSE_REFERENCE
                                                            from   trtran002)
                                   and TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
                                   and brel_reversal_type not in(25800008)
                                   and trad_entry_date >= frmDate)
                      and TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
                      and trad_record_status not in (10200005,10200006)
                      and brel_record_status not in (10200005,10200006)
                      and brel_reversal_type in(25800002,25800001)
              UNION ALL
              select  BREL_TRADE_REFERENCE as TradeReference,BREL_TRADE_REFERENCE as ReverseReference,
                      brel_user_reference as UserReference,
                      BREL_REVERSE_SERIAL as RevSerial,
                      '' as PurchaseRef,
                      0 as  PurchaseAmt,
                      --(select trad_reverse_reference from trtran002 t where t.trad_trade_reference = l.trad_reverse_reference) as PurchaseRef,
                      --(select trad_trade_fcy  from trtran002 where trad_trade_reference = (select trad_reverse_reference from trtran002 t where t.trad_trade_reference = l.trad_reverse_reference)) as  PurchaseAmt,
                      decode(BREL_REVERSAL_TYPE,25900053,'Loan Adjust',pkgreturncursor.fncgetdescription(BREL_REVERSAL_TYPE,2)) as ImportExport,
                      '' as LocalBank,
                      brel_entry_date as EntryDate,
                      '' as TradeCurrency,
                      0 as TradeFcy,
                      0 as TradeRate,
                      brel_reversal_fcy as  BillAmt,
                      sysdate as MaturityDate,
                      brel_reversal_fcy as ReversalInr,
                      BREL_REVERSAL_TYPE as ImportExportCode,
                      frmDate as FromDate,toDate as ToDate,
                      pkgreturnreport.GetSystemDate() as SystemDate,
                       pkgreturnreport.getCompanyName(varUserID) as CompanyName
                from  trtran003 l
                where BREL_TRADE_REFERENCE in (select DISTINCT TRAD_trade_REFERENCE
                                                            from   trtran002
                                                            WHERE  trad_record_status not in(10200005,10200006)
                                                            and    trad_entry_date between frmDate and toDate)
                      and brel_record_status not in (10200005,10200006)
                      and BREL_REVERSAL_TYPE in(25900053,25800006,25800009)
                order by 2,9;
      GoTo Process_End;
  end if;

--
--  If (Varreportid='OUTSTANDINGOPTBANKWISE') THEN
--  OPEN GenCursor for
--                select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,
--                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                sum( pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,ToDate)) AS BaseAmount,
--                pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
--                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                frmDate as AsonDate,
--                frmDate as FromDate,
--                toDate  as ToDate
--from trtran071
--where     ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > frmDate) or copt_PROCESS_COMPLETE = 12400002)
--           and (COPT_EXECUTE_DATE <= frmDate)
--           and copt_record_status not in(10200005,10200006)
--       group by COPT_COMPANY_CODE, COPT_COUNTER_PARTY  ;
--
--    Goto Process_End;
-- end if;


 if varReportID= 'OUTSTANDINGOPTIONMONTH' or  varReportID= 'OUTSTANDINGOPTIONSTRICK'  then
   OPEN GenCursor for
      select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,
             COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
              pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
             (select round(avg(cosu_strike_rate),4) from trtran072
               where cosu_deal_number=copt_deal_number
                 and cosu_buy_sell=25300001
                 and cosu_option_type=32400001) "BC",
             (select avg(cosu_strike_rate) from trtran072
               where cosu_deal_number=copt_deal_number
                 and cosu_buy_sell=25300001
                 and cosu_option_type=32400002) "BP",
                 pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,ToDate) AS BaseAmount,
                 pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
             COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
             COPT_MATURITY_DATE as setelmentdate,
             to_char(COPT_MATURITY_DATE,'MON/YYYY') LocalBank,
                  pkgreturnreport.getCompanyName( varUserID) as CompanyName,
                 frmDate as AsonDate,
                 frmDate as FromDate,
                 toDate  as ToDate
        from trtran071
       where
        ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > frmDate) or copt_PROCESS_COMPLETE = 12400002)
        and (COPT_EXECUTE_DATE <= frmDate)
         and copt_record_status not in(10200005,10200006);

    Goto Process_End;
 End If;

  if varReportID = 'CANCELLATIONOFTRADEORDERS' then

    Query_Str :='select TRAD_TRADE_REFERENCE as TradeReference,TRAD_REVERSE_REFERENCE as ReverseReference,
                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) as ImportExport,TRAD_IMPORT_EXPORT as ImportExportCode,
                        TRAD_ENTRY_DATE as EntryDate,TRAD_REFERENCE_DATE as ReferenceDate,TRAD_USER_REFERENCE as UserReference,
                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
                        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,1) as BuyerSeller,
                        TRAD_PRODUCT_DESCRIPTION as ProductDescription,
                        TRAD_TRADE_FCY as TradeFcy,TRAD_TRADE_RATE as TradeRate,TRAD_TRADE_INR as TradeInr,
                        TRAD_MATURITY_FROM as MaturityFrom,TRAD_MATURITY_DATE as MaturityDate,
                        BREL_TRADE_REFERENCE as BrelTradeReference,BREL_USER_REFERENCE as BrelUserReference,BREL_ENTRY_DATE as BrelEntryDate,
                        BREL_REFERENCE_DATE as BrelReferenceDate,BREL_ENTRY_DATE BrelEntryDate,
                        pkgreturncursor.fncgetdescription(BREL_REVERSAL_TYPE,1) as ReversalType,
                        BREL_REVERSAL_FCY as ReversalFcy,BREL_REVERSAL_RATE as ReversalRate,
                        BREL_REVERSAL_INR as ReversalInr,BREL_MATURITY_FROM as BrelMaturityFrom,
                        BREL_MATURITY_DATE as BrelMaturityDate,pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran002,trtran003
                where   BREL_REVERSAL_TYPE in (25800006,25800053)
                        and brel_trade_reference =  trad_trade_reference
                        and brel_record_status not in(10200005,10200006)
                        --and trad_reverse_serial= 0 ';

  delete from temp;commit;insert into temp values(Query_Str,finalCondition);commit;
    open GenCursor for Query_Str || finalCondition;

    GoTo Process_End;
  end if;
---commented by aakash 11-jun-13 12:15 pm
--  if varReportID = 'OSMERCHANTDEALREPORT' then
--
--    Query_Str :='select pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as CompanyCode,TRAD_REFERENCE_DATE as ReferenceDate,
--                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_ENTRY_DATE as EntryDate,TRAD_USER_REFERENCE as UserReference,
--                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) as ImportExport,
--                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LocalBank,
--                        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,1) as BuyerSeller,
--                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
--                        TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_TRADE_FCY as TradeFcy,TRAD_TRADE_RATE AS TradeRate,
--                        TRAD_TRADE_INR as TradeInr,TRAD_MATURITY_FROM as MaturityFrom,TRAD_MATURITY_DATE as MaturityDate,
--                        (TRAD_TRADE_FCY - pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||')) as AmtUtilized,
--                        pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||')as Outstanding,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                 from   trtran002
--                 where  TRAD_RECORD_STATUS not in('||gconst.statusinactive||','||gconst.statusdeleted||','||gconst.STATUSPOSTCANCEL||') and
--                        ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > '||''''||toDate||''''||') or TRAD_PROCESS_COMPLETE = 12400002) ';
----                        and trad_maturity_date > '||''''||frmDate||''''||'
----                        and trad_complete_date is null
----                        or trad_complete_date > '||''''||frmDate||''''||'
--delete from temp;commit;    insert into temp values (Query_Str,'test');commit;
--    --OPEN GenCursor for Query_Str||finalCondition||' order by TRAD_TRADE_CURRENCY,TRAD_IMPORT_EXPORT ';
--    OPEN GenCursor for Query_Str||finalCondition||' order by  TRAD_USER_REFERENCE ';
--    Goto Process_End;
--  end if;
-------updated by Aakash/Ishwar 11-jun-13 12:17 pm
--if varReportID = 'OSMERCHANTDEALREPORT' then
--
--    Query_Str :='select pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as CompanyCode,TRAD_REFERENCE_DATE as ReferenceDate,
--                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_ENTRY_DATE as EntryDate,TRAD_USER_REFERENCE as UserReference,
--                        pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) as ImportExport,
--                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LocalBank,
--                        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) as BuyerSeller,
--                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
--                        TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_TRADE_FCY as TradeFcy,TRAD_TRADE_RATE AS TradeRate,
--                        TRAD_TRADE_INR as TradeInr,TRAD_MATURITY_FROM as MaturityFrom,TRAD_MATURITY_DATE as MaturityDate,
--                        (TRAD_TRADE_FCY - pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||')) as AmtUtilized,
--                        pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||')as Outstanding,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName,
--                        (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in (10200005,10200006,10200012)),0)) as UnhedgeAmount,
--                        nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in (10200005,10200006,10200012)),0) Hedgeamount,
--                        nvl((select round(sum(hedg_other_fcy)/sum(hedg_hedged_fcy),4) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in (10200005,10200006,10200012)),0) Hedgerate
--                 from   trtran002
--                 where  TRAD_RECORD_STATUS not in('||gconst.statusinactive||','||gconst.statusdeleted||','||gconst.STATUSPOSTCANCEL||') and
--                        ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > '||''''||toDate||''''||') or TRAD_PROCESS_COMPLETE = 12400002) ';
----                        and trad_maturity_date > '||''''||frmDate||''''||'
----                        and trad_complete_date is null
----                        or trad_complete_date > '||''''||frmDate||''''||'
--delete from temp;commit;    insert into temp values (Query_Str,'test');commit;
--    --OPEN GenCursor for Query_Str||finalCondition||' order by TRAD_TRADE_CURRENCY,TRAD_IMPORT_EXPORT ';
--    OPEN GenCursor for Query_Str||finalCondition||' order by  TRAD_USER_REFERENCE ';
--    Goto Process_End;
--  end if;


---updated by Abhijeet as on 19/06/204
if varReportID = 'OSMERCHANTDEALREPORT' then

    Query_Str :='select pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as CompanyCode,TRAD_REFERENCE_DATE as ReferenceDate,
                        TRAD_TRADE_REFERENCE as TradeReference,TRAD_ENTRY_DATE as EntryDate,TRAD_USER_REFERENCE as UserReference,
                      --  pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) as ImportExport,
                         pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,1) as ImportExport,
                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LocalBank,
                        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) as BuyerSeller,
                        pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as TradeCurrency,
                        TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_TRADE_FCY as TradeFcy,TRAD_TRADE_RATE AS TradeRate,
                        TRAD_TRADE_INR as TradeInr,TRAD_MATURITY_FROM as MaturityFrom,TRAD_MATURITY_DATE as MaturityDate,
                        (TRAD_TRADE_FCY - pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||')) as AmtUtilized,
                        pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||')as Outstanding,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName,
                        (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'||''''||toDate||''''||') - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in (10200005,10200006,10200012)),0)) as UnhedgeAmount,
                        nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in (10200005,10200006,10200012)),0) Hedgeamount,
                        nvl((select round(sum(hedg_other_fcy)/sum(hedg_hedged_fcy),4) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in (10200005,10200006,10200012)),0) Hedgerate
                 from   trtran002
                 where  TRAD_RECORD_STATUS not in('||gconst.statusinactive||','||gconst.statusdeleted||','||gconst.STATUSPOSTCANCEL||') and
                        ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > '||''''||toDate||''''||') or TRAD_PROCESS_COMPLETE = 12400002) ';
--                        and trad_maturity_date > '||''''||frmDate||''''||'
--                        and trad_complete_date is null
--                        or trad_complete_date > '||''''||frmDate||''''||'
delete from temp;commit;    insert into temp values (Query_Str,'test');commit;
    --OPEN GenCursor for Query_Str||finalCondition||' order by TRAD_TRADE_CURRENCY,TRAD_IMPORT_EXPORT ';
    OPEN GenCursor for Query_Str||finalCondition||' order by  TRAD_USER_REFERENCE ';
    Goto Process_End;
  end if;


--ABHIJIT ADDES ON 01/05/08

  if varReportID = 'FOREIGNEXCHANGECONTRACTNOTE' then

    Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DealNumber,DEAL_EXECUTE_DATE AS ExecuteDate,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,1)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,
                        DEAL_BASE_AMOUNT AS BASEAMT,DEAL_OTHER_AMOUNT AS OTHERAMT,
                        pkgreturnreport.fncconvrs(DEAL_AMOUNT_LOCAL) AS AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM,
                        DEAL_MATURITY_DATE AS MATURITYDATE,
                        initcap(LBNK_LONG_DESCRIPTION) as LBNKLONGDESC,
                        initcap(LBNK_ADDRESS_1) AS LBNKADD1,initcap(LBNK_ADDRESS_2) AS LBNKADD2,
                        initcap(LBNK_ADDRESS_3) AS LBNKADD3,initcap(LBNK_ADDRESS_4) AS LBNKADD4,
                        LBNK_CONTACT_PERSON AS LBNKCONTPERSON,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001,trmaster306
                where   DEAL_COUNTER_PARTY = LBNK_PICK_CODE ';
    OPEN GenCursor for Query_Str || finalcondition;
    GoTo Process_End;
  end if;

  if varReportID = 'FXCONTRACTSETTLEMENTADVICE' then

    Query_Str :='select DEAL_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DealNumber,DEAL_EXECUTE_DATE AS ExecuteDate,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,1)AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_LOCAL_RATE AS LCRATE,
                        DEAL_BASE_AMOUNT AS BASEAMT,DEAL_OTHER_AMOUNT AS OTHERAMT,
                        pkgreturnreport.fncconvrs(DEAL_AMOUNT_LOCAL) AS AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM,
                        DEAL_MATURITY_DATE AS MATURITYDATE,
                        initcap(LBNK_LONG_DESCRIPTION) as LBNKLONGDESC,
                        initcap(LBNK_ADDRESS_1) AS LBNKADD1,initcap(LBNK_ADDRESS_2) AS LBNKADD2,
                        initcap(LBNK_ADDRESS_3) AS LBNKADD3,initcap(LBNK_ADDRESS_4) AS LBNKADD4,
                        LBNK_CONTACT_PERSON AS LBNKCONTPERSON ,CDEL_CANCEL_RATE,
                        CDEL_CANCEL_RATE AS CANCELRATE,CDEL_CANCEL_DATE AS CANCELDATE,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001,trmaster306,trtran006
                where   CDEL_DEAL_NUMBER != DEAL_DEAL_NUMBER and
                        cdel_deal_serial != deal_serial_number and
                        DEAL_COUNTER_PARTY = LBNK_PICK_CODE ';
    OPEN GenCursor for Query_Str || finalcondition;
    GoTo Process_End;
  end if;
  ---ABHIJIT ENDS

---harinath on 04-jan-2014

--if varReportID ='PRESENTHEDGESTATUS' THEN
--
--OPEN GenCursor for
--
--          select Displayorder,pkgreturncursor.fncgetdescription(CompanyCode,2) as CompanyCode,
--                    pkgreturncursor.fncgetdescription(CurrencyCode,2) as CurrencyCode,
--                    pkgreturncursor.fncgetdescription(ProductCode,2) as ProductCode,
--                    pkgreturncursor.fncgetdescription(SubProduct,2) as SubProduct,
--                    round( (AmountFCY)/1000,2)   as AmountFCY,
--       ExposureType,
--       sysdate as AsOnDate
--
--from
--(
--      select 1 as Displayorder, posn_company_code AS CompanyCode,
--             posn_currency_code  AS  CurrencyCode,
--             posn_product_code   AS  ProductCode,
--             Posn_Subproduct_Code AS  SubProduct,
--            sum(posn_transaction_amount) AS AmountFCY,
--      (case
--       when posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
--       when posn_account_code in
--      (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                then 'Hedged'
--       when posn_account_code in
--      (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
--       when posn_account_code in
--      (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                then 'Hedged'
--       end)        AS     ExposureType
--
--      from trsystem997
--      where posn_transaction_amount!=0 and posn_fcy_rate !=0
--      group by  posn_company_code,posn_currency_code,posn_product_code,Posn_Subproduct_Code,
--      (case
--           when posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
--           when  posn_account_code in
--      (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                then 'Hedged'
--           when  posn_account_code in
--      (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
--           when  posn_account_code in
--      (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                then 'Hedged'
--       end)
--
--UNION ALL
--
--       select 2 as displayorder,nvl(Hedge.CompanyCode,Exposure.CompanyCode) as CompanyCode,
--                               nvl(Hedge.CurrencyCode,Exposure.CurrencyCode)as CurrencyCode,
--                               nvl(Hedge.ProductCode, Exposure.ProductCode)as Product,
--                               nvl(Hedge.SubProduct, Exposure.SubProduct)as SubProduct,
--         (
--         case
--         when  (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0)  THEN 0
--         ELSE (round( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1),2))
--         end )*100  as AmountFcy, '% Hedge - Actual' as ExposureType
--
--       from  (
--         select posn_company_code  as CompanyCode,
--                      posn_currency_code as CurrencyCode,
--                      Posn_Product_code  as ProductCode,
--                      posn_subproduct_code as  SubProduct,
--                      posn_account_code   as AccountCode,
--                  sum(posn_transaction_amount)as AmountFCY,
--                  sum((posn_transaction_amount*posn_fcy_rate)) as AmountLocal,
--              nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) as AmountMTMLocal,
--         (case
--         when  posn_account_code in
--         (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                               then 'Hedge Buy'
--         when posn_account_code in
--         (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                               then 'Hedge Sell'
--          end)  as ExposureType
--         from trsystem997
--         where posn_transaction_amount!=0 and posn_fcy_rate !=0
--         and   posn_account_code in
--              (25900018,25900019,25900020,25900021,25900022,25900023,
--               25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--               25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--         group by posn_company_code,posn_currency_code,posn_product_code,
--                                 posn_subproduct_code,posn_account_code)   Hedge
--
--                     FULL OUTER JOIN
--
--               (
--               select posn_company_code as CompanyCode,
--                      posn_currency_code as CurrencyCode,
--                      posn_product_code  as ProductCode,
--                      Posn_Subproduct_Code as SubProduct,
--                      posn_account_code as  AccountCode,
--                sum(posn_transaction_amount) as AmountFCY,
--                sum((posn_transaction_amount*posn_fcy_rate)) as AmountLocal,
--                nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0)as AmountMTMLocal,
--                (
--                case
--                when posn_account_code in
--                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024)
--                                                                             then 'Export'
--                when posn_account_code in
--                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--                                                                             then 'Import'
--                end) as ExposureType
--                from trsystem997
--                where posn_transaction_amount!=0 and posn_fcy_rate !=0
--                and  posn_account_code in
--                    (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--                     25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--
--            group by posn_company_code,posn_currency_code,Posn_Product_Code,
--               Posn_Subproduct_Code,posn_account_code)    Exposure
--            on hedge.CompanyCode= Exposure.CompanyCode
--            and hedge.CurrencyCode= Exposure.CurrencyCode
--            and hedge.ProductCode= Exposure.ProductCode
--            and Hedge.subproduct= Exposure.subproduct
--UNION ALL
--
--       select 3 as Displayorder,posn_company_code as CompanyCode,
--              posn_currency_code as CurrencyCode,
--              Posn_Product_Code  as  ProductCode,
--              posn_subproduct_code as  SubProduct,
--            --risk_limit_percent || '% - %' ||risk_fluct_ceo
--            ( select risk_fluct_ceo
--              from   trsystem012
--              where  risk_risk_type=21000017 and risk_product_code=Posn_Product_Code
--              and    risk_subproduct_code=posn_subproduct_code)  as AmountFcy,
--             '% Hedge - Policy' as  ExposureType
--       from trsystem997
--       where posn_transaction_amount!=0 and posn_fcy_rate !=0
--       and posn_account_code in
--                    (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--                     25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--       group by posn_company_code,posn_currency_code,Posn_Product_Code,
--                  Posn_Subproduct_Code,posn_account_code
--
--UNION ALL
--
--       select 4 as displayorder,posn_company_code as CompanyCode,
--                   posn_currency_code as CurrencyCode,
--                   Posn_Product_Code as ProductCode,
--                   posn_subproduct_code as SubProduct,
--             round(sum((posn_transaction_amount*posn_fcy_rate))/
--                   sum(posn_transaction_amount),4)     as  AmountFcy,
--                   'Hedge Rate'  as ExposureType
--
--       from trsystem997
--       where posn_transaction_amount!=0 and posn_fcy_rate !=0
--       and  posn_account_code in
--                    (25900018,25900019,25900020,25900021,25900022,25900023,
--                     25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--                     25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--       group by posn_company_code,posn_currency_code,posn_product_code,
--                posn_subproduct_code,posn_account_code
--
--UNION ALL
--
--       select 5 as displayorder, posn_company_code as CompanyCode,
--                                 posn_currency_code as CurrencyCode,
--                                 Posn_Product_Code as ProductCode,
--                                 posn_subproduct_code as  SubProduct,
--              pkgforexprocess.fncGetRate
--                 (posn_currency_code,30400003, '06-dec-2013',25300001,0,null,0) as AmountFcy,
--                               'Spot Rate'  as ExposureType
--       from  trsystem997
--       where posn_transaction_amount!=0 and posn_fcy_rate !=0
--       and  posn_account_code in
--             (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--              25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--       group by posn_company_code,posn_currency_code,posn_product_code,
--                posn_subproduct_code,posn_account_code
--order by Displayorder
--);
--
--
--
--   GoTo Process_End;
--  end if;

-----modified on Abhijeet on 13-Jun-14

-- if varReportID ='FORWARDRATES' THEN
--
--    OPEN GenCursor for
--      SELECT
--         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
--         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
--         ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,NULL,0),2) AS SpotRate,
--         'SpotRate' RateType
-- FROM     (  SELECT 0 Months FROM DUAL
--          UNION ALL
--          SELECT 1 Months FROM DUAL
--          UNION ALL
--          SELECT 2 Months FROM DUAL
--          UNION ALL
--          SELECT 3 Months FROM DUAL
--          UNION ALL
--          SELECT 4 Months FROM DUAL
--          UNION ALL
--          SELECT 5 Months FROM DUAL
--          UNION ALL
--          SELECT 6 Months FROM DUAL
--          UNION ALL
--          SELECT 7 Months FROM DUAL
--          UNION ALL
--          SELECT 8 Months FROM DUAL
--          UNION ALL
--          SELECT 9 Months FROM DUAL
--          UNION ALL
--          SELECT 10 Months FROM DUAL
--          UNION ALL
--          SELECT 11 Months FROM DUAL
--         )
--union all
-- SELECT
--         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
--         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
--         ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,last_day(ADD_MONTHS(frmdate,Months)),0),2)  AS SpotRate,
--         'Forward Rates' RateType
--  FROM   (  SELECT 0 Months FROM DUAL
--          UNION ALL
--          SELECT 1 Months FROM DUAL
--          UNION ALL
--          SELECT 2 Months FROM DUAL
--          UNION ALL
--          SELECT 3 Months FROM DUAL
--          UNION ALL
--          SELECT 4 Months FROM DUAL
--          UNION ALL
--          SELECT 5 Months FROM DUAL
--          UNION ALL
--          SELECT 6 Months FROM DUAL
--          UNION ALL
--          SELECT 7 Months FROM DUAL
--          UNION ALL
--          SELECT 8 Months FROM DUAL
--          UNION ALL
--          SELECT 9 Months FROM DUAL
--          UNION ALL
--          SELECT 10 Months FROM DUAL
--          UNION ALL
--          SELECT 11 Months FROM DUAL
--       )
--UNION ALL
--
--   SELECT
--          to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
--          to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
--   (ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,last_day(ADD_MONTHS(frmdate,Months)),0),2) -
--    ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,NULL,0),2)) AS SpotRate,
--         'Premium' RateType
--                  FROM     (  SELECT 0 Months FROM DUAL
--          UNION ALL
--          SELECT 1 Months FROM DUAL
--          UNION ALL
--          SELECT 2 Months FROM DUAL
--          UNION ALL
--          SELECT 3 Months FROM DUAL
--          UNION ALL
--          SELECT 4 Months FROM DUAL
--          UNION ALL
--          SELECT 5 Months FROM DUAL
--          UNION ALL
--          SELECT 6 Months FROM DUAL
--          UNION ALL
--          SELECT 7 Months FROM DUAL
--          UNION ALL
--          SELECT 8 Months FROM DUAL
--          UNION ALL
--          SELECT 9 Months FROM DUAL
--          UNION ALL
--          SELECT 10 Months FROM DUAL
--          UNION ALL
--          SELECT 11 Months FROM DUAL
--        )
--
--      ORDER BY monthorder;
--       GoTo Process_End;
--      end if;

 ---- Abhijeet End here -----

---- modified by abhijeet on 18 -jun-2014

if varReportID ='FORWARDRATES' THEN
                  
    OPEN GenCursor for 
      SELECT 
         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
         ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,NULL,0),2) AS SpotRate, 
         'SpotRate' RateType 
 FROM     (  SELECT 0 Months FROM DUAL
          UNION ALL
          SELECT 1 Months FROM DUAL
          UNION ALL
          SELECT 2 Months FROM DUAL
          UNION ALL
          SELECT 3 Months FROM DUAL
          UNION ALL
          SELECT 4 Months FROM DUAL
          UNION ALL
          SELECT 5 Months FROM DUAL
          UNION ALL
          SELECT 6 Months FROM DUAL
          UNION ALL
          SELECT 7 Months FROM DUAL
          UNION ALL
          SELECT 8 Months FROM DUAL
          UNION ALL
          SELECT 9 Months FROM DUAL
          UNION ALL
          SELECT 10 Months FROM DUAL
          UNION ALL
          SELECT 11 Months FROM DUAL
         )
union all
 SELECT 
         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
         ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,last_day(ADD_MONTHS(frmdate,Months)),0),2)  AS SpotRate,
         'Forward Rates' RateType 
  FROM   (  SELECT 0 Months FROM DUAL
          UNION ALL
          SELECT 1 Months FROM DUAL
          UNION ALL
          SELECT 2 Months FROM DUAL
          UNION ALL
          SELECT 3 Months FROM DUAL
          UNION ALL
          SELECT 4 Months FROM DUAL
          UNION ALL
          SELECT 5 Months FROM DUAL
          UNION ALL
          SELECT 6 Months FROM DUAL
          UNION ALL
          SELECT 7 Months FROM DUAL
          UNION ALL
          SELECT 8 Months FROM DUAL
          UNION ALL
          SELECT 9 Months FROM DUAL
          UNION ALL
          SELECT 10 Months FROM DUAL
          UNION ALL
          SELECT 11 Months FROM DUAL
       ) 
UNION ALL 
                
   SELECT 
          to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
          to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
   (ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,last_day(ADD_MONTHS(frmdate,Months)),0),2) -
    ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,NULL,0),2)) AS SpotRate,
         'Premium' RateType 
                  FROM     (  SELECT 0 Months FROM DUAL
          UNION ALL
          SELECT 1 Months FROM DUAL
          UNION ALL
          SELECT 2 Months FROM DUAL
          UNION ALL
          SELECT 3 Months FROM DUAL
          UNION ALL
          SELECT 4 Months FROM DUAL
          UNION ALL
          SELECT 5 Months FROM DUAL
          UNION ALL
          SELECT 6 Months FROM DUAL
          UNION ALL
          SELECT 7 Months FROM DUAL
          UNION ALL
          SELECT 8 Months FROM DUAL
          UNION ALL
          SELECT 9 Months FROM DUAL
          UNION ALL
          SELECT 10 Months FROM DUAL
          UNION ALL
          SELECT 11 Months FROM DUAL
        )
          
      ORDER BY monthorder;
       GoTo Process_End;
      end if;


--- end here -----



if varReportID = 'DAILYPROFITEVALUATIONRPT' then
    OPEN GenCursor for
--                select  pkgreturncursor.fncgetdescription(DPOS_CURRENCY_CODE,2) as CurrencyCode,
--                        DPOS_DAY_POSITION as DayPosition,DPOS_HOLDING_RATE as HoldingRate,
--                        (DPOS_DAY_POSITION * DPOS_HOLDING_RATE ) as  HoldingInrValue,
--                        DRAT_SPOT_ASK  as MtmRate,dpos_position_date as PositionDate,
--                        (DPOS_DAY_POSITION * DRAT_SPOT_ASK)  as M2mInrValue,
--                        (Round((DPOS_DAY_POSITION * DPOS_HOLDING_RATE ),2) - round((DPOS_DAY_POSITION * DRAT_SPOT_ASK),2)) as ProfitLoss,
--                        decode(DPOS_POSITION_CODE,12400001,'Over Bought',12400002,'Over Sold') as Status,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trsystem032 a, trtran012
--                where   DPOS_CURRENCY_CODE = drat_currency_code
--                        and  drat_for_currency = GConst.INDIANRUPEE
--                        and dpos_position_date = (select max(HDAY_CALENDAR_DATE) from trsystem001 where HDAY_DAY_STATUS = GConst.DAYCLOSED and HDAY_CALENDAR_DATE < frmDate)
--                        and DRAT_EFFECTIVE_DATE = frmDate
--                        and dpos_position_type = GConst.TRADEDEAL
--                        and dpos_Day_position  not in(0)
--                        and dpos_user_id  ='0'
--                        and drat_serial_number = 2;
                select  pkgreturncursor.fncgetdescription(DPOS_CURRENCY_CODE,2) as CurrencyCode,
                        DPOS_DAY_POSITION as DayPosition,DPOS_HOLDING_RATE as HoldingRate,
                        (DPOS_DAY_POSITION * DPOS_HOLDING_RATE ) as  HoldingInrValue,
                        (pkgforexprocess.fncGetRate(dpos_currency_code,30400003,frmDate,(decode(dpos_position_code,12400002,25300002,12400001,25300001)),0,null,0)) as MtmRate,
                        dpos_position_date as PositionDate,
                        (DPOS_DAY_POSITION * (pkgforexprocess.fncGetRate(dpos_currency_code,30400003,frmDate,(decode(dpos_position_code,12400002,25300002,12400001,25300001)),0,null,0)))  as M2mInrValue,
                        --(Round((DPOS_DAY_POSITION * DPOS_HOLDING_RATE ),2) - round((DPOS_DAY_POSITION * DRAT_SPOT_ASK),2)) as ProfitLoss,
                        nvl(DPOS_POSITION_CODE,0) as ProfitLoss,
                        decode(DPOS_POSITION_CODE,12400001,'Over Bought',12400002,'Over Sold') as Status,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from    trsystem032 a
                where   dpos_position_date = frmDate
                        --(select max(HDAY_CALENDAR_DATE) from trsystem001 where HDAY_DAY_STATUS = 26400005 and HDAY_CALENDAR_DATE < frmDate)
                        and dpos_position_type = GConst.TRADEDEAL
                        and dpos_Day_position  not in(0)
                        and nvl(DPOS_USER_ID,'0')='0' ;

    GoTo Process_End;
    end if;

  if varReportID = 'DEALERWISERISKPOSITION' then

    numError :=pkgforexprocess.fncRiskGenerate(frmDate, GConst.TRADEDEAL);commit;
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(CRSK_RISK_TYPE,1) as RiskType,(select user_user_name from usermaster where user_user_id=crsk_user_id) as UserId,
                        pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,2) as CurrencyCode,
                        CRSK_ASON_DATE as AonDate,CRSK_POSITION_FCY as PositionFcy,CRSK_POSITION_USD as PositionUsd,
                        pkgreturnreport.fncConvRs(CRSK_POSITION_INR) as PostionInr,
                        nvl(CRSK_ALLOWED_USD,0) as AllowedUsd,
                        pkgreturnreport.fncConvRs(nvl(CRSK_ALLOWED_INR,0))as AllowedInr,
                        (case when  CRSK_POSITION_FCY < 0 then 'O/B' else 'O/S' end) as PositionType,
                        nvl((crsk_allowed_usd-abs(crsk_position_USD)),0) as BalanceAmount,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from    trsystem996
                where   CRSK_ASON_DATE = frmDate
                        and CRSK_RISK_TYPE  > 1 --IN(21000001,21000002,21000003)
                        and nvl(crsk_user_id,'0')!='0'
                        --and crsk_user_id like varUserID
                order by CRSK_USER_ID,CRSK_RISK_TYPE , pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,1);
    GoTo Process_End;
  end if;

  if varReportID = 'CURRENCYWISERISKPOSITION' then
    numError :=pkgforexprocess.fncRiskGenerate(frmDate, GConst.TRADEDEAL);
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(CRSK_RISK_TYPE,1) as RiskType,CRSK_RISK_TYPE,
                        pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,2) as CurrencyCode,
                        pkgreturncursor.fncGetDescription(CRSK_COUNTER_PARTY,1) as CouterParty,
                        pkgreturncursor.fncGetDescription(CRSK_BUY_SELL,2) as BuySell,
                        CRSK_ASON_DATE as AonDate,CRSK_USER_ID as UserId,CRSK_MATURITY_MONTH as MaturityMonth,
                        CRSK_POSITION_FCY as PositionFcy,CRSK_POSITION_USD as PositionUsd,
                        CRSK_POSITION_INR as PostionInr,CRSK_ALLOWED_USD as AllowedUsd,
                        CRSK_ALLOWED_INR as AllowedInr,pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from    trsystem996
                where   CRSK_ASON_DATE = frmDate  and CRSK_RISK_TYPE in(21000001,21000002,21000003)
                        and nvl(crsk_user_id,'0')='0'
                order by CRSK_RISK_TYPE desc, pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,1);
       GoTo Process_End;
  end if;

  if varReportID = 'REVALUATIONOFTRADEDEALPOSITION' then
    numError :=pkgforexprocess.fncRiskGenerate(frmDate, GConst.TRADEDEAL);
    OPEN GenCursor for
                select  pkgreturncursor.fncGetDescription(dpos_currency_code,2) as CurrencyCode,
                        dpos_position_date  as AsonDate,dpos_day_position as PositionFcy,
                        dpos_position_inr as PositionInr,
                        (pkgforexprocess.fncGetRate(dpos_currency_code,30400003,dpos_position_date,(decode(dpos_position_code,12400002,25300002,12400001,25300001)),0,null,0))as M2mRate,
                        --DRAT_SPOT_ASK as M2mRate,
                        (dpos_day_position * (pkgforexprocess.fncGetRate(dpos_currency_code,30400003,dpos_position_date,(decode(dpos_position_code,12400001,25300001,12400002,25300002)),0,'',0))) as MtmInr,
                        decode(dpos_position_code,12400001,'O/B',12400002,'O/S','') as Status,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from    trsystem032 a
                where   DPOS_POSITION_DATE = frmDate
                        and nvl(DPOS_USER_ID,'0')='0'
                        and dpos_position_type= GConst.TRADEDEAL
                order by DPOS_CURRENCY_CODE;
    GoTo Process_End;
  end if;
  if varReportID = 'REVALUATIONOFHDGDEALPOSITION' then

    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
    OPEN GenCursor for
                SELECT  pkgreturncursor.fncGetDescription(posn_company_code,2) as  CompanyCode,
                        pkgreturncursor.fncGetDescription(posn_currency_code,2) as CurrencyCode,
                        sum(CASE  when posn_account_code <= 25900050  THEN posn_transaction_amount else 0 END) AS Assets,
                        sum(CASE  when posn_account_code > 25900050  THEN posn_transaction_amount else 0 END) AS Liabilities,
                        sum(CASE  when posn_account_code <= 25900050  THEN posn_inr_value else 0  END) AS AssetsInr,
                        sum(CASE  when posn_account_code > 25900050  THEN posn_inr_value else 0 END) AS LibilitiesInr,
                        --max(posn_m2m_inrrate) AS M2mInrrate,
                        max((pkgforexprocess.fncGetRate(posn_currency_code,30400003,posn_reference_date,(case when posn_account_code < 25900050 then 25300001 else 25300002 end),0,POSN_DUE_DATE,0)))as M2mInrrate,
                        max(POSN_FCY_RATE) as PosnRate,max(posn_reference_date) as ReferenceDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(varUserID) as CompanyName
                FROM    trsystem997
                where   posn_reference_date = frmDate
                        and  posn_reference_number not like 'T%'
                group by posn_company_code,posn_currency_code;

      GoTo Process_End;
  end if;
--  ----added  aakash/ishwar 13/06/13
-- If Varreportid = 'BANKWISEDDETAILS'  Then
--      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--      --Open Gencursor For
--      Query_str := 'select case when posn_account_code  in(25900052) then '||'''BILLS COLLECTION'''||'
--           when posn_account_code  in(25900077,25900053) then '||'''NEW CONTRACT'''||'
--           when posn_account_code in (25900011,25900012) and POSN_REFERENCE_NUMBER in (select hedg_deal_number from trtran004 where hedg_record_status not in (10200012,10200005,10200006) AND HEDG_TRADE_REFERENCE IN (SELECT POSN_REFERENCE_NUMBER
--           FROM TRSYSTEM997 WHERE POSN_ACCOUNT_CODE IN (25900077,25900053))) then '||'''NEW CONTRACT'''||'
--            when posn_account_code in (25900011,25900012) and POSN_REFERENCE_NUMBER in (select hedg_deal_number from trtran004 where hedg_record_status not in (10200012,10200005,10200006) AND HEDG_TRADE_REFERENCE IN (SELECT POSN_REFERENCE_NUMBER
--           FROM TRSYSTEM997 WHERE POSN_ACCOUNT_CODE IN (25900052))) then '||'''BILLS COLLECTION'''||'
--           when posn_account_code in(25900018,25900019,25900078,25900079) then '||'''FUTURE/OPTION'''||'
--           end As EXPTYPE,
--           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2)
--           As CounterParty,
--           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
--           nvl(case when posn_account_code  in(25900052,25900053,25900077) then nvl(Posn_transaction_amount,0) end,0)/1000000 As AmountFcyLC,
--           nvl(case when posn_account_code  in(25900012,25900011) then nvl(Posn_transaction_amount,0) end,0)/1000000 As AmountFcyFwd,
--           ((nvl(case when posn_account_code  in(25900018,25900019) then nvl(Posn_transaction_amount,0) end,0))-(nvl(case when posn_account_code  in(25900078,25900079) then nvl(Posn_transaction_amount,0) end,0)))/1000000 As AmountFcyOPT,
--           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
--           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)AS CurrencyCode,
--           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--           ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate
--           from trsystem997 where posn_account_code in(25900052,25900053,25900012,25900011,25900077,25900018,25900019,25900078,25900079)';
--
--           delete from temp;commit;
--           insert into temp values (Query_str,finalCondition);
--           Open Gencursor for Query_str||finalCondition;
--    Goto Process_End;
--  End if;
--  UPDATED FROM CYGNET
  If Varreportid = 'BANKWISEDDETAILS'  Then
      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
      --Open Gencursor For
      Query_str := 'select case when posn_account_code  in(25900052) then '||'''BILLS COLLECTION'''||'
           when posn_account_code  in(25900077,25900053) then '||'''NEW CONTRACT'''||'
           when posn_account_code in (25900011,25900012) and POSN_REFERENCE_NUMBER in (select hedg_deal_number from trtran004 where hedg_record_status not in (10200012,10200005,10200006) AND HEDG_TRADE_REFERENCE IN (SELECT POSN_REFERENCE_NUMBER
           FROM TRSYSTEM997 WHERE POSN_ACCOUNT_CODE IN (25900077,25900053))) then '||'''NEW CONTRACT'''||'
            when posn_account_code in (25900011,25900012) and POSN_REFERENCE_NUMBER in (select hedg_deal_number from trtran004 where hedg_record_status not in (10200012,10200005,10200006) AND HEDG_TRADE_REFERENCE IN (SELECT POSN_REFERENCE_NUMBER
           FROM TRSYSTEM997 WHERE POSN_ACCOUNT_CODE IN (25900052))) then '||'''BILLS COLLECTION'''||'
           when posn_account_code in(25900018,25900019,25900078,25900079) then '||'''FUTURE/OPTION'''||'
           end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2)
           As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           nvl(case when posn_account_code  in(25900052,25900053,25900077) then nvl(Posn_transaction_amount,0) end,0)/1000000 As AmountFcyLC,
           nvl(case when posn_account_code  in(25900012,25900011,25900061) then nvl(Posn_transaction_amount,0) end,0)/1000000 As AmountFcyFwd,
           ((nvl(case when posn_account_code  in(25900018,25900019) then nvl(Posn_transaction_amount,0) end,0))-(nvl(case when posn_account_code  in(25900078,25900079) then nvl(Posn_transaction_amount,0) end,0)))/1000000 As AmountFcyOPT,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)AS CurrencyCode,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
           ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate
           from trsystem997 where posn_account_code in(25900052,25900053,25900012,25900011,25900077,25900018,25900019,25900078,25900079,25900061)';

           delete from temp;commit;
           insert into temp values (Query_str,finalCondition);
           Open Gencursor for Query_str||finalCondition;
    Goto Process_End;
  End if;

 If (Varreportid='DAILYENTRY') Then
  delete from trsystem981;commit;
  insert into trsystem981 values (frmDate,toDate);

      Query_str := 'Select
        CompanyCode,DealNumber, cmpshortdesc,CounterParty, Currency, BaseAmount,
        Buysell, ExchangeRate, ValueDate, WashRate, Status, Remarks, pkgreturnreport.getCompanyName('''||varUserID||''') as CompanyName,
        SystemDate, Backupdeal, TradeReffrence,ProfitLoss,'''||frmDate||'''  as FromDate,'''||toDate||'''  ToDate,ExecuteDate
      from VEWDAILYENTRY where ExecuteDate <= '''||toDate||'''';
      delete from temp;commit;
      insert into temp values (Query_str,finalCondition);
  Open Gencursor For Query_str||finalCondition;
  Goto Process_End;
End if;
  if varReportID = 'BANKWISECONTRACTFORTHEDAY' then

    Query_Str1 := 'Entered';
    mFieldCondition := 'Outstanding';
    Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,2) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS CPARTY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,1) as BankLongDesc,
                        CDEL_CANCEL_RATE AS EXRATE,
                        CDEL_CANCEL_AMOUNT AS BASEAMT,
                        (case when DEAL_OTHER_CURRENCY != 30400003 then CDEL_OTHER_AMOUNT else 0 end) AS OTHERAMT,
                        decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        nvl(pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2),'||''''||Query_Str1||''''||') as Status,
                        CDEL_CANCEL_TYPE,
                        deal_complete_date as CompleteDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001,trtran006,trtran009
                where   deal_deal_number = cdel_Deal_number (+)
                        and deal_serial_number = cdel_reverse_serial (+)
                        and deal_deal_number = lmod_reference_number (+)
                        and deal_serial_number = lmod_reference_serial (+)
                        and cdel_record_status not in('||gconst.statusinactive||','||gconst.statusdeleted||')
                        and DEAL_record_status not in('||gconst.statusinactive||','||gconst.statusdeleted||') '||finalCondition||'
                union
                select  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DEALNO,DEAL_EXECUTE_DATE AS EXDATE,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,2) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2)AS CPARTY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,1) as BankLongDesc,
                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_BASE_AMOUNT AS BASEAMT,
                        (case when DEAL_OTHER_CURRENCY != 30400003 then DEAL_OTHER_AMOUNT else 0 end) AS OTHERAMT,
                        decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) AS AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        '||''''||mFieldCondition||''''||' as Status,
                        deal_record_status,
                        deal_complete_date as CompleteDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    TRTRAN001
                where   DEAL_record_status not in('||gconst.statusinactive||','||gconst.statusdeleted||')
                        /*and ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||' ) or deal_process_complete = 12400002)*/ and deal_execute_date = '||''''||frmDate||''''||'  ';
--                        deal_maturity_date > '||''''||frmDate||''''||' and
--                        deal_execute_date < '||''''||frmDate||''''||' and
--                        (deal_complete_date is null or
--                        deal_complete_date > '||''''||frmDate||''''||') ';
    OPEN GenCursor for Query_Str||finalCondition||' order by  18 desc,2  ';
    --insert into temp values(Query_Str,finalCondition);commit;
    GoTo Process_End;
  end if;


-- if varReportID = 'REALIZEDPROFITLOSS' then
--    Query_Str :='select CDEL_DEAL_NUMBER as DEALNO,DEAL_EXECUTE_DATE AS EXDATE,
--                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
--                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) AS BKNAME,
--                        DEAL_EXCHANGE_RATE AS EXRATE,DEAL_BASE_AMOUNT AS BASEAMT,DEAL_LOCAL_RATE as LCRATE,
--                        decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) as AMTLCL,
--                        DEAL_OTHER_AMOUNT  AS OTHERAMT,CDEL_CANCEL_INR as CancelInr,
--                        CDEL_CANCEL_RATE  as CancelRate,
--                        (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
--                        --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, deal_execute_date, deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0))) as WashRate,
--                        CDEL_LOCAL_RATE  as CancelLocalRate,
--                        CDEL_OTHER_AMOUNT as CancelOtherAmt,CDEL_CANCEL_AMOUNT as CancelAmount,
--                        CDEL_DEALER_REMARK as DealerRemarks,CDEL_CANCEL_DATE as CancelDate,
--                        DEAL_MATURITY_FROM as MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
--                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
--                        (case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
--                        (abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
--                        CDEL_PROFIT_LOSS as NewProfitLoss,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                        pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as CancelType,
--                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
--                        to_date('||''''||frmDate||''''||') as FromDate,to_Date('||''''||todate||''''||') as ToDate
--                from    trtran001,trtran006
--                where   cdel_deal_number  = deal_deal_number
--                        and cdel_deal_serial  = deal_serial_number
--                        and CDEL_CANCEL_TYPE= 27000001
--                        and deal_RECORD_STATUS not in(10200005,10200006)
--                        and CDEL_RECORD_STATUS not in(10200005,10200006)
--                        and cdel_deal_number not in(select LMOD_REFERENCE_NUMBER from trtran009 where LMOD_RECORD_STATUS in(10200001,10200002,10200003,10200004) )  ';
--    open GenCursor for Query_Str||finalCondition||' order by DEAL_EXECUTE_DATE,cdel_deal_number,cdel_deal_serial';
----    insert into temp values(Query_Str,finalCondition);commit;
--    GoTo Process_End;
--  end if;

     if varReportID = 'REALIZEDPROFITLOSS' OR  varReportID = 'BANKWISEREALIZEDPROFITLOSS' OR varReportID = 'HEDGREALIZEDPROFITLOSS' then

    Query_Str :='select CDEL_DEAL_NUMBER as DEALNO,DEAL_EXECUTE_DATE AS EXDATE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) AS BKNAME,
                        DEAL_EXCHANGE_RATE AS EXRATE,
                        --DEAL_BASE_AMOUNT AS BASEAMT,
                        pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) as BASEAMT,
                        DEAL_LOCAL_RATE as LCRATE,
                        decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) as AMTLCL,
                        --DEAL_OTHER_AMOUNT  AS OTHERAMT,
                        (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) * deal_exchange_rate)  as OTHERAMT,
                        CDEL_CANCEL_INR as CancelInr,
                        CDEL_CANCEL_RATE  as CancelRate,
                        (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
                        --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0))) as WashRate,
                        CDEL_LOCAL_RATE  as CancelLocalRate,
                        CDEL_OTHER_AMOUNT as CancelOtherAmt,CDEL_CANCEL_AMOUNT as CancelAmount,
                        CDEL_DEALER_REMARK as DealerRemarks,CDEL_CANCEL_DATE as CancelDate,
                        DEAL_MATURITY_FROM as MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        (case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
                        (abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
                        CDEL_PROFIT_LOSS as NewProfitLoss,
                        pkgreturncursor.fncGetdescription(DEAL_COMPANY_CODE,2) as company,
                        DEAL_COMPANY_CODE as companycode,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as CancelType,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
                        to_date('||''''||frmDate||''''||') as FromDate,to_Date('||''''||todate||''''||') as ToDate
                        ' || varGroupField || '
                from    trtran001,trtran006
                where   cdel_deal_number  = deal_deal_number
                  --      and cdel_deal_serial  = deal_serial_number
                    --    and CDEL_CANCEL_TYPE= 27000001
                        and deal_RECORD_STATUS not in(10200005,10200006)
                        and CDEL_RECORD_STATUS not in(10200005,10200006)
                        and cdel_deal_number not in(select LMOD_REFERENCE_NUMBER from trtran009 where LMOD_RECORD_STATUS in(10200001,10200002,10200003,10200004) )  ';
    open GenCursor for Query_Str||finalCondition||' order by DEAL_EXECUTE_DATE,cdel_deal_number,cdel_reverse_serial';
    insert into temp values(Query_Str,finalCondition);commit;
    GoTo Process_End;
  end if;

--if varReportID = 'REALIZEDMTMPL'  then
--    Query_Str1 := 'Entered';
--    --mFieldCondition := 'spot';
--    temp := '';
--    Query_Str :='select deal_deal_number as DEALNO,deal_execute_date AS EXDATE,
--                        pkgreturncursor.fncgetdescription(deal_buy_sell,1) AS BUYSELL,
--                        pkgreturncursor.fncgetdescription(deal_base_currency,2) AS BASECRNCY,
--                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
--                        pkgreturncursor.fncgetdescription(deal_counter_party ,2) AS BKNAME,
--                        deal_exchange_rate as EXRATE,deal_base_amount AS BASEAMT,deal_local_rate as LCRATE,
--                        decode(deal_other_currency,30400003,deal_other_amount,deal_amount_local) as AMTLCL,
--                        deal_other_amount  AS OTHERAMT,
--                        cdel_cancel_amount as CancelAmount,cdel_cancel_rate  as CancelRate,cdel_other_amount as CancelOtherAmt,
--                        cdel_local_rate as CancelLocalRate,cdel_cancel_inr as CancelInr,
--                        cdel_cancel_date as CancelDate,deal_maturity_from as MATURITYFRM,deal_maturity_date AS MATURITYDATE,
--                        (case when cdel_deal_number is null then pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,deal_execute_date,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date)),null) else 0  end)as M2mRate,
--                        (case when  cdel_cancel_type  is null  then
--                           (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, deal_execute_date, deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0)))
--                           else (decode(deal_other_currency,30400003,1,cdel_local_rate)) end ) as WashRate,
--                        --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, deal_execute_date, deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0))) as WashRate,
--                        (case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
--                        (abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
--                        cdel_dealer_remark as DealerRemarks,
--                        decode(cdel_cancel_type,27000001,pkgreturncursor.fncgetdescription(cdel_cancel_type,2),'||''''||Query_Str1||''''||') as CancelType,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
--                        '||''''||frmDate||''''||' as FromDate,'||''''||todate||''''||' as ToDate
--                from    trtran001,trtran006
--                where   deal_deal_number = cdel_deal_number(+) and
--                        deal_serial_number = cdel_deal_serial(+)  and
--                        DEAL_HEDGE_TRADE in(26000002) and
--                        DEAL_EXECUTE_DATE  between '||''''||frmDate||''''||' and '||''''||toDate||''''||' and
--                        cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||toDate||''''||' and
--                        cdel_record_status not in(10200005,10200006) ';
--
--                  insert into temp values(Query_Str,Query_Str);
--                  commit;
--   open GenCursor for Query_Str||' order by deal_base_currency,deal_other_currency ';
--   GoTo Process_End;
--  end if;

 if varReportID = 'REALIZEDMTMPL'  then
    Query_Str1 := 'Outstanding';
    mFieldCondition := '';
    temp := '';
    Query_Str :='select deal_deal_number as DEALNO,pkgreturncursor.fncgetdescription(deal_buy_sell,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(deal_counter_party ,2) AS BKNAME,
                        deal_exchange_rate as EXRATE,
                        --deal_base_amount AS BASEAMT,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||toDate||''''||') AS BASEAMT,
                        deal_local_rate as LCRATE,
                        decode(deal_other_currency,30400003,deal_other_amount,deal_amount_local) as AMTLCL,
                        --deal_other_amount  AS OTHERAMT,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||toDate||''''||') * deal_exchange_Rate)  AS OTHERAMT,
                        0 as CancelAmount,0  as CancelRate,0 as CancelOtherAmt,
                        0 as CancelLocalRate,0 as CancelInr,
                        sysdate as CancelDate,
                        deal_execute_date as EXDATE,
                        deal_maturity_from as MATURITYFRM,deal_maturity_date AS MATURITYDATE,
                        pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date)),deal_maturity_date) as M2mRate,
                        --pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||',deal_maturity_date)),deal_maturity_date) as M2mRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncGetRate(deal_other_currency,30400003,'||''''||frmDate||''''||',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date)),deal_maturity_date)))  as WashRate,
                        0 as Profit,
                        0 as Loss,
                        '||''''||mFieldCondition||''''||' as DealerRemarks,'||''''||Query_Str1||''''||' as CancelType,
                        0 as CancelCode,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
                        to_date('||''''||frmDate||''''||')  as FromDate,to_date('||''''||toDate||''''||') as ToDate
                from    trtran001
                where   deal_record_status not in(10200005,10200006) and
                        deal_hedge_trade = 26000002 and
                        ((deal_process_complete = 12400001 and deal_complete_date >'||''''||toDate||''''||') or deal_process_complete = 12400002) and
                         deal_execute_date <=  '||''''||toDate||''''||' -- and
--                       deal_deal_number not in( select cdel_deal_number
--                                                from trtran006
--                                                where cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||toDate||''''||' and
--                                                      cdel_record_status not in(10200005,10200006) and
--                                                      cdel_cancel_type = 27000001)
                union all ';

      Query_Str1 :=' select cdel_deal_number as DEALNO,pkgreturncursor.fncgetdescription(deal_buy_sell,1) AS BUYSELL,
                       pkgreturncursor.fncgetdescription(deal_base_currency,2) AS BASECRNCY,
                       pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
                       pkgreturncursor.fncgetdescription(deal_counter_party ,2) AS BKNAME,
                       deal_exchange_rate as EXRATE,
                       --deal_base_amount AS BASEAMT,
                       pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||toDate||''''||',cdel_cancel_date,cdel_reverse_serial) as BASEAMT,
                       deal_local_rate as LCRATE,
                       decode(deal_other_currency,30400003,deal_other_amount,deal_amount_local) as AMTLCL,
                       --deal_other_amount  AS OTHERAMT,
                       (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||toDate||''''||',cdel_cancel_date,cdel_reverse_serial) * deal_exchange_Rate) AS OTHERAMT,
                       cdel_cancel_amount as CancelAmount,cdel_cancel_rate  as CancelRate,cdel_other_amount as CancelOtherAmt,
                       cdel_local_rate as CancelLocalRate,cdel_cancel_inr as CancelInr,
                       cdel_cancel_date as CancelDate,
                       deal_execute_date as EXDATE,
                       deal_maturity_from as MATURITYFRM,deal_maturity_date AS MATURITYDATE,
                       0 as M2mRate,decode(deal_other_currency,30400003,1,cdel_local_rate) as WashRate,
                       (case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
                       (abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
                       cdel_dealer_remark as DealerRemarks,
                       pkgreturncursor.fncgetdescription(cdel_cancel_type,2) as CancelType,
                       1 as CancelCode,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
                       to_Date('||''''||frmDate||''''||') as FromDate,to_Date('||''''||toDate||''''||') as ToDate
                from   trtran006,trtran001
                where  deal_deal_number = cdel_deal_number and
                       deal_serial_number = cdel_deal_serial  and
                       deal_record_status not in(10200005,10200006) and
                       cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||toDate||''''||' and
                       cdel_record_status not in(10200005,10200006) and
                       cdel_cancel_type = 27000001 and
                       cdel_deal_number not in(select LMOD_REFERENCE_NUMBER from trtran009 where LMOD_RECORD_STATUS in(10200001,10200002,10200003,10200004) )';
    --insert into temp values(Query_Str,Query_Str1);commit;
    open GenCursor for Query_Str||Query_Str1 ;
    GoTo Process_End;
  end if;

  if  varReportID = 'DEALERBUDGETREPORT' then
    temp := '';
    Query_Str :='select (select user_user_name from usermaster  where user_user_id = budg_dealer_id) as DealerId,
                        (add_months(budg_period_ending,(decode(budg_period_type,26600005,-3,26600006,-6,26600007,-12,26600004,-1))) )as PeriodBegin,
                        budg_period_ending  as PeriodEnding,budg_period_type,
                        pkgreturncursor.fncgetdescription(budg_period_type,2) as PeriodType,
                        sum (cdel_cancel_amount * round((decode(deal_base_currency,30400004,1,(pkgforexprocess.fncGetRate(deal_base_currency,30400003,cdel_cancel_date,deal_buy_sell,deal_maturity_month,deal_maturity_date,0))) /
                        decode(deal_base_currency,30400004,1,(pkgforexprocess.fncGetRate(30400004,30400003,cdel_cancel_date,deal_buy_sell,deal_maturity_month,deal_maturity_date,0)))),4)) as OtherAmount,
                        sum(case when cdel_profit_loss > 0 then (round(cdel_profit_loss /  (pkgforexprocess.fncGetRate(30400004,30400003,cdel_cancel_date,deal_buy_sell,deal_maturity_month,deal_maturity_date,0)),4)) else 0 end) as Profit,
                        sum(case when cdel_profit_loss < 0 then (round(cdel_profit_loss /  (pkgforexprocess.fncGetRate(30400004,30400003,cdel_cancel_date,deal_buy_sell,deal_maturity_month,deal_maturity_date,0)),4)) else 0 end) as Loss,
                        (sum(budg_budget_usd)/count(budg_dealer_id))as BudgetUsd,
                        pkgreturnreport.GetSystemDate() as SystemDate,'||''''||frmDate||''''||' as FromDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran006,trsystem016,trtran001
                where   deal_deal_number = cdel_deal_number and
                        deal_serial_number = cdel_deal_serial and
                        cdel_user_id = budg_dealer_id  and
                        CDEL_RECORD_STATUS not in (10200005,10200006) and
                        cdel_cancel_date between (add_months(budg_period_ending,(decode(budg_period_type,26600005,-3,26600006,-6,26600007,-12,26600004,-1)))+1) and budg_period_ending ';
                        --round((sum(case when budg_budget_usd !=0 then budg_budget_usd else budg_budget_inr/(pkgforexprocess.fncGetRate(30400004,30400003,cdel_cancel_date,deal_buy_sell,deal_maturity_month,'||''''||temp||''''||',0))end  )/count(budg_dealer_id) ),2)as BudgetUsd,
    open GenCursor for  Query_Str||finalCondition||' group by budg_dealer_id,budg_period_type, budg_period_ending ';
    GoTo Process_End;
  end if;

  if  varReportID in ('STOPLOSSREPORTDAILY') then

    varReportID :='Daily';
    numError := pkgforexprocess.fncRiskGenerate(frmDate,GConst.TRADEDEAL);commit;

    open GenCursor for
                select  crsk_deal_number as DEALNO,crsk_deal_date as EXDATE,
                        pkgreturncursor.fncgetdescription(crsk_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as OTHERCRNCY,
                        crsk_position_fcy as BASEAMT,deal_exchange_rate as EXRATE,crsk_other_currency as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,crsk_maturity_date as MaturityDate,
                        crsk_mtm_rate as MtmRate,crsk_mtm_currency as RiskLocal,
                        0 as CancelAmount,0 as CancelRate,0 as CancelOtherAmt,
                        0	as CancelLocalRate,0 as CancelInr,
--                        (case when crsk_allowed_usd > 0 then crsk_allowed_usd else 0 end) as Profit,
--                        (case when crsk_allowed_usd < 0 then crsk_allowed_usd else 0 end) as Loss,
                        (case when crsk_allowed_inr > 0 then crsk_allowed_inr else 0 end) as Profit,
                        (case when crsk_allowed_inr < 0 then crsk_allowed_inr else 0 end) as Loss,
                        decode(crsk_for_currency,30400003,1,crsk_wash_rate) as WashRate,
                        crsk_allowed_inr as ProfitLoss,
                        --crsk_allowed_inr as ProfitLoss,
                        'Outstanding' as CancelType,0 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300000,0,crsk_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000011  and
                             crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000011 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,crsk_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,
                        CRSK_USER_ID as UserId,
                        varReportID as ReportHeader,frmDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName(varUserID ) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trsystem996,trtran001
                where   crsk_ason_date= frmDate and
                        crsk_risk_type = 0 and
                        crsk_deal_number = deal_deal_number and
                        crsk_serial_number= deal_serial_number
                union
                select  cdel_deal_number as DEALNO,cdel_cancel_date as EXDATE,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
                        deal_base_amount as BASEAMT,deal_exchange_rate as EXRATE,
                        deal_other_amount as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,deal_maturity_date as MaturityDate,
                        0 as MtmRate,0 as RiskLocal,
                        cdel_cancel_amount as  CancelAmount,CDEL_CANCEL_RATE as CancelRate,cdel_other_amount as CancelOtherAmt,
                        cdel_local_rate	as CancelLocalRate,cdel_cancel_inr as CancelInr,
                        (case when CDEL_PROFIT_LOSS > 0 then CDEL_PROFIT_LOSS  else 0 end) as Profit,
                        (case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS  else 0 end) as Loss,
                        decode(CDEL_LOCAL_RATE,0,1,CDEL_LOCAL_RATE) as WashRate,
                        --((CDEL_CANCEL_RATE - DEAL_EXCHANGE_RATE) * CDEL_CANCEL_AMOUNT ) as ProfitLoss,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        pkgreturncursor.fncgetdescription(cdel_cancel_type,2) as CancelType,
                        1 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000011  and
                              crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000011 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,deal_user_id as UserId,
                        varReportID as  ReportHeader,frmDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trtran006,trtran001
                where   cdel_deal_number = deal_deal_number and
                        cdel_deal_serial = deal_serial_number and
                        cdel_deal_type = GConst.TRADEDEAL and
                        cdel_record_status not in (10200005,10200006) and
                        cdel_cancel_date = frmDate ;

   GoTo Process_End;
  end if;

 ------ New Report Add by Abhijeet on 19-May-2014    -------
  if varReportID= 'IBDOUTSTANDING' then
    OPEN GenCursor for
    select
          pkgreturncursor.fncgetdescription(trad_product_category,2) as ProductCategory,
          pkgreturncursor.fncgetdescription(trad_subproduct_code,2)as SubCategory,
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as Bank,
          trad_user_reference as BankRef,
          trad_maturity_date as Duedate,
          pkgreturncursor.fncgetdescription(trad_trade_currency,2) as Currency,
          trad_trade_fcy as Amount,
          trad_contract_no as Agreement,
          pkgreturncursor.fncgetdescription(trad_buyer_seller,2)as Vendor,
          frmDate as AsonDate,
          TODATE as TODATE,
          pkgreturncursor.fncgetdescription(trad_company_code,1) as Company
    from trtran002
          where trad_record_status=10200005
          and TRAD_PROCESS_COMPLETE=12400002
          and trad_maturity_date <= TODate;
    Goto Process_End;
  end if;


 ----- end here ---------------------

  if  varReportID  = 'STOPLOSSREPORTMONTHLY' then
  --insert into temp values(Query_Str,finalCondition);commit;
  varReportID :='Monthly';
  numError := pkgforexprocess.fncRiskGenerate(frmDate,GConst.TRADEDEAL);commit;
  tempDate :=  pkgreturnreport.getCondition(21000012 ,frmDate,1);
  toDate :=  pkgreturnreport.getCondition(21000012 ,frmDate,2);
  open GenCursor for
                 select crsk_deal_number as DEALNO,crsk_deal_date as EXDATE,
                        pkgreturncursor.fncgetdescription(crsk_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as OTHERCRNCY,
                        crsk_position_fcy as BASEAMT,deal_exchange_rate as EXRATE,crsk_other_currency as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,crsk_maturity_date as MaturityDate,
                        crsk_mtm_rate as MtmRate,crsk_mtm_currency as RiskLocal,
                        0 as CancelAmount,0 as CancelRate,0 as CancelOtherAmt,
                        0	as CancelLocalRate,0 as CancelInr,
--                        (case when crsk_allowed_usd > 0 then crsk_allowed_usd else 0 end) as Profit,
--                        (case when crsk_allowed_usd < 0 then crsk_allowed_usd else 0 end) as Loss,
                        (case when crsk_allowed_inr > 0 then crsk_allowed_inr else 0 end) as Profit,
                        (case when crsk_allowed_inr < 0 then crsk_allowed_inr else 0 end) as Loss,
                        decode(crsk_for_currency,30400003,1,crsk_wash_rate) as WashRate,
                        crsk_allowed_inr as ProfitLoss,
                        --crsk_allowed_inr as ProfitLoss,
                        'Outstanding' as CancelType,0 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300000,0,crsk_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000012  and
                             crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000012 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,crsk_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,
                        CRSK_USER_ID as UserId,
                        varReportID as ReportHeader,tempDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trsystem996,trtran001
                where   crsk_ason_date= frmDate and
                        crsk_risk_type = 0 and
                        crsk_deal_number = deal_deal_number and
                        crsk_serial_number= deal_serial_number
                union
                select  cdel_deal_number as DEALNO,cdel_cancel_date as EXDATE,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
                        deal_base_amount as BASEAMT,deal_exchange_rate as EXRATE,
                        deal_other_amount as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,deal_maturity_date as MaturityDate,
                        0 as MtmRate,0 as RiskLocal,
                        cdel_cancel_amount as  CancelAmount,CDEL_CANCEL_RATE as CancelRate,cdel_other_amount as CancelOtherAmt,
                        cdel_local_rate	as CancelLocalRate,cdel_cancel_inr as CancelInr,
                        (case when CDEL_PROFIT_LOSS > 0 then CDEL_PROFIT_LOSS  else 0 end) as Profit,
                        (case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS  else 0 end) as Loss,
                        decode(CDEL_LOCAL_RATE,0,1,CDEL_LOCAL_RATE) as WashRate,
                        --((CDEL_CANCEL_RATE - DEAL_EXCHANGE_RATE) * CDEL_CANCEL_AMOUNT ) as ProfitLoss,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        pkgreturncursor.fncgetdescription(cdel_cancel_type,2) as CancelType,
                        1 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000012  and
                              crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000012 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,deal_user_id as UserId,
                        varReportID as  ReportHeader,tempDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trtran006,trtran001
                where   cdel_deal_number = deal_deal_number and
                        cdel_deal_serial = deal_serial_number and
                        cdel_deal_type = GConst.TRADEDEAL and
                        cdel_record_status not in (10200005,10200006) and
                        cdel_cancel_date = frmDate ;
    GoTo Process_End;
  end if;
  if  varReportID =  'STOPLOSSREPORTQUATERLY' then

  varReportID := 'Quaterly';
  numError := pkgforexprocess.fncRiskGenerate(DAYOPENDAYEND.fnccheckHolidays(frmDate),GConst.TRADEDEAL);commit;
  tempDate :=  pkgreturnreport.getCondition(21000013 ,frmDate,1);
  toDate :=  pkgreturnreport.getCondition(21000013 ,frmDate,2);
--  insert into temp values(frmDate,toDate);commit;
  open GenCursor for
                select  crsk_deal_number as DEALNO,crsk_deal_date as EXDATE,
                        pkgreturncursor.fncgetdescription(crsk_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as OTHERCRNCY,
                        crsk_position_fcy as BASEAMT,deal_exchange_rate as EXRATE,crsk_other_currency as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,crsk_maturity_date as MaturityDate,
                        crsk_mtm_rate as MtmRate,crsk_mtm_currency as RiskLocal,
                        0 as CancelAmount,0 as CancelRate,0 as CancelOtherAmt,
                        0	as CancelLocalRate,0 as CancelInr,
--                        (case when crsk_allowed_usd > 0 then crsk_allowed_usd else 0 end) as Profit,
--                        (case when crsk_allowed_usd < 0 then crsk_allowed_usd else 0 end) as Loss,
                        (case when crsk_allowed_inr > 0 then crsk_allowed_inr else 0 end) as Profit,
                        (case when crsk_allowed_inr < 0 then crsk_allowed_inr else 0 end) as Loss,
                        decode(crsk_for_currency,30400003,1,crsk_wash_rate) as WashRate,
                        crsk_allowed_inr as ProfitLoss,
                        --crsk_allowed_inr as ProfitLoss,
                        'Outstanding' as CancelType,0 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300000,0,crsk_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000013  and
                             crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000013 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,crsk_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,
                        CRSK_USER_ID as UserId,
                        varReportID as ReportHeader,tempDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName(varUserID ) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trsystem996,trtran001
                where   crsk_ason_date= frmDate and
                        crsk_risk_type = 0 and
                        crsk_deal_number = deal_deal_number and
                        crsk_serial_number= deal_serial_number
                union
                select  cdel_deal_number as DEALNO,cdel_cancel_date as EXDATE,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
                        deal_base_amount as BASEAMT,deal_exchange_rate as EXRATE,
                        deal_other_amount as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,deal_maturity_date as MaturityDate,
                        0 as MtmRate,0 as RiskLocal,
                        cdel_cancel_amount as  CancelAmount,CDEL_CANCEL_RATE as CancelRate,cdel_other_amount as CancelOtherAmt,
                        cdel_local_rate	as CancelLocalRate,cdel_cancel_inr as CancelInr,
                        (case when CDEL_PROFIT_LOSS > 0 then CDEL_PROFIT_LOSS  else 0 end) as Profit,
                        (case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS  else 0 end) as Loss,
                        decode(CDEL_LOCAL_RATE,0,1,CDEL_LOCAL_RATE) as WashRate,
                        --((CDEL_CANCEL_RATE - DEAL_EXCHANGE_RATE) * CDEL_CANCEL_AMOUNT ) as ProfitLoss,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        pkgreturncursor.fncgetdescription(cdel_cancel_type,2) as CancelType,
                        1 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000013  and
                              crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000013 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,deal_user_id as UserId,
                        varReportID as  ReportHeader,tempDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trtran006,trtran001
                where   cdel_deal_number = deal_deal_number and
                        cdel_deal_serial = deal_serial_number and
                        cdel_deal_type = GConst.TRADEDEAL and
                        cdel_record_status not in (10200005,10200006) and
                        cdel_cancel_date = frmDate ;
  GoTo Process_End;
  end if;

  if varReportID = 'STOPLOSSREPORTYERALY' then

  varReportID := 'Yearly';
  numError := pkgforexprocess.fncRiskGenerate(DAYOPENDAYEND.fnccheckHolidays(frmDate),GConst.TRADEDEAL);commit;
  tempDate :=  pkgreturnreport.getCondition(21000014 ,frmDate,1);
  toDate :=  pkgreturnreport.getCondition(21000014 ,frmDate,2);

  open GenCursor for
                select  crsk_deal_number as DEALNO,crsk_deal_date as EXDATE,
                        pkgreturncursor.fncgetdescription(crsk_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(CRSK_CURRENCY_CODE,2) as OTHERCRNCY,
                        crsk_position_fcy as BASEAMT,deal_exchange_rate as EXRATE,crsk_other_currency as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,crsk_maturity_date as MaturityDate,
                        crsk_mtm_rate as MtmRate,crsk_mtm_currency as RiskLocal,
                        0 as CancelAmount,0 as CancelRate,0 as CancelOtherAmt,
                        0	as CancelLocalRate,0 as CancelInr,
--                        (case when crsk_allowed_usd > 0 then crsk_allowed_usd else 0 end) as Profit,
--                        (case when crsk_allowed_usd < 0 then crsk_allowed_usd else 0 end) as Loss,
                        (case when crsk_allowed_inr > 0 then crsk_allowed_inr else 0 end) as Profit,
                        (case when crsk_allowed_inr < 0 then crsk_allowed_inr else 0 end) as Loss,
                        decode(crsk_for_currency,30400003,1,crsk_wash_rate) as WashRate,
                        crsk_allowed_inr as ProfitLoss,
                        --crsk_allowed_inr as ProfitLoss,
                        'Outstanding' as CancelType,0 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300000,0,crsk_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000014  and
                             crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                             crsk_risk_type = 21000014 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,crsk_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,
                        CRSK_USER_ID as UserId,
                        varReportID as ReportHeader,tempDate as FromDate,frmDate as ToDate,
                         pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trsystem996,trtran001
                where   crsk_ason_date= frmDate and
                        crsk_risk_type = 0 and
                        crsk_deal_number = deal_deal_number and
                        crsk_serial_number= deal_serial_number
                union
                select  cdel_deal_number as DEALNO,cdel_cancel_date as EXDATE,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,1) as BUYSELL,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BASECRNCY,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OTHERCRNCY,
                        deal_base_amount as BASEAMT,deal_exchange_rate as EXRATE,
                        deal_other_amount as OTHERAMT,
                        deal_local_rate as LCRATE,deal_amount_local as AMTLCL,deal_maturity_date as MaturityDate,
                        0 as MtmRate,0 as RiskLocal,
                        cdel_cancel_amount as  CancelAmount,CDEL_CANCEL_RATE as CancelRate,cdel_other_amount as CancelOtherAmt,
                        cdel_local_rate	as CancelLocalRate,cdel_cancel_inr as CancelInr,
                        (case when CDEL_PROFIT_LOSS > 0 then CDEL_PROFIT_LOSS  else 0 end) as Profit,
                        (case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS  else 0 end) as Loss,
                        decode(CDEL_LOCAL_RATE,0,1,CDEL_LOCAL_RATE) as WashRate,
                        --((CDEL_CANCEL_RATE - DEAL_EXCHANGE_RATE) * CDEL_CANCEL_AMOUNT ) as ProfitLoss,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        pkgreturncursor.fncgetdescription(cdel_cancel_type,2) as CancelType,
                        1 as GroupType,
                        (select crsk_limit_usd  * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem996
                        where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000014  and
                              crsk_serial_number =(select max(crsk_serial_number) from trsystem996 where crsk_ason_date= frmDate and
                              crsk_risk_type = 21000014 )
                        ) as RiskLocal,
                        nvl((select budg_budget_usd * pkgforexprocess.fncGetRate(30400004,30400003,frmDate,25300001,0,deal_maturity_date)
                        from trsystem016
                        where budg_period_ending = frmDate and
                              budg_dealer_id = varUserID
                        ),0)as BudgetInr,deal_user_id as UserId,
                        varReportID as  ReportHeader,tempDate as FromDate,frmDate  as ToDate,
                         pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trtran006,trtran001
                where   cdel_deal_number = deal_deal_number and
                        cdel_deal_serial = deal_serial_number and
                        cdel_deal_type = GConst.TRADEDEAL and
                        cdel_record_status not in (10200005,10200006) and
                        cdel_cancel_date = frmDate ;
  GoTo Process_End;
  end if;

  if  varReportID =  'HEDGESTOPLOSS' then
   numError :=  pkgforexprocess.fncHedgeRisk(frmDate);
   open GenCursor for
                SELECT  stop_order_date as  OrderDate, stop_oder_number as OrderNo,
                        pkgreturncursor.fncgetdescription(stop_currency_code,2) as CurrencyCode,
                        stop_order_value as OrderValue, stop_order_rate  as OrderRate,
                        stop_hedge_portion as HedgedPortion,  stop_unhedge_portion as UnhedgePortion,
                        stop_unhedge_percent as  UnHedgePercent, stop_loss_rate  as StopLossLevel,
                        stop_m2m_rate  as MtmRate,nvl(stop_loss_percent,0) as LossLevel,
                        stop_loss_inr as  LossLevelInr,
                        stop_ason_date as AsonDate,
                         pkgreturnreport.getCompanyName( varUserID) as CompanyName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                FROM    trsystem994;
  GoTo Process_End;
  end if;

        if varReportID = 'CASHFLOWSTATEMENT' then
        open GenCursor for

          select pkgReturnCursor.fncGetDescription(copt_company_code, 2) Company,
              pkgReturnCursor.fncGetDescription(bcac_local_bank,2) Bank,
              bcac_account_number AccountNumber, bcac_voucher_date VoucherDate, bcac_voucher_reference VoucherReference,
              pkgReturnCursor.fncGetDescription(copt_base_currency,2) || '/' ||
              pkgReturnCursor.fncGetDescription(copt_other_currency,2) Currency,
              pkgReturnCursor.fncGetDescription(bcac_crdr_code,2) CRDR,  bcac_voucher_inr VoucherInr,
              copt_execute_date ExecuteDate, copt_base_amount BaseAmount, copt_user_reference UserReference,frmdate as frmdate,todate as todate
              from trtran008, trtran071
              where bcac_voucher_reference = copt_deal_number
              and bcac_voucher_date between frmdate and todate
              union
              select pkgReturnCursor.fncGetDescription(deal_company_code,2) Company,
              pkgReturnCursor.fncGetDescription(bcac_local_bank,2) Bank,
              bcac_account_number AccountNumber,bcac_voucher_date VoucherDate, bcac_voucher_reference VoucherReference,
              pkgReturnCursor.fncGetDescription(deal_base_currency,2) || '/' ||
              pkgReturnCursor.fncGetDescription(deal_other_currency,2) Currency,
              pkgReturnCursor.fncGetDescription(bcac_crdr_code,2) Crdr,bcac_voucher_inr VoucherInr,
              deal_execute_date ExecuteDate, deal_base_amount BaseAmount, deal_user_reference UserReference,frmdate as frmdate,todate as todate
              from trtran008, trtran001
              where bcac_voucher_reference = deal_deal_number
              and bcac_voucher_date between frmdate and todate
              order by 4, 1, 2;

             insert into temp values(frmdate,'');commit;
              commit;
         end if;

if varReportID = 'DEALTICKETREPORT' then

  QUERY_STR1 := 'Entered';
  temp := 'Sale';
  mFieldCondition := 'Buy';
  SerialNumber := 'Cancelled';
  LocalBank := '/||';

  if instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL') <> 0 then
      BaseCurrency := 'and '|| substr(''''||finalcondition||'''',instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL'),length(''''||finalcondition||'''') - instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL'));
  else
    BaseCurrency := '';
  end if;

  QUERY_STR :=  'select deal_deal_number as DealNumber,DEAL_EXECUTE_TIME as DealTime,
                       pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as cmpshortdesc,
                       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
                       pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) '||substr(LocalBank,2,2)||' '||''''||substr(LocalBank,1,1)||''''||' '||substr(LocalBank,2,2)||'
                       pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as Currency,
                       DEAL_BASE_AMOUNT as BaseAmount,
                       pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as Buysell,
                       DEAL_EXCHANGE_RATE as ExchangeRate,
                       deal_maturity_date as  ValueDate,
                       decode(DEAL_OTHER_CURRENCY,30400003,1,DEAL_LOCAL_RATE) as WashRate,
                       '||''''||QUERY_STR1||''''||' as Status,deal_dealer_remarks as Remarks,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName, '||''''||frmDate||''''||' as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                       '||''''||frmDate||''''||' as FromDate,
                       '||''''||toDate||''''||' as ToDate,
                       pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdeal,
                       pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Backupdescr
                from trtran001
                where
                ---deal_hedge_trade = 26000002 and
                       DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||')
                       and deal_execute_date ='||''''||frmDate||''''||' '||finalcondition||'
                union all
                select cdel_deal_number as DealNumber,substr(CDEL_TIME_STAMP,13,5) as DealTime,
                       pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as cmpshortdesc,
                       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) as CounterParty,
                       pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) '||substr(LocalBank,2,2)||' '||''''||substr(LocalBank,1,1)||''''||' '||substr(LocalBank,2,2)||'
                       pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as Currency,
                       CDEL_CANCEL_AMOUNT as BaseAmount,
                       decode(DEAL_BUY_SELL,25300001,'||''''||temp||''''||',25300002,'||''''||mFieldCondition||''''||') as Buysell,
                       CDEL_CANCEL_RATE as ExchangeRate,
                       deal_maturity_date as  ValueDate,
                       decode(DEAL_OTHER_CURRENCY,30400003,1,CDEL_LOCAL_RATE) as WashRate,
                       '||''''||SerialNumber||''''||' as Status,CDEL_DEALER_REMARK as Remarks,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName, '||''''||frmDate||''''||' as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate ,
                       '||''''||frmDate||''''||' as FromDate,
                       '||''''||toDate||''''||' as ToDate,
                       pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdeal,
                       pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Backupdescr
                from trtran006,trtran001
                where deal_deal_number = cdel_deal_number and
                      deal_serial_number = cdel_deal_serial and
                      DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                      CDEL_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||') and
                      --cdel_deal_type = 26000002 and
                        cdel_cancel_date ='||''''||frmDate||''''||' '||BaseCurrency||' ' ;



    insert into temp values(Query_Str,BaseCurrency);commit;

    OPEN GenCursor for Query_Str || 'order by 2,1,11 desc';
    GoTo Process_End;
  end if;


if varReportID = 'ForwardTRADEDONE' then

  QUERY_STR1 := 'Entered';
  temp := 'Sale';
  mFieldCondition := 'Buy';
  SerialNumber := 'Cancelled';
  LocalBank := '/||';

--  if instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL') <> 0 then
--      BaseCurrency := 'and '|| substr(''''||finalcondition||'''',instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL'),length(''''||finalcondition||'''') - instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL'));
--  else
--    BaseCurrency := '';
--  end if;

  QUERY_STR :=  '
            select DEAL_DEAL_NUMBER as DealNumber,
             -- DEAL_EXECUTE_TIME as DealTime,
              pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as cmpshortdesc,
              pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) as CounterParty,
              pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) '||substr(LocalBank,2,2)||' '||''''||substr(LocalBank,1,1)||''''||' '||substr(LocalBank,2,2)||'
              pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as Currency,
               DEAL_BASE_AMOUNT as BaseAmount,
             -- decode(DEAL_BUY_SELL,25300001,'||''''||temp||''''||',25300002,'||''''||mFieldCondition||''''||') as Buysell,
            pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)  as Buysell,
              DEAL_EXCHANGE_RATE as ExchangeRate,
              DEAL_EXECUTE_DATE as  ValueDate,
             decode(DEAL_OTHER_CURRENCY,30400003,1,DEAL_LOCAL_RATE) as WashRate,
              '||''''||SerialNumber||''''||' as Status,
             deal_dealer_remarks as Remarks,
               pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName, '||''''||frmDate||''''||' as AsonDate,
              pkgreturnreport.GetSystemDate() as SystemDate ,

              pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdeal,
              pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Backupdescr,

              DEAL_Forward_RATE as BookFWD,
              DEAL_SPOT_RATE as BookNet,
        --    CDEL_MARGIN_RATE as MarginRate,

             -- CDEL_CANCEL_DATE as CancellDate,
             --CDEL_CANCEL_AMOUNT  CancellAMT,
             -- CDEL_CANCEL_RATE as CancellNetRate,
             -- CDEL_Forward_RATE as CancellFWD,
            --  CDEL_SPOT_RATE as CancellSpot,

             -- CDEL_PROFIT_LOSS as PandLCross,
             -- CDEL_PANDL_USD as PandLUSD,
             -- CDEL_TRADE_REFERENCE as BankReference,
              DEAL_MATURITY_FROM as DueDate,
              '||''''||frmDate||''''||' as FromDate,
              '||''''||toDate||''''||' as ToDate
              ' || varGroupField || '

              from trtran001
                where
                --deal_deal_number = cdel_deal_number and
                  --deal_serial_number = cdel_deal_serial and
                      DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||')
                    '|| FINALCONDITION||'
                     order by cmpshortdesc,CounterParty,Backupdeal ';
   insert into temp values(Query_Str,BaseCurrency);commit;
     OPEN GenCursor for Query_Str;
   -- OPEN GenCursor for Query_Str || 'order by 2,1,11 desc';
    GoTo Process_End;
  end if;


 if varReportID = 'ForwardCANCELLED' then

--  QUERY_STR1 := 'Entered';
 temp := 'Sale';
  mFieldCondition := 'Buy';
 SerialNumber := 'Cancelled';
 LocalBank := '/||';
--
--  if instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL') <> 0 then
--      BaseCurrency := 'and '|| substr(''''||finalcondition||'''',instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL'),length(''''||finalcondition||'''') - instr(''''||finalcondition||'''','DEAL_BACKUP_DEAL'));
--  else
--    BaseCurrency := '';
--  end if;
  ---insert in
  QUERY_STR :=  '
            select cdel_deal_number as DealNumber,
              substr(CDEL_TIME_STAMP,13,5) as DealTime,
              pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as cmpshortdesc,
              pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) as CounterParty,
              pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) '||substr(LocalBank,2,2)||' '||''''||substr(LocalBank,1,1)||''''||' '||substr(LocalBank,2,2)||'
              pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as Currency,
              DEAL_BASE_AMOUNT as BaseAmount,
              --decode(DEAL_BUY_SELL,25300001,'||''''||temp||''''||',25300002,'||''''||mFieldCondition||''''||') as Buysell,
               pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)  as Buysell,
              CDEL_CANCEL_RATE as ExchangeRate,
              DEAL_EXECUTE_DATE as  ValueDate,
              decode(DEAL_OTHER_CURRENCY,30400003,1,CDEL_LOCAL_RATE) as WashRate,
              '||''''||SerialNumber||''''||' as Status,CDEL_DEALER_REMARK as Remarks,
               pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName, '||''''||frmDate||''''||' as AsonDate,
              pkgreturnreport.GetSystemDate() as SystemDate ,

              pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdeal,
              pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Backupdescr,

              DEAL_Forward_RATE as BookFWD,
              DEAL_SPOT_RATE as BookNet,
              nvl(b.CDEL_MARGIN_RATE,0) as MarginRate,

              CDEL_CANCEL_DATE as CancellDate,
              CDEL_CANCEL_AMOUNT  CancellAMT,
              CDEL_CANCEL_RATE as CancellNetRate,
              nvl(b.CDEL_Forward_RATE,0) as CancellFWD,
              nvl(b.CDEL_SPOT_RATE,0) as CancellSpot,

              CDEL_PROFIT_LOSS as PandLCross,
              CDEL_PANDL_USD as PandLUSD,
              CDEL_TRADE_REFERENCE as BankReference,
              DEAL_MATURITY_FROM as DueDate,
              '||''''||frmDate||''''||' as FromDate,
              '||''''||toDate||''''||' as ToDate
              ' || varGroupField || '

              from trtran006 b,trtran001
                where deal_deal_number = cdel_deal_number and
                      deal_serial_number = cdel_deal_serial and
                      DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                      CDEL_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||')
                     '|| FINALCONDITION||'
                     order by cmpshortdesc,CounterParty,Backupdeal ';
                      --cdel_deal_type = 26000002 and
                     --  cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||toDate||''''||' '||BaseCurrency||' ' ;

   insert into temp values(Query_Str,finalcondition);commit;

  --  OPEN GenCursor for Query_Str || 'order by 2,1,11 desc';
  OPEN GenCursor for Query_Str;
    GoTo Process_End;
  end if;

   if varReportID = 'DEALTICKETREPORTOPTIONS' then
    open GenCursor for
     select  pkgreturncursor.fncgetdescription(copt_company_code,2)  as company,
          'Entered' as Status,copt_deal_number as DealNumber,copt_execute_date EntryDate,copt_EXECUTE_TIME as DealTime,
                       pkgreturncursor.fncgetdescription(copt_contract_type,2) as CONTRACTPOSITIONType,
                       decode(copt_contract_type,32800002,pkgreturncursor.fncgetdescription(copt_COUNTER_PARTY,2),
                        32800001,pkgreturncursor.fncgetdescription(copt_broker_code,2))as CounterParty,
                       pkgreturncursor.fncgetdescription(copt_deal_type,2) as OptionType,
                       pkgreturncursor.fncgetdescription(copt_BASE_CURRENCY,2) || '/' ||
                       pkgreturncursor.fncgetdescription(copt_OTHER_CURRENCY,2) as  BaseCurrency,
                       copt_BASE_AMOUNT as BaseAmount,
                       (select round( avg(cosu_strike_rate),2) from trtran072
                         where cosu_deal_number=copt_deal_number
                           and cosu_buy_sell=25300001
                           and cosu_option_type=32400001) "BC",
                        (select avg(cosu_strike_rate) from trtran072
                           where cosu_deal_number=copt_deal_number
                             and cosu_buy_sell=25300001
                             and cosu_option_type=32400002) "BP",
                          (select avg(cosu_strike_rate) from trtran072
                           where cosu_deal_number=copt_deal_number
                             and cosu_buy_sell=25300002
                             and cosu_option_type=32400001) "SC",
                         (select avg(cosu_strike_rate) from trtran072
                           where cosu_deal_number=copt_deal_number
                             and cosu_buy_sell=25300002
                             and cosu_option_type=32400002) "SP",
                       0 RefRate,
                       copt_expiry_date MaturityDate,copt_maturity_date SettlementDate,
                       copt_user_reference as Remarks,
                       copt_premium_amount PremiumAmount,

                       copt_premium_Exrate ExchangeRate,
                       copt_premium_local PremiumLocal,copt_premium_valueDate PremiumValueDate,
                       decode(copt_premium_status,33200001,copt_premium_local,33200002,-1*copt_premium_local) PandL,
                        pkgreturnreport.getCompanyName( varUserID ) as CompanyName, frmDate as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate

                from trtran071
                 where copt_execute_date =frmdate
                 and copt_record_status not in(10200005,10200006)
                union all
                 select pkgreturncursor.fncgetdescription(copt_company_code,2)  as company,
                       pkgreturncursor.fncgetdescription(corv_exercise_type,2)  as Status,
                       copt_deal_number as DealNumber,CORV_EXERCISE_DATE EntryDate,copt_EXECUTE_TIME as DealTime,
                       pkgreturncursor.fncgetdescription(copt_contract_type,2) as ContractType,
                       decode(copt_contract_type,32800002,pkgreturncursor.fncgetdescription(copt_COUNTER_PARTY,2),
                        32800001,pkgreturncursor.fncgetdescription(copt_broker_code,2))as CounterParty,
                       pkgreturncursor.fncgetdescription(copt_deal_type,2) as OptionType,
                       pkgreturncursor.fncgetdescription(copt_BASE_CURRENCY,2) || '/' ||
                       pkgreturncursor.fncgetdescription(copt_OTHER_CURRENCY,2) AS BaseCurrency,
                       CORV_BASE_AMOUNT as BaseAmount,
                       (select round( avg(cosu_strike_rate),2) from trtran072
                         where cosu_deal_number=copt_deal_number
                           and cosu_buy_sell=25300001
                           and cosu_option_type=32400001) "BC",
                        (select avg(cosu_strike_rate) from trtran072
                           where cosu_deal_number=copt_deal_number
                             and cosu_buy_sell=25300001
                             and cosu_option_type=32400002) "BP",
                          (select avg(cosu_strike_rate) from trtran072
                           where cosu_deal_number=copt_deal_number
                             and cosu_buy_sell=25300002
                             and cosu_option_type=32400001) "SC",
                         (select avg(cosu_strike_rate) from trtran072
                           where cosu_deal_number=copt_deal_number
                             and cosu_buy_sell=25300002
                             and cosu_option_type=32400002) "SP",
                       corv_Exercise_rate RefRate,
                       CORV_EXERCISE_DATE MaturityDate,copt_maturity_date SettlementDate,
                       corv_dealer_remarks as Remarks,
                       corv_premium_amount PremiumAmount,
                       --corv_premium_Exrate ExchangeRate,
                      nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) ExchangeRate,
                       corv_premium_local PremiumLocal,corv_settlement_Date PremiumValueDate,
                       decode(corv_premium_status,33200001,corv_profit_loss,33200002,-1*corv_profit_loss) PandL,
                        pkgreturnreport.getCompanyName( varUserID ) as CompanyName, frmDate as AsonDate,
                      pkgreturnreport.GetSystemDate() as SystemDate
                      --33200001	Received
--33200002	Premium Paid
                from trtran071,trtran073
                where  copt_deal_number=corv_deal_number
                 AND CORV_EXERCISE_DATE =frmdate
                 and corv_record_status not in(10200005,10200006)
                and copt_deal_number=corv_deal_number;

    end if;

 if varReportID ='CURRENTACCOUNTSTMT' then
   numError := pkgReturnCursor.fncGenerateStatement(datWorkDate,CompanyName,LocalBank,frmDate,todate,12400002);commit;
    QUERY_STR :='select csmt_serial_number "Srl", csmt_transaction_date "VoucherDate",
                        csmt_cheque_number "ChequeNo", csmt_voucher_detail "VoucherDetail",
                        csmt_debit_amount "Debit", csmt_credit_amount "Credit",
                        csmt_balance_amount "Balance",  PKGRETURNCURSOR.FNCGETDESCRIPTION(CSMT_COMPANY_CODE,1) as CompanyName,
                        PKGRETURNCURSOR.FNCGETDESCRIPTION( CSMT_LOCAL_BANK,1) AS LocalBank,CSMT_ACCOUNT_NUMBER AS AccountNo,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||todate||''''||') as ToDate,
                        csmt_Recon_inr Reconinr,csmt_Recon_Date ReconDate,
                        csmt_Recon_Remarks ReconRemarks
                  from trsystem993 order by csmt_transaction_date,CSMT_SERIAL_NUMBER ';
     -- where
     -- csmt_statement_date = '||''''|| AsonDate||''''||'
     -- and csmt_company_code = = '|| companyid ||'
      --and csmt_local_bank = '||numCode ||;

   OPEN gencursor FOR query_str;
   GOTO process_end;
  end if;
  if varReportID ='CURRENTACCONSOLIDATE' then
   numError := pkgReturnCursor.fncGenerateStatement(datWorkDate,CompanyName,LocalBank,frmDate,todate,12400001);commit;
    QUERY_STR :='select csmt_serial_number "Srl", csmt_transaction_date "VoucherDate",
                        csmt_cheque_number "ChequeNo", csmt_voucher_detail "VoucherDetail",
                        csmt_debit_amount "Debit", csmt_credit_amount "Credit",
                        csmt_balance_amount "Balance",  PKGRETURNCURSOR.FNCGETDESCRIPTION(CSMT_COMPANY_CODE,1) as CompanyName,
                        PKGRETURNCURSOR.FNCGETDESCRIPTION( CSMT_LOCAL_BANK,1) AS LocalBank,CSMT_ACCOUNT_NUMBER AS AccountNo,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||todate||''''||') as ToDate
                  from trsystem993 order by csmt_transaction_date,CSMT_SERIAL_NUMBER';
     -- where
     -- csmt_statement_date = '||''''|| AsonDate||''''||'
     -- and csmt_company_code = = '|| companyid ||'
      --and csmt_local_bank = '||numCode ||;


   OPEN gencursor FOR query_str;
   GOTO process_end;
  end if;
--if varReportID = 'ROLLOVEROFHEDGECONTRACT' then
--
----   QUERY_STR :='select  deal_deal_number as DealNumber,deal_execute_date as ExecuteDate,
----                        pkgReturnCursor.fncGetDescription(deal_base_currency,2) as BaseCurrency,
----                        pkgReturnCursor.fncGetDescription(deal_other_currency,2) as OtherCurrency,
----                        deal_base_amount as BaseAmount,deal_exchange_rate as ExchangeRate,
----                        deal_maturity_date as ValueDate,
----                        lmod_change_date as ChangeDate,
----                        lmod_enhanced_rate as EnhancedRate,lmod_enhanced_fcy as EnhancedFcy,
----                        round((LMOD_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,lmod_local_rate))),4)  as ProfitLoss,
----                        LMOD_LOCAL_RATE as WashRate,
----                        LMOD_PROFIT_LOSS as NetAmount,
----                        pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
----                        0 as NetCost,
----                        '||''''||frmDate||''''||' as AsonDate,
----                        pkgreturnreport.GetSystemDate() as SystemDate,
----                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
----                from    trtran001,trtran009
----                where   lmod_reference_number = deal_deal_number and
----                        lmod_reference_serial = deal_serial_number and
----                        deal_hedge_trade = 26000001 and
----                        lmod_reference_number not in(select cdel_deal_number from trtran006) and
----                        deal_record_status not in('||gconst.statusdeleted||','||gconst.statusinactive||','||gconst.STATUSPOSTCANCEL||')';
--
-- Query_Str1 := 'Import';
-- temp := 'Export';
-- QUERY_STR :='select  deal_deal_number as DealNumber,deal_execute_date as ExecuteDate,
--                        pkgReturnCursor.fncGetDescription(deal_base_currency,2) as BaseCurrency,
--                        pkgReturnCursor.fncGetDescription(deal_other_currency,2) as OtherCurrency,
--                        decode(deal_buy_sell,25300001,'||''''||Query_Str1||''''||','||''''||temp||''''||') as BuySell,
--                        deal_base_amount as BaseAmount,deal_exchange_rate as ExchangeRate,
--                        a.lmod_maturity_date as ValueDate,
--                        a.lmod_change_date as ChangeDate,
--                        a.lmod_enhanced_rate as EnhancedRate,a.lmod_enhanced_fcy as EnhancedFcy,
--                        round((a.LMOD_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,a.lmod_local_rate))),4)  as ProfitLoss,
--                        a.LMOD_LOCAL_RATE as WashRate,
--                        a.LMOD_PROFIT_LOSS as NetAmount,
--                        pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
--                        to_date('||''''||frmDate||''''||') as AsonDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trtran001,trtran009 a
--                where   a.lmod_reference_number = deal_deal_number and
--                        a.lmod_reference_serial = deal_serial_number and
--                        deal_hedge_trade = 26000001 and
--                        deal_record_status not in('||gconst.statusdeleted||','||gconst.statusinactive||')';
--
--  --insert into temp values(QUERY_STR,finalCondition);commit;
--  OPEN gencursor FOR QUERY_STR||finalCondition|| ' order by a.lmod_change_date,deal_deal_number ';
--  GOTO process_end;
--  end if;
--

if varReportID = 'ROLLOVEROFHEDGECONTRACT' or varReportID = 'BANKWISEROLLOVERHEDGECONTRACT' then

--   QUERY_STR :='select  deal_deal_number as DealNumber,deal_execute_date as ExecuteDate,
--                        pkgReturnCursor.fncGetDescription(deal_base_currency,2) as BaseCurrency,
--                        pkgReturnCursor.fncGetDescription(deal_other_currency,2) as OtherCurrency,
--                        deal_base_amount as BaseAmount,deal_exchange_rate as ExchangeRate,
--                        deal_maturity_date as ValueDate,
--                        lmod_change_date as ChangeDate,
--                        lmod_enhanced_rate as EnhancedRate,lmod_enhanced_fcy as EnhancedFcy,
--                        round((LMOD_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,lmod_local_rate))),4)  as ProfitLoss,
--                        LMOD_LOCAL_RATE as WashRate,
--                        LMOD_PROFIT_LOSS as NetAmount,
--                        pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
--                        0 as NetCost,
--                        '||''''||frmDate||''''||' as AsonDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trtran001,trtran009
--                where   lmod_reference_number = deal_deal_number and
--                        lmod_reference_serial = deal_serial_number and
--                        deal_hedge_trade = 26000001 and
--                        lmod_reference_number not in(select cdel_deal_number from trtran006) and
--                        deal_record_status not in('||gconst.statusdeleted||','||gconst.statusinactive||','||gconst.STATUSPOSTCANCEL||')';

 Query_Str1 := 'Import';
 temp := 'Export';
 QUERY_STR :='select  deal_deal_number as DealNumber,deal_execute_date as ExecuteDate,
                        pkgReturnCursor.fncGetDescription(deal_base_currency,2) as BaseCurrency,
                        pkgReturnCursor.fncGetDescription(deal_other_currency,2) as OtherCurrency,
                        decode(deal_buy_sell,25300001,'||''''||Query_Str1||''''||','||''''||temp||''''||') as BuySell,
                        deal_base_amount as BaseAmount,deal_exchange_rate as ExchangeRate,
                        a.lmod_maturity_date as ValueDate,
                        a.lmod_change_date as ChangeDate,
                        a.lmod_enhanced_rate as EnhancedRate,a.lmod_enhanced_fcy as EnhancedFcy,
                        round((a.LMOD_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,a.lmod_local_rate))),4)  as ProfitLoss,
                        a.LMOD_LOCAL_RATE as WashRate,
                        a.LMOD_PROFIT_LOSS as NetAmount,
                        pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from    trtran001,trtran009 a
                where   a.lmod_reference_number = deal_deal_number and
                        a.lmod_reference_serial = deal_serial_number and
                        deal_hedge_trade = 26000001 and
                        deal_record_status not in('||gconst.statusdeleted||','||gconst.statusinactive||')';

  --insert into temp values(QUERY_STR,finalCondition);commit;
  OPEN gencursor FOR QUERY_STR||finalCondition|| ' order by a.lmod_change_date,deal_deal_number ';
  GOTO process_end;
  end if;

-------------------------------

   if varReportID = 'NETTRADEREPORT' then

             QUERY_STR :=' select cdel_cancel_date as TradeDate,sum(cdel_profit_loss) as Net,
                       pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
                       to_date('||''''||frmDate||''''||') as FromDate,
                       to_date('||''''||todate||''''||') as ToDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from   trtran006,trtran001
                where  cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||todate||''''||' and
                       cdel_deal_number not in( select lmod_reference_number from trtran009) and
                       cdel_cancel_type= 27000001 and
                       deal_deal_number = cdel_deal_number and
                       deal_serial_number = cdel_deal_serial and
                       cdel_record_status not in(10200005,10200006)' || finalCondition ||
                ' group by cdel_cancel_date,deal_counter_party
                order by cdel_cancel_date';
          OPEN gencursor FOR QUERY_STR;
  GOTO process_end;
  end if;

if varReportID = 'NETTRADEREPORTBYMATURITYDATE' then

  OPEN gencursor FOR
            select deal_maturity_date as TradeDate,sum(cdel_profit_loss) as Net,
                   pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
                   frmDate as FromDate, toDate  as ToDate,
                   pkgreturnreport.GetSystemDate() as SystemDate,
                    pkgreturnreport.getCompanyName( varUserID ) as CompanyName
            from   trtran006,trtran001
            where  cdel_cancel_date between frmDate and toDate and
                   cdel_deal_number not in( select lmod_reference_number from trtran009) and
                   cdel_cancel_type= 27000001 and
                   deal_deal_number = cdel_deal_number and
                   deal_serial_number = cdel_deal_serial and
                   cdel_record_status not in(10200005,10200006)
            group by deal_maturity_date,deal_counter_party
            order by deal_maturity_date ;

  GOTO process_end;
  end if;



-- -------------------------- //  Arjun  \\- modified on 28 - may- 14 --------------------------------------------
if varReportID='FXFORECAST' then

    if (to_char(frmDate,'MM') <=3) then

                  tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
                  dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-0);
                  temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(to_number(to_char(frmDate,'YY'))-0);
                  SerialNumber:=' ( '|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(to_number(to_char(frmDate,'YY'))-0) ||' )';
      else
                  tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-0);
                  dattemp:= '31-MAR-' || to_char(frmDate,'YYYY');
                  temp:='FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
                  SerialNumber:=' ( '|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1) || ' )';

     end if;

   numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
   insert into temp values (numError,temp);commit;
--    PRCCALCULATEGAPEXPOSURE(frmDate,1,ProductCode,SubProductCode);

   pkgreportprograms.prcFxForcastReportPopulate(frmDate);

     -- open GenCursor For
       query_str:=' select displayorder,Status,
               temp fyyear,
               '||''''||frmdate||''''||'  as  datDateAsOn,
               pkgreturncursor.fncgetdescription(CompanyCode,1)  CompanyCode,
               MaturityMonth,MaturityMonthDate,
               pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
               (case when displayorder in (1,3,5,8) then round(AmountFcy/1000000,2)
                    else AmountFcy end) AmountFcy1 ,AmountLocal AmountLocal1,DataType
         from Report_FxForcast where CompanyCode not in(0) '||finalcondition||'' ;
         delete from temp;commit;
         insert into temp values (Query_Str,finalcondition);commit; 
Open Gencursor for Query_Str;
 Goto Process_End;
  End if;


--  if varReportID='FXFORECASTNEWSPRINT' then
--                      if (to_char(frmDate,'MM') <3) then
--
--                                    tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-2);
--                                    dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--                                    temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-2) || '-' || to_char(to_number(to_char(frmDate,'YY'))-1);
--                        else
--                                    tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-1);
--                                    dattemp:= '31-MAR-' || to_char(frmDate,'YYYY');
--                                    temp:='FY'||to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--                       end if;
--
--      open GenCursor For
--
--
--                   select 'NP Payment' Status,
--                               temp fyyear,
--                              to_char(to_char(frmdate,'dd-MON-')) || to_char(to_number(to_char(frmdate,'YYYY'))-1) datDateAsOn,
--                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode,
--                              to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
--                              to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonthDate,
--                              pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
--                              round(sum(cdel_cancel_amount)/1000000,2) AmountFcy1,
--                              round(sum(cdel_cancel_amount*cdel_cancel_RATE),2) AmountLocal1
--                      from trtran006 left outer join  trtran001
--                      on cdel_deal_number= deal_deal_number
--                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
--                        and deal_backup_deal=33300001
--                        and cdel_trade_reference is not null
--                        and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and dattemp
--                        and deal_base_currency=30400004
--                     group by cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy'),
--                               temp ,
--                              to_char(to_char(frmdate,'dd-MON-')) || to_char(to_number(to_char(frmdate,'YYYY'))-1)
--                    union all
--                      select 'Weighted Avg Rate' Status,
--                               temp fyyear,
--                              to_char(to_char(frmdate,'dd-MON-')) || to_char(to_number(to_char(frmdate,'YYYY'))-1) datDateAsOn,
--                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode,
--                              to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
--                              to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonthDate,
--                              pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
--                              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/sUM(cdel_cancel_amount),2) AmountFcy1,
--                              sum(cdel_cancel_amount*cdel_cancel_RATE) AmountLocal1
--                      from trtran006 left outer join  trtran001
--                      on cdel_deal_number= deal_deal_number
--                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
--                        and deal_backup_deal=33300001
--                        and cdel_trade_reference is not null
--                        and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and dattemp
--                        and deal_base_currency=30400004
--                     group by cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy'),
--                               temp ,
--                              to_char(to_char(frmdate,'dd-MON-')) || to_char(to_number(to_char(frmdate,'YYYY'))-1)
--                    order by 6;
--Goto Process_End;
--  End if;

-- -----Arjun added on 08/04/2014

            if varReportID='FXFORECASTNEWSPRINT' then

                 if (to_char(frmDate,'MM') <=3) then

                              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-2);
                              dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
                              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-2) || '-' || to_char(to_number(to_char(frmDate,'YY'))-1);
                  else
                              tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-1);
                              dattemp:= '31-MAR-' || to_char(frmDate,'YYYY');
                              temp:='FY'||to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
                 end if;
        --        numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;

            --    PRCCALCULATEGAPEXPOSURE(frmDate,1,ProductCode,SubProductCode);

               pkgreportprograms.prcFxForcastRptPopulatePreYear(frmDate);

           --     open gencursor for
             Query_Str:= 'select  Status,temp fisyear,
                              to_char(to_char('||''''||frmdate||''''||',''dd-MON-'')) || to_char(to_number(to_char(frmdate,''YYYY''))-1) datDateAsOn,
                              pkgreturncursor.fncgetdescription(CompanyCode,1)  Company , MaturityMonth,
                              MaturityMonthDate,pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
                              AmountFcy AmountFcy,
                              AmountLocal AmountLocal
                        from REPORT_FXFORCAST_PREYEAR where CompanyCode not in (0) '||finalcondition||'';
                        delete from temp;commit;
                        insert into temp values (Query_Str,finalcondition);commit;
            Open Gencursor for Query_Str;
            Goto Process_End;
              End if;



 -----arjun ends

--     If Varreportid = 'SUBFXFORECAST' then
--
--          if (to_char(frmDate,'MM') <3) then
--                      tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--                      dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-0);
--                      temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(to_number(to_char(frmDate,'YY'))-0);
--          else
--                      tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-0);
--                      dattemp:= '31-MAR-' || to_char(frmDate,'YYYY');
--                      temp:='FY'||to_char(to_number(to_char(frmDate,'YY'))-0) || '-' || to_char(frmDate,'YY');
--         end if;
--
--
----          Open Gencursor For
----                  select 'Settelled Exposure' Status1,
----                 'Settelled Exposure' TypeOfTrans1,
----                  BREL_COMPANY_CODE CompanyCode1,
----                  TRAD_PRODUCT_CATEGORY BackupDeal1,
----                   TRAD_PRODUCT_CATEGORY ProductCode1,
----                  round(sum(BREL_REVERSAL_FCY/1000000),2) BaseAmount1,
----                 round(sum(BREL_REVERSAL_FCY*BREL_REVERSAL_RATE)/sum(BREL_REVERSAL_FCY),2) ExchangeRate1,
----                round((sum(BREL_REVERSAL_FCY*BREL_REVERSAL_RATE)/1000000),2) BaseAmountinr,
----                    TRAD_TRADE_CURRENCY BaseCurrency1,
----                    30400003 OtherCurrency1
----                    from trtran003 left outer join trtran002
----                    on  brel_trade_reference=trad_trade_reference
----                   and trad_record_status not in (10200005,10200006)
----                    and TRAD_PRODUCT_CATEGORY=33300001
----                  and brel_record_status not in (10200005,10200006)
----                 group  by   BREL_COMPANY_CODE,TRAD_TRADE_CURRENCY,TRAD_PRODUCT_CATEGORY
----           union all
----                       select 'Hedged Exposure' status1,
----                           'Hedged Exposure' TypeOfTrans1,
----                           deal_company_code CompanyCode1,
----                           deal_backup_deal BackupDeal1,
----                             deal_backup_deal ProductCode1,
----                           round( sum(deal_base_amount/1000000),2) BaseAmount1,
----                             round( sum(deal_base_amount*deal_exchange_rate)/sum(deal_base_amount),2) ExchangeRate1,
----                            round((sum(deal_base_amount*deal_exchange_rate)/1000000),2) BaseAmountinr,
----                              deal_base_currency BaseCurrency1,
----                              Deal_other_currency OtherCurrency1
----                         from trtran001
----                        where
----                        ((deal_process_complete=12400002) or (deal_complete_date >=frmdate and deal_process_complete=12400001))
----                          --and deal_execute_date >='01-apr-2012'
----                          and deal_backup_deal=33300001
----                          and deal_record_status not in(12400005,12400006)
----                          group by deal_company_code ,deal_backup_deal,deal_base_currency,Deal_other_currency
----                       union all
----                       select 'Unhedged Exposure' Status1,
----                         'Unhedged Exposure' TypeOfTrans1,
----                              trad_company_code CompanyCode1,
----                               TRAD_PRODUCT_CATEGORY BackupDeal1,
----                           TRAD_PRODUCT_CATEGORY ProductCode1,
----                            round(sum(trad_trade_fcy/1000000),2) BaseAmount1,
----                             round(sum(trad_trade_fcy*trad_trade_rate)/sum(trad_trade_fcy),2) ExchangeRate1,
----                             round((sum(trad_trade_fcy*trad_trade_rate)/1000000),2) BaseAmountinr,
----                             trad_trade_currency BaseCurrency1,
----                             30400003 OtherCurrency1
----                             from trtran002
----                             where ((trad_process_complete=12400002) or (trad_complete_date <=frmdate and trad_process_complete=12400001))
----                                 -- and trad_entry_date >='01-apr-2012'
----                                  and TRAD_PRODUCT_CATEGORY=33300001
----                                  and trad_record_status not in (10200005,10200006)
----                                group by trad_company_code, TRAD_PRODUCT_CATEGORY,trad_trade_currency;
--
--     Open Gencursor For
--
----                 'Settelled Exposure' TypeOfTrans1,
--           select 'Settled Exposure' Status1,  'Settled Exposure' TypeOfTrans1,
--                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode,
--                              pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
--                              round(sum(cdel_cancel_amount)/1000000,2) BaseAmount1,
--                              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2) BaseAmountinr,
--                               round(sum(cdel_cancel_amount*cdel_cancel_RATE)/ sum(cdel_cancel_amount),2) ExchangeRate1
--                      from trtran006 left outer join  trtran001
--                      on cdel_deal_number= deal_deal_number
--                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
--                        and deal_backup_deal=33300001
--                        and cdel_trade_reference is not null
--                        and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and datTemp
--                        and deal_base_currency=30400004
--               group by cdel_COMPANY_CODE,deal_base_CURRENCY
--             union all
--             SELECT  'Hedged Exposure' Status1, 'Hedged Exposure' TypeOfTrans1,
--                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
--                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                          round(sum(POSN_TRANSACTION_AMOUNT)/1000000,2) BaseAmount1,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ sum(POSN_TRANSACTION_AMOUNT),2) ExchangeRate1
--              from trsystem997
--              where posn_transaction_amount!=0
--              and posn_fcy_rate !=0
--              and posn_product_code=33300001
--              and posn_due_date  between tempDate and datTemp
--              aND posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--                                        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE;
--
--        Goto Process_End;
--     End If;



---arjun modified  on 29/05/2014

 If Varreportid = 'SUBFXFORECAST' then

          if (to_char(frmDate,'MM') <=3) then
                      tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
                      dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-0);
                      temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(to_number(to_char(frmDate,'YY'))-0);
          else
                      tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-0);
                      dattemp:= '31-MAR-' ||to_char(to_number(to_char(frmDate,'YYYY'))+1);
                      temp:='FY'||to_char(to_number(to_char(frmDate,'YY'))-0) || '-' || to_char(frmDate,'YY');
         end if;


--          Open Gencursor For
--                  select 'Settelled Exposure' Status1,
--                 'Settelled Exposure' TypeOfTrans1,
--                  BREL_COMPANY_CODE CompanyCode1,
--                  TRAD_PRODUCT_CATEGORY BackupDeal1,
--                   TRAD_PRODUCT_CATEGORY ProductCode1,
--                  round(sum(BREL_REVERSAL_FCY/1000000),2) BaseAmount1,
--                 round(sum(BREL_REVERSAL_FCY*BREL_REVERSAL_RATE)/sum(BREL_REVERSAL_FCY),2) ExchangeRate1,
--                round((sum(BREL_REVERSAL_FCY*BREL_REVERSAL_RATE)/1000000),2) BaseAmountinr,
--                    TRAD_TRADE_CURRENCY BaseCurrency1,
--                    30400003 OtherCurrency1
--                    from trtran003 left outer join trtran002
--                    on  brel_trade_reference=trad_trade_reference
--                   and trad_record_status not in (10200005,10200006)
--                    and TRAD_PRODUCT_CATEGORY=33300001
--                  and brel_record_status not in (10200005,10200006)
--                 group  by   BREL_COMPANY_CODE,TRAD_TRADE_CURRENCY,TRAD_PRODUCT_CATEGORY
--           union all
--                       select 'Hedged Exposure' status1,
--                           'Hedged Exposure' TypeOfTrans1,
--                           deal_company_code CompanyCode1,
--                           deal_backup_deal BackupDeal1,
--                             deal_backup_deal ProductCode1,
--                           round( sum(deal_base_amount/1000000),2) BaseAmount1,
--                             round( sum(deal_base_amount*deal_exchange_rate)/sum(deal_base_amount),2) ExchangeRate1,
--                            round((sum(deal_base_amount*deal_exchange_rate)/1000000),2) BaseAmountinr,
--                              deal_base_currency BaseCurrency1,
--                              Deal_other_currency OtherCurrency1
--                         from trtran001
--                        where
--                        ((deal_process_complete=12400002) or (deal_complete_date >=frmdate and deal_process_complete=12400001))
--                          --and deal_execute_date >='01-apr-2012'
--                          and deal_backup_deal=33300001
--                          and deal_record_status not in(12400005,12400006)
--                          group by deal_company_code ,deal_backup_deal,deal_base_currency,Deal_other_currency
--                       union all
--                       select 'Unhedged Exposure' Status1,
--                         'Unhedged Exposure' TypeOfTrans1,
--                              trad_company_code CompanyCode1,
--                               TRAD_PRODUCT_CATEGORY BackupDeal1,
--                           TRAD_PRODUCT_CATEGORY ProductCode1,
--                            round(sum(trad_trade_fcy/1000000),2) BaseAmount1,
--                             round(sum(trad_trade_fcy*trad_trade_rate)/sum(trad_trade_fcy),2) ExchangeRate1,
--                             round((sum(trad_trade_fcy*trad_trade_rate)/1000000),2) BaseAmountinr,
--                             trad_trade_currency BaseCurrency1,
--                             30400003 OtherCurrency1
--                             from trtran002
--                             where ((trad_process_complete=12400002) or (trad_complete_date <=frmdate and trad_process_complete=12400001))
--                                 -- and trad_entry_date >='01-apr-2012'
--                                  and TRAD_PRODUCT_CATEGORY=33300001
--                                  and trad_record_status not in (10200005,10200006)
--                                group by trad_company_code, TRAD_PRODUCT_CATEGORY,trad_trade_currency;

--     Open Gencursor For

--                 'Settelled Exposure' TypeOfTrans1,
--           select 'Settled Exposure' Status1,  'Settled Exposure' TypeOfTrans1,
--                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode1,
--                              pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
--                              round(sum(cdel_cancel_amount)/1000000,2) BaseAmount1,
--                              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2) BaseAmountinr,
--                               round(sum(cdel_cancel_amount*cdel_cancel_RATE)/ sum(cdel_cancel_amount),2) ExchangeRate1
--                      From Trtran002 A,Trtran006 B,Trtran001 C
--                                    Where A.Trad_Trade_Reference=B.Cdel_Trade_Reference
--                                    And B.Cdel_Deal_Number=C.Deal_Deal_Number
--                                    And A.Trad_Product_Category=33300001
--                                    And C.Deal_Backup_Deal=33300001
--                                    And B.Cdel_Cancel_Date Between tempDate and frmdate
--                                    And B.Cdel_Record_Status Not In(10200006,10200005)
--                                    And A.Trad_Record_Status=10200005
--                                    And B.Cdel_Trade_Reference Is Not Null
--                                     And C.Deal_Base_Currency=30400004
--
--               group by cdel_COMPANY_CODE,deal_base_CURRENCY
--             union all
--             SELECT  'Hedged Exposure' Status1, 'Hedged Exposure' TypeOfTrans1,
--                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
--                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                          round(sum(POSN_TRANSACTION_AMOUNT)/1000000,2) BaseAmount1,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ sum(POSN_TRANSACTION_AMOUNT),2) ExchangeRate1
--              from trsystem997
--              where posn_transaction_amount!=0
--              and posn_fcy_rate !=0
--              and posn_product_code=33300001
--              And Posn_Due_Date  Between Tempdate And Dattemp
--              aND posn_account_code in (25900011,25900012,25900061,25900062)
--              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE
--            Union All
--          Select 'Un Hedged Exposure' Status1, 'Un Hedged Exposure' Typeoftrans1,
--                  Unhedged.Companycode,Unhedged.Currencycode,Unhedged.Baseamount1-Hedge.Baseamount1 Baseamount1,
--                  Unhedged.Baseamountinr- Hedge.Baseamountinr Baseamountinr,
--                 Round( Round((Unhedged.Baseamountinr- Hedge.Baseamountinr),4)/Round((Unhedged.Baseamount1-Hedge.Baseamount1),4),2) Exchangerate1
--          from (Select  'Hedged Exposure' Status1, 'Hedged Exposure' Typeoftrans1,
--                          Pkgreturncursor.Fncgetdescription(Posn_Company_Code,1)  Companycode,
--                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                          Round(Sum(Posn_Transaction_Amount)/1000000,2) Baseamount1,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
--                          Round(Sum(Posn_Transaction_Amount*Posn_Fcy_Rate)/ Sum(Posn_Transaction_Amount),2) Exchangerate1
--              From Trsystem997
--              where posn_transaction_amount!=0
--              and posn_fcy_rate !=0
--              and posn_product_code=33300001
--              And Posn_Due_Date  Between Tempdate And Dattemp
--              aND posn_account_code in (25900011,25900012,25900061,25900062)
--              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Hedge ,
--            (SELECT  'Un Hedged Exposure' Status1, 'Un Hedged Exposure' TypeOfTrans1,
--                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
--                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                          Round(Sum(Posn_Transaction_Amount)/1000000,2) Baseamount1,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
--                          Round(Sum(Posn_Transaction_Amount*Posn_Fcy_Rate)/ Sum(Posn_Transaction_Amount),2) Exchangerate1
--              from trsystem997
--              where posn_transaction_amount!=0
--              and posn_fcy_rate !=0
--              and posn_product_code=33300001
--              and posn_due_date  between tempDate and datTemp
--              aND posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--                                        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--              Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code) unhedged;
--
--        Goto Process_End;
--     End If;



PKGREPORTPROGRAMS.prcreport_M_yearlyexp( frmDate ,tempDate ,datTemp );

       Open Gencursor For

      select  STATUS1,
              TYPEOFTRANS1,
              pkgreturncursor.fncgetdescription(COMPANYCODE,1)CompanyCode1,
              CURRENCYCODE,
              BASEAMOUNT1,
              frmdate as DateAsOn,
              EXCHANGERATE EXCHANGERATE1,
              ORDER1 as DisplayOrder,
              BASEAMOUNTINR
              from
              REPORT_MONTHLYREPORT_YEARLYEXP
              ORDER  BY ORDER1 asc ;

        Goto Process_End;
     End If;

--arjun ends



--if varReportID='PASTPERFORMANCEDETAILS' then
--      open GenCursor For
--
--                                select * from
--                                (select bank_local_bank BankLocalBank, pkgreturncursor.fncgetdescription(bank_local_bank,2) "LocalBank",
--                                    (bank_limit_amount)/1000000 "PPLimit", frmdate as dateason
--                                 from trtran015
--                                      where bank_limit_type =31100004
--                                      and bank_record_status not in (10200005,10200006)) limits left outer join
--                                (select pkgreturncursor.fncgetdescription(deal_company_code,1) CompanyCode,
--                                deal_counter_party  DealCounterparty ,
--                                pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
--                                     ( sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                                             GConst.UTILTRADEDEAL, GConst.AMOUNTFCY,frmdate) *
--                                              pkgforexprocess.fncGetRate(deal_base_currency,30400004,
--                               frmdate,deal_buy_sell,0,null,0) ))/1000000
--
--                                             "Utilised"
--                                from trtran001
--
--                                      where deal_record_status not in (10200005,10200006)
--                                      --added on 240114------------
--                                     -- and deal_deal_number= cdel_deal_number
--                                   ---   and deal_execute_date >='01-apr-2012'
--                                      and ((deal_process_complete=12400002) or
--                                          ((deal_complete_date is null) or (deal_complete_date > frmDate)) )
--                                      and deal_record_status not in(12400005,12400006)
--                                      --and deal_backup_deal=33300001
--                                     -- and cdel_record_status not in (12400005,12400006)
--                                      group by deal_counter_party,pkgreturncursor.fncgetdescription(deal_company_code,1)) Utilised
--
--                                      on limits.BankLocalBank= Utilised.DealCounterparty;
--  Goto Process_End;
--  End if;

 -----arjun added on 08/04/2014

 if varReportID='PASTPERFORMANCEDETAILS' then
      open GenCursor For
                  
                                select * from
                                (select bank_local_bank BankLocalBank, pkgreturncursor.fncgetdescription(bank_local_bank,2) "LocalBank",
                                    (bank_limit_amount)/1000000 "PPLimit", frmdate as dateason
                                 from trtran015
                                      where bank_limit_type =31100004
                                      and bank_record_status not in (10200005,10200006)) limits left outer join
                                (select pkgreturncursor.fncgetdescription(deal_company_code,1) CompanyCode,
                                deal_counter_party  DealCounterparty ,
                                pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
                                    nvl( ( sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
                                             GConst.UTILTRADEDEAL, GConst.AMOUNTFCY,frmdate) *
                                              pkgforexprocess.fncGetRate(deal_base_currency,30400004,
                               frmdate,deal_buy_sell,0,null,0) ))/1000000,0)
                                             
                                             "Utilised"
                                from trtran001
                                
                                      where deal_record_status not in (10200005,10200006)
                                      --added on 240114------------
                                     -- and deal_deal_number= cdel_deal_number
                                   ---   and deal_execute_date >='01-apr-2012'
                                      and ((deal_process_complete=12400002) or 
                                          ((deal_complete_date is null) or (deal_complete_date > frmDate)) )
                                      and deal_record_status not in(12400005,12400006)
                                      --and deal_backup_deal=33300001
                                     -- and cdel_record_status not in (12400005,12400006)
                                      group by deal_counter_party,pkgreturncursor.fncgetdescription(deal_company_code,1)) Utilised
                                      
                                      on limits.BankLocalBank= Utilised.DealCounterparty;
  Goto Process_End;
  End if;



--arjun ends





--  if (varReportID ='CURRENCYMOVEMENT' or  varReportID='CURRENCYMOVEMENT1') then
--
--   if varReportID='CURRENCYMOVEMENT' then
--           if (to_char(frmDate,'MM') <3) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--    --   end if;
--
--  elsif varReportID='CURRENCYMOVEMENT1' then
--
--        if (to_char(frmDate,'MM') <3) then
--
--                    tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-2);
--                    dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--                    temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-2) || '-' || to_char(to_number(to_char(frmDate,'YY'))-1);
--        else
--                    tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-1);
--                    dattemp:= '31-MAR-' || to_char(frmDate,'YYYY');
--                    temp:='FY'||to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--       end if;
--
-- end if;
--
--    open GenCursor For
--           select RateType "RateType",FYyear,monthorder,
--                  CompanyCode, MonthDate "Month", (case when  USDINR =0 then
--                   pkgforexprocess.fncGetRate(30400004,30400003,
--                               dattemp,0,0,last_day(add_months(to_date('01-' || MonthDate ),0)),0) else
--                               USDINR end) "USD/INR",  CurrencyCode "CurrencyCode", dateason
--           from
--              (select    'USD/INRCashRate' RateType   ,  temp FYyear,
--                    --to_date('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')) monthorder,
--                    to_char(d.drat_effective_date,'YYYYMM')monthorder,
--                    null as CompanyCode,
--                    to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')  as MonthDate,
--                    round(avg(drat_spot_bid+drat_spot_ask)/2,2) as USDINR,drat_currency_code CurrencyCode  ,
--                    frmdate dateason
--              from trtran012 d
--                    where drat_currency_code=30400004
--                            and drat_for_currency=30400003
--                            and drat_serial_number= (select max(drat_serial_number)
--                  from trtran012
--                  where drat_currency_code=d.drat_currency_code
--                  and drat_for_currency=d.drat_for_currency
--                  and drat_effective_date= d.drat_effective_date)
--                            and drat_effective_date between tempDate and dattemp
--                      group  by to_char(d.drat_effective_date,'YYYYMM'),
--                      --to_date ('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy') ),
--                      to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy'),drat_currency_code
--
--                   union all
--                  select      'BCCLSettled/HedgeRate' RateType  , temp fyyear,
--                              to_char(cdel_cancel_date,'YYYYMM') monthorder,
--                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode,
--                              to_char(cdel_cancel_DATE,'MON-yy') MonthDate,
--                             -- pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
--                              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/sUM(cdel_cancel_amount),2) USDINR,
--                           --   sum(cdel_cancel_amount*cdel_cancel_RATE) AmountLocal1,
--                              deal_base_CURRENCY CurrencyCode,frmdate dateason
--                      from trtran006 left outer join  trtran001
--                      on cdel_deal_number= deal_deal_number
--                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
--                        and deal_backup_deal=33300001
--                        and cdel_trade_reference is not null
--                        and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and dattemp
--                        and deal_base_currency=30400004
--                     group by cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy')
--                              -- temp ,
--                             -- to_char(to_char('31-mar-2013','dd-MON-')) || to_char(to_number(to_char('31-mar-2013','YYYY'))-1)
--             union all
--                  SELECT  'BCCLSettled/HedgeRate' RateType  , temp fyyear,
--                           to_char(posn_due_date,'YYYYMM') monthorder,
--                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
--                           to_char(posn_due_date,'MON-yy') MonthDate,
--                     --     pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/
--                                DECODE(SUM(POSN_TRANSACTION_AMOUNT),0,1,SUM(POSN_TRANSACTION_AMOUNT)),2) USDINR,
--                       --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
--                          posn_currency_code CurrencyCode,frmdate dateason
--              from trsystem997
--              where posn_transaction_amount!=0
--              and posn_fcy_rate !=0
--              and posn_product_code=33300001
--              and posn_due_date between  tempDate and dattemp
--              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                                  25900014,25900015,25900011,25900012)
--              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--                    to_char(posn_due_date,'MON-yy'), to_char(posn_due_date,'YYYYMM'))
--
--                      order by  1 ;
--
--
--    GoTo Process_End;
--    End if;

-----updates given by arjun as on 08/04/2014
-- if varReportID ='CURRENCYMOVEMENT'  then
--
--
--           if (to_char(frmDate,'MM') <=3) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--             tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--             dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--             Temp:= 'FY'|| To_Char(Frmdate,'YY') || '-' || To_Char(To_Number(To_Char(Frmdate,'YY'))+1);
--        END IF;
--
--       open GenCursor For
--        Select Ratetype "RateType",Fyyear,Monthorder,
--                  CompanyCode,to_date('01-' ||MonthDate,'dd-MON-yy') "Month",MonthDate "Monthddmm", (case when  USDINR =0.00 then
--                   pkgforexprocess.fncGetRate(30400004,30400003,
--                               Frmdate,0,0,Last_Day(Add_Months(To_Date('01-' || Monthdate ),0)),0) Else
--                               USDINR end) "USD/INR",  CurrencyCode "CurrencyCode", dateason,  Datatype
--           from
--              (
--                  SELECT  'USD/INRCashRate' RateType  , temp fyyear,
--                               to_char(posn_due_date,'YYYYMM') monthorder,
--                              Pkgreturncursor.Fncgetdescription(Posn_Company_Code,1)  Companycode,
--                               to_char(posn_due_date,'MON-yy') MonthDate,
--                         --     pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                             Round( Sum(Posn_Transaction_Amount* (Pkgforexprocess.Fncgetrate(30400004,30400003,
--                                  frmDate,25300001,0,posn_due_date)))/ Sum(Posn_Transaction_Amount),2)
--                                  USDINR,
--                           --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
--                              posn_currency_code CurrencyCode,frmdate dateason, 'Projected' Datatype
--                  from trsystem997
--                  where posn_transaction_amount!=0
--                  and posn_fcy_rate !=0
--                  and posn_product_code=33300001
--                  and posn_due_date between frmDate and dattemp
--                  aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                                      25900014,25900015,25900011,25900012)
--                  Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code,
--                        to_char(posn_due_date,'MON-yy'), to_char(posn_due_date,'YYYYMM')
--             union
--              select    'USD/INRCashRate' RateType   ,  temp FYyear,
--                    --to_date('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')) monthorder,
--                    to_char(d.drat_effective_date,'YYYYMM')monthorder,
--                    Null As Companycode,
--                    to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')  as MonthDate,
--                    Round(Avg(Drat_Spot_Bid+Drat_Spot_Ask)/2,2) As Usdinr,Drat_Currency_Code Currencycode  ,
--                    frmdate dateason,'Actual' Datatype
--              from trtran012 d
--                    where drat_currency_code=30400004
--                            and drat_for_currency=30400003
--                            and drat_serial_number= (select max(drat_serial_number)
--                  from trtran012
--                  where drat_currency_code=d.drat_currency_code
--                  and drat_for_currency=d.drat_for_currency
--                  and drat_effective_date= d.drat_effective_date)
--                            and drat_effective_date between tempDate and Frmdate
--                      group  by to_char(d.drat_effective_date,'YYYYMM'),
--                      --to_date ('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy') ),
--                       to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy'),drat_currency_code
--
--                   union all
--                  select      'BCCLSettled/HedgeRate' RateType  , temp fyyear,
--                              to_char(cdel_cancel_date,'YYYYMM') monthorder,
--                              Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,1)  Companycode,
--                              to_char(cdel_cancel_DATE,'MON-yy') MonthDate,
--                             -- pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
--
--
--                              round((sum(cdel_cancel_amount*cdel_cancel_RATE) -nvl(Pandl.Pandl,0))/sUM(cdel_cancel_amount),2) USDINR,
--                           --   sum(cdel_cancel_amount*cdel_cancel_RATE) AmountLocal1,
--                              Deal_Base_Currency Currencycode,Frmdate Dateason,'Actual' Datatype
--                       From Trtran006 B inner join Trtran002 A
--                            on A.Trad_Trade_Reference=B.Cdel_Trade_Reference
--                            inner join Trtran001 C
--                            on B.Cdel_Deal_Number=C.Deal_Deal_Number left outer join
--                              (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl
--                                from trtran006 a2, trtran001 b2
--                               where cdel_deal_number= deal_deal_number
--                                 and  deal_backup_deal=33300001
--                                 -- and to_char(a2.cdel_cancel_DATE,'MON-yy') = to_char(a1.cdel_cancel_DATE,'MON-yy')
--                                  And Cdel_Cancel_Date Between tempDate And frmdate
--                                  and deal_base_currency=30400004
--                                  and deal_other_currency =30400003
--                                  and cdel_cancel_type=27000001
--                                  Group By To_Char(Cdel_Cancel_Date,'YYYYMM') ) Pandl
--                                on PandL.MaturityMonth= to_char(cdel_cancel_DATE,'YYYYMM')
--                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
--                        and deal_backup_deal=33300001
--                        and cdel_trade_reference is not null
--                        and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and Frmdate
--                        And Deal_Base_Currency=30400004
--                        aND  A.Trad_Product_Category=33300001
--                     Group By Cdel_Company_Code,Deal_Base_Currency,To_Char(Cdel_Cancel_Date,'YYYYMM'),Pandl.Pandl,
--                             to_char(cdel_cancel_DATE,'MON-yy')
--                                              -- temp ,
--                                             -- to_char(to_char('31-mar-2013','dd-MON-')) || to_char(to_number(to_char('31-mar-2013','YYYY'))-1)
--             union all
--                  SELECT  'BCCLSettled/HedgeRate' RateType  , temp fyyear,
--                           to_char(posn_due_date,'YYYYMM') monthorder,
--                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
--                          to_char(posn_due_date,'MON-yy') MonthDate,
--                     --     pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
--                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/
--                                DECODE(SUM(POSN_TRANSACTION_AMOUNT),0,1,SUM(POSN_TRANSACTION_AMOUNT)),2) USDINR,
--                       --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
--                          posn_currency_code CurrencyCode,frmdate dateason,'Projected' Datatype
--              from trsystem997
--              where posn_transaction_amount!=0
--              and posn_fcy_rate !=0
--              and posn_product_code=33300001
--              and posn_due_date between  tempDate and dattemp
--              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                                  25900014,25900015,25900011,25900012)
--              Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code,
--                   To_Char(Posn_Due_Date,'MON-yy'), To_Char(Posn_Due_Date,'YYYYMM')
--                    )
--
--                      order by  1 ;
--
--    GoTo Process_End;
--
--
--
--  End If;


 --new update
 --updates given by arjun as on 18/04/2014
 if varReportID ='CURRENCYMOVEMENT'  then


           if (to_char(frmDate,'MM') <=3) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
             tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
             dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
             Temp:= 'FY'|| To_Char(Frmdate,'YY') || '-' || To_Char(To_Number(To_Char(Frmdate,'YY'))+1);
        END IF;

       open GenCursor For
        Select Ratetype "RateType",Fyyear,Monthorder,
                  CompanyCode,to_date('01-' ||MonthDate,'dd-MON-yy') "Month",MonthDate "Monthddmm", (case when  USDINR =0.00 then
                   pkgforexprocess.fncGetRate(30400004,30400003,
                               Frmdate,0,0,Last_Day(Add_Months(To_Date('01-' || Monthdate ),0)),0) Else
                               USDINR end) "USD/INR",  CurrencyCode "CurrencyCode", dateason,  Datatype
           from
              (
                  SELECT  'USD/INRCashRate' RateType  , temp fyyear,
                               to_char(posn_due_date,'YYYYMM') monthorder,
                              Pkgreturncursor.Fncgetdescription(Posn_Company_Code,1)  Companycode,
                               to_char(posn_due_date,'MON-yy') MonthDate,

--                             Round( Sum(Posn_Transaction_Amount* (Pkgforexprocess.Fncgetrate(30400004,30400003,
--                                  frmDate,25300001,0,posn_due_date)))/ Sum(Posn_Transaction_Amount),2)
--                                  USDINR,
                            avg(pkgforexprocess.fncgetrate(posn_currency_code,30400003,frmDate,0,0, last_day(posn_due_date),0)) USDINR,
                           --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
                              posn_currency_code CurrencyCode,frmdate dateason, 'Projected' Datatype
                  from trsystem997
                  where posn_transaction_amount!=0
                  and posn_fcy_rate !=0
                  and posn_product_code=33300001
                  and posn_due_date between frmDate and dattemp
                  aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                                      25900014,25900015,25900011,25900012)
                  Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code,
                        to_char(posn_due_date,'MON-yy'), to_char(posn_due_date,'YYYYMM')
             union
              select    'USD/INRCashRate' RateType   ,  temp FYyear,
                    --to_date('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')) monthorder,
                    to_char(d.drat_effective_date,'YYYYMM')monthorder,
                    Null As Companycode,
                    to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')  as MonthDate,
                    Round(Avg(Drat_Spot_Bid+Drat_Spot_Ask)/2,2) As Usdinr,Drat_Currency_Code Currencycode  ,
                    frmdate dateason,'Actual' Datatype
              from trtran012 d
                    where drat_currency_code=30400004
                            and drat_for_currency=30400003
                            and drat_serial_number= (select max(drat_serial_number)
                  from trtran012
                  where drat_currency_code=d.drat_currency_code
                  and drat_for_currency=d.drat_for_currency
                  and drat_effective_date= d.drat_effective_date)
                            and drat_effective_date between tempDate and Frmdate
                      group  by to_char(d.drat_effective_date,'YYYYMM'),
                      --to_date ('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy') ),
                       to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy'),drat_currency_code

                   union all
                  select      'BCCLSettled/HedgeRate' RateType  , temp fyyear,
                              to_char(cdel_cancel_date,'YYYYMM') monthorder,
                              Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,1)  Companycode,
                              to_char(cdel_cancel_DATE,'MON-yy') MonthDate,
                             -- pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,


                              round((sum(cdel_cancel_amount*cdel_cancel_RATE) -nvl(Pandl.Pandl,0))/sUM(cdel_cancel_amount),2) USDINR,
                           --   sum(cdel_cancel_amount*cdel_cancel_RATE) AmountLocal1,
                              Deal_Base_Currency Currencycode,Frmdate Dateason,'Actual' Datatype
                       From Trtran006 B inner join Trtran002 A
                            on A.Trad_Trade_Reference=B.Cdel_Trade_Reference
                            inner join Trtran001 C
                            on B.Cdel_Deal_Number=C.Deal_Deal_Number left outer join
                              (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl
                                from trtran006 a2, trtran001 b2
                               where cdel_deal_number= deal_deal_number
                                 and  deal_backup_deal=33300001
                                 -- and to_char(a2.cdel_cancel_DATE,'MON-yy') = to_char(a1.cdel_cancel_DATE,'MON-yy')
                                  And Cdel_Cancel_Date Between tempDate And frmdate
                                  and deal_base_currency=30400004
                                  and deal_other_currency =30400003
                                  and cdel_cancel_type=27000001
                                  Group By To_Char(Cdel_Cancel_Date,'YYYYMM') ) Pandl
                                on PandL.MaturityMonth= to_char(cdel_cancel_DATE,'YYYYMM')
                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
                        and deal_backup_deal=33300001
                        and cdel_trade_reference is not null
                        and cdel_cancel_type =27000002
                        and cdel_cancel_date  between tempDate and Frmdate
                        And Deal_Base_Currency=30400004
                        aND  A.Trad_Product_Category=33300001
                     Group By Cdel_Company_Code,Deal_Base_Currency,To_Char(Cdel_Cancel_Date,'YYYYMM'),Pandl.Pandl,
                             to_char(cdel_cancel_DATE,'MON-yy')
                                              -- temp ,
                                             -- to_char(to_char('31-mar-2013','dd-MON-')) || to_char(to_number(to_char('31-mar-2013','YYYY'))-1)
             union all
                  SELECT  'BCCLSettled/HedgeRate' RateType  , temp fyyear,
                           to_char(posn_due_date,'YYYYMM') monthorder,
                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
                          to_char(posn_due_date,'MON-yy') MonthDate,
                     --     pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/
                                DECODE(SUM(POSN_TRANSACTION_AMOUNT),0,1,SUM(POSN_TRANSACTION_AMOUNT)),2) USDINR,
                       --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
                          posn_currency_code CurrencyCode,frmdate dateason,'Projected' Datatype
              from trsystem997
              where posn_transaction_amount!=0
              and posn_fcy_rate !=0
              and posn_product_code=33300001
              and posn_due_date between  tempDate and dattemp
              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                                  25900014,25900015,25900011,25900012)
              Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code,
                   To_Char(Posn_Due_Date,'MON-yy'), To_Char(Posn_Due_Date,'YYYYMM')
                    )

                      order by  1 ;

    GoTo Process_End;

    end if;




  if varReportID='CURRENCYMOVEMENT1' then

        if (to_char(frmDate,'MM') <=3) then

                    tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-2);
                    dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
                    temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-2) || '-' || to_char(to_number(to_char(frmDate,'YY'))-1);
        else
                    tempDate:= '01-apr-' ||to_char(to_number(to_char(frmDate,'YYYY'))-1);
                    dattemp:= '31-MAR-' || to_char(frmDate,'YYYY');
                    Temp:='FY'||To_Char(To_Number(To_Char(Frmdate,'YY'))-1) || '-' || To_Char(Frmdate,'YY');
       End If;

      Frmdate :=  dattemp;


          open GenCursor For
        Select Ratetype "RateType",Fyyear,Monthorder,
                  CompanyCode,to_date('01-' ||MonthDate,'dd-MON-yy') "Month",MonthDate "Monthddmm", (case when  USDINR =0.00 then
                   pkgforexprocess.fncGetRate(30400004,30400003,
                               Frmdate,0,0,Last_Day(Add_Months(To_Date('01-' || Monthdate ),0)),0) Else
                               USDINR end) "USD/INR",  CurrencyCode "CurrencyCode", dateason,  Datatype
           from
              (
                  SELECT  'USD/INRCashRate' RateType  , temp fyyear,
                               to_char(posn_due_date,'YYYYMM') monthorder,
                              Pkgreturncursor.Fncgetdescription(Posn_Company_Code,1)  Companycode,
                               to_char(posn_due_date,'MON-yy') MonthDate,
                         --     pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
                             Round( Sum(Posn_Transaction_Amount* (Pkgforexprocess.Fncgetrate(30400004,30400003,
                                  frmDate,25300001,0,posn_due_date)))/ Sum(Posn_Transaction_Amount),2)
                                  USDINR,
                           --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
                              posn_currency_code CurrencyCode,frmdate dateason, 'Projected' Datatype
                  from trsystem997
                  where posn_transaction_amount!=0
                  and posn_fcy_rate !=0
                  and posn_product_code=33300001
                  and posn_due_date between frmDate and dattemp
                  aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                                      25900014,25900015,25900011,25900012)
                  Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code,
                        to_char(posn_due_date,'MON-yy'), to_char(posn_due_date,'YYYYMM')
             union
              select    'USD/INRCashRate' RateType   ,  temp FYyear,
                    --to_date('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')) monthorder,
                    to_char(d.drat_effective_date,'YYYYMM')monthorder,
                    Null As Companycode,
                    to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy')  as MonthDate,
                    Round(Avg(Drat_Spot_Bid+Drat_Spot_Ask)/2,2) As Usdinr,Drat_Currency_Code Currencycode  ,
                    frmdate dateason,'Actual' Datatype
              from trtran012 d
                    where drat_currency_code=30400004
                            and drat_for_currency=30400003
                            and drat_serial_number= (select max(drat_serial_number)
                  from trtran012
                  where drat_currency_code=d.drat_currency_code
                  and drat_for_currency=d.drat_for_currency
                  and drat_effective_date= d.drat_effective_date)
                            and drat_effective_date between tempDate and Frmdate
                      group  by to_char(d.drat_effective_date,'YYYYMM'),
                      --to_date ('01-' || to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy') ),
                       to_char(d.drat_effective_date,'MON') || '-'|| to_char(d.drat_effective_date,'yy'),drat_currency_code

                   union all
                  select      'BCCLSettled/HedgeRate' RateType  , temp fyyear,
                              to_char(cdel_cancel_date,'YYYYMM') monthorder,
                              Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,1)  Companycode,
                              to_char(cdel_cancel_DATE,'MON-yy') MonthDate,
                             -- pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,


                              round((sum(cdel_cancel_amount*cdel_cancel_RATE))/sUM(cdel_cancel_amount),2) USDINR,
                           --   sum(cdel_cancel_amount*cdel_cancel_RATE) AmountLocal1,
                              Deal_Base_Currency Currencycode,Frmdate Dateason,'Actual' Datatype
                       From Trtran006 B inner join Trtran002 A
                            on A.Trad_Trade_Reference=B.Cdel_Trade_Reference
                            inner join Trtran001 C
                            on B.Cdel_Deal_Number=C.Deal_Deal_Number
                       where   cdel_RECORD_STATUS not in(10200005,10200006 )
                        and deal_backup_deal=33300001
                        and cdel_trade_reference is not null
                        and cdel_cancel_type =27000002
                        And Cdel_Cancel_Date  Between Tempdate And Frmdate
                        And Deal_Base_Currency=30400004
                        aND  A.Trad_Product_Category=33300001
                     Group By Cdel_Company_Code,Deal_Base_Currency,To_Char(Cdel_Cancel_Date,'YYYYMM'),
                             to_char(cdel_cancel_DATE,'MON-yy')
                                              -- temp ,
                                             -- to_char(to_char('31-mar-2013','dd-MON-')) || to_char(to_number(to_char('31-mar-2013','YYYY'))-1)
             union all
                  SELECT  'BCCLSettled/HedgeRate' RateType  , temp fyyear,
                           to_char(posn_due_date,'YYYYMM') monthorder,
                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
                          to_char(posn_due_date,'MON-yy') MonthDate,
                     --     pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/
                                DECODE(SUM(POSN_TRANSACTION_AMOUNT),0,1,SUM(POSN_TRANSACTION_AMOUNT)),2) USDINR,
                       --    sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
                          posn_currency_code CurrencyCode,frmdate dateason,'Projected' Datatype
              from trsystem997
              where posn_transaction_amount!=0
              and posn_fcy_rate !=0
              and posn_product_code=33300001
              and posn_due_date between  tempDate and dattemp
              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                                  25900014,25900015,25900011,25900012)
              Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code,
                   To_Char(Posn_Due_Date,'MON-yy'), To_Char(Posn_Due_Date,'YYYYMM')
                    )

                      order by  1 ;

    Goto Process_End;

 End If;


    ----


--   If varReportID='HEDGESTATUSREPORT' THEN
--
--    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--
--    PRCCALCULATEGAPEXPOSURE(frmDate,1);
--
--
--   Open Gencursor For
--                                                      select  to_char(to_date(frmDate),'dd-MM-yyyy') as FromDate,
--                        to_char(to_date(frmDate),'dd-MM-yyyy') as ToDate,
--                        sysdate as SystemDate,
--                        pkgreturnreport.getCompanyName('SK123') as CompanyName,
--                        DisplayOrder, TransType, ProductCode,SubProductCode,
--                         pkgreturncursor.fncgetdescription(ProductCode,2) Product,
--                         pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct,
--                         pkgreturncursor.fncgetdescription(Company,2) Company,
--                         pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
--                  Forward1 ,
--                  Forward2 ,
--                  Forward3 ,
--                  Forward4 ,
--                  Forward5 ,
--                  Forward6 ,
--                  Forward7 ,
--                  Forward8 ,
--                  Forward9 ,
--                  Forward10 ,
--                  Forward11 ,
--                  Forward12,
--                 (case when (TransType='Exposure') or (TransType='Hedged') or (TransType='Unhedged Exposure') or (TransType='Addt Cover Against Policy ') Then
--                 (Forward1+Forward2+Forward3+Forward4+Forward5+Forward6+Forward7+Forward8+Forward9+Forward10+Forward11+Forward12 )
--                  when (TransType=' % Hedged') then
--                         fncGetHedgePercent(frmDate,'OUTSTANDING',ProductCode,SubProductCode,CurrencyCode)
--
--                 when instr(TransType, '% Hedge - Policy') >0 then
--                    RISK_LIMIT_PERCENT
--                 when (TransType='Hedging Rate') then
--                          fncgethedgeingrateavg(frmDate,'OUTSTANDING',ProductCode,SubProductCode,CurrencyCode)
--                   else null
--                   end ) as Total, RISK_LIMIT_PERCENT  || ( case when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then
--                                                     ' - ' ||  RISK_FLUCT_ALLOWED || ' %' else ' %' end) LimitRange,
--                 RISK_LIMIT_PERCENT LimitPercent,
--                 RISK_FLUCT_ALLOWED FluctAllowed
--           from (
--    select 1 DisplayOrder,'Exposure' TransType,
--                 HEDG_PRODUCT_CODE ProductCode,
--                 HEDG_SUBPRODUCT_CODE SubProductCode,
--                 HEDG_COMPANY_CODE Company,
--                 HEDG_CURRENCY_CODE CurrencyCode,
--                 HEDG_MON_Forward1/1000000 Forward1,
--                 HEDG_MON_Forward2/1000000 Forward2,
--                 HEDG_MON_Forward3/1000000 Forward3,
--                 HEDG_MON_Forward4/1000000 Forward4,
--                 HEDG_MON_Forward5/1000000 Forward5,
--                 HEDG_MON_Forward6/1000000 Forward6,
--                 HEDG_MON_Forward7/1000000 Forward7,
--                 HEDG_MON_Forward8/1000000 Forward8,
--                 HEDG_MON_Forward9/1000000 Forward9,
--                 HEDG_MON_Forward10/1000000 Forward10,
--                 HEDG_MON_Forward11/1000000 Forward11,
--                 HEDG_MON_Forward12/1000000 Forward12
--         from trsystem970
--         where hedg_exposure_type in ('Import','Export')  and HEDG_CALCULATION_TYPE='OUTSTANDING'
--          and HEDG_DATE_ASON=frmDate
--       union all
--           select 2 DisplayOrder,'Hedged' TransType,
--                HEDG_PRODUCT_CODE ProductCode,
--                HEDG_SUBPRODUCT_CODE SubProductCode,
--                 HEDG_COMPANY_CODE  Company,
--                  HEDG_CURRENCY_CODE  CurrencyCode,
--                 HEDG_MON_Forward1/1000000 Forward1,
--                 HEDG_MON_Forward2/1000000 Forward2,
--                 HEDG_MON_Forward3/1000000 Forward3,
--                 HEDG_MON_Forward4/1000000 Forward4,
--                 HEDG_MON_Forward5/1000000 Forward5,
--                 HEDG_MON_Forward6/1000000 Forward6,
--                 HEDG_MON_Forward7/1000000 Forward7,
--                 HEDG_MON_Forward8/1000000 Forward8,
--                 HEDG_MON_Forward9/1000000 Forward9,
--                 HEDG_MON_Forward10/1000000 Forward10,
--                 HEDG_MON_Forward11/1000000 Forward11,
--                 HEDG_MON_Forward12/1000000 Forward12
--        from trsystem970
--         where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--         and HEDG_DATE_ASON=frmDate
--       union All
--        select 4 DisplayOrder,'Hedging Rate' TransType,
--                  HEDG_PRODUCT_CODE  ProductCode,
--                  HEDG_SUBPRODUCT_CODE  SubProductCode,
--                  HEDG_COMPANY_CODE  Company,
--                  HEDG_CURRENCY_CODE  CurrencyCode,
--                 HEDG_BENCHMARK_RATE1 Forward1,
--                 hedg_benchmark_rate2 Forward2,
--                 hedg_benchmark_rate3 Forward3,
--                 hedg_benchmark_rate4 Forward4,
--                 hedg_benchmark_rate5 Forward5,
--                 hedg_benchmark_rate6 Forward6,
--                 hedg_benchmark_rate7 Forward7,
--                 hedg_benchmark_rate8 Forward8,
--                 HEDG_BENCHMARK_RATE9 Forward9,
--                 hedg_benchmark_rate10 Forward10,
--                 hedg_benchmark_rate11 Forward11,
--                 HEDG_BENCHMARK_RATE12 Forward12
--        from trsystem970
--        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--        and HEDG_DATE_ASON=frmDate
--     union all
--         select 3 DisplayOrder,' % Hedged' TransType,
--                nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
--                nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
--                nvl(Exposure.Company,Hedge.Company) Company ,
--                nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
--                (case when(exposure.Forward1 is null ) or (exposure.Forward1=0) then 0
--                else (round(hedge.Forward1/nvl(exposure.Forward1,1),2))end)*100  Forward1,
--                (case when(exposure.Forward2 is null ) or (exposure.Forward2=0) then 0
--                else (round(hedge.Forward2/nvl(exposure.Forward2,1),2))end)*100  Forward2,
--                (case when(exposure.Forward3 is null ) or (exposure.Forward3=0) then 0
--                else (round(hedge.Forward3/nvl(exposure.Forward3,1),2))end)*100  Forward3,
--                (case when(exposure.Forward4 is null ) or (exposure.Forward4=0) then 0
--                else (round(hedge.Forward4/nvl(exposure.Forward4,1),2))end)*100  Forward4,
--                (case when(exposure.Forward5 is null ) or (exposure.Forward5=0) then 0
--                else (round(hedge.Forward5/nvl(exposure.Forward5,1),2))end)*100  Forward5,
--                (case when(exposure.Forward6 is null ) or (exposure.Forward6=0) then 0
--                else (round(hedge.Forward6/nvl(exposure.Forward6,1),2))end)*100  Forward6,
--                (case when(exposure.Forward7 is null ) or (exposure.Forward7=0) then 0
--                else (round(hedge.Forward7/nvl(exposure.Forward7,1),2))end)*100  Forward7,
--                (case when(exposure.Forward8 is null ) or (exposure.Forward8=0) then 0
--                else (round(hedge.Forward8/nvl(exposure.Forward8,1),2))end)*100  Forward8,
--                (case when(exposure.Forward9 is null ) or (exposure.Forward9=0) then 0
--                else (round(hedge.Forward9/nvl(exposure.Forward9,1),2))end)*100  Forward9,
--                (case when(exposure.Forward10 is null ) or (exposure.Forward10=0) then 0
--                else (round(hedge.Forward10/nvl(exposure.Forward10,1),2))end)*100  Forward10,
--                (case when(exposure.Forward11 is null ) or (exposure.Forward11=0) then 0
--                else (round(hedge.Forward11/nvl(exposure.Forward11,1),2))end)*100  Forward11,
--                (case when(exposure.Forward12 is null ) or (exposure.Forward12=0) then 0
--                else (round(hedge.Forward12/nvl(exposure.Forward12,1),2))end)*100  Forward12
--        from  (select  HEDG_PRODUCT_CODE  ProductCode,
--                  HEDG_SUBPRODUCT_CODE  SubProductCode,
--                  HEDG_COMPANY_CODE  Company,
--                  HEDG_CURRENCY_CODE  CurrencyCode,
--                 HEDG_MON_Forward1 Forward1,
--                 HEDG_MON_Forward2 Forward2,
--                 HEDG_MON_Forward3 Forward3,
--                 HEDG_MON_Forward4 Forward4,
--                 HEDG_MON_Forward5 Forward5,
--                 HEDG_MON_Forward6 Forward6,
--                 HEDG_MON_Forward7 Forward7,
--                 HEDG_MON_Forward8 Forward8,
--                 HEDG_MON_Forward9 Forward9,
--                 HEDG_MON_Forward10 Forward10,
--                 HEDG_MON_Forward11 Forward11,
--                 HEDG_MON_Forward12 Forward12
--        from trsystem970
--        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--        and HEDG_DATE_ASON=frmDate) Hedge full outer join
--         (select HEDG_PRODUCT_CODE  ProductCode,
--                 HEDG_SUBPRODUCT_CODE  SubProductCode,
--                 HEDG_COMPANY_CODE  Company,
--                 HEDG_CURRENCY_CODE  CurrencyCode,
--                 HEDG_MON_Forward1 Forward1,
--                 HEDG_MON_Forward2 Forward2,
--                 HEDG_MON_Forward3 Forward3,
--                 HEDG_MON_Forward4 Forward4,
--                 HEDG_MON_Forward5 Forward5,
--                 HEDG_MON_Forward6 Forward6,
--                 HEDG_MON_Forward7 Forward7,
--                 HEDG_MON_Forward8 Forward8,
--                 HEDG_MON_Forward9 Forward9,
--                 HEDG_MON_Forward10 Forward10,
--                 HEDG_MON_Forward11 Forward11,
--                 HEDG_MON_Forward12 Forward12
--        from trsystem970
--         where hedg_exposure_type in ('Import','Export') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--         and HEDG_DATE_ASON=frmDate) Exposure
--         on Hedge.ProductCode= Exposure.ProductCode
--           and Hedge.SubProductCode= Exposure.SubProductCode
--           and Hedge.Company= Exposure.Company
--           and Hedge.CurrencyCode= Exposure.CurrencyCode
--          -- order by Product,SubProduct,Company, Currency,DisplayOrder
--      union all
--          select 5 DisplayOrder,'% Hedge - Policy ( '|| fncGetRiskLimits(21000017,HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE) || ')' TransType,
--            HEDG_PRODUCT_CODE  ProductCode,
--            HEDG_SUBPRODUCT_CODE  SubProductCode,
--            HEDG_COMPANY_CODE  Company,
--            HEDG_CURRENCY_CODE  CurrencyCode,
--                 Hpolicy Forward1, Hpolicy Forward2,Hpolicy Forward3,
--                 Hpolicy Forward4,Hpolicy Forward5,Hpolicy Forward6,
--                 Hpolicy Forward7,Hpolicy Forward8,Hpolicy Forward9,
--                 Hpolicy Forward10,Hpolicy Forward11, Hpolicy Forward12
--         from (select distinct HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
--                      HEDG_CURRENCY_CODE,( select RISK_LIMIT_PERCENT
--                              from trsystem012
--                             where risk_risk_type=21000017
--                               and risk_product_code=HEDG_PRODUCT_CODE
--                               and risk_subproduct_code=HEDG_SUBPRODUCT_CODE) Hpolicy
--               from  trsystem970
--               where hedg_exposure_type in('Import','Export')
--                and HEDG_CALCULATION_TYPE='OUTSTANDING'
--                and HEDG_DATE_ASON=frmDate)d
--
--     union all
--
--
--        select 8 DisplayOrder,'Unhedged Exposure' TransType,
--                 nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
--                 nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
--                 nvl(Exposure.Company,Hedge.Company) Company ,
--                 nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
--                 (nvl(exposure.Forward1,0)- nvl(hedge.Forward1,0))/1000000 Forward1,
--                 (nvl(exposure.Forward2,0)- nvl(hedge.Forward2,0))/1000000 Forward2,
--                 (nvl(exposure.Forward3,0)- nvl(hedge.Forward3,0))/1000000 Forward3,
--                 (nvl(exposure.Forward4,0)- nvl(hedge.Forward4,0))/1000000 Forward4,
--                 (nvl(exposure.Forward5,0)- nvl(hedge.Forward5,0))/1000000 Forward5,
--                 (nvl(exposure.Forward6,0)- nvl(hedge.Forward6,0))/1000000 Forward6,
--                 (nvl(exposure.Forward7,0)- nvl(hedge.Forward7,0))/1000000 Forward7,
--                 (nvl(exposure.Forward8,0)- nvl(hedge.Forward8,0))/1000000 Forward8,
--                 (nvl(exposure.Forward9,0)- nvl(hedge.Forward9,0))/1000000 Forward9,
--                 (nvl(exposure.Forward10,0)- nvl(hedge.Forward10,0))/1000000 Forward10,
--                 (nvl(exposure.Forward11,0)- nvl(hedge.Forward11,0))/1000000 Forward11,
--                 (nvl(exposure.Forward12,0)- nvl(hedge.Forward12,0))/1000000 Forward12
--        from  (select  HEDG_PRODUCT_CODE  ProductCode,
--                  HEDG_SUBPRODUCT_CODE  SubProductCode,
--                  HEDG_COMPANY_CODE  Company,
--                  HEDG_CURRENCY_CODE  CurrencyCode,
--                 HEDG_MON_Forward1 Forward1,
--                 HEDG_MON_Forward2 Forward2,
--                 HEDG_MON_Forward3 Forward3,
--                 HEDG_MON_Forward4 Forward4,
--                 HEDG_MON_Forward5 Forward5,
--                 HEDG_MON_Forward6 Forward6,
--                 HEDG_MON_Forward7 Forward7,
--                 HEDG_MON_Forward8 Forward8,
--                 HEDG_MON_Forward9 Forward9,
--                 HEDG_MON_Forward10 Forward10,
--                 HEDG_MON_Forward11 Forward11,
--                 HEDG_MON_Forward12 Forward12
--        from trsystem970
--        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--        and HEDG_DATE_ASON=frmDate) Hedge full outer join
--         (select  HEDG_PRODUCT_CODE  ProductCode,
--                  HEDG_SUBPRODUCT_CODE  SubProductCode,
--                  HEDG_COMPANY_CODE  Company,
--                  HEDG_CURRENCY_CODE  CurrencyCode,
--                 decode(HEDG_MON_Forward1,0,1,HEDG_MON_Forward1) Forward1,
--                 decode(HEDG_MON_Forward2,0,1,HEDG_MON_Forward2) Forward2,
--                 decode(HEDG_MON_Forward3,0,1,HEDG_MON_Forward3) Forward3,
--                 decode(HEDG_MON_Forward4,0,1,HEDG_MON_Forward4) Forward4,
--                 decode(HEDG_MON_Forward5,0,1,HEDG_MON_Forward5) Forward5,
--                 decode(HEDG_MON_Forward6,0,1,HEDG_MON_Forward6) Forward6,
--                 decode(HEDG_MON_Forward7,0,1,HEDG_MON_Forward7) Forward7,
--                 decode(HEDG_MON_Forward8,0,1,HEDG_MON_Forward8) Forward8,
--                 decode(HEDG_MON_Forward9,0,1,HEDG_MON_Forward9) Forward9,
--                 decode(HEDG_MON_Forward10,0,1,HEDG_MON_Forward10) Forward10,
--                 decode(HEDG_MON_Forward11,0,1,HEDG_MON_Forward11) Forward11,
--                 decode(HEDG_MON_Forward12,0,1,HEDG_MON_Forward12) Forward12
--        from trsystem970
--         where hedg_exposure_type in ('Import','Export') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--         and HEDG_DATE_ASON=frmDate) Exposure
--         on  Hedge.ProductCode= Exposure.ProductCode
--           and Hedge.SubProductCode= Exposure.SubProductCode
--           and Hedge.Company= Exposure.Company
--           and Hedge.CurrencyCode= Exposure.CurrencyCode
--
--     union all
--
--         select   7 DisplayOrder,'Addt Cover Against Policy ' TransType,
--                 HedgePer.ProductCode, HedgePer.SubProductCode, HedgePer.Company,
--                 HedgePer.CurrencyCode,
--                 ((HedgePer.Forward1-Hpolicy.Forward1)* Exposure.Forward1)/100000000 Forward1,
--                 ((HedgePer.Forward2-Hpolicy.Forward2)* Exposure.Forward2)/100000000 Forward2,
--                 ((HedgePer.Forward3-Hpolicy.Forward3)* Exposure.Forward3)/100000000 Forward3,
--                 ((HedgePer.Forward4-Hpolicy.Forward4)* Exposure.Forward4)/100000000 Forward4,
--                 ((HedgePer.Forward5-Hpolicy.Forward5)* Exposure.Forward5)/100000000 Forward5,
--                 ((HedgePer.Forward6-Hpolicy.Forward6)* Exposure.Forward6)/100000000 Forward6,
--                 ((HedgePer.Forward7-Hpolicy.Forward7)* Exposure.Forward7)/100000000 Forward7,
--                 ((HedgePer.Forward8-Hpolicy.Forward8)* Exposure.Forward8)/100000000 Forward8,
--                 ((HedgePer.Forward9-Hpolicy.Forward9)* Exposure.Forward9)/100000000 Forward9,
--                 ((HedgePer.Forward10-Hpolicy.Forward10)* Exposure.Forward10)/100000000 Forward10,
--                 ((HedgePer.Forward11-Hpolicy.Forward11)* Exposure.Forward12)/100000000 Forward11,
--                 ((HedgePer.Forward12-Hpolicy.Forward12)* Exposure.Forward12)/100000000 Forward12
--            from
--            (select 8 DisplayOrder,'Hedging %' TransType,
--                    nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
--                    nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
--                    nvl(Exposure.Company,Hedge.Company) Company ,
--                    nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
--                     (case when(hedge.forward1 is null) then 0
--                    else ( round(hedge.Forward1/nvl(exposure.Forward1,1),2))end)*100 Forward1,
--                     (case when(hedge.forward2 is null) then 0
--                    else ( round(hedge.Forward2/nvl(exposure.Forward2,1),2)) end)*100 Forward2,
--                     (case when(hedge.forward3 is null) then 0
--                    else ( round(hedge.Forward3/nvl(exposure.Forward3,1),2)) end)*100 Forward3,
--                     (case when(hedge.forward4 is null) then 0
--                    else ( round(hedge.Forward4/nvl(exposure.Forward4,1),2)) end)*100 Forward4,
--                     (case when(hedge.forward5 is null) then 0
--                    else ( round(hedge.Forward5/nvl(exposure.Forward5,1),2)) end)*100 Forward5,
--                     (case when(hedge.forward6 is null) then 0
--                    else ( round(hedge.Forward6/nvl(exposure.Forward6,1),2)) end)*100 Forward6,
--                     (case when(hedge.forward7 is null) then 0
--                    else ( round(hedge.Forward7/nvl(exposure.Forward7,1),2)) end)*100 Forward7,
--                     (case when(hedge.forward8 is null) then 0
--                    else ( round(hedge.Forward8/nvl(exposure.Forward8,1),2)) end)*100 Forward8,
--                     (case when(hedge.forward9 is null) then 0
--                    else ( round(hedge.Forward9/nvl(exposure.Forward9,1),2)) end)*100 Forward9,
--                     (case when(hedge.forward10 is null) then 0
--                    else ( round(hedge.Forward10/nvl(exposure.Forward10,1),2)) end)*100 Forward10,
--                     (case when(hedge.forward11 is null) then 0
--                    else ( round(hedge.Forward11/nvl(exposure.Forward11,1),2)) end)*100 Forward11,
--                     (case when(hedge.forward12 is null) then 0
--                    else ( round(hedge.Forward12/nvl(exposure.Forward12,1),2)) end)*100 Forward12
--            from  (select  HEDG_PRODUCT_CODE  ProductCode,
--                      HEDG_SUBPRODUCT_CODE  SubProductCode,
--                      HEDG_COMPANY_CODE  Company,
--                      HEDG_CURRENCY_CODE  CurrencyCode,
--                     HEDG_MON_Forward1 Forward1,
--                     HEDG_MON_Forward2 Forward2,
--                     HEDG_MON_Forward3 Forward3,
--                     HEDG_MON_Forward4 Forward4,
--                     HEDG_MON_Forward5 Forward5,
--                     HEDG_MON_Forward6 Forward6,
--                     HEDG_MON_Forward7 Forward7,
--                     HEDG_MON_Forward8 Forward8,
--                     HEDG_MON_Forward9 Forward9,
--                     HEDG_MON_Forward10 Forward10,
--                     HEDG_MON_Forward11 Forward11,
--                     HEDG_MON_Forward12 Forward12
--            from trsystem970
--            where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--            and HEDG_DATE_ASON=frmDate) Hedge full outer join
--             (select  HEDG_PRODUCT_CODE  ProductCode,
--                      HEDG_SUBPRODUCT_CODE  SubProductCode,
--                      HEDG_COMPANY_CODE  Company,
--                      HEDG_CURRENCY_CODE  CurrencyCode,
--                     decode(HEDG_MON_Forward1,0,1,HEDG_MON_Forward1) Forward1,
--                     decode(HEDG_MON_Forward2,0,1,HEDG_MON_Forward2) Forward2,
--                     decode(HEDG_MON_Forward3,0,1,HEDG_MON_Forward3) Forward3,
--                     decode(HEDG_MON_Forward4,0,1,HEDG_MON_Forward4) Forward4,
--                     decode(HEDG_MON_Forward5,0,1,HEDG_MON_Forward5) Forward5,
--                     decode(HEDG_MON_Forward6,0,1,HEDG_MON_Forward6) Forward6,
--                     decode(HEDG_MON_Forward7,0,1,HEDG_MON_Forward7) Forward7,
--                     decode(HEDG_MON_Forward8,0,1,HEDG_MON_Forward8) Forward8,
--                     decode(HEDG_MON_Forward9,0,1,HEDG_MON_Forward9) Forward9,
--                     decode(HEDG_MON_Forward10,0,1,HEDG_MON_Forward10) Forward10,
--                     decode(HEDG_MON_Forward11,0,1,HEDG_MON_Forward11) Forward11,
--                     decode(HEDG_MON_Forward12,0,1,HEDG_MON_Forward12) Forward12
--            from trsystem970
--             where hedg_exposure_type in ('Import','Export') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--             and HEDG_DATE_ASON=frmDate) Exposure
--             on Hedge.ProductCode= Exposure.ProductCode
--               and Hedge.SubProductCode= Exposure.SubProductCode
--               and Hedge.Company= Exposure.Company
--               and Hedge.CurrencyCode= Exposure.CurrencyCode) HedgePer inner join
--        (select 5 DisplayOrder,'% Hedge - Policy' TransType,
--            HEDG_PRODUCT_CODE  ProductCode,
--            HEDG_SUBPRODUCT_CODE  SubProductCode,
--            HEDG_COMPANY_CODE  Company,
--            HEDG_CURRENCY_CODE  CurrencyCode,
--                 Hpolicy Forward1, Hpolicy Forward2,Hpolicy Forward3,
--                 Hpolicy Forward4,Hpolicy Forward5,Hpolicy Forward6,
--                 Hpolicy Forward7,Hpolicy Forward8,Hpolicy Forward9,
--                 Hpolicy Forward10,Hpolicy Forward11, Hpolicy Forward12
--          from (select distinct HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
--                      HEDG_CURRENCY_CODE,( select RISK_LIMIT_PERCENT
--                              from trsystem012
--                             where risk_risk_type=21000017
--                               and risk_product_code=HEDG_PRODUCT_CODE
--                               and risk_subproduct_code=HEDG_SUBPRODUCT_CODE) Hpolicy
--               from  trsystem970
--               where hedg_exposure_type in('Import','Export')
--                and HEDG_CALCULATION_TYPE='OUTSTANDING')) HPolicy
--               on HedgePer.ProductCode= HPolicy.ProductCode
--               and HedgePer.SubProductCode= HPolicy.SubProductCode
--               and HedgePer.Company= HPolicy.Company
--               and HedgePer.CurrencyCode= HPolicy.CurrencyCode
--           inner join
--             ( select 1 DisplayOrder,'Exposure' TransType,
--                 HEDG_PRODUCT_CODE ProductCode,
--                 HEDG_SUBPRODUCT_CODE SubProductCode,
--                 HEDG_COMPANY_CODE Company,
--                 HEDG_CURRENCY_CODE CurrencyCode,
--                 HEDG_MON_Forward1 Forward1,
--                 HEDG_MON_Forward2 Forward2,
--                 HEDG_MON_Forward3 Forward3,
--                 HEDG_MON_Forward4 Forward4,
--                 HEDG_MON_Forward5 Forward5,
--                 HEDG_MON_Forward6 Forward6,
--                 HEDG_MON_Forward7 Forward7,
--                 HEDG_MON_Forward8 Forward8,
--                 HEDG_MON_Forward9 Forward9,
--                 HEDG_MON_Forward10 Forward10,
--                 HEDG_MON_Forward11 Forward11,
--                 HEDG_MON_Forward12 Forward12
--         from trsystem970
--         where hedg_exposure_type in('Import','Export') and HEDG_CALCULATION_TYPE='OUTSTANDING'
--          and HEDG_DATE_ASON=frmDate) Exposure
--             on HedgePer.ProductCode= Exposure.ProductCode
--               and HedgePer.SubProductCode= Exposure.SubProductCode
--               and HedgePer.Company= Exposure.Company
--               and HedgePer.CurrencyCode= Exposure.CurrencyCode
--               )d  left outer join trsystem012
--          on risk_risk_type=21000017
--         and risk_product_code=ProductCode
--         and risk_subproduct_code=SubProductCode
--         order by productCode,subproductCode
--               ;
--
--
-- Goto Process_End;
--  end if;

----arjun added on 08/04/2014

           If varReportID='HEDGESTATUSREPORT' THEN  
          
           --   numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;   
                
            --  PRCCALCULATEGAPEXPOSURE(frmDate,1);
              
              --delete from report_hedgestatus;
              
              PKGREPORTPROGRAMS.prcHedgeStatusReportPopulate(varUserID,frmDate,33399999,33899999);
              finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
              finalCondition:= replace(finalCondition,'DEAL_BACKUP_DEAL','ProductCode');
              finalCondition:= replace(finalCondition,'DEAL_INIT_CODE','SubProductCode');
              finalCondition:= replace(finalCondition,'POSN_DUE_DATE', 'to_date('||''''||frmDate||''''||',''dd-MON-RRRR'')');
              
              --finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
             Query_Str :='select  to_char(to_date('||''''||frmDate||''''||'),''dd-MON-yy'') as FromDate,
                              --   to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as FromDate,
                                  to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as ToDate,
                                  '||''''||sysdate||''''||' as SystemDate,
                                  pkgreturnreport.getCompanyName(''SK123'') as CompanyName,
                                  DisplayOrder, TransType, ProductCode,SubProductCode,
                                   pkgreturncursor.fncgetdescription(ProductCode,2) Product,
                                   pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct, 
                                   pkgreturncursor.fncgetdescription(Company,2) Company, 
                                   pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
                             nvl (Forward1,0) Forward1,
                             nvl (Forward2,0) Forward2 ,
                             nvl (Forward3,0) Forward3 ,
                             nvl (Forward4,0) Forward4 ,
                             nvl (Forward5,0) Forward5 ,
                             nvl (Forward6,0) Forward6 ,
                             nvl (Forward7,0) Forward7 , 
                             nvl (Forward8,0) Forward8 ,
                             nvl (Forward9,0) Forward9 ,
                             nvl (Forward10,0) Forward10 ,
                             nvl (Forward11,0) Forward11 ,
                             nvl (Forward12,0) Forward12 , 
                             nvl (Total,0) Total,
                            LimitRange,LimitPercent,FluctAllowed
                           -- '||varGroupfield||'
                     from  report_hedgestatus
                     where 1=1 
                      '||finalcondition||'';                            
          
                                  delete from temp;commit; 
                                  insert into temp values(Query_Str,finalCondition);
                                  commit;
             OPEN GenCursor for Query_Str||finalCondition || ' order by pkgreturncursor.fncgetdescription(ProductCode,2),
                                                                       pkgreturncursor.fncgetdescription(SubProductCode,2)'  ;
          Goto Process_End; 
          end if;


-----arjun ends

 -- arjun modifed on 09-06-2014 ------
  If varReportID='HEDGESTATUSUSDBUCKETING' THEN
  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;   
      
    Pkgreportprograms.Prccalculategapexposure(Frmdate,4,33399999,33899999);
    
  
   Open Gencursor For
             select  to_char(to_date(frmDate),'dd-MM-yyyy') as FromDate,
                        to_char(to_date(frmDate),'dd-MM-yyyy') as ToDate,
                        sysdate as SystemDate,
                        pkgreturnreport.getCompanyName('SK123') as CompanyName,
                        DisplayOrder, TransType, ProductCode,SubProductCode,
                         pkgreturncursor.fncgetdescription(ProductCode,2) Product,
                         pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct, 
                         pkgreturncursor.fncgetdescription(Company,2) Company, 
                         pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
                  Forward1 ,
                  Forward2 , 
                  Forward3 ,
                  Forward4 ,
                  Forward5 ,
                  Forward6 ,
                  Forward7 ,
                  Forward8 ,
                  Forward9 ,
                  Forward10 ,
                  Forward11 ,
                  Forward12, 
                 (case when (TransType='Exposure') or (TransType='Hedged') or (TransType='Unhedged Exposure (100%)') or (TransType='Addt Cover Against Policy (60%)') Then 
                 round((Forward1+Forward2+Forward3+Forward4+Forward5+Forward6+Forward7+Forward8+Forward9+Forward10+Forward11+Forward12 ),2)
                  when (TransType=' % Hedged') then
                         fncGetHedgePercent(frmDate,'USDEquivalent',ProductCode,SubProductCode,CurrencyCode)
                         
                 when instr(TransType, '% Hedge - Policy') >0 then 
                    RISK_LIMIT_PERCENT
                  when (TransType='Hedged Rate') then 
                          fncgethedgeingrateavg(frmDate,'USDEquivalent',ProductCode,SubProductCode,CurrencyCode)
                 else null end ) as Total,
                 RISK_LIMIT_PERCENT LimitPercent, 
                 RISK_FLUCT_ALLOWED FluctAllowed                                                    
           from (
    select 1 DisplayOrder,'Exposure' TransType,
                 HEDG_PRODUCT_CODE ProductCode,
                 HEDG_SUBPRODUCT_CODE SubProductCode,
                 HEDG_COMPANY_CODE Company,
                 HEDG_CURRENCY_CODE CurrencyCode,
                 round(HEDG_MON_Forward1/1000000,2) Forward1,
                 round(HEDG_MON_Forward2/1000000,2) Forward2,
                 round(HEDG_MON_Forward3/1000000,2) Forward3,
                 round(HEDG_MON_Forward4/1000000,2) Forward4,
                 round(HEDG_MON_Forward5/1000000,2) Forward5,
                 round(HEDG_MON_Forward6/1000000,2) Forward6,
                 round(HEDG_MON_Forward7/1000000,2) Forward7,
                 round(HEDG_MON_Forward8/1000000,2) Forward8,
                 round(HEDG_MON_Forward9/1000000,2) Forward9,
                 round(HEDG_MON_Forward10/1000000,2) Forward10,
                 round(HEDG_MON_Forward11/1000000,2) Forward11,
                 round(HEDG_MON_Forward12/1000000,2) Forward12
         from trsystem970
         where hedg_exposure_type in ('Import','Export')  and HEDG_CALCULATION_TYPE='USDEquivalent'
          and HEDG_DATE_ASON=frmDate
       union all 
           select 2 DisplayOrder,'Hedged' TransType, 
                HEDG_PRODUCT_CODE ProductCode,
                HEDG_SUBPRODUCT_CODE SubProductCode,
                 HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 round(HEDG_MON_Forward1/1000000,2) Forward1,
                 round(HEDG_MON_Forward2/1000000,2) Forward2,
                 round(HEDG_MON_Forward3/1000000,2) Forward3,
                 round(HEDG_MON_Forward4/1000000,2) Forward4,
                 round(HEDG_MON_Forward5/1000000,2) Forward5,
                 round(HEDG_MON_Forward6/1000000,2) Forward6,
                 round(HEDG_MON_Forward7/1000000,2) Forward7,
                 round(HEDG_MON_Forward8/1000000,2) Forward8,
                 round(HEDG_MON_Forward9/1000000,2) Forward9,
                 round(HEDG_MON_Forward10/1000000,2) Forward10,
                 round(HEDG_MON_Forward11/1000000,2) Forward11,
                 round(HEDG_MON_Forward12/1000000,2) Forward12
        from trsystem970
         where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
         and HEDG_DATE_ASON=frmDate
       union All 
        select 4 DisplayOrder,'Hedged Rate' TransType,  
                  HEDG_PRODUCT_CODE  ProductCode,
                  HEDG_SUBPRODUCT_CODE  SubProductCode,
                  HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 HEDG_BENCHMARK_RATE1 Forward1,
                 hedg_benchmark_rate2 Forward2,
                 hedg_benchmark_rate3 Forward3,
                 hedg_benchmark_rate4 Forward4,
                 hedg_benchmark_rate5 Forward5,
                 hedg_benchmark_rate6 Forward6,
                 hedg_benchmark_rate7 Forward7,
                 hedg_benchmark_rate8 Forward8,
                 HEDG_BENCHMARK_RATE9 Forward9,
                 hedg_benchmark_rate10 Forward10,
                 hedg_benchmark_rate11 Forward11,
                 HEDG_BENCHMARK_RATE12 Forward12
        from trsystem970
        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
        and HEDG_DATE_ASON=frmDate
     union all
         select 3 DisplayOrder,' % Hedged' TransType,
                nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
                nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
                nvl(Exposure.Company,Hedge.Company) Company ,
                nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
                (case when(exposure.Forward1 is null ) or (exposure.Forward1=0) then 0 
                else (round(hedge.Forward1/nvl(exposure.Forward1,1),2))end)*100  Forward1,
                (case when(exposure.Forward2 is null ) or (exposure.Forward2=0) then 0
                else (round(hedge.Forward2/nvl(exposure.Forward2,1),2))end)*100  Forward2,
                (case when(exposure.Forward3 is null ) or (exposure.Forward3=0) then 0
                else (round(hedge.Forward3/nvl(exposure.Forward3,1),2))end)*100  Forward3,
                (case when(exposure.Forward4 is null ) or (exposure.Forward4=0) then 0
                else (round(hedge.Forward4/nvl(exposure.Forward4,1),2))end)*100  Forward4,
                (case when(exposure.Forward5 is null ) or (exposure.Forward5=0) then 0
                else (round(hedge.Forward5/nvl(exposure.Forward5,1),2))end)*100  Forward5,
                (case when(exposure.Forward6 is null ) or (exposure.Forward6=0) then 0
                else (round(hedge.Forward6/nvl(exposure.Forward6,1),2))end)*100  Forward6,
                (case when(exposure.Forward7 is null ) or (exposure.Forward7=0) then 0
                else (round(hedge.Forward7/nvl(exposure.Forward7,1),2))end)*100  Forward7,
                (case when(exposure.Forward8 is null ) or (exposure.Forward8=0) then 0
                else (round(hedge.Forward8/nvl(exposure.Forward8,1),2))end)*100  Forward8,
                (case when(exposure.Forward9 is null ) or (exposure.Forward9=0) then 0
                else (round(hedge.Forward9/nvl(exposure.Forward9,1),2))end)*100  Forward9,
                (case when(exposure.Forward10 is null ) or (exposure.Forward10=0) then 0
                else (round(hedge.Forward10/nvl(exposure.Forward10,1),2))end)*100  Forward10,
                (case when(exposure.Forward11 is null ) or (exposure.Forward11=0) then 0
                else (round(hedge.Forward11/nvl(exposure.Forward11,1),2))end)*100  Forward11,
                (case when(exposure.Forward12 is null ) or (exposure.Forward12=0) then 0
                else (round(hedge.Forward12/nvl(exposure.Forward12,1),2))end)*100  Forward12
        from  (select  HEDG_PRODUCT_CODE  ProductCode,
                  HEDG_SUBPRODUCT_CODE  SubProductCode,
                  HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 HEDG_MON_Forward1 Forward1,
                 HEDG_MON_Forward2 Forward2,
                 HEDG_MON_Forward3 Forward3,
                 HEDG_MON_Forward4 Forward4,
                 HEDG_MON_Forward5 Forward5,
                 HEDG_MON_Forward6 Forward6,
                 HEDG_MON_Forward7 Forward7,
                 HEDG_MON_Forward8 Forward8,
                 HEDG_MON_Forward9 Forward9,
                 HEDG_MON_Forward10 Forward10,
                 HEDG_MON_Forward11 Forward11,
                 HEDG_MON_Forward12 Forward12
        from trsystem970
        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
        and HEDG_DATE_ASON=frmDate) Hedge full outer join
         (select HEDG_PRODUCT_CODE  ProductCode,
                 HEDG_SUBPRODUCT_CODE  SubProductCode,
                 HEDG_COMPANY_CODE  Company,
                 HEDG_CURRENCY_CODE  CurrencyCode,
                 HEDG_MON_Forward1 Forward1,
                 HEDG_MON_Forward2 Forward2,
                 HEDG_MON_Forward3 Forward3,
                 HEDG_MON_Forward4 Forward4,
                 HEDG_MON_Forward5 Forward5,
                 HEDG_MON_Forward6 Forward6,
                 HEDG_MON_Forward7 Forward7,
                 HEDG_MON_Forward8 Forward8,
                 HEDG_MON_Forward9 Forward9,
                 HEDG_MON_Forward10 Forward10,
                 HEDG_MON_Forward11 Forward11,
                 HEDG_MON_Forward12 Forward12
        from trsystem970
         where hedg_exposure_type in ('Import','Export') and HEDG_CALCULATION_TYPE='USDEquivalent'
         and HEDG_DATE_ASON=frmDate) Exposure
         on Hedge.ProductCode= Exposure.ProductCode
          -- and Hedge.SubProductCode= Exposure.SubProductCode
           and Hedge.Company= Exposure.Company
           and Hedge.CurrencyCode= Exposure.CurrencyCode
          -- order by Product,SubProduct,Company, Currency,DisplayOrder
      union all          
    select 5 DisplayOrder,'% Hedge - Policy ( '|| fncGetRiskLimits(21000017,HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,frmdate) || ')' TransType, 
            HEDG_PRODUCT_CODE  ProductCode, 
            HEDG_SUBPRODUCT_CODE  SubProductCode,
            HEDG_COMPANY_CODE  Company,
            HEDG_CURRENCY_CODE  CurrencyCode,
                 Hpolicy Forward1, Hpolicy Forward2,Hpolicy Forward3,
                 Hpolicy Forward4,Hpolicy Forward5,Hpolicy Forward6,
                 Hpolicy Forward7,Hpolicy Forward8,Hpolicy Forward9,
                 Hpolicy Forward10,Hpolicy Forward11, Hpolicy Forward12
         from (select distinct HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
                      HEDG_CURRENCY_CODE,( select avg( RISK_LIMIT_PERCENT )
                              from trsystem012
                             where risk_risk_type=21000017
                             and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=HEDG_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
                               and risk_product_code=HEDG_PRODUCT_CODE) Hpolicy 
               from  trsystem970
               where hedg_exposure_type in('Import','Export') 
                and HEDG_CALCULATION_TYPE='USDEquivalent'
                and HEDG_DATE_ASON=frmDate)d    
  
     union all
     
               select 6 DisplayOrder,'Hedge Rate Monthwise' TransType, 
            HEDG_PRODUCT_CODE  ProductCode,
            HEDG_SUBPRODUCT_CODE  SubProductCode,
            HEDG_COMPANY_CODE  Company,
            HEDG_CURRENCY_CODE  CurrencyCode,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),0)),0) Forward1,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),1)),0) Forward2,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),2) ),0) Forward3,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),3)),0) Forward4,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),4)),0) Forward5,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),5)),0) Forward6,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),6)),0) Forward7,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),7)),0) Forward8,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),8)),0) Forward9,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),9)),0) Forward10,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),10)),0) Forward11,
                 pkgforexprocess.fncGetRate(HEDG_CURRENCY_CODE,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),11)),0) Forward12                              

         from (select distinct HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
                      HEDG_CURRENCY_CODE,( select risk_fluct_ceo 
                              from trsystem012
                             where risk_risk_type=21000017
                               and risk_product_code=HEDG_PRODUCT_CODE
                               and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=HEDG_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
                                                                  )
                               and risk_subproduct_code=HEDG_SUBPRODUCT_CODE) Hpolicy 
               from  trsystem970
               where hedg_exposure_type in('Import','Export') 
                and HEDG_CALCULATION_TYPE='USDEquivalent'
                and HEDG_DATE_ASON=frmDate)
        union all
        select 8 DisplayOrder,'Unhedged Exposure (100%)' TransType,
                 nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
                 nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
                 nvl(Exposure.Company,Hedge.Company) Company ,
                 nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
                 round((nvl(exposure.Forward1,0)- nvl(hedge.Forward1,0))/1000000,2) Forward1,
                 round((nvl(exposure.Forward2,0)- nvl(hedge.Forward2,0))/1000000,2) Forward2,
                 round((nvl(exposure.Forward3,0)- nvl(hedge.Forward3,0))/1000000,2) Forward3,
                 round((nvl(exposure.Forward4,0)- nvl(hedge.Forward4,0))/1000000,2) Forward4,
                 round((nvl(exposure.Forward5,0)- nvl(hedge.Forward5,0))/1000000,2) Forward5,
                 round((nvl(exposure.Forward6,0)- nvl(hedge.Forward6,0))/1000000,2) Forward6,
                 round((nvl(exposure.Forward7,0)- nvl(hedge.Forward7,0))/1000000,2) Forward7,
                 round((nvl(exposure.Forward8,0)- nvl(hedge.Forward8,0))/1000000,2) Forward8,
                 round((nvl(exposure.Forward9,0)- nvl(hedge.Forward9,0))/1000000,2) Forward9,
                 round((nvl(exposure.Forward10,0)- nvl(hedge.Forward10,0))/1000000,2) Forward10,
                 round((nvl(exposure.Forward11,0)- nvl(hedge.Forward11,0))/1000000,2) Forward11,
                 round((nvl(exposure.Forward12,0)- nvl(hedge.Forward12,0))/1000000,2) Forward12
        from  (select  HEDG_PRODUCT_CODE  ProductCode,
                  HEDG_SUBPRODUCT_CODE  SubProductCode,
                  HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 HEDG_MON_Forward1 Forward1,
                 HEDG_MON_Forward2 Forward2,
                 HEDG_MON_Forward3 Forward3,
                 HEDG_MON_Forward4 Forward4,
                 HEDG_MON_Forward5 Forward5,
                 HEDG_MON_Forward6 Forward6,
                 HEDG_MON_Forward7 Forward7,
                 HEDG_MON_Forward8 Forward8,
                 HEDG_MON_Forward9 Forward9,
                 HEDG_MON_Forward10 Forward10,
                 HEDG_MON_Forward11 Forward11,
                 HEDG_MON_Forward12 Forward12
        from trsystem970
        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
        and HEDG_DATE_ASON=frmDate) Hedge full outer join 
         (select  HEDG_PRODUCT_CODE  ProductCode,
                  HEDG_SUBPRODUCT_CODE  SubProductCode,
                  HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 decode(HEDG_MON_Forward1,0,1,HEDG_MON_Forward1) Forward1,
                 decode(HEDG_MON_Forward2,0,1,HEDG_MON_Forward2) Forward2,
                 decode(HEDG_MON_Forward3,0,1,HEDG_MON_Forward3) Forward3,
                 decode(HEDG_MON_Forward4,0,1,HEDG_MON_Forward4) Forward4,
                 decode(HEDG_MON_Forward5,0,1,HEDG_MON_Forward5) Forward5,
                 decode(HEDG_MON_Forward6,0,1,HEDG_MON_Forward6) Forward6,
                 decode(HEDG_MON_Forward7,0,1,HEDG_MON_Forward7) Forward7,
                 decode(HEDG_MON_Forward8,0,1,HEDG_MON_Forward8) Forward8,
                 decode(HEDG_MON_Forward9,0,1,HEDG_MON_Forward9) Forward9,
                 decode(HEDG_MON_Forward10,0,1,HEDG_MON_Forward10) Forward10,
                 decode(HEDG_MON_Forward11,0,1,HEDG_MON_Forward11) Forward11,
                 decode(HEDG_MON_Forward12,0,1,HEDG_MON_Forward12) Forward12
        from trsystem970
         where hedg_exposure_type in ('Import','Export') and HEDG_CALCULATION_TYPE='USDEquivalent'
         and HEDG_DATE_ASON=frmDate) Exposure
         on  Hedge.ProductCode= Exposure.ProductCode
         --  and Hedge.SubProductCode= Exposure.SubProductCode
           and Hedge.Company= Exposure.Company
           and Hedge.CurrencyCode= Exposure.CurrencyCode
           
     union all
     
         select   7 DisplayOrder,'Addt Cover Against Policy (60%)' TransType,
                 HedgePer.ProductCode, HedgePer.SubProductCode, HedgePer.Company,
                 HedgePer.CurrencyCode,
                 ((Hpolicy.Forward1-HedgePer.Forward1)* Exposure.Forward1)/100000000 Forward1,
                 ((Hpolicy.Forward2-HedgePer.Forward2)* Exposure.Forward2)/100000000 Forward2,
                 ((Hpolicy.Forward3-HedgePer.Forward3)* Exposure.Forward3)/100000000 Forward3,
                 ((Hpolicy.Forward4-HedgePer.Forward4)* Exposure.Forward4)/100000000 Forward4,
                 ((Hpolicy.Forward5-HedgePer.Forward5)* Exposure.Forward5)/100000000 Forward5,
                 ((Hpolicy.Forward6-HedgePer.Forward6)* Exposure.Forward6)/100000000 Forward6,
                 ((Hpolicy.Forward7-HedgePer.Forward7)* Exposure.Forward7)/100000000 Forward7,
                 ((Hpolicy.Forward8-HedgePer.Forward8)* Exposure.Forward8)/100000000 Forward8,
                 ((Hpolicy.Forward9-HedgePer.Forward9)* Exposure.Forward9)/100000000 Forward9,
                 ((Hpolicy.Forward10-HedgePer.Forward10)* Exposure.Forward10)/100000000 Forward10,
                 ((Hpolicy.Forward11-HedgePer.Forward11)* Exposure.Forward12)/100000000 Forward11,
                 ((Hpolicy.Forward12-HedgePer.Forward12)* Exposure.Forward12)/100000000 Forward12
            from 
            (select 8 DisplayOrder,'Hedging %' TransType,
                    nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
                    nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
                    nvl(Exposure.Company,Hedge.Company) Company ,
                    nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
                     (case when(hedge.forward1 is null) then 0
                    else ( round(hedge.Forward1/nvl(exposure.Forward1,1),2))end)*100 Forward1,
                     (case when(hedge.forward2 is null) then 0
                    else ( round(hedge.Forward2/nvl(exposure.Forward2,1),2)) end)*100 Forward2,
                     (case when(hedge.forward3 is null) then 0
                    else ( round(hedge.Forward3/nvl(exposure.Forward3,1),2)) end)*100 Forward3,
                     (case when(hedge.forward4 is null) then 0
                    else ( round(hedge.Forward4/nvl(exposure.Forward4,1),2)) end)*100 Forward4,
                     (case when(hedge.forward5 is null) then 0
                    else ( round(hedge.Forward5/nvl(exposure.Forward5,1),2)) end)*100 Forward5,
                     (case when(hedge.forward6 is null) then 0
                    else ( round(hedge.Forward6/nvl(exposure.Forward6,1),2)) end)*100 Forward6,
                     (case when(hedge.forward7 is null) then 0
                    else ( round(hedge.Forward7/nvl(exposure.Forward7,1),2)) end)*100 Forward7,
                     (case when(hedge.forward8 is null) then 0
                    else ( round(hedge.Forward8/nvl(exposure.Forward8,1),2)) end)*100 Forward8,
                     (case when(hedge.forward9 is null) then 0
                    else ( round(hedge.Forward9/nvl(exposure.Forward9,1),2)) end)*100 Forward9,
                     (case when(hedge.forward10 is null) then 0
                    else ( round(hedge.Forward10/nvl(exposure.Forward10,1),2)) end)*100 Forward10,
                     (case when(hedge.forward11 is null) then 0
                    else ( round(hedge.Forward11/nvl(exposure.Forward11,1),2)) end)*100 Forward11,
                     (case when(hedge.forward12 is null) then 0
                    else ( round(hedge.Forward12/nvl(exposure.Forward12,1),2)) end)*100 Forward12
            from  (select  HEDG_PRODUCT_CODE  ProductCode,
                      HEDG_SUBPRODUCT_CODE  SubProductCode,
                      HEDG_COMPANY_CODE  Company,
                      HEDG_CURRENCY_CODE  CurrencyCode,
                     HEDG_MON_Forward1 Forward1,
                     HEDG_MON_Forward2 Forward2,
                     HEDG_MON_Forward3 Forward3,
                     HEDG_MON_Forward4 Forward4,
                     HEDG_MON_Forward5 Forward5,
                     HEDG_MON_Forward6 Forward6,
                     HEDG_MON_Forward7 Forward7,
                     HEDG_MON_Forward8 Forward8,
                     HEDG_MON_Forward9 Forward9,
                     HEDG_MON_Forward10 Forward10,
                     HEDG_MON_Forward11 Forward11,
                     HEDG_MON_Forward12 Forward12
            from trsystem970
            where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
            and HEDG_DATE_ASON=frmDate) Hedge full outer join
             (select  HEDG_PRODUCT_CODE  ProductCode,
                      HEDG_SUBPRODUCT_CODE  SubProductCode,
                      HEDG_COMPANY_CODE  Company,
                      HEDG_CURRENCY_CODE  CurrencyCode,
                     decode(HEDG_MON_Forward1,0,1,HEDG_MON_Forward1) Forward1,
                     decode(HEDG_MON_Forward2,0,1,HEDG_MON_Forward2) Forward2,
                     decode(HEDG_MON_Forward3,0,1,HEDG_MON_Forward3) Forward3,
                     decode(HEDG_MON_Forward4,0,1,HEDG_MON_Forward4) Forward4,
                     decode(HEDG_MON_Forward5,0,1,HEDG_MON_Forward5) Forward5,
                     decode(HEDG_MON_Forward6,0,1,HEDG_MON_Forward6) Forward6,
                     decode(HEDG_MON_Forward7,0,1,HEDG_MON_Forward7) Forward7,
                     decode(HEDG_MON_Forward8,0,1,HEDG_MON_Forward8) Forward8,
                     decode(HEDG_MON_Forward9,0,1,HEDG_MON_Forward9) Forward9,
                     decode(HEDG_MON_Forward10,0,1,HEDG_MON_Forward10) Forward10,
                     decode(HEDG_MON_Forward11,0,1,HEDG_MON_Forward11) Forward11,
                     decode(HEDG_MON_Forward12,0,1,HEDG_MON_Forward12) Forward12
            from trsystem970
             where hedg_exposure_type in ('Import','Export') and HEDG_CALCULATION_TYPE='USDEquivalent'
             and HEDG_DATE_ASON=frmDate) Exposure
             on Hedge.ProductCode= Exposure.ProductCode
             --  and Hedge.SubProductCode= Exposure.SubProductCode
               and Hedge.Company= Exposure.Company
               and Hedge.CurrencyCode= Exposure.CurrencyCode) HedgePer inner join 
        ( select 5 DisplayOrder,'% Hedge - Policy ( '|| fncGetRiskLimits(21000017,HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,frmdate) || ')' TransType, 
            HEDG_PRODUCT_CODE  ProductCode, 
            HEDG_SUBPRODUCT_CODE  SubProductCode,
            HEDG_COMPANY_CODE  Company,
            HEDG_CURRENCY_CODE  CurrencyCode,
                 Hpolicy Forward1, Hpolicy Forward2,Hpolicy Forward3,
                 Hpolicy Forward4,Hpolicy Forward5,Hpolicy Forward6,
                 Hpolicy Forward7,Hpolicy Forward8,Hpolicy Forward9,
                 Hpolicy Forward10,Hpolicy Forward11, Hpolicy Forward12
         from (select distinct HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
                      HEDG_CURRENCY_CODE,( select avg( RISK_LIMIT_PERCENT )
                              from trsystem012
                             where risk_risk_type=21000017
                             and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=HEDG_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                               -- and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
                                                                  )
                               and risk_product_code=HEDG_PRODUCT_CODE) Hpolicy 
               from  trsystem970
               where hedg_exposure_type in('Import','Export') 
                and HEDG_CALCULATION_TYPE='USDEquivalent'
                and HEDG_DATE_ASON=frmDate)) HPolicy      
               on HedgePer.ProductCode= HPolicy.ProductCode
            --   and HedgePer.SubProductCode= HPolicy.SubProductCode
               and HedgePer.Company= HPolicy.Company
               and HedgePer.CurrencyCode= HPolicy.CurrencyCode
           inner join 
             ( select 1 DisplayOrder,'Exposure' TransType,
                 HEDG_PRODUCT_CODE ProductCode,
                 HEDG_SUBPRODUCT_CODE SubProductCode,
                 HEDG_COMPANY_CODE Company,
                 HEDG_CURRENCY_CODE CurrencyCode,
                 HEDG_MON_Forward1 Forward1,
                 HEDG_MON_Forward2 Forward2,
                 HEDG_MON_Forward3 Forward3,
                 HEDG_MON_Forward4 Forward4,
                 HEDG_MON_Forward5 Forward5,
                 HEDG_MON_Forward6 Forward6,
                 HEDG_MON_Forward7 Forward7,
                 HEDG_MON_Forward8 Forward8,
                 HEDG_MON_Forward9 Forward9,
                 HEDG_MON_Forward10 Forward10,
                 HEDG_MON_Forward11 Forward11,
                 HEDG_MON_Forward12 Forward12
         from trsystem970
         where hedg_exposure_type in('Import','Export') and HEDG_CALCULATION_TYPE='USDEquivalent' 
          and HEDG_DATE_ASON=frmDate) Exposure
             on HedgePer.ProductCode= Exposure.ProductCode
           --    and HedgePer.SubProductCode= Exposure.SubProductCode
               and HedgePer.Company= Exposure.Company
               and HedgePer.CurrencyCode= Exposure.CurrencyCode
               )d  left outer join (select avg( RISK_LIMIT_PERCENT) RISK_LIMIT_PERCENT, 
                                           avg(RISK_FLUCT_ALLOWED) RISK_FLUCT_ALLOWED,
                                           risk_product_code
                                      from   trsystem012 a
                                    where risk_risk_type=21000017
                                        and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012 b
                                                                where  
                                                                risk_risk_type=21000017
                                                                  and b.risk_product_code= a.risk_product_code
                                                                 and b.risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
                                    group by risk_product_code)  
          on risk_product_code=ProductCode
      --   and risk_subproduct_code=SubProductCode
         order by productCode,subproductCode
               ;

               
               


Goto Process_End;   
  end if;   --- arjun end here  -----------------------


--- Arjun Modifed on 12-Jun-2014  -----

if  varReportID ='HEDGEDEALSPOTM2MREPORT' then
    -- here fncgetoutstanding is used to get the actual amount on 19-may-09

    Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterParty,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,DEAL_USER_REFERENCE as BnkREf,
                        deal_maturity_from as FrmDueDate,deal_maturity_date  as DueDate,
                        deal_spot_rate as FcyRate,
                        deal_base_amount BaseAmount,
                        DEAL_EXCHANGE_RATE NetRate,
                        DEAL_SPOT_RATE AS Spot,
                        DEAL_FORWARD_RATE AS Forward,
                        DEAL_MARGIN_RATE as Margin,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))*deal_spot_rate as FCR,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))*DEAL_EXCHANGE_RATE as FCP,
                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,'||''''||frmDate||''''||') * deal_exchange_rate )  as InrValue,
                        round(pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,'||''''||frmDate||''''||',DEAL_BUY_SELL,0,null,0),4)as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,'||''''||frmDate||''''||',DEAL_BUY_SELL,0,null,0))) as WashRate,
                        ((pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,'||''''||frmDate||''''||',DEAL_BUY_SELL,0,null,0))
                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,'||''''||frmDate||''''||'))) as RevalueInr,
                        0 as PositionInr,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter, ';

    Query_Str1 :=      ' pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BackupDeal,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdiscr ,
                        decode(deal_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade
                        ' || varGroupField || '
                from    trtran001
                where   --deal_hedge_trade = 26000001 and
                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
                        --hedg_deal_serial = deal_serial_number and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                     ';

                        delete from temp;commit;
                        insert into temp values(Query_Str,finalCondition);commit;
--                      (deal_complete_date is null or
--                      deal_complete_date > '||''''||frmDate||''''||') ';
     --   insert into temp values(Query_Str,finalCondition);commit;
    OPEN GenCursor for Query_Str || Query_Str1 ||finalCondition||' order by pkgreturncursor.fncgetdescription(deal_base_currency,2),
                                                             pkgreturncursor.fncgetdescription(deal_other_currency,2),
                                                             deal_maturity_date ' ;


    Goto Process_End;
  end if;


------  Arjun  end here -----------------


    --------------------------//    \\----------------------------------------------------------


--       if  varReportID= 'DEALCONSOLIDATION'   then
--
--     OPEN GenCursor for
--
--                select    DealNumber,ExecuteDate,Status,SystemDate,CompanyName,CancelDate,CancelRate,CancelAmount,
--		          BaseCurrency, OtherCurrency,BaseAmount,ExchangeRate,ValueDate,ChangeDate,EnhancedFcy,EnhancedRate,
--			  ProfitLoss,WashRate,NetAmount,Bank,'' BuySell,'' CancelType,MaturityDate,0 M2mRate,'' CBuySell,
--                          frmDate as AsonDate
--		from
--		(
--		  ----hedge cncellation
--		  select  deal_deal_number as DealNumber,deal_execute_date as ExecuteDate,'HC' status,
--                          pkgReturnCursor.fncGetDescription(deal_base_currency,2) as BaseCurrency,
--                          pkgReturnCursor.fncGetDescription(deal_other_currency,2) as OtherCurrency,
--                          deal_base_amount as BaseAmount,deal_exchange_rate as ExchangeRate,
--                          deal_maturity_date as ValueDate,
--			  sysdate as ChangeDate,0 as EnhancedRate,0 as EnhancedFcy,
--			  CDEL_CANCEL_DATE as CancelDate , CDEL_CANCEL_RATE as CancelRate,
--			  CDEL_CANCEL_AMOUNT as CancelAmount,
--			  round((CDEL_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,CDEL_LOCAL_RATE))),4)  as ProfitLoss,
--			  CDEL_LOCAL_RATE as  WashRate,
--                          CDEL_PROFIT_LOSS as NetAmount,
--                          pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
--			  sysdate  as MaturityDate,
--                          pkgreturnreport.GetSystemDate() as SystemDate,
--                           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                  from    trtran001,trtran006
--                 where    cdel_deal_number = deal_deal_number
--		  and     cdel_deal_serial = deal_serial_number
--
--		  and     cdel_deal_type in(26000001)
--		  and     CDEL_CANCEL_DATE = frmDate
--              union
--	        --- hedge roll
--           	select  deal_deal_number as DealNumber,deal_execute_date as ExecuteDate,'HR' status,
--                        pkgReturnCursor.fncGetDescription(deal_base_currency,2) as BaseCurrency,
--                        pkgReturnCursor.fncGetDescription(deal_other_currency,2) as OtherCurrency,
--                        deal_base_amount as BaseAmount,deal_exchange_rate as ExchangeRate,
--                        deal_maturity_date as ValueDate,
--                        lmod_change_date as ChangeDate,
--                        lmod_enhanced_rate as EnhancedRate,lmod_enhanced_fcy as EnhancedFcy,
--			sysdate as CancelDate, 0 as  CancelRate , 0 as  CancelAmount,
--                        --0 as ProfitLoss,
--		        round((LMOD_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,lmod_local_rate))),4)  as ProfitLoss,
--                        LMOD_LOCAL_RATE  as WashRate,
--                        LMOD_PROFIT_LOSS as NetAmount,
--			--0 as NetAmount,
--                        pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
--			sysdate  as MATURITYDATE,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                from    trtran001,trtran009
--                where   lmod_reference_number = deal_deal_number
--                   and  lmod_reference_serial = deal_serial_number
--                   and  deal_hedge_trade = 26000001
--                   and  lmod_reference_number not in(select cdel_deal_number from trtran006)
--		   and  deal_record_status not in(gconst.statusdeleted,gconst.statusinactive,gconst.STATUSPOSTCANCEL)
--	      union
--		       --- hedge outstanding
--	         select DEAL_DEAL_NUMBER AS DealNumber,DEAL_EXECUTE_DATE AS ExecuteDate,'HO' status,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
--			PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),1) AS BaseAmount,
--			PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER),2) as ExchangeRate,
--			sysdate  as ValueDate,sysdate  as ChangeDate,0 as EnhancedRate,0 as EnhancedFcy,
--			sysdate as CancelDate, 0 as  CancelRate , 0 as  CancelAmount,
--                        0 as ProfitLoss,0 as WashRate,0 as NetAmount,
--                        pkgReturnCursor.fncGetDescription(deal_counter_Party,2) as Bank,
--                        PKGRETURNCURSOR.fncRollover((select deal_DEAL_NUMBER from trtran001  where deal_deal_number = HEDG_DEAL_NUMBER)) AS MATURITYDATE,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--         		 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                  FROM TRTRAN001 ,TRTRAN004
--		 WHERE  HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER
--                   and  hedg_deal_serial = deal_serial_number
--		   and  DEAL_record_status IN(gconst.STATUSENTRY,gconst.STATUSAUTHORIZED,gconst.STATUSUPDATED)
--                   and  deal_maturity_date > frmDate
--                   and  deal_process_complete = gconst.OPTIONNO
--                   and (deal_complete_date  is null
--                        or deal_complete_date > frmDate )
--		   and  DEAL_DEAL_TYPE  in (26000001)) H
--		              --hedge completes here
--        union
--
--	    select  DealNumber,ExecuteDate,status,SystemDate,CompanyName,CancelDate,CancelRate,CancelAmount,
--	            ' ' BaseCurrency,' ' OtherCurrency,BaseAmount,0 ExchangeRate, sysdate ValueDate,
--		    sysdate ChangeDate, 0 EnhancedFcy,0 EnhancedRate, ProfitLoss,WashRate,  NetAmount,' ' Bank,
--		    BuySell,CancelType, MaturityDate,M2mRate,decode(BuySell,'Buy','Sale','Buy') as CBuySell,
--                    frmDate as AsonDate
--	      from (          ---trade cancellation
--		    select  CDEL_DEAL_NUMBER as DealNumber,DEAL_EXECUTE_DATE AS ExecuteDate,'TC' status,
--		            pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BuySell,
--                            decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) as BaseAmount,
--                            CDEL_CANCEL_RATE  as CancelRate, CDEL_CANCEL_AMOUNT as CancelAmount,
--			    CDEL_CANCEL_DATE as CancelDate,DEAL_MATURITY_DATE AS MaturityDate,
--			    0 M2mRate,Cdel_local_rate as WashRate,
--			    --(case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
--                            --(abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
--                            (cdel_profit_loss/Cdel_local_rate) as ProfitLoss,
--                            pkgreturnreport.GetSystemDate() as SystemDate,
--                            pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as CancelType,
--                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                            cdel_profit_loss as NetAmount
--                     from   trtran001,trtran006
--                    where   cdel_deal_number  = deal_deal_number
--                      and   cdel_deal_serial  = deal_serial_number
--		     and    CDEL_CANCEL_DATE = frmDate
--                      and   DEAL_HEDGE_TRADE in(26000002)
--		 union
--	           ---trade outstanding
--		   select   deal_deal_number as DealNumber,deal_execute_date AS ExecuteDate,'TO' status,
--                            pkgreturncursor.fncgetdescription(deal_buy_sell,1) AS BuySell,
--                            decode(deal_other_currency,30400003,deal_other_amount,deal_amount_local) as BaseAmount,
--                            0   as CancelRate,0 as CancelAmount, sysdate as CancelDate,
--			    deal_maturity_date AS MaturityDate,
--			    pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,deal_execute_date,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date)),null) as M2mRate,
--                            decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, deal_execute_date, deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,frmDate,deal_maturity_date),null,0)) as WashRate,
--                            pkgreturnreport.fncgetprofitloss(DEAL_OTHER_AMOUNT, nvl(decode(deal_other_currency,30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003, deal_execute_date, deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,frmDate,deal_maturity_date),null,0)),1),DEAL_EXCHANGE_RATE,DEAL_LOCAL_RATE,1,DEAL_OTHER_CURRENCY,DEAL_BUY_SELL) as ProfitLoss,
--			    pkgreturnreport.GetSystemDate() as SystemDate,
--			    ' ' as CancelType,
--                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                            0 as NetAmount
--	             from  trtran001,trtran006
--	            where  DEAL_HEDGE_TRADE in(gconst.TRADEDEAL)
--                     and   DEAL_record_status NOT IN(gconst.statusdeleted,gconst.statusinactive)
--                     and   deal_maturity_date > frmDate
--                     and   deal_process_complete = gconst.OPTIONNO
--                     and  (deal_complete_date is null  or
--                           deal_complete_date > frmDate)
--		     order by 3,1)T;
--
--         open NextCursor for
--         select sum(First) "1 st Quater",sum(Second) as "2 nd Quater", sum(Third) as "3 rd Quater", sum(Fourth) as "4 th Quater"
--         from
--         (select  nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),1,CDEL_PROFIT_LOSS )),0) First
--						,nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),2,CDEL_PROFIT_LOSS )),0) Second
--						,nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),3,CDEL_PROFIT_LOSS )),0) Third
--						,nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),4,CDEL_PROFIT_LOSS )),0) Fourth
--					from trtran006
--					where CDEL_DEAL_TYPE in (26000002)
--					group by to_char(CDEL_CANCEL_DATE ,'Q'));
--      GOTO process_end;
--      end if;
--if  varReportID= 'DEALCONSOLIDATION'   then
--     numError :=fungetdealconsolidation(frmDate);
--     OPEN GenCursor for
-- select  DEALNUMBER,  EXECUTEDATE, BUYSELL, STATUS,  BASEAMOUNT,  MATURITYDATE,
--                              CANCELDATE, CBUYSELL,  CANCELRATE, CANCELAMOUNT,  PROFITLOSS,
--                              WASHRATE,fncConvRs(NETAMOUNT) as NetAmount, MTMRATE as M2mRate, BASECURRENCY,  OTHERCURRENCY,
--                              EXCHANGERATE,  VALUEDATE,  BANK, ENHANCEDDATE,
--                              ENHANCEDRATE,  ENHANCEDFCY, FIRSTQUARTER,  SECONDQUARTER,
--                              THIRDQUARTER, FOURQUARTER, YESTERDAYAMT, TODAYAMT,
--                              frmDate as AsonDate,
--                               pkgreturnreport.GetSystemDate() as SystemDate,
--                                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--
--                from dealtemp;
--
--      GOTO process_end;
-- end if;
if varReportID= 'EXCHANGESPOTRATEREPORT'   then

    -- dattemp := pkgforexprocess.fncGetCurrSpotDate(30400004,30400003, frmdate,3);
    dattemp := pkgforexprocess.fncGetCurrSpotDate(30400004,30400003, frmdate);
    OPEN GenCursor for
                select a.USDINRbid, a.USDINRask, EURUSDask,EURUSDbid,USDJPYbid,USDJPYask,GBPUSDbid,GBPUSDask,USDCHFbid,USDCHFask,USDCADbid,USDCADask,
                       b.janbid, b.janask,b.febbid,b.febask,b.marbid,b.marchask,b.aprilbid,b.aprilask,b.maybid,b.mayask,
                       b.junebid,b.juneask,b.julybid,b.julyask,b.augustbid,b.augustask,b.sepbid,b.sepask,b.octbid,b.octask,b.novbid,b.novask,b.decbid,b.decask,b.ratetime,
                       b.mon1,b.mon2,b.mon3,b.mon3,b.mon4,b.mon5,b.mon6,b.mon7,b.mon8,b.mon9,b.mon10,b.mon11,b.mon12,
                       frmDate as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from
                (select sum(decode(RATE_CURRENCY_CODE,30400004, decode(RATE_FOR_CURRENCY,30400003, RATE_SPOT_BID)))  as USDINRbid,
                        sum(decode(RATE_CURRENCY_CODE,30400004, decode(RATE_FOR_CURRENCY,30400003, RATE_SPOT_ASK)))  as USDINRask,
                        sum( decode( RATE_CURRENCY_CODE,30400002,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_ASK) )) as EURUSDask,
                        sum( decode( RATE_CURRENCY_CODE,30400002,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_BID) )) as EURUSDbid,
                        sum(decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400005, RATE_SPOT_BID))) as USDJPYbid,
                        sum(decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400005, RATE_SPOT_ASK))) as USDJPYask,
                        sum( decode( RATE_CURRENCY_CODE,30400006,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_BID )  ) )as GBPUSDbid,
                        sum( decode( RATE_CURRENCY_CODE,30400006,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_ASK )  ) )as GBPUSDask,
                        sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400001, RATE_SPOT_BID ) ) ) as USDCHFbid,
                        sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400001, RATE_SPOT_ASK ) ) ) as USDCHFask,
                        sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400007, RATE_SPOT_BID) ) ) as USDCADbid,
                        sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400007, RATE_SPOT_ASK) ) ) as USDCADask

                from   trsystem009
                where  RATE_SERIAL_NUMBER= (select max(RATE_SERIAL_NUMBER)
                                            from trsystem009
                                            where RATE_EFFECTIVE_DATE = frmDate)
                                                  and RATE_EFFECTIVE_DATE = frmDate) A,
                (select RATE_MONTH1_BID *100 as janbid, RATE_MONTH1_ASK *100 as janask,to_char(dattemp,'MONTH') as mon1,
                        RATE_MONTH2_BID *100 as febbid ,RATE_MONTH2_ASK *100 as febask,to_char(add_months(dattemp,1),'MONTH') as mon2,
                        RATE_MONTH3_BID *100 as marbid, RATE_MONTH3_ASK*100 as marchask ,to_char(add_months(dattemp,2),'MONTH') as mon3,
                        RATE_MONTH4_BID *100 as aprilbid,RATE_MONTH4_ASK*100 as aprilask,to_char(add_months(dattemp,3),'MONTH') as mon4,
                        RATE_MONTH5_BID *100 as maybid,RATE_MONTH5_ASK *100 as mayask,to_char(add_months(dattemp,4),'MONTH') as mon5,
                        RATE_MONTH6_BID*100 as junebid,RATE_MONTH6_ASK*100 as juneask,to_char(add_months(dattemp,5),'MONTH') as mon6,
                        RATE_MONTH7_BID *100 as julybid,RATE_MONTH7_ASK *100 as julyask,to_char(add_months(dattemp,6),'MONTH') as mon7,
                        RATE_MONTH8_BID *100 as augustbid,RATE_MONTH8_ASK*100 as augustask,to_char(add_months(dattemp,7),'MONTH') as mon8,
                        RATE_MONTH9_BID*100 as sepbid, RATE_MONTH9_ASK*100 as sepask,to_char(add_months(dattemp,8),'MONTH') as mon9,
                        RATE_MONTH10_BID*100 as  octbid, RATE_MONTH10_ASK*100 as octask,to_char(add_months(dattemp,9),'MONTH') as mon10,
                        RATE_MONTH11_BID*100 as novbid,RATE_MONTH11_ASK*100 as novask,to_char(add_months(dattemp,10),'MONTH') as mon11,
                        RATE_MONTH12_BID*100 as decbid, RATE_MONTH12_ASK *100 as decask,to_char(add_months(dattemp,11),'MONTH') as mon12,
                        RATE_RATE_TIME as ratetime
                  from  trsystem009
                  where RATE_SERIAL_NUMBER= (select max(RATE_SERIAL_NUMBER)
                                             from trsystem009
                                             where RATE_EFFECTIVE_DATE = frmDate)
                        and RATE_EFFECTIVE_DATE = frmDate
                        and RATE_CURRENCY_CODE =30400004
                        and RATE_FOR_CURRENCY= 30400003) B;
   GOTO process_end;
 end if;

 if  varReportID= 'DEALCONSOLIDATION'   then
     numError :=fungetdealconsolidation(frmDate);
     OPEN GenCursor for
                select  DEALNUMBER,  EXECUTEDATE, BUYSELL, STATUS,  BASEAMOUNT,  MATURITYDATE,
                        CANCELDATE, CBUYSELL,  CANCELRATE, CANCELAMOUNT,  PROFITLOSS,
                        WASHRATE,NETAMOUNT as NetAmount, MTMRATE as M2mRate, BASECURRENCY,  OTHERCURRENCY,
                        EXCHANGERATE,  VALUEDATE,  BANK, ENHANCEDDATE as ChangeDate,
                        ENHANCEDRATE,  ENHANCEDFCY, FIRSTQUARTER,  SECONDQUARTER,
                        THIRDQUARTER, FOURQUARTER, YESTERDAYAMT, TODAYAMT,
                        frmDate as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(varUserID ) as CompanyName,
                        TODAYSHEDGEDEAL,STATUSORDER,
                        decode(to_char(frmDate,'Q'),2,1,3,2,4,3,1,4) Quarter,
                        PREVFINYEAR
                From Dealtemp
               where  companycode In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id =varUserID )
                order by STATUSORDER,EXECUTEDATE;
    GOTO process_end;
 end if;

-- if  varReportID= 'DEALCONSOLIDATION'   then
--     numError :=fungetdealconsolidation(frmDate);
--   --  OPEN GenCursor for
--          QUERY_STR :=' select  DEALNUMBER,  EXECUTEDATE, BUYSELL, STATUS,  BASEAMOUNT,  MATURITYDATE,
--                        CANCELDATE, CBUYSELL,  CANCELRATE, CANCELAMOUNT,  PROFITLOSS,
--                        WASHRATE,NETAMOUNT as NetAmount, MTMRATE as M2mRate, BASECURRENCY,  OTHERCURRENCY,
--                        EXCHANGERATE,  VALUEDATE,  BANK, ENHANCEDDATE as ChangeDate,
--                        ENHANCEDRATE,  ENHANCEDFCY, FIRSTQUARTER,  SECONDQUARTER,
--                        THIRDQUARTER, FOURQUARTER, YESTERDAYAMT, TODAYAMT,
--                      --  '||''''||frmDate||''''||' as AsonDate,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                       --  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                        TODAYSHEDGEDEAL,STATUSORDER,
--                     --   decode(to_char('||''''||frmDate||''''||',''Q''),2,1,3,2,4,3,1,4) Quarter,
--                        PREVFINYEAR
--                From Dealtemp
--                where 1=1
--                     '||finalcondition||'
--                order by STATUSORDER,EXECUTEDATE';
--                delete from temp;commit;
--                insert into temp values(QUERY_STR,finalCondition);commit;
--         OPEN GenCursor for QUERY_STR||finalCondition;
--    Goto Process_End;
-- end if;

--if  varReportID= 'EXPORTORDER'   then
--
--     OPEN GenCursor for
----                                select   TD.TRAD_TRADE_REFERENCE as  ExportOrder, TD.TRAD_TRADE_RATE as  ExportRate
----                                              ,TD.TRAD_TRADE_FCY as  ExportAmount, TD.HEDG_DEAL_NUMBER  as DealNumber
----                                              ,TD.status , TD.LMOD_CHANGE_DATE as ChangeDate , TD. LMOD_ENHANCED_FCY as ChangedAmount
----                                              ,TD.LMOD_ENHANCED_RATE as ChangedRate,  decode(TD.status, 'Rolledover',TD.LMOD_PROFIT_LOSS
----,CD.CDEL_PROFIT_LOSS) as ProfitLoss
----                                              ,CD. CDEL_CANCEL_DATE as CancelDate,CDEL_CANCEL_RATE as CancelRate
----                                              ,TD.DEAL_EXECUTE_DATE as DealDate, TD.TRAD_CREATE_DATE  as TradeDate
----                                              ,TD.DEAL_EXCHANGE_RATE as DealRate,td.baseamount as baseamount
----                                              ,td.currency as currency,td.TradeCurrency as TradeCurrency
----                                              , pkgreturnreport.GetSystemDate() as SystemDate
----                                              , decode(TD.status, 'Delivered',td.baseamount *TD.DEAL_EXCHANGE_RATE ,0) as DelivaredTotAmt
----                                              , decode(TD.status, 'Delivered',td.baseamount ,0) as DelivaredBaseAmt
----                                              ,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
----                                              ,frmdate   as AsonDate
----                                 from
----                                         (select  T.TRAD_TRADE_REFERENCE,H.HEDG_DEAL_NUMBER,T.TRAD_TRADE_RATE,T.TRAD_TRADE_FCY
----                                                       ,decode(nvl(LMOD_REFERENCE_NUMBER,'C'),'C','Delivered','Rolledover') status
----                                                       ,R.LMOD_CHANGE_DATE,R.LMOD_ENHANCED_FCY,R.LMOD_ENHANCED_RATE
----                                                       ,R.LMOD_PROFIT_LOSS, D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE
----                                                       ,D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount
----                                                       ,pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency
----                                                       ,pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency
----                                              from trtran002 T ,trtran004 H ,trtran001  D,trtran009 R
----                                           where T.TRAD_TRADE_REFERENCE=H.HEDG_TRADE_REFERENCE
----                                               and    D.DEAL_DEAL_NUMBER = H.HEDG_DEAL_NUMBER
----                                               and    H.HEDG_DEAL_NUMBER=R.LMOD_REFERENCE_NUMBER(+)
----                                          --     and   T.TRAD_PROCESS_COMPLETE = 12400001
----                                               and   T.TRAD_TRADE_REFERENCE in (  select  t.TRAD_TRADE_REFERENCE
----                                 from  trtran002 T, trtran006 c
----                                 where  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE
----                                        and   c.CDEL_CANCEL_TYPE=27000002
----                                        and   T.TRAD_PROCESS_COMPLETE = 12400001
----                                        and  c.CDEL_CANCEL_DATE <=frmDate)
----                                         order by  T.TRAD_TRADE_REFERENCE ) TD,
----                                         ( select c .CDEL_CANCEL_DATE,c.CDEL_CANCEL_RATE,c.CDEL_DEAL_NUMBER,C.CDEL_PROFIT_LOSS
----                                              from  trtran006 C
----                                           where c.CDEL_DEAL_TYPE=26000001
----                                              and c.CDEL_CANCEL_TYPE!=27000001 ) CD
----                                 where  td.HEDG_DEAL_NUMBER=CD.CDEL_DEAL_NUMBER(+)
----                             order by   td.HEDG_DEAL_NUMBER,td.status;
--                        select   TD.TRAD_TRADE_REFERENCE as  ExportOrder, TD.TRAD_TRADE_RATE as  ExportRate,
--                                     TD.TRAD_TRADE_FCY as  ExportAmount, TD.HEDG_DEAL_NUMBER  as DealNumber,
--                                     TD.status , decode(TD.status, 'Delivered',TD. CDEL_CANCEL_DATE,TD.LMOD_CHANGE_DATE) as ChangeDate,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT,TD. LMOD_ENHANCED_FCY)   as ChangedAmount,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_RATE,TD. LMOD_ENHANCED_RATE)  as ChangedRate,
--                                     decode(TD.status, 'Rolledover',TD.LMOD_PROFIT_LOSS ,0) as ProfitLoss,
--                                     TD. CDEL_CANCEL_DATE as CancelDate,TD.CDEL_CANCEL_RATE as CancelRate,
--                                     TD.DEAL_EXECUTE_DATE as DealDate, TD.TRAD_CREATE_DATE  as TradeDate,
--                                     TD.DEAL_EXCHANGE_RATE as DealRate,td.baseamount as baseamount,
--                                     TD.currency as currency,TD.TradeCurrency as TradeCurrency,
--                                      pkgreturnreport.GetSystemDate() as SystemDate,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT * CDEL_CANCEL_RATE,0 ) as DelivaredTotAmt,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT,0 ) as DelivaredBaseAmt,
--                                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName, frmdate   as AsonDate
--                        from
--                                       ( select  T.TRAD_TRADE_REFERENCE,H.HEDG_DEAL_NUMBER,T.TRAD_TRADE_RATE,T.TRAD_TRADE_FCY,
--                                                       'Rolledover'  status,
--                                                       R.LMOD_CHANGE_DATE,R.LMOD_ENHANCED_FCY,R.LMOD_ENHANCED_RATE,
--                                                       R.LMOD_PROFIT_LOSS, D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE,
--                                                       D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount,
--                                                       pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency,
--                                                       pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency,
--                                                       sysdate  CDEL_CANCEL_DATE, 0  CDEL_CANCEL_RATE  ,
--                                                       '' as  CDEL_DEAL_NUMBER,0 as CDEL_PROFIT_LOSS,
--                                                       0  CDEL_CANCEL_AMOUNT
--                                              from  trtran002 T ,trtran004 H ,trtran001  D,trtran009 R
--                                           where  T.TRAD_TRADE_REFERENCE=H.HEDG_TRADE_REFERENCE
--                                               and   D.DEAL_DEAL_NUMBER = H.HEDG_DEAL_NUMBER
--                                               and   H.HEDG_DEAL_NUMBER=R.LMOD_REFERENCE_NUMBER
--                                               and   T.TRAD_TRADE_REFERENCE in (select  distinct t.TRAD_TRADE_REFERENCE
--                                                                                                                    from  trtran002 T, trtran006 c
--                                                                                                                  where  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE
--                                                                                                                      and  c.CDEL_CANCEL_TYPE=27000002
--                                                                                                                      and  c.CDEL_CANCEL_DATE<=frmdate)
--
--                                         union
--                                           select T.TRAD_TRADE_REFERENCE,CDEL_DEAL_NUMBER  as  HEDG_DEAL_NUMBER, T.TRAD_TRADE_RATE,
--                                                       T.TRAD_TRADE_FCY,'Delivered'  status,
--                                                       sysdate  LMOD_CHANGE_DATE ,0  LMOD_ENHANCED_FCY  ,0 LMOD_ENHANCED_RATE,
--                                                       0 LMOD_PROFIT_LOSS , D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE,
--                                                       D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount,
--                                                       pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency,
--                                                       pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency,
--                                                       c .CDEL_CANCEL_DATE,c.CDEL_CANCEL_RATE,c.CDEL_DEAL_NUMBER,C.CDEL_PROFIT_LOSS,
--                                                       c.CDEL_CANCEL_AMOUNT
--                                               from  trtran006 C,trtran001  D, trtran002 T
--                                           where c.CDEL_DEAL_TYPE=26000001
--                                                and c.CDEL_DEAL_NUMBER= d.DEAL_DEAL_NUMBER
--                                                and c.CDEL_DEAL_SERIAL= d.DEAL_SERIAL_NUMBER
--                                               and  c.CDEL_CANCEL_TYPE!=27000001
--                                               and  c.CDEL_CANCEL_DATE <=frmdate
--                                               and  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE) TD
--                                        order by    TD .TRAD_TRADE_REFERENCE , decode(TD.status, 'Delivered',TD.CDEL_CANCEL_DATE,TD.LMOD_CHANGE_DATE) ;
--           GOTO process_end;
--      end if;
--      if  varReportID= 'EXPORTORDER'   then
--
--     OPEN GenCursor for
--                        select   TD.TRAD_TRADE_REFERENCE as  ExportOrder, TD.TRAD_TRADE_RATE as  ExportRate,
--                                     TD.TRAD_TRADE_FCY as  ExportAmount, TD.HEDG_DEAL_NUMBER  as DealNumber,
--                                     TD.status , decode(TD.status, 'Delivered',TD. CDEL_CANCEL_DATE,TD.LMOD_CHANGE_DATE) as ChangeDate,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT,TD. LMOD_ENHANCED_FCY)   as ChangedAmount,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_RATE,TD. LMOD_ENHANCED_RATE)  as ChangedRate,
--                                     decode(TD.status, 'Rolledover',TD.LMOD_PROFIT_LOSS ,0) as ProfitLoss,
--                                     TD. CDEL_CANCEL_DATE as CancelDate,TD.CDEL_CANCEL_RATE as CancelRate,
--                                     TD.DEAL_EXECUTE_DATE as DealDate, TD.TRAD_CREATE_DATE  as TradeDate,
--                                     TD.DEAL_EXCHANGE_RATE as DealRate,td.baseamount as baseamount,
--                                     TD.currency as currency,TD.TradeCurrency as TradeCurrency,
--                                      pkgreturnreport.GetSystemDate() as SystemDate,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT * CDEL_CANCEL_RATE,0 ) as DelivaredTotAmt,
--                                      decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT,0 ) as DelivaredBaseAmt,
--                                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName, frmdate   as AsonDate
--                        from
--                                       ( select  T.TRAD_TRADE_REFERENCE,H.HEDG_DEAL_NUMBER,T.TRAD_TRADE_RATE,T.TRAD_TRADE_FCY,
--                                                       'Rolledover'  status,
--                                                       R.LMOD_CHANGE_DATE,R.LMOD_ENHANCED_FCY,R.LMOD_ENHANCED_RATE,
--                                                       R.LMOD_PROFIT_LOSS, D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE,
--                                                       D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount,
--                                                       pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency,
--                                                       pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency,
--                                                       sysdate  CDEL_CANCEL_DATE, 0  CDEL_CANCEL_RATE  ,
--                                                       '' as  CDEL_DEAL_NUMBER,0 as CDEL_PROFIT_LOSS,
--                                                       0  CDEL_CANCEL_AMOUNT
--                                              from  trtran002 T ,trtran004 H ,trtran001  D,trtran009 R
--                                           where  T.TRAD_TRADE_REFERENCE=H.HEDG_TRADE_REFERENCE
--                                               and   D.DEAL_DEAL_NUMBER = H.HEDG_DEAL_NUMBER
--                                               and   H.HEDG_DEAL_NUMBER=R.LMOD_REFERENCE_NUMBER
--                                               and  t.trad_process_complete = 12400001
--                                               and   T.TRAD_TRADE_REFERENCE in (select  distinct t.TRAD_TRADE_REFERENCE
--                                                                                                                    from  trtran002 T, trtran006 c
--                                                                                                                  where  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE
--                                                                                                                      and  c.CDEL_CANCEL_TYPE=27000002
--                                                                                                                      and  c.CDEL_CANCEL_DATE<=frmdate)
--
--                                         union
--                                           select T.TRAD_TRADE_REFERENCE,CDEL_DEAL_NUMBER  as  HEDG_DEAL_NUMBER, T.TRAD_TRADE_RATE,
--                                                       T.TRAD_TRADE_FCY,'Delivered'  status,
--                                                       sysdate  LMOD_CHANGE_DATE ,0  LMOD_ENHANCED_FCY  ,0 LMOD_ENHANCED_RATE,
--                                                       0 LMOD_PROFIT_LOSS , D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE,
--                                                       D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount,
--                                                       pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency,
--                                                       pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency,
--                                                       c .CDEL_CANCEL_DATE,c.CDEL_CANCEL_RATE,c.CDEL_DEAL_NUMBER,C.CDEL_PROFIT_LOSS,
--                                                       c.CDEL_CANCEL_AMOUNT
--                                               from  trtran006 C,trtran001  D, trtran002 T
--                                           where c.CDEL_DEAL_TYPE=26000001
--                                                and c.CDEL_DEAL_NUMBER= d.DEAL_DEAL_NUMBER
--                                                and c.CDEL_DEAL_SERIAL= d.DEAL_SERIAL_NUMBER
--                                                and  c.CDEL_CANCEL_TYPE!=27000001
--                                                and  c.CDEL_CANCEL_DATE <=frmdate
--                                                and  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE
--                                                and  t.trad_process_complete = 12400001
--                                               ) TD
--                                        order by    TD .TRAD_TRADE_REFERENCE , decode(TD.status, 'Delivered',TD.CDEL_CANCEL_DATE,TD.LMOD_CHANGE_DATE) ;
--           GOTO process_end;
--      end if;
--
if  varReportID= 'EXPORTORDER'   then

    OPEN GenCursor for
                select TD.TRAD_TRADE_REFERENCE as  ExportOrder, TD.TRAD_TRADE_RATE as  ExportRate,
                       TD.TRAD_TRADE_FCY as  ExportAmount, TD.HEDG_DEAL_NUMBER  as DealNumber,
                       TD.status , decode(TD.status, 'Delivered',TD. CDEL_CANCEL_DATE,TD.LMOD_CHANGE_DATE) as ChangeDate,
                       decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT,TD. LMOD_ENHANCED_FCY)   as ChangedAmount,
                       decode(TD.status, 'Delivered',TD. CDEL_CANCEL_RATE,TD. LMOD_ENHANCED_RATE)  as ChangedRate,
                       --decode(TD.status, 'Rolledover',TD.LMOD_PROFIT_LOSS ,0) as ProfitLoss,
                       -- decode(TD.status, 'Rolledover',TD.LMOD_PROFIT_LOSS ,TD.CDEL_PROFIT_LOSS) as ProfitLoss,
                       decode(TD.status, 'Rolledover',(TD.LMOD_ENHANCED_RATE -TD.TRAD_TRADE_RATE)*TD.LMOD_ENHANCED_FCY,
                       (TD.CDEL_CANCEL_RATE -TD.TRAD_TRADE_RATE)*CDEL_CANCEL_AMOUNT) as Profitloss,
                       TD. CDEL_CANCEL_DATE as CancelDate,TD.CDEL_CANCEL_RATE as CancelRate,
                       TD.DEAL_EXECUTE_DATE as DealDate, TD.TRAD_CREATE_DATE  as TradeDate,
                       TD.DEAL_EXCHANGE_RATE as DealRate,td.baseamount as baseamount,
                       TD.currency as currency,TD.TradeCurrency as TradeCurrency,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                       decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT * CDEL_CANCEL_RATE,0 ) as DelivaredTotAmt,
                       decode(TD.status, 'Delivered',TD. CDEL_CANCEL_AMOUNT,0 ) as DelivaredBaseAmt,
                        pkgreturnreport.getCompanyName( varUserID ) as CompanyName, frmdate   as AsonDate
                from   (select T.TRAD_TRADE_REFERENCE,H.HEDG_DEAL_NUMBER,T.TRAD_TRADE_RATE,T.TRAD_TRADE_FCY,
                               'Rolledover'  status,
                               R.LMOD_CHANGE_DATE,R.LMOD_ENHANCED_FCY,R.LMOD_ENHANCED_RATE,
                               R.LMOD_PROFIT_LOSS, D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE,
                               D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount,
                               pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency,
                               pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency,
                               sysdate  CDEL_CANCEL_DATE, 0  CDEL_CANCEL_RATE  ,
                               '' as  CDEL_DEAL_NUMBER,0 as CDEL_PROFIT_LOSS,
                               0  CDEL_CANCEL_AMOUNT
                        from   trtran002 T ,trtran004 H ,trtran001  D,trtran009 R
                        where  T.TRAD_TRADE_REFERENCE=H.HEDG_TRADE_REFERENCE
                               and D.DEAL_DEAL_NUMBER = H.HEDG_DEAL_NUMBER
                               and H.HEDG_DEAL_NUMBER=R.LMOD_REFERENCE_NUMBER
                               and t.trad_process_complete = 12400001
                               and T.TRAD_TRADE_REFERENCE in (select distinct t.TRAD_TRADE_REFERENCE
                                                              from   trtran002 T, trtran006 c
                                                              where  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE
                                                                     and  c.CDEL_CANCEL_TYPE=27000002
                                                                     and  c.CDEL_CANCEL_DATE<=frmdate)

                union

                select T.TRAD_TRADE_REFERENCE,CDEL_DEAL_NUMBER  as  HEDG_DEAL_NUMBER, T.TRAD_TRADE_RATE,
                       (T.trad_trade_fcy - nvl((select sum(BREL_REVERSAL_FCY)
                                                from   trtran003
                                                where  BREL_TRADE_REFERENCE = T.TRAD_TRADE_REFERENCE  and
                                                       BREL_REVERSAL_TYPE in(25800006,25800053) and
                                                       BREL_ENTRY_DATE <= frmdate
                                                group by BREL_TRADE_REFERENCE ),0)),
                       --T.TRAD_TRADE_FCY,
                       'Delivered'  status,
                       sysdate  LMOD_CHANGE_DATE ,0  LMOD_ENHANCED_FCY  ,0 LMOD_ENHANCED_RATE,
                       0 LMOD_PROFIT_LOSS , D.DEAL_EXECUTE_DATE,T.TRAD_CREATE_DATE,
                       D.DEAL_EXCHANGE_RATE,d.Deal_base_amount as baseamount,
                       pkgreturncursor.fncgetdescription(d.deal_base_currency,2) as Currency,
                       pkgreturncursor.fncgetdescription(t.trad_trade_currency,2) as TradeCurrency,
                       c .CDEL_CANCEL_DATE,c.CDEL_CANCEL_RATE,c.CDEL_DEAL_NUMBER,C.CDEL_PROFIT_LOSS,
                       c.CDEL_CANCEL_AMOUNT
                from   trtran006 C,trtran001  D, trtran002 T
                where  c.CDEL_DEAL_TYPE=26000001
                       and c.CDEL_DEAL_NUMBER= d.DEAL_DEAL_NUMBER
                       and c.CDEL_DEAL_SERIAL= d.DEAL_SERIAL_NUMBER
                       and  c.CDEL_CANCEL_TYPE!=27000001
                       and  c.CDEL_CANCEL_DATE <=frmdate
                       and  c.CDEL_TRADE_REFERENCE=T.TRAD_TRADE_REFERENCE
                       and  t.trad_process_complete = 12400001
                ) TD
                order by    TD .TRAD_TRADE_REFERENCE , decode(TD.status, 'Delivered',TD.CDEL_CANCEL_DATE,TD.LMOD_CHANGE_DATE) ;
    GOTO process_end;
 end if;

if  varReportID= 'MAILAUDITREPORT'   then

    OPEN GenCursor for
                select mail_audt_date as AuditDate,mail_audt_reportid as ReportId,mail_audt_userid as UserId,
                       mail_audt_mailid as MailId,
                       pkgreturncursor.fncgetdescription(mail_audt_status,2) as MailStatus,
                       mail_time_stamp as MailTimestamp,
                       frmDate as FromDate, toDate as ToDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName( varUserID ) as CompanyName
                from   trsystem201
                WHERE  mail_audt_date between frmDate and toDate
                order by mail_audt_date ;
    GOTO process_end;
end if;

if varReportID ='REALIZEDPANDLFORHEDGEDEAL'  THEN
-- Ason Updation for conros on 23-june-09
     OPEN GenCursor for
                  select distinct d.DEAL_DEAL_NUMBER as DealNumber ,
                         t.TRAD_TRADE_REFERENCE as TraderefNo,t.TRAD_ENTRY_DATE as TradeDate,
                         pkgreturncursor.FNCGETDESCRIPTION(t.TRAD_IMPORT_EXPORT,2) as  OrderType,
                         pkgreturncursor.FNCGETDESCRIPTION(t.TRAD_TRADE_CURRENCY,2) as  TradeCurrency,
                         t.TRAD_TRADE_FCY as TradeAmount, t.TRAD_TRADE_RATE as TradeRate,t.TRAD_TRADE_INR as TradeotherAmt,
                         d.DEAL_EXECUTE_DATE as DealDate,
                         pkgreturncursor.FNCGETDESCRIPTION(d.DEAL_BASE_CURRENCY,2) as BaseCurrency,
                         pkgreturncursor.FNCGETDESCRIPTION(d.deal_other_currency,2) as OtherCurrency,
                         pkgreturncursor.FNCGETDESCRIPTION(d.deal_buy_sell,2) as BuySell,
                         --d.DEAL_BASE_AMOUNT as DealAmount,d.DEAL_EXCHANGE_RATE  as DealRate,d.deal_other_amount as DealotherAmt,
                         c.cdel_cancel_amount as DealAmount,c.cdel_cancel_rate  as DealRate,decode(c.cdel_other_amount,0,c.cdel_cancel_inr,c.cdel_other_amount) as DealotherAmt,
                         frmDate as AsonDate,toDate as toDate,
                         pkgreturnreport.GetSystemDate() as SystemDate,
                          pkgreturnreport.getCompanyName( varUserID) as CompanyName
                  from trtran006 c ,trtran002 t,trtran001 d
                  where c.CDEL_TRADE_REFERENCE = t.TRAD_TRADE_REFERENCE
                        and t.TRAD_PROCESS_COMPLETE =12400001
                        and d.DEAL_SERIAL_NUMBER = c.cdel_deal_serial
                        and c.CDEL_DEAL_NUMBER=d.DEAL_DEAL_NUMBER
                        and t.TRAD_RECORD_STATUS not in(10200005,10200005)
                        and d.DEAL_RECORD_STATUS not in(10200005,10200005)
                        and c.CDEL_RECORD_STATUS not in(10200005,10200005)
                        --and d.DEAL_EXECUTE_DATE between frmDate and toDate
                        and c.cdel_cancel_date between frmDate and toDate
                        and c.cdel_cancel_type = 27000002
                  order by  t.TRAD_ENTRY_DATE,t.TRAD_TRADE_REFERENCE,d.DEAL_DEAL_NUMBER;
   --insert into temp values(frmDate,'test');commit;
   GOTO process_end;
 end if;

if Varreportid = 'MTMOPTBANKSTMNT' Then    -- added on 20 Dec 2011 for MTM options bank stmt upload

    Query_Str:= 'select PKGRETURNCURSOR.FNCGETDESCRIPTION(b.mtmr_company_code, 2) CompanyCode,
                 PKGRETURNCURSOR.FNCGETDESCRIPTION(b.mtmr_bank_code, 2) CounterParty,
                 a.copt_deal_number DealNumber,
                 b.mtmr_user_reference UserRefNo,
                 a.copt_base_amount DealAmount,
                 PKGRETURNCURSOR.FNCGETDESCRIPTION(a.copt_deal_type, 2) DealType,
                 (select round( avg(cosu_strike_rate),4)
                    from trtran072
                   where cosu_deal_number = copt_deal_number
                     and cosu_buy_sell = 25300001
                     and cosu_option_type = 32400001) BC,
                 (select avg(cosu_strike_rate)
                    from trtran072
                   where cosu_deal_number = copt_deal_number
                     and cosu_buy_sell = 25300001
                     and cosu_option_type = 32400002) BP,
                 (select avg(cosu_strike_rate)
                    from trtran072
                   where cosu_deal_number = copt_deal_number
                     and cosu_buy_sell = 25300002
                     and cosu_option_type = 32400002) SP,
                 (select avg(cosu_strike_rate)
                    from trtran072
                   where cosu_deal_number=copt_deal_number
                     and cosu_buy_sell=25300002
                     and cosu_option_type=32400001) SC,
                 a.copt_expiry_date SettlementDate,
                 a.copt_maturity_date MaturityDate,
                 b.mtmr_report_date ReportDate,
                 b.mtmr_strike_rate StrikeRate,
                 b.mtmr_mtm_usd MTMUSD,
                 b.mtmr_mtm_amount MTMINR,
                 b.mtmr_batch_number BatchNumber,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 ''' || frmDate || ''' as  FromDate,
                 ''' || toDate || ''' as ToDate
                 ' || varGroupField  || '
            from trtran071 a,
                 trtran075 b
          where instr(a.copt_user_reference, b.mtmr_user_reference) > 0
             and a.copt_counter_party = b.mtmr_bank_code
             and b.mtmr_report_date = (select max(mtmr_report_date)
                                         from trtran075
                                        where mtmr_report_date <=  ''' || frmDate || ''')';

    open Gencursor
     for Query_Str || finalCondition;

    Goto Process_End;
 end if;



if varReportID = 'USERACCESSCONTROLREPORT' then

   Query_Str1 := 'Y';
   temp := 'N';
   mFieldCondition:= '//TimeStamp';
   LocalBank:= '//UserName';

   QUERY_STR :='select (select USER_USER_NAME  from trsystem022 where USER_USER_ID = ACTL_USER_ID ) as UserName,
                       actl_program_unit as ProgramUnit,actl_serial_number as SerialNo,
                       MENU_DESCRIPTION as MenuDesc,
                       decode(ACTL_ACCESS_INSERT,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as Insert1,
                       decode(ACTL_ACCESS_EDIT,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as Edit1,
                       decode(ACTL_ACCESS_DELETE,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as Delete1,
                       decode(ACTL_ACCESS_CONFIRM,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as Confirm1,
                       decode(ACTL_ACCESS_VIEW,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as View1,
                       decode(ACTL_ACCESS_PRINT,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as Print1,
                       decode(ACTL_ACCESS_SAVE,12400001,'||''''||Query_Str1||''''||',12400002,'||''''||temp||''''||') as Save1,
                       --frmDate as AsonDate,
                       pkgreturncursor.FNCGETDESCRIPTION(actl_record_status,2) as Status,
                       decode(actl_record_status,10200004,(ExtractValue(ACTL_ENTRY_DETAIL, '||''''||mFieldCondition||''''||'))) as TimeStamp1,
                       decode(actl_record_status,10200004,(ExtractValue(ACTL_ENTRY_DETAIL, '||''''||LocalBank||''''||'))) as UpdatedUserName,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from   trsystem002,TRSYSTEM006 a
                where  menu_program_unit = actl_program_unit and
                       ACTL_GROUP_CODE = (select USER_GROUP_CODE
                                          from TRSYSTEM022
                                          where USER_USER_ID = a.ACTL_USER_ID ) and
                       actl_record_status not in (10200006) ';
        --insert into temp values(QUERY_STR,finalCondition);commit;

        OPEN GenCursor for QUERY_STR||finalCondition||'  order by MENU_DESCRIPTION,actl_record_status desc ';
     GOTO process_end;
 end if;
 if varReportID = 'LIBORRATEREPORT' then
  OPEN GenCursor for
       select LRAT_RATE_TIME as RateTime,LRAT_EFFECTIVE_DATE AS EffectiveDate,
              --LRAT_SPOT_BID as SpotBid,LRAT_SPOT_ASK as SpotAsk,
              LRAT_MONTH1_BID AS Month1Bid,LRAT_MONTH1_ASK  AS Month1Ask,
              LRAT_MONTH3_BID AS Month3Bid,LRAT_MONTH3_ASK AS Month3Ask,
              LRAT_MONTH6_BID AS Month6Bid,LRAT_MONTH6_ASK AS Month6Ask,
              LRAT_YEAR1_BID as Year1Bid,LRAT_YEAR1_ASK as Year1Ask,
              LRAT_YEAR3_BID as Year3Bid,LRAT_YEAR3_ASK as Year3Ask,
              LRAT_YEAR5_BID as Year5Bid,LRAT_YEAR5_ASK as Year5Ask,
              LRAT_YEAR10_BID as Year10Bid,LRAT_YEAR10_ASK as Year10Ask,
              LRAT_RBI_USD as RbiUsd,
              LRAT_LIBOR_1MONTH as Libor1Month ,
              LRAT_LIBOR_3MONTH as Libor3Month,
              LRAT_LIBOR_6MONTH as Libor6Month,
              LRAT_LIBOR_12MONTH as Libor12Month,
              LRAT_LIBOR_1MONTH as Libor1Month ,
              LRAT_LIBOR_3MONTH as Libor3Month,
              LRAT_LIBOR_6MONTH as Libor6Month,
              LRAT_LIBOR_12MONTH as Libor12Month,
              pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
              frmDate as FrmDate
       from   TRSYSTEM017
       where  LRAT_EFFECTIVE_DATE = frmDate
       ORDER BY LRAT_SERIAL_NUMBER;
  GOTO process_end;
  end if;
--------------------------------------------------------------------------------
----  Money Module Reports(Market Deal Reports) - Begin
if varReportID= 'MARKETDEALSFORTHEDAY'   then
     QUERY_STR := 'select   pkgreturncursor.fncgetdescription( MDEL_COMPANY_CODE,1) AS CompDesc,
                            mdel_deal_number AS DealNo,mdel_user_reference as UserReference,
                            mdel_execute_date AS ExecuteDate,
                            pkgreturncursor.fncgetdescription(mdel_transaction_type,2) AS TransactionType,
                            pkgreturncursor.fncgetdescription(mdel_counter_party ,2)AS CoutnerParty,
                            pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
                            mdel_deal_amount AS DealAmount,
                            mdel_exchange_rate AS ExchangeRate,
                            mdel_amount_local AS AmountLocal,
                            mdel_maturity_amount as MaturityAmount,
                            pkgreturncursor.fncgetdescription(mdel_interest_type,2) as InterestType,
                            mdel_base_rate as BaseRate,
                            mdel_interest_rate as InterestRate,
                            mdel_market_price as MarketPrice,
                            mdel_repurchase_price as PurchasePrice,
                            mdel_due_date as DueDate,
                            (select user_user_name from trsystem022 where user_user_id = mdel_user_id ) as UserId,
                            mdel_execute_time as ExecuteTime,
                            mdel_dealer_remark as DealerRemarks,
                            pkgreturnreport.GetSystemDate() as SystemDate,
                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                            to_Date('||''''||frmDate||''''||') as AsonDate
                   from     TRTRAN031
                   where    mdel_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') ';
     OPEN GenCursor for QUERY_STR||finalCondition||' order by mdel_transaction_type,mdel_currency_code';
     GOTO process_end;
end if;

if varReportID= 'MARKETDEALSMATURINGFORTHEDAY'   then
     QUERY_STR := 'select   pkgreturncursor.fncgetdescription( MDEL_COMPANY_CODE,1) AS CompDesc,
                            mdel_deal_number AS DealNo,mdel_user_reference as UserReference,
                            mdel_execute_date AS ExecuteDate,
                            pkgreturncursor.fncgetdescription(mdel_transaction_type,2) AS TransactionType,
                            pkgreturncursor.fncgetdescription(mdel_counter_party ,2)AS CoutnerParty,
                            pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
                            mdel_deal_amount AS DealAmount,
                            mdel_exchange_rate AS ExchangeRate,
                            mdel_amount_local AS AmountLocal,
                            mdel_maturity_amount as MaturityAmount,
                            pkgreturncursor.fncgetdescription(mdel_interest_type,2) as InterestType,
                            mdel_base_rate as BaseRate,
                            mdel_interest_rate as InterestRate,
                            mdel_market_price as MarketPrice,
                            mdel_repurchase_price as PurchasePrice,
                            mdel_due_date as DueDate,
                            (select user_user_name from trsystem022 where user_user_id = mdel_user_id ) as UserId,
                            mdel_execute_time as ExecuteTime,
                            mdel_dealer_remark as DealerRemarks,
                            pkgreturnreport.GetSystemDate() as SystemDate,
                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                            to_date('||''''||frmDate||''''||') as AsonDate
                   from     TRTRAN031
                   where    mdel_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                            ((mdel_process_complete = 12400001  and mdel_complete_date > '||''''||frmDate||''''||') or mdel_process_complete = 12400002)';
     OPEN GenCursor for QUERY_STR||finalCondition||' order by mdel_transaction_type,mdel_currency_code';
     GOTO process_end;
end if;

 if varReportID='MARKETDEALMATURINGFORTHEDAYS' then

  QUERY_STR := 'select   pkgreturncursor.fncgetdescription( MDEL_COMPANY_CODE,1) AS CompDesc,
                            mdel_deal_number AS DealNo,mdel_user_reference as UserReference,
                            mdel_execute_date AS ExecuteDate,
                            pkgreturncursor.fncgetdescription(mdel_transaction_type,2) AS TransactionType,
                            pkgreturncursor.fncgetdescription(mdel_counter_party ,2)AS CoutnerParty,
                            pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
                            mdel_deal_amount AS DealAmount,
                            mdel_exchange_rate AS ExchangeRate,
                            mdel_amount_local AS AmountLocal,
                            mdel_maturity_amount as MaturityAmount,
                            mdel_base_rate as BaseRate,
                            pkgreturncursor.fncgetdescription(mdel_interest_type,2) as InterestType,
                            mdel_interest_rate as InterestRate,
                            mdel_market_price as MarketPrice,
                            mdel_repurchase_price as PurchasePrice,
                            mdel_due_date as DueDate,
                            (select user_user_name from trsystem022 where user_user_id = mdel_user_id ) as UserId,
                            mdel_execute_time as ExecuteTime,
                            mdel_dealer_remark as DealerRemarks,
                            pkgreturnreport.GetSystemDate() as SystemDate,
                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                            to_date('||''''||frmDate||''''||') as FromDate,
                            to_date('||''''||toDate||''''||') as ToDate
                   from     TRTRAN031
                   where    mdel_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                            ((mdel_process_complete = 12400001  and mdel_complete_date > '||''''||toDate||''''||') or mdel_process_complete = 12400002)';

     OPEN GenCursor for QUERY_STR||finalCondition||' order by mdel_transaction_type,mdel_due_date';
     GOTO process_end;
 end if;
  if varReportID='OUTSTANDINGMARKETDEALSORTHEDAY' then

  QUERY_STR := 'select   pkgreturncursor.fncgetdescription( MDEL_COMPANY_CODE,1) AS CompDesc,
                            mdel_deal_number AS DealNo,mdel_user_reference as UserReference,
                            mdel_execute_date AS ExecuteDate,
                            pkgreturncursor.fncgetdescription(mdel_transaction_type,2) AS TransactionType,
                            pkgreturncursor.fncgetdescription(mdel_counter_party ,2)AS CoutnerParty,
                            pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
                            mdel_deal_amount AS DealAmount,
                            mdel_exchange_rate AS ExchangeRate,
                            mdel_amount_local AS AmountLocal,
                            mdel_maturity_amount as MaturityAmount,
                            pkgreturncursor.fncgetdescription(mdel_interest_type,2) as InterestType,
                            mdel_base_rate as BaseRate,
                            mdel_interest_rate as InterestRate,
                            mdel_market_price as MarketPrice,
                            mdel_repurchase_price as PurchasePrice,
                            mdel_due_date as DueDate,
                            (select user_user_name from trsystem022 where user_user_id = mdel_user_id ) as UserId,
                            mdel_execute_time as ExecuteTime,
                            mdel_dealer_remark as DealerRemarks,
                            pkgreturnreport.GetSystemDate() as SystemDate,
                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                            to_date('||''''||frmDate||''''||') as AsonDate
                   from     TRTRAN031
                   where    mdel_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                            ((mdel_process_complete = 12400001  and mdel_complete_date > '||''''||frmDate||''''||') or mdel_process_complete = 12400002) and
                            mdel_execute_date <= '||''''||frmDate||'''';
     OPEN GenCursor for QUERY_STR||' order by mdel_transaction_type,mdel_currency_code';
     GOTO process_end;
 end if;

 IF varReportID ='MARKETDEALAUDITTRIAL'  THEN

    OPEN GenCursor for
                select imagetype as Stage,--nvl(b.datestamp,a.mdel_time_stamp) as DateStamp,
                       pkgreturncursor.fncgetdescription(nvl(b.mdel_record_status,a.mdel_record_status),2) as ImageType,
                       nvl(b.mdel_execute_date,a.mdel_execute_date) as ExecuteDate,
                       nvl(b.mdel_deal_number,a.mdel_deal_number) as DealNo,
                       nvl(b.mdel_user_reference,a.mdel_user_reference) as UserReference,
                       pkgreturncursor.fncgetdescription(nvl(b.mdel_transaction_type,a.mdel_transaction_type),2) AS TransactionType,
                       pkgreturncursor.fncgetdescription(nvl(b.mdel_counter_party,a.mdel_counter_party),2) as CoutnerParty,
                       pkgreturncursor.fncgetdescription(nvl(b.mdel_currency_code,a.mdel_currency_code),2) as Currency,
                       nvl(b.mdel_deal_amount,a.mdel_deal_amount)  as DealAmount,
                       pkgreturnreport.fncConvRs(nvl(b.mdel_amount_local,a.mdel_amount_local)) as AmountLocal,
                       nvl(b.mdel_exchange_rate,a.mdel_exchange_rate) as ExchangeRate,
                       nvl(b.mdel_maturity_amount,a.mdel_maturity_amount) as MaturityAmount,
                       pkgreturncursor.fncgetdescription(nvl(b.mdel_interest_type,a.mdel_interest_type),2) as InterestType,
                       nvl(b.mdel_base_rate,a.mdel_base_rate) as BaseRate,
                       nvl(b.mdel_interest_rate,a.mdel_interest_rate) as InterestRate,
                       nvl(b.mdel_market_price,a.mdel_interest_rate) as MarketPrice,
                       nvl(b.mdel_repurchase_price,a.mdel_repurchase_price) as PurchasePrice,
                       nvl(b.mdel_due_date,a.mdel_due_date) as DueDate,
                       --nvl(b.mdel_user_id,a.mdel_user_id) as UserId,
                       b.mdel_dealer_remark as DealerRemarks,
                       frmDate as AsonDate,
                       sysdate as WorkDate,pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from   trtran031 a,trsystem131 b
                where  a.MDEL_EXECUTE_DATE = frmDate and
                       a.MDEL_DEAL_NUMBER = b.MDEL_DEAL_NUMBER(+)
                order by a.MDEL_DEAL_NUMBER,b.MDEL_RECORD_STATUS,b.datestamp;
     GOTO process_end;
 end if;

  IF varReportID ='MARKETDEALCASHFLOW'  THEN

   numError := fncFundFlow(frmDate);
    OPEN GenCursor for
                    select  FLOW_PERIOD_name as MaturityPeriod,FLOW_RECEIPT_AMOUNT as Assets,
                            FLOW_PAYMENT_AMOUNT as Liabilities,FLOW_NETT_AMOUNT as Gap,
                            frmDate as AsonDate,
                            pkgreturnreport.GetSystemDate() as SystemDate,
                             pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                    from TRSYSTEM992
                    where FLOW_PERIOD_TYPE <=5;
    GOTO process_end;
 end if;

 if varReportID ='MARKETDEALGAPANALYSIS'  THEN

    numError := fncFundFlow(frmDate);
    QUERY_STR :='select sum(FLOW_RECEIPT_AMOUNT) as Assets,
                        sum(FLOW_PAYMENT_AMOUNT) as Liabilities,
                        sum(FLOW_NETT_AMOUNT) as Gap,
                        FLOW_PERIOD_NAME as MaturityPeriod,'||''''||frmDate||''''||' as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from   trsystem992 ';

    OPEN GenCursor for QUERY_STR||' group by FLOW_PERIOD_TYPE ,FLOW_PERIOD_NAME
                                                  order by FLOW_PERIOD_TYPE';
--    OPEN GenCursor for
--               select FLOW_PERIOD_name as MaturityPeriod,FLOW_RECEIPT_AMOUNT as Assets,
--                      FLOW_PAYMENT_AMOUNT as Liabilities,FLOW_NETT_AMOUNT as Gap,
--                      frmDate as AsonDate,
--                      pkgreturnreport.GetSystemDate() as SystemDate,
--                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--              from TRSYSTEM992;
    GOTO process_end;
 end if;

  if varReportID ='MARKETDEALCRNCYWISEGAPANALYSIS'  THEN

    numError := fncFundFlow(frmDate);
    QUERY_STR :='select FLOW_RECEIPT_AMOUNT as Assets, FLOW_PAYMENT_AMOUNT as Liabilities,
                        FLOW_FCY_RECIEPT as AssestsFcy,FLOW_FCY_PAYMENT as LiabilitiesFcy,
                        FLOW_NETT_AMOUNT as Gap, FLOW_PERIOD_NAME as MaturityPeriod,
                        pkgreturncursor.fncgetdescription(FLOW_CURRENCY_CODE,1) as Currency,'||''''||
                        frmDate||''''||' as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from   trsystem992
                 where  FLOW_CURRENCY_CODE != 0';


  OPEN GenCursor for QUERY_STR||finalCondition||' order by FLOW_PERIOD_TYPE';
  GOTO process_end;
  end if;

 if varReportID ='MARKETDEALCOSTYIELDANAALYSIS'  THEN
    OPEN GenCursor for
                select MDEL_TRANSACTION_TYPE as "Type",pkgreturncursor.FNCGETDESCRIPTION(MDEL_TRANSACTION_TYPE,1)|| ''''||'S' as "TypeDesc" ,
                       MDEL_CURRENCY_CODE as "Currency" ,pkgreturncursor.FNCGETDESCRIPTION(MDEL_CURRENCY_CODE,2) as "CurrencyDesc",
                       sum(MDEL_AMOUNT_LOCAL) as "LAmount", MDEL_INTEREST_RATE as "CostyieldPercent",
                       sum(MDEL_AMOUNT_LOCAL) *(MDEL_INTEREST_RATE /100) as "ResultInr",
                      (select round(((sum(MDEL_AMOUNT_LOCAL *(MDEL_INTEREST_RATE /100))) / nvl(sum(MDEL_AMOUNT_LOCAL),1)),4) * 100
                        from   trtran031
                        where  MDEL_TRANSACTION_TYPE  not in (28100000,28100001,28100002,28100051)
                               and MDEL_EXECUTE_DATE <=frmDate
                               and MDEL_RECORD_STATUS not in (10200005,10200006)
                       ) as AssetsWgtAvg,
                       (select round((sum(FCLN_SANCTIONED_INR*(FCLN_INTEREST_RATE/100)) / nvl(sum(FCLN_SANCTIONED_INR),1)),4)  * 100
                        from   trtran005
                        where  FCLN_RECORD_STATUS not in (10200005,10200006)
                               and FCLN_CREATE_DATE <= frmDate
                       ) as LiaWgtAvg,
                       0 as "Status",frmDate as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from   trtran031
                where  MDEL_TRANSACTION_TYPE  not in (28100000,28100001,28100002,28100051)
                       and MDEL_EXECUTE_DATE <= frmDate
                       and MDEL_RECORD_STATUS not in (10200005,10200006)
                group by MDEL_TRANSACTION_TYPE,MDEL_DEAL_NUMBER,MDEL_CURRENCY_CODE,MDEL_INTEREST_RATE
                union
                select FCLN_LOAN_TYPE as "Type", pkgreturncursor.FNCGETDESCRIPTION(FCLN_LOAN_TYPE,1)|| ''''||'S' as "TypeDesc",
                       FCLN_CURRENCY_CODE as "Currency",pkgreturncursor.FNCGETDESCRIPTION(FCLN_CURRENCY_CODE,2) as "CurrencyDesc" ,
                       sum(FCLN_SANCTIONED_INR) as "LAmount", FCLN_INTEREST_RATE as "CostyieldPercent" ,
                       sum(FCLN_SANCTIONED_INR)*(FCLN_INTEREST_RATE/100) as "ResultInr",
                       (select round(((sum(MDEL_AMOUNT_LOCAL *(MDEL_INTEREST_RATE /100))) / nvl(sum(MDEL_AMOUNT_LOCAL),1)),4) * 100
                        from   trtran031
                        where  MDEL_TRANSACTION_TYPE  not in (28100000,28100001,28100002,28100051)
                               and MDEL_EXECUTE_DATE <= frmDate
                               and MDEL_RECORD_STATUS not in (10200005,10200006)
                       ) as AssetsWgtAvg,
                       (select round((sum(FCLN_SANCTIONED_INR*(FCLN_INTEREST_RATE/100)) / nvl(sum(FCLN_SANCTIONED_INR),1)),4)  * 100
                        from   trtran005
                        where  FCLN_RECORD_STATUS not in (10200005,10200006)
                               and FCLN_CREATE_DATE <= frmDate
                       ) as LiaWgtAvg,
                       1 as "Status", frmDate as AsonDate,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                from   trtran005
                where FCLN_RECORD_STATUS not in (10200005,10200006)
                      and FCLN_CREATE_DATE <= frmDate
                group by FCLN_LOAN_TYPE,FCLN_CURRENCY_CODE,FCLN_INTEREST_RATE ;

--0 - Lend (Assets)
--1 - Borrow(Liabilities)
    GOTO process_end;
 end if;

   if varReportId = 'COMMCHARGESFORDEALFORTHEPERIOD' then

      QUERY_STR :='select CMDL_DEAL_NUMBER as DealNumber,CMDL_EXECUTE_DATE as ExecuteDate,
                          pkgreturncursor.fncgetdescription(CMDL_BUY_SELL,2) as BuySell,
                          pkgreturncursor.fncgetdescription(CMDL_EXCHANGE_CODE,2) as ExchangeType,
                          pkgreturncursor.fncgetdescription(CMDL_PRODUCT_CODE,2) as Commodity,
                          pkgreturnreport.fncGetProductDetails(CMDL_PRODUCT_CODE,CMDL_MATURITY_DATE,CMDL_EXCHANGE_CODE,1) as TickSymbol,
                          CMDL_MATURITY_DATE as MaturityDate,
                          CMDL_LOT_NUMBERS as Lot,
                          CMDL_LOT_PRICE as LotPrice,
                          CMDL_DEAL_AMOUNT as DealValue,
                          CMDL_BROKERAGE_AMOUNT as Brokerage,
                          CMDL_SERVICE_TAX as ServiceTax,
                          CMDL_TRANSACTION_COST as TransactionCost,
                          CMDL_OTHER_CHARGES as OtherCharges,
                          (CMDL_BROKERAGE_AMOUNT+CMDL_SERVICE_TAX+CMDL_TRANSACTION_COST+CMDL_OTHER_CHARGES) as TotalCharges,
                          pkgreturnreport.GetSystemDate() as SystemDate,
                           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                          to_date('||''''||FrmDate||''''||') as FromDate,
                          to_date('||''''||ToDate||''''||') as ToDate
                   from   trtran051
                   where  CMDL_RECORD_STATUS not in(10200005,10200006) ';

        OPEN GenCursor for  QUERY_STR||finalCondition|| ' order by CMDL_EXECUTE_DATE' ;
      GOTO process_end;
  end if;

-- Commodity Report End
--------------------------------------------------------------------------------
-- Ruchi group Reorts Beigin

if varReportId = 'LCOUTSTANDINGSTMT' then

   QUERY_STR :='select  pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,2) as Company,
                        pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as Banker,
                        (select LBNK_ADDRESS_4 from TRMASTER306 where LBNK_PICK_CODE = TRAD_LOCAL_BANK )as Place,
                        TRAD_MATURITY_DATE DueDate,
                        TRAD_TRADE_REFERENCE as LcNo,
                        TRAD_ENTRY_DATE as LcDate,
                        TRAD_PRODUCT_QUANTITY as  Qty,
                        TRAD_PRODUCT_RATE as Rate,
                        TRAD_TRADE_FCY as AmountUs,
                        TRAD_TRADE_RATE as TradRate,
                        TRAD_TRADE_INR as AmountRs,
                        0 as InterestAmt,
                        PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,'||gconst.AMOUNTFCY||','||''''||frmDate||''''||') as OSFcyAmt,
                        PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,'||gconst.AMOUNTINR||','||''''||frmDate||''''||') as OSLclAmt,
                        pkgreturncursor.fncgetdescription(TRAD_VESSEL_NAME,2) VesselName,
                        pkgreturncursor.fncgetdescription(TRAD_PORT_NAME,2) Port,
                        TRAD_APP as App,
                        pkgreturncursor.fncgetdescription(TRAD_BENEFICIARY,2) as Benificiary,
                        pkgreturncursor.fncgetdescription(TRAD_TENOR_CODE,2) as Usance,
                        TRAD_TENOR_PERIOD as UsancePeriod,
                        pkgreturncursor.fncgetdescription(TRAD_TRANSACTION_TYPE,2) as TransactionType,
                        TRAD_CONTRACT_NO as ContractNo,
                        TRAD_ENTRY_DATE as ContractDate,
                        TRAD_BILL_DATE as BillDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                        to_date('||''''||frmDate||''''||') as AsonDate
                from    trtran002
                where   TRAD_RECORD_STATUS not in ('||gconst.statusdeleted||','||gconst.statusinactive||')
                        and TRAD_IMPORT_EXPORT not in (25900017,25900077)

                        --and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > '||''''||frmDate||''''||') or TRAD_PROCESS_COMPLETE = 12400002)
                        and TRAD_ENTRY_DATE <= '||''''||frmDate||''''||'
                        and TRAD_IMPORT_EXPORT in(25900001,25900053)
                        and  PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,'||gconst.AMOUNTFCY||','||''''||frmDate||''''||') != 0
                order by TRAD_MATURITY_DATE' ;
   --insert into temp values(QUERY_STR,'test');commit;
   OPEN GenCursor for  QUERY_STR ;
   GOTO process_end;
end if;

 If (Varreportid='CASHFLOWSTATEMENTFRW') Then
--   Open Gencursor For
 Query_Str := 'SELECT pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) Company,
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) Bank,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)Buysale,
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1)Remarks,
        deal_maturity_date MaturityDate,deal_execute_date BookingDate,
        DEAL_EXCHANGE_RATE Bookingrate,
        pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')Outstanding,
        pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date) Cancelrate,
        pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')Outstanding,
        pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) profitloss,
       pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * (pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) Bookoutstanding,
      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * (pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date)/pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') Canceloutstanig,
     '||''''||frmDate||''''||' AS FromDate,
       '||''''||toDate||''''||'  AS ToDate ' || varGroupField || '
  FROM    TRTRAN001
  WHERE  ((deal_process_complete                               = 12400001
         AND deal_complete_date                                      > '||''''||frmDate||''''||')
         OR deal_process_complete                                    = 12400002)
         AND DEAL_RECORD_STATUS NOT                                 IN (10200005,10200006)
         and  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') <> 0
         And DEAL_MATURITY_DATE  between '||''''||frmDate||''''||' and  '||''''||toDate||''''||'
          '||finalcondition||'
         order by deal_maturity_date ';
 Insert Into Temp Values (Query_Str,finalcondition);Commit;
  OPEN GenCursor for Query_Str ;
  Goto Process_End;
End If;



if varReportId = 'LCOUTSTANDINGSTMT' then

   QUERY_STR :='select  pkgreturncursor.fncgetdescription(l.TRAD_COMPANY_CODE,2) as Company,
                        pkgreturncursor.fncgetdescription(l.TRAD_LOCAL_BANK,2) as Banker,
                        (select LBNK_ADDRESS_4 from TRMASTER306 where LBNK_PICK_CODE = l.TRAD_LOCAL_BANK )as Place,
                        l.TRAD_MATURITY_DATE DueDate,
                        l.TRAD_TRADE_REFERENCE as LcNo,
                        l.TRAD_ENTRY_DATE as LcDate,
                        c.TRAD_PRODUCT_QUANTITY as  Qty,
                        c.TRAD_PRODUCT_RATE as Rate,
                        l.TRAD_TRADE_FCY as AmountUs,
                        l.TRAD_TRADE_RATE as TradRate,
                        l.TRAD_TRADE_INR as AmountRs,
                        0 as InterestAmt,
                        PKGFOREXPROCESS.FNCGETOUTSTANDING(l.trad_trade_reference, 0,0,'||gconst.AMOUNTFCY||','||''''||frmDate||''''||') as OSFcyAmt,
                        PKGFOREXPROCESS.FNCGETOUTSTANDING(l.trad_trade_reference, 0,0,'||gconst.AMOUNTINR||','||''''||frmDate||''''||') as OSLclAmt,
                        pkgreturncursor.fncgetdescription(c.TRAD_VESSEL_NAME,2) VesselName,
                        pkgreturncursor.fncgetdescription(c.TRAD_PORT_NAME,2) Port,
                        c.TRAD_APP as App,
                        pkgreturncursor.fncgetdescription(c.TRAD_BENEFICIARY,2) as Benificiary,
                        pkgreturncursor.fncgetdescription(c.TRAD_TENOR_CODE,2) as Usance,
                        c.TRAD_TENOR_PERIOD as UsancePeriod,
                        pkgreturncursor.fncgetdescription(c.TRAD_TRANSACTION_TYPE,2) as TransactionType,
                        --c.TRAD_CONTRACT_NO as ContractNo,
                        c.TRAD_TRADE_REFERENCE as ContractNo,
                        c.TRAD_ENTRY_DATE as ContractDate,
                        c.TRAD_BILL_DATE as BillDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                        to_date('||''''||frmDate||''''||') as AsonDate
                from    trtran002 l,trtran002 c

               where    l.TRAD_RECORD_STATUS not in (10200006,10200005)
                        and l.TRAD_IMPORT_EXPORT not in (25900017,25900077)

                        --and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > '||''''||frmDate||''''||') or TRAD_PROCESS_COMPLETE = 12400002)
                        and l.TRAD_ENTRY_DATE <=  '||''''||frmDate||''''||'
                        and l.TRAD_IMPORT_EXPORT in(25900001,25900053)
                        and PKGFOREXPROCESS.FNCGETOUTSTANDING(l.trad_trade_reference,0,0,'||gconst.AMOUNTFCY||','||''''||frmDate||''''||') != 0
                        and l.trad_reverse_reference= c.trad_trade_Reference
                order by l.TRAD_MATURITY_DATE ';

   --insert into temp values(QUERY_STR,'test');commit;
   OPEN GenCursor for  QUERY_STR ;
   GOTO process_end;
end if;

if varReportId = 'PURCHASECONTRACTRPT' then

     OPEN GenCursor for
        select pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,2) as ContractCompany,
               TRAD_TRADE_REFERENCE as OrderNo,TRAD_ENTRY_DATE as EntryDate,
               pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,2) as product,
               TRAD_PRODUCT_QUANTITY as ProductQty,TRAD_APP as App,
               pkgreturncursor.fncgetdescription(TRAD_VESSEL_NAME,2) as Vsl,
               pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) as Party,
               TRAD_VOYAGE as Voyage,
               TRAD_BILL_DATE as BillDate,
               TRAD_CONTRACT_NO as ContractNo,
               TRAD_ENTRY_DATE as ContractDate,
               pkgreturncursor.fncgetdescription(TRAD_TERM,2) as Term,
               TRAD_PRODUCT_RATE as Rate,
               TRAD_TRADE_FCY as OrderAmount,
               pkgreturncursor.fncgetdescription(TRAD_BENEFICIARY,2) as Benificiary,
               pkgreturncursor.fncgetdescription(TRAD_PORT_NAME,2) as LoadPort,
               pkgreturnreport.GetSystemDate() as SystemDate,
                pkgreturnreport.getCompanyName(varUserID ) as CompanyName,
               frmDate as FromDate,
               toDate as  ToDate
        From   Trtran002
        where  TRAD_IMPORT_EXPORT in(25900077,25900017)
               and TRAD_RECORD_STATUS not in (10200005,10200006)

               --and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > toDate) or TRAD_PROCESS_COMPLETE = 12400002)
               and TRAD_ENTRY_DATE between frmDate and toDate
        order by TRAD_ENTRY_DATE,pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,2);
     GOTO process_end;
end if;

--- reports are modified for vraj on 01-09-2009
--- reports are modified for vraj on 01-09-2009
if  varReportId in('IMPEXPCOVERDSTMTLCBASED','COSTINGHEDGUNHEDG') then
     delete from  trsystem981;commit;
     insert into trsystem981 values(frmDate,frmDate);
        Query_str :=  'Select pkgreturncursor.fncgetdescription(Company,2) Company,
        FXBkdWith,pkgreturncursor.fncgetdescription(Bank,2) Bank,
        pkgreturncursor.fncgetdescription(Currency,2) as Currency ,Place,LcDate,LCDueDate,FxDueDate,LCNumber,
        LCAmount,LcRate,Userref,AmountCovered,VesselName,App,ContractNo,
        LCRemarks,UtilizedAmount,UnCoveredAmount,ActualAmount,BkdRate,DealDate,DlNo,
        ActualAmtBooked,TotActualAmtBkd,SystemDate,pkgreturnreport.getCompanyName('||''''|| varUserID ||''''||' ) CompanyName,
        AsonDate,MTMRATE,
        MTMSPOT,mtmFrwdPrim,SpotRatePo,FWDPrimiumPo,TotalRatePO, diffrence,MTMPandL,
        HedgeAmount, SpotrateHedge,FrwdMaginHEdge,TotalrateHedge,DiffrenceHedge,PandL,
        MTMPandL + PandL TotalPandL,Remarks,ImpExp, EntryDate
        ' || varGroupField || '
        from VEWCOSTING where EntryDate <= '||''''|| frmDate ||''''||'';
        delete from temp;commit;
        insert into temp values(Query_str,finalCondition);
     OPEN GenCursor for  Query_str ||finalCondition;
     GOTO process_end;
end if;

if varReportID = 'SODETAILS' then

query_str := 'select
    trad_trade_reference traderef,pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName, pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) comp, pkgreturncursor.fncgetdescription(trad_buyer_seller,2) party,
    pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) currency,
    trad_user_reference userref, TRAD_REFERENCE_DATE refdate,
    pkgreturncursor.fncgetdescription(Trad_product_code,2) prod,  trad_product_quantity quantity,trad_product_rate prodrate,
    TRAD_TRADE_RATE tradrate, Trad_trade_fcy as soamt,
    nvl((select brel_reversal_fcy from trtran003 where brel_trade_reference=a.trad_trade_reference and brel_reversal_type = 25800006 ),0) as cancelled,
    nvl((select sum(brel_reversal_fcy) from trtran003 where brel_trade_reference in (select trad_trade_reference from trtran002 where trad_reverse_reference = a.trad_trade_reference) and brel_reversal_type = 25800001 ),0) as realised,
    nvl((select sum(brel_reversal_inr) from trtran003 where brel_trade_reference in (select trad_trade_reference from trtran002 where trad_reverse_reference = a.trad_trade_reference) and brel_reversal_type = 25800001 ),0) as realisedinr,
    pkgforexprocess.fncGetOutstanding(trad_trade_reference,1,0,1,'''||frmDate||''') as outstanding ,
    TRAD_Forward_RATE as FrwdRate,
    TRAD_MARGIN_RATE as MrgnRate,
    TRAD_SPOT_RATE as SpotRate,
    TRAD_MATURITY_DATE as Matdate
    from trtran002 a where trad_import_export  = 25900017';
delete from temp;commit;
insert into temp values (query_str,finalcondition);commit;
OPEN GenCursor for query_str||finalcondition;
Goto Process_End;
end if;

--ADDED BY AAKASH/ISHWAR 11-JUN-13 12:12 PM
if varReportID = 'PODETAILS' then

query_str := 'select pkgreturnreport.getCompanyname(' ||''''|| varUserID ||''''||') CompanyName, trad_trade_reference sysref,
pkgreturncursor.fncgetdescription(trad_company_code,1) comp,
pkgreturncursor.fncgetdescription(trad_buyer_seller,2) party,pkgreturncursor.fncgetdescription(trad_trade_currency,2) curr,
trad_user_reference userref, TRAD_REFERENCE_DATE refdate, pkgreturncursor.fncgetdescription(Trad_product_code,2) prod,
trad_product_quantity quantity,trad_product_rate prodrate, TRAD_TRADE_RATE bkgrate, Trad_trade_fcy as poamt,
nvl((select sum(trad_trade_fcy) from trtran002 b where b.trad_reverse_reference = a.trad_trade_reference and trad_import_export = 25900053),0) as lcamt,
nvl((select sum(trad_trade_inr) from trtran002 b where b.trad_reverse_reference = a.trad_trade_reference and trad_import_export = 25900053),0) as lcamtinr,
(nvl(a.trad_trade_fcy,0) - nvl((select sum(trad_trade_fcy) from trtran002 b where b.trad_reverse_reference = a.trad_trade_reference and b.trad_import_export = 25900053),0)) as ponotconv,
    TRAD_Forward_RATE as FrwdRate,
    TRAD_MARGIN_RATE as MrgnRate,
    TRAD_SPOT_RATE as SpotRate,
    TRAD_MATURITY_DATE as Matdate
  from  trtran002 a
where  trad_import_export  = 25900077
   and  trad_reference_date <= '''||frmDate||'''';

delete from temp;commit;
insert into temp values (query_str,finalcondition);commit;
OPEN GenCursor for query_str||finalcondition ||  ' order by trad_trade_reference';
Goto Process_End;
end if;


if VARREPORTID = 'OPENINTEREST' then
    open GENCURSOR for
       SELECT    a.OPEN_OPEN_INTEREST AS OPENINTEREST,
                a.OPEN_TRADE_DATE AS TradeDate,
             (SELECT SUM(pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,frmDate)/1000)
              FROM TRTRAN072
              LEFT OUTER JOIN TRTRAN071
              ON COSU_DEAL_NUMBER         =COPT_DEAL_NUMBER
              WHERE COSU_PROCESS_COMPLETE =12400002
              AND COPT_CONTRACT_TYPE      = 32800001
              AND COPT_EXPIRY_DATE       >=frmDate) BASEAMOUNT ,
  -- OPEN_OPEN_INTEREST * 0.06 as op,
        --    ROUND(DECODE(NVL(OPEN_OPEN_INTEREST * .06,0),0,0,
          -- (SELECT SUM(pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,frmDate)/1000) BASEAMOUNT
          ROUND(DECODE(NVL(OPEN_OPEN_INTEREST * .06,0),0,0,
         (SELECT SUM(pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,frmDate)/10) BASEAMOUNT
           FROM TRTRAN072
           LEFT OUTER JOIN TRTRAN071
           ON COSU_DEAL_NUMBER         =COPT_DEAL_NUMBER
           WHERE COSU_PROCESS_COMPLETE =12400002
           AND COPT_EXPIRY_DATE       >=frmDate
           AND COPT_CONTRACT_TYPE  = 32800001 ) / (OPEN_OPEN_INTEREST * 0.06)),2) AS PERCENTAGE,
         pkgreturnreport.getCompanyName( varUserID) as CompanyName,
         frmDate as  AsonDate
       -- TODATE as TODATE
     FROM TRTRAN076 a
     WHERE OPEN_RECORD_STATUS NOT IN(10200005,10200006)
     AND OPEN_TRADE_DATE   =frmDate;
    -- and  a.OPEN_TRADE_DATE between  '22-feb-2012' and '22-mar-2012';

    GOTO PROCESS_END;
End if;
---------------------------------------------
--if varReportID ='OSBUYSERCREDITSTMT' then
--  OPEN GenCursor for
--        select BCRD_BUYERS_CREDIT as BCNumber,
--               BCRD_SANCTION_REFERENCE as BkRefNo,
--               pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE,2) as BCCompany,
--               pkgreturncursor.fncgetdescription(a.TRAD_LOCAL_BANK,2) as LCOpeningBnk,
--               pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK,2) as BCBanker,
--               a.TRAD_TRADE_REFERENCE as LCNumber,
--               a.TRAD_MATURITY_DATE as LCDueDate,
--               a.TRAD_PRODUCT_QUANTITY as PurchaseQty,
--               a.TRAD_trade_RATE as ProductRate,
--               a.TRAD_TRADE_FCY as LCAmountFcy,
--               (select pkgreturncursor.fncgetdescription(TRAD_BENEFICIARY,2) from trtran002 where trad_trade_reference = a.trad_reverse_reference)as Benificiary,
--               (select TRAD_BILL_DATE from trtran002 where trad_trade_reference = a.trad_reverse_reference) as BillDate,
--               BCRD_DUE_DATE as BCDueDate,
--               BCRD_SANCTIONED_INR as BCSanctionedINR,
--               BCRD_INTEREST_RATE as InterestRate,
--               BCRD_INTEREST_FCY as InterestFcy,
--               FDRF_FD_NUMBER as FDNumber,
--               FDRF_DEPOSIT_AMOUNT as FDAmount,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               frmDate as  FromDate,
--               ToDate as ToDate
--
--        from   trtran016,trtran002 a,trtran007,trtran018,trtran017
--        where  BCRD_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive)
--               and a.TRAD_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--               and TRLN_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--               and FDRF_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--               and FDLN_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--
--               and BCRD_BUYERS_CREDIT = TRLN_LOAN_NUMBER
--               and TRLN_TRADE_REFERENCE = a.TRAD_TRADE_REFERENCE
--
--               and FDRF_FD_NUMBER =  FDLN_FD_NUMBER
--               and BCRD_BUYERS_CREDIT = FDLN_LIEN_REFERENCE
--
--               and ((BCRD_PROCESS_COMPLETE = 12400001 and BCRD_COMPLETION_DATE > toDate) or BCRD_PROCESS_COMPLETE = 12400002)
--               and BCRD_REQUEST_DATE between frmDate and toDate
--          order by BCRD_BUYERS_CREDIT;
--     GOTO process_end;
--end if;

--if varReportID ='OSBUYSERCREDITSTMT' then
--  OPEN GenCursor for
--        select FCLN_LOAN_NUMBER as BCNumber,
--               FCLN_BANK_REFERENCE as BkRefNo,
--               pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE,2) as BCCompany,
--               pkgreturncursor.fncgetdescription(a.TRAD_LOCAL_BANK,2) as LCOpeningBnk,
--               pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) as BCBanker,
--               pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) as currency,
--               a.TRAD_TRADE_REFERENCE as LCNumber,
--               a.TRAD_MATURITY_DATE as LCDueDate,
--               a.TRAD_PRODUCT_QUANTITY as PurchaseQty,
--               a.TRAD_trade_RATE as ProductRate,
--               a.TRAD_TRADE_FCY as LCAmountFcy,
--               (select pkgreturncursor.fncgetdescription(TRAD_BENEFICIARY,2) from trtran002 where trad_trade_reference = a.trad_reverse_reference)as Benificiary,
--               (select TRAD_BILL_DATE from trtran002 where trad_trade_reference = a.trad_reverse_reference) as BillDate,
--               FCLN_MATURITY_TO as BCDueDate,
--               FCLN_SANCTIONED_INR as BCSanctionedINR,
--               FCLN_INTEREST_RATE as InterestRate,
--               --BCRD_INTEREST_FCY as InterestFcy,
--              -- FDRF_FD_NUMBER as FDNumber,
--              -- FDRF_DEPOSIT_AMOUNT as FDAmount,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               frmDate as  FromDate,
--               ToDate as ToDate
--
--        from   TRTRAN005,trtran002 a,trtran007
--        --,trtran018,trtran017
--        where  FCLN_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive)
--               and a.TRAD_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--               and TRLN_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--            --   and FDRF_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--            --   and FDLN_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
--
--               and FCLN_LOAN_NUMBER = TRLN_LOAN_NUMBER
--               and TRLN_TRADE_REFERENCE = a.TRAD_TRADE_REFERENCE
--
--         --      and FDRF_FD_NUMBER =  FDLN_FD_NUMBER
--         --      and FCLN_LOAN_NUMBER = FDLN_LIEN_REFERENCE
--
--               and ((FCLN_PROCESS_COMPLETE = 12400001 and FCLN_COMPLETE_DATE > toDate) or FCLN_PROCESS_COMPLETE = 12400002)
--               and FCLN_SANCTION_DATE between frmDate and toDate
--          order by FCLN_LOAN_NUMBER;
--     GOTO process_end;
--end if;
--if varReportID ='OSHEDGEDEALRPTWITHWEIGHTEDAVG' then
--    QUERY_STR := 'select deal_COMPANY_CODE AS COMPANYCODE,
--                         deal_deal_number AS DEALNO,deal_user_reference as HDGUSERREF,
--                         pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
--                         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
--                         pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
--                         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
--                         pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
--                         pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
--                         pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,1,1,'||''''||frmDate||''''||') AS FCY,
--                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
--                         DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
--                         pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
--                                                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
--                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
--                         DEAL_MATURITY_FROM AS MATURITYFROM,
--                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
--                   --    PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
--                         (pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,1,1,'||''''||frmDate||''''||')*
--                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2))
--                         as OtherAmount,
--                         decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2),PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4)) as LocalRate,
--                         '||''''||frmDate||''''||'as AsonDate,
--                         pkgreturnreport.GetSystemDate() as SystemDate,
--                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
--                 from    TRTRAN001
--                 where   deal_RECORD_STATUS not in(10200006,10200005) and
--                         deal_hedge_trade = 26000001 and
--                         ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002) ';
--
--    insert into temp values (QUERY_STR, finalCondition);
--
--    OPEN GenCursor for QUERY_STR||finalCondition;
--    GOTO process_end;
--end if;

 if varReportID ='OSHEDGEDEALRPTWITHWEIGHTEDAVG'  then
    if varReportID ='OSHEDGEDEALRPTWITHWEIGHTEDAVG' then
          QUERY_STR1 := 0 ;
    else
          QUERY_STR1 := 1 ;
    end if;
    QUERY_STR := 'select deal_COMPANY_CODE AS COMPANYCODE,
                         deal_deal_number AS DEALNO,deal_dealer_remarks as HDGUSERREF,
                         pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as COMPANYDESC,
                         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
                         pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
                         decode('||''''||QUERY_STR1||''''||',0,DEAL_COUNTER_PARTY,null) as CounterPartyCode,
                         pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                         pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) AS SWAPOUTRIGHT,
                         --Updated by Gouri on 081210 on
                         pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,1,1,'||''''||frmDate||''''||') AS FCY,
                      --   pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,2,1,'||''''||frmDate||''''||') AS FCY,
                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
                         DEAL_EXECUTE_DATE AS EXECUTEDDATE,DEAL_USER_ID as USERID,
                         pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
                                                                PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)))  as HEDGELCLAMT,
                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
                         DEAL_MATURITY_FROM AS MATURITYFROM,
                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
                   --    PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
                              --Updated by Gouri on 081210 on
                         (pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,1,1,'||''''||frmDate||''''||')*
                         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2))
                         as OtherAmount,
                         decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2),PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4)) as LocalRate,
                        -- DEAL_COMPANY_CODE as companycode,
                        -- pkreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                         '||''''||frmDate||''''||'as AsonDate,
                         pkgreturnreport.GetSystemDate() as SystemDate,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                         ' || varGroupField || '
                 from    TRTRAN001
                 where   deal_RECORD_STATUS not in(10200006,10200005) and
                       -- updated by gouri on 040111
                       --modified by manjunath because we are taking utlization of hedge deal only for the unhedged portion
                       --for outstandging position we need to use utlitrade deal
                          pkgforexprocess.fncGetOutstanding(deal_DEAL_NUMBER,1,1,1,'||''''||frmDate||''''||') !=0  and
                         deal_hedge_trade = 26000001 and
                         ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002) ';

    delete from temp;
    insert into temp values (QUERY_STR, finalCondition);
    commit;

    OPEN GenCursor for QUERY_STR||finalCondition;
    GOTO process_end;
end if;

if varReportID ='OSBUYSERCREDITSTMT' then
  OPEN GenCursor for
        select FCLN_LOAN_NUMBER as BCNumber,
               FCLN_BANK_REFERENCE as BkRefNo,
               pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE,2) as BCCompany,
               pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LCOpeningBnk,
               pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) as BCBanker,
               pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) as currency,
               FCLN_SANCTION_DATE as BCSanctionDate,
               TRAD_TRADE_REFERENCE as LCNumber,
               TRAD_MATURITY_DATE as LCDueDate,
               TRAD_trade_RATE as ProductRate,
               TRAD_TRADE_FCY as LCAmountFcy,
               TRAD_BILL_DATE as BillDate,
               FCLN_MATURITY_TO as BCDueDate,
               FCLN_SANCTIONED_INR as BCSanctionedINR,
               FCLN_INTEREST_RATE as InterestRate,
               pkgreturnreport.GetSystemDate() as SystemDate,
                pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
               frmDate as  FromDate,
               ToDate as ToDate
        from   TRTRAN005,trtran002
        where  FCLN_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive)
               --and TRAD_RECORD_STATUS not in (gconst.statusdeleted,gconst.statusinactive)
               and FCLN_LOAN_NUMBER = TRAD_TRADE_REFERENCE(+)
               and ((FCLN_PROCESS_COMPLETE = 12400001 and FCLN_COMPLETE_DATE > toDate) or FCLN_PROCESS_COMPLETE = 12400002)
               and FCLN_SANCTION_DATE between frmDate and toDate
               and FCLN_LOAN_TYPE in(23600001)
          order by FCLN_LOAN_NUMBER;
     GOTO process_end;
end if;


if  varReportID ='BCCOVEREDSTMT' then
 OPEN GenCursor for
           select  pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE,2) as  BCCompany,
                   pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2)as FXBkdWith,
                   pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) as BCBank,
                   (select LBNK_ADDRESS_4 from TRMASTER306 where LBNK_PICK_CODE = FCLN_LOCAL_BANK ) as Place,
                   pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) as currency,
                   FCLN_MATURITY_TO as BCDueDate,
                   FCLN_SANCTION_DATE as BCEntryDate,
                   DEAL_MATURITY_DATE as FxDueDate,
                   FCLN_LOAN_NUMBER as BCNumber,
                   FCLN_SANCTIONED_FCY as BCAmount,
                   -- pkgreturncursor.fncgetdescription(TRAD_VESSEL_NAME,2)as VesselName,
                   --TRAD_APP as App,
                   -- TRAD_CONTRACT_NO as ContractNo,
                   HEDG_HEDGED_FCY as AmountCovered,
                   (FCLN_SANCTIONED_FCY - HEDG_HEDGED_FCY ) as UnCoveredAmount,
                   DEAL_EXCHANGE_RATE as BkdRate,
                   DEAL_EXECUTE_DATE as DealDate,
                   DEAL_DEAL_NUMBER as DlNo,
                   DEAL_BASE_AMOUNT as ActualAmtBooked,
                   (select sum(hedgefcy) from
                            (select sum(HEDG_HEDGED_FCY)  as hedgefcy
                            from   trtran002,trtran001,trtran004
                            where  DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER
                                   and DEAL_SERIAL_NUMBER = HEDG_DEAL_SERIAL
                                   and HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
                                   and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
                                   and TRAD_ENTRY_DATE <= frmDate
                                   and TRAD_RECORD_STATUS not in(10200005,10200006)
                                   and deal_RECORD_STATUS not in(10200005,10200006)
                            group by HEDG_DEAL_NUMBER) ) as TotActualAmtBkd,
                   pkgreturnreport.GetSystemDate() as SystemDate,
                    pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
                   frmDate as  FromDate
            from   TRTRAN005,trtran001,trtran004
            where  FCLN_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive)
                   and deal_RECORD_STATUS not in(gconst.statusdeleted,gconst.statusinactive)
                   and DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER
                   and DEAL_SERIAL_NUMBER = HEDG_DEAL_SERIAL
                   AND HEDG_TRADE_REFERENCE = FCLN_LOAN_NUMBER
                   and ((FCLN_PROCESS_COMPLETE = 12400001 and FCLN_COMPLETE_DATE >frmDate) or FCLN_PROCESS_COMPLETE = 12400002)
                   and FCLN_SANCTION_DATE <= frmDate;
     GOTO process_end;
     end if;

--if varReportID ='BCMATURINGFORTHEPERIOD' then
--
-- OPEN GenCursor for
--
--    select pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE,2) as Company,
--           BCRD_BUYERS_CREDIT BCNo,
--           BCRD_REQUEST_DATE ReqDate,
--           pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK,2) as LocalBank,
--           pkgreturncursor.fncgetdescription(BCRD_FOREIGN_BANK,2) as ForeignBank,
--           pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE,2) as Currency,
--           BCRD_SANCTIONED_FCY as SactionedFcy,
--           BCRD_CONVERSION_RATE as Rate,
--           BCRD_SANCTIONED_INR as SactionedInr,
--           BCRD_DUE_DATE as BCDueDate,
--           BCRD_HEDGE_REFERENCE as HedgeRef,
--           pkgreturnreport.GetSystemDate() as SystemDate,
--            pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--           frmDate as  FromDate,
--           toDate as ToDate
--    from   trtran016
--    where  BCRD_RECORD_STATUS NOT IN(gconst.statusdeleted,gconst.statusinactive)
--
--           and ((BCRD_PROCESS_COMPLETE = 12400001  and BCRD_COMPLETION_DATE > toDate) or BCRD_PROCESS_COMPLETE = 12400002)
--           and BCRD_DUE_DATE between frmDate and toDate
--    order by BCRD_DUE_DATE;
--
--    GOTO process_end;
--end if;

if varReportID ='BCMATURINGFORTHEPERIOD' then
    QUERY_STR1 :='';
    QUERY_STR := 'select pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE,2) as Company,
                         FCLN_LOAN_NUMBER BCNo,
                         FCLN_SANCTION_DATE ReqDate,
                         pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) as LocalBank,
                         pkgreturncursor.fncgetdescription(FCLN_FOREIGN_BANK,2) as ForeignBank,
                         pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) as Currency,
                         FCLN_SANCTIONED_FCY as SactionedFcy,
                         nvl2((select  avg(deal_exchange_rate)
                               from trtran001,trtran004
                               where deal_deal_number = HEDG_DEAL_NUMBER
                                     and HEDG_TRADE_REFERENCE = FCLN_LOAN_NUMBER),(select  avg(deal_exchange_rate)
                                                                                   from trtran001,trtran004
                                                                                   where deal_deal_number = HEDG_DEAL_NUMBER
                                                                                         and HEDG_TRADE_REFERENCE = FCLN_LOAN_NUMBER),'||''''||QUERY_STR||''''||') as Rate,
                         nvl2((select  avg(deal_exchange_rate)
                               from trtran001,trtran004
                               where deal_deal_number = HEDG_DEAL_NUMBER
                                     and HEDG_TRADE_REFERENCE = FCLN_LOAN_NUMBER),(select  avg(deal_exchange_rate) * FCLN_SANCTIONED_FCY
                                                                                   from trtran001,trtran004
                                                                                   where deal_deal_number = HEDG_DEAL_NUMBER
                                                                                         and HEDG_TRADE_REFERENCE = FCLN_LOAN_NUMBER),'||''''||QUERY_STR||''''||') as SactionedInr,
                         FCLN_MATURITY_TO as BCDueDate,
                         FCLN_BANK_REFERENCE as HedgeRef,
                         pkgreturnreport.GetSystemDate() as SystemDate,
                          pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         to_date('||''''||frmDate||''''||') as  FromDate,
                         to_date('||''''||toDate||''''||') as ToDate
                  from   trtran005
                  where  FCLN_RECORD_STATUS NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||')
                         and ((FCLN_PROCESS_COMPLETE = 12400001  and FCLN_COMPLETE_DATE > '||''''||toDate||''''||') or FCLN_PROCESS_COMPLETE = 12400002) ';

     delete from temp;commit;insert into temp values(QUERY_STR,finalCondition);commit;
     OPEN GenCursor for QUERY_STR||finalCondition|| ' order by FCLN_MATURITY_TO';
    GOTO process_end; --------------------------------------------------------------------------------
end if;
if varReportID='SBILETTERFOREXPORT' then

   QUERY_STR :='select  DEAL_DEAL_NUMBER as DealNo,
                        DEAL_USER_REFERENCE as Dealef,
                        deal_execute_date as DealDate,
                        deal_buy_sell as BuySellCode,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as BuySell,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OtherCurrency,
                        DEAL_MATURITY_DATE as DeliveryDate,
                        DEAL_BASE_AMOUNT as BaseAmount,
                        DEAL_SPOT_RATE as SpotRate,
                        DEAL_Forward_RATE as DisountRate,
                        DEAL_MARGIN_RATE as MarginRate,
                        (select USER_USER_NAME from trsystem022 where USER_USER_ID=DEAL_USER_ID) as DealerName,
                        LBNK_LONG_DESCRIPTION as BnkLongDesc,
                        LBNK_CONTACT_PERSON as ContactPerson,
                        LBNK_ADDRESS_1 as Address1,
                        LBNK_ADDRESS_2 as Address2,
                        LBNK_ADDRESS_3 as Address3,
                        LBNK_ADDRESS_4 as Address4,
                        (select PRMC_ADDRESS_1 from trsystem051) as CompAddr1,
                        (select PRMC_ADDRESS_2 from trsystem051) as CompAddr2,
                        (select PRMC_ADDRESS_3 from trsystem051) as CompAddr3,
                        (select PRMC_ADDRESS_4 from trsystem051) as CompAddr4,
                        (select PRMC_PHONE_NUMBER from trsystem051) as PhNo,
                        (select PRMC_FAX_NUMBER from trsystem051) as FaxNo,
                        (select PRMC_EMAIL_ID from trsystem051) as Email,
                        pkgreturnreport.getCompanyName() as CompName,
                        pkgreturnreport.GetSystemDate() as SystemDate
                from    trtran001,trmaster306
                where   DEAL_RECORD_STATUS not in('||gconst.statusdeleted||','||gconst.statusinactive||')
                        and lbnk_record_status not in('||gconst.statusdeleted||','||gconst.statusinactive||')
                        and LBNK_PICK_CODE = DEAL_COUNTER_PARTY
                        and DEAL_HEDGE_TRADE in('||gconst.HEDGEDEAL||')
                        and DEAL_COUNTER_PARTY = 30600003
                        and ((deal_process_complete = 12400001  and deal_complete_date > '||''''||toDate||''''||') or deal_process_complete = 12400002) ';
     OPEN GenCursor for  QUERY_STR||finalCondition;
     GOTO process_end;
end if;

if varReportID='ANNEXURESPOTFORMARDRPT' then
   dattemp := pkgforexprocess.fncGetCurrSpotDate(30400004,30400003, frmdate);commit;
     OPEN GenCursor for
                select a.SerialNumber,a.RateTime,
                       a.EUSDINRbid,a.EUSDINRask,a.EEURINRbid,a.EEURINRask,
                       a.EGBPINRbid,a.EGBPINRask,a.EEURUSDask,a.EEURUSDbid,
                       a.EGBPUSDbid,a.EGBPUSDask,
                       0 as USDINRbid,0 as USDINRask,0 as EURUSDask,0 as EURUSDbid,0 as USDJPYbid,0 as USDJPYask,0 as GBPUSDbid,0 as GBPUSDask,0 as USDCHFbid,0 as USDCHFask,0 as USDCADbid,0 as USDCADask,
                       0 as janbid,0 as janask,0 as febbid,0 as febask,0 as marbid,0 as marchask,0 as aprilbid,0 as aprilask,0 as maybid,0 as mayask,
                       0 as junebid,0 as juneask,0 as julybid,0 as julyask,0 as augustbid,0 as augustask,0 as sepbid,0 as sepask,0 as octbid,0 as octask,
                       0 as novbid,0 as novask,0 as decbid,0 as decask,
                       '' as mon1,'' as mon2,'' as mon3,''  as mon3,'' as mon4,'' as mon5,'' as mon6,'' as mon7,'' as mon8,'' as mon9,'' as mon10,'' as mon11,'' as mon12,
                       frmDate as FromDate,
                       pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                       0 as status
                from
                      (SELECT drat_serial_number as SerialNumber,drat_rate_time as RateTime,
                              nvl(sum(decode(dRAT_CURRENCY_CODE,30400004, decode(drat_FOR_CURRENCY,30400003, drat_SPOT_BID))),0)  as EUSDINRbid,
                              nvl(sum(decode(dRAT_CURRENCY_CODE,30400004, decode(drat_FOR_CURRENCY,30400003, drat_SPOT_ASK))),0)  as EUSDINRask,
                              nvl(sum( decode(drat_CURRENCY_CODE,30400002,decode(drat_FOR_CURRENCY,30400003, drat_SPOT_ASK))),0) as EEURINRask,
                              nvl(sum( decode( drat_CURRENCY_CODE,30400002,decode(drat_FOR_CURRENCY,30400003, drat_SPOT_BID))),0) as EEURINRbid,
                              nvl(sum( decode( drat_CURRENCY_CODE,30400006,decode(drat_FOR_CURRENCY,30400003, drat_SPOT_BID))),0) as EGBPINRbid,
                              nvl(sum( decode( drat_CURRENCY_CODE,30400006,decode(drat_FOR_CURRENCY,30400003, drat_SPOT_ASK))),0) as EGBPINRask,
                              nvl(sum( decode(drat_CURRENCY_CODE,30400002,decode(drat_FOR_CURRENCY,30400004, drat_SPOT_ASK))),0) as EEURUSDask,
                              nvl(sum( decode( drat_CURRENCY_CODE,30400002,decode(drat_FOR_CURRENCY,30400004, drat_SPOT_BID))),0) as EEURUSDbid,
                              nvl(sum( decode( drat_CURRENCY_CODE,30400006,decode(drat_FOR_CURRENCY,30400004, drat_SPOT_BID ))),0) as EGBPUSDbid,
                              nvl(sum( decode( drat_CURRENCY_CODE,30400006,decode(drat_FOR_CURRENCY,30400004, drat_SPOT_ASK ))),0) as EGBPUSDask
                      from   trtran012
                      where  drat_effective_date=frmDate
                      group by drat_serial_number,drat_rate_time
                      order by drat_serial_number)a
                union
                select  0 as SerialNumber,
                        b.ratetime as RateTime,
                        0 as EUSDINRbid,0 as EUSDINRask,0 as EEURINRbid,0 as EEURINRask,
                        0 as EGBPINRbid,0 as EGBPINRask,0 as EEURUSDask,0 as EEURUSDbid,
                        0 as EGBPUSDbid,0 as EGBPUSDask,
                        a.USDINRbid, a.USDINRask, EURUSDask,EURUSDbid,USDJPYbid,USDJPYask,GBPUSDbid,GBPUSDask,USDCHFbid,USDCHFask,USDCADbid,USDCADask,
                        b.janbid, b.janask,b.febbid,b.febask,b.marbid,b.marchask,b.aprilbid,b.aprilask,b.maybid,b.mayask,
                        b.junebid,b.juneask,b.julybid,b.julyask,b.augustbid,b.augustask,b.sepbid,b.sepask,b.octbid,b.octask,b.novbid,b.novask,b.decbid,b.decask,
                        b.mon1,b.mon2,b.mon3,b.mon3,b.mon4,b.mon5,b.mon6,b.mon7,b.mon8,b.mon9,b.mon10,b.mon11,b.mon12,
                        frmDate as FromDate,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
                        1 as status
                from
                        (select sum(decode(RATE_CURRENCY_CODE,30400004, decode(RATE_FOR_CURRENCY,30400003, RATE_SPOT_BID)))  as USDINRbid,
                                sum(decode(RATE_CURRENCY_CODE,30400004, decode(RATE_FOR_CURRENCY,30400003, RATE_SPOT_ASK)))  as USDINRask,
                                sum( decode( RATE_CURRENCY_CODE,30400002,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_ASK) )) as EURUSDask,
                                sum( decode( RATE_CURRENCY_CODE,30400002,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_BID) )) as EURUSDbid,
                                sum(decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400005, RATE_SPOT_BID))) as USDJPYbid,
                                sum(decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400005, RATE_SPOT_ASK))) as USDJPYask,
                                sum( decode( RATE_CURRENCY_CODE,30400006,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_BID )  ) )as GBPUSDbid,
                                sum( decode( RATE_CURRENCY_CODE,30400006,decode(RATE_FOR_CURRENCY,30400004, RATE_SPOT_ASK )  ) )as GBPUSDask,
                                sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400001, RATE_SPOT_BID ) ) ) as USDCHFbid,
                                sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400001, RATE_SPOT_ASK ) ) ) as USDCHFask,
                                sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400007, RATE_SPOT_BID) ) ) as USDCADbid,
                                sum( decode( RATE_CURRENCY_CODE,30400004,decode(RATE_FOR_CURRENCY,30400007, RATE_SPOT_ASK) ) ) as USDCADask
                         from   trsystem009
                         where  RATE_SERIAL_NUMBER= (select max(RATE_SERIAL_NUMBER)
                                                     from trsystem009
                                                     where RATE_EFFECTIVE_DATE =frmDate)
                                                            and RATE_EFFECTIVE_DATE =frmDate) A,
                        (select RATE_MONTH1_BID *100 as janbid, RATE_MONTH1_ASK *100 as janask,to_char(frmDate,'MONTH') as mon1,
                                RATE_MONTH2_BID *100 as febbid ,RATE_MONTH2_ASK *100 as febask,to_char(add_months(frmDate,1),'MONTH') as mon2,
                                RATE_MONTH3_BID *100 as marbid, RATE_MONTH3_ASK*100 as marchask ,to_char(add_months(frmDate,2),'MONTH') as mon3,
                                RATE_MONTH4_BID *100 as aprilbid,RATE_MONTH4_ASK*100 as aprilask,to_char(add_months(frmDate,3),'MONTH') as mon4,
                                RATE_MONTH5_BID *100 as maybid,RATE_MONTH5_ASK *100 as mayask,to_char(add_months(frmDate,4),'MONTH') as mon5,
                                RATE_MONTH6_BID*100 as junebid,RATE_MONTH6_ASK*100 as juneask,to_char(add_months(frmDate,5),'MONTH') as mon6,
                                RATE_MONTH7_BID *100 as julybid,RATE_MONTH7_ASK *100 as julyask,to_char(add_months(frmDate,6),'MONTH') as mon7,
                                RATE_MONTH8_BID *100 as augustbid,RATE_MONTH8_ASK*100 as augustask,to_char(add_months(frmDate,7),'MONTH') as mon8,
                                RATE_MONTH9_BID*100 as sepbid, RATE_MONTH9_ASK*100 as sepask,to_char(add_months(frmDate,8),'MONTH') as mon9,
                                RATE_MONTH10_BID*100 as  octbid, RATE_MONTH10_ASK*100 as octask,to_char(add_months(frmDate,9),'MONTH') as mon10,
                                RATE_MONTH11_BID*100 as novbid,RATE_MONTH11_ASK*100 as novask,to_char(add_months(frmDate,10),'MONTH') as mon11,
                                RATE_MONTH12_BID*100 as decbid, RATE_MONTH12_ASK *100 as decask,to_char(add_months(frmDate,11),'MONTH') as mon12,
                                RATE_RATE_TIME as ratetime
                         from  trsystem009
                         where RATE_SERIAL_NUMBER= (select max(RATE_SERIAL_NUMBER)
                                                    from trsystem009
                                                    where RATE_EFFECTIVE_DATE =frmDate)
                               and RATE_EFFECTIVE_DATE = frmDate
                               and RATE_CURRENCY_CODE =30400004
                               and RATE_FOR_CURRENCY= 30400003) B;
   GOTO process_end;
end if;
-- Nagreeka Reports
if varReportID='NOTIONALORDERPANDL' then

   QUERY_STR :='select TRAD_TRADE_REFERENCE as OrderNo,
                TRAD_USER_REFERENCE as RefNo,
                TRAD_ENTRY_DATE as OrderDate,
                pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,
                TRAD_TRADE_FCY as Amount,
                TRAD_TRADE_RATE as Rate,
                DEAL_DEAL_NUMBER as DealNo,
                DEAL_EXCHANGE_RATE as DealRate,
                DEAL_BASE_AMOUNT as DealAmount,
                PKGRETURNREPORT.fncgetprofitloss(TRAD_TRADE_FCY,TRAD_TRADE_RATE,DEAL_EXCHANGE_RATE,DEAL_BUY_SELL) as ProfitLoss,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnreport.GetSystemDate() as SystemDate,
                to_Date('||''''||frmDate||''''||') as FromDate,
                to_Date('||''''||toDate||''''||') as ToDate
          from  trtran001,trtran002,trtran004
          where DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER
                and HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
                and deal_record_status not in (10200005,10200006)
                and trad_record_status not in (10200005,10200006)
                and HEDG_RECORD_STATUS not in (10200005,10200006)
                and hedg_create_date between '||''''||frmDate||''''||' and '||''''||toDate||'''';
  --    insert into temp values (   QUERY_STR,finalCondition);commit;
   OPEN GenCursor for  QUERY_STR|| ' order by  TRAD_IMPORT_EXPORT, TRAD_USER_REFERENCE,TRAD_TRADE_CURRENCY';
  GOTO process_end;
end if;



 IF  ((varReportID='BOOKINGMASTER') OR  (varReportID='FORWCONTFORPNB')  OR  (varReportID='VIJAYABANK') OR (varReportID='FORWEXCCONTBOOKINGAXIS')OR (varReportID='FORWEXPCONTSBI')OR (varReportID='FORWCONTSYNDICATEBANK') ) THEN
  Query_Str :=' SELECT  LBNK_LONG_DESCRIPTION as BANKNAME,
                  LBNK_ADDRESS_1 AS ADDRESS1,
                  LBNK_ADDRESS_2 AS ADDRESS2,
                  LBNK_ADDRESS_3 AS ADDRESS3,
                  LBNK_ADDRESS_4 AS ADDRESS4,
                  LBNK_ACCOUNT_NUMBER as ACCNo,
                  LBNK_LIMIT_INR AS BANKLIMIT,
                  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                  decode(DEAL_BUY_SELL,25300001,' || '''Import''' || ', 25300002,' || '''Export''' ||  ') as IMPORTEXPORT1,
                  decode(DEAL_BUY_SELL,25300001,' || '''BOUGHT''' || ', 25300002,' || '''SOLD''' ||  ') as BOUGHT,
                  pkgreturncursor.fncgetdescription (DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                  pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
                  DEAL_BASE_AMOUNT AS BASEAMOUNT,
                  DEAL_EXCHANGE_RATE AS BOOKRATE,
                  DEAL_EXECUTE_DATE AS ExecuteDate,
                  DEAL_MATURITY_FROM AS DMATURITYFRMDATE,
                  DEAL_MATURITY_DATE AS DMATURITYTODATE,
                  DEAL_DEALER_REMARKS as REMARKS,
                  DEAL_USER_REFERENCE as USERREFERENCE,
                  --TRAD_MATURITY_DATE AS TMATURITYTO,
                 -- pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,2) AS IMPORTEXPORT1,
                 --DEAL_EXECUTE_DATE AS BOOKINGDATE,
                -- DEAL_DEAL_NUMBER as DealNumber,
                -- pkgreturncursor.fncgetdescription( DEAL_COUNTER_PARTY,2) as CounterParty,
                  COMP_LONG_DESCRIPTION AS COMPNAME,
                  COMP_ADDRESS_1 AS COMPADDRESS1,
                  COMP_ADDRESS_2 AS COMPADDRESS2,
                  COMP_ADDRESS_3 AS COMPADRESS3,
                  COMP_ADDRESS_4 AS COMPADRESS4,
                  pkgreturnreport.GetSystemDate() as SystemDate,
                      to_date('||''''||frmDate||''''||') as AsonDate,
                       to_date('||''''||frmDate||''''||') as FromDate,
                       to_date('||''''||toDate||''''||') as ToDate,
                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
         FROM    TRTRAN001,TRMASTER306,TRMASTER301
         WHERE   LBNK_PICK_CODE=DEAL_COUNTER_PARTY
          AND     COMP_COMPANY_CODE=DEAL_COMPANY_CODE
         AND     DEAL_RECORD_STATUS NOT IN (10200005,10200006)
         and     lbnk_record_status NOT IN (10200005,10200006) ';
           insert into temp values (Query_Str,finalCondition); commit;
  OPEN GenCursor for Query_Str || finalCondition ||' order by DEAL_EXECUTE_DATE '   ;

   Goto Process_End;
 end if;
---------------------------------------------------------------------------
 IF  (varReportID='CANCELLATIONMASTER') or (varReportID='FORWCONTAXISBANK') THEN
  Query_Str :='select LBNK_LONG_DESCRIPTION as BANKNAME,
                  LBNK_ADDRESS_1 AS ADDRESS1,
                  LBNK_ADDRESS_2 AS ADDRESS2,
                  LBNK_ADDRESS_3 AS ADDRESS3,
                  LBNK_ADDRESS_4 AS ADDRESS4,
                  LBNK_ACCOUNT_NUMBER as ACCNo,
                  DEAL_EXECUTE_DATE AS BOOKINGDATE,
                  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
                  decode(DEAL_BUY_SELL,25300001,' || '''Import''' || ', 25300002,' || '''Export''' ||  ') as IMPORTEXPORT1,
                  pkgreturncursor.fncgetdescription (DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                  pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
                  DEAL_BASE_AMOUNT AS BASEAMOUNT,
                  DEAL_EXCHANGE_RATE AS BOOKRATE,
                  CDEL_CANCEL_DATE as CANCELLDATE,
                  CDEL_CANCEL_AMOUNT as CANCELLAMOUNT,
                   CDEL_CANCEL_RATE as CANRATE,
                  --DEAL_EXECUTE_DATE AS ExecuteDate,
                   DEAL_DEAL_NUMBER as DealNumber,
                 -- CDEL_DELIVERY_FROM as deliveryfrm,
                  CDEL_CANCEL_INR as cancelinr,
                  DEAL_MATURITY_FROM AS DMATURITYFRMDATE,
                  DEAL_MATURITY_DATE AS DMATURITYTODATE,
                  DEAL_DEALER_REMARKS as REMARKS,
                  DEAL_USER_REFERENCE as USERREFERENCE,
                 pkgreturncursor.fncgetdescription( DEAL_COUNTER_PARTY,2) as CounterParty,
                 pkgreturnreport.GetSystemDate() as SystemDate,
                      to_date('||''''||frmDate||''''||') as AsonDate,
                       to_date('||''''||frmDate||''''||') as FromDate,
                      to_date('||''''||toDate||''''||') as ToDate,
                  COMP_LONG_DESCRIPTION AS COMPNAME,
                  COMP_ADDRESS_1 AS COMPADDRESS1,
                  COMP_ADDRESS_2 AS COMPADDRESS2,
                  COMP_ADDRESS_3 AS COMPADRESS3,
                  COMP_ADDRESS_4 AS COMPADRESS4,
                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
          FROM   TRTRAN001,TRMASTER306,trtran006,TRMASTER301
          WHERE   LBNK_PICK_CODE=DEAL_COUNTER_PARTY
          and    DEAL_DEAL_NUMBER=CDEL_DEAL_NUMBER
          AND    COMP_COMPANY_CODE=DEAL_COMPANY_CODE
          and    DEAL_RECORD_STATUS NOT IN (10200005,10200006)
          and    CDEL_RECORD_STATUS NOT IN (10200005,10200006)
          and    LBNK_RECORD_STATUS NOT IN (10200005,10200006)';
         insert into temp values (Query_Str,finalCondition); commit;
  OPEN GenCursor for Query_Str || finalCondition ||' order by CDEL_CANCEL_DATE '   ;

  Goto Process_End;
 end if;


 If Varreportid='AVERAGESELLCALL' THEN

    Open Gencursor For


      select pkgReturnCursor.fncGetDescription(copt_backup_deal,2) "Type",
      copt_execute_date "FixingDate",
      pkgReturnCursor.fncGetDescription(copt_counter_party,2) "Bank",
      round(avg(cosu_strike_rate),4) "SellCallAvg",
      sum(copt_base_amount) "SumofNotional",
      sum(copt_premium_amount) "SumofPremiumRecd",
       pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
      frmDate as  FromDate ,
      ToDate as ToDate
      from trtran071, trtran072
      where copt_deal_number = cosu_deal_number
      and copt_process_complete = 12400002
      and cosu_buy_sell = 25300002
      and cosu_option_type = 32400001
      and copt_execute_date between frmDate and ToDate
      group by copt_backup_deal, copt_execute_date, copt_counter_party
      order by copt_backup_deal, copt_execute_date, copt_counter_party;

 Goto Process_End;
 End If;

If Varreportid='AVERAGESELLCALLMONTHWISE' THEN
Open Gencursor For

      select pkgReturnCursor.fncGetDescription(copt_backup_deal,2) "Type",
      copt_execute_date "FixingDate",
      to_date ('01' || to_char(copt_execute_date,'mm') ||'-'|| to_char(copt_execute_date,'yy'),'dd/mm/yy') "month",
      pkgReturnCursor.fncGetDescription(copt_counter_party,2) "Bank",
      round(avg(cosu_strike_rate),4) "SellCallAvg",
      sum(copt_base_amount) "SumofNotional",
      sum(copt_premium_amount) "SumofPremiumRecd",
       pkgreturnreport.getCompanyName(varUserID) as CompanyName,
      frmDate as  FromDate ,
      ToDate as ToDate
      from trtran071, trtran072
      where copt_deal_number = cosu_deal_number
      and copt_process_complete = 12400002
      and cosu_buy_sell = 25300002
      and cosu_option_type = 32400001
      and copt_execute_date between frmDate and ToDate
      group by copt_backup_deal, copt_execute_date, copt_counter_party
      --order by copt_backup_deal, copt_maturity_date, copt_counter_party;
       order by copt_execute_date;

 Goto Process_End;
 End If;

 If Varreportid='DEALDETAILSOFDEALNUM' THEN
  Open Gencursor For
  with tblFixes  as
    (select gins_deal_number, count(*) BalancePeriod
      from trtran057
      where gins_knockout_status = 61600005
      group by gins_deal_number)
  SELECT GOPT_DEAL_NUMBER DealNumber,
           pkgreturncursor.fncGetdescription(GOPT_COMPANY_CODE,2) CompanyCode,
           pkgreturncursor.fncGetdescription(GOPT_COUNTER_PARTY,2) CounterParty,
           GOPT_TRADE_DATE DealDate,
           pkgReturnCursor.fncGetDescription(gopt_fixing_day,1) FixingDay,
           b.GINS_SERIAL_NUMBER as serialno,GOPT_TERMINATION_DATE AS TERMINATIONDATE,
           GOPT_NOTIONAL_QUANTITY AS NOTIONALQUT,GOPT_LEVERAGE_QUANTITY LEVQYT,
           GOPT_TARGET_VALUE TARGETVALUE,GOPT_TARGET_COUNT TARGETCOUNT,
           GOPT_STRIKE1_PRICE AS STRICKRATE1,GOPT_STRIKE2_PRICE AS STRICKRATE2,
         'StrickRate1' lABSTRICKRATE1,'StrickRate2'lABSTRICKRATE2,'StrickRate3'lABSTRICKRATE3,
           GOPT_STRIKE3_PRICE AS STRICKRATE3, GOPT_STRIKE2_PRICE Barrierprice,
           GOPT_EFFECTIVE_DATE AS EFFECTIVEDATE,BalancePeriod,
          (BalancePeriod * gopt_notional_quantity) AS TOTEXPOSURE,
          (BalancePeriod * gopt_leverage_quantity) MAXEXPOSURE,
          (select sum(gins_pandl_fcy)
          from   trtran057
          where  gins_deal_number = gopt_deal_number) AmountRealized,
          b.GINS_FIXING_DATE AS FIXINGDATE,b.GINS_SETTLEMENT_DATE AS SETTLEMENTDATE,
          b.GINS_VALUATION_PRICE AS VALUATIONPRICE,
         pkgReturnCursor.fncGetDescription( b.GINS_KNOCKOUT_STATUS,2) KNOSTATUS,
          GOPT_PREMIUM_FCY PREMFCY,
         GOPT_PREMIUM_INR AS PREMINR,
         (select LRAT_RBI_USD from trsystem017
          where LRAT_CURRENCY_CODE=GOPT_CURRENCY_CODE
                and LRAT_EFFECTIVE_DATE=frmDate
          ) as spotrate,
          pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
           frmDate as  AsonDate,
           frmDate as  FromDate ,
           ToDate as ToDate
   FROM  TRTRAN056,tblFixes d,trtran057 b
  WHERE  GOPT_DEAL_NUMBER=b.GINS_DEAL_NUMBER
         AND b.GINS_DEAL_NUMBER=d.GINS_DEAL_NUMBER
         AND GINS_RECORD_STATUS not in(10200005,10200006)
         AND GOPT_RECORD_STATUS not in(10200005,10200006);

  Goto Process_End;
 End If;
        if varReportID= 'FDMATURITYSEVENDAY' then
       OPEN GenCursor for
-----------added by shrihari on 12-11-2014-----------------
       select
             PKGRETURNCURSOR.FNCGETDESCRIPTION(FDRF_COMPANY_CODE,2) as COMPANY,
             pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,1) as Company1,
             FDRF_BANK_REFERENCE as FDNo,
             FDRF_FD_NUMBER as  Srno,
             FDRF_REFERENCE_DATE as OpenDate ,   --ValueDate
             trunc(FDRF_MATURITY_DATE,'dd')-trunc(FDRF_REFERENCE_DATE,'dd') as NoOfDays,
             FDRF_MATURITY_DATE as MaturityDate,
             FDRF_DEPOSIT_AMOUNT as PrincipalAmt,
             pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,2) as Bank,
             FDRF_INTEREST_RATE as RateofInterest,   --IntrestRate
             0 as EffectiveIntrestRate,
             FDRF_INTEREST_AMOUNT as InterestAmt,
             (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004) as AccruedIntrestTilldate ,
             ( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 ) as TDSchargedTillDate,

              (FDRF_DEPOSIT_AMOUNT+
                         (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004)
                          -( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 )
                     -(select nvl(sum(fdcl_deposit_amount),0) from trtran047a
                        where fdcl_fd_number=fdrf_fd_number
                        and   fdcl_sr_number=FDRF_sr_NUMBER
                        and   fdcl_closure_date <= frmdate
                        and  fdcl_record_status =10200003)
                    ) as outstanding ,
              frmdate as AsonDate ,
              'Already Matured' as REMARK,
              FDRF_USER_REMARKS Remark1
              --frmdate
            from trtran047
                      where trunc(FDRF_MATURITY_DATE,'dd')-frmdate<=0
                      and (nvl( fdrf_process_complete,12400002)=12400002 or nvl(FDRF_COMPLETE_DATE,FDRF_REFERENCE_DATE) > frmdate )
                      and FDRF_RECORD_STATUS =10200003--not in(10200005,10200006)
                      --order by FDRF_FD_NUMBER

      union
             select
             pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,2) as Company,
              pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,1) as Company1,
             FDRF_BANK_REFERENCE as FDNo,
             FDRF_FD_NUMBER as  Srno,
             FDRF_REFERENCE_DATE as OpenDate ,   --ValueDate
             trunc(FDRF_MATURITY_DATE,'dd')-trunc(FDRF_REFERENCE_DATE,'dd') as NoOfDays,
             FDRF_MATURITY_DATE as MaturityDate,
             FDRF_DEPOSIT_AMOUNT as PrincipalAmt,
             pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,2) as Bank,
             FDRF_INTEREST_RATE as RateofInterest,   --IntrestRate
             0 as EffectiveIntrestRate,
             FDRF_INTEREST_AMOUNT as InterestAmt,
             (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004) as AccruedIntrestTilldate ,
             ( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 ) as TDSchargedTillDate,

              (FDRF_DEPOSIT_AMOUNT+
                         (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004)
                          -( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 )
                     -(select nvl(sum(fdcl_deposit_amount),0) from trtran047a
                        where fdcl_fd_number=fdrf_fd_number
                        and   fdcl_sr_number=FDRF_sr_NUMBER
                        and   fdcl_closure_date <= frmdate
                        and  fdcl_record_status =10200003)
                    ) as outstanding ,
              frmdate as AsonDate ,
              'Maturing In 7 Days' as Remark,
               FDRF_USER_REMARKS Remark1
              --frmdate
            from trtran047
                      where FDRF_REFERENCE_DATE <= frmdate
                      and (nvl( fdrf_process_complete,12400002)=12400002 or nvl(FDRF_COMPLETE_DATE,FDRF_REFERENCE_DATE) > frmdate )
                      and FDRF_RECORD_STATUS =10200003--not in(10200005,10200006)
                      and  TRUNC(FDRF_MATURITY_DATE,'DD') between frmdate+6 and frmdate+7
                      --order by FDRF_FD_NUMBER
      union
            select
             pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,2) as Company,
             pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,1) as Company1,
             FDRF_BANK_REFERENCE as FDNo,
             FDRF_FD_NUMBER as  Srno,
             FDRF_REFERENCE_DATE as OpenDate ,   --ValueDate
             trunc(FDRF_MATURITY_DATE,'dd')-trunc(FDRF_REFERENCE_DATE,'dd') as NoOfDays,
             FDRF_MATURITY_DATE as MaturityDate,
             FDRF_DEPOSIT_AMOUNT as PrincipalAmt,
             pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,2) as Bank,
             FDRF_INTEREST_RATE as RateofInterest,   --IntrestRate
             0 as EffectiveIntrestRate,
             FDRF_INTEREST_AMOUNT as InterestAmt,
             (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004) as AccruedIntrestTilldate ,
             ( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 ) as TDSchargedTillDate,

              (FDRF_DEPOSIT_AMOUNT+
                         (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004)
                          -( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 )
                     -(select nvl(sum(fdcl_deposit_amount),0) from trtran047a
                        where fdcl_fd_number=fdrf_fd_number
                        and   fdcl_sr_number=FDRF_sr_NUMBER
                        and   fdcl_closure_date <= frmdate
                        and  fdcl_record_status =10200003)
                    ) as outstanding ,
              frmdate as AsonDate ,
              'Maturing In 5 Days' as Remark,
              FDRF_USER_REMARKS Remark1
              --frmdate
            from trtran047
                      where FDRF_REFERENCE_DATE <= frmdate
                      and (nvl( fdrf_process_complete,12400002)=12400002 or nvl(FDRF_COMPLETE_DATE,FDRF_REFERENCE_DATE) > frmdate )
                      and FDRF_RECORD_STATUS =10200003--not in(10200005,10200006)
                      and  TRUNC(FDRF_MATURITY_DATE,'DD') between frmdate+4 and frmdate+5
       union
             select
             pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,2) as Company,
             pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,1) as Company1,
             FDRF_BANK_REFERENCE as FDNo,
             FDRF_FD_NUMBER as  Srno,
             FDRF_REFERENCE_DATE as OpenDate ,   --ValueDate
             trunc(FDRF_MATURITY_DATE,'dd')-trunc(FDRF_REFERENCE_DATE,'dd') as NoOfDays,
             FDRF_MATURITY_DATE as MaturityDate,
             FDRF_DEPOSIT_AMOUNT as PrincipalAmt,
             pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,2) as Bank,
             FDRF_INTEREST_RATE as RateofInterest,   --IntrestRate
             0 as EffectiveIntrestRate,
             FDRF_INTEREST_AMOUNT as InterestAmt,
             (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004) as AccruedIntrestTilldate ,
             ( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 ) as TDSchargedTillDate,

              (FDRF_DEPOSIT_AMOUNT+
                         (select nvl(sum(decode(INTC_CHARGING_TYPE,42200001,INTC_INTCHARGE_AMOUNT,-INTC_INTCHARGE_AMOUNT)) ,0)
                  from trtran047b
                  where INTC_SCHEME_CODE=fdrf_scheme_code
                  and   INTC_FD_NUMBER=FDRF_FD_NUMBER
                  and   INTC_FD_SRNUMBER=FDRF_sr_NUMBER
                  --and   INTC_CHARGING_TYPE=INTERESTPROVISION
                  and   INTC_CREDIT_TO  =42300003
                  and INTC_CHARGING_TYPE <> 42200005
                  and  intc_charging_date <=frmdate
                  and   intc_record_status between 10200001 and 10200004)
                          -( select nvl(sum(nvl(TDSC_TDS_AMOUNT +nvl(TDSC_SERCHARGE_AMOUNT,0),0)),0)
                   from trtran047c
                   where tdsc_SCHEME_CODE=fdrf_scheme_code
                     and tdsc_fd_number=fdrf_fd_number
                     and TDSC_FD_SRNUMBER=fdrf_sr_number
                     and TDSC_DEDUCTED_DATE<=frmdate
                     and tdsc_record_status between 10200001 and 10200004 )
                     -(select nvl(sum(fdcl_deposit_amount),0) from trtran047a
                        where fdcl_fd_number=fdrf_fd_number
                        and   fdcl_sr_number=FDRF_sr_NUMBER
                        and   fdcl_closure_date <= frmdate
                        and  fdcl_record_status =10200003)
                    ) as outstanding ,
              frmdate as AsonDate ,
              'Maturing In 3 Days' as REMARK,
              FDRF_USER_REMARKS Remark1
              --frmdate
            from trtran047
                      where FDRF_REFERENCE_DATE <= frmdate
                      and (nvl( fdrf_process_complete,12400002)=12400002 or nvl(FDRF_COMPLETE_DATE,FDRF_REFERENCE_DATE) > frmdate )
                      and FDRF_RECORD_STATUS =10200003--not in(10200005,10200006)
                      and  TRUNC(FDRF_MATURITY_DATE,'DD') between frmdate+1 and frmdate+3 ;

         Goto Process_End;
 end if;

If varReportID='SIMULATEDSTATMT' then
     Open GenCursor for
    with tblFixes  as
    (select gins_deal_number, count(*) BalancePeriod
      from trtran057A
      where gins_knockout_status = 61600005
      group by gins_deal_number)
    select gopt_user_remarks "DealNo", gopt_effective_date "EffectiveDate",
      Gopt_Termination_Date "EndDate",
      pkgReturnCursor.fncGetDescription(gopt_structure_type,2) "Type",
      pkgReturnCursor.fncGetDescription(gopt_company_code,2) "Company",
      pkgReturnCursor.fncGetDescription(GOPT_COUNTER_PARTY,2) "bank",
      pkgReturnCursor.fncGetDescription(gopt_fixing_day,1) "FixingDay",
      gopt_notional_quantity "Notional", gopt_leverage_quantity "Leverage",
      gopt_strike1_price "Strike1", NVL(gopt_strike2_price,0) "Strike2",
      gopt_target_count "TargetCount", gopt_target_value "TargetValue",
      BalancePeriod "BalancePeriod",
      (BalancePeriod * gopt_notional_quantity) "Exposure",
      (BalancePeriod * gopt_leverage_quantity) "MaxExposure",
      (select sum(gins_pandl_fcy)
        from trtran057A
        where gins_deal_number = gopt_deal_number) "NotionalRealized",
      (select sum(gins_pandl_fcy)
        from trtran057
        where gins_deal_number = gopt_deal_number) "ActualRealized",
      gopt_deal_number "DealReference",
      pkgreturnreport.getCompanyName(varUserID)  "CompanyName",
      ToDate  "ToDate"
      from trtran056, tblFixes
      where gopt_deal_number = gins_deal_number
      and gopt_process_complete = 12400002
      order by gopt_deal_number;
    Goto Process_End;
  End if;

If varReportID='COMMOUSTNDOPTD' then
    OPEN GenCursor for
     with tblFixes  as
    (select gins_deal_number, count(*) BalancePeriod
      from trtran057
      where gins_knockout_status = 61600005
      group by gins_deal_number)
    select gopt_deal_number DealNumber, gopt_effective_date TradeDate,
      gopt_termination_date EndDate,
      pkgReturnCursor.fncGetDescription(gopt_company_code,2) CompanyCode,
       pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
      pkgReturnCursor.fncGetDescription(gopt_fixing_day,1) FixingDay,
      gopt_notional_quantity Notional, gopt_leverage_quantity Leveragenotional,
      pkgReturnCursor.fncGetDescription(gopt_delivery_type,2) FixType,
      gopt_strike1_price StrikeRate1, gopt_strike2_price BarrierPrice,
      gopt_strike3_price StrikeRate2, BalancePeriod BalancePeriod1,
      (BalancePeriod * gopt_notional_quantity) BalalnceExposure,
      (BalancePeriod * gopt_leverage_quantity) MaxExposure,
      (select sum(gins_pandl_fcy)
        from trtran057
        where gins_deal_number = gopt_deal_number) AmountRealized,
      gopt_user_remarks Remarks,frmDate as  FromDate , ToDate as ToDate
      from trtran056, tblFixes
      where gopt_deal_number = gins_deal_number
      and gopt_process_complete = 12400002;
 Goto Process_End;
 End If;


  --commented aakash 17-may-13 11:09 am OPTION REALIZED P/L  --
--  if varReportID = 'OPTHDGDEALREALIZED' then
--Query_Str := '
--                 select COPT_DEAL_NUMBER As DealNumber,
--                 COPT_COMPANY_CODE AS COMPANYCODE,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
--                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
--                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
--                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
--                 COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
--                 COPT_MATURITY_DATE AS MaturityDate,
--                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
--                  (select round( avg(cosu_strike_rate),4) from trtran072
--                   where cosu_deal_number=copt_deal_number
--                    and cosu_buy_sell=25300001
--                    and cosu_option_type=32400001) "BC",
--                   (select avg(cosu_strike_rate) from trtran072
--                    where cosu_deal_number=copt_deal_number
--                      and cosu_buy_sell=25300001
--                      and cosu_option_type=32400002) "BP",
--                   (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400002) "SP",
--                    (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400001) "SC",
--                  COPT_PREMIUM_VALUEDATE AS PAIDDATE,
--                  COPT_USER_REFERENCE AS USERREFNO,';
--     QUERY_STR1 := 'pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
--                  copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
--                  substr(pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),1,1) as status,
--                  corv_exercise_date cancelDate,
--                  --corv_exercise_rate cancelRate,
--                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
--                 (corv_profit_loss) as profitloss,
--                 Pkgforexprocess.Fncgetprofitlossoptnetpandl(COPT_DEAL_NUMBER,CORV_SERIAL_NUMBER) as NetPandL,
--
--                  CORV_PANDL_USD as GainLossUsd,
--                --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
--                case
--                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
--                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,
--                   pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
--                   pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
--                    pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2)Othercurrency,
--                     pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--           Decode (copt_Record_Status,10200001,''unconfirmed'',10200003,''Sec Confi'',10200002,''first Confi'',10200004,''Updated'') RecordStatus,
--                 decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--                  pkgreturnreport.GetSystemDate() as SystemDate,
--                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   '||''''||FRMDATE||''''||' as  FromDate,
--                   '||''''||TODATE||''''||'  as ToDate   ' || varGroupField || '
--          from trtran071,trtran073
--          where  copt_deal_number=corv_deal_number
--               and copt_record_status not in(10200005,10200006)
--               and corv_record_status not in(10200005,10200006)
--                    '|| FINALCONDITION||'
--            order by copt_execute_date';
--            delete from temp;commit;
--            insert into TEMP values(QUERY_STR ,QUERY_STR1);
--            commit;
--            open GENCURSOR for QUERY_STR||QUERY_STR1 ;
-- Goto Process_End;
-- End If;

--UPDATED by gouri/aakash 02-JUL-13 11:22 Am
--if varReportID = 'OPTHDGDEALREALIZED' then
--Query_Str := '
--                 select COPT_DEAL_NUMBER As DealNumber,
--                 COPT_COMPANY_CODE AS COMPANYCODE,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
--                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
--                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
--                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
--                 (COPT_BASE_AMOUNT/1000000) AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
--                 COPT_MATURITY_DATE AS MaturityDate,
--                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
--                  (select round( avg(cosu_strike_rate),4) from trtran072
--                   where cosu_deal_number=copt_deal_number
--                    and cosu_buy_sell=25300001
--                    and cosu_option_type=32400001) "BC",
--                   (select avg(cosu_strike_rate) from trtran072
--                    where cosu_deal_number=copt_deal_number
--                      and cosu_buy_sell=25300001
--                      and cosu_option_type=32400002) "BP",
--                   (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400002) "SP",
--                    (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400001) "SC",
--                  COPT_PREMIUM_VALUEDATE AS PAIDDATE,
--                  COPT_USER_REFERENCE AS USERREFNO,';
--     QUERY_STR1 := 'pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
--                  decode(sign(corv_base_amount - copt_base_amount), -1,
--                  (copt_premium_amount / copt_base_amount) * corv_base_amount,
--                  copt_PREMIUM_AMOUNT) AS PremiumAmount, copt_PREMIUM_LOCAL AS PremiumLocal,
--                  substr(pkgreturncursor.fncgetdescription(COpt_PREMIUM_STATUS,2),1,1) as status,
--                  corv_exercise_date cancelDate,
--                  --corv_exercise_rate cancelRate,
--                  CORV_BASE_AMOUNT as CancelAmount,
--                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
--                 (corv_profit_loss) as profitloss,
--                nvl( Pkgforexprocess.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER,CORV_SERIAL_NUMBER),0) as NetPandL,
--
--                  CORV_PANDL_USD as GainLossUsd,
--                --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
--                case
--                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
--                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,
--                   pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
--                   pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
--                    pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2)Othercurrency,
--                     pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--           Decode (copt_Record_Status,10200001,''Unconfm'',10200003,''2ndConfm'',10200002,''1stConfm'',10200004,''Updated'') RecordStatus,
--                 decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--                  pkgreturnreport.GetSystemDate() as SystemDate,
--                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   '||''''||FRMDATE||''''||' as  FromDate,
--                   '||''''||TODATE||''''||'  as ToDate   ' || varGroupField || '
--          from trtran071,trtran073
--          where  copt_deal_number=corv_deal_number
--               and copt_record_status not in(10200005,10200006)
--               and corv_record_status not in(10200005,10200006)
--                    '||FINALCONDITION||'
--            order by COPT_DEAL_NUMBER,copt_execute_date';
--            delete from temp;commit;
--            insert into TEMP values(QUERY_STR ,QUERY_STR1);
--            commit;
--            open GENCURSOR for QUERY_STR||QUERY_STR1 ;
-- Goto Process_End;
-- End If;
-- if varReportID = 'OPTHDGDEALREALIZED' then
--Query_Str := '
--                 select COPT_DEAL_NUMBER As DealNumber,
--                 COPT_COMPANY_CODE AS COMPANYCODE,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
--                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
--                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
--                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
--                 (COPT_BASE_AMOUNT/1000000) AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
--                 COPT_MATURITY_DATE AS MaturityDate,
--                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
--                  (select round( avg(cosu_strike_rate),4) from trtran072
--                   where cosu_deal_number=copt_deal_number
--                    and cosu_buy_sell=25300001
--                    and cosu_option_type=32400001) "BC",
--                   (select avg(cosu_strike_rate) from trtran072
--                    where cosu_deal_number=copt_deal_number
--                      and cosu_buy_sell=25300001
--                      and cosu_option_type=32400002) "BP",
--                   (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400002) "SP",
--                    (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400001) "SC",
--                  COPT_PREMIUM_VALUEDATE AS PAIDDATE,
--                  COPT_USER_REFERENCE AS USERREFNO,';
--     QUERY_STR1 := 'pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
--                  decode(sign(corv_base_amount - copt_base_amount), -1,
--                  (copt_premium_amount / copt_base_amount) * corv_base_amount,
--                  copt_PREMIUM_AMOUNT) AS PremiumAmount, copt_PREMIUM_LOCAL AS PremiumLocal,
--                  substr(pkgreturncursor.fncgetdescription(COpt_PREMIUM_STATUS,2),1,1) as status,
--                  corv_exercise_date cancelDate,
--                  --corv_exercise_rate cancelRate,
--                  CORV_BASE_AMOUNT as CancelAmount,
--                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
--                 (corv_profit_loss) as profitloss,
--                nvl( Pkgforexprocess.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER,CORV_SERIAL_NUMBER),0) as NetPandL,
--
--                  CORV_PANDL_USD as GainLossUsd,
--                --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
--                case
--                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
--                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,
--                   pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
--                   pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
--                    pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2)Othercurrency,
--                     pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--           Decode (copt_Record_Status,10200001,''Unconfm'',10200003,''2ndConfm'',10200002,''1stConfm'',10200004,''Updated'') RecordStatus,
--                 decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--                  pkgreturnreport.GetSystemDate() as SystemDate,
--                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   TO_DATE('||''''||FRMDATE||''''||') as  FromDate,
--                   TO_DATE('||''''||TODATE||''''||' ) as ToDate
--                   ' || varGroupField || '
--          from trtran071,trtran073
--          where  copt_deal_number=corv_deal_number
--               and copt_record_status not in(10200005,10200006)
--               and corv_record_status not in(10200005,10200006)
--                    '||FINALCONDITION||'
--            order by COPT_DEAL_NUMBER,copt_execute_date';
--            delete from temp;commit;
--            insert into TEMP values(QUERY_STR ,QUERY_STR1);
--            commit;
--            open GENCURSOR for QUERY_STR||QUERY_STR1 ;
-- GOTO PROCESS_END;
-- END IF;

------------------------------------------
--changed on 05/07/2013---

if varReportID = 'OPTHDGDEALREALIZED' then
Query_Str := '
                 select COPT_DEAL_NUMBER As DealNumber,
                 COPT_COMPANY_CODE AS COMPANYCODE,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
                 (COPT_BASE_AMOUNT/1000000) AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400001) "SC",
                  COPT_PREMIUM_VALUEDATE AS PAIDDATE,
                  COPT_USER_REFERENCE AS USERREFNO,';
     QUERY_STR1 := 'pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
                  decode(sign(corv_base_amount - copt_base_amount), -1,
                  (copt_premium_amount / copt_base_amount) * corv_base_amount,
                  copt_PREMIUM_AMOUNT) AS PremiumAmount, copt_PREMIUM_LOCAL AS PremiumLocal,
                  substr(pkgreturncursor.fncgetdescription(COpt_PREMIUM_STATUS,2),1,1) as status,
                  corv_exercise_date cancelDate,
                  --corv_exercise_rate cancelRate,
                  CORV_BASE_AMOUNT as CancelAmount,
                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
                 nvl(corv_premium_amount,0) profitloss,
                 /*(corv_profit_loss) as profitloss,*/
                nvl( Pkgforexprocess.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER,CORV_SERIAL_NUMBER),0) as NetPandL,

                  CORV_PANDL_USD as GainLossUsd,
                --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
                case
                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,
                   pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
                   pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
                    pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2)Othercurrency,
                     pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
           Decode (copt_Record_Status,10200001,''Unconfm'',10200003,''2ndConfm'',10200002,''1stConfm'',10200004,''Updated'') RecordStatus,
                 decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
                  pkgreturnreport.GetSystemDate() as SystemDate,
                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                   TO_DATE('||''''||FRMDATE||''''||') as  FromDate,
                   TO_DATE('||''''||TODATE||''''||' ) as ToDate
                   ' || varGroupField || '
          from trtran071,trtran073
          where  copt_deal_number=corv_deal_number
               and copt_record_status not in(10200005,10200006)
               and corv_record_status not in(10200005,10200006)
                    '||FINALCONDITION||'
            order by COPT_DEAL_NUMBER,copt_execute_date';
            delete from temp;commit;
            insert into TEMP values(QUERY_STR ,QUERY_STR1);
            commit;
            open GENCURSOR for QUERY_STR||QUERY_STR1 ;
 GOTO PROCESS_END;
 END IF;
--end


--  if ((VARREPORTID = 'OUTSTANDINGOPTIONTRADEDEAL') or  (VARREPORTID = 'OPTIONALLTRADEDEALL' ))then
--   insert into TEMP values(VARREPORTID,null);
-- commit;
--
--
-- QUERY_STR := '
--  select COPT_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
--                        pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
--                        COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
--                           pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
--                           COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
--                            COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
--                            COPT_MATURITY_DATE AS MaturityDate,
--                            COPT_EXPIRY_DATE AS FINALSETTLEMENT,
--                            (select round( avg(cosu_strike_rate),4) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300001
--                           and cosu_option_type=32400001) "BC",
--                       (select avg(cosu_strike_rate) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300001
--                           and cosu_option_type=32400002) "BP",
--                       (select avg(cosu_strike_rate) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300002
--                           and cosu_option_type=32400002) "SP",
--                       (select avg(cosu_strike_rate) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300002
--                           and cosu_option_type=32400001) "SC",
--                           COPT_PREMIUM_VALUEDATE AS PAIDDATE,
--                           COPT_USER_REFERENCE AS USERREFNO,
--                          copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
--                          corv_exercise_date cancelDate, corv_exercise_rate cancelRate,
--                          corv_profit_loss as profitloss,
--                          decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
--                          pkgreturnreport.GetSystemDate() as SystemDate,
--                           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                     '||''''||FRMDATE||''''||' as  FromDate,
--                 '||''''||TODATE||''''||'  as ToDate
--                 from    TRTRAN071,
--             --    TRTRAN072,
--                 trtran073
--                where   COPT_DEAL_NUMBER=COSU_DEAL_NUMBER
--                      AND  copt_deal_number=corv_deal_number(+)
--                      and  COPT_SERIAL_NUMBER=COSU_SERIAL_NUMBER
--                     AND   corv_record_Status not in(10200005,10200006)
--                     --  AND ((COPT_PROCESS_COMPLETE = 12400001  and COPT_COMPLETE_DATE >  '||''''||TODATE||''''||') or COPT_PROCESS_COMPLETE = 12400002)
--                      and  copt_record_status not in('||''''||GCONST.STATUSDELETED||''''||','||''''||GCONST.STATUSINACTIVE||''''||' )
--                      '|| FINALCONDITION||'
--                        order by copt_maturity_date';
--                         insert into TEMP values(QUERY_STR || FINALCONDITION,null);
--                         commit;
--                         open GENCURSOR for QUERY_STR    ;
--
--
--     GOTO PROCESS_END;
-- end if;
--
--if ((VARREPORTID = 'OUTSTANDINGOPTIONTRADEDEAL') or  (VARREPORTID = 'OPTIONALLTRADEDEALL' ))then
-- --  insert into TEMP values(VARREPORTID,null);
---- commit;
--
--
-- QUERY_STR := '
--  select COPT_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
--                        pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
--                        COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
--                           pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
--                           COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
--                            COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
--                            COPT_MATURITY_DATE AS MaturityDate,
--                            COPT_EXPIRY_DATE AS FINALSETTLEMENT,
--                            (select round( avg(cosu_strike_rate),4) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300001
--                           and cosu_option_type=32400001) "BC",
--                       (select avg(cosu_strike_rate) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300001
--                           and cosu_option_type=32400002) "BP",
--                       (select avg(cosu_strike_rate) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300002
--                           and cosu_option_type=32400002) "SP",
--                       (select avg(cosu_strike_rate) from trtran072
--                         where cosu_deal_number=copt_deal_number
--                           and cosu_buy_sell=25300002
--                           and cosu_option_type=32400001) "SC",
--                           COPT_PREMIUM_VALUEDATE AS PAIDDATE,
--                           COPT_USER_REFERENCE AS USERREFNO,
--                          copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
--                          corv_exercise_date cancelDate, corv_exercise_rate cancelRate,
--                          corv_profit_loss as profitloss,
--                          decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
--                          pkgreturnreport.GetSystemDate() as SystemDate,
--                           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                     '||''''||FRMDATE||''''||' as  FromDate,
--                 '||''''||TODATE||''''||'  as ToDate
--                 FROM trtran071
--  LEFT OUTER JOIN trtran073
--  ON corv_deal_number = copt_deal_number
--                 --     and  COPT_SERIAL_NUMBER=COSU_SERIAL_NUMBER
--                     AND corv_record_status BETWEEN 10200001 AND 10200004
--  WHERE copt_record_status BETWEEN 10200001 AND 10200004
--                      and  copt_record_status not in('||''''||GCONST.STATUSDELETED||''''||','||''''||GCONST.STATUSINACTIVE||''''||' )
--                      '|| FINALCONDITION||'
--                        order by copt_maturity_date';
--                         insert into TEMP values(QUERY_STR || FINALCONDITION,null);
--                         commit;
--                         open GENCURSOR for QUERY_STR    ;
--
--
--     GOTO PROCESS_END;
-- end if;
--
  ---added aakash 10-may-13 04:41 pm
-- if varReportID = 'OPTIONALLTRADEDEALL' then
--     Query_Str := '
--                 select COPT_DEAL_NUMBER As DealNumber,
--                 COPT_COMPANY_CODE AS COMPANYCODE,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
--                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
--                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
--                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
--                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
--                 COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
--                 COPT_MATURITY_DATE AS MaturityDate,
--                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
--                  (select round( avg(cosu_strike_rate),4) from trtran072
--                   where cosu_deal_number=copt_deal_number
--                    and cosu_buy_sell=25300001
--                    and cosu_option_type=32400001) "BC",
--                   (select avg(cosu_strike_rate) from trtran072
--                    where cosu_deal_number=copt_deal_number
--                      and cosu_buy_sell=25300001
--                      and cosu_option_type=32400002) "BP",
--                   (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400002) "SP",
--                    (select avg(cosu_strike_rate) from trtran072
--                      where cosu_deal_number=copt_deal_number
--                        and cosu_buy_sell=25300002
--                        and cosu_option_type=32400001) "SC",
--                  COPT_PREMIUM_VALUEDATE AS PAIDDATE,
--                  COPT_USER_REFERENCE AS USERREFNO,';
--     QUERY_STR1 := 'pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
--                  copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
--                  substr(pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),1,1) as status,
--                  corv_exercise_date cancelDate,
--                  --corv_exercise_rate cancelRate,
--                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
--                 (corv_profit_loss) as profitloss,
--                 Pkgforexprocess.Fncgetprofitlossoptnetpandl(COPT_DEAL_NUMBER,CORV_SERIAL_NUMBER) as NetPandL,
--
--                  CORV_PANDL_USD as GainLossUsd,
--                --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
--                case
--                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
--                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,
--                   pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
--                   pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
--                    pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2)Othercurrency,
--                     pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--           Decode (copt_Record_Status,10200001,''unconfirmed'',10200003,''Sec Confi'',10200002,''first Confi'') RecordStatus,
--                 decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--                  pkgreturnreport.GetSystemDate() as SystemDate,
--                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   '||''''||FRMDATE||''''||' as  FromDate,
--                   '||''''||TODATE||''''||'  as ToDate   ' || varGroupField || '
--          from trtran071,trtran073
--          where   copt_deal_number=corv_deal_number(+)
--                   and (copt_record_status not in (10200005,10200006)
--                   or corv_record_status not in(10200005,10200006))
--                   and (COPT_EXECUTE_DATE between '||''''||FRMDATE||''''||' and '||''''||TODATE||''''||'
--                   or CORV_EXERCISE_DATE  between '||''''||FRMDATE||''''||' and '||''''||TODATE||''''||' )
--                    '||substr(FINALCONDITION,65)||'
--            order by copt_deal_number';
--            delete from temp;commit;
--            insert into TEMP values(QUERY_STR ,QUERY_STR1);
--            commit;
--            open GENCURSOR for QUERY_STR||QUERY_STR1 ;
-- Goto Process_End;
-- End If;
---end

--ADDED BY AAKASH/GOURI 22-MAY-13 03:05 PM
 if varReportID = 'OPTIONALLTRADEDEALL' then
 Query_Str := 'Select Dealnumber,COPT_COMPANY_CODE,COMPSHORTDESC,Exdate ,Bkname, Baseamt,Exrate,Maturitydate,Finalsettlement,
        Bc,Bp,Sp,Sc,Premiumamount,Premiumlocal,Status,Cancelrate,Profitloss,Netpandl,Openclose,Initcode,Basecurrency,
        Othercurrency,BackupDeal,RecordStatus,Hedgetrade,copt_record_status,
                   pkgreturnreport.GetSystemDate() as SystemDate,
                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                   '||''''||FRMDATE||''''||' As  Fromdate,
                    '||''''||TODATE||''''||'  As Todate
                    ' || varGroupField || '
  From    (
                 Select Copt_Deal_Number As Dealnumber,COPT_COMPANY_CODE,
                 Pkgreturncursor.Fncgetdescription( Copt_Company_Code,2) As Compshortdesc,
                 COPT_EXECUTE_DATE AS EXDATE,
                 Pkgreturncursor.Fncgetdescription(Copt_Counter_Party ,2)As Bkname,
                COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    And Cosu_Option_Type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        And Cosu_Option_Type=32400001) "SC",';
      Query_Str1 := 'copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
                  Substr(Pkgreturncursor.Fncgetdescription(Copt_Premium_Status,2),1,1) As Status,
                 1 Cancelrate,1 As Profitloss,1 As Netpandl,
                 ''Booked'' As  Openclose,
                 Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,
                 pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
                 Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2)Othercurrency,
                 Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Backupdeal,
                 Decode (Copt_Record_Status,10200001,''Unconfirmed'',10200003,''Confirmed'',10200002,''First Confi'') Recordstatus,
                 Decode(Copt_Hedge_Trade, 26000001, ''Hedge Deal'', 26000001,''Trade Deal'',26000003,''FT Deal'') Hedgetrade,
                 copt_record_status, COPT_BACKUP_DEAL,COPT_HEDGE_TRADE,COPT_BASE_CURRENCY,COPT_COUNTER_PARTY,COPT_INIT_CODE
          From Trtran071
          where    Copt_Record_Status Not In (10200005,10200006)
                   and COPT_EXECUTE_DATE between '||''''||FRMDATE||''''||' and  '||''''||TODATE||''''||'

  union all

               Select Copt_Deal_Number As Dealnumber,COPT_COMPANY_CODE,
               Pkgreturncursor.Fncgetdescription( Copt_Company_Code,2) As Compshortdesc,
               CORV_EXERCISE_DATE As Exdate,
               Pkgreturncursor.Fncgetdescription(Copt_Counter_Party ,2)As Bkname,
               CORV_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        And Cosu_Option_Type=32400001) "SC",';
    Query_Str2 := 'Corv_Premium_Amount As Premiumamount, Corv_Premium_Local As Premiumlocal,
                 Substr(Pkgreturncursor.Fncgetdescription(Corv_Premium_Status,2),1,1) As Status,
                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
                 (corv_profit_loss) as profitloss,
                 Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,Corv_Serial_Number) As Netpandl,
                  ''Cancled'' openclose,
                 pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
                 Pkgreturncursor.Fncgetdescription( Copt_Base_Currency,2) Basecurrency,
                 Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2)Othercurrency,
                 Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Backupdeal,
                 Decode (Copt_Record_Status,10200001,''Unconfirmed'',10200003,''Confirmed'',10200002,''First Confi'') Recordstatus,
                 Decode(Copt_Hedge_Trade, 26000001, ''Hedge Deal'', 26000001,''Trade Deal'',26000003,''FT Deal'') Hedgetrade,
                 copt_record_status, COPT_BACKUP_DEAL,COPT_HEDGE_TRADE,COPT_BASE_CURRENCY,COPT_COUNTER_PARTY,COPT_INIT_CODE
          from trtran071,trtran073
          where   copt_deal_number=corv_deal_number
                  and corv_record_status not in(10200005,10200006)
                   And (Copt_Execute_Date Between '||''''||FRMDATE||''''||' And  '||''''||TODATE||''''||'
                   Or Corv_Exercise_Date  Between '||''''||FRMDATE||''''||' And  '||''''||TODATE||''''||' )and corv_exercise_date between '||''''||FRMDATE||''''||' And  '||''''||TODATE||''''||' /*updated on 09/07/13 as report was not tallying*/ )
          where     copt_record_status  not in (10200005,10200006)
                    '||substr(FINALCONDITION,65)||'';

            delete from temp;commit;
            insert into TEMP values(QUERY_STR ,QUERY_STR1);
             insert into TEMP values(QUERY_STR2 ,FINALCONDITION);

            Commit;
            open GENCURSOR for QUERY_STR||QUERY_STR1||QUERY_STR2 ||'order by Dealnumber'  ;
 Goto Process_End;
 End If;
--END


 -- option trade deal --
  if  VARREPORTID = 'OPTIONALLTRADEDEALLCANCEL' then
  --if VARREPORTID = 'OPTIONALLTRADEDEALL' or  VARREPORTID = 'OPTIONALLTRADEDEALLCANCEL' then
 --  insert into TEMP values(VARREPORTID,null);
-- commit;
 QUERY_STR := '
                 select COPT_DEAL_NUMBER As DealNumber,
                 COPT_COMPANY_CODE AS COMPANYCODE,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
                 COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400001) "SC",
                   COPT_PREMIUM_VALUEDATE AS PAIDDATE,
                   COPT_USER_REFERENCE AS USERREFNO,
                   copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
                   corv_exercise_date cancelDate,
                   --corv_exercise_rate cancelRate,
                    pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
                  nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
                -- corv_profit_loss as profitloss,
                 (corv_profit_loss + copt_premium_amount) as profitloss,
                   CORV_PANDL_USD as GainLossUsd,
                   case
                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,

               -- decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
                   pkgreturnreport.GetSystemDate() as SystemDate,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                   '||''''||FRMDATE||''''||' as  FromDate,
                   '||''''||TODATE||''''||'  as ToDate   ' || varGroupField || '
          FROM trtran071
          LEFT OUTER JOIN trtran073
          ON corv_deal_number = copt_deal_number
                 --  and  COPT_SERIAL_NUMBER=COSU_SERIAL_NUMBER
                     AND corv_record_status not in(10200005,10200006)
         WHERE      copt_record_status not in(10200005,10200006)
                    and  copt_record_status not in('||''''||GCONST.STATUSDELETED||''''||','||''''||GCONST.STATUSINACTIVE||''''||' )
                    '|| FINALCONDITION||'
                     order by copt_maturity_date';
                     insert into TEMP values(QUERY_STR || FINALCONDITION,null);
                     commit;
                     open GENCURSOR for QUERY_STR    ;

     GOTO PROCESS_END;
 end if;


If (Varreportid='RBIREPORT') Then
--          numerror := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);
          numerror := pkgforexprocess.fncRbiReport(varUserID,frmDate);

           commit;Query_Str := 'select   TypeExposure, Exposure,Options,Forward,CompanyName,
                         pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) Company,
                        NVL(pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2),'||'''OTHER''' ||') Bank,
                         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) Currency,
                         to_Date('||''''||frmDate||''''||') as FromDate,
                         to_Date('||''''||toDate||''''||') as ToDate
                         ' || varGroupField || '
                From
                        (select  ''Exports'' TypeExposure,
                        POSN_COMPANY_CODE,POSN_COUNTER_PARTY,POSN_CURRENCY_CODE,
                        --sum (nvl(POSN_TRANSACTION_AMOUNT,0)) Exposure,
                        nvl(sum(case when POSN_ACCOUNT_CODE in (25900017) then nvl(POSN_TRANSACTION_AMOUNT,0) end),0) Exposure,
                        nvl(sum(case when POSN_ACCOUNT_CODE in (25900021,25900022,25900083) then nvl(POSN_TRANSACTION_AMOUNT,0) end),0) Options,
                        nvl(sum(case when POSN_ACCOUNT_CODE in (25900061,25900062) then nvl(POSN_TRANSACTION_AMOUNT,0) end),0) Forward,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                   from  trsystem997
                   where
                   POSN_ACCOUNT_CODE in (25900017,25900021,25900022,25900061,25900062,25900083)

                          '||finalcondition||'
                    group by POSN_COMPANY_CODE,POSN_COUNTER_PARTY,POSN_CURRENCY_CODE
               union
                        select  ''Imports'' TypeExposure,
                        POSN_COMPANY_CODE,POSN_COUNTER_PARTY,POSN_CURRENCY_CODE,
                         --sum(nvl(POSN_TRANSACTION_AMOUNT,0)) Exposure,
                         nvl(sum(case when POSN_ACCOUNT_CODE in (25900077) then nvl(POSN_TRANSACTION_AMOUNT,0) end),0) Exposure,
                        nvl(sum(case when POSN_ACCOUNT_CODE in (25900018,25900019,25900082,
                        25900020,25900023,25900085) then nvl(POSN_TRANSACTION_AMOUNT,0) end),0) Options,
                       nvl( sum(case when POSN_ACCOUNT_CODE in (25900011,25900012) then nvl(POSN_TRANSACTION_AMOUNT,0) end),0) Forward,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                   from trsystem997
                   where
                   POSN_ACCOUNT_CODE in (25900011,25900012,25900020,25900077,25900018,25900019)

                         '||finalcondition||'
                   group by POSN_COMPANY_CODE,POSN_COUNTER_PARTY,POSN_CURRENCY_CODE)';

   Insert Into Temp Values (Query_Str,finalcondition);Commit;
  OPEN GenCursor for Query_Str ;
  Goto Process_End;
End If;


 if VARREPORTID = 'OUTSTANDINGOPTIONTRADEDEAL' then
 --  insert into TEMP values(VARREPORTID,null);
-- commit;


 QUERY_STR := '
  select COPT_COMPANY_CODE AS COMPANYCODE,pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
                        pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
                        COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
                           pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
                           COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
                            COPT_BASE_AMOUNT AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
                            COPT_MATURITY_DATE AS MaturityDate,
                            COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                            (select round( avg(cosu_strike_rate),4) from trtran072
                         where cosu_deal_number=copt_deal_number
                           and cosu_buy_sell=25300001
                           and cosu_option_type=32400001) "BC",
                       (select avg(cosu_strike_rate) from trtran072
                         where cosu_deal_number=copt_deal_number
                           and cosu_buy_sell=25300001
                           and cosu_option_type=32400002) "BP",
                       (select avg(cosu_strike_rate) from trtran072
                         where cosu_deal_number=copt_deal_number
                           and cosu_buy_sell=25300002
                           and cosu_option_type=32400002) "SP",
                       (select avg(cosu_strike_rate) from trtran072
                         where cosu_deal_number=copt_deal_number
                           and cosu_buy_sell=25300002
                           and cosu_option_type=32400001) "SC",
                           COPT_PREMIUM_VALUEDATE AS PAIDDATE,
                           COPT_USER_REFERENCE AS USERREFNO,
                          copt_premium_amount AS PremiumAmount, copt_premium_local AS PremiumLocal,
                          corv_exercise_date cancelDate, corv_exercise_rate cancelRate,
                          corv_profit_loss as profitloss,
                        --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
                        case
                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,

                          pkgreturnreport.GetSystemDate() as SystemDate,
                           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                     '||''''||FRMDATE||''''||' as  FromDate,
                 '||''''||TODATE||''''||'  as ToDate
                 FROM trtran071
  LEFT OUTER JOIN trtran073
  ON corv_deal_number = copt_deal_number
                 --     and  COPT_SERIAL_NUMBER=COSU_SERIAL_NUMBER
                     AND corv_record_status not in(10200005,10200006)
  WHERE copt_record_status not in(10200005,10200006)
                      and  copt_record_status not in('||''''||GCONST.STATUSDELETED||''''||','||''''||GCONST.STATUSINACTIVE||''''||' )
                      AND ((COPT_PROCESS_COMPLETE = 12400001  and COPT_COMPLETE_DATE >  '||''''||TODATE||''''||') or COPT_PROCESS_COMPLETE = 12400002)
                      and COPT_EXECUTE_DATE <= '||''''||FRMDATE||''''||'
                        order by copt_maturity_date';
                         insert into TEMP values(QUERY_STR || FINALCONDITION,null);
                         commit;
                         open GENCURSOR for QUERY_STR    ;


     GOTO PROCESS_END;
 end if;


if varReportID = 'OUTSTANDINGFWDTRADDEAL' then


         Query_Str := ' select  DEAL_DEAL_NUMBER AS DEALNUMBER,
                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) AS COMPSHORTDESC,
                  DEAL_COMPANY_CODE AS COMPCODE, deal_counter_party as counterpartycode,
                    pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSAL,
                  pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                  pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
                 pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPARTY,
                 DEAL_EXECUTE_DATE AS EXEDATE,
                pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') AS BASEAMT,
               --  DEAL_BASE_AMOUNT AS BASEAMT,
                 DEAL_EXCHANGE_RATE AS EXERATE,DEAL_Forward_RATE AS FORWRATE,
                 DEAL_MATURITY_DATE AS MATURITYDATE,DEAL_SPOT_RATE AS SPOTRATE,
                 DEAL_USER_REFERENCE as REFNO,
                 pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BACKUPDEAL,
                 (select (case
                  when trad_import_export <= 25300050 then
                  ' || '''Exp''' || '
                  when trad_import_export > 25300050 then
                  ' || '''Imp''' || '
                  end) Catg
                 from trtran002, trtran004
                 where TRAD_TRADE_REFERENCE=HEDG_TRADE_REFERENCE
                 and HEDG_DEAL_NUMBER=DEAL_DEAL_NUMBER
                  group by trad_import_export) as importexport,
                 pkgreturnreport.GetSystemDate() as SystemDate,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
                 '||''''||frmDate||''''||' as  FromDate,
                 '||''''||ToDate||''''||'  as ToDate
  from trtran001
  where   DEAL_RECORD_STATUS not in('||''''||gconst.statusdeleted||''''||','||''''||gconst.statusinactive||''''||' )
      and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > '||''''||ToDate||''''||') or DEAL_PROCESS_COMPLETE = 12400002)' ;
      Open Gencursor For Query_Str || finalcondition   ;
     Goto Process_End;
 end if;


--  if varReportID = 'ALLTRADEDEALFWD' then
--
-- OPEN GenCursor for
--                select pkgreturncursor.fncgetdescription(deal_company_code,2) COMPSHORTDESC,
--          '' Trans,(select (case
--                               when trad_import_export <= 25300050 then
--                                  'Exp'
--                               when trad_import_export > 25300050 then
--                                  'Imp'
--                          end) from trtran002,trtran004
--                    where trad_trade_reference=hedg_trade_reference
--                    and hedg_deal_number=deal_deal_number
--                     group by trad_import_export) importexport,
--          deal_execute_date EXEDATE,
--          pkgreturncursor.fncgetdescription(deal_counter_party,2) COUNTERPARTY,
--          deal_counter_party as counterpartycode,deal_company_code as COMPCODE,
--          pkgreturncursor.fncgetdescription(deal_Buy_sell,2) BUYSAL,
--          pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' ||
--          pkgreturncursor.fncgetdescription(deal_other_currency,2) OTHERCURRENCY,
--          deal_base_amount BASEAMT, deal_spot_rate SPOTRATE,
--          deal_Forward_rate FORWRATE,Deal_exchange_rate EXERATE,
--           DEAL_USER_REFERENCE as REFNO,
--          deal_maturity_from MaturityFrom,DEAL_MATURITY_DATE MATURITYDATE,
--          cdel_cancel_date CalcelDate,cdel_cancel_amount CancelAmt,
--          --CDEL_SPOT_RATE CancelSoptRate,
--          --CDEL_Forward_RATE CancelForwardRate,
--          cdel_cancel_rate CancelNetRate, cdel_other_amount PLUsd,
--          cdel_local_rate LocalRate,cdel_profit_loss PLLocal,
--          pkgreturnreport.GetSystemDate() as SystemDate,
--           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--          pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
--          frmDate as  FromDate ,
--          ToDate as ToDate
--    from  trtran001,trtran006
--    where deal_deal_number=cdel_deal_number(+)
--      and deal_record_status not in(10200005,10200006)
--      and cdel_record_status not in(10200005,10200006);
--
--   Goto Process_End;
-- end if;

 if varReportID = 'ALLTRADEDEALFWD' then


 insert into TEMP values(VARREPORTID,null);
 commit;
 QUERY_STR := '
                select pkgreturncursor.fncgetdescription(deal_company_code,2) COMPSHORTDESC,
          '''' Trans,
--          (select (case
--                              when trad_import_export <= 25300050 then
--                                  ''Exp''
--                               when trad_import_export > 25300050 then
--                                  ''Imp''
--                          end) from trtran002,trtran004
--                    where trad_trade_reference=hedg_trade_reference
--                    and hedg_deal_number=deal_deal_number
--                     group by trad_import_export) importexport,
          deal_execute_date EXEDATE,
          pkgreturncursor.fncgetdescription(deal_counter_party,2) COUNTERPARTY,
          deal_counter_party as counterpartycode,deal_company_code as COMPCODE,
          pkgreturncursor.fncgetdescription(deal_Buy_sell,2) BUYSAL,
          pkgreturncursor.fncgetdescription(deal_base_currency,2)  || ''/'' ||
          pkgreturncursor.fncgetdescription(deal_other_currency,2) OTHERCURRENCY,
          deal_base_amount BASEAMT, deal_spot_rate SPOTRATE,
          deal_Forward_rate FORWRATE,Deal_exchange_rate EXERATE,
           DEAL_USER_REFERENCE as REFNO,
          deal_maturity_from MaturityFrom,DEAL_MATURITY_DATE MATURITYDATE,
          cdel_cancel_date CalcelDate,cdel_cancel_amount CancelAmt,
          --CDEL_SPOT_RATE CancelSoptRate,
          --CDEL_Forward_RATE CancelForwardRate,
          cdel_cancel_rate CancelNetRate, cdel_other_amount PLUsd,
          cdel_local_rate LocalRate,cdel_profit_loss PLLocal,
          pkgreturnreport.GetSystemDate() as SystemDate,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
          pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
         '||''''||FRMDATE||''''||' as  FromDate,
          '||''''||TODATE||''''||'  as ToDate
    FROM trtran001
  LEFT OUTER JOIN trtran006 a
  ON cdel_deal_number = deal_deal_number
  and CDEL_RECORD_STATUS between 10200001 and 10200004
  where DEAL_RECORD_STATUS not in ('||''''||GCONST.STATUSDELETED||''''||','||''''||GCONST.STATUSINACTIVE||''''||' )
  '|| FINALCONDITION||'
  ORDER BY deal_execute_date';

   insert into TEMP values(QUERY_STR,null);
                       commit;
                         open GENCURSOR for QUERY_STR;
                       GOTO PROCESS_END;
                       end if;

--  if varReportID = 'OPTIONCONTRACT' then
--
-- -- OPEN GenCursor for
--  Query_Str := 'select pkgreturncursor.fncgetdescription(trad_company_code,2) Compshortdesc,trad_reference_date ReferenceDate,
--       trad_user_reference UserReference,trad_company_code as CompanyCode,
--       PKGRETURNCURSOR.FNCGETDESCRIPTION(TRAD_BUYER_SELLER,2) BUYSERSELLER,
--      -- TRAD_TRADE_FCY NOTIONAL, TRAD_TRADE_REFERENCE TRADREF,
--      HEDG_TRADE_REFERENCE TRADREF, HEDG_HEDGED_FCY NOTIONAL,
--       trad_maturity_from MaturityFrom,trad_maturity_date MaturityDate,
--       pkgreturncursor.fncgetdescription(trad_product_code,2) Product,
--       copt_execute_date DealDate, pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
--       copt_counter_party as bankcode,
--       copt_base_amount BaseAmount,copt_maturity_date Maturity,copt_delivery_date DeliveryDate,
--        pkgreturncursor.fncgetdescription(COPT_BROKER_CODE,2)as broker,
--       ( select round( avg(cosu_strike_rate),2) from trtran072
--          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
--            and cosu_option_type=32400001) "BC",
--         (select avg(cosu_strike_rate) from trtran072
--           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
--             and cosu_option_type=32400002) "BP",
--         (select avg(cosu_strike_rate) from trtran072
--           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
--             and cosu_option_type=32400002) "SP",
--         (select avg(cosu_strike_rate) from trtran072
--           where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
--             and cosu_option_type=32400001) "SC",
--       COPT_PREMIUM_AMOUNT PREMIUMAMOUNT, COPT_PREMIUM_LOCAL PREMIUMLOCAL,COPT_USER_REFERENCE BANKREFERENCE,
--       COPT_DEAL_NUMBER DealNumber,
--       --corv_exercise_date CancelDate, corv_base_amount CancelAmt,
--         -- corv_rbi_refrate rbirefrate,
--         -- corv_profit_loss GainLoss,
--         -- (corv_profit_loss-copt_premium_local) NetPL,
--          COPT_EXPIRY_DATE as expirydate,
--          pkgreturnreport.GetSystemDate() as SystemDate,
--           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--              to_date('||''''||frmDate||''''||') as  FromDate ,
--          to_date('||''''||toDate||''''||') as ToDate
--   from trtran002,trtran004,trtran071
--  -- ,trtran073
--  where hedg_trade_reference=trad_trade_reference
--    and hedg_deal_number=copt_deal_number
--    and hedg_hedging_with =32200003
----    and copt_deal_number =corv_deal_number (+)
--    and trad_record_status not in(10200005,10200006)
---- and corv_record_status not in(10200005,10200006);
-- and copt_record_status not in(10200005,10200006)';
--
--     Insert Into Temp Values (Query_Str,finalcondition);Commit;
--
--     Open Gencursor For Query_Str || finalcondition;
--      Goto Process_End;
-- end if;
--
--If Varreportid='BOMFORMA' or Varreportid='BOMFORMB' Then
-- Query_Str :='select  DEAL_DEAL_NUMBER as DEALNUMBER,
--        DEAL_EXECUTE_DATE AS EXEDATE,
--        pkgreturncursor.fncgetdescription (DEAL_BASE_CURRENCY,2) '||'||'||''''||'/'||''''||'||' ||'
--        pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2)  BASCURRENCY,
--       -- pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
--        DEAL_BASE_AMOUNT AS BASEAMT,
--        DEAL_MATURITY_FROM AS MATURITYFRM,
--        DEAL_MATURITY_DATE AS MATURITYDATE,
--        DEAL_USER_REFERENCE as USERREFERENCE,
--        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as BUYSELL,
--        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) AS BUYERSELLER,
--        TRAD_USER_REFERENCE AS USERREFNO,TRAD_REFERENCE_DATE AS REFDATE,
--        TRAD_MATURITY_DATE AS TRADMATURITYDATE,
--        LBNK_LONG_DESCRIPTION AS BANKNAME,
--        LBNK_SHORT_DESCRIPTION  AS BANKNAME1,
--        LBNK_ADDRESS_1 AS BNKADDRESS1,
--        LBNK_ADDRESS_2 AS BNKADDRESS2,
--        LBNK_ADDRESS_3 AS BNKADDRESS3,
--        LBNK_ADDRESS_4 AS BNKADDRESS4,
--          LBNK_LIMIT_INR AS BANKLIMIT,
--        to_date('||''''||frmDate||''''||') as FromDate,
--        to_date('||''''||toDate||''''||') as ToDate
--from    trtran001,TRTRAN002,TRTRAN004,TRMASTER306
--WHERE   DEAL_DEAL_NUMBER=HEDG_DEAL_NUMBER
--      AND HEDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--      AND DEAL_COUNTER_PARTY=LBNK_PICK_CODE
--      AND DEAL_PROCESS_COMPLETE=12400001';
--  Insert Into Temp Values (Query_Str,finalcondition);Commit;
--     Open Gencursor For Query_Str || finalcondition || ' order by deal_execute_date' ;
--     Goto Process_End;
-- End If;
--



If Varreportid='BOMFORMA' or Varreportid='BOMFORMB' Then
 Query_Str :='select  DEAL_DEAL_NUMBER as DEALNUMBER,
        DEAL_EXECUTE_DATE AS EXEDATE,
        pkgreturncursor.fncgetdescription (DEAL_BASE_CURRENCY,2) '||'||'||''''||'/'||''''||'||' ||'
        pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2)  BASCURRENCY,
       -- pkgreturncursor.fncgetdescription (DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
        DEAL_BASE_AMOUNT AS BASEAMT,
        DEAL_MATURITY_FROM AS MATURITYFRM,
        DEAL_MATURITY_DATE AS MATURITYDATE,
        DEAL_USER_REFERENCE as USERREFERENCE,
        DEAL_EXCHANGE_RATE as EXCHANGERATE,  --ADDED BY NILESH FOR BOMFORMB
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as BUYSELL,
        pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) AS BUYERSELLER,
        TRAD_USER_REFERENCE AS USERREFNO,TRAD_REFERENCE_DATE AS REFDATE,
        TRAD_MATURITY_DATE AS TRADMATURITYDATE,
        LBNK_LONG_DESCRIPTION AS BANKNAME,
        LBNK_SHORT_DESCRIPTION  AS BANKNAME1,
        LBNK_ADDRESS_1 AS BNKADDRESS1,
        LBNK_ADDRESS_2 AS BNKADDRESS2,
        LBNK_ADDRESS_3 AS BNKADDRESS3,
        LBNK_ADDRESS_4 AS BNKADDRESS4,
          LBNK_LIMIT_INR AS BANKLIMIT,
        to_date('||''''||frmDate||''''||') as FromDate,
        to_date('||''''||toDate||''''||') as ToDate
from    trtran001,TRTRAN002,TRTRAN004,TRMASTER306
WHERE   DEAL_DEAL_NUMBER=HEDG_DEAL_NUMBER
      AND HEDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
      AND DEAL_COUNTER_PARTY=LBNK_PICK_CODE
      AND DEAL_PROCESS_COMPLETE=12400001';
  Insert Into Temp Values (Query_Str,finalcondition);Commit;
     Open Gencursor For Query_Str || finalcondition || ' order by deal_execute_date' ;
     Goto Process_End;
 End If;


 If (Varreportid='OPTForwardCONTRACT') Then
   numerror := fnc_frwcontract(frmDate, Todate);

   if numerror = 0 then
      OPEN GenCursor for
       select FRWD_DEAL_NUMBER DealNumber,
             Pkgreturncursor.Fncgetdescription(FRWD_COMPANY_CODE,2) Companycode,
              FRWD_EXECUTE_DATE DealDate,
              pkgreturncursor.fncgetdescription(FRWD_COUNTER_PARTY,2) Bank,
              pkgreturncursor.fncgetdescription(FRWD_BASE_CURRENCY,2) || '/' ||
              pkgreturncursor.fncgetdescription(FRWD_OTHER_CURRENCY,2) currency,
              FRWD_EXCHANGE_RATE ExchangeRate,
              FRWD_BASE_AMOUNT BaseAmount,
              FRWD_MATURITY_FROM Maturity,
              FRWD_MATURITY_DATE MaturityTo,
              FRWD_USER_REFERENCE BankReference,
              FRWO_REFERENCE_DATE Referencedate,
              pkgreturncursor.fncgetdescription(FRWO_BUYER_SELLER,2) BuyserSeller,
              FRWO_TRADE_REFERENCE TradeReference,
              FRWO_HEDGED_FCY Notional,
              FRWO_TRADMATURITY_FROM TMaturityfrm,
              FRWO_TRADMATURITY_DATE TMaturityTo,
              pkgreturncursor.fncgetdescription(FRWO_PRODUCT_CODE,2) Product,
              FRWC_CANCEL_DATE CancelDate,
              FRWC_CANCLE_AMOUNT CancelAmt,
              FRWC_CANCLE_RATE CancelRate,
              FRWC_PROFIT_LOSS ProfitLoss,
              FRWC_OTHER_AMOUNT ProfitLossUsd,
               pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
              frmDate as  FromDate ,
              ToDate as ToDate
            from trsystem986
            where FRWD_EXECUTE_DATE between frmDate and TODate
                  and FRWD_ORDE_EXIST=1

            order by FRWC_ROW_NUMBER, FRWC_SUB_ROW;
       end if;
      Goto Process_End;

 end if;

  if varReportID = 'OPTIONCONTRACT' then

   numerror := fnc_optioncontract(frmDate, Todate);

   if numerror = 0 then
      OPEN GenCursor for
           select REPD_DEAL_NUMBER DealNumber,
                  pkgreturncursor.fncgetdescription(REPD_COMPANY_CODE,2) Compshortdesc,
                  REPD_COMPANY_CODE CompanyCode,REPD_COUNTER_PARTY bankcode,
                  REPD_EXECUTE_DATE DealDate,
                 pkgreturncursor.fncgetdescription(REPD_COUNTER_PARTY,2) Bank,
                  REPD_BASE_AMOUNT BaseAmount,
                  REPD_MATURITY_DATE Maturity,
                  REPD_DELIVERY_DATE DeliveryDate,
                  REPD_PREMIUM_AMOUNT PREMIUMAMOUNT,
                  REPD_PREMIUM_LOCAL PREMIUMLOCAL,
                  REPD_USER_REFERENCE BANKREFERENCE,
                  REPD_EXPIRY_DATE expirydate,
                 --add in dataset
                  REPE_REFERENCE_DATE ReferenceDateE,
                  REPE_TRADE_REFERENCE TRADREFE,
                  REPE_HEDGED_FCY NOTIONALE,
                  PKGRETURNCURSOR.FNCGETDESCRIPTION(REPE_BUYER_SELLER,2) BUYSERSELLERE,
                  REPE_MATURITY_FROM MaturityFromE,
                  pkgreturncursor.fncgetdescription(REPE_PRODUCT_CODE,2) ProductE,
                  pkgreturncursor.fncgetdescription(REPE_IMPORT_EXPORT,2)impotrExportE,
                  ------
                  REPI_REFERENCE_DATE ReferenceDate,
                  REPI_TRADE_REFERENCE TRADREF,
                  REPI_HEDGED_FCY NOTIONAL,
                  PKGRETURNCURSOR.FNCGETDESCRIPTION(REPI_BUYER_SELLER,1) BUYSERSELLER,
                  REPI_MATURITY_FROM MaturityFrom,
                  pkgreturncursor.fncgetdescription(REPI_PRODUCT_CODE,2) Product,
                  pkgreturncursor.fncgetdescription(REPI_IMPORT_EXPORT,2)impotrExport,

                  REPC_EXERCISE_DATE CancelDate,
                  REPC_CANCLE_AMOUNT CancelAmt,
                  REPC_RBI_REFRATE rbirefrate,
                  REPC_PROFIT_LOSS GainLoss,
                  (REPC_PROFIT_LOSS-REPD_PREMIUM_LOCAL) NetPL,

                  ( select round( avg(cosu_strike_rate),2) from trtran072
                   where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300001
                   and cosu_option_type=32400001) "BC",
                 (select avg(cosu_strike_rate) from trtran072
                  where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300001
                  and cosu_option_type=32400002) "BP",
                 (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300002
                 and cosu_option_type=32400002) "SP",
                (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300002
                 and cosu_option_type=32400001) "SC",
                 pkgreturnreport.GetSystemDate() as SystemDate,
                   pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
                frmDate as  FromDate ,
                ToDate as ToDate
            from trsystem987
            where REPD_EXECUTE_DATE between frmDate and TODate
                  AND REPI_ORDER_EXIST=1
            order by REPC_ROW_NUMBER, REPC_SUB_ROW;
       end if;
      Goto Process_End;

 end if;

-- if varReportID = 'OPTIONCONTRACT' then
--
--   delete from temp;
--   insert into temp values ('siva->', 'funtion called');
--   commit;
--
--   numerror := fnc_optioncontract(frmDate, Todate);
--
--
--   if numerror = 0 then
--      OPEN GenCursor for
--           select REPD_DEAL_NUMBER DealNumber,
--                  pkgreturncursor.fncgetdescription(REPD_COMPANY_CODE,2) Compshortdesc,
--                  REPD_COMPANY_CODE CompanyCode,REPD_COUNTER_PARTY bankcode,
--                  REPD_EXECUTE_DATE DealDate,
--                 pkgreturncursor.fncgetdescription(REPD_COUNTER_PARTY,2) Bank,
--                  REPD_BASE_AMOUNT BaseAmount,
--                  REPD_MATURITY_DATE Maturity,
--                  REPD_DELIVERY_DATE DeliveryDate,
--                  REPD_PREMIUM_AMOUNT PREMIUMAMOUNT,
--                  REPD_PREMIUM_LOCAL PREMIUMLOCAL,
--                  REPD_USER_REFERENCE BANKREFERENCE,
--                  REPD_EXPIRY_DATE expirydate,
--
--                  REPE_REFERENCE_DATE ReferenceDateE,
--                  REPE_TRADE_REFERENCE TRADREFE,
--                  REPE_HEDGED_FCY NOTIONALE,
--                  PKGRETURNCURSOR.FNCGETDESCRIPTION(REPE_BUYER_SELLER,2) BUYSERSELLERE,
--                  REPE_MATURITY_FROM MaturityFromE,
--                  pkgreturncursor.fncgetdescription(REPE_PRODUCT_CODE,2) ProductE,
--                  pkgreturncursor.fncgetdescription(REPE_IMPORT_EXPORT,2)impotrExportE,
--
--                  REPI_REFERENCE_DATE ReferenceDate,
--                  REPI_TRADE_REFERENCE TRADREF,
--                  REPI_HEDGED_FCY NOTIONAL,
--                  PKGRETURNCURSOR.FNCGETDESCRIPTION(REPI_BUYER_SELLER,2) BUYSERSELLER,
--                  REPI_MATURITY_FROM MaturityFrom,
--                  pkgreturncursor.fncgetdescription(REPI_PRODUCT_CODE,2) Product,
--                  pkgreturncursor.fncgetdescription(REPI_IMPORT_EXPORT,2)impotrExport,
--
--                  REPC_EXERCISE_DATE CancelDate,
--                  REPC_CANCLE_AMOUNT CancelAmt,
--                  REPC_RBI_REFRATE rbirefrate,
--                  REPC_PROFIT_LOSS GainLoss,
--                  (REPC_PROFIT_LOSS-REPD_PREMIUM_LOCAL) NetPL,
--
--                  ( select round( avg(cosu_strike_rate),2) from trtran072
--                   where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300001
--                   and cosu_option_type=32400001) "BC",
--                 (select avg(cosu_strike_rate) from trtran072
--                  where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300001
--                  and cosu_option_type=32400002) "BP",
--                 (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300002
--                 and cosu_option_type=32400002) "SP",
--                (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=REPD_DEAL_NUMBER and cosu_buy_sell=25300002
--                 and cosu_option_type=32400001) "SC",
--                 pkgreturnreport.GetSystemDate() as SystemDate,
--                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                frmDate as  FromDate ,
--                ToDate as ToDate
--            from trsystem987
--            where REPD_EXECUTE_DATE between frmDate and TODate
--                  AND REPI_ORDER_EXIST=1
--            order by REPC_ROW_NUMBER, REPC_SUB_ROW;
--       end if;
--      Goto Process_End;
--
-- end if;


 --------------------added by sharath--------------------------------------------
--------------------ON 12-08-2011-----------------------------------------------
--
--If (Varreportid='OPTForwardCONTRACT') Then
--  Query_Str :='Select Pkgreturncursor.Fncgetdescription(Trad_Company_Code,2) Companycode,
--               Trad_Reference_Date Referencedate,
--               trad_trade_reference TradeReference,
--               trad_user_reference UserReference,
--                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturncursor.fncgetdescription(trad_buyer_seller,2) BuyserSeller,
--       trad_trade_fcy Notional,
--       trad_maturity_from MaturityFrom,
--       trad_maturity_date MaturityDate,
--       pkgreturncursor.fncgetdescription(trad_product_code,2) Product,
--       deal_execute_date DealDate,
--       pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
--         (case
--                when trad_import_export <= 25300050 then
--             '||''''||'Exp'||''''||'
--                when trad_import_export > 25300050 then
--                 '||''''||'Imp'||''''||'
--          end) Catg,  pkgreturncursor.fncgetdescription(deal_base_currency,2)'||'||'||''''||'/'||''''||'||' ||'
--          pkgreturncursor.fncgetdescription(deal_other_currency,2) Currency,
--          deal_exchange_rate ExchangeRate,deal_base_amount BaseAmount,
--          deal_maturity_from Maturity,deal_maturity_date MaturityTo,
--          deal_user_reference BankReference,cdel_cancel_date CancelDate,
--          cdel_cancel_amount CancelAmt,cdel_cancel_rate CancelRate,
--          cdel_other_amount ProfitLossUsd,cdel_local_rate WashRate,
--          cdel_profit_loss ProfitLoss,
--           -- to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate
--   from
--   trtran002 outer join trtran004
--     on  hedg_trade_reference=trad_trade_reference
--     right join trtran001 right outer join trtran006
--     on cdel_deal_number = deal_deal_number
--     on deal_deal_number=hedg_deal_number
--
----   trtran002,trtran004,trtran001 left outer join trtran006
----     on cdel_deal_number = deal_deal_number
----  where hedg_trade_reference=trad_trade_reference
----    and hedg_deal_number=deal_deal_number
----   --and hedg_hedging_with =32200001
----   -- and cdel_deal_number = deal_deal_number (+)
--    and trad_record_status not in(10200005,10200006)
--    and deal_record_status not in(10200005,10200006)
--    And Cdel_Record_Status Not In(10200005,10200006)';
--
--     Open Gencursor For Query_Str || finalcondition || ' order by deal_execute_date' ;
--     Goto Process_End;
-- End If;


--If (Varreportid='OPTForwardCONTRACT') Then
--  Query_Str :='Select Pkgreturncursor.Fncgetdescription(Trad_Company_Code,2) Companycode,
--               Trad_Reference_Date Referencedate,
--               trad_user_reference UserReference,
--             --trad_trade_reference TradeReference,trad_trade_fcy Notional,
--               HEDG_TRADE_REFERENCE TradeReference, HEDG_HEDGED_FCY Notional,
--               trad_maturity_from MaturityFrom,trad_maturity_date MaturityDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               pkgreturncursor.fncgetdescription(trad_buyer_seller,2) BuyserSeller,
--               pkgreturncursor.fncgetdescription(trad_product_code,2) Product,
--               deal_execute_date DealDate,
--              pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
--         (case
--                when trad_import_export <= 25300050 then
--             '||''''||'Exp'||''''||'
--                when trad_import_export > 25300050 then
--                 '||''''||'Imp'||''''||'
--          end) Catg,
--            pkgreturncursor.fncgetdescription(deal_base_currency,2)'||'||'||''''||'/'||''''||'||' ||'
--            pkgreturncursor.fncgetdescription(deal_other_currency,2) Currency,
--            deal_exchange_rate ExchangeRate,deal_base_amount BaseAmount,
--            deal_maturity_from Maturity,deal_maturity_date MaturityTo,DEAL_DEAL_NUMBER DealNumber,
--            deal_user_reference BankReference,cdel_cancel_date CancelDate,
--            cdel_cancel_amount CancelAmt,cdel_cancel_rate CancelRate,
--            cdel_other_amount ProfitLossUsd,cdel_local_rate WashRate,
--            cdel_profit_loss ProfitLoss,
--           -- to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate
--   from
----   trtran002 outer join trtran004
----     on  hedg_trade_reference=trad_trade_reference
----     inner join trtran001 right outer join trtran006
----     on cdel_deal_number = deal_deal_number
----     on deal_deal_number=hedg_deal_number
----    and trad_record_status not in(10200005,10200006)
----    and deal_record_status not in(10200005,10200006)
--
--        trtran002,trtran004,trtran001 left outer join trtran006
--    on  cdel_deal_number = deal_deal_number
-- where --and DEAL_MATURITY_DATE between ('||''''||frmDate||''''||') and ('||''''||toDate||''''||')
--   --and hedg_hedging_with =32200001 and cdel_deal_number = deal_deal_number (+)
--  --  And Cdel_Record_Status Not In(10200005,10200006)
--  hedg_trade_reference=trad_trade_reference
--        and hedg_deal_number=deal_deal_number';
--
--
--
--    insert into temp values(query_str,finalcondition);
--
--     Open Gencursor For Query_Str || finalcondition || ' order by deal_execute_date' ;
--     Goto Process_End;
-- End If;





-- if varReportID= 'M2MForwardS' then
--   OPEN GenCursor for
--
--select  pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) COMPANY,
--        DEAL_DEAL_NUMBER  DEALNUMBER,
--        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) BANK,
--        DEAL_BASE_AMOUNT BASEAMT,
--        CDEL_PROFIT_LOSS PROFITLOSS,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--        frmDate as FromDate,toDate as ToDate
--FROM    TRTRAN001, trtran006
--WHERE   DEAL_DEAL_NUMBER=CDEL_DEAL_NUMBER
--        AND CDEL_RECORD_STATUS NOT IN (10200005,10200006)
--        AND DEAL_RECORD_STATUS NOT IN (10200005,10200006);
--        Goto Process_End;
--  end if;


If (Varreportid='M2MFRWDOUTSTAND') Then
--   Open Gencursor For
   Query_Str := 'SELECT pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) Company,
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) Bank,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)Buysale,
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1)Remarks,
        TRUNC(round(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Bookingrate,
        TRUNC(Round(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Cancelrate,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'))Outstanding,
        SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell)) profitloss,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Bookoutstanding,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Canceloutstanig,
        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CURRENCY,
        '||''''||frmDate||''''||' AS FromDate,
        '||''''||toDate||''''||'  AS ToDate ' || varGroupField || '
      FROM TRTRAN001
      WHERE ((deal_process_complete                               = 12400001
      AND deal_complete_date                                      > '||''''||frmDate||''''||')
      OR deal_process_complete                                    = 12400002)
      AND DEAL_RECORD_STATUS NOT                                 IN (10200005,10200006)
      '||finalcondition||'
      GROUP BY pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2),
        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2),
        pkgreturnreport.getCompanyName(),
        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2),DEAL_BASE_CURRENCY,
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1),DEAL_BACKUP_DEAL,DEAL_COMPANY_CODE,DEAL_BUY_SELL,DEAL_COUNTER_PARTY,
        '||''''||frmDate||''''||',
        '||''''||toDate||''''||''  ;
  Insert Into Temp Values (Query_Str,finalcondition);Commit;
  OPEN GenCursor for Query_Str ;
  Goto Process_End;
End If;


--  if varReportID = 'FWDPROJCASHFLOWEARLYCANCLD' or varReportID = 'FWDPROJCASHFLOWEARLYCANCLD2' then
--
--      --open gencursor for
--     Query_Str:= 'select  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                         pkgreturncursor.fncgetdescription(deal_company_code, 2) company,
--                         pkgreturncursor.fncgetdescription(deal_counter_party, 2) bank,
--                         pkgreturncursor.fncgetdescription(deal_buy_sell, 2)buysell,
--                         pkgreturncursor.fncgetdescription(deal_backup_deal, 1)remarks,
--                         sum(clm1) clm1,
--                         sum(clm2) clm2,
--                         sum(clm3) clm3,
--                         sum(clm4) clm4,
--                         sum(clm5) clm5,
--                         sum(clm6) clm6,
--                         sum(clm7) clm7,
--                         sum(clm8) clm8,
--                         sum(clm9) clm9,
--                         sum(clm10) clm10,
--                         sum(clm11) clm11,
--                         sum(clm12) clm12,
--                         --pkgreturncursor.fncgetdescription(deal_base_currency, 2) currency,
--                         substr(pkgreturncursor.fncGetdescription(deal_counter_party, 2),1, instr(pkgreturncursor.fncGetdescription(deal_counter_party, 2),''('') - 1) CounterParty,
--                         trunc(round(sum(outstand_amt * exchng_rate)/sum(outstand_amt),2),2)bookingrate,
--                         trunc(round(sum(outstand_amt * crate)/sum(outstand_amt),2),2)cancelrate,
--                         sum(outstand_amt) Outstanding,
--                         sum(profit_loss) profitloss,';
--     Query_Str1:=       'sum(outstand_amt)* trunc(sum(outstand_amt * exchng_rate)/sum(outstand_amt),2) bookoutstanding,
--                         sum(outstand_amt) * trunc(sum(outstand_amt * crate)/sum(outstand_amt),2) canceloutstanig,
--                         '''|| frmDate ||''' as fromdate,
--                         '''|| todate ||'''  as todate ' ||
--                         varGroupField || '
--                    from (
--                         select deal_company_code,
--                                deal_counter_party,
--                                deal_buy_sell,
--                                deal_backup_deal,
--                                deal_base_currency,
--                                case
--                                   when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(to_date('''|| todate ||''',''dd/mm/yyyy''),''MON'') then
--                                      pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                   else 0
--                                end as clm1,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),1),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm2,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),2),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm3,';
--     Query_Str2:=              'case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),3),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm4,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),4),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm5,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),5),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm6,';
--     Query_Str3:=              'case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),6),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm7,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),7),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm8,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),8),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm9,';
--     Query_Str4:=              'case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),9),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm10,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),10),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm11,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),11),''MON'') then
--                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
--                                  else 0
--                                end as clm12,';
--     Query_Str5:=              'pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||''') outstand_amt,
--                                pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell) profit_loss,
--                                deal_exchange_rate exchng_rate,
--                                pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''', deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date) crate
--                           from trtran001
--                          where ((deal_process_complete = 12400001 and deal_complete_date > '''|| todate ||''')
--                                  or deal_process_complete = 12400002)
--                            and deal_record_status not   in (10200005,10200006)
--                            and deal_execute_date between '''|| frmdate || '''
--                                and '''|| todate ||''' '||
--                                finalcondition ||'
--                          union all
--                         select deal_company_code,
--                                deal_counter_party,
--                                deal_buy_sell,
--                                deal_backup_deal,
--                                deal_base_currency,';
--     Query_Str6:=              'case
--                                   when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(to_date('''|| todate ||''',''dd/mm/yyyy''),''MON'') then
--                                      cdel_profit_loss
--                                   else 0
--                                end as clm1,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),1),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm2,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),2),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm3,';
--     Query_Str7:=              'case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),3),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm4,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),4),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm5,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),5),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm6,';
--     Query_Str8:=              'case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),6),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm7,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),7),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm8,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),8),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm9,';
--     Query_Str9:=              'case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),9),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm10,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),10),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm11,
--                                case
--                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| todate ||''',''dd/mm/yyyy''),11),''MON'') then
--                                     cdel_profit_loss
--                                  else 0
--                                end as clm12,';
--     Query_Str10:=             'pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||''') outstand_amt,
--                                cdel_profit_loss profit_loss,
--                                deal_exchange_rate exchng_rate,
--                                pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| todate ||''', deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date) crate
--                           from trtran001,
--                                trtran006
--                          where deal_deal_number = cdel_deal_number(+)
--                            and deal_record_status not   in (10200005,10200006)
--                            and cdel_record_status not in (10200005,10200006)
--                            and cdel_cancel_date between '''|| frmdate ||'''
--                                and '''|| todate ||'''
--                            and cdel_profit_loss is not null ' ||
--                                finalcondition ||'
--                         )
--                   where outstand_amt <> 0
--                group by deal_company_code,
--                         deal_counter_party,
--                         deal_base_currency,
--                         deal_buy_sell,
--                         deal_backup_deal
--                   order by deal_company_code, deal_counter_party';
--
--     open gencursor
--      for Query_Str || Query_Str1 || Query_Str2 || Query_Str3 || Query_Str4 ||
--          Query_Str5 || Query_Str6 || Query_Str7 || Query_Str8 || Query_Str9 || Query_Str10;
----     delete from temp;commit;
----     insert into temp values (Query_Str , Query_Str1)( Query_Str2 , Query_Str3 ) (Query_Str4,Query_Str5);commit;
----     insert into temp values ( || Query_Str6 , Query_Str7 || Query_Str8 );commit;
----     insert into temp values ( Query_Str9 , Query_Str10);commit;
--     goto Process_End;
-- end if;

  if varReportID = 'FWDPROJCASHFLOWEARLYCANCLD' or varReportID = 'FWDPROJCASHFLOWEARLYCANCLD2' then

      --open gencursor for
     Query_Str:= 'select  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturncursor.fncgetdescription(deal_company_code, 2) company,
                         pkgreturncursor.fncgetdescription(deal_counter_party, 2) bank,
                         pkgreturncursor.fncgetdescription(deal_buy_sell, 2)buysell,
                         pkgreturncursor.fncgetdescription(deal_backup_deal, 1)remarks,
                         sum(clm1) clm1,
                         sum(clm2) clm2,
                         sum(clm3) clm3,
                         sum(clm4) clm4,
                         sum(clm5) clm5,
                         sum(clm6) clm6,
                         sum(clm7) clm7,
                         sum(clm8) clm8,
                         sum(clm9) clm9,
                         sum(clm10) clm10,
                         sum(clm11) clm11,
                         sum(clm12) clm12,
                         --pkgreturncursor.fncgetdescription(deal_base_currency, 2) currency,
                         substr(pkgreturncursor.fncGetdescription(deal_counter_party, 2),1, instr(pkgreturncursor.fncGetdescription(deal_counter_party, 2),''('') - 1) CounterParty,
                         trunc(round(sum(outstand_amt * exchng_rate)/sum(outstand_amt),2),2)bookingrate,
                         trunc(round(sum(outstand_amt * crate)/sum(outstand_amt),2),2)cancelrate,
                         sum(outstand_amt) Outstanding,
                         sum(profit_loss) profitloss,';
     Query_Str1:=       'sum(outstand_amt)* trunc(sum(outstand_amt * exchng_rate)/sum(outstand_amt),2) bookoutstanding,
                         sum(outstand_amt) * trunc(sum(outstand_amt * crate)/sum(outstand_amt),2) canceloutstanig,
                         '''|| frmDate ||''' as fromdate,
                         '''|| todate ||'''  as todate ' ||
                         varGroupField || '
                    from (
                         select deal_company_code,
                                deal_counter_party,
                                deal_buy_sell,
                                deal_backup_deal,
                                deal_base_currency,
                                case
                                   when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(to_date('''|| frmDate ||''',''dd/mm/yyyy''),''MON'') then
                                      pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                   else 0
                                end as clm1,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),1),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm2,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),2),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm3,';
     Query_Str2:=              'case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),3),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm4,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),4),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm5,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),5),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm6,';
     Query_Str3:=              'case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),6),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm7,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),7),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm8,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),8),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm9,';
     Query_Str4:=              'case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),9),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm10,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),10),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm11,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),11),''MON'') then
                                     pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| frmDate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| frmDate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell)
                                  else 0
                                end as clm12,';
     Query_Str5:=              'pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||''') outstand_amt,
                                pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||'''),pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''' , deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date),deal_exchange_rate,deal_buy_sell) profit_loss,
                                deal_exchange_rate exchng_rate,
                                pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''', deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date) crate
                           from trtran001
                          where ((deal_process_complete = 12400001 and deal_complete_date > '''|| todate ||''')
                                  or deal_process_complete = 12400002)
                            and deal_record_status not   in (10200005,10200006)
                            '||
                                finalcondition ||'
                          union all
                         select deal_company_code,
                                deal_counter_party,
                                deal_buy_sell,
                                deal_backup_deal,
                                deal_base_currency,';
     Query_Str6:=              'case
                                   when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(to_date('''|| frmDate ||''',''dd/mm/yyyy''),''MON'') then
                                      cdel_profit_loss
                                   else 0
                                end as clm1,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),1),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm2,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),2),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm3,';
     Query_Str7:=              'case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),3),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm4,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),4),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm5,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),5),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm6,';
     Query_Str8:=              'case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),6),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm7,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),7),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm8,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),8),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm9,';
     Query_Str9:=              'case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),9),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm10,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),10),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm11,
                                case
                                  when to_char(to_date(deal_maturity_date,''dd/mm/yyyy''),''MON'') = to_char(add_months(to_date('''|| frmDate ||''',''dd/mm/yyyy''),11),''MON'') then
                                     cdel_profit_loss
                                  else 0
                                end as clm12,';
     Query_Str10:=             'pkgforexprocess.fncgetoutstanding(deal_deal_number, deal_serial_number,1,1, '''|| todate ||''') outstand_amt,
                                cdel_profit_loss profit_loss,
                                deal_exchange_rate exchng_rate,
                                pkgforexprocess.fncgetrate(deal_base_currency, 30400003,'''|| frmDate ||''', deal_buy_sell, (pkgforexprocess.fncallotmonth(deal_counter_party,'''|| todate ||''' ,deal_maturity_date)),deal_maturity_date) crate
                           from trtran001,
                                trtran006
                          where deal_deal_number = cdel_deal_number(+)
                            and deal_record_status not   in (10200005,10200006)
                            and cdel_record_status not in (10200005,10200006)
                            and cdel_cancel_date between '''|| frmdate ||'''
                                and '''|| todate ||'''
                            and cdel_profit_loss is not null ' ||
                                finalcondition ||'
                         )
                   where outstand_amt <> 0
                group by deal_company_code,
                         deal_counter_party,
                         deal_base_currency,
                         deal_buy_sell,
                         deal_backup_deal
                   order by deal_company_code, deal_counter_party';

     open gencursor
      for Query_Str || Query_Str1 || Query_Str2 || Query_Str3 || Query_Str4 ||
          Query_Str5 || Query_Str6 || Query_Str7 || Query_Str8 || Query_Str9 || Query_Str10;
--     delete from temp;commit;
                  delete from temp;commit;
                  insert into temp values (Query_str,1);commit;
                  insert into temp values (Query_str1,2);commit;
                  insert into temp values (Query_str2,3);commit;
                  insert into temp values (Query_str3,4);commit;
                  insert into temp values (Query_str4,5);commit;
                  insert into temp values (Query_str5,6);commit;
                  insert into temp values (Query_str6,7);commit;
                  insert into temp values (Query_str7,8);commit;
                  insert into temp values (Query_str8,9);commit;
                  insert into temp values (Query_str9,10);commit;
                  insert into temp values (Query_str10,finalcondition);commit;
                  --     insert into temp values ( || Query_Str6 , Query_Str7 || Query_Str8 );commit;
--     insert into temp values ( Query_Str9 , Query_Str10);commit;
     goto Process_End;
 end if;

If (Varreportid='BANKLIMITRPT') Then
 Open Gencursor For
     SELECT pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) Company,
       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) Bank,
        pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
       SUM(DECODE(DEAL_BACKUP_DEAL,33300055,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate)))/1000000 BULKHedge,
       SUM(DECODE(DEAL_BUY_SELL,25300002,DECODE(DEAL_BACKUP_DEAL,33300054,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate))))/1000000 thersale,
       SUM(DECODE(DEAL_BUY_SELL,25300001,DECODE(DEAL_BACKUP_DEAL,33300054,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate))))/1000000 Otherbuy,
       SUM(NVL(DECODE(DEAL_BACKUP_DEAL,33300055,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate)),0))/1000000 +
       SUM(NVL(DECODE(DEAL_BUY_SELL,25300002,DECODE(DEAL_BACKUP_DEAL,33300054,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate))),0))/1000000 +
       SUM(NVL(DECODE(DEAL_BUY_SELL,25300001,DECODE(DEAL_BACKUP_DEAL,33300054,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate))),0))/1000000 totutilisation,
       SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate),
       pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,frmDate , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,frmDate ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell))  profitloss,
       (nvl(LBNK_LIMIT_USD,0)/1000000) Usd,
       (nvl(LBNK_LIMIT_INR,0)/1000000) Inr,
       (LBNK_LIMIT_USD - SUM(NVL(DECODE(DEAL_BACKUP_DEAL,33300055,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate)),0))/1000000 +
       SUM(NVL(DECODE(DEAL_BUY_SELL,25300002,DECODE(DEAL_BACKUP_DEAL,33300054,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate))),0))/1000000 +
       SUM(NVL(DECODE(DEAL_BUY_SELL,25300001,DECODE(DEAL_BACKUP_DEAL,33300054,pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, frmDate))),0))/1000000) Currentavil,
       frmDate AS FromDate,
       toDate  AS ToDate
     FROM TRTRAN001,
       trmaster306
     WHERE ((deal_process_complete = 12400001
     AND deal_complete_date        > frmDate)
     OR deal_process_complete      = 12400002)
     AND DEAL_RECORD_STATUS NOT   IN (10200005,10200006)
     AND DEAL_COUNTER_PARTY        = LBNK_PICK_CODE
     AND DEAL_BACKUP_DEAL         IN(33300055,33300054)

 --  group by pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2), pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2), pkgreturnreport.getCompanyName(), (nvl(LBNK_LIMIT_USD,0)/1000000), (nvl(LBNK_LIMIT_INR,0)/1000000), frmDate, toDateeee;
     GROUP BY pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2), pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2), pkgreturnreport.getCompanyName(varUserID), LBNK_LIMIT_USD, LBNK_LIMIT_INR, frmDate, toDate;
 Goto Process_End;
End If;


If (Varreportid='M2MSUMMARYRPT') Then
   Query_Str := 'select  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1)Remarks,
        TRUNC(round(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Bookingrate,
        TRUNC(Round(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2),2)Cancelrate,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'))Outstanding,
        SUM(pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell)) profitloss,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') *DEAL_EXCHANGE_RATE)/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Bookoutstanding,
        SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')) * TRUNC(SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||') * pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date))/SUM(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||')),2) Canceloutstanig,
        '||''''||frmDate||''''||' AS FromDate,
        '||''''||toDate||''''||'  AS ToDate
      FROM TRTRAN001
      WHERE ((deal_process_complete                               = 12400001
      AND deal_complete_date                                      > '||''''||frmDate||''''||')
      OR deal_process_complete                                    = 12400002)
      AND DEAL_RECORD_STATUS NOT                                 IN (10200005,10200006)
      '||finalcondition||'
      GROUP BY pkgreturnreport.getCompanyName(),
        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1),
        '||''''||frmDate||''''||',
        '||''''||toDate||''''||'' ;
  Insert Into Temp Values (Query_Str,finalcondition);Commit;
  OPEN GenCursor for Query_Str ;
  Goto Process_End;
End If;

IF Varreportid='OPTMNTLYSMRYTABULARBANKWISE' THEN

   Query_Str:='select pkgreturncursor.fncgetdescription(copt_company_code, 2) company,
                      pkgreturncursor.fncgetdescription(copt_base_currency, 2) currency,
                     -- pkgreturncursor.fncgetdescription(copt_counter_party, 2) bank,
                     case when COPT_COUNTER_PARTY like''%306%'' then
                        substr(pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2),1, instr( pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2),''('')-1)
                     else
                       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) end as  bank,
                       last_day(copt_maturity_date) mat_month,
                       substr(to_date(last_day(copt_maturity_date),'''||'dd-mon-yyyy'||'''),4,8) m_month,
                    --  sum(copt_base_amount/1000000) amt,
                      sum( pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,''' ||GConst.UTILOPTIONHEDGEDEAL|| ''',''' ||GConst.AMOUNTFCY|| ''',''' || frmdate || ''')/1000000) AS amt,
                      to_date(''' || frmdate || ''') asondate,
                       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
                 from trtran071
                 where
                 ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE > ''' || frmdate || ''') or copt_PROCESS_COMPLETE = 12400002)
                   and copt_record_status not in(10200005,10200006)
                     ' || finalcondition || '
             group by copt_company_code,
                      copt_base_currency,
                      copt_counter_party,
                      last_day(copt_maturity_date)
             order by copt_company_code,
                      copt_base_currency,
                      copt_counter_party,
                      last_day(copt_maturity_date)';
    delete from temp;
   Insert Into Temp Values ('siva', Query_Str);
   Commit;
    OPEN Gencursor
    FOR Query_Str;

   GOTO Process_End;
END IF;

If varReportID= 'M2MRPTOPTMONTHWISE' then
   LocalBank := 'dd/mm/yyyy';
   mFieldCondition := 'MON';
   Query_Str := 'SELECT pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) Company,
                pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,1)Backupdeal,
                SUM(pkgforexprocess.fncGetOutstanding(COPT_DEAL_NUMBER, COPT_SERIAL_NUMBER,15,1, '||''''||frmDate||''''||'))Outstanding,
                (SELECT ROUND( AVG(cosu_strike_rate),4) FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300001  AND cosu_option_type  =32400001) "BC",
                (SELECT AVG(cosu_strike_rate)  FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300001  AND cosu_option_type  =32400002  GROUP BY cosu_strike_rate) "BP",
                (SELECT AVG(cosu_strike_rate)  FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300002  AND cosu_option_type  =32400002  GROUP BY cosu_strike_rate) "SP",
                (SELECT AVG(cosu_strike_rate)  FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300002  AND cosu_option_type  =32400001  GROUP BY cosu_strike_rate ) "SC", ';
   Query_Str1:=  'CASE COPT_REFRATE_CODE
                  WHEN 33100001 THEN (SELECT LRAT_RBI_USD FROM trsystem017 a WHERE LRAT_EFFECTIVE_DATE =(SELECT MAX(LRAT_EFFECTIVE_DATE)
                  FROM trsystem017 b WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  WHEN 33100002 THEN (SELECT LRAT_TOKYO_RATE FROM trsystem017 a WHERE LRAT_EFFECTIVE_DATE =(SELECT MAX(LRAT_EFFECTIVE_DATE)
                  FROM trsystem017 b WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))  END AS canclerate,
                  Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE)) as mtmpl,
                  CASE ';
    Query_Str2 :=  'WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||')
                  THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm1,
                  CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),1),'||''''||mFieldCondition||''''||')
                  THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm2, ';
   Query_Str3 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),2),'||''''||mFieldCondition||''''||')
                  THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm3,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),3),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b ';
 Query_Str4 :=    'WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm4,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),4),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm5, ';
   Query_Str5 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),5),'||''''||mFieldCondition||''''||')
                  THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm6,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),6),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,';
  Query_Str6 := ' CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm7,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),7),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm8, ';
   Query_Str7 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),8),'||''''||mFieldCondition||''''||')
                  THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm9,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),9),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm10,
                  CASE ';
  Query_Str8 := ' WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),10),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm11,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),11),'||''''||mFieldCondition||''''||')
                    THEN                   Sum(fncGetprofitLossOptions(COPT_DEAL_NUMBER,
                  CASE COPT_REFRATE_CODE  WHEN 33100001 THEN  (SELECT LRAT_RBI_USD
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                    WHEN 33100002
                    THEN
                      (SELECT LRAT_TOKYO_RATE
                      FROM trsystem017 a
                      WHERE LRAT_EFFECTIVE_DATE =
                        (SELECT MAX(LRAT_EFFECTIVE_DATE)
                        FROM trsystem017 b
                        WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))
                  END ,COPT_EXECUTE_DATE))
                  END AS Clm12 ,
                  '||''''||frmDate||''''||' AS FromDate,
                  '||''''||toDate||''''||'  AS ToDate '|| varGroupField || ' ';
   Query_Str9 := ' FROM trtran071
                  WHERE ((COPT_PROCESS_COMPLETE = 12400001
                  AND COPT_COMPLETE_DATE        > '||''''||frmDate||''''||')
                  OR COPT_PROCESS_COMPLETE      = 12400002)
                  AND COPT_RECORD_STATUS NOT   IN (10200005,10200006)  '||finalcondition||'
                  GROUP BY COPT_COMPANY_CODE, copt_deal_number, COPT_COUNTER_PARTY,COPT_REFRATE_CODE,COPT_MATURITY_DATE,
                  '||''''||frmDate||''''||','||''''||toDate||''''||',COPT_BACKUP_DEAL,COPT_EXECUTE_DATE';

        Insert Into Temp Values (Query_Str,Query_Str1);Commit;
        Insert Into Temp Values (Query_Str2,Query_Str3);Commit;
        Insert Into Temp Values (Query_Str4,Query_Str5);Commit;

        OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4||Query_Str5||Query_Str6||Query_Str7||Query_Str8||Query_Str9 ;
        Goto Process_End;
End if;


If varReportID= 'M2MRPTOPTMONTHWISEBVALUATION' then
   LocalBank := 'dd/mm/yyyy';
   mFieldCondition := 'MON';

   Query_Str := 'SELECT pkgreturncursor.fncgetdescription( MTMR_COMPANY_CODE,2) Company,
                pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,1)Backupdeal,
               sum(abs(MTMR_NATIONAL1)) as Outstanding,
        --  sum( pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') ) as Outstanding,

                (SELECT ROUND( AVG(cosu_strike_rate),4) FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300001  AND cosu_option_type  =32400001) "BC",
                (SELECT AVG(cosu_strike_rate)  FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300001  AND cosu_option_type  =32400002  GROUP BY cosu_strike_rate) "BP",
                (SELECT AVG(cosu_strike_rate)  FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300002  AND cosu_option_type  =32400002  GROUP BY cosu_strike_rate) "SP",
                (SELECT AVG(cosu_strike_rate)  FROM trtran072  WHERE cosu_deal_number=copt_deal_number
                AND cosu_buy_sell     =25300002  AND cosu_option_type  =32400001  GROUP BY cosu_strike_rate ) "SC", ';
   Query_Str1:=  '(SELECT LRAT_RBI_USD FROM trsystem017 a WHERE LRAT_EFFECTIVE_DATE =(SELECT MAX(LRAT_EFFECTIVE_DATE)
                  FROM trsystem017 b WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||'))  canclerate,
                  round(sum(nvl(MTMR_MTM_USD,0))) as mtmpl,
                  CASE ';
    Query_Str2 :=  'WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||')
                  THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm1,
                  CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),1),'||''''||mFieldCondition||''''||')
                  THEN  round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm2, ';
   Query_Str3 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),2),'||''''||mFieldCondition||''''||')
                  THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm3,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),3),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm4,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),4),'||''''||mFieldCondition||''''||')
                    THEN  round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm5, ';
   Query_Str4 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),5),'||''''||mFieldCondition||''''||')
                  THEN  round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm6,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),6),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm7,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),7),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm8, ';
   Query_Str5 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),8),'||''''||mFieldCondition||''''||')
                  THEN  round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm9,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),9),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm10,
                  CASE ';
  Query_Str6 := ' WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),10),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))  end AS Clm11,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),11),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(MTMR_MTM_AMOUNT,0)))   end AS Clm12 ,
                    round(sum(nvl(MTMR_MTM_AMOUNT,0)))  as mtminr,
                  '||''''||frmDate||''''||' AS FromDate,
                  '||''''||toDate||''''||'  AS ToDate '|| varGroupField || ' ';
   Query_Str7 := ' FROM trtran071,trtran075
                  WHERE ((COPT_PROCESS_COMPLETE = 12400001
                  AND COPT_COMPLETE_DATE        > '||''''||frmDate||''''||')
                  OR COPT_PROCESS_COMPLETE      = 12400002)
             --    and (COPT_EXECUTE_DATE <= '||''''||frmDate||''''||')
                  AND COPT_RECORD_STATUS NOT   IN (10200005,10200006)
                  and MTMR_RECORD_STATUS not in (10200005,10200006) and
                  MTMR_REPORT_DATE = (select max(b.MTMR_REPORT_DATE) from trtran075 b where b.MTMR_IBS_REF_NO = MTMR_IBS_REF_NO and b.MTMR_REPORT_DATE < = '||''''||frmDate||''''||')
                  and COPT_DEAL_NUMBER =  MTMR_IBS_REF_NO '||finalcondition||'
                  GROUP BY MTMR_COMPANY_CODE, copt_deal_number,COPT_COMPANY_CODE, COPT_COUNTER_PARTY,COPT_REFRATE_CODE,COPT_MATURITY_DATE,MTMR_MTM_AMOUNT ,MTMR_MTM_USD,
                  '||''''||frmDate||''''||','||''''||toDate||''''||',COPT_BACKUP_DEAL,COPT_EXECUTE_DATE';


  Query_Str8 := '   union all
                 select pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) Company,
                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,


                 backupdeal2 as Backupdeal,
                 sum(outstanding2) as Outstanding,
                (
                 SELECT ROUND( AVG(cosu_strike_rate),4)
                    FROM trtran072
                   WHERE cosu_deal_number = copt_deal_number
                    AND cosu_buy_sell     = 25300001
                    AND cosu_option_type  = 32400001
                 ) "BC",
                 (SELECT AVG(cosu_strike_rate)
                    FROM trtran072
                   WHERE cosu_deal_number = copt_deal_number
                    AND cosu_buy_sell     = 25300001
                    AND cosu_option_type  = 32400002
                GROUP BY cosu_strike_rate
                 ) "BP",
                 (SELECT AVG(cosu_strike_rate)
                    FROM trtran072
                   WHERE cosu_deal_number = copt_deal_number
                    AND cosu_buy_sell     = 25300002 ';
 Query_Str9 := '    AND cosu_option_type  = 32400002
                GROUP BY cosu_strike_rate
                 ) "SP",
                 (SELECT AVG(cosu_strike_rate)
                    FROM trtran072
                   WHERE cosu_deal_number = copt_deal_number
                    AND cosu_buy_sell     = 25300002
                    AND cosu_option_type  = 32400001
                GROUP BY cosu_strike_rate
                 ) "SC",';
 Query_Str10 := '
               (SELECT LRAT_RBI_USD FROM trsystem017 a WHERE LRAT_EFFECTIVE_DATE = (SELECT MAX(LRAT_EFFECTIVE_DATE) FROM trsystem017 b
                    WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||' )) cancelrate,

                 round(sum(mtminr/(SELECT LRAT_RBI_USD FROM trsystem017 a WHERE LRAT_EFFECTIVE_DATE = (SELECT MAX(LRAT_EFFECTIVE_DATE) FROM trsystem017 b
                    WHERE LRAT_EFFECTIVE_DATE <= '||''''||frmDate||''''||' ))),4) as mtmpl,
                ';

  Query_Str11 := ' CASE
                   WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||')
                  THEN round(sum(nvl(mtminr,0)))  end AS Clm1,
                  CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),1),'||''''||mFieldCondition||''''||')
                  THEN  round(sum(nvl(mtminr,0)))  end AS Clm2, ';
   Query_Str12 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),2),'||''''||mFieldCondition||''''||')
                  THEN round(sum(nvl(mtminr,0)))  end AS Clm3,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),3),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(mtminr,0)))  end AS Clm4,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),4),'||''''||mFieldCondition||''''||')
                    THEN  round(sum(nvl(mtminr,0)))  end AS Clm5, ';
   Query_Str13 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),5),'||''''||mFieldCondition||''''||')
                  THEN  round(sum(nvl(mtminr,0)))  end AS Clm6,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),6),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(mtminr,0)))  end AS Clm7,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),7),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(mtminr,0)))  end AS Clm8, ';
   Query_Str14 := 'CASE
                  WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),8),'||''''||mFieldCondition||''''||')
                  THEN  round(sum(nvl(mtminr,0)))  end AS Clm9,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),9),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(mtminr,0)))  end AS Clm10,
                  CASE ';
  Query_Str15 := ' WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),10),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(mtminr,0)))  end AS Clm11,
                  CASE
                    WHEN TO_CHAR(to_date(COPT_MATURITY_DATE,'||''''||LocalBank||''''||'),'||''''||mFieldCondition||''''||') = TO_CHAR(add_months(to_date('||''''||frmDate||''''||','||''''||LocalBank||''''||'),11),'||''''||mFieldCondition||''''||')
                    THEN round(sum(nvl(mtminr,0)))   end AS Clm12 ,
                    round(sum(nvl(mtminr,0)))  as mtminr,
                   '||''''||frmDate||''''||' AS FromDate,
                  '||''''||toDate||''''||'  AS ToDate '|| varGroupField || '
              from (
               select COPT_COMPANY_CODE,copt_deal_number,
                 COPT_MATURITY_DATE,
                 COPT_COUNTER_PARTY,
                 COPT_BACKUP_DEAL,';
   -- siva modified on 07Aug2012 --
 Query_Str16 :='   pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,1) as backupdeal2,
                 pkgforexprocess.fncgetoutstanding(copt_deal_number,0,15,1,'||''''||frmDate||''''||') as outstanding2,
                 0 as mtmpl,
                 copt_base_amount * (select nser_settlement
                                   from trtran077
                                    where NSER_PRODUCT_CODE = ( select CPRO_SHORT_DESCRIPTION
                                                                from trmaster503
                                                               where CPRO_PICK_CODE = copt_product_code
                                                              and NSER_UPLOAD_DATE= '||''''||frmDate||''''||' )
                                      and nser_spot_rate = cosu_strike_rate
                                      and COSU_OPTION_TYPE=to_number(Decode(NSER_BUY_PUT,''CE'',32400001,''PE'',32400002))
                                      and  nser_due_date = (select CPRO_DUE_DATE
                                                            from trmaster503
                                                           where CPRO_PICK_CODE = copt_product_code
                                                               and NSER_UPLOAD_DATE= '||''''||frmDate||''''||'  ) and rownum=1

                                     ) mtminr
                 from trtran071,
                      trtran072
                where copt_deal_number = cosu_deal_number ';
   -- End modification --
 Query_Str17 :='   and COPT_DEAL_NUMBER not in
                   (select MTMR_IBS_REF_NO
                      from trtran075
                     where MTMR_REPORT_DATE = '||''''||frmDate||''''||'
                   )
                   and COPT_EXCHANGE_CODE not in(0)
                   and (((copt_process_complete = 12400001
                   and copt_complete_date       >'||''''||frmDate||''''||')
                   or copt_process_complete     = 12400002)
                   and copt_execute_date       <= '||''''||frmDate||''''||'
                   and copt_record_status not  in(10200005,10200006)
                 and  pkgforexprocess.fncgetoutstanding(copt_deal_number,0,15,1,'||''''||frmDate||''''||') >0  ' ;
Query_Str18 :='   )
                         ) a
                        GROUP BY
                      COPT_COMPANY_CODE,
                      COPT_COUNTER_PARTY,
                      copt_deal_number,
                      COPT_MATURITY_DATE,
                      COPT_BACKUP_DEAL';

        delete from temp;
        Insert Into Temp Values ('1', Query_Str);
        Insert Into Temp Values ('2', Query_Str1);
        Insert Into Temp Values ('3', Query_Str2);
        Insert Into Temp Values ('4', Query_Str3);
        Insert Into Temp Values ('5', Query_Str4);
        Insert Into Temp Values ('6', Query_Str5);
        Insert Into Temp Values ('7', Query_Str6);
        Insert Into Temp Values ('8', Query_Str7);
        Insert Into Temp Values ('9', Query_Str8);
        Insert Into Temp Values ('10', Query_Str9);
        Insert Into Temp Values ('11', Query_Str10);
        Insert Into Temp Values ('12', Query_Str11);
        Insert Into Temp Values ('13', Query_Str12);
        Insert Into Temp Values ('14', Query_Str13);
        Insert Into Temp Values ('15', Query_Str14);
        Insert Into Temp Values ('16', Query_Str15);
        Insert Into Temp Values ('17', Query_Str16);
        Insert Into Temp Values ('18', Query_Str17);
        Insert Into Temp Values ('19', Query_Str18);
        Commit;

        varsiva:=Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4||Query_Str5||Query_Str6||Query_Str7||
                           Query_Str8||Query_Str9||Query_Str10||Query_Str11||Query_Str12||Query_Str13||Query_Str14||Query_Str15||
                          Query_Str16||Query_Str17||Query_Str18;
--        insert
--          into sivatemp
--        values (varsiva);
        commit;

        OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4||Query_Str5||Query_Str6||Query_Str7||
                           Query_Str8||Query_Str9||Query_Str10||Query_Str11||Query_Str12||Query_Str13||Query_Str14||Query_Str15||
                          Query_Str16||Query_Str17||Query_Str18;
        Goto Process_End;

End if;

------------------------------------------------------------------------------------------------
if Varreportid = 'OPTMTMEXCHNGSTMT' Then    -- added on 22 Mar 2012 for options mtm exchange stmt
    delete from temp;
    insert into temp values('Siva-mtm->', 'called');
    commit;

  Query_Str:='select companycode, counterparty, dealnumber, userrefno, dealamount, bc, bp,
                     sp, sc, settlementdate, maturitydate, premamt, preminr, prerate,
                     ourref,strikerate,
                     pkgforexprocess.fncgetprofitlossoptions(copt_deal_number, strikerate,
                                                             pkgforexprocess.fncgetoutstanding(copt_deal_number,0,15,1,''' || frmDate || '''),
                                                             copt_execute_date) gainloss,
                     ''' || frmDate || ''' as FromDate
                     ' || varGroupField  || '
                from (select copt_deal_number, copt_execute_date, copt_local_bank,
                             copt_company_code, copt_contract_type, copt_counter_party,
                             pkgreturncursor.fncgetdescription(copt_company_code, 2) companycode,
                             pkgreturncursor.fncgetdescription(copt_counter_party, 2) counterparty,
                             copt_deal_number dealnumber, copt_user_reference userrefno,
                             copt_base_amount dealamount,
                             (select round( avg(cosu_strike_rate),4)
                                from trtran072
                               where cosu_deal_number = copt_deal_number
                                 and cosu_buy_sell = 25300001
                                 and cosu_option_type = 32400001) bc,
                             (select avg(cosu_strike_rate)
                                from trtran072
                               where cosu_deal_number = copt_deal_number
                                 and cosu_buy_sell = 25300001
                                 and cosu_option_type = 32400002) bp,
                             (select avg(cosu_strike_rate)
                                from trtran072
                               where cosu_deal_number = copt_deal_number
                                 and cosu_buy_sell = 25300002
                                 and cosu_option_type = 32400002) sp,
                             (select avg(cosu_strike_rate)
                                from trtran072
                               where cosu_deal_number=copt_deal_number
                                 and cosu_buy_sell=25300002
                                 and cosu_option_type=32400001) sc,';
  Query_Str2:= '             copt_expiry_date settlementdate,
                             copt_maturity_date maturitydate,
                             copt_premium_amount premamt,
                             copt_premium_local preminr,
                             copt_premium_exrate prerate,
                             copt_dealer_remark ourref,
                             (select lrat_rbi_usd rbirate
                                      from trsystem017
                                     where lrat_effective_date
                                           = (select max(lrat_effective_date)
                                                from trsystem017
                                               where lrat_effective_date <= ''' || frmDate || ''')) strikerate
                        from trtran071
                       where ((copt_process_complete = 12400001  and copt_complete_date > ''' || frmDate || ''')
                               or copt_process_complete = 12400002)
                         and copt_execute_date <= ''' || frmDate || '''
                         and copt_record_status not in(10200005,10200006))
                       where copt_contract_type = 32800001';

--      insert into temp values('Siva-mtm->', Query_Str || Query_Str2);
--    commit;

    open Gencursor
     for Query_Str || Query_Str2;
     --|| finalCondition;

    Goto Process_End;
 end if;




 if varReportID= 'M2MForwardS' then
   OPEN GenCursor for
          SELECT pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2) COMPANY,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) BANK,
            SUM(DEAL_BASE_AMOUNT) BASEAMT,
            SUM(CDEL_PROFIT_LOSS) PROFITLOSS,
             pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
            pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2)Buysale,
            pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1)Remarks,
            trunc(sum(DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE)/SUM(DEAL_BASE_AMOUNT),2)Bookingrate,
            trunc(sum(CDEL_CANCEL_AMOUNT * CDEL_CANCEL_RATE)/SUM(DEAL_BASE_AMOUNT),2)Cancelrate,
            frmDate as FromDate,toDate as ToDate,
            sum(DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE)totbaseamt,
            sum(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE)totcancelamt
          FROM TRTRAN001,
            trtran006
          WHERE DEAL_DEAL_NUMBER      =CDEL_DEAL_NUMBER
          AND CDEL_RECORD_STATUS NOT IN (10200005,10200006)
          AND DEAL_RECORD_STATUS NOT IN (10200005,10200006)
          GROUP BY pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,2), pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2), pkgreturnreport.getCompanyName(varUserID), pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2), pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1), frmDate, toDate ;
        Goto Process_End;
  end if;
----

----Aakash/Gouri 15-May-13 06:25 pm
--If (Varreportid='OPTHEDGEDEALOUTSTANDING') OR (Varreportid='OPTHEDGEDEALOUTSTANDINGCMP') Then
--    delete from temp;commit;
--
--      Query_Str :='select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,COPT_DEAL_NUMBER DealNumber,
--       pkgreturncursor.fncGetdescription(COPT_DEAL_TYPE,2) DealType,
--       COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
--       pkgreturncursor.fncGetdescription(COPT_CONTRACT_TYPE,2) ContractType,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturncursor.fncGetdescription(COPT_OPTION_STYLE,2) OptionStyle,
--       pkgreturncursor.fncGetdescription(COPT_EXCHANGE_CODE,2) ExecuteCode,
--       pkgreturncursor.fncGetdescription(copt_product_code,2) ProductCode,
--       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
--       pkgreturncursor.fncGetdescription(COPT_BASE_CURRENCY,2)'||'||'||''''||'/'||''''||'||' ||'
--       pkgreturncursor.fncGetdescription(COPT_OTHER_CURRENCY,2) othrrCurrency,
--      (select round(avg(cosu_strike_rate),4) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400001) "BC",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400002) "BP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300002
--           and cosu_option_type=32400002) "SP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--          and cosu_buy_sell=25300002
--          and cosu_option_type=32400001) "SC",
--    pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') AS BaseAmount,
--    COPT_BASE_AMOUNT BaseAmount1,
--       pkgreturncursor.fncGetdescription(COPT_LOCAL_BANK,2) LocalBank,
--       COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
--       copt_premium_amount PremiumAmount,
--       copt_premium_local PremiumLocal,
--       COPT_MATURITY_DATE as setelmentdate,
--       decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--       Decode (copt_Record_Status,10200001,''unconfirmed'',10200003,''Sec Confi'',10200002,''first Confi'') RecordStatus,
--      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,Copt_Init_Code,
--      pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--       Substr(Pkgreturncursor.Fncgetdescription(Copt_Premium_Status,2),1,1) As Status,
--       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--       to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField  || '
--  from trtran071
-- where
--       --copt_process_complete = 12400002
--       --and ( copt_maturity_date > '||''''||frmDate||''''||')
--  ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
-- -- and (COPT_EXECUTE_DATE <= '||''''||frmDate||''''||')
--       '||finalcondition||'
--   and copt_record_status not in(10200005,10200006)';
--
--    -- and copt_hedge_trade= ' || Gconst.HEDGEDEAL || '
--    delete from temp;commit;
--    insert into temp values (Query_Str,finalcondition);
--    commit;
--     Open Gencursor For Query_Str || ' order by copt_execute_date';
--
--     Goto Process_End;
-- End If;
--end

--added by Aakash/Gouri 20-May-13
--commented on 09-july-13 03:40 pm
--If (Varreportid='OPTHEDGEDEALOUTSTANDING') OR (Varreportid='OPTHEDGEDEALOUTSTANDINGCMP') Then
--    delete from temp;commit;
--
--      Query_Str :='select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,COPT_DEAL_NUMBER DealNumber,
--       pkgreturncursor.fncGetdescription(COPT_DEAL_TYPE,2) DealType,
--       COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
--       pkgreturncursor.fncGetdescription(COPT_CONTRACT_TYPE,2) ContractType,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturncursor.fncGetdescription(COPT_OPTION_STYLE,2) OptionStyle,
--       pkgreturncursor.fncGetdescription(COPT_EXCHANGE_CODE,2) ExecuteCode,
--       pkgreturncursor.fncGetdescription(copt_product_code,2) ProductCode,
--       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
--       pkgreturncursor.fncGetdescription(COPT_BASE_CURRENCY,2)'||'||'||''''||'/'||''''||'||' ||'
--       pkgreturncursor.fncGetdescription(COPT_OTHER_CURRENCY,2) othrrCurrency,
--      (select round(avg(cosu_strike_rate),4) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400001) "BC",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400002) "BP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300002
--           and cosu_option_type=32400002) "SP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--          and cosu_buy_sell=25300002
--          and cosu_option_type=32400001) "SC",
--    pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') AS BaseAmount,
--    COPT_BASE_AMOUNT BaseAmount1,
--       pkgreturncursor.fncGetdescription(COPT_LOCAL_BANK,2) LocalBank,
--       COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
--       copt_premium_amount PremiumAmount,
--       copt_premium_local PremiumLocal,
--       COPT_MATURITY_DATE as setelmentdate,
--       decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--       Decode (copt_Record_Status,10200001,''unconfirmed'',10200003,''Confirmed'',10200002,''first Confi'') RecordStatus,
--      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,Copt_Init_Code,
--      pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--       to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField  || '
--  from trtran071
-- where
--       --copt_process_complete = 12400002
--       --and ( copt_maturity_date > '||''''||frmDate||''''||')
--  ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
-- -- and (COPT_EXECUTE_DATE <= '||''''||frmDate||''''||')
--       '||finalcondition||'
--   and copt_record_status not in(10200005,10200006)';
--
--    -- and copt_hedge_trade= ' || Gconst.HEDGEDEAL || '
--    delete from temp;commit;
--    insert into temp values (Query_Str,finalcondition);
--    commit;
--     Open Gencursor For Query_Str || ' order by copt_execute_date';
--
--     Goto Process_End;
-- End If;

----updated by gouri/aakash 09-july-13 03:41 pm
--If (Varreportid='OPTHEDGEDEALOUTSTANDING') OR (Varreportid='OPTHEDGEDEALOUTSTANDINGCMP') Then
--    delete from temp;commit;
--
--      Query_Str :='select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,COPT_DEAL_NUMBER DealNumber,
--       pkgreturncursor.fncGetdescription(COPT_DEAL_TYPE,2) DealType,
--       COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
--       pkgreturncursor.fncGetdescription(COPT_CONTRACT_TYPE,2) ContractType,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturncursor.fncGetdescription(COPT_OPTION_STYLE,2) OptionStyle,
--       pkgreturncursor.fncGetdescription(COPT_EXCHANGE_CODE,2) ExecuteCode,
--       pkgreturncursor.fncGetdescription(copt_product_code,2) ProductCode,
--       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
--       pkgreturncursor.fncGetdescription(COPT_BASE_CURRENCY,2)'||'||'||''''||'/'||''''||'||' ||'
--       pkgreturncursor.fncGetdescription(COPT_OTHER_CURRENCY,2) othrrCurrency,
--      (select round(avg(cosu_strike_rate),4) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400001) "BC",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400002) "BP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300002
--           and cosu_option_type=32400002) "SP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--          and cosu_buy_sell=25300002
--          and cosu_option_type=32400001) "SC",
--    pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') AS BaseAmount,
--    (COPT_BASE_AMOUNT/1000000) BaseAmount1,
--       pkgreturncursor.fncGetdescription(COPT_LOCAL_BANK,2) LocalBank,
--       COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
--       copt_premium_amount PremiumAmount,
--       copt_premium_local PremiumLocal,
--       COPT_MATURITY_DATE as setelmentdate,
--       decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--       Decode (copt_Record_Status,10200001,''un confi'',10200003,''confi'',10200002,''1st Confi'') RecordStatus,
--      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,Copt_Init_Code,
--      pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--      pkgForexProcess.fncGetOptionMTM(copt_deal_number,'||''''||frmdate||''''||') as mtmvalue,
--    -- 0 mtmvalue,
--       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--       to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField  || '
--  from trtran071
-- where
--        ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
--        --and copt_deal_number=''RBIPL/OPT/H/0076/12-13''
--
--       '||finalcondition||'
--   and copt_record_status not in(10200005,10200006)';
--
--    -- and copt_hedge_trade= ' || Gconst.HEDGEDEAL || '
--    delete from temp;commit;
--    insert into temp values (Query_Str,finalcondition);
--    commit;
--     Open Gencursor For Query_Str || ' order by copt_execute_date';
--
--     Goto Process_End;
-- End If;
----------- UPDATED 22-JULY-13 05:31 PM
---------commented on 02-Aug-13 07:43 pm
--If (Varreportid='OPTHEDGEDEALOUTSTANDING') OR (Varreportid='OPTHEDGEDEALOUTSTANDINGCMP') Then
--    delete from temp;commit;
--
--      Query_Str :='select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,COPT_DEAL_NUMBER DealNumber,
--       pkgreturncursor.fncGetdescription(COPT_DEAL_TYPE,2) DealType,
--       COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
--       pkgreturncursor.fncGetdescription(COPT_CONTRACT_TYPE,2) ContractType,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturncursor.fncGetdescription(COPT_OPTION_STYLE,2) OptionStyle,
--       pkgreturncursor.fncGetdescription(COPT_EXCHANGE_CODE,2) ExecuteCode,
--       pkgreturncursor.fncGetdescription(copt_product_code,2) ProductCode,
--       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
--       pkgreturncursor.fncGetdescription(COPT_BASE_CURRENCY,2)'||'||'||''''||'/'||''''||'||' ||'
--       pkgreturncursor.fncGetdescription(COPT_OTHER_CURRENCY,2) othrrCurrency,
--      (select round(avg(cosu_strike_rate),4) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400001) "BC",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400002) "BP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300002
--           and cosu_option_type=32400002) "SP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--          and cosu_buy_sell=25300002
--          and cosu_option_type=32400001) "SC",
--    pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') AS BaseAmount,
--    (COPT_BASE_AMOUNT/1000000) BaseAmount1,
--       pkgreturncursor.fncGetdescription(COPT_LOCAL_BANK,2) LocalBank,
--       COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
--       copt_premium_amount PremiumAmount,
--       copt_premium_local PremiumLocal,
--       COPT_MATURITY_DATE as setelmentdate,
--       decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--       Decode (copt_Record_Status,10200001,''un confi'',10200003,''confi'',10200002,''1st Confi'') RecordStatus,
--      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,Copt_Init_Code,
--      pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--      pkgForexProcess.fncGetOptionMTM(copt_deal_number,'||''''||frmdate||''''||',''N'') as mtmvalue,
--    -- 0 mtmvalue,
--     (select max(CFMR_MTM_DATE) from trtran062
--       where CFMR_DEAL_NUMBER=COPT_DEAL_NUMBER ) as mtmDate,
--       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--       to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField  || '
--  from trtran071
-- where
--        ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
--        --and copt_deal_number=''RBIPL/OPT/H/0076/12-13''
--
--       '||finalcondition||'
--   and copt_record_status not in(10200005,10200006)';
--
--    -- and copt_hedge_trade= ' || Gconst.HEDGEDEAL || '
--    delete from temp;commit;
--    insert into temp values (Query_Str,finalcondition);
--    commit;
--     Open Gencursor For Query_Str || ' order by copt_execute_date';
--
--     Goto Process_End;
-- END IF;
-----------modified by Gouri/Aakash 02-Aug-13 07:45 pm
------commented on 08-orct-13 2:35 pm
--
--If (Varreportid='OPTHEDGEDEALOUTSTANDING') OR (Varreportid='OPTHEDGEDEALOUTSTANDINGCMP') Then
--    delete from temp;commit;
--
--      Query_Str :='select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,COPT_DEAL_NUMBER DealNumber,
--       pkgreturncursor.fncGetdescription(COPT_DEAL_TYPE,2) DealType,
--       COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
--       pkgreturncursor.fncGetdescription(COPT_CONTRACT_TYPE,2) ContractType,
--         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturncursor.fncGetdescription(COPT_OPTION_STYLE,2) OptionStyle,
--       pkgreturncursor.fncGetdescription(COPT_EXCHANGE_CODE,2) ExecuteCode,
--       pkgreturncursor.fncGetdescription(copt_product_code,2) ProductCode,
--       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
--       pkgreturncursor.fncGetdescription(COPT_BASE_CURRENCY,2)'||'||'||''''||'/'||''''||'||' ||'
--       pkgreturncursor.fncGetdescription(COPT_OTHER_CURRENCY,2) othrrCurrency,
--      (select round(avg(cosu_strike_rate),4) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400001) "BC",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300001
--           and cosu_option_type=32400002) "BP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--           and cosu_buy_sell=25300002
--           and cosu_option_type=32400002) "SP",
--       (select avg(cosu_strike_rate) from trtran072
--         where cosu_deal_number=copt_deal_number
--          and cosu_buy_sell=25300002
--          and cosu_option_type=32400001) "SC",
--    pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') AS BaseAmount,
--    (COPT_BASE_AMOUNT/1000000) BaseAmount1,
--       pkgreturncursor.fncGetdescription(COPT_LOCAL_BANK,2) LocalBank,
--       COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
--       copt_premium_amount PremiumAmount,
--       copt_premium_local PremiumLocal,
--       COPT_MATURITY_DATE as setelmentdate,
--       decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
--       Decode (copt_Record_Status,10200001,''un confi'',10200003,''confi'',10200002,''1st Confi'') RecordStatus,
--      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,Copt_Init_Code,
--      pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
--      pkgForexProcess.fncGetOptionMTM(copt_deal_number,'||''''||frmdate||''''||',''N'') as mtmvalue,
--    -- 0 mtmvalue,
----     (select max(CFMR_MTM_DATE) from trtran062
----       where CFMR_DEAL_NUMBER=COPT_DEAL_NUMBER
----       and cfmr_mtm_date <='||''''||frmDate||''''||' ) as mtmDate,
--        (CASE WHEN COPT_COUNTER_PARTY BETWEEN 30600001 AND 30699999 THEN
--          (select max(CFMR_MTM_DATE) from trtran062 ,TRTRAN071
--               WHERE CFMR_DEAL_NUMBER=COPT_DEAL_NUMBER
--               AND CFMR_MTM_DATE <='||''''||frmDate||''''||')
--         ELSE
--                (SELECT MAX(OPMM_TRADE_DATE) FROM TRTRAN078
--               WHERE OPMM_TRADE_DATE ='||''''||frmDate||''''||') end  )as mtmDate,
--
--       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--       pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--       to_date('||''''||frmDate||''''||') as AsonDate,
--            to_date('||''''||frmDate||''''||') as FromDate,
--            to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField  || '
-- from trtran071
-- where
--        ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
--        --and copt_deal_number=''RBIPL/OPT/H/0076/12-13''
--
--       '||finalcondition||'
--   and copt_record_status not in(10200005,10200006)';
--
--    -- and copt_hedge_trade= ' || Gconst.HEDGEDEAL || '
--   -- delete from temp;commit;
--   -- insert into temp values (Query_Str,finalcondition);
--   -- commit;
--     Open Gencursor For Query_Str || ' order by copt_execute_date';
--
--     Goto Process_End;
-- END IF;
-----------modified on 04-oct-13 02:37 pm
If (Varreportid='OPTHEDGEDEALOUTSTANDING') OR (Varreportid='OPTHEDGEDEALOUTSTANDINGCMP') Then
    delete from temp;commit;

      Query_Str :='select pkgreturncursor.fncGetdescription(COPT_COMPANY_CODE,2) CompanyCode,COPT_DEAL_NUMBER DealNumber,
       pkgreturncursor.fncGetdescription(COPT_DEAL_TYPE,2) DealType,
       COPT_USER_REFERENCE UserReference,COPT_EXECUTE_DATE ExecuteDate,
       pkgreturncursor.fncGetdescription(COPT_CONTRACT_TYPE,2) ContractType,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
       pkgreturncursor.fncGetdescription(COPT_OPTION_STYLE,2) OptionStyle,
       pkgreturncursor.fncGetdescription(COPT_EXCHANGE_CODE,2) ExecuteCode,
       pkgreturncursor.fncGetdescription(copt_product_code,2) ProductCode,
       pkgreturncursor.fncGetdescription(COPT_COUNTER_PARTY,2) CounterParty,
       pkgreturncursor.fncGetdescription(COPT_BASE_CURRENCY,2)'||'||'||''''||'/'||''''||'||' ||'
       pkgreturncursor.fncGetdescription(COPT_OTHER_CURRENCY,2) othrrCurrency,
      (select round(avg(cosu_strike_rate),4) from trtran072
         where cosu_deal_number=copt_deal_number
           and cosu_buy_sell=25300001
           and cosu_option_type=32400001) "BC",
       (select avg(cosu_strike_rate) from trtran072
         where cosu_deal_number=copt_deal_number
           and cosu_buy_sell=25300001
           and cosu_option_type=32400002) "BP",
       (select avg(cosu_strike_rate) from trtran072
         where cosu_deal_number=copt_deal_number
           and cosu_buy_sell=25300002
           and cosu_option_type=32400002) "SP",
       (select avg(cosu_strike_rate) from trtran072
         where cosu_deal_number=copt_deal_number
          and cosu_buy_sell=25300002
          and cosu_option_type=32400001) "SC",
    pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') AS BaseAmount,
    (COPT_BASE_AMOUNT/1000000) BaseAmount1,
       pkgreturncursor.fncGetdescription(COPT_LOCAL_BANK,2) LocalBank,
       COPT_DELIVERY_DATE DeliveryDate, copt_expiry_date ExpairyDate,
       copt_premium_local PremiumLocal,
        DECODE(SIGN(pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||') - COPT_BASE_AMOUNT), -1,
       (COPT_PREMIUM_AMOUNT / COPT_BASE_AMOUNT) * pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,'||''''||GConst.UTILOPTIONHEDGEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||frmdate||''''||'),
       COPT_PREMIUM_AMOUNT) AS PremiumAmount,
       COPT_MATURITY_DATE as setelmentdate,';
   Query_Str1 :=     'decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
        case COPT_PREMIUM_STATUS when  33200001 then ''R''
       when 33200002 then ''P'' end as PrimiumPR,
       Decode (copt_Record_Status,10200001,''un confi'',10200003,''confi'',10200002,''1st Confi'') RecordStatus,
      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,Copt_Init_Code,
      pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
      pkgForexProcess.fncGetOptionMTM(copt_deal_number,'||''''||frmdate||''''||',''N'') as mtmvalue,
        (CASE WHEN COPT_COUNTER_PARTY BETWEEN 30600001 AND 30699999 THEN
          (select max(CFMR_MTM_DATE) from trtran062 ,TRTRAN071
               WHERE CFMR_DEAL_NUMBER=COPT_DEAL_NUMBER
               AND CFMR_MTM_DATE <='||''''||frmDate||''''||')
         ELSE
                (SELECT MAX(OPMM_TRADE_DATE) FROM TRTRAN078
               WHERE OPMM_TRADE_DATE ='||''''||frmDate||''''||') end  )as mtmDate,
       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
       pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
       to_date('||''''||frmDate||''''||') as AsonDate,
            to_date('||''''||frmDate||''''||') as FromDate,
            to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField  || '
 from trtran071
 where
        ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'||''''||frmDate||''''||') or copt_PROCESS_COMPLETE = 12400002)
        '||finalcondition||'
   and copt_record_status not in(10200005,10200006)';

    -- and copt_hedge_trade= ' || Gconst.HEDGEDEAL || '
         --       --copt_premium_amount PremiumAmount,
             -- 0 mtmvalue,
--     (select max(CFMR_MTM_DATE) from trtran062
--       where CFMR_DEAL_NUMBER=COPT_DEAL_NUMBER
--       and cfmr_mtm_date <='||''''||frmDate||''''||' ) as mtmDate,
--   copt_premium_amount PremiumAmount,
--and copt_deal_number=''RBIPL/OPT/H/0076/12-13''
     Open Gencursor For Query_Str || Query_Str1 ||' order by copt_execute_date';
     Goto Process_End;
 END IF;

--end
 if varReportID = 'ORDERDETAILSLINKING' then

  OPEN GenCursor for
       select  pkgreturncursor.fncgetdescription(trad_company_code,2) Compshortdesc,trad_reference_date ReferenceDate,
               trad_trade_reference tradref, trad_user_reference UserReference,trad_company_code as CompanyCode,
               pkgreturncursor.fncgetdescription(trad_buyer_seller,2) BuyserSeller,
               trad_trade_fcy Notional, trad_maturity_from MaturityFrom,trad_maturity_date MaturityDate,
               --trad_maturity_month Pterms,
               pkgreturncursor.fncgetdescription(trad_product_code,2) Product,
               copt_execute_date DealDate, pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
               copt_counter_party as bankcode,
               copt_base_amount BaseAmount,COPT_EXPIRY_DATE Maturity, copt_maturity_date DeliveryDate,
                pkgreturncursor.fncgetdescription(COPT_BROKER_CODE,2)as broker,
               ( select round( avg(cosu_strike_rate),2) from trtran072
                  where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
               (select avg(cosu_strike_rate) from trtran072
                   where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
                     and cosu_option_type=32400002) "BP",
               (select avg(cosu_strike_rate) from trtran072
                   where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
                     and cosu_option_type=32400002) "SP",
               (select avg(cosu_strike_rate) from trtran072
                where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
                and cosu_option_type=32400001) "SC",
                '' catg,
                pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY,2)||'/'||
                pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2) Currency,
                trad_trade_rate ExchangeRate, COPT_MATURITY_DATE Maturity, copt_user_reference BankReference,
                copt_premium_amount PremiumAmount, copt_premium_local premiumLocal,
                corv_exercise_date CancelDate, NVL(corv_base_amount,0) CancelAmt, 0 CancelRate,
                corv_rbi_refrate rbirefrate,corv_profit_loss GainLoss,
                (corv_profit_loss-copt_premium_local) NetPL, 0 ProfitLossUsd,
                 COPT_EXPIRY_DATE as expirydate,
                'O' || substr (COPT_DEAL_NUMBER ,6,16) as DealNumber,
                pkgreturnreport.GetSystemDate() as SystemDate,
                 pkgreturnreport.getCompanyName( varUserID  ) as CompanyName,
                frmDate as  FromDate ,
                ToDate as ToDate
     from       trtran002,trtran004,
                trtran071 left outer join trtran073
                on CORV_DEAL_NUMBER=COPT_DEAL_NUMBER
                and corv_record_status not in(10200005,10200006)
     where      hedg_trade_reference=trad_trade_reference
               and hedg_deal_number =COPT_DEAL_NUMBER
               and trad_record_status not in(10200005,10200006)
               and copt_record_status not in(10200005,10200006)
--               and hedg_trade_reference = 'EXLC/SDJL/0061/11-12'
               and trad_reference_date between FrmDate and ToDate
            -- and COPT_EXECUTE_DATE between FromDate and ToDate
     union

  Select    Pkgreturncursor.Fncgetdescription(Trad_Company_Code,2) Compshortdesc, Trad_Reference_Date ReferenceDate,
             trad_trade_reference tradref,trad_user_reference UserReference,trad_company_code as CompanyCode,
             pkgreturncursor.fncgetdescription(trad_buyer_seller,2) BuyserSeller,
             trad_trade_fcy Notional,trad_maturity_from MaturityFrom,trad_maturity_date MaturityDate,
             --trad_maturity_month Pterms,
             pkgreturncursor.fncgetdescription(trad_product_code,2) Product,
             deal_execute_date DealDate,pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
             DEAL_COUNTER_PARTY as bankcode,
             deal_base_amount BaseAmount, DEAL_MATURITY_DATE Maturity, DEAL_MATURITY_DATE DeliveryDate, '' broker,
             0 BC,deal_exchange_rate BP,0 SP,0 SC ,
            (case
                    when trad_import_export <= 25300050 then
                 'Exp'
                    when trad_import_export > 25300050 then
                     'Imp'
            end) Catg,
            pkgreturncursor.fncgetdescription(deal_base_currency,2)|| '/' ||
            pkgreturncursor.fncgetdescription(deal_other_currency,2) Currency,
            trad_trade_rate ExchangeRate,
            deal_maturity_date Maturity,
            deal_user_reference BankReference, 0 PremiumAmount, 0 premiumLocal,
            cdel_cancel_date CancelDate,NVL(cdel_cancel_amount,0) CancelAmt,
            cdel_cancel_rate CancelRate, 0 rbirefrate,
            cdel_profit_loss GainLoss, 0 NetPL,
            cdel_other_amount ProfitLossUsd,
            DEAL_MATURITY_DATE as expirydate,
            'F' || substr (DEAL_DEAL_NUMBER,5,15) as DealNumber,
            pkgreturnreport.GetSystemDate() as SystemDate,
             pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
            frmDate as  FromDate ,
            ToDate as ToDate
  from     trtran002,trtran004,trtran001
           left outer join trtran006
           on cdel_deal_number = deal_deal_number
           and cdel_record_status not in (10200005, 10200006)
  where    hedg_trade_reference=trad_trade_reference
          and hedg_deal_number=deal_deal_number
          and trad_record_status not in(10200005,10200006)
          and deal_record_status not in(10200005,10200006)
--          and hedg_trade_reference = 'EXLC/SDJL/0061/11-12';
          and trad_reference_date between FrmDate and ToDate;
         -- and DEAL_EXECUTE_DATE between FromDate and ToDate;
   Goto Process_End;
end if;


  if varReportID = 'FUTUREOUTSTNDHEDGEDEAL' then

  OPEN GenCursor for
    select pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) CompanyCode,
           CFUT_DEAL_NUMBER DealNumber,CFUT_USER_REFERENCE UserReference,
           CFUT_EXECUTE_DATE ExecuteDate,
           pkgreturncursor.fncgetdescription(CFUT_CONTRACT_TYPE,2) ContractType,
           pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) BuySell,
           pkgreturncursor.fncgetdescription(CFUT_PRODUCT_CODE,2) ProductCode,
           pkgreturncursor.fncgetdescription(CFUT_EXCHANGE_CODE,2) ExchangeCode,
           pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) CounterParty,
           CFUT_LOT_NUMBERS LotNumbers,CFUT_LOT_QUANTITY Quantity,
           CFUT_Exchange_rate   LotPrice,CFUT_EXCHANGE_RATE ExchangeRate,
           CFUT_BASE_AMOUNT BaseAmount,CFUT_OTHER_AMOUNT OtherAmount,
           CFUT_BROKERAGE_AMOUNT BrokerageAmount,CFUT_SERVICE_TAX ServiceTax,
           CFUT_TRANSACTION_COST TransactionCost,
           pkgreturnreport.GetSystemDate() as SystemDate,
            pkgreturnreport.getCompanyName( varUserID ) as CompanyName,
           frmDate as  FromDate ,
           ToDate as ToDate
    from  trtran061
    where cfut_record_status not in(10200005,10200006);

      Goto Process_End;
 end if;

If (Varreportid='DEALSLINKINGRPT') Then
   Open Gencursor For
     select pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
            deal_deal_number DealNumber,deal_execute_date ExecuteDate,
             pkgreturncursor.fncgetdescription(deal_base_Currency,2) || '/' ||
             pkgreturncursor.fncgetdescription( deal_other_currency,2) Currency,
             pkgreturncursor.fncgetdescription( deal_buy_sell,2) BuySell,
             deal_base_amount BaseAmount,deal_exchange_Rate ExchangeRate,
             Deal_maturity_date MaturityDate,
             pkgreturncursor.fncgetdescription(cdel_cancel_type,2) CancelType,
             cdel_cancel_date CancelDate,Cdel_cancel_rate cancelRate,
             cdel_profit_loss ProfitLoss,link_batch_number BatchNO,
             (case  when link_company_code>30100100 then
                         'Dubai'
                when link_company_code<30100100 then
                         'Bombay' end) Place ,
             0 BC, 0 BP, 0 SC,0 SP,'' DealType,0 BookPremium, 0 CancelPremium,
          pkgreturnreport.GetSystemDate() as SystemDate,
           pkgreturnreport.getCompanyName(varUserID ) as CompanyName,
          to_char(frmDate,'dd-MM-yyyy') as  FromDate ,
          to_char(ToDate,'dd-MM-yyyy') as ToDate
        from trtran001,trtran019,trtran006
       where deal_deal_number =link_deal_number
         and link_link_date between frmDate and toDate
         and link_record_status not in(10200005,10200006)
         and deal_deal_number =cdel_Deal_number(+)
        union
       select pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
            copt_deal_number DealNumber,copt_execute_date ExecuteDate,
             pkgreturncursor.fncgetdescription(copt_base_Currency,2) || '/' ||
             pkgreturncursor.fncgetdescription( copt_other_currency,2) Currency,
             '' BuySell,
             copt_base_amount BaseAmount,0.00 ExchangeRate,
             copt_expiry_date MaturityDate,
             pkgreturncursor.fncgetdescription(corv_exercise_type,2) CancelType,
             corv_exercise_date CancelDate,corv_exercise_rate cancelRate,
             corv_profit_loss ProfitLoss,link_batch_number BatchNO,
             (case  when link_company_code>30100100 then
                         'Dubai'
                when link_company_code<30100100 then
                         'Bombay' end) Place ,
             (select round( avg(cosu_strike_rate),2) from trtran072
              where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400001) "BC",
           (select avg(cosu_strike_rate) from trtran072
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400002) "BP",
           (select avg(cosu_strike_rate) from trtran072
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400002) "SP",
           (select avg(cosu_strike_rate) from trtran072
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400001) "SC",
          pkgreturncursor.fncgetdescription(copt_contract_type,2)  DealType,
          copt_premium_local BookPremium, corv_premium_local CancelPremium,
          pkgreturnreport.GetSystemDate() as SystemDate,
           pkgreturnreport.getCompanyName( varUserID) as CompanyName,
          to_char(frmDate,'dd-MM-yyyy') as  FromDate ,
          to_char(ToDate,'dd-MM-yyyy') as ToDate
        from trtran071,trtran019,trtran073
       where copt_deal_number =link_deal_number
        and link_link_date between frmDate and toDate
        and link_record_status not in(10200005,10200006)
        and copt_deal_number =corv_Deal_number(+);

 Goto Process_End;
 End If;

  ---aakash 30-apr-13 01:22 pm
--if varReportID = 'CURRFUTUREFORSPECIFICPERIOD' then
--Delete From Trsystem978;Commit;
 --insert into trsystem978 values(toDate);commit;
--Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
              -- COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
              -- Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
             --  pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,BalanceFcy*Exrate as mtmValue,
              -- PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,HedgeTrade,
              --  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
              --   pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
              -- TO_DATE('||''''||frmDate||''''||') as FromDate,
              -- to_date('||''''||toDate||''''||') as ToDate
            --  ' || varGroupField || '
         -- from  vewForwardFuture
         -- where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
--                  '||finalcondition||'';
--              delete from temp; commit;
--               insert into temp values(Query_Str,finalcondition);commit;
--    OPEN GenCursor for Query_Str;
--    Goto Process_End;
--  end if;
--aakash/gouri 14-may-13 10:44 am
  if varReportID = 'CURRFUTUREFORSPECIFICPERIOD' then
Delete From Trsystem978;Commit;
 insert into trsystem978 values(toDate);commit;
Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,--M2MRate,
               Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,--BalanceFcy*Exrate as mtmValue,
               PANDLFCY as PandL,COBRATE,--MTMPANDL,MTMPANDLINR,
               HedgeTrade,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || '
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
                  '||finalcondition||'';
              delete from temp; commit;
               insert into temp values(Query_Str,finalcondition);commit;
    OPEN GenCursor for Query_Str;
    Goto Process_End;
  end if;
--end
   If Varreportid='LIMITEXCESSREPT' THEN
   Open Gencursor For
           select  userid, CurrencyPair, sum(BaseAmount)Baseamount, dealtype,CompanyName,CompanyCode,AsonDate
           from
            ( select  pkgreturncursor.fncgetdescription(INITCODE,2) USERID, CURRENCY as CurrencyPair,
            sum(BalanceEqualUSD*decode(buysellcode,25300001,1,-1)) as Baseamount,
              Pkgreturncursor.Fncgetdescription(Dealtype,2) As Dealtype,
               Pkgreturnreport.Getcompanyname( varUserID  ) As Companyname,
               pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
              COMPANYNAME as CompanyCode ,frmDate as  AsonDate
     from VEWForwardFUTURE
     where STATUS=12400002
      And  Companycode In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = varUserID )
     group by INITCODE,CURRENCY,DEALTYPE,COMPANYNAME
      union
       select pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) userid,pkgreturncursor.fncgetdescription(copt_base_currency,2) || '/' ||
                pkgreturncursor.fncgetdescription(copt_other_currency,2) CurrencyPair,
                sum(copt_base_amount) BaseAmount, 'Option' dealtype,
                 Pkgreturnreport.Getcompanyname( varUserID ) As Companyname,
                 pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) CompanyCode,frmDate as  AsonDate
            from trtran071
          where copt_record_status not in (10200005,10200006)
            And Copt_Process_Complete =12400002
         And  Companycode In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = varUserID )
        group by COPT_INIT_CODE, copt_base_currency,copt_other_currency,COPT_COMPANY_CODE)
       group by userid, CurrencyPair ,dealtype,CompanyName,CompanyCode,AsonDate;
       Goto Process_End;
 end if;

 --commented by aakash 22-may-13 12:31 pm
-- If Varreportid ='FRWFUTUREOUTSTANDINGDEAL'  Then
--  Delete From Trsystem978;Commit;
--   Insert Into Trsystem978 Values(Frmdate);commit;
-- -- Insert Into Temp Select Asondate,'' From Trsystem978;
--
--Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
--               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
--               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
--               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
--               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--               to_date('||''''||toDate||''''||') as ToDate
--              ' || varGroupField || '
--          from  vewForwardFuture
--          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
--                  '||finalCondition||'';
--             -- delete from temp; commit;
--           -- insert into temp values(Query_Str,finalcondition);commit;
--    Open Gencursor For Query_Str;
--    Goto Process_End;
--  End If;

--added by aakash/gouri 22-may-13 12:32 pm
-- If Varreportid ='FRWFUTUREOUTSTANDINGDEAL'  Then
--  Delete From Trsystem978;Commit;
--   Insert Into Trsystem978 Values(Frmdate);commit;
-- -- Insert Into Temp Select Asondate,'' From Trsystem978;
--
--Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
--               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
--               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
--               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
--               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
--                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--               to_date('||''''||toDate||''''||') as ToDate
--              ' || varGroupField || ',CURRENCY  as BaseCurrencyGroup
--          from  vewForwardFuture
--          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
--                  '||finalCondition||'';
--              delete from temp; commit;
--            insert into temp values(Query_Str,finalcondition);commit;
--    Open Gencursor For Query_Str;
--    Goto Process_End;
--  End If;
--end\

--updated by aakash/gouri as on 06-jun-2013
 If Varreportid ='FRWFUTUREOUTSTANDINGDEAL'  Then
  Delete From Trsystem978;Commit;
   Insert Into Trsystem978 Values(Frmdate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;

Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                 Spot ,
                Forward,
                Margin,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || '
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002) and BalanceFcy >0
                  '||finalCondition||'';
              delete from temp; commit;
            insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;
    Goto Process_End;
  End If;

--added by aakash/gouri as on 06-jun-13

 If Varreportid ='FRWFUTUREOUTSTANDINGDEALAVG'  Then
  Delete From Trsystem978;Commit;
   Insert Into Trsystem978 Values(Frmdate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;

Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || ',CURRENCY  as BaseCurrencyGroup
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
                  '||finalCondition||'';
              delete from temp; commit;
            insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;
    Goto Process_End;
  End If;

If Varreportid ='DEALTICETREPORT1'  Then
  Delete From Trsystem978;Commit;
   Insert Into Trsystem978 Values(Frmdate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;

Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || ',CURRENCY  as BaseCurrencyGroup
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
                  '||finalCondition||'';
              delete from temp; commit;
            insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;
    Goto Process_End;
  End If;

   If  Varreportid ='CURRFUTUREMTMREPORT' Then
  Delete From Trsystem978;Commit;
   Insert Into Trsystem978 Values(toDate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;

Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || '
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
                  '||finalCondition||'';
             -- delete from temp; commit;
           -- insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;
    Goto Process_End;
  End If;

 --added Akash/Gouri 21-May-13 06:58 am
--    if (varReportID = 'CURRFUTUREDEALFORTHEDAY')  then
--Query_Str :=' select UserId, Remark,DealType,status,deal_execute_date as ExecuteDate,deal_deal_number as DealNumber,deal_COMPANY_CODE1 as  CompanyCode,
--               deal_COUNTER_PARTY1 as CounterParty,deal_BASE_CURRENCY1 as BaseCurrency,DEAL_BUY_SELL1  as BuySell1,BaseAmount,AmtInr,
--               deal_maturity_date as MaturityDate,Rate,BookingRate,ProductQty,BacKupDeal,SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               FromDate,ToDate,DEAL_OTHER_CURRENCY1 as OtherCurrency,
--               DEAL_RECORD_STATUS,DEAL_HEDGE_TRADE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,
--               pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as BuySell, CDEL_LOCAL_RATE as WashRate,DEAL_INIT_CODE1 as UserCode,
--                pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2) as initcode,PandL,HedgeTrade,statusorder
--              ' || varGroupField || '
-- from
--              ( select  ''Future '' dealType, ''booked'' status, 1 as statusorder,
--                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
--                        cfut_execute_date as deal_execute_date,
--                        cfut_deal_number as deal_deal_number,
--                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1,
--                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
--                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
--                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
--                        pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) as DEAL_BUY_SELL1,
--                       CFUT_BASE_AMOUNT as BaseAmount,CFUT_BASE_AMOUNT*cfut_lot_price as AmtInr,
--                       cfut_maturity_date as deal_maturity_date,  CFUT_EXCHANGE_RATE as  Rate,CFUT_EXCHANGE_RATE as BookingRate, CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
--                       (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
--                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,';
--       Query_Str1 :='  pkgreturnreport.GetSystemDate() as SystemDate,
--                       TO_DATE('||''''||frmDate||''''||') as FromDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
--                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as DEAL_BUY_SELL,
--                        pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
--                        CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
--                        1  As  Cdel_Local_Rate,  0 as  PandL
--                         from  trtran061
--                  where  cfut_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
--                        and cfut_record_status not in (10200005,10200006)
--      union all
--                   select  ''Future '' dealType,
--                         ''canceled'' status,2 as statusorder,
--                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
--                        CFRV_EXECUTE_DATE as deal_execute_date,
--                        cfut_deal_number as deal_deal_number,
--                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1,
--                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
--                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
--                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
--                        decode (CFUT_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1, ';
--         Query_Str2 :=' (CFRV_REVERSE_LOT*1000) as BaseAmount,(CFUT_BASE_AMOUNT*1000)*CFRV_LOT_PRICE as AmtInr,
--                       cfut_maturity_date as deal_maturity_date,  CFRV_LOT_PRICE as  Rate,CFUT_EXCHANGE_RATE as BookingRate,CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
--                      (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
--                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                        TO_DATE('||''''||frmDate||''''||') as FromDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
--                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as DEAL_BUY_SELL, --0 as CDEL_LOCAL_RATE,
--                         pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
--                         CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
--                        1 CDEL_LOCAL_RATE, cfrv_profit_loss PandL
--                         from  trtran061,trtran063
--                  where    cfut_deal_number=CFRV_DEAL_NUMBER
--                        and cfrv_RECORD_STATUS not in (10200005,10200006)
--                        and  cfut_record_status not in (10200005,10200006)
--                        and (CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
--                        or   CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
--
--          UNION ALL
--
--                select ''Forward '' dealType, ''booked'' status,1 as statusorder,
--                        DEAL_USER_ID as UserId,
--                        DEAL_DEALER_REMARKS as Remark,
--                        DEAL_EXECUTE_DATE as  DEAL_EXECUTE_DATE,
--                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
--                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
--                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
--                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as DEAL_BUY_SELL1,';
--          Query_Str3 :='DEAL_BASE_AMOUNT as BaseAmount,DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE as AmtInr,
--                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
--                        DEAL_EXCHANGE_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
--                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
--                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
--                       pkgreturnreport.GetSystemDate() as SystemDate,
--                       TO_DATE('||''''||frmDate||''''||') as FromDate,
--                        to_date('||''''||toDate||''''||') as ToDate,
--                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
--                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as DEAL_BUY_SELL ,
--                        pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
--                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
--                       1 as CDEL_LOCAL_RATE,
--                      0 PandL
--                  from  trtran001
--                   where  DEAL_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
--                         and  deal_record_status not in (10200005,10200006)
--        union all
--           select ''Forward'' dealType,
--                       case CDEL_CANCEL_TYPE when 27000001 then ''Cancelled''
--                        when 27000002 then ''Delivery'' end as status, 2 as statusorder,
--                        DEAL_USER_ID as UserId,
--                        DEAL_DEALER_REMARKS as Remark,
--                        CDEL_CANCEL_DATE as  DEAL_EXECUTE_DATE,
--                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
--                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
--                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
--                       decode (deal_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1,';
--        Query_Str4 :=' CDEL_CANCEL_AMOUNT as BaseAmount,CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE as AmtInr,
--                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
--                        CDEL_CANCEL_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
--                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
--                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
--                        pkgreturnreport.GetSystemDate() as SystemDate,
--                        TO_DATE('||''''||frmDate||''''||') as FromDate,
--                        to_date('||''''||toDate|| ''''||') as ToDate,
--                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
--                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as DEAL_BUY_SELL ,pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
--                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal '', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade,DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
--                        CDEL_LOCAL_RATE as CDEL_LOCAL_RATE,cdel_profit_loss PandL
--                  from  trtran001,trtran006
--                   where  deal_deal_number=cdel_deal_number
--                       and (CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
--                       or CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
--                       and CDEL_RECORD_STATUS not in (10200005,10200006))
--               where  DEAL_RECORD_STATUS not in (10200005,10200006)
--                      '||substr(finalcondition,64)||'';
--              -- Query_Str :=Query_Str ||Query_Str1 ||Query_Str2||Query_Str3||Query_Str4|| 'order by deal_deal_number ';
--               delete from temp;commit;
--               Insert Into Temp Values(Query_Str,Query_Str1);Commit;
--               Insert Into Temp Values(Query_Str2,Query_Str3);Commit;
--               insert into temp values(Query_Str4,finalcondition);commit;
--
--    OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4 ||'order by deal_deal_number,statusorder';
--    Goto Process_End;
--  End If;
  --end


---updated as on 07/04/2014 from IShwar

-- if varReportID = 'CURRFUTUREDEALFORTHEDAY'  then
--    open GENCURSOR for
--        select  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            DEAL_USER_REFERENCE as ContractNo,
--            nvl(c.cdel_cancel_amount,deal_base_amount) as Amount ,
--            to_char(nvl(c.cdel_cancel_rate,deal_exchange_rate),'999d9999') as NetRate,
--            to_char(nvl(c.cdel_Spot_rate,deal_spot_rate),'999d9999')as Spot,
--            to_char(nvl(c.cdel_forward_rate,deal_forward_rate),'999d9999')as FwdRate ,
--            to_char(nvl(c.cdel_margin_rate,deal_margin_rate),'999d9999') as Margin,
--            deal_maturity_date as MaturityDate,
--            (case when c.cdel_cancel_rate is not null then
--                      to_char((deal_exchange_rate),'999d9999') else null end )as BookingRate,
--            cdel_profit_loss as PandL,
--            round(cdel_profit_loss/100000,2)as AmtInLacs,
--            (case when d.deal_execute_date = c.cdel_cancel_date then 'Cash deal'
--                  when d.DEAL_init_code=33800055 then 'Inward Remittance'
--                   when c.cdel_deal_number is null then 'FX Booking'
--                  when c.cdel_cancel_type=27000001 then 'FX Cancellation'
--                  when c.cdel_cancel_type=27000002 then 'FX Utilisation'
--                  else 'No Matching'
--                  end) DealType,
--            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  'ED Benefit - NIL'
--                  when (c.cdel_cancel_type=27000002) then 'ED Benefit : ' ||  to_char(c.cdel_cancel_rate-d.deal_exchange_rate)  || ' Paisa '
--                  else '' end) as Remarks,
--                  frmDate as AsonDate,
--                  toDate as ToDate
--     from trtran001 d left outer join trtran006 c
--       on deal_deal_number= cdel_deal_number
--     where deal_record_status not in (10200005,10200006)
--      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and (CDEL_CANCEL_DATE=frmDate or DEAL_EXECUTE_DATE=frmDate);
--     -- and cdel_deal_number is null;
--
--
--
----Query_Str :=' select UserId, Remark,DealType,status,deal_execute_date as ExecuteDate,deal_deal_number as DealNumber,deal_COMPANY_CODE1 as  CompanyCode,
----               deal_COUNTER_PARTY1 as CounterParty,deal_BASE_CURRENCY1 as BaseCurrency,DEAL_BUY_SELL1  as BuySell1,BaseAmount,AmtInr,
----               deal_maturity_date as MaturityDate,Rate,BookingRate,ProductQty,BacKupDeal,SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
----               FromDate,ToDate,DEAL_OTHER_CURRENCY1 as OtherCurrency,
----               DEAL_RECORD_STATUS,DEAL_HEDGE_TRADE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,
----               pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as BuySell, CDEL_LOCAL_RATE as WashRate,DEAL_INIT_CODE1 as UserCode,
----                pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2) as initcode,PandL,Spot,NetRate,Margin,HedgeTrade,statusorder
----              ' || varGroupField || '
---- from
----              ( select  ''Future '' dealType, ''booked'' status, 1 as statusorder,
----                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
----                        cfut_execute_date as deal_execute_date,
----                        cfut_deal_number as deal_deal_number,
----                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1,
----                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
----                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
----                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
----                        pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) as DEAL_BUY_SELL1,
----                       CFUT_BASE_AMOUNT as BaseAmount,
----                      (CFUT_BASE_AMOUNT*cfut_lot_price) as AmtInr,
----                       cfut_maturity_date as deal_maturity_date,  CFUT_EXCHANGE_RATE as  Rate,CFUT_EXCHANGE_RATE as BookingRate, CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
----                       (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
----                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,';
----       Query_Str1 :='  pkgreturnreport.GetSystemDate() as SystemDate,
----                       TO_DATE('||''''||frmDate||''''||') as FromDate,
----                        to_date('||''''||toDate||''''||') as ToDate,
----                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
----                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as DEAL_BUY_SELL,
----                        pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
----                        CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
----                        1  As  Cdel_Local_Rate,  0 as  PandL,
----                        0 as Spot,
----                        CFUT_EXCHANGE_RATE as NetRate,
----                       0 as Margin
----                         from  trtran061
----                  where  cfut_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
----                        and cfut_record_status not in (10200005,10200006)
----      union all
----                   select  ''Future '' dealType,
----                         ''canceled'' status,2 as statusorder,
----                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
----                        CFRV_EXECUTE_DATE as deal_execute_date,
----                        cfut_deal_number as deal_deal_number,
----                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1,
----                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
----                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
----                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
----                        decode (CFUT_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1, ';
----         Query_Str2 :=' (CFRV_REVERSE_LOT*1000) as BaseAmount,
----        ((CFUT_BASE_AMOUNT*1000)*CFRV_LOT_PRICE) as AmtInr,
----                       cfut_maturity_date as deal_maturity_date,  CFRV_LOT_PRICE as  Rate,CFUT_EXCHANGE_RATE as BookingRate,CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
----                      (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
----                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
----                        pkgreturnreport.GetSystemDate() as SystemDate,
----                        TO_DATE('||''''||frmDate||''''||') as FromDate,
----                        to_date('||''''||toDate||''''||') as ToDate,
----                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
----                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as DEAL_BUY_SELL, --0 as CDEL_LOCAL_RATE,
----                         pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
----                         CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
----                        1 CDEL_LOCAL_RATE, cfrv_profit_loss PandL,
----                       0 as Spot,
----                        CFUT_EXCHANGE_RATE as NetRate,
----                        0 as Margin
----                         from  trtran061,trtran063
----                  where    cfut_deal_number=CFRV_DEAL_NUMBER
----                        and cfrv_RECORD_STATUS not in (10200005,10200006)
----                        and  cfut_record_status not in (10200005,10200006)
----                        and (CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
----                        or   CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
----
----          UNION ALL
----
----                select ''Forward '' dealType, ''FX Booking'' status,1 as statusorder,
----                        DEAL_USER_ID as UserId,
----                        DEAL_DEALER_REMARKS as Remark,
----                        DEAL_EXECUTE_DATE as  DEAL_EXECUTE_DATE,
----                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
----                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
----                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
----                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
----                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
----                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as DEAL_BUY_SELL1,';
----          Query_Str3 :='DEAL_BASE_AMOUNT as BaseAmount,
----        (DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE) as AmtInr,
----                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
----                        DEAL_EXCHANGE_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
----                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
----                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
----                       pkgreturnreport.GetSystemDate() as SystemDate,
----                       TO_DATE('||''''||frmDate||''''||') as FromDate,
----                        to_date('||''''||toDate||''''||') as ToDate,
----                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
----                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as DEAL_BUY_SELL ,
----                        pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
----                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
----                       1 as CDEL_LOCAL_RATE,
----                      0 PandL,
----                      0 as Spot,
----                        DEAL_EXCHANGE_RATE as NetRate,
----                       0 as Margin
----
----                  from  trtran001
----                   where  DEAL_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
----                         and  deal_record_status not in (10200005,10200006)
----        union all
----           select ''Forward'' dealType,
----                       case CDEL_CANCEL_TYPE when 27000001 then ''FX Cancellation''
----                        when 27000002 then ''FX Utilization'' end as status, 2 as statusorder,
----                        DEAL_USER_ID as UserId,
----                        DEAL_DEALER_REMARKS as Remark,
----                        CDEL_CANCEL_DATE as  DEAL_EXECUTE_DATE,
----                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
----                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
----                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
----                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
----                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
----                       decode (deal_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1,';
----        Query_Str4 :=' CDEL_CANCEL_AMOUNT as BaseAmount,
----       (CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) as AmtInr,
----                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
----                        CDEL_CANCEL_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
----                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
----                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
----                        pkgreturnreport.GetSystemDate() as SystemDate,
----                        TO_DATE('||''''||frmDate||''''||') as FromDate,
----                        to_date('||''''||toDate|| ''''||') as ToDate,
----                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
----                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as DEAL_BUY_SELL ,pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
----                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal '', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade,DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
----                        CDEL_LOCAL_RATE as CDEL_LOCAL_RATE,cdel_profit_loss PandL,
----                       0 as Spot,
----                       CDEL_CANCEL_RATE as NetRate,
----                     0 as Margin
----                  from  trtran001,trtran006
----                   where  deal_deal_number=cdel_deal_number
----                       and (CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
----                       or CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
----                       and CDEL_RECORD_STATUS not in (10200005,10200006))
----               where  DEAL_RECORD_STATUS not in (10200005,10200006)
----                      '||substr(finalcondition,64)||'';
----              -- Query_Str :=Query_Str ||Query_Str1 ||Query_Str2||Query_Str3||Query_Str4|| 'order by deal_deal_number ';
----              delete from temp;commit;
----               Insert Into Temp Values(Query_Str,Query_Str1);Commit;
----               Insert Into Temp Values(Query_Str2,Query_Str3);Commit;
----               insert into temp values(Query_Str4,finalcondition);commit;
----
----    OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4 ||'order by deal_deal_number,statusorder';
--    Goto Process_End;
--  End If;
  --end


  ---updated on 08/04/2014

  --added Akash/Gouri 21-May-13 06:58 am
-- if varReportID = 'CURRFUTUREDEALFORTHEDAY'  then
----    open GENCURSOR for
----        select  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
----            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
----            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
----            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
----            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
----            DEAL_USER_REFERENCE as ContractNo,
----            nvl(c.cdel_cancel_amount,deal_base_amount) as Amount ,
----            to_char(nvl(c.cdel_cancel_rate,deal_exchange_rate),'999d9999') as NetRate,
----            to_char(nvl(c.cdel_Spot_rate,deal_spot_rate),'999d9999')as Spot,
----            to_char(nvl(c.cdel_forward_rate,deal_forward_rate),'990d9999')as FwdRate ,
----            to_char(nvl(c.cdel_margin_rate,deal_margin_rate),'990d9999') as Margin,
----            deal_maturity_date as MaturityDate,
----            (--case when c.cdel_cancel_rate is not null then
----            case when c.cdel_cancel_type=27000001 then
----                      to_char((d.deal_exchange_rate),'999d9999') else null end )as BookingRate,
----            c.cdel_profit_loss as PandL,
----            round(c.cdel_profit_loss/100000,2)as AmtInLacs,
----            --(case when d.deal_execute_date = c.cdel_cancel_date then 'Cash Rate'
----            (case when d.deal_deal_type=25400001 then 'Cash Rate'
----            when d.DEAL_init_code=33800055 then 'Inward Remittance'
----                   when c.cdel_deal_number is null then 'FX Booking'
----                  when c.cdel_cancel_type=27000001 then 'FX Cancellation'
----                  when c.cdel_cancel_type=27000002 then 'FX Utilisation'
----                  else 'No Matching'
----                  end) DealType,
----            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  'ED Benefit - NIL'
----                  when (c.cdel_cancel_type=27000002) then 'ED Benefit : ' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate),4))  || ' Paisa '
----                  else '' end) as Remarks,
----                  frmDate as AsonDate,
----                  toDate as ToDate
----     from trtran001 d left outer join trtran006 c
----       on deal_deal_number= cdel_deal_number
----     where deal_record_status not in (10200005,10200006)
----      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
----      and (CDEL_CANCEL_DATE=frmDate or DEAL_EXECUTE_DATE=frmDate);
--     -- and cdel_deal_number is null;
--
--     open gencursor for
--             select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
--            c.cdel_cancel_amount as Amount ,
--             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else
--                               c.cdel_cancel_rate end),'999d9999') as NetRate,
--            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate
--                               else  c.cdel_Spot_rate end),'999d9999')as Spot,
--            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
--                               else c.cdel_forward_rate end ),'990d9999')as FwdRate ,
--            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
--                               else c.cdel_margin_rate end),'990d9999') as Margin,
--            deal_maturity_date as MaturityDate,
--            (--case when c.cdel_cancel_rate is not null then
--            case when c.cdel_cancel_type=27000001 then
--                      to_char((d.deal_exchange_rate),'999d9999') else null end )as BookingRate,
--            c.cdel_profit_loss as PandL,
--            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,
--            --(case when d.deal_execute_date = c.cdel_cancel_date then 'Cash Rate'
--            (case  when nvl((select remt_remittance_type from
--                        trtran008a
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),'') =33900001
--                        then  'Inward Remittance'
--                  when nvl((select remt_remittance_type from
--                        trtran008a
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),'') =33900002
--                        then  'Outward Remittance'
--                  when d.deal_deal_type=25400001 then 'Cash Rate'
--                  when c.cdel_deal_number is null then 'FX Booking'
--                  when c.cdel_cancel_type=27000001 then 'FX Cancellation'
--                  when c.cdel_cancel_type=27000002 then 'FX Utilisation'
--                  else 'No Matching'
--                  end) DealType,
--            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  ''
--                  when (c.cdel_cancel_type=27000002) then 'ED Benefit ' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  || ' Paisa '
--                  else '' end) as Remarks,
--                  frmDate as AsonDate,
--                  toDate as ToDate
--     from trtran001 d inner join trtran006 c
--       on deal_deal_number= cdel_deal_number
--     where deal_record_status not in (10200005,10200006)
--      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and (CDEL_CANCEL_DATE=frmDate)
--
--      union all
--              select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            DEAL_USER_REFERENCE as ContractNo,
--            deal_base_amount as Amount ,
--            to_char(deal_exchange_rate,'999d9999') as NetRate,
--            to_char(deal_Spot_rate,'999d9999')as Spot,
--            to_char(deal_forward_rate,'990d9999')as FwdRate ,
--            to_char(deal_margin_rate,'990d9999') as Margin,
--            deal_maturity_date as MaturityDate,
--            null as BookingRate,
--            null as PandL,
--            null as AmtInLacs,
--            --(case when d.deal_execute_date = c.cdel_cancel_date then 'Cash Rate'
--            'FX Booking' DealType,
--            null as Remarks,
--             frmDate as AsonDate,
--             toDate as ToDate
--     from trtran001
--     where deal_record_status not in (10200005,10200006)
--     -- and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and  DEAL_EXECUTE_DATE=frmDate
--      and deal_deal_type not in (25400001)
--      and DEAL_init_code not in (33800055);
--
--
--
--       Goto Process_End;
--  End If;

---  Deal Slip consolidatied modified by shrihari/prateek  on 04-JUL-2014    -----
if varReportID = 'CURRFUTUREDEALFORTHEDAY'  then
  --- open gencursor for
   Query_Str:=' select deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
        sum(Amount) as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
        BookingRate,sum(PandL) as PandL,sum(AmtInLacs) as AmtInLacs,DealType,Remarks,AsonDate,ToDate from

        (
           select  deal_deal_number,
           pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
           c.cdel_cancel_amount as Amount ,
             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else
                               c.cdel_cancel_rate end),'||''''||'999d9999'||''''||') as NetRate,
            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate
                               else  c.cdel_Spot_rate end),'||''''||'999d9999'||''''||')as Spot,
            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
                               else c.cdel_forward_rate end ),'||''''||'990d9999'||''''||')as FwdRate ,
            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
                               else c.cdel_margin_rate end),'||''''||'990d9999'||''''||') as Margin,
            deal_maturity_date as MaturityDate,
--            (case when c.cdel_cancel_type=27000001 then
--                      to_char((d.deal_exchange_rate),'||''''||'999d9999'||''''||') else null end )as BookingRate,
            d.deal_exchange_rate as BookingRate,
            c.cdel_profit_loss as PandL,
            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,
            (case  when nvl((select remt_remittance_type from
                        trtran008a
                        where remt_remittance_reference= cdel_trade_reference
                        and remt_record_status not in (10200005,10200006)),'||''''||''||''''||') =33900001
                        then  '||''''||'Inward Remittance'||''''||'
                  when nvl((select remt_remittance_type from
                        trtran008a
                        where remt_remittance_reference= cdel_trade_reference
                        and remt_record_status not in (10200005,10200006)),'||''''||''||''''||') =33900002
                        then  '||''''||'Outward Remittance'||''''||'
                  when d.deal_deal_type=25400001 then '||''''||'Cash Rate'||''''||'
                  when c.cdel_deal_number is null then '||''''||'FX Booking'||''''||'
                  when c.cdel_cancel_type=27000001 then '||''''||'FX Cancellation'||''''||'
                  when c.cdel_cancel_type=27000002 then '||''''||'FX Utilisation'||''''||'
                  else '||''''||'No Matching'||''''||'
                  end) DealType,
            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  '||''''||''||''''||'
                  when (c.cdel_cancel_type=27000002) then  '||''''||'ED Benefit '||''''||' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  ||  '||''''||'Paisa'||''''||'
                  else '||''''||''||''''||' end) as Remarks,
                  TO_DATE('||''''||frmDate||''''||') as AsonDate,
                  TO_DATE('||''''||toDate||''''||') as ToDate
                 --  ' || varGroupField || '
     from trtran001 d inner join trtran006 c
       on deal_deal_number= cdel_deal_number
     where deal_record_status not in (10200005,10200006)
      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
      and (CDEL_CANCEL_DATE= TO_DATE('||''''||frmDate||''''||'))) x
      group by deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
       NetRate,Spot,FwdRate,Margin,MaturityDate,
        BookingRate,DealType,Remarks,AsonDate,ToDate';
 Query_Str1 := ' union all
             select  deal_deal_number,
            pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
            DEAL_USER_REFERENCE as ContractNo,
            deal_base_amount as Amount ,
            to_char(deal_exchange_rate,'||''''||'999d9999'||''''||') as NetRate,
            to_char(deal_Spot_rate,'||''''||'999d9999'||''''||')as Spot,
            to_char(deal_forward_rate,'||''''||'990d9999'||''''||')as FwdRate ,
            to_char(deal_margin_rate,'||''''||'990d9999'||''''||') as Margin,
            deal_maturity_date as MaturityDate,
            null as BookingRate,
            null as PandL,
            null as AmtInLacs,
            '||''''||' FX Booking'||''''||' DealType,
            null as Remarks,
             TO_DATE('||''''||frmDate||''''||') as AsonDate,
             TO_DATE('||''''||toDate||''''||') as ToDate
              --'|| varGroupField || '
     from trtran001
     where deal_record_status not in (10200005,10200006)
      and  DEAL_EXECUTE_DATE=  TO_DATE('||''''||frmDate||''''||')
      and deal_deal_type not in (25400001)
      and DEAL_init_code not in (33800055)
      '||finalcondition||'';
    
    delete from temp;commit;
    insert into temp values(Query_Str,Query_str1);commit;
    insert into temp values(Query_str1,finalcondition);
       open gencursor for (Query_Str||Query_str1);
--             select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
--            c.cdel_cancel_amount as Amount ,
--             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else
--                               c.cdel_cancel_rate end),'999d9999') as NetRate,
--            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate
--                               else  c.cdel_Spot_rate end),'999d9999')as Spot,
--            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
--                               else c.cdel_forward_rate end ),'990d9999')as FwdRate ,
--            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
--                               else c.cdel_margin_rate end),'990d9999') as Margin,
--            deal_maturity_date as MaturityDate,
--            (--case when c.cdel_cancel_rate is not null then
--            case when c.cdel_cancel_type=27000001 then
--                      to_char((d.deal_exchange_rate),'999d9999') else null end )as BookingRate,
--            c.cdel_profit_loss as PandL,
--            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,
--            --(case when d.deal_execute_date = c.cdel_cancel_date then 'Cash Rate'
--            (case  when nvl((select remt_remittance_type from
--                        trtran008a
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),'') =33900001
--                        then  'Inward Remittance'
--                  when nvl((select remt_remittance_type from
--                        trtran008a
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),'') =33900002
--                        then  'Outward Remittance'
--                  when d.deal_deal_type=25400001 then 'Cash Rate'
--                  when c.cdel_deal_number is null then 'FX Booking'
--                  when c.cdel_cancel_type=27000001 then 'FX Cancellation'
--                  when c.cdel_cancel_type=27000002 then 'FX Utilisation'
--                  else 'No Matching'
--                  end) DealType,
--            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  ''
--                  when (c.cdel_cancel_type=27000002) then 'ED Benefit ' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  || ' Paisa '
--                  else '' end) as Remarks,
--                  frmDate as AsonDate,
--                  toDate as ToDate
--     from trtran001 d inner join trtran006 c
--       on deal_deal_number= cdel_deal_number
--     where deal_record_status not in (10200005,10200006)
--      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and (CDEL_CANCEL_DATE=frmDate)
--
--      union all
--              select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            DEAL_USER_REFERENCE as ContractNo,
--            deal_base_amount as Amount ,
--            to_char(deal_exchange_rate,'999d9999') as NetRate,
--            to_char(deal_Spot_rate,'999d9999')as Spot,
--            to_char(deal_forward_rate,'990d9999')as FwdRate ,
--            to_char(deal_margin_rate,'990d9999') as Margin,
--            deal_maturity_date as MaturityDate,
--            null as BookingRate,
--            null as PandL,
--            null as AmtInLacs,
--            --(case when d.deal_execute_date = c.cdel_cancel_date then 'Cash Rate'
--            'FX Booking' DealType,
--            null as Remarks,
--             frmDate as AsonDate,
--             toDate as ToDate
--     from trtran001
--     where deal_record_status not in (10200005,10200006)
--     -- and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and  DEAL_EXECUTE_DATE=frmDate
--      and deal_deal_type not in (25400001)
--      and DEAL_init_code not in (33800055);

       Goto Process_End;
  End If;

---- end here ----

  ------


  If  Varreportid ='CURRFUTUREDEALCANCELATION' Then
Query_Str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
               Pkgreturncursor.Fncgetdescription(Initcode,2) As Initcode,Washrate As Washrate,
               Canceldate,Cancelamount as CancleAmount, round(CancelRate,6) as CancelRate,
               Status,
               BalanceFcy*Exrate as mtmValue,
               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,HedgeTrade,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               To_Date('||''''||frmDate||''''||') As Fromdate,
              to_date('||''''||toDate||''''||') as ToDate
             ' || varGroupField || '
          From  VewForwardfuture
          where Status not in (10200005,10200006)
                and DealNumber not in (''RBPL/FUT/H/B/0750/12-13'')
                and Canceldate between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                '||finalcondition||' ';
--                If Varreportid = 'CURRFUTUREDEALFORTHEDAY' then
--                Query_Str :=Query_Str ||' order by dealdate ';
--                elsif varReportID ='CURRFUTUREDEALCANCELATION' then
--                   Query_Str :=Query_Str ||' order by Canceldate ';
--                end if;
--
                delete from temp;commit;
               insert into temp values(Query_Str,finalcondition);commit;
               OPEN GenCursor for Query_Str||'order by Canceldate';
    Goto Process_End;
  end if;
------------------aakash end

--commented by aakash 21-may-13
--  If Varreportid ='CURRFUTUREREALIZEDPANDL' Then
--  Delete From Trsystem978;Commit;
--  insert into trsystem978 values(toDate);commit;
--Query_Str :='  with tabCancel as
--
--                    (select cdel_deal_number DealNumber, cdel_cancel_date CancelDate, cdel_cancel_rate CancelRate,
--                    cdel_cancel_amount CancleAmount, cdel_profit_loss RealizedPandL, cdel_local_rate WashRate
--                    From Trtran006
--                    Where Cdel_Cancel_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
--                    and cdel_record_status not in (10200005,10200006)
--                    union all
--                    select cfrv_deal_number DealNumber, cfrv_execute_date CancelDate, cfrv_lot_price CancelRate,
--                    cfrv_cancel_amount CancleAmount, cfrv_profit_loss RealizedPandL, cfrv_lot_price WashRate
--                    from trtran063
--                    Where Cfrv_Execute_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
--                    and cfrv_record_status not in (10200005,10200006))
--
--                    select a.DEALNUMBER,pkgreturncursor.fncgetdescription(DealType,2) DealType,DEALREF AS Remark,
--                    BANKNAME as CounterParty,DEALREF as ReferenceNum, COMPANYNAME as Company,
--                    USERID,TRANS as BackupDeal,Currency,BuySell, pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,
--                    DEALDATE as ExecuteDate,EXRATE as StrickRate,
--
--                    b.Washrate As Washrate,
--                    round(b.CANCELRATE,6) cancelrate, b.CANCELDATE,b.RealizedPandL as RealizedPandL,b.CANCLeAMOUNT as CancleAmount,
--
--                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter, RecordStatus,HedgeTrade,Maturity as MaturityDate,
--                    TO_DATE('||''''||frmDate||''''||') as FromDate,
--                   to_date('||''''||toDate||''''||') as ToDate
--                     ' || varGroupField || '
--                    from vewForwardFuture a , tabCancel b
--                    where a.DealNumber = b.DealNumber
--                    And Status Not In (10200005,10200006)
--                   -- CANCELDATE between '||''''||frmDate||''''||' And '||''''||todate||''''||'
--                 '||substr(finalcondition,57)||'';
--               delete from temp; commit;
--               Insert Into Temp Values(Query_Str,Finalcondition);Commit;
--    Open Gencursor For Query_Str || 'order by DealNumber,CancelDate';
--    Goto Process_End;
--  end if;

--added by aakash/gouri 24-may-13 05:06 PM
If Varreportid ='CURRFUTUREREALIZEDPANDL' Then
  Delete From Trsystem978;Commit;
  insert into trsystem978 values(toDate);commit;
Query_Str :='  with tabCancel as

                    (select cdel_deal_number DealNumber, cdel_cancel_date CancelDate, cdel_cancel_rate CancelRate,
                    cdel_cancel_amount CancleAmount, cdel_profit_loss RealizedPandL, cdel_local_rate WashRate,
                    (cdel_cancel_amount * cdel_cancel_rate) as CancleAmtInr
                    From Trtran006
                    Where Cdel_Cancel_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cdel_record_status not in (10200005,10200006)
                    union all
                    select cfrv_deal_number DealNumber, cfrv_execute_date CancelDate, cfrv_lot_price CancelRate,
                    cfrv_cancel_amount CancleAmount, cfrv_profit_loss RealizedPandL, cfrv_lot_price WashRate,
                     (cfrv_cancel_amount * cfrv_lot_price) as CancleAmtInr
                    from trtran063
                    Where Cfrv_Execute_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cfrv_record_status not in (10200005,10200006))

                    select a.DEALNUMBER,pkgreturncursor.fncgetdescription(DealType,2) DealType,DEALREF AS Remark,
                    BANKNAME as CounterParty,DEALREF as ReferenceNum, COMPANYNAME as Company,a.CompanyCode,
                    USERID,TRANS as BackupDeal,Currency,BuySell, pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,
                    DEALDATE as ExecuteDate,EXRATE as StrickRate,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,

                    b.Washrate As Washrate,
                    round(b.CANCELRATE,6) cancelrate, b.CANCELDATE,b.RealizedPandL as RealizedPandL,b.CANCLeAMOUNT as CancleAmount,b.CancleAmtInr,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter, RecordStatus,HedgeTrade,Maturity as MaturityDate,
                    TO_DATE('||''''||frmDate||''''||') as FromDate,
                   to_date('||''''||toDate||''''||') as ToDate
                   ' || varGroupField || '
                    from vewForwardFuture a , tabCancel b
                    where a.DealNumber = b.DealNumber
                    And Status Not In (10200005,10200006)
                   -- CANCELDATE between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                  --  Substr(finalcondition,decode(instr(finalcondition,'|| 'Canceldate' ||'),0,0,19),length(finalcondition))
                '||substr(finalcondition,57)||'';
               delete from temp; commit;
               Insert Into Temp Values(Query_Str,Finalcondition);Commit;
    Open Gencursor For Query_Str || 'order by DealNumber,CancelDate';
    Goto Process_End;
  End If;
--end

     --added by aakash/gouri 24-may-13 05:09 pm
  If Varreportid ='CURRFUTUREREALIZEDPANDLWETAVG' Then
  Delete From Trsystem978;Commit;
  insert into trsystem978 values(toDate);commit;
Query_Str :='  with tabCancel as

                    (select cdel_deal_number DealNumber, cdel_cancel_date CancelDate1, cdel_cancel_rate CancelRate,
                    cdel_cancel_amount CancleAmount, cdel_profit_loss RealizedPandL, cdel_local_rate WashRate,
                    (cdel_cancel_amount * cdel_cancel_rate) as CancleAmtInr
                    From Trtran006
                    Where Cdel_Cancel_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cdel_record_status not in (10200005,10200006)
                    union all
                    select cfrv_deal_number DealNumber, cfrv_execute_date CancelDate1, cfrv_lot_price CancelRate,
                    cfrv_cancel_amount CancleAmount, cfrv_profit_loss RealizedPandL, cfrv_lot_price WashRate,
                     (cfrv_cancel_amount * cfrv_lot_price) as CancleAmtInr
                    from trtran063
                    Where Cfrv_Execute_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cfrv_record_status not in (10200005,10200006))

                    select a.DEALNUMBER,pkgreturncursor.fncgetdescription(DealType,2) DealType,DEALREF AS Remark,
                    BANKNAME as CounterParty,DEALREF as ReferenceNum, COMPANYNAME as Company,
                    USERID,TRANS as BackupDeal,Currency,BuySell, pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,
                    DEALDATE as ExecuteDate,EXRATE as StrickRate,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,

                    b.Washrate As Washrate,
                    round(b.CANCELRATE,6) cancelrate, b.CANCELDATE1,b.RealizedPandL as RealizedPandL,b.CANCLeAMOUNT as CancleAmount,b.CancleAmtInr,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter, RecordStatus,HedgeTrade,Maturity as MaturityDate,
                    TO_DATE('||''''||frmDate||''''||') as FromDate,
                   to_date('||''''||toDate||''''||') as ToDate
                   ' || varGroupField || ', PKGRETURNCURSOR.FNCGETDESCRIPTION(CURRENCYCODE,2)  as BaseCurrencyGroup
                    from vewForwardFuture a , tabCancel b
                    where a.DealNumber = b.DealNumber
                    And Status Not In (10200005,10200006)
                   -- CANCELDATE between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                  --  Substr(finalcondition,decode(instr(finalcondition,'|| 'Canceldate' ||'),0,0,19),length(finalcondition))
                '||finalcondition||'';
               delete from temp; commit;
               Insert Into Temp Values(Query_Str,Finalcondition);Commit;
    Open Gencursor For Query_Str || 'order by DealNumber,CancelDate';
    Goto Process_End;
  End If;
--end

if varReportID = 'BREAKDOWNPANDL' then

 Query_Str :='select cfut_execute_date as ExecuteDate,
                        cfut_deal_number as DealNumber,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as CompanyCode,
                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as CounterParty,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(CFUT_PRODUCT_CODE,2) as productCode,
                        CFUT_BASE_AMOUNT as BaseAmount,CFUT_BASE_AMOUNT*cfut_lot_price as AmtInr,
                        pkgreturncursor.fncgetdescription(cfut_exchange_code, 2) as ExchangeType,
                        pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) as BuySell,
                        pkgreturncursor.fncgetdescription(cfut_counter_party,2) as Broker,
                        cfut_maturity_date as MaturityDate,
                       CFUT_LOT_NUMBERS as Lot,
                        pkgReturnreport.fncGetProductDetails(cfut_product_code,cfut_maturity_date,cfut_exchange_code,2) as LotSize,
                        pkgReturnreport.fncGetProductDetails(cfut_product_code,cfut_maturity_date,cfut_exchange_code,3) as LotUom,
                        CFUT_EXCHANGE_RATE as  Rate,
                        CFMR_MTM_DATE as mtmDate,
                        CFMR_MTM_RATE as BreakdownmtmRate,
                        CFMR_PROFIT_LOSS as ProfitLoss,
                        CFMR_MARGIN_AMOUNT as MarginAmt,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                        TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField || '
                        from trtran061,trtran062
                        where CFUT_DEAL_NUMBER=CFMR_DEAL_NUMBER
                        and (( CFUT_PROCESS_COMPLETE = 12400001  and  CFUT_COMPLETE_DATE > '||''''||frmDate||''''||' )or  CFUT_PROCESS_COMPLETE = 12400002)
                       AND  CFUT_RECORD_STATUS not in(10200005,10200006)
                      AND   CFMR_RECORD_STATUS not in(10200005,10200006)
                       '||finalcondition||'';

                  delete from temp;commit;
                  Insert Into Temp Values (Query_Str,finalcondition);Commit;
  OPEN GenCursor for Query_Str ;
  Goto Process_End;
End If;

if varReportID ='TRADINGPROFILE' then
  numError := fncTradeProfile(varUserID, frmDate, todate);
  Query_str :='select DEAL_PROFILE_DATE "ProfitDate",
                DEAL_PROFILE_SERIAL "Serial",
                DEAL_PROFILE_LEGEND "Legend",
                DEAL_PROFILE_CURRENCY "Currency",
                DEAL_PROFILE_APRIL "Aprial",
                DEAL_PROFILE_MAY "May",
                DEAL_PROFILE_JUNE "Jun",
                DEAL_PROFILE_JULY "July",
                DEAL_PROFILE_AUGUST "August",
                DEAL_PROFILE_SEPTEMBER "September",
                DEAL_PROFILE_OCTOBER "October",
                DEAL_PROFILE_NOVEMBER "November",
                DEAL_PROFILE_DECEMBER "December",
                DEAL_PROFILE_JANUARY "January",
                DEAL_PROFILE_FEBRUARY "February",
                DEAL_PROFILE_MARCH "March",
                DEAL_PROFILE_TOTAL "Total",
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                TO_DATE('||''''||frmDate||''''||') as FromDate,
                to_date('||''''||toDate||''''||') as ToDate
  From trsystem980
  where  DEAL_PROFILE_DATE = '||''''||ToDate||''''||'
                  --   '||finalcondition||'';
    OPEN GenCursor for Query_Str || ' order by deal_profile_serial';
    Goto Process_End;
  end if;




--  If Varreportid = 'FXFORECAST' then
--
--     --NUMRECORDSETS:=2;
--
--     Open Gencursor For
--                 select Status,TypeofTrans,
--                      pkgreturncursor.fncgetdescription(CompanyCode,2) CompanyCode,
--                      pkgreturncursor.fncgetdescription(BackUpDeal,2) BackUpDeal,
--                      pkgreturncursor.fncgetdescription(productCode,2) productCode,
--                      MaturityMonth,BaseAmount,round(ExchangeRate,2)ExchangeRate,
--                      pkgreturncursor.fncgetdescription(BaseCurrency,2) BaseCurrency,
--                      pkgreturncursor.fncgetdescription(OtherCurrency,2) OtherCurrency,
--                      FinancialYear
--               from (
--               select 'O' status,'Deals' TypeOfTrans,deal_company_code
--              CompanyCode,deal_backup_deal BackupDeal,
--                      deal_init_code
--              ProductCode,to_char(deal_maturity_date,'MON-yy') MaturityMonth,
--                      sum(deal_base_amount)
--              BaseAmount,sum(deal_base_amount*deal_exchange_rate)/sum(deal_base_amount)
--              ExchangeRate,
--                      deal_base_currency BaseCurrency,Deal_other_currency OtherCurrency,
--                      (case when to_char(deal_maturity_date,'mm')<=3 then
--                           ((to_number( to_char(deal_maturity_date,'yy'))-1) || '-'
--              || to_char(deal_maturity_date,'yy'))
--                           else
--                           (to_char(deal_maturity_date,'yy') ||'-' ||(to_number(
--              to_char(deal_maturity_date,'yy'))+1))
--                           end) FinancialYear
--                 from trtran001
--                where ((deal_process_complete=12400002)
--                    or (deal_complete_date <=sysdate and deal_process_complete=12400001))
--                  and deal_execute_date >='01-apr-2012'
--                  and deal_record_status not in(12400005,12400006)
--               group by deal_company_code ,deal_backup_deal ,deal_init_code,
--                        to_char(deal_maturity_date,'MON-yy') ,deal_base_currency
--              ,Deal_other_currency,
--                        (case when to_char(deal_maturity_date,'mm')<=3 then
--                           ((to_number( to_char(deal_maturity_date,'yy'))-1) || '-'
--              || to_char(deal_maturity_date,'yy'))
--                           else
--                           (to_char(deal_maturity_date,'yy') ||'-' ||(to_number(
--              to_char(deal_maturity_date,'yy'))+1))
--                           end)
--               union all
--               select 'C' status,'Deals' TypeOfTrans,deal_company_code
--              CompanyCode,deal_backup_deal BackupDeal,
--                      deal_init_code
--              ProductCode,to_char(deal_maturity_date,'MON-yy') MaturityMonth,
--                      sum(cdel_cancel_amount)
--              BaseAmount,sum(cdel_cancel_amount*cdel_cancel_rate)/sum(cdel_cancel_amount)
--              ExchangeRate,
--                      deal_base_currency BaseCurrency,Deal_other_currency OtherCurrency,
--                      (case when to_char(deal_maturity_date,'mm')<=3 then
--                           ((to_number( to_char(deal_maturity_date,'yy'))-1) || '-'
--              || to_char(deal_maturity_date,'yy'))
--                           else
--                           (to_char(deal_maturity_date,'yy') ||'-' ||(to_number(
--              to_char(deal_maturity_date,'yy'))+1))
--                           end) FinancialYear
--                 from trtran001, trtran006
--                where deal_deal_number= cdel_deal_number
--                 and deal_execute_date >='01-apr-2012'
--                 and deal_record_status not in(12400005,12400006)
--                 and cdel_record_status not in (12400005,12400006)
--               group by deal_company_code ,deal_backup_deal ,deal_init_code,
--                        to_char(deal_maturity_date,'MON-yy') ,deal_base_currency
--              ,Deal_other_currency,
--                        (case when to_char(deal_maturity_date,'mm')<=3 then
--                           ((to_number( to_char(deal_maturity_date,'yy'))-1) || '-'
--              || to_char(deal_maturity_date,'yy'))
--                           else
--                           (to_char(deal_maturity_date,'yy') ||'-' ||(to_number(
--              to_char(deal_maturity_date,'yy'))+1))
--                           end)
--               union all
--              select 'O' Status,'Exposure' TypeOfTrans, trad_company_code
--              CompanyCode,null BackupDeal,
--                     trad_product_code
--              ProductCode,to_char(trad_maturity_date,'MON-yy') MaturityMonth,
--                     sum(trad_trade_fcy),sum(trad_trade_fcy*trad_trade_rate)/sum(trad_trade_fcy)
--              ExchangeRate,
--                     trad_trade_currency BaseCurrency,30400003 OtherCurrency,
--                     (case when to_char(trad_maturity_date,'mm')<=3 then
--                           ((to_number( to_char(trad_maturity_date,'yy'))-1) || '-'
--              || to_char(trad_maturity_date,'yy'))
--                           else
--                           (to_char(trad_maturity_date,'yy') ||'-' ||(to_number(
--              to_char(trad_maturity_date,'yy'))+1))
--                           end) FinancialYear
--                     from trtran002
--                     where ((trad_process_complete=12400002)
--                           or (trad_complete_date <=sysdate and
--              trad_process_complete=12400001))
--                          and trad_entry_date >='01-apr-2012'
--                          and trad_record_status not in (10200005,10200006)
--              group by trad_company_code, trad_product_code
--              ,to_char(trad_maturity_date,'MON-yy'),
--                       trad_trade_currency,(case when to_char(trad_maturity_date,'mm')<=3 then
--                           ((to_number( to_char(trad_maturity_date,'yy'))-1) || '-'
--              || to_char(trad_maturity_date,'yy'))
--                           else
--                           (to_char(trad_maturity_date,'yy') ||'-' ||(to_number(
--              to_char(trad_maturity_date,'yy'))+1))
--                           end)
--              union all
--              select 'C' Status,'Exposure' TypeOfTrans, trad_company_code
--              CompanyCode,null BackupDeal,
--                     trad_product_code
--              ProductCode,to_char(cdel_cancel_date,'MON-yy') MaturityMonth,
--                     sum(cdel_cancel_amount),sum(cdel_cancel_amount*cdel_cancel_rate)/sum(cdel_cancel_amount)
--              ExchangeRate,
--                     trad_trade_currency BaseCurrency,30400003 OtherCurrency,
--                     (case when to_char(cdel_cancel_date,'mm')<=3 then
--                           ((to_number( to_char(cdel_cancel_date,'yy'))-1) || '-' ||
--              to_char(cdel_cancel_date,'yy'))
--                           else
--                           (to_char(cdel_cancel_date,'yy') ||'-' ||(to_number(
--              to_char(cdel_cancel_date,'yy'))+1))
--                           end) FinancialYear
--                     from trtran003, trtran002,trtran006
--                     where brel_trade_reference=trad_trade_reference
--                          and cdel_trade_reference= brel_trade_reference
--                          and ((trad_process_complete=12400002)
--
--                           or (trad_complete_date <=sysdate and
--              trad_process_complete=12400001))
--                          and brel_entry_date >='01-apr-2012'
--                          and trad_record_status not in (10200005,10200006)
--                          and brel_record_status not in (10200005,10200006)
--                          and cdel_record_Status not in (10200005,10200006)
--              group by trad_company_code, trad_product_code
--              ,to_char(cdel_cancel_date,'MON-yy'),
--                       trad_trade_currency,(case when to_char(cdel_cancel_date,'mm')<=3 then
--                           ((to_number( to_char(cdel_cancel_date,'yy'))-1) || '-' ||
--              to_char(cdel_cancel_date,'yy'))
--                           else
--                           (to_char(cdel_cancel_date,'yy') ||'-' ||(to_number(
--              to_char(cdel_cancel_date,'yy'))+1))
--                           end))
--                            order by to_date('01-' || MaturityMonth ) ;
--
--                              Goto Process_End;
--           End If;

--             If Varreportid = 'SUBFXFORECAST' then
--            Open Gencursor For
--            select
--            sum (CASE WHEN TypeOfTrans1 ='Deals'   and status1 = 'O' THEN BaseAmount1 ELSE 0 END) HedgedExp1,
--            sum (CASE WHEN TypeOfTrans1 ='Exposure' and status1 = 'C' THEN BaseAmount1 ELSE 0 END) SettledExp1,
--            sum (CASE WHEN TypeOfTrans1 ='Exposure' and status1 = 'O' THEN BaseAmount1 ELSE 0 END) GrandTotal
--            from (
--               select 'O' status1, 'Deals' TypeOfTrans1,deal_company_code
--                      CompanyCode1,deal_backup_deal BackupDeal1,
--                      deal_init_code ProductCode1, sum(deal_base_amount) BaseAmount1,
--                      sum(deal_base_amount*deal_exchange_rate)/sum(deal_base_amount) ExchangeRate1,
--                      deal_base_currency BaseCurrency1,Deal_other_currency OtherCurrency1
--                 from trtran001
--                where ((deal_process_complete=12400002)
--                    or (deal_complete_date >=frmdate and deal_process_complete=12400001))
--                  --and deal_execute_date >='01-apr-2012'
--                       and deal_backup_deal=33300001
--                  and deal_record_status not in(12400005,12400006)
--               group by deal_company_code ,deal_backup_deal ,deal_init_code,
--                        to_char(deal_maturity_date,'MON-yy') ,deal_base_currency,Deal_other_currency
--
--               union all
--              select 'O' Status1,'Exposure' TypeOfTrans1, trad_company_code CompanyCode1,
--                    null BackupDeal1,  trad_product_code ProductCode1,
--                     sum(trad_trade_fcy) BaseAmount1,sum(trad_trade_fcy*trad_trade_rate)/sum(trad_trade_fcy) ExchangeRate1,
--                     trad_trade_currency BaseCurrency1,30400003 OtherCurrency1
--                     from trtran002
--                     where ((trad_process_complete=12400002)
--                           or (trad_complete_date <=sysdate and trad_process_complete=12400001))
--                         -- and trad_entry_date >='01-apr-2012'
--                              and TRAD_PRODUCT_CATEGORY=33300001
--                          and trad_record_status not in (10200005,10200006)
--              group by trad_company_code, trad_product_code ,to_char(trad_maturity_date,'MON-yy'),
--                       trad_trade_currency
--              union all
--              select 'C' Status1,'Exposure' TypeOfTrans1, trad_company_code
--              CompanyCode1,null BackupDeal1, trad_product_code ProductCode1,
--               sum(cdel_cancel_amount),sum(cdel_cancel_amount*cdel_cancel_rate)/sum(cdel_cancel_amount)  ExchangeRate1,
--                     trad_trade_currency BaseCurrency1,30400003 OtherCurrency1
--                     from trtran003, trtran002,trtran006
--                     where brel_trade_reference=trad_trade_reference
--                          and cdel_trade_reference= brel_trade_reference
--                          and ((trad_process_complete=12400002)
--
--                           or (trad_complete_date <=sysdate and
--              trad_process_complete=12400001))
--                      and TRAD_PRODUCT_CATEGORY=33300001
--                        --  and brel_entry_date >='01-apr-2012'
--                          and trad_record_status not in (10200005,10200006)
--                          and brel_record_status not in (10200005,10200006)
--                          and cdel_record_Status not in (10200005,10200006)
--              group by trad_company_code, trad_product_code
--              ,to_char(cdel_cancel_date,'MON-yy'),
--                       trad_trade_currency) a;
--          Goto Process_End;
--           End If;





   if varReportID ='TRADINGPROFILETRADERWISE' then
  Delete from trsystem980;
  for curDeals in
  (select distinct Trader
    from vewCancelDeals
    where hedgetrade=26000002)
    Loop
      numError := FNCTRADEPROFILETRADERWISE(varUserID, curDeals.trader, frmDate, todate);
    End Loop;

  Finalcondition := Replace(Replace(Finalcondition, 'CANCELDATE', 'DEAL_PROFILE_DATE'),'TRADER','DEAL_TRADER_CODE');
  varGroupField:=replace(varGroupField,'TRADER','DEAL_TRADER_CODE');
  Query_str :='select DEAL_PROFILE_DATE "ProfitDate",
                DEAL_PROFILE_SERIAL "Serial",
                DEAL_PROFILE_LEGEND "Legend",
                DEAL_PROFILE_CURRENCY "Currency",
                DEAL_PROFILE_APRIL "Aprial",
                DEAL_PROFILE_MAY "May",
                DEAL_PROFILE_JUNE "Jun",
                DEAL_PROFILE_JULY "July",
                DEAL_PROFILE_AUGUST "August",
                DEAL_PROFILE_SEPTEMBER "September",
                DEAL_PROFILE_OCTOBER "October",
                DEAL_PROFILE_NOVEMBER "November",
                DEAL_PROFILE_DECEMBER "December",
                DEAL_PROFILE_JANUARY "January",
                DEAL_PROFILE_FEBRUARY "February",
                DEAL_PROFILE_MARCH "March",
                DEAL_PROFILE_TOTAL "Total",
                deal_trader_code "TraderCode",
                  pkgreturncursor.fncgetdescription(deal_trader_code,2) Trader,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                TO_DATE('||''''||frmDate||''''||') as FromDate,
                to_date('||''''||toDate||''''||') as ToDate  ' || varGroupField || '
  From trsystem980
  where  DEAL_PROFILE_DATE = '||''''|| todate ||''''||'
                     '||finalcondition||'';
delete from temp;
insert into temp values('TradingProfile',Query_str);
commit;
    OPEN GenCursor for Query_Str || ' order by deal_trader_code, deal_profile_serial';
    Goto Process_End;
  End If;
  
 if varReportID = 'INVESTMENTSUMMARYRPT' or varReportID = 'INVESTMENTSUMMARYRPT1' then
  --OPEN GenCursor for
    Query_Str:='select 
          pkgreturncursor.fncgetdescription(COMP_COMPANY_CODE,2) COMPANY,
          ''Consolidated Position of all Group Companies'' COMPANY1,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,1,1) FIXEDDEPOSIT,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,1,2) FIXEDDEPOSITPRESENT,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,2,1) MFLIQUID,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,2,2) MFLIQUIDpresent,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,3,1) MFLIQUIDPLUS,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,3,2) MFLIQUIDPLUSpresent,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,4,1) COMMERCIALPAPPER,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,4,2) COMMERCIALPAPPERpresent,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,5,1) CERTIFICATEDEPOSIT,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,5,2) CERTIFICATEDEPOSITpresent,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,6,1) Bond,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,6,2) Bondpresent,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,7,1) Debenture,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,7,2) Debenturepresent,    
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,8,1) TreasuryBill,
          pkgfixeddepositproject.fncgetinvestmentamount(COMP_COMPANY_CODE,frmdate,8,2) TreasuryBillPresent,  
          '||''''||frmdate||''''||' ASONDATE,
          '||''''||todate||''''||'  TODATE
    from trmaster301
    where COMP_COMPANY_CODE not in (30100000,30199999)
       and COMP_RECORD_STATUS not in (10200005,10200006)';
       
       delete from temp;commit;
       insert into temp values (Query_Str,finalcondition);commit;
   Open Gencursor for Query_Str||finalcondition;
   Goto Process_End;
 End If; 
 

  
--    if varReportID= 'TREASURYREPORTG' then     
--      
--      SELECT  substr(FINALCONDITION, instr(FINALCONDITION,'MFTR_COMPANY_CODE',1)+23,8) 
--       into NUMSELCTEDCOMPANY from DUAL;
--       
--  --      OPEN GenCursor for
--        
--      Query_Str :=' select  ''Cash and Bank Balance'' as Group1,
--          '' as SchemeCode,
--        --   decode(pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1),''NO BANKS'',''CASH BALANCE'',pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1)) as schemeCategory,
--         '' as schemeCategory,
--          pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) Comapny,
--           decode(pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1),''NO BANKS'',''CASH BALANCE'',pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1)) BankName,  
--          LBBL_ACCOUNT_NUMBER as AccountNo,
--          pkgreturncursor.fncgetdescription(30400003,2) as Currency,
--       -- sum(
--        round(decode(LBBL_CRDR_ACC ,14600001,LBBL_BALANCE,-1*LBBL_BALANCE),0) PrincipalAmount,
--       --round(LBBL_BALANCE,0) PrincipalAmount,
--        null as PreTaxYeild,
--        null as PreTaxReturn,
--        null as TaxRate,
--        null as PostTaxYeild,
--        null as PostTaxReturn,
--        LBBL_EFFECTIVE_DATE as MaturityDate,
--        null as PrevMarketValue,
--        pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) Company1,
--            frmdate As Todate
--        
--   from  trmaster306A 
--   WHERE LBBL_COMPANY_CODE=NUMSELCTEDCOMPANY
--   AND LBBL_EFFECTIVE_DATE = frmdate
--   AND   LBBL_BANK_CODE<>30600002 
--   AND LBBL_RECORD_STATUS=10200003
--  union all
-- select  ''Cash and Bank Balance'' as Group1,
--              '' as SchemeCode,
--              '' as schemeCategory,
--            -- '' as schemeCategory,
--              pkgreturncursor.fncgetdescription(NUMSELCTEDCOMPANY,2) Comapny,
--               '' BankName,  
--              '' as AccountNo,
--             '' as Currency,
--           -- sum(
--            0 PrincipalAmount,
--           -- round(LBBL_BALANCE,0) PrincipalAmount,
--            null as PreTaxYeild,
--            null as PreTaxReturn,
--            null as TaxRate,
--            null as PostTaxYeild,
--            null as PostTaxReturn,
--            null as MaturityDate,
--            null as PrevMarketValue,
--            pkgreturncursor.fncgetdescription(NUMSELCTEDCOMPANY,2) Company1,
--                frmdate As Todate
--            
--     from  dual ';
----- group by LBBL_COMPANY_CODE,pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1),LBBL_EFFECTIVE_DATE
-- Query_Str1:=' union all
--          select          ''Investments'' as Group1,
--                pkgreturncursor.fncgetdescription(Fdrf_scheme_code,1) as SchemeCode,
--              --  pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,1) as schemeCategory,
--             ''Fixed Deposit'' as schemeCategory,
--                pkgreturncursor.fncgetdescription(Fdrf_company_Code,2)  as Comapny,
--                pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,2) as BankName,
--               to_char( FDRF_CREDIT_ACNO) as AccountNo,
--                pkgreturncursor.fncgetdescription(FDRF_CURRENCY_CODE,2) as Currency,
--                round(FDRF_DEPOSIT_AMOUNT - (select nvl(sum(fdcl_deposit_amount),0) from trtran047a
--                                where fdcl_fd_number=fdrf_fd_number and fdcl_sr_number=fdrf_sr_number
--                                and   fdcl_record_status = 10200003
--                                and fdcl_closure_date<=frmdate),0)  as PrincipalAmount,
--                FDRF_INTEREST_RATE as PreTaxYeild,
--                round(((FDRF_DEPOSIT_AMOUNT - (select nvl(sum(fdcl_deposit_amount),0) from trtran047a
--                                where fdcl_fd_number=fdrf_fd_number and fdcl_sr_number=fdrf_sr_number
--                                and   fdcl_record_status = 10200003
--                                and fdcl_closure_date<=frmdate))*FDRF_INTEREST_RATE/36500),0) as PreTaxReturn,
--                pkgsapinterface.fncgetcompanycode(FDRF_COMPANY_CODE,3)||''%'' as TaxRate,
--                round((FDRF_INTEREST_RATE-((FDRF_INTEREST_RATE*pkgsapinterface.fncgetcompanycode(FDRF_COMPANY_CODE,3))/100)),2) as PostTaxYeild,
--                round((((FDRF_DEPOSIT_AMOUNT - (select nvl(sum(fdcl_deposit_amount),0) from trtran047a
--                                where fdcl_fd_number=fdrf_fd_number and fdcl_sr_number=fdrf_sr_number
--                                and   fdcl_record_status = 10200003
--                                and fdcl_closure_date<=frmdate))*FDRF_INTEREST_RATE/36500)-
--
--                  (((((FDRF_DEPOSIT_AMOUNT - (select nvl(sum(fdcl_deposit_amount),0) from trtran047a
--                                where fdcl_fd_number=fdrf_fd_number and fdcl_sr_number=fdrf_sr_number
--                                and   fdcl_record_status = 10200003
--                                and fdcl_closure_date<=frmdate)))*FDRF_INTEREST_RATE/36500)*pkgsapinterface.fncgetcompanycode(FDRF_COMPANY_CODE,3))/100)),0) as PostTaxReturn,
--                FDRF_MATURITY_DATE as MaturityDate,
--                null as PrevMarketValue,
--                pkgreturncursor.fncgetdescription(Fdrf_company_Code,2) Company1,
--            frmdate As Todate
--          from trtran047
--          where Fdrf_company_Code=NUMSELCTEDCOMPANY
--          AND FDRF_REFERENCE_DATE<=frmdate
--                      and (nvl( fdrf_process_complete,12400002)=12400002 or
--                              FDRF_COMPLETE_DATE > frmdate )
--          and fdrf_record_status not in (10200005,10200006)
--      --    order by Fdrf_scheme_code,fdrf_local_bank
--UNION ALL
--      select          ''Investments'' as Group1,
--                pkgfixeddepositproject.fncgetisinname(mdel_user_reference,mdel_transaction_type) as SchemeCode,
--               -- pkgreturncursor.fncgetdescription(MDEL_BORROW_INVEST,2) as schemeCategory,
--                 ''Commercial Papers'' as schemeCategory,
--               -- pkgfixeddepositproject.fncgetisinname(mdel_user_reference,mdel_transaction_type) as schemeCategory,
--                pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE,2)  as Comapny,
--                pkgreturncursor.fncgetdescription(MDEL_COUNTER_PARTY,2) as BankName,
--                pkgreturncursor.fncgetdescription(MDEL_LOCAL_BANK,2) as AccountNo,
--                pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
--               round( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate),0)  as PrincipalAmount,
--                MDEL_INTEREST_RATE as PreTaxYeild,
--                round((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500),0) as PreTaxReturn,
--                pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3)||''%'' as TaxRate,
--                round((MDEL_INTEREST_RATE-((MDEL_INTEREST_RATE*pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3))/100)),2) as PostTaxYeild,
--                round(((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500)-
--
--                  (((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500)*pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3))/100)),0) as PostTaxReturn,
--                MDEL_DUE_DATE as MaturityDate,
--                null as PrevMarketValue,
--                pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE,2) Company1,
--            frmdate As Todate
--          from trtran031
--          where MDEL_COMPANY_CODE=NUMSELCTEDCOMPANY
--          AND MDEL_VALUE_DATE<=frmdate
--                      and (nvl( MDEL_PROCESS_COMPLETE,12400002)=12400002 or
--                              nvl(MDEL_COMPLETE_DATE,MDEL_VALUE_DATE) > frmdate )
--          AND MDEL_TRANSACTION_TYPE=28100054
--          and mdel_record_status not in (10200005,10200006)';
--Query_Str1:='UNION ALL
--select       ''Investments'' as Group1,
--                pkgfixeddepositproject.fncgetisinname(mdel_user_reference,mdel_transaction_type) as SchemeCode,
--                --pkgreturncursor.fncgetdescription(MDEL_BORROW_INVEST,2) as schemeCategory,
--              ''Certificate of Deposit'' as schemeCategory,
--                pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE,2)  as Comapny,
--                pkgreturncursor.fncgetdescription(MDEL_COUNTER_PARTY,2) as BankName,
--                pkgreturncursor.fncgetdescription(MDEL_LOCAL_BANK,2) as AccountNo,
--                pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
--               round( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate),0)  as PrincipalAmount,
--                MDEL_INTEREST_RATE as PreTaxYeild,
--                round((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500),0) as PreTaxReturn,
--               pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3)|| ''%'' as TaxRate,
--                round((MDEL_INTEREST_RATE-((MDEL_INTEREST_RATE*pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3))/100)),2) as PostTaxYeild,
--                round(((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500)-
--
--                  (((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500)*pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3))/100)),0) as PostTaxReturn,
--                MDEL_DUE_DATE as MaturityDate,
--                null as PrevMarketValue,
--                pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE,2) Company1,
--            frmdate As Todate
--          from trtran031
--          where  MDEL_COMPANY_CODE=NUMSELCTEDCOMPANY
--          AND MDEL_VALUE_DATE<=frmdate
--                      and (nvl( MDEL_PROCESS_COMPLETE,12400002)=12400002 or
--                              nvl(MDEL_COMPLETE_DATE,MDEL_VALUE_DATE) > frmdate )
--          AND MDEL_TRANSACTION_TYPE=28100055
--          and mdel_record_status not in (10200005,10200006)
--  UNION ALL
--select       ''Investments'' as Group1,
--                pkgfixeddepositproject.fncgetisinname(mdel_user_reference,mdel_transaction_type) as SchemeCode,
--                --pkgreturncursor.fncgetdescription(MDEL_BORROW_INVEST,2) as schemeCategory,
--              ''Treasury Bill'' as schemeCategory,
--                pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE,2)  as Comapny,
--                pkgreturncursor.fncgetdescription(MDEL_COUNTER_PARTY,2) as BankName,
--                pkgreturncursor.fncgetdescription(MDEL_LOCAL_BANK,2) as AccountNo,
--                pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE,2) as Currency,
--               round( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate),0)  as PrincipalAmount,
--                MDEL_INTEREST_RATE as PreTaxYeild,
--                round((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500),0) as PreTaxReturn,
--                pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3)||''%'' as TaxRate,
--                round((MDEL_INTEREST_RATE-((MDEL_INTEREST_RATE*pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3))/100)),2) as PostTaxYeild,
--                round(((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500)-
--
--                  (((( ( MDEL_DEAL_AMOUNT - (select nvl(sum(REDM_DEAL_AMOUNT),0) from trtran043
--                                where REDM_DEAL_NUMBER=MDEL_DEAL_NUMBER
--                                and   REDM_record_status BETWEEN 10200001 AND 10200004
--                                and REDM_CLOSURE_DATE<=frmdate)))*MDEL_INTEREST_RATE/36500)*pkgsapinterface.fncgetcompanycode(MDEL_COMPANY_CODE,3))/100)),0) as PostTaxReturn,
--                MDEL_DUE_DATE as MaturityDate,
--                null as PrevMarketValue,
--                pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE,2) Company1,
--            frmdate As Todate
--          from trtran031
--          where  MDEL_COMPANY_CODE=NUMSELCTEDCOMPANY
--          AND MDEL_VALUE_DATE<=frmdate
--                      and (nvl( MDEL_PROCESS_COMPLETE,12400002)=12400002 or
--                              nvl(MDEL_COMPLETE_DATE,MDEL_VALUE_DATE) > frmdate )
--          AND MDEL_TRANSACTION_TYPE=28100053
--          and mdel_record_status not in (10200005,10200006)';
--  Query_Str2:='UNION All
--       select ''Investments'' as Group1,
--               pkgreturncursor.fncgetdescription(mftr_scheme_code,1) as SchemeCode,pkgreturncursor.fncgetdescription(MFSC_SCHEME_CATEGORY,1) as schemeCategory,
--               pkgreturncursor.fncgetdescription(mftr_company_code,2)  as Comapny,
--               pkgreturncursor.fncgetdescription(mftr_scheme_code,1)as BankName,
--               '''' as AccountNo,
--               ''INR'' as Currency,
--             -- pkgForexProcess.fncGetOutstanding(mfsc_nav_code,0,20,1,datWorkDate) "Balance_Units",
--           -- pkgForexProcess.fncGetOutstanding(MFTR_NAV_CODE,0,20,2,frmdate) as PrincipalAmount
--             round( ( pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,2) *
--                pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)),0) as PrincipalAmount,
--
--
--              round(((( pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,2) *
--                         pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)) -
--                  (pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4) *
--                  pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY))
--              ) * 365*100/(pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,5)*decode(pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY),0 ,1,
--              pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)*pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4)))),2) as PreTaxYeild,
--              ---previus market value or previus principal
--
--              round(((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,2) *
--                      pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)) -
--               (pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4)    *
--                 pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)))/pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,5),0) as PreTaxReturn,
--              pkgsapinterface.fncgetcompanycode(MFTR_COMPANY_CODE,3)||''%'' as TaxRate,
--              round(((((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,2) *
--                                pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)) -
--
--               (pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4) *
--                pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY))
--              ) * 365*100/(pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,5)* decode(pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY),0,1,
--              pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)*pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4))))/1.3399),2) as PostTaxYeild,
--                ---previus market value or previus principal
--              round(((((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,2) *
--                       pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)) -
--               (pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4) *
--                pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)) )/pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,5))/1.3399),0) as PostTaxReturn,
--              null as MaturityDate ,
--               round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,4)    *
--                      pkgForexProcess.fncGetOutstanding(MFTr_reference_number,1,20,1,frmdate,NUMSELCTEDCOMPANY)),2) as PrevMarketValue,
--              pkgreturncursor.fncgetdescription(mftr_company_code,2) Company1,
--              frmdate As Todate
--        from trtran048 ,trmaster404
--        where mftr_company_code=NUMSELCTEDCOMPANY
--        AND mfsc_scheme_code=mftr_scheme_code
--         and mftr_REFERENCE_DATE<=frmdate
--         and mftr_transaction_date<=frmdate
--         and (mftr_process_complete=14200002 or mftr_complete_date is null or mftr_complete_date >=frmdate) ---ADDED IN TRAIN
--         and mftr_record_status not in (10200005,10200006)';
--    Query_Str3:='UNION ALL
--     select  ''Nodal Account'' as Group1,
--              '''' as SchemeCode,
--              '''' as schemeCategory,
--            -- '' as schemeCategory,
--              pkgreturncursor.fncgetdescription(NUMSELCTEDCOMPANY,2) Comapny,
--               '''' BankName,  
--              '''' as AccountNo,
--             '''' as Currency,
--           -- sum(
--            0 PrincipalAmount,
--           -- round(LBBL_BALANCE,0) PrincipalAmount,
--            null as PreTaxYeild,
--            null as PreTaxReturn,
--            null as TaxRate,
--            null as PostTaxYeild,
--            null as PostTaxReturn,
--            null as MaturityDate,
--            null as PrevMarketValue,
--            pkgreturncursor.fncgetdescription(NUMSELCTEDCOMPANY,2) Company1,
--                frmdate As Todate
--            
--     from  dual 
--   union all
--     select  ''Nodal Account'' as Group1,
--          '''' as SchemeCode,
--           --decode(pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1),''NO BANKS'',''CASH BALANCE'',pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1)) as schemeCategory,
--         '''' as schemeCategory,
--          pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) Comapny,
--           decode(pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1),''NO BANKS'',''CASH BALANCE'',pkgreturncursor.fncgetdescription(LBBL_BANK_CODE,1)) BankName,  
--          LBBL_ACCOUNT_NUMBER as AccountNo,
--          pkgreturncursor.fncgetdescription(30400003,2) as Currency,
--       -- sum(
--        round(decode(LBBL_CRDR_ACC ,14600001,LBBL_BALANCE,-1*LBBL_BALANCE),0) PrincipalAmount,
--       --round(LBBL_BALANCE,0) PrincipalAmount,
--        null as PreTaxYeild,
--        null as PreTaxReturn,
--        null as TaxRate,
--        null as PostTaxYeild,
--        null as PostTaxReturn,
--        LBBL_EFFECTIVE_DATE as MaturityDate,
--        null as PrevMarketValue,
--        pkgreturncursor.fncgetdescription(LBBL_COMPANY_CODE,2) Company1,
--        frmdate As Todate
--        
-- from  trmaster306A 
--   WHERE LBBL_COMPANY_CODE=NUMSELCTEDCOMPANY
--   AND LBBL_EFFECTIVE_DATE = frmdate
--   AND   LBBL_BANK_CODE=30600002 
--   AND LBBL_RECORD_STATUS=10200003';
--  Query_Str4:=' union all
--     select    ''Investments'' as Group1,       
--                 pkgreturncursor.fncgetdescription(BPUR_SCHEME_CODE,1) as SchemeCode,               
--                 ''Bond'' as schemeCategory, 
--                pkgreturncursor.fncgetdescription(BPUR_COMPANY_CODE,2)  as Comapny,
--                
--                pkgreturncursor.fncgetdescription(BPUR_COUNTER_PARTY,2) as BankName,
--               '' as AccountNo,
--                pkgreturncursor.fncgetdescription(BPUR_CURRENCY_CODE,2) as Currency,
--               round(( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033 
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and  BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and  BRED_SETTLEMENT_DATE<=frmDate)),2)  as PrincipalAmount,
--                BPUR_COUPON_RATE as PreTaxYeild,
--                round((( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and   BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and BRED_SETTLEMENT_DATE<=frmDate))*BPUR_COUPON_RATE/36500),2) PreTaxReturn,
--                pkgsapinterface.fncgetcompanycode(BPUR_COMPANY_CODE,3)||''%'' as TaxRate,
--                round((BPUR_COUPON_RATE-((BPUR_COUPON_RATE*pkgsapinterface.fncgetcompanycode(BPUR_COMPANY_CODE,3))/100)),2) as PostTaxYeild,
--                round(((( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and   BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and BRED_SETTLEMENT_DATE<=frmDate))*BPUR_COUPON_RATE/36500) -
--                        ((( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and   BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and BRED_SETTLEMENT_DATE<=frmDate))*BPUR_COUPON_RATE/36500)*pkgsapinterface.fncgetcompanycode(BPUR_COMPANY_CODE,3)/100)),2) as PostTaxReturn,
--                BPUR_MATURITY_DATE as MaturityDate,
--                null as PrevMarketValue,
--                ''Consolidated Position of all Group Companies'' Company1,
--            frmDate As Todate
--          from trtran032
--          where BPUR_COMPANY_CODE=NUMSELCTEDCOMPANY
--           AND BPUR_VALUE_DATE<=frmDate
--                      and (nvl( BPUR_PROCESS_COMPLETE,12400002)=12400002 or
--                              nvl(BPUR_COMPLETE_DATE,BPUR_VALUE_DATE) > frmDate )
--          AND BPUR_DEAL_TYPE=43900001
--          and BPUR_record_status not in (10200005,10200006)
--UNION ALL
--select      ''Investments'' as Group1,   
--               pkgreturncursor.fncgetdescription(BPUR_SCHEME_CODE,1) as SchemeCode,               
--                 ''Debenture''  as schemeCategory, 
--                pkgreturncursor.fncgetdescription(BPUR_COMPANY_CODE,2)  as Comapny,
--                
--                pkgreturncursor.fncgetdescription(BPUR_COUNTER_PARTY,2) as BankName,
--                '''' as AccountNo,
--                pkgreturncursor.fncgetdescription(BPUR_CURRENCY_CODE,2) as Currency,
--                round(( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033 
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and  BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and  BRED_SETTLEMENT_DATE<=frmDate)),2)  as PrincipalAmount,
--                BPUR_COUPON_RATE as PreTaxYeild,
--                round((( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and   BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and BRED_SETTLEMENT_DATE<=frmDate))*BPUR_COUPON_RATE/36500),2) PreTaxReturn,
--               pkgsapinterface.fncgetcompanycode(BPUR_COMPANY_CODE,3)|| ''%'' as TaxRate,
--                round((BPUR_COUPON_RATE-((BPUR_COUPON_RATE*pkgsapinterface.fncgetcompanycode(BPUR_COMPANY_CODE,3))/100)),2) as PostTaxYeild,
--                round(((( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and   BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and BRED_SETTLEMENT_DATE<=frmDate))*BPUR_COUPON_RATE/36500) -
--                        ((( BPUR_DEAL_AMOUNT - (select nvl(sum(BRED_DEAL_AMOUNT),0) from trtran033
--                                where BPUR_DEAL_NUMBER=BRED_DEAL_NUMBER
--                                and   BRED_RECORD_STATUS BETWEEN 10200001 AND 10200004
--                                and BRED_SETTLEMENT_DATE<=frmDate))*BPUR_COUPON_RATE/36500)*pkgsapinterface.fncgetcompanycode(BPUR_COMPANY_CODE,3)/100)),2) as PostTaxReturn,
--                BPUR_MATURITY_DATE as MaturityDate,
--                null as PrevMarketValue,
--                ''Consolidated Position of all Group Companies'' Company1,
--            frmDate As Todate
--          from trtran032
--          where BPUR_COMPANY_CODE=NUMSELCTEDCOMPANY
--            and BPUR_VALUE_DATE<=frmDate
--                      and (nvl( BPUR_PROCESS_COMPLETE,12400002)=12400002 or
--                              nvl(BPUR_COMPLETE_DATE,BPUR_VALUE_DATE) > frmDate )
--          AND BPUR_DEAL_TYPE=43900002
--          and BPUR_record_status not in (10200005,10200006)
--
--          order by 6';
--      delete from temp;commit;
--      insert into temp values (Query_Str,Query_Str1);commit;
--      insert into temp values (Query_Str2,Query_Str3);commit;
--            Open GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4;
--        Goto Process_End;   
--end if;   
-----aakash 03 Apr 13 4:44 pm
--If Varreportid = 'TREASURYNUMBER' Or Varreportid = 'TREASURYNUMBERSUMMARY' Then
--
--  numRecordSets:=2;
--  Select Fncuserpnlpopulate(Frmdate,Varuserid)
--  into numRecords from dual;
--
--   select max( HDAY_CALENDAR_DATE) into dattemp
--  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
--   And Hday_Day_Status Not In (26400007,26400008,26400009);
-- --    delete from temp;commit;
-- --         Insert Into Temp Values ('Chandra1',finalcondition);Commit;
--Query_Str :='
--        select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
--               sum(nvl(FURDTD/1000,0)) as FURDTD,
--               sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
--               sum(nvl(OPTMTD/1000,0)) as OPTMTD,
--               sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--               sum(nvl(OPTMTM,0)) as OPTMTM,
--               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--                to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--               (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(optmtm,0))
--               from trsystem983 a
--               where ason_date= '||''''||dattemp||''''||'
--               and a.userid=b.userid
--               and a.Deal_type=b.Deal_type) PreviousDayPnL,
--                pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
--                pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
--                 ' || varGroupField || '
--
--  from trsystem983 b
--  where ason_date='||''''||frmDate||''''||'
--    --and userid not in (''RBIPL'')
--     '||finalcondition||'
--  group by  COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
--  order by 1,3 desc ';
--     Delete From Temp;Commit;
--          Insert Into Temp Values (Query_Str,'G');Commit;
--  OPEN GenCursor for Query_Str;
--  if Varreportid = 'TREASURYNUMBERSUMMARY' Then
--  Query_str :='
--        select USERID,ASON_DATE ASONDATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               sum(nvl(FRWYTD,0)) as FRWYTD,
--               sum(nvl(FURYTD,0)) as FURYTD,
--               sum(nvl(OPTYTD,0)) as OPTYTD,
--               SUM(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)) REALIZEDPL,
--               sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--               sum(nvl(OPTMTM,0)) as OPTMTM,
--               SUM(nvl(FRWMTM,0)+nvl(FURMTM,0)+nvl(OPTMTM,0)) MTMPL,
--               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--                to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                 pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                 substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1
--
--               from trsystem983 b
--                 where ason_date in (select * from
--                (Select Distinct Ason_Date From Trsystem983
--                where ason_date <='||''''||frmDate||''''||'
--                Order By Ason_Date desc)
--                where rownum<=5 )
--                and hedgetrade= 26000002
--                group by  USERID,ASON_DATE,Deal_type,hedgetrade
--                order by 1,3 desc ';
--                delete from temp;commit;
--         Insert Into Temp Values (Query_Str,finalcondition);Commit;
--   OPEN nextCursor for Query_Str;
-- Goto Process_End;
-- end if;
--     If Varreportid = 'TREASURYNUMBER' then
--       Query_str :='
--            select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--                   sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
--                   sum(nvl(FURDTD/1000,0)) as FURDTD,
--                   sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
--                   sum(nvl(OPTMTD/1000,0)) as OPTMTD,
--                   sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--                   sum(nvl(OPTMTM,0)) as OPTMTM,
--                   pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--                   TO_DATE('||''''||frmDate||''''||') as FromDate,
--                    to_date('||''''||toDate||''''||') as ToDate,
--                   pkgreturnreport.GetSystemDate() as SystemDate,
--                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(optmtm,0))
--                   from trsystem983 a
--                   where ason_date= '||''''||dattemp||''''||'
--                   and a.userid=b.userid
--                   and a.Deal_type=b.Deal_type) PreviousDayPnL,
--                  pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                  substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
--                   pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
--                 ' || varGroupField || '
--
--
--      from trsystem983 b
--      where-- ason_date='||''''||frmDate||''''||'
--          hedgetrade= 26000002
--        '||finalcondition||'
--      group by COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
--      order by 1,3 desc ';               delete from temp;commit;
--      Insert Into Temp Values (Query_Str,'chandra');Commit;
--       OPEN nextCursor for Query_Str;
--      Goto Process_End;
--     end if;
-- End If;

----------------------------------------------------------
--updated by gouri as on 07052013
----------------------------------------------------------
--------commented by aakash/gouri 10-jun-13 04:55 pm
--If Varreportid = 'TREASURYNUMBER' Or Varreportid = 'TREASURYNUMBERSUMMARY' Then
--
--  numRecordSets:=2;
--  Select Fncuserpnlpopulate(Frmdate,Varuserid)
--  into numRecords from dual;
--
--   select max( HDAY_CALENDAR_DATE) into dattemp
--  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
--   And Hday_Day_Status Not In (26400007,26400008,26400009);
-- --    delete from temp;commit;
-- --         Insert Into Temp Values ('Chandra1',finalcondition);Commit;
--Query_Str :='
--        select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
--               sum(nvl(FURDTD/1000,0)) as FURDTD,
--               sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
--               sum(nvl(OPTMTD/1000,0)) as OPTMTD,
--               sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--               sum(nvl(OPTMTM,0)) as OPTMTM,
--               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--                to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--               (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(optmtm,0))
--               from trsystem983 a
--               where ason_date= '||''''||dattemp||''''||'
--               and a.userid=b.userid
--               and a.Deal_type=b.Deal_type) PreviousDayPnL,
--                pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
--                pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
--                 ' || varGroupField || '
--
--  from trsystem983 b
--  where ason_date='||''''||frmDate||''''||'
--    --and userid not in (''RBIPL'')
--     '||finalcondition||'
--  group by  COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
--  order by 1,3 desc ';
--     Delete From Temp;Commit;
--          Insert Into Temp Values (Query_Str,'G');Commit;
--  OPEN GenCursor for Query_Str;
--  if Varreportid = 'TREASURYNUMBERSUMMARY' Then
--  Query_str :='
--        select USERID,ASON_DATE ASONDATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               sum(nvl(FRWYTD,0)) as FRWYTD,
--               sum(nvl(FURYTD,0)) as FURYTD,
--               sum(nvl(OPTYTD,0)) as OPTYTD,
--               SUM(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)) REALIZEDPL,
--               sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--               sum(nvl(OPTMTM,0)) as OPTMTM,
--               SUM(nvl(FRWMTM,0)+nvl(FURMTM,0)+nvl(OPTMTM,0)) MTMPL,
--               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--                to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                 pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                 substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1
--
--               from trsystem983 b
--                 where ason_date in (select * from
--                (Select Distinct Ason_Date From Trsystem983
--                where ason_date <='||''''||frmDate||''''||'
--                Order By Ason_Date desc)
--                where rownum<=5 )
--                and hedgetrade= 26000002
--                group by  USERID,ASON_DATE,Deal_type,hedgetrade
--                order by 1,3 desc ';
--                delete from temp;commit;
--         Insert Into Temp Values (Query_Str,finalcondition);Commit;
--   OPEN nextCursor for Query_Str;
-- Goto Process_End;
-- end if;
--     If Varreportid = 'TREASURYNUMBER' then
--       Query_str :='
--            select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--                   sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
--                   sum(nvl(FURDTD/1000,0)) as FURDTD,
--                   sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
--                   sum(nvl(OPTMTD/1000,0)) as OPTMTD,
--                   sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--                   sum(nvl(OPTMTM,0)) as OPTMTM,
--                   pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--                   TO_DATE('||''''||frmDate||''''||') as FromDate,
--                    to_date('||''''||toDate||''''||') as ToDate,
--                   pkgreturnreport.GetSystemDate() as SystemDate,
--                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(optmtm,0))
--                   from trsystem983 a
--                   where ason_date= '||''''||dattemp||''''||'
--                   and a.userid=b.userid
--                   and a.Deal_type=b.Deal_type) PreviousDayPnL,
--                  pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                  substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
--                   pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
--                 ' || varGroupField || '
--
--
--      from trsystem983 b
--      where-- ason_date='||''''||frmDate||''''||'
--          hedgetrade= 26000002
--        '||finalcondition||'
--      group by COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
--      order by 1,3 desc ';               delete from temp;commit;
--      Insert Into Temp Values (Query_Str,'chandra');Commit;
--       OPEN nextCursor for Query_Str;
--      Goto Process_End;
--     end if;
-- End If;

----updated by aakash/gouri 10-jun-13 04"56 pm
--If Varreportid = 'TREASURYNUMBER' Or Varreportid = 'TREASURYNUMBERSUMMARY' Then
--
--  numRecordSets:=2;
--  Select Fncuserpnlpopulate(Frmdate,Varuserid)
--  into numRecords from dual;
--
--   select max( HDAY_CALENDAR_DATE) into dattemp
--  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
--   And Hday_Day_Status Not In (26400007,26400008,26400009);
-- --    delete from temp;commit;
-- --         Insert Into Temp Values ('Chandra1',finalcondition);Commit;
--Query_Str :='
--        select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
--               sum(nvl(FURDTD/1000,0)) as FURDTD,
--               sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
--               sum(nvl(OPTMTD/1000,0)) as OPTMTD,
--               sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--               sum(nvl(OPTMTM,0)) as OPTMTM,
--               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--                to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--               pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--               (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(OPTMTM,0))
--               from trsystem983 a
--               where ason_date= '||''''||dattemp||''''||'
--               and a.userid=b.userid
--               and a.Deal_type=b.Deal_type
--               and a.Hedgetrade=b.Hedgetrade
--               and a.Companycode=b.Companycode
--               and a.Trader=b.Trader) PreviousDayPnL,
--                pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
--                pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
--                 ' || varGroupField || '
--
--  from trsystem983 b
--  where ason_date='||''''||frmDate||''''||'
--    --and userid not in (''RBIPL'')
--     '||finalcondition||'
--  group by  COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
--  order by 1,3 desc ';
--     Delete From Temp;Commit;
--          Insert Into Temp Values (Query_Str,'G');Commit;
--  OPEN GenCursor for Query_Str;
--  if Varreportid = 'TREASURYNUMBERSUMMARY' Then
--  Query_str :='
--        select USERID,ASON_DATE ASONDATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               sum(nvl(FRWYTD,0)) as FRWYTD,
--               sum(nvl(FURYTD,0)) as FURYTD,
--               sum(nvl(OPTYTD,0)) as OPTYTD,
--               SUM(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)) REALIZEDPL,
--               sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--               sum(nvl(OPTMTM,0)) as OPTMTM,
--               SUM(nvl(FRWMTM,0)+nvl(FURMTM,0)+nvl(OPTMTM,0)) MTMPL,
--               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--                to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnreport.GetSystemDate() as SystemDate,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                 pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                 substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1
--
--               from trsystem983 b
--                 where ason_date in (select * from
--                (Select Distinct Ason_Date From Trsystem983
--                where ason_date <='||''''||frmDate||''''||'
--                Order By Ason_Date desc)
--                where rownum<=5 )
--                and hedgetrade= 26000002
--                group by  USERID,ASON_DATE,Deal_type,hedgetrade
--                order by 1,3 desc ';
--                delete from temp;commit;
--         Insert Into Temp Values (Query_Str,finalcondition);Commit;
--   OPEN nextCursor for Query_Str;
-- Goto Process_End;
-- end if;
--     If Varreportid = 'TREASURYNUMBER' then
--       Query_str :='
--            select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--                   sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
--                   sum(nvl(FURDTD/1000,0)) as FURDTD,
--                   sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
--                   sum(nvl(OPTMTD/1000,0)) as OPTMTD,
--                   sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
--                   sum(nvl(OPTMTM,0)) as OPTMTM,
--                   pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
--                   TO_DATE('||''''||frmDate||''''||') as FromDate,
--                    to_date('||''''||toDate||''''||') as ToDate,
--                   pkgreturnreport.GetSystemDate() as SystemDate,
--                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--                   (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(optmtm,0))
--                   from trsystem983 a
--                   where ason_date= '||''''||dattemp||''''||'
--                    and a.userid=b.userid
--                   and a.Deal_type=b.Deal_type
--                   and a.Hedgetrade=b.Hedgetrade
--                  and a.Companycode=b.Companycode
--                  and a.Trader=b.Trader) PreviousDayPnL,
--                  pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
--                  substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
--                   pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
--                 ' || varGroupField || '
--
--
--      from trsystem983 b
--      where-- ason_date='||''''||frmDate||''''||'
--          hedgetrade= 26000002
--        '||finalcondition||'
--      group by COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
--      order by 1,3 desc ';               delete from temp;commit;
--      Insert Into Temp Values (Query_Str,'chandra');Commit;
--       OPEN nextCursor for Query_Str;
--      Goto Process_End;
--     end if;
-- End If;
-----------UPDATED 22-JULY-13 05:40 PM
If Varreportid = 'TREASURYNUMBER' Or Varreportid = 'TREASURYNUMBERSUMMARY' OR Varreportid ='TREASURYNUMBERMTM' Then

  NUMRECORDSETS:=2;
  if Varreportid ='TREASURYNUMBERMTM' Then
  Select Fncuserpnlpopulate(Frmdate,Varuserid,'Y')
  INTO NUMRECORDS FROM DUAL;
 ELSE
  SELECT FNCUSERPNLPOPULATE(FRMDATE,VARUSERID,'N')
  INTO NUMRECORDS FROM DUAL;
  end if;

   SELECT MAX( HDAY_CALENDAR_DATE) INTO DATTEMP
  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
   And Hday_Day_Status Not In (26400007,26400008,26400009);
 --    delete from temp;commit;
 --         Insert Into Temp Values ('Chandra1',finalcondition);Commit;
Query_Str :='
        select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
               sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
               sum(nvl(FURDTD/1000,0)) as FURDTD,
               sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
               sum(nvl(OPTMTD/1000,0)) as OPTMTD,
               sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
               sum(nvl(OPTMTM,0)) as OPTMTM,
               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
                to_date('||''''||toDate||''''||') as ToDate,
               pkgreturnreport.GetSystemDate() as SystemDate,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
               pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(OPTMTM,0))
               from trsystem983 a
               where ason_date= '||''''||dattemp||''''||'
               and a.userid=b.userid
               and a.Deal_type=b.Deal_type
               and a.Hedgetrade=b.Hedgetrade
               and a.Companycode=b.Companycode
               and a.Trader=b.Trader) PreviousDayPnL,
                pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
                substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
                pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
                 ' || varGroupField || '

  from trsystem983 b
  where ason_date='||''''||frmDate||''''||'
    --and userid not in (''RBIPL'')
     '||finalcondition||'
  group by  COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
  order by 1,3 desc ';
     Delete From Temp;Commit;
          Insert Into Temp Values (Query_Str,'G');Commit;
  OPEN GenCursor for Query_Str;
  if Varreportid = 'TREASURYNUMBERSUMMARY' Then
  Query_str :='
        select USERID,ASON_DATE ASONDATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
               sum(nvl(FRWYTD,0)) as FRWYTD,
               sum(nvl(FURYTD,0)) as FURYTD,
               sum(nvl(OPTYTD,0)) as OPTYTD,
               SUM(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)) REALIZEDPL,
               sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
               sum(nvl(OPTMTM,0)) as OPTMTM,
               SUM(nvl(FRWMTM,0)+nvl(FURMTM,0)+nvl(OPTMTM,0)) MTMPL,
               pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
                to_date('||''''||toDate||''''||') as ToDate,
               pkgreturnreport.GetSystemDate() as SystemDate,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                 pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
                 substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1

               from trsystem983 b
                 where ason_date in (select * from
                (Select Distinct Ason_Date From Trsystem983
                where ason_date <='||''''||frmDate||''''||'
                Order By Ason_Date desc)
                where rownum<=5 )
                and hedgetrade= 26000002
                group by  USERID,ASON_DATE,Deal_type,hedgetrade
                order by 1,3 desc ';
                delete from temp;commit;
         Insert Into Temp Values (Query_Str,finalcondition);Commit;
   OPEN nextCursor for Query_Str;
 Goto Process_End;
 END IF;
     If Varreportid = 'TREASURYNUMBER' OR Varreportid ='TREASURYNUMBERMTM' then
       Query_str :='
            select USERID,ASON_DATE,pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
                   sum(nvl(FRWDTD/1000,0)) as FRWDTD,sum(nvl(FRWMTD/1000,0)) as FRWMTD,sum(nvl(FRWYTD,0)) as FRWYTD,
                   sum(nvl(FURDTD/1000,0)) as FURDTD,
                   sum(nvl(FURMTD/1000,0)) as FURMTD, sum(nvl(FURYTD,0)) as FURYTD,sum(nvl(OPTDTD/1000,0)) as OPTDTD,
                   sum(nvl(OPTMTD/1000,0)) as OPTMTD,
                   sum(nvl(OPTYTD,0)) as OPTYTD,sum(nvl(FRWMTM,0)) as FRWMTM, sum(nvl(FURMTM,0)) as FURMTM,
                   sum(nvl(OPTMTM,0)) as OPTMTM,
                   pkgreturncursor.fncgetdescription(Deal_type,2) as DealType,
                   TO_DATE('||''''||frmDate||''''||') as FromDate,
                    to_date('||''''||toDate||''''||') as ToDate,
                   pkgreturnreport.GetSystemDate() as SystemDate,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                   (select sum(nvl(FRWYTD,0)+nvl(FURYTD,0)+nvl(OPTYTD,0)+nvl(FRWMTM,0)+nvl(furmtm,0)+nvl(optmtm,0))
                   from trsystem983 a
                   where ason_date= '||''''||dattemp||''''||'
                    and a.userid=b.userid
                   and a.Deal_type=b.Deal_type
                   and a.Hedgetrade=b.Hedgetrade
                  and a.Companycode=b.Companycode
                  and a.Trader=b.Trader) PreviousDayPnL,
                  pkgreturncursor.fncgetdescription(HEDGETRADE,2) as  HedgeTrade,
                  substr(Pkgreturncursor.Fncgetdescription(Hedgetrade,2),1,1) As  Hedgetrade1,
                   pkgreturncursor.fncgetdescription(COMPANYCODE,2) Company,Trader
                 ' || varGroupField || '

      from trsystem983 b
      where-- ason_date='||''''||frmDate||''''||'
          hedgetrade= 26000002
        '||finalcondition||'
      group by COMPANYCODE,hedgetrade,Deal_type, USERID,ASON_DATE,Trader
      order by 1,3 desc '; 
       OPEN nextCursor for Query_Str;
      Goto Process_End;
     END IF;
 END IF;

---end

--------OROGINAL
--   if varReportID ='WEEKLYFUNDINGREPORT' then
--  delete from trsystem978;commit;
--  insert into trsystem978 values(toDate);commit;
--  Query_str :='select
--              pkgreturncursor.fncgetdescription(COMPANYCODE,2) as Company,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--             BANKNAME as Bank,
--              maturity AS Creditdate,
--              sum(nvl(pandlfcy,0)) RealizedPL,
--                    BUYSELL AS BUYSELL,
--               sum(nvl(MTMPANDL,0)) as MtmPL,
--               sum(nvl(MTMPANDLINR,0))PlInr,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--               to_date('||''''||toDate||''''||') as ToDate,
--               pkgreturnReport.getCompanyNameFooter() as CompanyFooter
--              from VewForwardfuture
--              where
--              --status =12400002 and
--             -- maturity between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
--              Status not in (10200005,10200006)
--              '||finalcondition||'
--              group by maturity,BANKNAME,BUYSELL,COMPANYCODE,CompanyName
--              order by Creditdate';
--
--    delete from temp;commit;
--    insert into temp values(Query_Str,Query_Str1);commit;
--
--    OPEN GenCursor for Query_Str||Query_Str1;
--    Goto Process_End;
--  End If;

--UPDATED AAKASH/GOURI 16-MAY-13 05:19 PM
----commented on 04-oct-13
--  if varReportID ='WEEKLYFUNDINGREPORT11' then
--  Delete From Trsystem978 ;Commit;
--  Insert Into Trsystem978 Values(Todate);Commit;
--
--        Select Max( Drat_Effective_Date) Into Dattemp
--         From trtran012
--         where Drat_Effective_Date <= Todate;
--
--  Query_str :=' With Tabmtm As
--                (select  Pkgforexprocess.fncgetprofitloss(pkgForexProcess.fncGetOutStanding(deal_deal_number, deal_serial_number,
--                 1, 1, '||''''||Dattemp||''''||'), pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency,
--                '||''''||Dattemp||''''||',Deal_Buy_Sell, Pkgforexprocess.Fncallotmonth(Deal_Counter_Party,'||''''||Dattemp||''''||', Deal_Maturity_Date),
--                 Deal_Maturity_Date),Deal_Exchange_Rate,Deal_Buy_Sell ) As MtmPL,
--                  Pkgforexprocess.fncgetprofitloss(pkgForexProcess.fncGetOutStanding(deal_deal_number, deal_serial_number,
--                 1, 1, '||''''||Dattemp||''''||'), pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency,
--                '||''''||Dattemp||''''||',Deal_Buy_Sell, Pkgforexprocess.Fncallotmonth(Deal_Counter_Party,'||''''||Dattemp||''''||', Deal_Maturity_Date),
--                 Deal_Maturity_Date),Deal_Exchange_Rate,Deal_Buy_Sell )*decode(deal_other_currency, 30400003,1,
--                pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'||''''||Dattemp||''''||',deal_buy_sell,
--                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||Dattemp||''''||', deal_maturity_date),deal_maturity_date)) as PlInr,
--                deal_deal_number as DealNumber
--            From Trtran001
--            Where Deal_Record_Status Not In (10200005,10200006)
--           -- and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > '||''''||frmDate||''''||' )or DEAL_PROCESS_COMPLETE = 12400002)
--              and Deal_Maturity_Date between '||''''||frmDate||''''||' And '||''''||todate||''''||')';
--
---- Union
----               Select Pkgforexprocess.Fncgetprofitloss(  Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 1, 14, 1, Fncasondate())*1000,
----               Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,
----               Cfut_Other_Currency,'||''''||Dattemp||''''||'), Cfut_Exchange_Rate,Cfut_Buy_Sell ) As MtmPL,
----               Pkgforexprocess.Fncgetprofitloss(  Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 1, 14, 1, Fncasondate())*1000,
----               Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,
----               Cfut_Other_Currency,'||''''||Dattemp||''''||'), Cfut_Exchange_Rate,Cfut_Buy_Sell )*Decode(Cfut_Other_Currency, 30400003,1,
----               Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,CFUT_OTHER_CURRENCY,'||''''||Dattemp||''''||')) as PlInr,
----               cfut_deal_number as DealNumber
----            From Trtran061
----            Where Cfut_Record_Status Not In (10200005,10200006)
----            and cfut_Maturity_Date between '||''''||frmDate||''''||' And '||''''||todate||''''||')';
--Query_str1 :='Select   Pkgreturncursor.Fncgetdescription(Companycode,2) As Company,
--               pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||'  ) as CompanyName,
--               BANKNAME as Bank,
--               maturity AS Creditdate,sum(nvl(pandlfcy,0)) RealizedPL,Buysell As Buysell,
--              -- sum(nvl(MTMPANDL,0)) as MtmPL,-- sum(nvl(MTMPANDLINR,0))PlInr,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--               to_date('||''''||todate||''''||') as ToDate,
--               Pkgreturnreport.Getcompanynamefooter() As Companyfooter,sum(b.MtmPL) as MtmPL,sum(b.PlInr) as PlInr
--         From VEWREPORTForward A,Tabmtm B
--         where a.DealNumber=b.DealNumber
--          and  Status Not In (10200005,10200006)
--                '||finalcondition||'
--          Group By Maturity,Bankname,Buysell,Companycode,Companyname
--          Order By Creditdate';
--    delete from temp;commit;
--    insert into temp values(Query_Str,Query_Str1);commit;
--    OPEN GenCursor for Query_Str||Query_Str1;
--    Goto Process_End;
--  End If;
--

  ---modified on 04-oct-13
  if varReportID ='WEEKLYFUNDINGREPORT' then
  Delete From Trsystem978 ;Commit;
  Insert Into Trsystem978 Values(Todate);Commit;

        Select Max( Drat_Effective_Date) Into Dattemp
         From trtran012
         where Drat_Effective_Date <= Todate;

    Query_str:='select nvl((select sum(cdel_cancel_amount) from trtran006 where cdel_deal_number=a.deal_deal_number and cdel_record_status not in (10200005,10200006)),0) realized,
nvl((select sum(cdel_profit_loss) from trtran006 where cdel_deal_number=a.deal_deal_number and cdel_record_status not in (10200005,10200006)),0) RealizedPL,
(deal_base_amount-nvl((select sum(cdel_cancel_amount) from trtran006 where cdel_deal_number=a.deal_deal_number and cdel_record_status not in (10200005,10200006)),0)) outstanding,
/*Pkgforexprocess.fncgetprofitloss((deal_base_amount-nvl((select sum(cdel_cancel_amount) from trtran006 where cdel_deal_number=a.deal_deal_number and cdel_record_status not in (10200005,10200006)),0)),
                  pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency,
                '||''''||Dattemp||''''||',Deal_Buy_Sell, Pkgforexprocess.Fncallotmonth(Deal_Counter_Party,'||''''||Dattemp||''''||', Deal_Maturity_Date),
                 Deal_Maturity_Date),Deal_Exchange_Rate,Deal_Buy_Sell ) As MtmPL,*/
                  (Pkgforexprocess.fncgetprofitloss((deal_base_amount-nvl((select sum(cdel_cancel_amount) from trtran006 where cdel_deal_number=a.deal_deal_number and cdel_record_status not in (10200005,10200006)),0)), pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency,
                '||''''||Dattemp||''''||',Deal_Buy_Sell, Pkgforexprocess.Fncallotmonth(Deal_Counter_Party,'||''''||Dattemp||''''||', Deal_Maturity_Date),
                 Deal_Maturity_Date),Deal_Exchange_Rate,Deal_Buy_Sell )*decode(deal_other_currency, 30400003,1,
                pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'||''''||Dattemp||''''||',deal_buy_sell,
                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||Dattemp||''''||', deal_maturity_date),deal_maturity_date))) as MtmPL,
                deal_deal_number, deal_base_amount, pkgreturncursor.fncgetdescription(deal_counter_party,2) bank, deal_maturity_date as Creditdate,
                '||''''||frmDate||''''||' AS FromDate,
                '||''''||Todate||''''||' AS ToDate
                 from trtran001 a
                 where deal_maturity_date between '||''''||frmDate||''''||' and '||''''||Todate||''''||' AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) '||finalcondition||' order by deal_counter_party ' ;

    delete from temp;commit;
    insert into temp values(Query_Str,'');commit;
    OPEN GenCursor for Query_Str;
    Goto Process_End;
  End If;
-----END

IF varReportID ='CANCELATIONAUDITTRAIALTRDDEAL'  THEN
--Open Gencursor For

  Query_Str:=' select * from
 (
 Select Cdel_Deal_Number As Dealnumber,Cdel_Cancel_Date As Canceldate,'||''''||'Forward'||''''||' As Dealtype,
                      Pkgreturncursor.Fncgetdescription(Cdel_Cancel_Type,2)as Canceltype,
                      Cdel_Cancel_Amount As Baseamount,
                      Cdel_Profit_Loss As Profitloss,
                      extractValue(CDEL_ENTRY_DETAIL,'||''''||'AuditTrails/AuditTrail/UserName'||''''||') As Userid,
                      Cdel_Dealer_Remark As Dealerremarks,
                      Workdate as Executedate,Datestamp,Imagetype as Stage,
                      Cdel_Forward_Rate as Forwardrate,
                      Cdel_Spot_Rate as Spotrate,
                      Cdel_Margin_Rate As Marginrate,
                      Cdel_Cancel_Rate as Exchangerate,
                      '||''''||frmDate||''''||'  as FromDate,'||''''||toDate||''''||' as ToDate,
                      Sysdate As Workdate,Pkgreturnreport.Getsystemdate() As Systemdate,
                       Pkgreturnreport.Getcompanyname( '||''''||varUserID||''''||' ) As Companyname,
                       pkgreturnReport.getCompanyNameFooter() as CompanyFooter
                From Trsystem109
               Where Cdel_Record_Status Not In (10200005,10200001)
               And Workdate Between '||''''||Frmdate||''''||' And '||''''||Todate||''''||'';
Query_Str1:='union

               Select cfrv_Deal_Number As Dealnumber,CFRV_EXECUTE_DATE As Canceldate,'||''''||'Future'||''''||' As Dealtype,
                      '||''''||''||''''||' as Canceltype,
                      CFRV_CANCEL_AMOUNT As Baseamount,
                      Cfrv_Profit_Loss As Profitloss,
                      Extractvalue(Cfrv_Entry_Detail,'||''''||'AuditTrails/AuditTrail/UserName'||''''||') As Userid,
                      CFRV_DEALER_REMARKS As Dealerremarks,
                      Workdate as Executedate,Datestamp,Imagetype as Stage,
                      0 as Forwardrate,
                      0 As Spotrate,
                      0 as Marginrate,
                     CFRV_LOT_PRICE as Exchangerate,
                      '||''''||frmDate||''''||' as FromDate,'||''''||toDate||''''||' as ToDate,
                     sysdate as WorkDate,pkgreturnreport.GetSystemDate() as SystemDate,
                       Pkgreturnreport.Getcompanyname('||''''||varUserID||''''||' ) As Companyname,
                       pkgreturnReport.getCompanyNameFooter() as CompanyFooter
                From Trsystem106
               Where CFRV_RECORD_STATUS Not In (10200005,10200001)
              And Workdate Between '||''''||Frmdate||''''||' And '||''''||Todate||''''||'';
 Query_Str2:='union
                Select CORV_DEAL_NUMBER As Dealnumber,CORV_EXERCISE_DATE As Canceldate,'||''''||'Option'||''''||' As Dealtype,
                      Pkgreturncursor.Fncgetdescription(CORV_EXERCISE_TYPE,2)as Canceltype,
                      CORV_BASE_AMOUNT As Baseamount,
                      Corv_Profit_Loss As Profitloss,
                      extractValue(CORV_ENTRY_DETAIL,'||''''||'AuditTrails/AuditTrail/UserName'||''''||') As Userid,
                      CORV_DEALER_REMARKS As Dealerremarks,
                      Workdate as Executedate,Datestamp,Imagetype as Stage,
                      0 as Forwardrate,
                      0 as Spotrate,
                      0 as Marginrate,
                      CORV_RBI_REFRATE as Exchangerate,
                      '||''''||frmDate||''''||' as FromDate,'||''''||toDate||''''||' as ToDate,
                     sysdate as WorkDate,pkgreturnreport.GetSystemDate() as SystemDate,
                       pkgreturnreport.getCompanyName( '||''''||varUserID||''''||' ) as CompanyName,
                       pkgreturnReport.getCompanyNameFooter() as CompanyFooter
                      --  ' || varGroupField || '
                From Trsystem108
               Where Corv_Record_Status Not In (10200005,10200001)
              And Workdate Between '||''''||Frmdate||''''||' And '||''''||Todate||''''||')
              order by Dealnumber,Datestamp';
              delete from temp;commit;
              insert into temp values(Query_Str,Query_Str1);Commit;
              insert into temp values(Query_Str2,finalcondition);Commit;
              open gencursor for (Query_Str||Query_Str1||Query_Str2);
   Goto Process_End;
  End If;
----------added by Aakash/Ishwar 31-May-13 12:45 pm
if varReportID = 'STATMENTFOREXEXPOSURE' or varReportID = 'CONSOLIDATEFOREXEXPOSURE' then

Query_str :=  '  select CompanyCode, PaymentDate,ExtensionDueDate,TRAD_REFERENCE_DATE OpeningDate,
                  OpenBank,TradeCurrency,OutstandingAmt,TradeAmount,FwdLinkedAmount,FutLinkedAmount
                  TargetRate,MaturityMonth,OrderType,FromDate,ToDate,CompanyName,Manditory,Futureamount,TRAD_COMPANY_CODE from(';
Query_str1 :='    select
    pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,2)as CompanyCode,
    TRAD_MATURITY_FROM as PaymentDate,
    TRAD_MATURITY_FROM as ExtensionDueDate,
    TRAD_REFERENCE_DATE as TRAD_REFERENCE_DATE,
    pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2)as OpenBank,
    pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2)as TradeCurrency,
    Round(pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''')/1000000,4) as OutstandingAmt,
    Round(TRAD_TRADE_FCY / 1000000,4) as TradeAmount,
    nvl((Select sum(HEDG_HEDGED_FCY) from trtran001,trtran004
          where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE and
          HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and HEDG_HEDGING_WITH = 32200001and HEDG_RECORD_STATUS not in (10200012,10200005,10200006)),0)/1000000  as FwdLinkedAmount,
    nvl((Select sum(HEDG_HEDGED_FCY) from trtran001,trtran004
          where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE and
          HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and HEDG_HEDGING_WITH = 32200002 and HEDG_RECORD_STATUS not in (10200012,10200005,10200006)),0)/1000000  as FutLinkedAmount,
    0 as  TargetRate,
    to_char(TRAD_MATURITY_FROM,'||'''MON'''||')as MaturityMonth,
    pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1)as OrderType,
    '''||frmDate||''' as  FromDate ,
    '''||ToDate||'''  as ToDate,
    pkgreturnreport.getCompanyName('''||varUserID||''' ) as CompanyName,
    pkgreturncursor.fncgetdescription(TRAD_TERM,2)as Manditory,
    ((select nvl(sum(pkgforexprocess.fncGetOutstanding(CFUT_DEAL_NUMBER, 0,14, 1,'''||frmDate||''') *1000),0) as outstanding
            from trtran061 where Cfut_buy_sell = 25300001 and cfut_RECORD_STATUS not in(10200005,10200006,10200012) and
            ((cfut_PROCESS_COMPLETE = 12400001  and cfut_complete_date > '''||frmDate||''') or cfut_PROCESS_COMPLETE = 12400002)
             And  cfut_COMPANY_CODE In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = '''||varUserID||''' ) )
      -
      (select nvl(sum(pkgforexprocess.fncGetOutstanding(CFUT_DEAL_NUMBER, 0,14, 1,'''||frmDate||''') *1000),0) as outstanding
            from trtran061 where Cfut_buy_sell = 25300002 and cfut_RECORD_STATUS not in(10200005,10200006,10200012) and
            ((cfut_PROCESS_COMPLETE = 12400001  and cfut_complete_date > '''||frmDate||''') or cfut_PROCESS_COMPLETE = 12400002)
            And  cfut_COMPANY_CODE In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = '''||varUserID||''') ))/1000000 as Futureamount,
            TRAD_COMPANY_CODE,
            TRAD_RECORD_STATUS
   from trtran002 where TRAD_IMPORT_EXPORT in (25900017,25900053,25900052,25900073,25900077)
  and  TRAD_RECORD_STATUS not in(10200005,10200006,10200012) and
                        ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > '''||frmDate||''') or TRAD_PROCESS_COMPLETE = 12400002)
   And  TRAD_COMPANY_CODE In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = '''||varUserID||''' )
   UNION ';
   Query_Str2 :=  ' select
    pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE,2)as CompanyCode,
    BCRD_DUE_DATE as PaymentDate,
    BCRD_DUE_DATE as ExtensionDueDate,
    BCRD_SANCTION_DATE as TRAD_REFERENCE_DATE,
    pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK,2)as OpenBank,
    pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE,2)as TradeCurrency,
    (BCRD_SANCTIONED_FCY - (select nvl(sum(BREL_REVERSAL_FCY),0)
                                                from trtran003
                                               where brel_trade_reference= BCRD_BUYERS_CREDIT
                                                 and brel_record_status not in(10200005,10200006)))/1000000 as OutstandingAmt,
    Round(BCRD_SANCTIONED_FCY / 1000000,4) as TradeAmount,
    0 as FwdLinkedAmount,
    0 as FutLinkedAmount,
    0 as  TargetRate,
     to_char(BCRD_DUE_DATE,'||'''MON'''||')as MaturityMonth,
    pkgreturncursor.fncgetdescription(23600001,1)as OrderType,
    '''||frmDate||''' as  FromDate ,
    '''||ToDate||'''  as ToDate,
    pkgreturnreport.getCompanyName('''||varUserID||''' ) as CompanyName,
    pkgreturncursor.fncgetdescription(12400001,2)  as Manditory,
       ((select sum(pkgforexprocess.fncGetOutstanding(CFUT_DEAL_NUMBER, 0,14, 1,'''||frmDate||''') *1000) as outstanding
            from trtran061 where Cfut_buy_sell = 25300001 and cfut_RECORD_STATUS not in(10200005,10200006,10200012) and
            ((cfut_PROCESS_COMPLETE = 12400001  and cfut_complete_date > '''||frmDate||''') or cfut_PROCESS_COMPLETE = 12400002)
             And  cfut_COMPANY_CODE In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = '''||varUserID||''' ) )
      -
      (select sum(pkgforexprocess.fncGetOutstanding(CFUT_DEAL_NUMBER, 0,14, 1,'''||frmDate||''') *1000) as outstanding
            from trtran061 where Cfut_buy_sell = 25300002 and cfut_RECORD_STATUS not in(10200005,10200006,10200012) and
            ((cfut_PROCESS_COMPLETE = 12400001  and cfut_complete_date > '''||frmDate||''') or cfut_PROCESS_COMPLETE = 12400002)
            And  cfut_COMPANY_CODE In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = '''||varUserID||''') ))/1000000 as Futureamount,
            BCRD_COMPANY_CODE TRAD_COMPANY_CODE,
            BCRD_RECORD_STATUS TRAD_RECORD_STATUS
   from trtran045 where
  BCRD_RECORD_STATUS not in(10200005,10200006,10200012) and
                       ((BCRD_PROCESS_COMPLETE = 12400001  and BCRD_COMPLETION_DATE > '''||frmDate||''') or BCRD_PROCESS_COMPLETE = 12400002)
   And  BCRD_COMPANY_CODE In (Select Usco_Company_Code From Trsystem022a Where Usco_User_Id = '''||varUserID||''' ))where TRAD_RECORD_STATUS not in(10200005,10200006,10200012) '
    ;
  delete from temp;commit;
  insert into temp values(Query_Str,Query_Str1);commit;
  insert into temp values(Query_Str2,finalCondition);commit;
  OPEN GenCursor for Query_str ||Query_Str1 ||Query_Str2 ||finalCondition||'order by 2';
  Goto Process_End;
end if;

 if varReportID = 'REVIEWREPORT' then
OPEN GenCursor for
 select
    TRAD_MATURITY_FROM  ||' To '|| TRAD_MATURITY_DATE as Peroid,
    TRAD_TRADE_FCY Poamount,
    nvl((select sum(HEDG_HEDGED_FCY) from trtran004 where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE),0) CoverdAmt,
    TRAD_TRADE_RATE AcutalBookingRate,
    case when TRAD_IMPORT_EXPORT < 25900050 then
    ABS((nvl((select sum(HEDG_HEDGED_FCY) from trtran004 where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE),0) - (TRAD_TRADE_FCY - pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate))))
    When TRAD_IMPORT_EXPORT > 25900050 then
    Abs((pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) - nvl((select sum(HEDG_HEDGED_FCY) from trtran004 where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE),0)))
    end as OpenPosition,
    --ABS((nvl((select sum(HEDG_HEDGED_FCY) from trtran004 where HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE),0) - (TRAD_TRADE_FCY - pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate)))) OpenPosition,
    (TRAD_TRADE_FCY - pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate)) utilised,
    pkgreturnreport.getCompanyName(varUserID) as CompanyName,
    pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2)as Currency,
    to_char(frmDate,'dd-MM-yyyy') as  FromDate ,
    to_char(ToDate,'dd-MM-yyyy') as ToDate,
    case when TRAD_IMPORT_EXPORT < 25900050 then 'Export'
    when TRAD_IMPORT_EXPORT > 25900050 then 'Import' end as ImpExpDetails
 from trtran002  where TRAD_RECORD_STATUS not in(10200005,10200006,10200012) and
                        ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > frmDate) or TRAD_PROCESS_COMPLETE = 12400002) and
                        TRAD_MATURITY_DATE > frmDate;
Goto Process_End;
End If;
 if VARREPORTID= 'COSTINGOFCASHFLOW' then
   open GENCURSOR for
             select

                     PKGRETURNCURSOR.FNCGETDESCRIPTION(POSN_ACCOUNT_CODE,1) ACCCOUNTDESC ,
                     (case when POSN_ACCOUNT_CODE>25900050 then 'Imports'
                     else 'Exports' end)IMPEXP,
                     PKGRETURNCURSOR.FNCGETDESCRIPTION(POSN_CURRENCY_CODE,2) CURRENCY,
                     SUM(POSN_TRANSACTION_AMOUNT) BaseAmount,
                     ROUND(SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/SUM(POSN_TRANSACTION_AMOUNT),4) FCY_RATE,
                     0 ForwardPREMIMUM,
                     0 MARGIN,
                     ROUND(SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/SUM(POSN_TRANSACTION_AMOUNT),4) FINAL_RATE,
                     TO_CHAR(POSN_REFERENCE_DATE,'MM-YYYY') CONTRACTMONTH,
                     PKGRETURNCURSOR.FNCGETDESCRIPTION(POSN_COMPANY_CODE,1) as COMPANYNAME,
                     PKGRETURNREPORT.GETSYSTEMDATE() as SYSTEMDATE ,
                      frmDate as AsonDate,
                      TODATE as TODATE
              from   TRSYSTEM997
          group by  POSN_ACCOUNT_CODE,TO_CHAR(POSN_REFERENCE_DATE,'MM-YYYY'),POSN_CURRENCY_CODE,POSN_COMPANY_CODE
          order by  2,9;
   Goto Process_End;
  end if;

  ---- Modified by Abhijeet on 13-Jun-2014   ------

--  if VARREPORTID= 'PAYMENTREPORTFCY' then
--
----
----   if (to_char(frmDate,'MM') <=4) then
----              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
----              --dattemp := ;
----              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
----
----             -- dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
----              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
----         else
----         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
----         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
----         --dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
----         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
----       end if;
----
--
--pkgreportprograms.prcFxForcastReportPopulate(frmDate);
--
--   open gencursor for
--
--    select 4 DisplayOrder , 'Total NP Payments' Status,frmdate datDateAsOn,
--           CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--           pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--           round(sum(AmountFCY)/1000000,2) AmountFcy1,
--           round(sum(AmountLocal)/1000000,2) AmountLocal1
--    from Report_FxForcast where status ='NP Payment'
--    group by CompanyCode,MaturityMonth,Maturitymonthdate,
--           currencycode
--    union all
--    select 1 DisplayOrder , 'Settled' Status,frmdate datDateAsOn,
--         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         round(AmountFCY/1000000,2) AmountFcy1,
--         round(AmountLocal/1000000,2) AmountLocal1
--    from Report_FxForcast
--    where status ='NP Payment'
--    and datatype in ('Actual')
--    union all
--    select 1 DisplayOrder , 'Settled' Status,frmdate datDateAsOn,
--         CompanyCode,'Total',(select Maturitymonthdate
--                               from Report_FxForcast
--                              where MaturityMonth ='Total'
--                              group by Maturitymonthdate) monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         round(sum(AmountFCY)/1000000,2) AmountFcy1,
--         round(sum(AmountLocal)/1000000,2) AmountLocal1
--    from Report_FxForcast
--    where status ='NP Payment'
--    and datatype in ('Actual')
--    group by CompanyCode,currencycode
--
--    union all
--    select 2 DisplayOrder , 'Hedged' Status,frmdate datDateAsOn,
--         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         round(AmountFCY/1000000,2) AmountFcy1,
--         round(AmountLocal/1000000,2) AmountLocal1
--    from Report_FxForcast
--    where status ='Hedge Exposure'
--    union all
--    select 3 DisplayOrder , 'Open' Status,frmdate datDateAsOn,
--         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--         pkgreturncursor.fncgetdescription( currencycode,2) CurrencyCode ,
--         round(AmountFCY/1000000,2) AmountFcy1,
--         round(AmountLocal/1000000,2) AmountLocal1
--    from Report_FxForcast
--    where status ='Unhedged Exposure';
--
--
--
---- open GENCURSOR for
----
----  select * from (
----
----           select
----          2  AS DisplayOrder,
----           'Settled' Status,
----         frmdate datDateAsOn,
----          trad_company_code  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
----          to_char(trad_maturity_date,'YYYYMM') monthorder,
----        ROUND(  sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
----          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
----                           from    trtran002,trtran006,trtran001
----                   where
----                       cdel_deal_number= deal_deal_number
----                       and cdel_RECORD_STATUS not in(10200005,10200006)
----                       and trad_trade_reference=cdel_trade_reference
----                        and deal_RECORD_STATUS not in(10200005,10200006 )
----                        and deal_backup_deal=33300001
----                        and trad_record_status=10200005
----                        and trad_product_category=33300001
----                        and cdel_trade_reference is not null
----                      --  and cdel_cancel_type =27000002
----                        and cdel_cancel_date  between tempDate and frmDate
----                        and deal_base_currency=30400004
----                     --   AND CDEL_CANCEL_DATE <=frmDate
----                   group by to_char(cdel_cancel_DATE,'YYYYMM'),trad_company_code,TRAD_TRADE_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
----                              to_char(cdel_cancel_DATE,'MON-yy'), to_char(trad_maturity_date,'YYYYMM'),to_char(trad_maturity_date,'MON-yy')
----           Union All
----
----            select
----            1 AS DisplayOrder,
----           'Estimated Exp' Status,
----         frmdate datDateAsOn,
----          trad_company_code  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
----          to_char(trad_maturity_date,'YYYYMM') monthorder,
----         ROUND( sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
----          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
----
----                  from trtran003,trtran002,trtran006
----                  where brel_trade_reference=trad_trade_reference
----                       and cdel_trade_reference= brel_trade_reference
----                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
----                       and trad_process_complete=12400001))
----                      -- and brel_entry_date >='01-apr-2012'
----                        and TRAD_PRODUCT_CATEGORY=33300001
----                        and trad_maturity_date  between  tempDate and dattemp
----                       and trad_record_status not in (10200005,10200006)
----                       and brel_record_status not in (10200005,10200006)
----                       and cdel_record_Status not in (10200005,10200006)
----                       and cdel_cancel_date >= tempDate
----           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
----
----           UNION ALL
----          select
----          1 AS DisplayOrder,
----           'Estimated Exp' Status,
----         frmdate datDateAsOn,
----          trad_company_code  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
----          to_char(trad_maturity_date,'YYYYMM') monthorder,
----         ROUND( sum(trad_trade_fcy/1000000),1) AmountFcy1,
----          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
----                    from trtran002
----                  where TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                   and trad_maturity_date  between  tempDate and dattemp
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
----           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
----          Union All
----
----         select
----        3 AS DisplayOrder,
----         'Hedged' Status,
----                  frmdate datDateAsOn,
----                    deal_company_code  CompanyCode,
----                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
----                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
----                   to_char(deal_maturity_date,'YYYYMM') monthorder,
----        ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000),1) AmountFcy1,
----                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
----                   from trtran001
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
----         UNION ALL
----
----      SELECT
----      4  AS DisplayOrder,
----                  'Open' Status,
----                  frmdate datDateAs,
----                      exposure.CompanyCode CompanyCode,
----                      exposure.CurrencyCode CurrencyCode,
----                      exposure.MaturityMonth MaturityMonth,
----                    Exposure. monthorder monthorder,
----           TRUNC( (Exposure.AmountFcy1- NVL(Hedge.AmountFcy1,0)),2) as  AmountFcy1,
----                  exposure. AmountLocal1 AmountLocal1
----
----   from   (select
----
----          trad_company_code  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
----          to_char(trad_maturity_date,'YYYYMM') monthorder,
----         ROUND( sum(trad_trade_fcy/1000000),2) AmountFcy1,
----          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
----                    from trtran002
----                  where TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                   and trad_maturity_date  between  tempDate and '31-DEC-14'
----                and ((TRAD_PROCESS_COMPLETE = 12400001
----                and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
----           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code,
----           trad_trade_currency,to_char(trad_maturity_date,'MON-yy')) Exposure
----     FULL OUTER JOIN
----
----         (select
----                    deal_company_code  CompanyCode,
----                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
----                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
----                   to_char(deal_maturity_date,'YYYYMM') monthorder,
----               TRUNC( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
----                              1,1,frmdate))/1000000),2) AmountFcy1,
----                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
----                               1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
----                   from trtran001
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),
----                  to_char(deal_maturity_date,'MON-yy')) Hedge
----         on exposure.MaturityMonth= Hedge.MaturityMonth
----)
----
----                  order by 6;
--
--    Goto Process_End;
--  end if;


  --- Abhijeet End Here  -------

  --- Modified by Abhijeet on 18-Jun-2014 ----
  if VARREPORTID= 'PAYMENTREPORTFCY' then
   
--    
--   if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              --dattemp := ;
--              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--                
--             -- dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--         --dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--   

--pkgreportprograms.prcFxForcastReportPopulate(frmDate);

   open gencursor for 
   
    select 4 DisplayOrder , 'Total NP Payments' Status,frmdate datDateAsOn,
           CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
           pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
           round(sum(AmountFCY)/1000000,2) AmountFcy1,
           round(sum(AmountLocal)/1000000,2) AmountLocal1
    from Report_FxForcast where status ='NP Payment'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by CompanyCode,MaturityMonth,Maturitymonthdate,
           currencycode
    union all
    select 1 DisplayOrder , 'Settled' Status,frmdate datDateAsOn,
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(AmountFCY/1000000,2) AmountFcy1,
         round(AmountLocal/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='NP Payment'
    and datatype in ('Actual')
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
    select 1 DisplayOrder , 'Settled' Status,frmdate datDateAsOn,
         CompanyCode,'Total',(select Maturitymonthdate 
                               from Report_FxForcast
                              where MaturityMonth ='Total' 
                              group by Maturitymonthdate) monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(sum(AmountFCY)/1000000,2) AmountFcy1,
         round(sum(AmountLocal)/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='NP Payment'
    and datatype in ('Actual')
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by CompanyCode,currencycode
    
    union all
    select 2 DisplayOrder , 'Hedged' Status,frmdate datDateAsOn,
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(AmountFCY/1000000,2) AmountFcy1,
         round(AmountLocal/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='Hedge Exposure'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
    select 3 DisplayOrder , 'Open' Status,frmdate datDateAsOn,
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription( currencycode,2) CurrencyCode ,
         round(AmountFCY/1000000,2) AmountFcy1,
         round(AmountLocal/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='Unhedged Exposure';
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM');


   
-- open GENCURSOR for 
--   
--  select * from ( 
--        
--           select 
--          2  AS DisplayOrder,
--           'Settled' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--        ROUND(  sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--                           from    trtran002,trtran006,trtran001 
--                   where   
--                       cdel_deal_number= deal_deal_number 
--                       and cdel_RECORD_STATUS not in(10200005,10200006) 
--                       and trad_trade_reference=cdel_trade_reference 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        and deal_backup_deal=33300001
--                        and trad_record_status=10200005 
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                      --  and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and frmDate
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <=frmDate
--                   group by to_char(cdel_cancel_DATE,'YYYYMM'),trad_company_code,TRAD_TRADE_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy'), to_char(trad_maturity_date,'YYYYMM'),to_char(trad_maturity_date,'MON-yy')
--           Union All
--           
--            select
--            1 AS DisplayOrder,
--           'Estimated Exp' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--         
--                  from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                        and trad_maturity_date  between  tempDate and dattemp
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >= tempDate
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--           
--           UNION ALL 
--          select 
--          1 AS DisplayOrder,
--           'Estimated Exp' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trad_trade_fcy/1000000),1) AmountFcy1,
--          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
--                    from trtran002
--                  where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                   and trad_maturity_date  between  tempDate and dattemp
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002) 
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--          Union All
--          
--         select 
--        3 AS DisplayOrder,
--         'Hedged' Status,
--                  frmdate datDateAsOn,
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--        ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000),1) AmountFcy1,
--                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001 
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 ) 
--                 and deal_backup_deal=33300001
--                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002) 
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
--         UNION ALL
--         
--      SELECT    
--      4  AS DisplayOrder,
--                  'Open' Status,
--                  frmdate datDateAs,
--                      exposure.CompanyCode CompanyCode,
--                      exposure.CurrencyCode CurrencyCode,
--                      exposure.MaturityMonth MaturityMonth,
--                    Exposure. monthorder monthorder,
--           TRUNC( (Exposure.AmountFcy1- NVL(Hedge.AmountFcy1,0)),2) as  AmountFcy1,
--                  exposure. AmountLocal1 AmountLocal1
--                   
--   from   (select 
--         
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trad_trade_fcy/1000000),2) AmountFcy1,
--          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
--                    from trtran002
--                  where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                   and trad_maturity_date  between  tempDate and '31-DEC-14'
--                and ((TRAD_PROCESS_COMPLETE = 12400001  
--                and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002) 
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, 
--           trad_trade_currency,to_char(trad_maturity_date,'MON-yy')) Exposure
--     FULL OUTER JOIN       
--        
--         (select   
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--               TRUNC( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                              1,1,frmdate))/1000000),2) AmountFcy1,
--                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                               1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001 
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 ) 
--                 and deal_backup_deal=33300001
--                and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002) 
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),
--                  to_char(deal_maturity_date,'MON-yy')) Hedge
--         on exposure.MaturityMonth= Hedge.MaturityMonth         
--)
--                  
--                  order by 6;

    Goto Process_End;   
  end if;


  --- end here ----
  ---HARINATH

  -- Modified by Abhijeet  on 13-Jun-14

--   if VARREPORTID= 'PAYMENTNEWFCY' then
--
----  if (to_char(frmDate,'MM') <=4) then
----              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
----              dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
----              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
----         else
----         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
----         dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
----         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
----       end if;
--
----  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
----   pkgreportprograms.prcFxForcastReportPopulate(frmDate);
--
--   open GENCURSOR for
--    select 1 DisplayOrder , 'Settled' Status,
--         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         round(AmountLocal/AmountFCY,2) AmountFcy1
--    from Report_FxForcast
--    where status ='NP Payment'
--    and datatype in ('Actual')
--    and AmountFCY<>0
--    union all
--    select 1 DisplayOrder , 'Settled' Status,
--         CompanyCode,'Total',(select Maturitymonthdate from
--                                Report_FxForcast
--                               where datatype = 'Total'
--                               group by Maturitymonthdate ) monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         round(sum(AmountLocal)/sum(AmountFCY),2) AmountFcy1
--    from Report_FxForcast
--    where status ='NP Payment'
--    and datatype in ('Actual')
--    and AmountFCY<>0
--    group by  pkgreturncursor.fncgetdescription(currencycode,2),companycode
--
--    union all
--    select 2 DisplayOrder, 'Hedged' Status,
--         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         AmountFCY AmountFcy1
--    from Report_FxForcast
--    where status ='Hedge Rate'
--    union all
--    select 3 DisplayOrder , 'Open' Status,
--         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--         AmountFCY AmountFcy1
--    from Report_FxForcast
--    where status ='Unhedged Forward Rate'
--    union all
----    select 4 DisplayOrder , 'Total' Status,
----            CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
----            pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
----            AmountFCY AmountFcy1
----    from Report_FxForcast
----    where status ='Wt. Avg. Rate'
----    and AmountFcy !=0;
--
--     select 4 DisplayOrder , 'Total' Status,
--           CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--           pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--           round((sum(AmountLocal)/1000000)/(sum(AmountFCY)/1000000),2) AmountFcy1
--          -- round(sum(AmountLocal)/1000000,2) AmountLocal1
--    from Report_FxForcast where status ='NP Payment'
--    group by CompanyCode,MaturityMonth,Maturitymonthdate,
--           currencycode;
--
----  select
----  displayOrder,
----  Status,datDateAsOn,CompanyCode,CurrencyCode,MaturityMonth,
----          monthorder, AmountFcy1,AmountLocal1
----   from (
----
---- select
---- 1 as DisplayOrder,
----             'Settled' Status,
----          frmdate datDateAsOn,
----          trad_company_code  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
----          to_char(trad_maturity_date,'YYYYMM') monthorder,
----     round(  ( ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) -
----     ( sum((select
----       sum(CDEL_PROFIT_LOSS/1000000)
----            from trtran001, trtran006
----       where deal_deal_number= cdel_deal_number
----          and CDEL_CANCEL_DATE <= frmdate
----         and deal_backup_deal=33300001
----        and deal_record_status not in(12400005,12400006)
----       and cdel_record_status not in (12400005,12400006)
----       and CDEL_CANCEL_DATE between tempDate and frmdate
----       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
----       group by
----       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
----       to_char(deal_maturity_date,'MM-yy'))))) / (sum(cdel_cancel_amount/1000000))),2) AmountFcy1,
----          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
----
----                  from trtran003,trtran002,trtran006
----                  where brel_trade_reference=trad_trade_reference
----                       and cdel_trade_reference= brel_trade_reference
----                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
----                       and trad_process_complete=12400001))
----                      -- and brel_entry_date >='01-apr-2012'
----                      and trad_maturity_date  between tempDate and frmdate
----                        and TRAD_PRODUCT_CATEGORY=33300001
----                       and trad_record_status not in (10200005,10200006)
----                       and brel_record_status not in (10200005,10200006)
----                       and cdel_record_Status not in (10200005,10200006)
----                       and cdel_cancel_date >=tempDate
----           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
----
---- union all
----            select
----            2 as DisplayOrder,
----            'Hedged' Status,
----                   frmdate datDateAsOn,
----                    deal_company_code  CompanyCode,
----                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
----                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
----                   to_char(deal_maturity_date,'YYYYMM') monthorder,
----       round( ( (sum(pkgForexProcess.fncGetOutstanding
----               (deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) /
----               (sum(pkgForexProcess.fncGetOutstanding
----                (deal_deal_number,deal_serial_number,1,1,frmdate))/1000000)),2) AmountFcy1,
----               (sum(pkgForexProcess.fncGetOutstanding
----               (deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
----                   from trtran001
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
---- union all
---- SELECT
---- 3 as DisplayOrder,
----         'Open' Status,
----         frmdate datDateAsOn,
----          (select distinct(trad_company_code) from trtran002) CompanyCode,
----         pkgreturncursor.fncgetdescription(30400004,2) as CurrencyCode,
----         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityMonth,
----         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
----         trunc(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,0,0,ADD_MONTHS(frmdate,Months),0),2)  AS AmountLocal1,
----         1 as AmountFcy1
----
----  FROM   (
----          SELECT 1 Months FROM DUAL
----          UNION ALL
----          SELECT 2 Months FROM DUAL
----          UNION ALL
----          SELECT 3 Months FROM DUAL
----          UNION ALL
----          SELECT 4 Months FROM DUAL
----          UNION ALL
----          SELECT 5 Months FROM DUAL
----          UNION ALL
----          SELECT 6 Months FROM DUAL
----         )
----         order by monthorder);
--   Goto Process_End;
--  end if;


   ---  Abhijeet end here  ---

---- Modified by Abhijeet on 18-Jun-2014 ----

if VARREPORTID= 'PAYMENTNEWFCY' then
  
--  if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
  
 -- numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
 --  pkgreportprograms.prcFxForcastReportPopulate(frmDate);
  
   Open Gencursor For 
    Select Displayorder,Status,
    Companycode,Maturitymonth,monthorder,Currencycode,Amountfcy1 From
    (Select 1 Displayorder , 'Settled' Status, 
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         Pkgreturncursor.Fncgetdescription(Currencycode,2) Currencycode,
         round(sum(AmountLocal)/Sum(AmountFCY),2) AmountFcy1
    from Report_FxForcast
    where status ='NP Payment'
    And Datatype In ('Actual')
    And Amountfcy<>0 
   -- and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    Group By Companycode,Maturitymonth,Maturitymonthdate,Displayorder,Status,Currencycode)    
    union all
    select 1 DisplayOrder , 'Settled' Status, 
         CompanyCode,'Total',(select Maturitymonthdate from 
                                Report_FxForcast
                               where datatype = 'Total'
                               group by Maturitymonthdate ) monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(sum(AmountLocal)/sum(AmountFCY),2) AmountFcy1
    from Report_FxForcast
    where status ='NP Payment'
    and datatype in ('Actual')
    and AmountFCY<>0
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by  pkgreturncursor.fncgetdescription(currencycode,2),companycode
    
    union all
    select 2 DisplayOrder, 'Hedged' Status, 
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         AmountFCY AmountFcy1
    from Report_FxForcast
    where status ='Hedge Rate'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
    select 3 DisplayOrder , 'Open' Status, 
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         AmountFCY AmountFcy1
    from Report_FxForcast
    where status ='Unhedged Forward Rate'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
--    select 4 DisplayOrder , 'Total' Status, 
--            CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--            pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--            AmountFCY AmountFcy1
--    from Report_FxForcast 
--    where status ='Wt. Avg. Rate'
--    and AmountFcy !=0;
    
     select 4 DisplayOrder , 'Total' Status,
           CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
           pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
           round((sum(AmountLocal)/1000000)/(sum(AmountFCY)/1000000),2) AmountFcy1
          -- round(sum(AmountLocal)/1000000,2) AmountLocal1
    from Report_FxForcast where status ='NP Payment'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by CompanyCode,MaturityMonth,Maturitymonthdate,
           currencycode;
    
--  select 
--  displayOrder,
--  Status,datDateAsOn,CompanyCode,CurrencyCode,MaturityMonth, 
--          monthorder, AmountFcy1,AmountLocal1
--   from ( 
-- 
-- select   
-- 1 as DisplayOrder,
--             'Settled' Status,
--          frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--     round(  ( ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) - 
--     ( sum((select 
--       sum(CDEL_PROFIT_LOSS/1000000) 
--            from trtran001, trtran006
--       where deal_deal_number= cdel_deal_number
--          and CDEL_CANCEL_DATE <= frmdate
--         and deal_backup_deal=33300001
--        and deal_record_status not in(12400005,12400006)
--       and cdel_record_status not in (12400005,12400006)
--       and CDEL_CANCEL_DATE between tempDate and frmdate
--       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
--       group by 
--       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
--       to_char(deal_maturity_date,'MM-yy'))))) / (sum(cdel_cancel_amount/1000000))),2) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--         
--                  from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate 
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                      and trad_maturity_date  between tempDate and frmdate
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >=tempDate
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--           
-- union all
--            select 
--            2 as DisplayOrder,
--            'Hedged' Status,
--                   frmdate datDateAsOn,
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--       round( ( (sum(pkgForexProcess.fncGetOutstanding
--               (deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) /
--               (sum(pkgForexProcess.fncGetOutstanding
--                (deal_deal_number,deal_serial_number,1,1,frmdate))/1000000)),2) AmountFcy1,
--               (sum(pkgForexProcess.fncGetOutstanding
--               (deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001 
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 ) 
--                 and deal_backup_deal=33300001
--                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002) 
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
-- union all
-- SELECT  
-- 3 as DisplayOrder,
--         'Open' Status,
--         frmdate datDateAsOn,
--          (select distinct(trad_company_code) from trtran002) CompanyCode,
--         pkgreturncursor.fncgetdescription(30400004,2) as CurrencyCode,
--         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityMonth,
--         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
--         trunc(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,0,0,ADD_MONTHS(frmdate,Months),0),2)  AS AmountLocal1,
--         1 as AmountFcy1
--         
--  FROM   ( 
--          SELECT 1 Months FROM DUAL
--          UNION ALL
--          SELECT 2 Months FROM DUAL
--          UNION ALL
--          SELECT 3 Months FROM DUAL
--          UNION ALL
--          SELECT 4 Months FROM DUAL
--          UNION ALL
--          SELECT 5 Months FROM DUAL
--          UNION ALL
--          SELECT 6 Months FROM DUAL
--         )
--         order by monthorder);
   Goto Process_End;   
  end if;

---- end here ----

 -------Ishwara Cygnet-----------
    If Varreportid = 'POSITIONSHEETEXPORT'  Then
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
  Query_Str :='  Select Expimp, (Case When Expimp= ''Imports'' Then Imports Else  Exports End) "Export",
       (Case When Expimp= ''Imports'' Then Importhedgingamt Else  Exporthedgingamt End) "Hedgingamt",
       (Case When Expimp= ''Imports'' Then Lcbc Else  Pcfc End) "Loans",
    Round( (Case When Expimp= ''Imports'' Then Decode((Imports-(Importhedgingamt+Lcbc)),0,0,(Impinr-(Imphedgingamtinr+Lcbinr)) / (Imports-(Importhedgingamt+Lcbc)))
       Else decode((Exports-(Exporthedgingamt+Pcfc)),0,0,(Expinr-(Exphedgingamtinr+Pcfcinr))/(Exports-(Exporthedgingamt+Pcfc)))End),6) "HoldingRate",
       (Case When Expimp= ''Imports'' Then Impm2m Else  Expm2m End) "M2M",currency,FromDate,ToDate,CompanyName,CompanyFooter
from
 (Select (Case When Posn_Account_Code >25900050 Then ''Export'' Else ''Imports'' End) Expimp,
       (Sum(Case When Posn_Account_Code In (25900003,25900004,25900017) Then Posn_Transaction_Amount Else 0 End  )/100000) Exports,
       (Sum(Case When Posn_Account_Code In (25900003,25900004,25900017) Then Posn_inr_value Else 0 End  )/100000) ExpInr,
       Sum((Case When Posn_Account_Code In (25900078,25900079,25900082,25900083,25900084,25900085) Then Posn_Transaction_Amount Else 0 End)/100000) Exporthedgingamt,
       Sum((Case When Posn_Account_Code In (25900078,25900079,25900082,25900083,25900084,25900085) Then Posn_Inr_Value Else 0 End)/100000) Exphedgingamtinr,
       Sum(Case When Posn_Account_Code In (25900078,25900079,25900082,25900083,25900084,25900085) Then POSN_M2M_USDRATE Else 0 End) ExpM2M,
       Sum (Case When Posn_Account_Code In (25900071,25900072)Then Posn_Transaction_Amount Else 0 End) Pcfc,
       Sum (Case When Posn_Account_Code In (25900071,25900072)Then Posn_inr_value Else 0 End) PcfcInr,
       Sum ((Case When Posn_Account_Code In (25900051,25900052,25900053,25900067)Then Posn_Transaction_Amount Else 0 End)/100000) Imports,
       Sum ((Case When Posn_Account_Code In (25900051,25900052,25900053,25900067)Then Posn_inr_value Else 0 End)/100000) ImpInr,
       Sum ((Case When Posn_Account_Code In (25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023)Then Posn_Transaction_Amount Else 0 End)/100000) Importhedgingamt,
       Sum ((Case When Posn_Account_Code In (25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023)Then Posn_inr_value Else 0 End)/100000) ImphedgingamtInr,
       Sum (Case When Posn_Account_Code In (25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023)Then POSN_M2M_USDRATE Else 0 End) ImpM2M,
       Sum (Case When Posn_Account_Code In (25900053,25900073)Then Posn_Transaction_Amount Else 0 End) Lcbc,
       Sum (Case When Posn_Account_Code In (25900053,25900073)Then Posn_Inr_Value Else 0 End) Lcbinr,
        Pkgreturncursor.Fncgetdescription(POSN_CURRENCY_CODE,2) as currency,
       TO_DATE('||''''||frmDate||''''||') as FromDate,
       to_date('||''''||toDate||''''||') as ToDate,
       pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
       pkgreturnReport.getCompanyNameFooter() as CompanyFooter
from trsystem997
where POSN_REFERENCE_NUMBER not in (''RBPL/FWD/T/S/1562/12-13'')
         '||Finalcondition||'
group by (case when Posn_Account_Code >25900050 then ''Export'' else ''Imports'' end),POSN_CURRENCY_CODE )';
         delete from temp;commit;
         Insert Into Temp Values(Query_Str||Finalcondition,Null);
         Commit;
     Open Gencursor For Query_Str;
      Goto Process_End;
  End If;
--   if varReportID= 'CONTRACTSHCEDULENEW' then
--    OPEN GenCursor for
--       select
--     pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--     TRAD_CONTRACT_NO  as "ContractNo",
--     pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",
--     CONR_TOTAL_QUANTITY as "TotalQuantity",
--     CONR_PRODUCT_RATE as "Price/Ton",
--     pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,1) as "PaymentTerms",
--     CONR_BASE_AMOUNT as "TotalFCYAmount",
--     trad_reference_date as "ContractDate",
--     pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--     trad_maturity_date as "MonthlySchedule",
--     trad_product_quantity as "Quantity",
--     trad_trade_fcy  as "Amount",
--     nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.trad_maturity_from,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0) "SettledAmount",
--                                   nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       and HEDG_RECORD_STATUS not in(10200005,10200006)),0) as "HedgedFcy",
--       trad_trade_reference  as "ReverseReference",
--        pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) "OutstandingAmount"
--     from trtran002 a ,trtran002c b
--      where  TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--       and TRAD_RECORD_STATUS not in(10200005,10200006)
--       order by trad_maturity_date ;
--           Goto Process_End;
--  end if;

--     if varReportID= 'CONTRACTSHCEDULEWINDOWS' then
--    OPEN GenCursor for
--  select
--     pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--     TRAD_CONTRACT_NO  as "ContractNo",
--     pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",
--     CONR_TOTAL_QUANTITY as "TotalQuantity",
--     CONR_PRODUCT_RATE as "Price/Ton",
--     pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
--     CONR_BASE_AMOUNT as "TotalFCYAmount",
--     trad_reference_date as "ContractDate",
--     pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--     trad_maturity_date as "MonthlySchedule",
--     trad_product_quantity as "Quantity",
--     trad_trade_fcy  as "Amount",
--     nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.trad_maturity_from,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0) "SettledAmount",
--                                   nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       and HEDG_RECORD_STATUS not in(10200005,10200006)),0) as "HedgedFcy",
--       trad_trade_reference  as "ReverseReference",
--        pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'01-jan-2014',null) "OutstandingAmount",
--        to_char(ROUND(TRAD_trade_RATE,4),'99d9999') as "BenchMarkRate",
--       to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'01-jan-2014',0, 0,
--      trad_maturity_date),4),'99d9999') as "MTMRate" ,
--      (case
--                 when(
--                 ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'01-jan-2014',0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)> ((TRAD_trade_RATE*0.5)/100)
--                )
--                then
--                ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'01-jan-2014',0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)
--                 else
--                ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'01-jan-2014',0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)
--                 end)as "%Increase/DecreaseMTM"
--     from trtran002 a ,trtran002c b
--      where  TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--       and TRAD_RECORD_STATUS not in(10200005,10200006)
--       order by trad_maturity_date ;
--
--       Goto Process_End;
--  end if;

  if varReportID= 'CONTRACTPENDING' then       
    OPEN GenCursor for  
   select * from 
  (select CONR_USER_REFERENCE as "ContractNO"  ,
          pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2)  as "Vendor",
          nvl(CONR_TOTAL_QUANTITY,0) as "Quantity" ,
          nvl(CONR_PRODUCT_RATE,0) as "Price/Ton" ,
          pkgreturncursor.fncgetdescription(conr_product_category,2) as "Payment Terms",
 --         pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "Payment Terms",
          CONR_REFERENCE_DATE as "Contract Date",
          CONR_ADD_DATE ,
          --pkgreturncursor.fncgetdescription(CompanyCode,1) as "CompanyCode",
          frmDate as AsonDate,
          TODATE as TODATE,
          --Fncnextworkingdays(Conr_Add_Date,3) As Nexttwodays ,
          Conr_Add_Date+2 As Nexttwodays,
          (select max(trad_create_date) from trtran002
                where trad_trade_reference = conr_trade_reference
                And Trad_Record_Status Not In(10200005,10200006) ) As Contractscheduleddate,
             (select distinct( pkgreturncursor.fncgetdescription(trad_company_code,1)) from trtran002
               -- Where Trad_Trade_Reference = Conr_Trade_Reference
               -- And Trad_Record_Status Not In(10200005,10200006)
                ) as CompanyCode             
   From Trtran002c)
   Where (Contractscheduleddate Is  Null) 
   --Or
   --( Contractscheduleddate  Not Between Conr_Add_Date And Nexttwodays )
    and  Contractscheduleddate >= CONR_ADD_DATE;
   Goto Process_End;
   
  end if;

  ----- Added by Shrihari on 21st May 2014
  if varReportID= 'FIFTEENPERCENT' then
    OPEN GenCursor for
      SELECT
      pkgreturncursor.fncgetdescription(trtran002.trad_company_code,1) as Company,
       trtran002.trad_contract_no as ContractNo,
       pkgreturncursor.fncgetdescription(trtran002.trad_buyer_seller,2) AS Vendor,
       trtran002.trad_product_quantity as Quantity,
       trtran002.trad_product_rate as "Price/Ton",
       Trtran002.Trad_Reference_Date As "ContractDate",
    pkgreturncursor.fncgetdescription(Trtran002.Trad_Local_Bank,2) As "Bank",
    Trtran002.Trad_Maturity_Date as "Scheduled Date",
       TRSYSTEM102.TRAD_TRADE_FCY  as  PreviousAmount,
       TRTRAN002.TRAD_TRADE_FCY as UpdatedAmount,
       ROUND((((TRTRAN002.TRAD_TRADE_FCY-TRSYSTEM102.TRAD_TRADE_FCY)/TRSYSTEM102.TRAD_TRADE_FCY) * 100),2) AS "Incvalue in %",
       (Case
            WHEN abs((((TRTRAN002.TRAD_TRADE_FCY-TRSYSTEM102.TRAD_TRADE_FCY)/TRSYSTEM102.TRAD_TRADE_FCY) * 100)) > 15
       THEN '15% Amount Changed'
       Else 'Nothing'
       END) REMARK,
      frmDate as AsonDate,
      TODATE as TODATE
    FROM TRSYSTEM102 LEFT OUTER JOIN TRTRAN002
    ON TRSYSTEM102.TRAD_TRADE_REFERENCE=trtran002.trad_trade_reference
    WHERE TRSYSTEM102.IMAGETYPE='UPDATING' AND TO_DATE(TRSYSTEM102.WORKDATE)=TO_DATE(Sysdate)
     and trtran002.trad_trade_reference like 'BCCL/PURCON%'
    And (((Trtran002.Trad_Trade_Fcy-Trsystem102.Trad_Trade_Fcy)/Trsystem102.Trad_Trade_Fcy) * 100) > 15
 ORDER BY TRSYSTEM102.WORKDATE;
 Goto Process_End;
  end if;

------------------------------------------------------------------------------------



  ---- end here -------

  if varReportID= 'ACTIONCHANGE' then
    OPEN GenCursor for

  SELECT
            pkgreturncursor.fncgetdescription(trad_company_code,1) as Company,
            Trad_Contract_No As Contractno,
            pkgreturncursor.fncgetdescription(trad_buyer_seller,2) as Vendor,
            trad_product_quantity as Quantity,
            trad_product_rate as "Price/Ton",
            trad_reference_date as ContractDate,
            Trad_Trade_Fcy  As Amount,
            DATESTAMP AS DATESTAMP,
            frmDate as AsonDate,
            Todate As Todate  ,
            'Inserted Data' As Datatype,NULL "Change Type",
            Pkgreturncursor.Fncgetdescription(Trad_Local_Bank,2) As "Bank",
            Trad_Maturity_Date As "Scheduled Date"
            From  Trsystem102
              Where Imagetype='INSERTING' And To_Date(Workdate)<=To_Date(Sysdate)
              and  Trad_Contract_No is not null

UNION ALL

Select     Pkgreturncursor.Fncgetdescription(Trad_Company_Code,1) As Company,
           Trad_Contract_No As Contractno,
           pkgreturncursor.fncgetdescription(trad_buyer_seller,2) as Vendor,
           trad_product_quantity as Quantity,
           trad_product_rate as "Price/Ton",
           trad_reference_date as ContractDate,
           TRAD_TRADE_FCY  as Amount,
           DATESTAMP AS DATASTAMP,
           frmDate as AsonDate,
           Todate As Todate  ,
           'Updated Data' As Datatype,'OLD' "Change Type",
           Pkgreturncursor.Fncgetdescription(Trad_Local_Bank,2) As "Bank",
          Trad_Maturity_Date As "Scheduled Date"
           FROM   TRSYSTEM102
           Where Imagetype='UPDATING' And To_Date(Workdate)<=To_Date(Sysdate)
           and Trad_Contract_No is not null
UNION ALL

SELECT
           pkgreturncursor.fncgetdescription(trtran002.trad_company_code,1) as Company,
           Trtran002.Trad_Contract_No As Contractno,
           pkgreturncursor.fncgetdescription(TRTRAN002.trad_buyer_seller,2) as Vendor,
           TRTRAN002.trad_product_quantity as Quantity,
           TRTRAN002.trad_product_rate as "Price/Ton",
           Trtran002.Trad_Reference_Date As Contractdate,
           Trtran002.Trad_Trade_Fcy  As Amount,
           TRSYSTEM102.DATESTAMP AS DATESTAMP,
           frmDate as AsonDate,
           Todate As Todate  ,
           'Updated Data' As Datatype,'NEW' "Change Type",
           Pkgreturncursor.Fncgetdescription(Trtran002.Trad_Local_Bank,2) As "Bank",
           TRTRAN002.Trad_Maturity_Date As "Scheduled Date"
            FROM  TRSYSTEM102  LEFT OUTER JOIN TRTRAN002
            ON TRSYSTEM102.TRAD_TRADE_REFERENCE=TRTRAN002.TRAD_TRADE_REFERENCE
            WHERE IMAGETYPE='UPDATING' AND TO_DATE(WORKDATE)<=to_date(sysdate)
            and  Trtran002.Trad_Contract_No is not null

UNION ALL

Select      Pkgreturncursor.Fncgetdescription(Trad_Company_Code,1) As Company,
            Trad_Contract_No As Contractno,
            pkgreturncursor.fncgetdescription(trad_buyer_seller,2) as Vendor,
            trad_product_quantity as Quantity,
            trad_product_rate as "Price/Ton",
            trad_reference_date as ContractDate,
            TRAD_TRADE_FCY  as Amount,
            DATESTAMP AS DATESTAMP,
            Frmdate As Asondate,
            Todate As Todate  ,
            'Deleted Data' As Datatype,'NEW' "Change Type",
            Pkgreturncursor.Fncgetdescription(Trad_Local_Bank,2) As "Bank",
            Trad_Maturity_Date as "Scheduled Date"
            FROM TRSYSTEM102
            Where Imagetype='DELETING' And To_Date(Workdate)<=To_Date(Sysdate)
            and Trad_Contract_No is not null

   order by 2,8,7;
   Goto Process_End;
  end if;

   if varReportID= 'CONTRACTCHANGE' then
    OPEN GenCursor for

  Select Rank,Company,Contractno,Vendor,Quantity,"Price/Ton",Contractdate,Amount,Datestamp,
  Asondate,Todate,Datatype,"Change Type","Bank" from
(
SELECT rank() over(order by Datestamp desc) rank,
            pkgreturncursor.fncgetdescription(CONR_COMPANY_CODE,1) as Company,
            CONR_USER_REFERENCE As Contractno,
            pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as Vendor,
            CONR_TOTAL_QUANTITY as Quantity,
            CONR_PRODUCT_RATE as "Price/Ton",
            CONR_REFERENCE_DATE as ContractDate,
            CONR_BASE_AMOUNT  As Amount,
            Datestamp As Datestamp,
            Frmdate As Asondate,
            Todate As Todate  ,
            'Inserted Data' As Datatype,NULL "Change Type",
            Pkgreturncursor.Fncgetdescription(Conr_Local_Bank,2) As "Bank"
            --Trad_Maturity_Date As "Scheduled Date"
            From  TRSYSTEM102C
              Where Imagetype='INSERTING' And To_Date(Workdate)<=To_Date(Sysdate)
              and  CONR_USER_REFERENCE is not null
              and  Workdate Between Frmdate And Todate

UNION ALL

Select     rank() over(order by Datestamp desc) rank,
           Pkgreturncursor.Fncgetdescription(CONR_COMPANY_CODE,1) As Company,
           CONR_USER_REFERENCE As Contractno,
           Pkgreturncursor.Fncgetdescription(Conr_Buyer_Seller,2) As Vendor,
           CONR_TOTAL_QUANTITY as Quantity,
           CONR_PRODUCT_RATE as "Price/Ton",
           CONR_REFERENCE_DATE as ContractDate,
           CONR_BASE_AMOUNT  as Amount,
           Datestamp As Datastamp,
           Frmdate As Asondate,
           Todate As Todate  ,
           'Updated Data' As Datatype,'OLD' "Change Type",
           Pkgreturncursor.Fncgetdescription(Conr_Local_Bank,2) As "Bank"
         -- Trad_Maturity_Date As "Scheduled Date"
           FROM   TRSYSTEM102C
           Where Imagetype='UPDATING' And To_Date(Workdate)<=To_Date(Sysdate)
           and CONR_USER_REFERENCE is not null
           And Workdate Between Frmdate And Todate
UNION ALL
Select    rank() over(order by Trsystem102c.Datestamp desc) rank,
           pkgreturncursor.fncgetdescription(trtran002C.CONR_COMPANY_CODE,1) as Company,
           TRTRAN002C.CONR_USER_REFERENCE As Contractno,
           Pkgreturncursor.Fncgetdescription(Trtran002c.Conr_Buyer_Seller,2) As Vendor,
           trtran002C.CONR_TOTAL_QUANTITY as Quantity,
           trtran002C.CONR_PRODUCT_RATE as "Price/Ton",
           TRTRAN002C.CONR_REFERENCE_DATE As Contractdate,
           TRTRAN002C.CONR_BASE_AMOUNT  As Amount,
           Trsystem102c.Datestamp As Datestamp,
           Frmdate As Asondate,
           Todate As Todate  ,
           'Updated Data' As Datatype,'NEW' "Change Type",
           Pkgreturncursor.Fncgetdescription(Trtran002c.Conr_Local_Bank,2) As "Bank"
           --TRTRAN002.Trad_Maturity_Date As "Scheduled Date"
            From  Trsystem102c  Left Outer Join Trtran002c
            ON TRSYSTEM102C.CONR_TRADE_REFERENCE=TRTRAN002C.CONR_TRADE_REFERENCE
            Where Imagetype='UPDATING' And To_Date(Workdate)<=To_Date(Sysdate)
            And  Trtran002c.Conr_User_Reference Is Not Null
            And Workdate Between Frmdate And Todate
UNION ALL
Select      rank() over(order by Datestamp desc) rank,
            Pkgreturncursor.Fncgetdescription(CONR_COMPANY_CODE,1) As Company,
            CONR_USER_REFERENCE As Contractno,
            pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as Vendor,
            CONR_TOTAL_QUANTITY as Quantity,
            CONR_PRODUCT_RATE as "Price/Ton",
            CONR_REFERENCE_DATE as ContractDate,
            CONR_BASE_AMOUNT  as Amount,
            Datestamp As Datestamp,
            Frmdate As Asondate,
            Todate As Todate  ,
            'Deleted Data' As Datatype,'NEW' "Change Type",
            Pkgreturncursor.Fncgetdescription(Conr_Local_Bank,2) As "Bank"
            --Trad_Maturity_Date as "Scheduled Date"
            FROM TRSYSTEM102C
            Where Imagetype='DELETING' And To_Date(Workdate)<=To_Date(Sysdate)
            And Conr_User_Reference Is Not Null
           And Workdate Between Frmdate And Todate)

            Order By 9,13;
   Goto Process_End;
  end if;


  ---given by shrihari as on 07/04/2014
--   if varReportID= 'CONTRACTSHCEDULENEW' then
--    OPEN GenCursor for
--       select
--     pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--     TRAD_CONTRACT_NO  as "ContractNo",
--     pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",
--     CONR_TOTAL_QUANTITY as "TotalQuantity",
--     CONR_PRODUCT_RATE as "Price/Ton",
--     pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,1) as "PaymentTerms",
--     CONR_BASE_AMOUNT as "TotalFCYAmount",
--     trad_reference_date as "ContractDate",
--     pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--     trad_maturity_date as "MonthlySchedule",
--     trad_product_quantity as "Quantity",
--     trad_trade_fcy  as "Amount",
--     nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.TRAD_MATURITY_DATE,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0) "SettledAmount",
--                                   nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       and HEDG_RECORD_STATUS not in(10200005,10200006)),0) as "HedgedFcy",
--       trad_trade_reference  as "ReverseReference",
--        pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) "OutstandingAmount",
--        Frmdate As Asondate,
--            Todate As Todate
--     from trtran002 a ,trtran002c b
--      where  TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--       and TRAD_RECORD_STATUS not in(10200005,10200006)
--       and trad_entry_date<=Frmdate
--       order by trad_maturity_date ;
--           Goto Process_End;
--  end if;

  ---- Added by Shrihari on 21st May 2014   -----------
  ------ modified by Ishwar on 11-JUn -2014 -----

-- if varReportID= 'CONTRACTSHCEDULEWINDOWS' then
--
--    delete from temp;commit;
--       insert into temp values(frmDate,Todate);
--        OPEN GenCursor for
--  select frmDate as "ToDate",
--     pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--     TRAD_CONTRACT_NO  as "ContractNo",
--     pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",
--     CONR_TOTAL_QUANTITY as "TotalQuantity",
--     CONR_PRODUCT_RATE as "Price/Ton",
--     pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
--     CONR_BASE_AMOUNT as "TotalFCYAmount",
--     trad_reference_date as "ContractDate",
--     pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--     trad_maturity_date as "MonthlySchedule",
--     trad_product_quantity as "Quantity",
--     trad_trade_fcy  as "Amount",
--     nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.TRAD_MATURITY_DATE,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0) "SettledAmount",
--                                   nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       and HEDG_RECORD_STATUS not in(10200005,10200006)),0) as "HedgedFcy",
--       trad_trade_reference  as "ReverseReference",
--        pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,frmDate,null) "OutstandingAmount",
--        to_char(ROUND(TRAD_trade_RATE,4),'99d9999') as "BenchMarkRate",
--       to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--      trad_maturity_date),4),'99d9999') as "MTMRate" ,
--      (case
--                 when(
--                 ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)> ((TRAD_trade_RATE*0.5)/100)
--                )
--                then
--                ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)
--                 else
--                ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)
--                 end)as "%Increase/DecreaseMTM"
--     from trtran002 a ,trtran002c b
--      where  TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--       and TRAD_RECORD_STATUS not in(10200005,10200006)
--        and trad_entry_date<=frmdate
--       order by trad_maturity_date ;
--
--       Goto Process_End;
--  end if;

 -- modified by Shrihari/Prateek on 25th Aug 2014
if varReportID= 'CONTRACTSHCEDULEWINDOWS' then     
QUERY_STR := 'select '||''''||frmDate||''''||' as "ToDate",
             pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
             TRAD_CONTRACT_NO  as "ContractNo",
             pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",    
             CONR_TOTAL_QUANTITY as "TotalQuantity", 
             CONR_PRODUCT_RATE as "Price/Ton",
             pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
             CONR_BASE_AMOUNT as "TotalFCYAmount", 
             trad_reference_date as "ContractDate",
             --pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
             pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as "Bank",
             trad_maturity_date as "MonthlySchedule",
             trad_product_quantity as "Quantity",
             trad_trade_fcy  as "Amount",            
--             nvl( ( select sum(brel_reversal_fcy) 
--                                          from trtran003 ,trtran002 sub 
--                                         where brel_trade_reference= sub.trad_trade_reference
--                                           and  sub.trad_contract_no = a.trad_contract_no
--                                         and brel_reversal_type=25800052 
--                                           and to_char(a.TRAD_MATURITY_DATE,''mm-YYYY'') = to_char(brel_entry_date,''MM-YYYY'')
--                                           and brel_entry_date <='||''''||frmDate||''''||'
--                                           and sub.trad_record_status=10200005
--                                           and brel_record_status not in (10200005,10200006)),0) "SettledAmount",
            nvl((select sum(brel_reversal_fcy) from trtran003 
            where brel_user_reference=a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0) "SettledAmount",
                                           
                                           pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) as Category,
                                           pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,';
                                           
Query_Str1 := 'nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE 
               and HEDG_RECORD_STATUS not in(10200005,10200006,10200012)),0) as "HedgedFcy",
               (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') -   nvl((select sum(brel_reversal_fcy) from trtran003 
            where brel_user_reference=a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)  - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as "UnhedgeAmount",
 --              (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') -  nvl( ( select sum(brel_reversal_fcy) 
  --                                        from trtran003 ,trtran002 sub 
 --                                        where brel_trade_reference= sub.trad_trade_reference
 --                                        and  sub.trad_contract_no = a.trad_contract_no
 --                                        and brel_reversal_type=25800052
--                                           and to_char(a.TRAD_MATURITY_DATE,''mm-YYYY'') = to_char(brel_entry_date,''MM-YYYY'')
--                                           and brel_entry_date <='||''''||frmDate||''''||'
--                                           and sub.trad_record_status=10200005
--                                           and brel_record_status not in (10200005,10200006)),0) - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as "UnhedgeAmount",
               trad_trade_reference  as "ReverseReference",
               pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
               to_char(ROUND(TRAD_trade_RATE,4),''999d9999'') as "BenchMarkRate",     
               to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
               trad_maturity_date),4),''999d9999'') as "MTMRate" ,
               ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
                         trad_maturity_date) -trad_trade_rate))/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4)  as "%Increase/DecreaseMTM"
                         ' || varGroupField || '
               from trtran002 a left outer join trtran002c b 
               on   TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
               where ((trad_process_complete=12400002) or (trad_complete_date >'||''''||frmDate||''''||' 
                               and trad_process_complete=12400001))
              --and  trad_import_export=25900077
              and trad_record_status not in (10200005,10200006)
              and trad_maturity_date >= '||''''||frmDate||''''||'
              and trad_entry_date<='||''''||frmDate||''''||'
              and trad_trade_fcy > 0
              and  
----              ROUND((( (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
----              trad_maturity_date)-trad_trade_rate ))/decode(trad_trade_rate,0,1)*100,4) > ((TRAD_trade_RATE*(-0.5))/1000)
                        ROUND(( (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
                       trad_maturity_date)-trad_trade_rate )/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4) > ((TRAD_trade_RATE*(-0.5))/1000)' ; 
        delete from temp; commit;
     insert into temp values (QUERY_STR,Query_Str1 || finalcondition);commit;         
       Open Gencursor For QUERY_STR||Query_Str1||finalcondition||'order by TRAD_TRADE_CURRENCY,TRAD_PRODUCT_CATEGORY,trad_reference_date' ;  
             Goto Process_End;   
  end if;


--  if varReportID= 'CONTRACTSHCEDULEWINDOWS' then
--     OPEN GenCursor for
--     select frmDate as "ToDate",
--     pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--     TRAD_CONTRACT_NO  as "ContractNo",
--     pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",
--     CONR_TOTAL_QUANTITY as "TotalQuantity",
--     CONR_PRODUCT_RATE as "Price/Ton",
--     pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
--     CONR_BASE_AMOUNT as "TotalFCYAmount",
--     trad_reference_date as "ContractDate",
--     pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--     trad_maturity_date as "MonthlySchedule",
--     trad_product_quantity as "Quantity",
--     trad_trade_fcy  as "Amount",
--     nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.TRAD_MATURITY_DATE,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0) "SettledAmount",
--                                   nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       and HEDG_RECORD_STATUS not in(10200005,10200006)),0) as "HedgedFcy",
--       trad_trade_reference  as "ReverseReference",
--        pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,frmDate,null) "OutstandingAmount",
--        to_char(ROUND(TRAD_trade_RATE,4),'99d9999') as "BenchMarkRate",
--       to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--      trad_maturity_date),4),'99d9999') as "MTMRate" ,
--      ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4)  as "%Increase/DecreaseMTM"
--     from trtran002 a left outer join trtran002c b
--      on   TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--     where ((trad_process_complete=12400002) or (trad_complete_date >=frmDate
--                       and trad_process_complete=12400001))
--      and  trad_import_export=25900077
--      and trad_record_status not in (10200005,10200006)
--      and trad_entry_date<=frmDate
--      and  ROUND(((trad_trade_rate- (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,frmDate,0, 0,
--                 trad_maturity_date) ))/trad_trade_rate)*100,4) > ((TRAD_trade_RATE*0.5)/100)
--       order by trad_maturity_date ;
--       Goto Process_End;
--  end if;


  ---- end here   ------
-- new report added by prateek ----  for Varation MTM Report for ALL
--  
--    if varReportID= 'CONTRACTSHCEDULEWINDOWS1' then     
--QUERY_STR := 'select '||''''||frmDate||''''||' as "ToDate",
--             pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--             TRAD_CONTRACT_NO  as "ContractNo",
--             pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",    
--             CONR_TOTAL_QUANTITY as "TotalQuantity", 
--             CONR_PRODUCT_RATE as "Price/Ton",
--             pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
--             CONR_BASE_AMOUNT as "TotalFCYAmount", 
--             trad_reference_date as "ContractDate",
--             pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--             trad_maturity_date as "MonthlySchedule",
--             trad_product_quantity as "Quantity",
--             trad_trade_fcy  as "Amount",            
----            nvl( ( select sum(brel_reversal_fcy) 
----                                          from trtran003 ,trtran002 sub 
----                                         where brel_trade_reference= sub.trad_trade_reference
----                                         and  sub.trad_contract_no = a.trad_contract_no
----                                         and brel_reversal_type=25800052 
----                                           and to_char(a.TRAD_MATURITY_DATE,''mm-YYYY'') = to_char(brel_entry_date,''MM-YYYY'')
----                                           and brel_entry_date <='||''''||frmDate||''''||'
----                                           and sub.trad_record_status=10200005
----                                           and brel_record_status not in (10200005,10200006)),0)  "SettledAmount",
--            nvl((select sum(brel_reversal_fcy) from trtran003 
--            where brel_user_reference=a.trad_contract_no
--            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0) "SettledAmount",
--                                           pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) as Category,
--                                           pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,';
--                                           
--Query_Str1 := 'nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE 
--               and HEDG_RECORD_STATUS not in(10200005,10200006,10200012)),0) as "HedgedFcy",
--               (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') -   nvl((select sum(brel_reversal_fcy) from trtran003 
--            where brel_user_reference=a.trad_contract_no
--            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)  - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as "UnhedgeAmount",
--               trad_trade_reference  as "ReverseReference",
--               pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
--               to_char(ROUND(TRAD_trade_RATE,4),''999d9999'') as "BenchMarkRate",     
--               to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
--               trad_maturity_date),4),''999d9999'') as "MTMRate" ,
--               ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
--                         trad_maturity_date) -trad_trade_rate))/trad_trade_rate)*100,4)  as "%Increase/DecreaseMTM"
--                         ' || varGroupField || '
--               from trtran002 a left outer join trtran002c b 
--               on   TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--               where ((trad_process_complete=12400002) or (trad_complete_date >'||''''||frmDate||''''||' 
--                               and trad_process_complete=12400001))
--              and  trad_import_export in(25900086,25900077)
--              and trad_record_status not in (10200005,10200006)
--              and trad_maturity_date >= '||''''||frmDate||''''||'
--              and trad_maturity_date <= ''13-MAR-2016''
--              and trad_entry_date<='||''''||frmDate||''''||'
--              and trad_trade_fcy > 0';
--         
--        delete from temp; commit;
--     insert into temp values (QUERY_STR,Query_Str1 || finalcondition);commit;         
--       Open Gencursor For QUERY_STR||Query_Str1||finalcondition||'order by  TRAD_PRODUCT_CATEGORY,TRAD_TRADE_CURRENCY' ;  
--             Goto Process_End;   
--  end if;
  
  --- Shrihari/prateek Added New Report for ED Benefit  on 31/08/2014   ---

if varReportID= 'CONTRACTSHCEDULEWINDOWS1' then     
QUERY_STR := 'select '||''''||frmDate||''''||' as "ToDate",
             pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
             TRAD_CONTRACT_NO  as "ContractNo",
             pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) as "Vendor",    
             trad_product_quantity as "TotalQuantity", 
             TRAD_PRODUCT_RATE as "Price/Ton",
             trad_trade_fcy as "TotalFCYAmount", 
             trad_reference_date as "ContractDate",
             pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as "Bank",
             trad_maturity_date as "MonthlySchedule",
             trad_product_quantity as "Quantity",
             trad_trade_fcy  as "Amount",            
             nvl((select sum(brel_reversal_fcy) from trtran003 
             where brel_trade_reference=trad_trade_reference
             and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0) "SettledAmount",
                                           pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) as Category,
                                           pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,';
Query_Str1 := 'nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE 
               and HEDG_RECORD_STATUS not in(10200005,10200006,10200012)),0) as "HedgedFcy",
               (trad_trade_fcy -   nvl((select sum(brel_reversal_fcy) from trtran003 
            where brel_trade_reference=trad_trade_reference
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)  - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as "UnhedgeAmount",
               trad_trade_reference  as "ReverseReference",
               pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
               to_char(ROUND(TRAD_trade_RATE,4),''999d9999'') as "BenchMarkRate",     
               to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
               trad_maturity_date),4),''999d9999'') as "MTMRate" ,
               ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
                         trad_maturity_date) -trad_trade_rate))/trad_trade_rate)*100,4)  as "%Increase/DecreaseMTM",
               Null as "PaymentTerms"                         
                         ' || varGroupField || '
               from trtran002 
               where ((trad_process_complete=12400002) or (trad_complete_date >'||''''||frmDate||''''||' 
                               and trad_process_complete=12400001))
              and trad_record_status not in (10200005,10200006)
              and trad_maturity_date >= '||''''||frmDate||''''||'
              and trad_entry_date<='||''''||frmDate||''''||'
              and trad_trade_fcy > 0';
        delete from temp; commit;
     insert into temp values (QUERY_STR,Query_Str1 || finalcondition);commit;         
       Open Gencursor For QUERY_STR||Query_Str1||finalcondition||'order by  TRAD_PRODUCT_CATEGORY,TRAD_TRADE_CURRENCY' ;  
             Goto Process_End;   
  end if;  
if varReportID = 'EDBENIFITRPT'  then
 
   
   Open Gencursor For
   select * from(select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,            
          --  (select REMT_REMITTANCE_REFERENCE from trtran008a
          --    where remt_remittance_reference= cdel_trade_reference
           --   and remt_record_status not in (10200005,10200006)
            --  )as ContractNo,
            (select LBNK_ACCOUNT_NUMBER from trmaster306
              where LBNK_PICK_CODE= DEAL_COUNTER_PARTY
              and LBNK_RECORD_STATUS not in (10200005,10200006)
              )as AccountNo,
          --  (select TRAD_CONTRACT_NO from trtran002
          --    where trad_trade_reference= CDEL_TRADE_REFERENCE
         --     and TRAD_RECORD_STATUS not in (10200006)
          --    )
             DEAL_USER_REFERENCE as ContractNo,
            c.cdel_cancel_amount as Amount ,
             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
                               c.cdel_cancel_rate end),'999d9999') as NetRate,
            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
                               else  c.cdel_Spot_rate end),'999d9999')as Spot,
            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
                               else c.cdel_forward_rate end ),'999d9999')as FwdRate , 
            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
                               else c.cdel_margin_rate end),'999d9999') as Margin,
            deal_maturity_date as MaturityDate,
              (case when c.cdel_cancel_type=27000001 then            
                      to_char((d.deal_exchange_rate),'999d9999') else null end )as BookingRate,
            c.cdel_profit_loss as PandL,
            c.cdel_cancel_date  as CancelDate,
            --round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,           
             (c.cdel_cancel_amount) * to_char((d.deal_exchange_rate-c.cdel_cancel_rate))  as AmtInLacs,
               (case when c.cdel_cancel_type=27000002 then 'FX Utilisation'               
                  end) DealType,
           (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) 
            then  ''  when (c.cdel_cancel_type=27000002)
                  then 'ED Benifit ' ||  to_char(round((d.deal_exchange_rate-c.cdel_cancel_rate)*100,4))  || ' Paisa '
                  end) as Remarks,
                  to_char(CDEL_CANCEL_DATE,'MON-yy') as monthorder,
             --     (select REMT_REMITTANCE_DETAILS from trtran008a
              --      where remt_remittance_reference=  cdel_trade_reference
               --     and remt_record_status not in (10200005,10200006)
                --    )as Description,
                  frmDate as AsonDate,
                  toDate as ToDate
     from trtran001 d inner join trtran006 c
       on deal_deal_number= cdel_deal_number
     where deal_record_status not in (10200005,10200006) 
      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
      and (CDEL_CANCEL_DATE between frmDate and toDate))
       where Remarks like'ED Benifit%';
   -- order by monthorder asc;
     
      
      --delete from temp; commit;
     --insert into temp(TT) values (QUERY_STR||finalcondition||' order by monthorder');commit;         
       --Open Gencursor For QUERY_STR||finalcondition||' order by monthorder';
    
Goto Process_End;   
  End If;


  
  
  -- end here ----
  
  ---  Shrihari/Prateek added New Report 'PREMIUMAMORTIZATION'   on 31/08/2014
  
 if varReportID= 'PREMIUMAMORTIZATION' then   
    select min(deal_execute_date)  into tempDate     from trtran001
      where deal_process_complete =12400002
      and deal_execute_date<=frmDate;
   QUERY_STR := 'select 
        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as Company,
        --deal_dealer_remarks as ContractNo,
        --deal_execute_date as DealDate,
        pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
        --pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty, 
        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BaseCurrency,
       round(sum((fncAmountization (deal_deal_number,'||''''||tempDate||''''||')))/1000) col1, 
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',1)),''month''))))/1000) col2,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',2)),''month''))))/1000) col3,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',3)),''month''))))/1000) col4,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',4)),''month''))))/1000) col5,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',5)),''month''))))/1000) col6,';        
        
   Query_Str1 := '        
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',6)),''month''))))/1000) col7,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',7)),''month''))))/1000) col8,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',8)),''month''))))/1000) col9,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',9)),''month''))))/1000) col10,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',10)),''month''))))/1000) col11,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',11)),''month''))))/1000) col12,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',12)),''month''))))/1000) col13,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',13)),''month''))))/1000) col14,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',14)),''month''))))/1000) col15,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',15)),''month''))))/1000) col16,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',16)),''month''))))/1000) col17,
       round(sum((fncAmountization (deal_deal_number,trunc((add_months('||''''||tempDate||''''||',17)),''month''))))/1000) col18,
       
        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
       '||''''||tempDate||''''||' as AsonDate,
       '||''''||Todate||''''||' As Todate
       ' || varGroupField || '
    from trtran001        
--          where (deal_execute_date between '||''''||frmDate||''''||' and '||''''||Todate||''''||' or deal_maturity_date between '||''''||frmDate||''''||' and '||''''||Todate||''''||')
--          and DEAL_RECORD_STATUS not in (10200005,10200006)
--          and deal_deal_type not in(25400001)
          where deal_process_complete =12400002
          and deal_maturity_date-deal_execute_date <> 0
          and deal_execute_date<= '||''''||frmDate||''''||''; 
         delete from temp; commit;
     insert into temp values (QUERY_STR,Query_Str1 || finalcondition);commit; 
        
       Open Gencursor For QUERY_STR||Query_Str1||finalcondition||'group by 
       --DEAL_COUNTER_PARTY,
       DEAL_BASE_CURRENCY,
       DEAL_BACKUP_DEAL,DEAL_COMPANY_CODE,DEAL_LOCATION_CODE,DEAL_INIT_CODE'; 
         
         
         
        Goto Process_End;   
  end if;  
  
  ---  end here
 
  if varReportID ='TOIDEALSLIP' then
  Query_Str := 'select
   UPPER(PKGRETURNCURSOR.FNCGETDESCRIPTION(A.DEAL_INIT_CODE,2))  as ExposureType,
   PKGRETURNCURSOR.FNCGETDESCRIPTION(A.DEAL_COUNTER_PARTY,2)    as BankName,
   PKGRETURNCURSOR.FNCGETDESCRIPTION(A.DEAL_BASE_CURRENCY,2)    as CurrencyBought,
   PKGRETURNCURSOR.FNCGETDESCRIPTION(A.DEAL_OTHER_CURRENCY,2)   as CurrencySold,
    A.DEAL_USER_REFERENCE   as FXContractNo,
    A.DEAL_BASE_AMOUNT      as Amount,
    A.DEAL_EXCHANGE_RATE    as NetRate,
    A.DEAL_SPOT_RATE        as Spot,
    A.DEAL_Forward_RATE     as ForwardPremia,
    A.DEAL_MARGIN_RATE      as Margin,
    A.DEAL_MATURITY_DATE    as MaturityDate,
    A.DEAL_SPOT_RATE        as BookingRate,
    sum(B.CDEL_PROFIT_LOSS) OVER (PARTITION BY B.cdel_deal_number) AS "Gain/Loss",
   ((DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE)/100000) as "AMT IN LACS INR"
   FROM TRTRAN001 A  INNER JOIN trtran006 B
    ON  B.cdel_deal_number= A.DEAL_DEAL_NUMBER
      where A.deal_record_status not in (10200005,10200006) AND
      B.CDEL_RECORD_STATUS not in (10200005,10200006)' ;
     --   delete from temp;commit;
   --insert into temp values(Query_Str,finalcondition);COMMIT;
    Open GenCursor for Query_Str;
      Goto Process_End;
    end if;





--- Modifyfied by Harinath/Prateek on 18-apr-14


/*If Varreportid = 'MONTHALYCANCELLATIONREPORT' then
     if (to_char(frmDate,'MM') <=4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;

    -- NUMRECORDSETS:=2;
      Open Gencursor For
--        select
--                          to_char(deal_maturity_date,'MON-yy') MaturityMonth,
--                            frmDate datDateAsOn,
--                            sum(cdel_cancel_amount/1000000) BaseAmount,
--                            sum(CDEL_OTHER_AMOUNT/1000000) BASEAMOUNTINR,
--                            sum(CDEL_PROFIT_LOSS/1000000) GAINLOSS,
--                           round(((sum(CDEL_OTHER_AMOUNT)-sum(CDEL_PROFIT_LOSS)) / sum(cdel_cancel_amount)),3) WTDAVGRATE
--
--                  --   sum(pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency,
--                   --  CDEL_CANCEL_DATE,Deal_Buy_Sell,1, null)* cdel_cancel_amount)/sum(cdel_cancel_amount)*sum(cdel_cancel_amount) WTDAVGBASEAMOUNT,
--                   -- sum(pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency, CDEL_CANCEL_DATE,Deal_Buy_Sell,1, null)* cdel_cancel_amount)/sum(cdel_cancel_amount) WTDAVGRATE1
--                      from trtran001, trtran006
--                       where deal_deal_number= cdel_deal_number
--                      -- and deal_execute_date >='01-apr-2012'
--                      and CDEL_CANCEL_DATE <= frmDate
--                      and deal_backup_deal=33300001
--                       and deal_record_status not in(12400005,12400006)
--                       and cdel_record_status not in (12400005,12400006)
--                       and CDEL_CANCEL_DATE between tempDate  and frmDate
--                     group by
--                     --deal_company_code ,deal_backup_deal ,deal_init_code,
--                           to_char(deal_maturity_date,'MON-yy')
--                           ,to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')
--                         --  order by to_char(deal_maturity_date,'MON-yy');
--                           order by to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy');
--
                       select
        to_char(trad_maturity_date,'MON-yy') MaturityMonth,
         frmdate datDateAsOn,
         sum(cdel_cancel_amount/1000000) BaseAmount,
         sum(cdel_cancel_amount * trad_trade_rate/1000000) BASEAMOUNTINR,
          sum((select
                   sum(CDEL_PROFIT_LOSS/1000000) GAINLOSS
                      from trtran001, trtran006
                       where deal_deal_number= cdel_deal_number
                      and CDEL_CANCEL_DATE <= frmdate
                      and deal_backup_deal=33300001
                       and deal_record_status not in(12400005,12400006)
                       and cdel_record_status not in (12400005,12400006)
                       and CDEL_CANCEL_DATE between tempDate and frmdate
                       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
                     group by
                           to_char(deal_maturity_date,'MON-yy')
                           ,to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')))GAINLOSS,
                          --order by to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')) GAINLOSS,
                         --  0 OptionPremiumPaid,
    round(  ( ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) -
     ( sum((select
       sum(CDEL_PROFIT_LOSS/1000000)
            from trtran001, trtran006
       where deal_deal_number= cdel_deal_number
          and CDEL_CANCEL_DATE <= frmdate
         and deal_backup_deal=33300001
        and deal_record_status not in(12400005,12400006)
       and cdel_record_status not in (12400005,12400006)
       and CDEL_CANCEL_DATE between tempDate and frmdate
       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
       group by
       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
       to_char(deal_maturity_date,'MM-yy'))))) / (sum(cdel_cancel_amount/1000000))),2)  WTDAVGRATE,
            --  ( sum(cdel_cancel_amount/1000000) * CDEL_SPOT_RATE) WTDAVGBASEAMOUNT,
             -- CDEL_SPOT_RATE AS WTDAVGRATE1
                  NULL AS     WTDAVGBASEAMOUNT,
                  NULL AS     WTDAVGRATE1
              from trtran003,trtran002,trtran006
                  where brel_trade_reference=trad_trade_reference
                       AND CDEL_TRADE_REFERENCE= BREL_TRADE_REFERENCE
                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
                       and trad_process_complete=12400001))
                      -- and brel_entry_date >='01-apr-2012'
                      and trad_maturity_date  between tempDate and DATTEMP1 --tempDate and frmdate PRASANTA
                        and TRAD_PRODUCT_CATEGORY=33300001
                       and trad_record_status not in (10200005,10200006)
                       and brel_record_status not in (10200005,10200006)
                       and cdel_record_Status not in (10200005,10200006)
                       and cdel_cancel_date >= '01-APR-13'
           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,
           to_char(trad_maturity_date,'MON-yy'),CDEL_SPOT_RATE

             order by to_char(trad_maturity_date,'YYYYMM'),to_char(trad_maturity_date,'MON-yy') ;



                  Goto Process_End;
 End If;    */

----------------------------------------------------------------------------------------------------------------------
---  Modified by Harinath on 18-Apr-2014

--If Varreportid = 'YEARLYEXPOSURE' then
--    -- delete from temp ;
--     if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 )
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              tempDate1 := dattemp1 + 1;
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 )
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--        tempDate1 := dattemp1 + 1;
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--   insert into temp values ('Varreportid',Varreportid);
--   commit;
--
--   PKGREPORTPROGRAMS.prcreport_M_yearlyexp( frmDate ,tempDate ,datTemp );
--
--       Open Gencursor For
--
--      select  STATUS1,
--              TYPEOFTRANS1,
--              pkgreturncursor.fncgetdescription(COMPANYCODE,1)CompanyCode1,
--              CURRENCYCODE,
--              BASEAMOUNT1,
--              frmdate as DateAsOn,
--              EXCHANGERATE EXCHANGERATE1,
--              ORDER1 as DisplayOrder,
--              BASEAMOUNTINR
--              from
--              REPORT_MONTHLYREPORT_YEARLYEXP
--              ORDER  BY ORDER1 asc ;
--
--
------                  select
------                  'Cancelled' Status,
------                   datDateAsOn,
------                  pkgreturncursor.fncgetdescription( CompanyCode,1) CompanyCode,
------                   CurrencyCode,
------              sum (AmountFCY/1000000) AmountFCY1,
------              sum (AmountLocal/1000000) AmountLocal1
------              from (
------              select
------              frmDate datDateAsOn,
------              deal_company_code CompanyCode, pkgreturncursor.fncgetdescription(deal_base_currency,2) CurrencyCode,
------            deal_backup_deal ProductCode, deal_init_code SubProductCode,
------            decode(deal_buy_sell,25300001,25900012,25300002,25900062) AccountCode,
------            sum(CDEL_CANCEL_AMOUNT) AmountFcy, sum(CDEL_CANCEL_AMOUNT*cdel_cancel_rate) AmountLocal,
------            0  AmountMTMLocal
------              from trtran001, trtran006
------             where deal_deal_number= cdel_deal_number
------             -- and deal_execute_date >='01-apr-2012'
------              and  ((deal_complete_date is null) or (deal_complete_date > frmDate))
------              and deal_record_status not in(12400005,12400006)
------              and deal_backup_deal=33300001
------              and cdel_record_status not in (12400005,12400006)
------            group by deal_company_code ,deal_base_currency,deal_backup_deal,deal_init_code,
------            decode(deal_buy_sell,25300001,25900012,25300002,25900062),
------            decode(deal_buy_sell,25300001,'Hedge Buy',25300002,'Hedge Sell'))
------            group by CompanyCode,CurrencyCode,datDateAsOn
------
------            union all
----           select
----           'Setlled Exposure' Status,
----          frmDate datDateAsOn,
----         pkgreturncursor.fncgetdescription( trad_company_code,1)  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          sum(trtran006.cdel_cancel_amount/1000000) AmountFcy1,
----          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
----
----                 from trtran003,trtran002,trtran006
----                  where brel_trade_reference=trad_trade_reference
----                       and cdel_trade_reference= brel_trade_reference
----                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmDate
----                       and trad_process_complete=12400001))
----                      -- and brel_entry_date >='01-apr-2012'
----                        and TRAD_PRODUCT_CATEGORY=33300001
----                       and trad_record_status not in (10200005,10200006)
----                       and brel_record_status not in (10200005,10200006)
----                       and cdel_record_Status not in (10200005,10200006)
----                       and cdel_cancel_date >= '01-APR-13'
----           group by trad_company_code, trad_trade_currency
----
------           union all
------
------             select 'Exposure' Status,
------               frmDate datDateAsOn,
------             pkgreturncursor.fncgetdescription( trad_company_code,1)  CompanyCode,
------               pkgreturncursor.fncgetdescription(trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
------               sum(trtran006.cdel_cancel_amount/1000000) AmountFcy1,
------               sum( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
------
------                   from trtran003,trtran002,trtran006
------                    where brel_trade_reference=trad_trade_reference
------                       and cdel_trade_reference= brel_trade_reference
------                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmDate
------                       and trad_process_complete=12400001))
------                      -- and brel_entry_date >='01-apr-2012'
------                       and TRAD_PRODUCT_CATEGORY=33300001
------                       and trad_record_status not in (10200005,10200006)
------                       and brel_record_status not in (10200005,10200006)
------                       and cdel_record_Status not in (10200005,10200006)
------           group by trad_company_code, trad_trade_currency
----           union all
----          select 'Hedged Exposure' Status,
----                   frmDate datDateAsOn,
----                   pkgreturncursor.fncgetdescription( deal_company_code,1)  CompanyCode,
----                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
----                (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000) AmountFcy1,
----                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000) AmountLocal1
----                   from trtran001
----                   --left outer join trtran006 d
----                  -- on CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY
----           union all
----            select * from (select 'UnHedged Exposure' Status,
----                   frmDate datDateAsOn,
----                   pkgreturncursor.fncgetdescription( trad_company_code,1)   CompanyCode,
----                   Null CurrencyCode,
----                    sum(TRAD_TRADE_FCY/1000000) -
----                    (select (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000)
----                    from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY)
----                    AmountFcy1,
----                   sum(TRAD_TRADE_FCY*TRAD_TRADE_RATE/1000000) -
----                   (select                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000) from
----                   trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY)
----                   AmountLocal1
----                   from trtran002
----                   where   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY) ;
------                  union all
------                select 'Hedged and Settled Exposure' Status,
------                 frmDate datDateAsOn,
------                CompanyCode CompanyCode,
------                CurrencyCode CurrencyCode,
------                sum(AmountFcy1),
------                sum(AmountLocal1)
------                from
------                  ( select
------                   pkgreturncursor.fncgetdescription( deal_company_code,1)  CompanyCode,
------                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
------                 (sum (pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000) AmountFcy1,
------                  (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)*DEAL_EXCHANGE_RATE)/1000000) AmountLocal1
------                  from trtran001
------                  --left outer join trtran006 d
------                   --on CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
------                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
------                 and deal_backup_deal=33300001
------                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
------                 group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY
------                union all
------                 select
------                 pkgreturncursor.fncgetdescription( trad_company_code,1) CompanyCode,
------          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
------               sum(cdel_cancel_amount/1000000) AmountFcy1,
------                  sum(CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000)AmountLocal1
------               from trtran003, trtran002,trtran006
------                  where brel_trade_reference=trad_trade_reference
------                       and cdel_trade_reference= brel_trade_reference
------                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmDate
------                       and trad_process_complete=12400001))
------                       and TRAD_PRODUCT_CATEGORY=33300001
------                       and brel_entry_date >='01-apr-2012'
------                       and trad_record_status not in (10200005,10200006)
------                       and brel_record_status not in (10200005,10200006)
------                       and cdel_record_Status not in (10200005,10200006)
------           group by trad_company_code, trad_trade_currency)
------           group by CompanyCode,CurrencyCode;
--
----                 select
----           'Setlled Exposure' Status,
----          frmDate datDateAsOn,
----         pkgreturncursor.fncgetdescription( trad_company_code,1)  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          sum(trtran006.cdel_cancel_amount/1000000) AmountFcy1,
----         -- sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1,
----          round   ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) -
----     ( sum((select
----       sum(CDEL_PROFIT_LOSS/1000000)
----            from trtran001, trtran006
----       where deal_deal_number= cdel_deal_number
----          and CDEL_CANCEL_DATE <= frmdate
----         and deal_backup_deal=33300001
----        and deal_record_status not in(12400005,12400006)
----       and cdel_record_status not in (12400005,12400006)
----       and CDEL_CANCEL_DATE between tempDate and frmdate
----       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
----       group by
----       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
----       to_char(deal_maturity_date,'MM-yy')))),2) AmountLocal1,
----
----          ((select  sum(trtran006.cdel_cancel_amount/1000000)
----          from trtran003,trtran002,trtran006
----                  where brel_trade_reference=trad_trade_reference
----                       and cdel_trade_reference= brel_trade_reference
----                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmDate
----                       and trad_process_complete=12400001))
----                       and trtran002.TRAD_MATURITY_DATE between tempDate AND dattemp
----                      -- and brel_entry_date >='01-apr-2012'
----                        and TRAD_PRODUCT_CATEGORY=33300001
----                       and trad_record_status not in (10200005,10200006)
----                       and brel_record_status not in (10200005,10200006)
----                       and cdel_record_Status not in (10200005,10200006)
----                       --and cdel_cancel_date >= '01-APR-13'
----           group by trad_company_code, trad_trade_currency))  as CURRENTFCY,
----       round   ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) -
----     ( sum((select
----       sum(CDEL_PROFIT_LOSS/1000000)
----            from trtran001, trtran006
----       where deal_deal_number= cdel_deal_number
----          and CDEL_CANCEL_DATE <= frmdate
----         and deal_backup_deal=33300001
----        and deal_record_status not in(12400005,12400006)
----       and cdel_record_status not in (12400005,12400006)
----       and CDEL_CANCEL_DATE between tempDate and frmdate
----       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
----       group by
----       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
----       to_char(deal_maturity_date,'MM-yy')))),2) AS CURRENTINR,
------           NULL NextFInaYERARFCY,
------           NULL NexFinYearINR
----------------Modified by harinath on 29 may 14 for fy 14-15
----      ( SELECT         round(sum(cdel_cancel_amount)/1000000,2)
----                       from    trtran002,trtran006,trtran001
----                   where
----                       cdel_deal_number= deal_deal_number
----                        and cdel_RECORD_STATUS not in(10200005,10200006)
----                        and trad_trade_reference=cdel_trade_reference
----                        and deal_RECORD_STATUS not in(10200005,10200006 )
----                        and deal_backup_deal=33300001
----                        and trad_record_status=10200005
----                        and trad_product_category=33300001
----                        and cdel_trade_reference is not null
----                      --  and cdel_cancel_type =27000002
----                        and cdel_cancel_date  between tempDate and frmdate
----                        and deal_base_currency=30400004
----                       --and cdel_cancel_date >= '01-APR-13'
----           group by trad_company_code, trad_trade_currency) AS   NextFInaYERARFCY,
----
----
----          (     SELECT
----              round(sum(cdel_cancel_amount*cdel_cancel_RATE+CDEL_PROFIT_LOSS)/1000000,2)
----                from    trtran002,trtran006,trtran001
----                   where
----                       cdel_deal_number= deal_deal_number
----                        and cdel_RECORD_STATUS not in(10200005,10200006)
----                        and trad_trade_reference=cdel_trade_reference
----                        and deal_RECORD_STATUS not in(10200005,10200006 )
----                        and deal_backup_deal=33300001
----                        and trad_record_status=10200005
----                        and trad_product_category=33300001
----                        and cdel_trade_reference is not null
----                      --  and cdel_cancel_type =27000002
----                        and cdel_cancel_date  between tempDate and frmdate
----                        and deal_base_currency=30400004
----                       --and cdel_cancel_date >= '01-APR-13'
----           group by trad_company_code, trad_trade_currency) AS NexFinYearINR
----
------             ( SELECT
------             round(sum(cdel_cancel_amount*cdel_cancel_RATE+CDEL_PROFIT_LOSS)/1000000,2)
------                from    trtran002,trtran006,trtran001
------                   where
------                       cdel_deal_number= deal_deal_number
------                        and cdel_RECORD_STATUS not in(10200005,10200006)
------                        and trad_trade_reference=cdel_trade_reference
------                        and deal_RECORD_STATUS not in(10200005,10200006 )
------                        and deal_backup_deal=33300001
------                        and trad_record_status=10200005
------                        and trad_product_category=33300001
------                        and cdel_trade_reference is not null
------                      --  and cdel_cancel_type =27000002
------                        and cdel_cancel_date  between tempDate and frmdate
------                        and deal_base_currency=30400004
------                       --and cdel_cancel_date >= '01-APR-13'
------           group by trad_company_code, trad_trade_currency) AS NEXTWTDAVGRATE
----
----
----                 from trtran003,trtran002,trtran006
----                  where brel_trade_reference=trad_trade_reference
----                       and cdel_trade_reference= brel_trade_reference
----                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmDate
----                       and trad_process_complete=12400001))
----                      -- and brel_entry_date >='01-apr-2012'
----                        and TRAD_PRODUCT_CATEGORY=33300001
----                       and trad_record_status not in (10200005,10200006)
----                       and brel_record_status not in (10200005,10200006)
----                       and cdel_record_Status not in (10200005,10200006)
----                       and cdel_cancel_date >= '01-APR-13'
----           group by trad_company_code, trad_trade_currency
----
----           union all
----          select 'Hedged Exposure' Status,
----                   frmDate datDateAsOn,
----                   pkgreturncursor.fncgetdescription( deal_company_code,1)  CompanyCode,
----                   PKGRETURNCURSOR.FNCGETDESCRIPTION(DEAL_BASE_CURRENCY,2) CURRENCYCODE,
----                  round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000),2) AmountFcy1,
----                ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2) AmountLocal1,
----                   (Select sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000
----                   from trtran001
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                  AND DEAL_INIT_CODE=33800001
----                 -- and DEAL_MATURITY_DATE between tempDate and dattemp1 COMMENTED BY PRASANTA
----                 and  DEAL_MATURITY_DATE between tempDate and dattemp1 AND DEAL_MATURITY_DATE > FRMDATE AND DEAL_EXECUTE_DATE <= FRMDATE --ADDED BY PRASANTA
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY) CURRENTFCY,
----             ROUND((Select sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000
----                   from trtran001
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                  AND DEAL_INIT_CODE=33800001
----                -- AND DEAL_MATURITY_DATE BETWEEN TEMPDATE AND DATTEMP1
----                  and  DEAL_MATURITY_DATE between tempDate and dattemp1 AND DEAL_MATURITY_DATE > FRMDATE AND DEAL_EXECUTE_DATE <= FRMDATE --ADDED BY PRASANTA
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  GROUP BY DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY),2) CURRENTINR,
----            (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
----                        deal_serial_number,1,1,frmDate))/1000000) NextFInaYERARFCY,
----            ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
----                  deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),0) NexFinYearINR
----                   from trtran001
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and deal_init_code=33800001
----                 AND ((DEAL_PROCESS_COMPLETE = 12400001  AND DEAL_COMPLETE_DATE > FRMDATE) OR DEAL_PROCESS_COMPLETE = 12400002)
----                  and  DEAL_MATURITY_DATE > FRMDATE AND DEAL_EXECUTE_DATE <= FRMDATE --ADDED BY PRASANTA
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY
----
----
----           union all
----            select * from (select 'UnHedged Exposure' Status,
----                   frmDate datDateAsOn,
----                   pkgreturncursor.fncgetdescription( trad_company_code,1)   CompanyCode,
----                   Null CurrencyCode,
----                    sum(TRAD_TRADE_FCY/1000000) -
----                    (select (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000)
----                    from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY)
----                    AmountFcy1,
------                    round( ( SUM(TRAD_TRADE_FCY*(SELECT AVG(TRAD_TRADE_RATE) FROM TRTRAN002)))/1000000,2) -
------                   (select  (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'28-MAR-14')*deal_exchange_rate)/1000000) from
------                   trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
------                 and deal_backup_deal=33300001
------                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > '28-MAR-14') or DEAL_PROCESS_COMPLETE = 12400002)
------                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY)
------                   AmountLocal1,
----
----                        ( select sum(( nvl(A.fcy,0)- nvl(b.fcy,0)) * pkgforexprocess.fncgetrate(30400004,
----                  30400003, frmdate, 25300001,0,last_day(to_date('01-' || a.MaturityDate)),0))
----                   from (select (sum(TRAD_TRADE_FCY) /1000000) Fcy,to_char(trad_maturity_date,'MON-yy') MaturityDate  from trtran002
----                     WHERE   TRAD_RECORD_STATUS NOT IN(10200005,10200006 )
----                       and TRAD_MATURITY_DATE between tempDate and dattemp ---tempDate1 and dattemp PRASANTA
----                       and TRAD_PRODUCT_CATEGORY=33300001
----                       and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,to_char(trad_maturity_date,'MON-yy')) a left outer join
----
----                    (select sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000) FCY,
----                           to_char(deal_maturity_date,'MON-yy') MaturityDate
----
----                       from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                        AND DEAL_BACKUP_DEAL=33300001
----                        and DEAL_MATURITY_DATE between  tempDate and dattemp--tempDate1 and dattemp PRASANTA
----                        and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                   group by DEAL_COMPANY_CODE,to_char(deal_maturity_date,'MON-yy')) b
----                   on  a.MaturityDate= b.MaturityDate
----                   ) AmountLocal1,-----modified by manjureddy on 21-04-14 for wtd avg rate
----
----             ((select sum(TRAD_TRADE_FCY/1000000)from trtran002
----                   where   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                    and TRAD_MATURITY_DATE between tempDate and dattemp1
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY)
----                    -
----                    (select (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000)
----                    from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and DEAL_MATURITY_DATE between tempDate and dattemp1
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY))CURRENTFCY,
----
----          (SELECT    (  (select   ((select sum(TRAD_TRADE_FCY/1000000)from trtran002
----                   where   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                    and TRAD_MATURITY_DATE between tempDate and dattemp1
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY)
----                    -
----                    (select (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000)
----                    from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and deal_backup_deal=33300001
----                 and DEAL_MATURITY_DATE between tempDate and dattemp1
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY))
----
----                    from trtran002
----                   where   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY) *
----
----                     (SELECT AVG(  ROUND(PKGFOREXPROCESS.fncgetrate(30400004,
----         30400003,frmDate,0,0,ADD_MONTHS(frmDate,Months),0),2))
----         FROM   (
----          SELECT 1 Months FROM DUAL UNION ALL
----          SELECT 2 Months FROM DUAL
----          )) )
----
----           from trtran002
----                   where   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY)  AS CURRENTINR,
----
----                  ((select sum(TRAD_TRADE_FCY/1000000)from trtran002
----                   WHERE   TRAD_RECORD_STATUS NOT IN(10200005,10200006 )
----                    and TRAD_MATURITY_DATE between tempDate and dattemp--tempDate1 and dattemp  PRASANTA
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE)
----                    -
----                    (select (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000)
----                    from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 AND DEAL_BACKUP_DEAL=33300001
----                 and DEAL_MATURITY_DATE between tempDate and dattemp--tempDate1 and dattemp PRASANTA
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by DEAL_COMPANY_CODE))NextFInaYERARFCY ,
----
------            (round( ( SUM(TRAD_TRADE_FCY*(SELECT AVG(TRAD_TRADE_RATE) FROM TRTRAN002)))/1000000,2)
------                    -
------                    (select (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000)
------                    from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
------                 and deal_backup_deal=33300001
------                 and DEAL_MATURITY_DATE between tempDate1 and dattemp
------                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmDate) or DEAL_PROCESS_COMPLETE = 12400002)
------                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY))NexFinYearINR
------
----
----               -- ( select sum(nvl(A.fcy,0)- nvl(b.fcy,0)),
----                   ( select sum(( nvl(A.fcy,0)- nvl(b.fcy,0)) * pkgforexprocess.fncgetrate(30400004,
----                  30400003, frmdate, 25300001,0,last_day(to_date('01-' || a.MaturityDate)),0))
----                   from (select (sum(TRAD_TRADE_FCY) /1000000) Fcy,to_char(trad_maturity_date,'MON-yy') MaturityDate  from trtran002
----                     WHERE   TRAD_RECORD_STATUS NOT IN(10200005,10200006 )
----                       and TRAD_MATURITY_DATE between  tempDate and dattemp--tempDate1 and dattemp PRASANTA
----                       and TRAD_PRODUCT_CATEGORY=33300001
----                       and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,to_char(trad_maturity_date,'MON-yy')) a left outer join
----
----                    (select sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000) FCY,
----                           to_char(deal_maturity_date,'MON-yy') MaturityDate
----
----                       from trtran001 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                        AND DEAL_BACKUP_DEAL=33300001
----                        and DEAL_MATURITY_DATE between  tempDate and dattemp--tempDate1 and dattemp PRASANTA
----                        and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                   group by DEAL_COMPANY_CODE,to_char(deal_maturity_date,'MON-yy')) b
----                   on  a.MaturityDate= b.MaturityDate
----                   ) NexFinYearINR----modified by manjureddy on 21-04-14 for wtd avg rate
----
----                   from trtran002
----                   where   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                   and TRAD_PRODUCT_CATEGORY=33300001
----                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
----                  group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY) ;
--
--
----
----                          select
----                              'Settled Exposure' Status1,
----                              'Settled HEDGED Exposure' TypeOfTrans1,
----                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode1,
----                              pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
----                              round(sum(cdel_cancel_amount)/1000000,2) BaseAmount1,
----                              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2) BaseAmountinr,
----                               round(sum(cdel_cancel_amount*cdel_cancel_RATE)/ sum(cdel_cancel_amount),2) ExchangeRate1
----                      From Trtran002 A,Trtran006 B,Trtran001 C
----                                    Where A.Trad_Trade_Reference=B.Cdel_Trade_Reference
----                                    And B.Cdel_Deal_Number=C.Deal_Deal_Number
----                                    And A.Trad_Product_Category=33300001
----                                    And C.Deal_Backup_Deal=33300001
----                                    And B.Cdel_Cancel_Date Between tempDate and frmdate
----                                    And B.Cdel_Record_Status Not In(10200006,10200005)
----                                    And A.Trad_Record_Status=10200005
----                                    And B.Cdel_Trade_Reference Is Not Null
----                                     And C.Deal_Base_Currency=30400004
----               group by cdel_COMPANY_CODE,deal_base_CURRENCY
----             union all
----             SELECT  'Hedged Exposure' Status1, 'Settled hedged Exposure' TypeOfTrans1,
----                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
----                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
----                          round(sum(POSN_TRANSACTION_AMOUNT)/1000000,2) BaseAmount1,
----                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
----                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ sum(POSN_TRANSACTION_AMOUNT),2) ExchangeRate1
----              from trsystem997
----              where posn_transaction_amount!=0
----              and posn_fcy_rate !=0
----              and posn_product_code=33300001
----              And Posn_Due_Date  Between Tempdate And Dattemp
----              aND posn_account_code in (25900011,25900012,25900061,25900062)
----              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE
----
----
----            Union All
----          Select 'Un Hedged Exposure' Status1, 'Expected Exposure' Typeoftrans1,
----                  Unhedged.Companycode,Unhedged.Currencycode,Unhedged.Baseamount1-Hedge.Baseamount1 Baseamount1,
----                  Unhedged.Baseamountinr- Hedge.Baseamountinr Baseamountinr,
----                 Round( Round((Unhedged.Baseamountinr- Hedge.Baseamountinr),4)/Round((Unhedged.Baseamount1-Hedge.Baseamount1),4),2) Exchangerate1
----          from (Select  'Hedged Exposure' Status1, 'Hedged Exposure' Typeoftrans1,
----                          Pkgreturncursor.Fncgetdescription(Posn_Company_Code,1)  Companycode,
----                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
----                          Round(Sum(Posn_Transaction_Amount)/1000000,2) Baseamount1,
----                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
----                          Round(Sum(Posn_Transaction_Amount*Posn_Fcy_Rate)/ Sum(Posn_Transaction_Amount),2) Exchangerate1
----              From Trsystem997
----              where posn_transaction_amount!=0
----              and posn_fcy_rate !=0
----              and posn_product_code=33300001
----              And Posn_Due_Date  Between Tempdate And Dattemp
----              aND posn_account_code in (25900011,25900012,25900061,25900062)
----              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Hedge ,
----            (SELECT  'Un Hedged Exposure' Status1, 'Un Hedged Exposure' TypeOfTrans1,
----                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
----                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
----                          Round(Sum(Posn_Transaction_Amount)/1000000,2) Baseamount1,
----                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
----                          Round(Sum(Posn_Transaction_Amount*Posn_Fcy_Rate)/ Sum(Posn_Transaction_Amount),2) Exchangerate1
----              from trsystem997
----              where posn_transaction_amount!=0
----              and posn_fcy_rate !=0
----              and posn_product_code=33300001
----              and posn_due_date  between tempDate and datTemp
----              aND posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
----                                        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
----              Group By Posn_Company_Code,Posn_Currency_Code,Posn_Product_Code) unhedged);
--
-- --            Union All
--
----                Select 'Settled HEDGED Exposure' Status1, 'Settled HEDGED Exposure' Typeoftrans1,
----                  Hedged.Companycode,Hedged.Currencycode,settled.Baseamount1+Hedged.Baseamount1 Baseamount1,
----                  settled.Baseamountinr+ Hedged.Baseamountinr Baseamountinr,
----                 Round( Round((settled.Baseamountinr+Hedged.Baseamountinr),4)/Round((settled.Baseamount1+Hedged.Baseamount1),4),2) Exchangerate1
----          from
----               (select 'Settled Exposure' Status1,  'Settled Exposure' TypeOfTrans1,
----                              pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,1)  CompanyCode1,
----                              pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
----                              round(sum(cdel_cancel_amount)/1000000,2) BaseAmount1,
----                              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2) BaseAmountinr,
----                               round(sum(cdel_cancel_amount*cdel_cancel_RATE)/ sum(cdel_cancel_amount),2) ExchangeRate1
----                      From Trtran002 A,Trtran006 B,Trtran001 C
----                                    Where A.Trad_Trade_Reference=B.Cdel_Trade_Reference
----                                    And B.Cdel_Deal_Number=C.Deal_Deal_Number
----                                    And A.Trad_Product_Category=33300001
----                                    And C.Deal_Backup_Deal=33300001
----                                    And B.Cdel_Cancel_Date Between tempDate and frmdate
----                                    And B.Cdel_Record_Status Not In(10200006,10200005)
----                                    And A.Trad_Record_Status=10200005
----                                    And B.Cdel_Trade_Reference Is Not Null
----                                     And C.Deal_Base_Currency=30400004) settled,
----                                      (SELECT  'Hedged Exposure' Status1, 'Hedged Exposure' TypeOfTrans1,
----                          pkgreturncursor.fncgetdescription(posn_company_code,1)  CompanyCode,
----                          pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
----                          round(sum(POSN_TRANSACTION_AMOUNT)/1000000,2) BaseAmount1,
----                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/1000000,2) BaseAmountinr,
----                          round(sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ sum(POSN_TRANSACTION_AMOUNT),2) ExchangeRate1
----              from trsystem997
----              where posn_transaction_amount!=0
----              and posn_fcy_rate !=0
----              and posn_product_code=33300001
----              And Posn_Due_Date  Between Tempdate And Dattemp
----              aND posn_account_code in (25900011,25900012,25900061,25900062)
----              group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE)Hedged;
--
--
--
--
--         Goto Process_End;
--                 End If;

--- modified by abhijeet on 18-Jun-2014 ----
If Varreportid = 'YEARLYEXPOSURE' then   
    -- delete from temp ;
     if (to_char(frmDate,'MM') <4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
                   and TRAD_PRODUCT_CATEGORY=33300001
                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              tempDate1 := dattemp1 + 1;
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
         
         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
                   and TRAD_PRODUCT_CATEGORY=33300001
                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
        tempDate1 := dattemp1 + 1;
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
   insert into temp values ('Varreportid',Varreportid);
   commit;
   
   --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;  
   PKGREPORTPROGRAMS.prcreport_M_yearlyexp( frmDate ,tempDate ,datTemp );
   Query_str:= fncGetFinancialYear(frmdate,frmdate,1);
       Open Gencursor For
      
      select  STATUS1,
              TYPEOFTRANS1,
              pkgreturncursor.fncgetdescription(COMPANYCODE,1)CompanyCode1,
              CURRENCYCODE,
              BASEAMOUNT1,
              frmdate as DateAsOn,
              EXCHANGERATE EXCHANGERATE1,
              ORDER1 as DisplayOrder,
              BASEAMOUNTINR,
              Query_str AS FinacialYear
              from  
              REPORT_MONTHLYREPORT_YEARLYEXP
              ORDER  BY ORDER1 asc ;
                    
      

   
 
         Goto Process_End;   
                 End If; 

---- abhijeet end here --------


--Harinath on 07-mar-14

--If  Varreportid ='CONTRACTPOSITIONBANK' Then
--   Open Gencursor For
--  SELECT 3 AS DisplayOrder,
--        'Hedged' as  Status,
--         frmDate as datDateAsOn,
--         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
 --        deal_company_code  as CompanyCode,
 --        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
 --        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
  --       to_char(deal_maturity_date,'MON-yy')as MaturityMonth,
  --       to_char(deal_maturity_date,'YYYYMM') as monthorder,
  --       round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --           deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2)as  AmountLocal1,
   --      round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
   --                   deal_serial_number,1,1,frmDate))),0)as  AmountFcy1,
   --              --avg (DEAL_EXCHANGE_RATE)
 --        initcap('Amt') as  Datatype
 --  from trtran001
--   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   --and deal_backup_deal=33300001
---    and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
 --   and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
 --                         or DEAL_PROCESS_COMPLETE = 12400002)
 -- group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),deal_backup_deal,
 --            deal_company_code,DEAL_BASE_CURRENCY, DEAL_COUNTER_PARTY-
--union all
--SELECT 3 AS DisplayOrder,
--        'Hedged' as  Status,
 --        frmDate as datDateAsOn,
 --         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
 --        deal_company_code  as CompanyCode,
 --        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
 --        'Total' as CounterParty,
  --       to_char(deal_maturity_date,'MON-yy')as MaturityMonth,
   --      to_char(deal_maturity_date,'YYYYMM') as monthorder,
   --      round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
   --          deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2)as  AmountLocal1,
  --       round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
 --                     deal_serial_number,1,1,frmDate))),0)as  AmountFcy1,
 ---                --avg (DEAL_EXCHANGE_RATE)
  ---       initcap('Amt') as  Datatype
--   from trtran001
--   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   --and deal_backup_deal=33300001
    --and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
  --  and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
  --                        or DEAL_PROCESS_COMPLETE = 12400002)
 -- group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),deal_backup_deal,
 --            deal_company_code,DEAL_BASE_CURRENCY

 --     union all
  --
   --     SELECT 3 AS DisplayOrder,
   --     'Hedged' as  Status,
   --      frmDate as datDateAsOn,
   --       pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
   --      deal_company_code  as CompanyCode,
   --      pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
   --      'Total' as CounterParty,
   --      'GrandTotal' as MaturityMonth,
   --       to_char(max(add_months(frmDate,12)),'YYYYMM') monthorder,
   --      round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
   --          deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2)as  AmountLocal1,
  --       round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
 --                     deal_serial_number,1,1,frmDate))),0)as  AmountFcy1,
                 --avg (DEAL_EXCHANGE_RATE)
 --        initcap('Amt') as  Datatype
 --  from trtran001
 --  where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   --and deal_backup_deal=33300001
 --   and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
 --   and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
   --                       or DEAL_PROCESS_COMPLETE = 12400002)
 -- group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),deal_backup_deal,
 --            deal_company_code,DEAL_BASE_CURRENCY

--union all

 --select  3 AS DisplayOrder,
   --      'Hedged'as Status,
   --      frmDate as  datDateAsOn,
   --      pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
   --      deal_company_code as  CompanyCode,
   --      pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
   --      pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
   --      to_char(deal_maturity_date,'MON-yy')as MaturityMonth,
   --      to_char(deal_maturity_date,'YYYYMM') as monthorder,
   --      round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
   --        deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2) as AmountLocal1,
       -- ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000),1) AmountFcy1,
     --    case when DEAL_BASE_CURRENCY = 30400004 then
     --    round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
       --             deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
     --               sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
     --               deal_serial_number,1,1,frmDate)),4)
    --      else
    --        round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
  --          sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --          deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
  --                  end as AmountFcy1,
  --       initcap('Rate') Datatype
  --  from trtran001
  --  where DEAL_RECORD_STATUS not in(10200005,10200006 )
    --and deal_backup_deal=33300001
   -- and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
  --  and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
  --                        or DEAL_PROCESS_COMPLETE = 12400002)
  --  group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),
  --                deal_company_code,DEAL_BASE_CURRENCY,DEAL_COUNTER_PARTY,deal_backup_deal
--union all

 ---select  3 AS DisplayOrder,
   --      'Hedged'as Status,
   --      frmDate as  datDateAsOn,
   --       pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
   --      deal_company_code as  CompanyCode,
  --       pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
  --       'Total' as CounterParty,
  --       to_char(deal_maturity_date,'MON-yy')as MaturityMonth,
  --       to_char(deal_maturity_date,'YYYYMM') as monthorder,
 --        round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
 --          deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2) as AmountLocal1,
       -- ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000),1) AmountFcy1,
 --case when DEAL_BASE_CURRENCY = 30400004 then
 --        round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
 --                   deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
 --                   sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
 --                   deal_serial_number,1,1,frmDate)),4)
 --else
--round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
--sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
 --                   deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)end      as AmountFcy1,
  --       initcap('Rate') Datatype
  --  from trtran001
  --  where DEAL_RECORD_STATUS not in(10200005,10200006 )
    --and deal_backup_deal=33300001
  --  and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
  --  and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
 --                         or DEAL_PROCESS_COMPLETE = 12400002)
 --   group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),deal_backup_deal,
 --                 deal_company_code,DEAL_BASE_CURRENCY

 --union all

   --       SELECT 3 AS DisplayOrder,
   --     'Hedged' as  Status,
   --      frmDate as datDateAsOn,
   --       pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
   --      deal_company_code  as CompanyCode,
   --      pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
   --      'Total' as CounterParty,
   --       'WtAvgRate' as MaturityMonth,
   --       to_char(max(add_months(frmDate,12)),'YYYYMM') monthorder,
   --     round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
   --        deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2) as AmountLocal1,
   --    -- ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate))/1000000),1) AmountFcy1,
--case when DEAL_BASE_CURRENCY = 30400004 then
--         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
--                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
--                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
--                    deal_serial_number,1,1,frmDate)),4)
--else
--round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
--sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --                  deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)                    end as AmountFcy1,
                 --avg (DEAL_EXCHANGE_RATE)
 --        initcap('Rate') as  Datatype
 --  from trtran001
  -- where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   --and deal_backup_deal=33300001
  --  and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
  --  and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
 --                         or DEAL_PROCESS_COMPLETE = 12400002)
--  group by to_char(add_months(frmDate,12),'YYYYMM'),deal_backup_deal,
--             deal_company_code,DEAL_BASE_CURRENCY
-- union all

  --  select  3 AS DisplayOrder,
  --         'Hedged' as  Status,
  --         frmDate as datDateAsOn,
  --          pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
  --         deal_company_code as CompanyCode,
  --         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
  --         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
  --         'GrandTotal' as MaturityMonth,
  --         to_char(max(add_months(frmDate,12)),'YYYYMM') as  monthorder,
  --         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --               deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2)as AmountLocal1,
  --         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --                       deal_serial_number,1,1,frmDate))),0) as AmountFcy1,

  --       initcap('Amt') as  Datatype
  -- from trtran001
  -- where DEAL_RECORD_STATUS not in(10200005,10200006)
   --and deal_backup_deal=33300001
   --and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
   --and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
   --or DEAL_PROCESS_COMPLETE = 12400002)
   --group by DEAL_COUNTER_PARTY,deal_company_code,DEAL_BASE_CURRENCY,deal_backup_deal

--UNION ALL

  -- select  3 AS DisplayOrder,
 --         'Hedged' as Status,
 --          frmDate as datDateAsOn,
 --           pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
 --          deal_company_code  as CompanyCode,
 --          pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
 --          pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
 --          'WtAvgRate' as MaturityMonth,
 --           to_char(max(add_months(frmDate,12)),'YYYYMM') as monthorder,
 --          round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --             deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2) as AmountLocal1,
 --CASE WHEN DEAL_BASE_CURRENCY = 30100004 THEN
  ---          round (sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
  --                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE))/
   --                   sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
   --                   deal_serial_number,1,1,frmDate)),4)
--ELSE
--round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
--sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
      --              deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)               END       as AmountFcy1,

    --       initcap('Rate') as  Datatype
  --  from trtran001
  -- where DEAL_RECORD_STATUS not in(10200005,10200006)
   --and deal_backup_deal=33300001
  -- and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
  -- and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate)
                               --or DEAL_PROCESS_COMPLETE = 12400002)
  -- group by DEAL_COUNTER_PARTY,deal_company_code,DEAL_BASE_CURRENCY,deal_backup_deal

  --  Order by monthorder;



--Goto Process_End;
-- end if;




 ---harinath on 04-jan-2014
 --commented by aakash on 31-march-14
--if varReportID ='PRESENTHEDGESTATUS' THEN
--
--numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--
-- OPEN GenCursor for
--
-- select Displayorder,
--       pkgreturncursor.fncgetdescription(CompanyCode,2) CompanyCode,
--       pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
--       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
--       ProductCode as ProductCode,
--       SubProduct AS SubProduct,
--       round( AmountFCY,2) AmountFCY,  ExposureType,
--       frmdate AS AsOnDate,
--       (select RISK_LIMIT_PERCENT  ||
--        ( case
--          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
--          else  ''
--          end)
--       from trsystem012
--       where risk_risk_type=21000017
--       and risk_product_code=ProductCode
--       and risk_subproduct_code=SubProduct) LimitRange
--
-- from  (select  1 AS Displayorder,
--                posn_company_code     AS    CompanyCode,
--                posn_currency_code    AS    CurrencyCode,
--                POSN_PRODUCT_CODE     AS    ProductCode,
--            --    POSN_PRODUCT_CODE     AS    Product,
--                POSN_SUBPRODUCT_CODE  AS    SubProduct,
--                sum(posn_transaction_amount)/1000000   AS    AmountFCY,
--               (case
--                when posn_account_code in
--                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
--                when posn_account_code in
--                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                          then 'Hedged'
--                when posn_account_code in
--                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
--               when  posn_account_code in
--                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                          then 'Hedged'
--               end)   AS ExposureType,
--               frmdate AS AsOnDate
--          from trsystem997
--          where posn_transaction_amount!=0 and posn_fcy_rate !=0
--          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
--               when posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedged'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedged'
--               end)
--
--union all
--
--
--select  2 displayorder,
--        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
--        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
--        nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
--       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
--        nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
--        ( case
--          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
--          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
--          ELSE (round( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1),2))
--          end )*100  AmountFcy,
--         '% Hedge - Actual'  ExposureType,
--         frmdate AS AsOnDate
--
--  from  (select posn_company_code CompanyCode,
--               posn_currency_code CurrencyCode,
--               POSN_PRODUCT_CODE ProductCode,
--               --POSN_PRODUCT_CODE Product,
--               POSN_SUBPRODUCT_CODE SubProduct,
--               posn_account_code AccountCode,
--               sum(posn_transaction_amount/1000000) AmountFCY,
--               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
--               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
--               frmdate AS AsOnDate
--          from trsystem997
--          where posn_transaction_amount!=0 and posn_fcy_rate !=0
--           and  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,
--                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--                   POSN_SUBPRODUCT_CODE,posn_account_code) Hedge
--
--          full outer join
--
--        (select posn_company_code CompanyCode,
--               posn_currency_code CurrencyCode,
--               POSN_PRODUCT_CODE  ProductCode,
--              -- POSN_PRODUCT_CODE  Product,
--               POSN_SUBPRODUCT_CODE SubProduct,
--               posn_account_code AccountCode,
--               sum(posn_transaction_amount/1000000) AmountFCY,
--               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
--               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
--               frmdate AS AsOnDate
--          from trsystem997
--          where posn_transaction_amount!=0 and posn_fcy_rate !=0
--          and posn_account_code in
--              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--               25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--                   POSN_SUBPRODUCT_CODE,posn_account_code) Exposure
--         on hedge.CompanyCode= Exposure.CompanyCode
--         and hedge.CurrencyCode= Exposure.CurrencyCode
--         and hedge.ProductCode= Exposure.ProductCode
--         and Hedge.subproduct= Exposure.subproduct
--
--union all
--
--select 3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--       --POSN_PRODUCT_CODE Product,
--       POSN_SUBPRODUCT_CODE SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select RISK_LIMIT_PERCENT from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--      frmdate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--           POSN_SUBPRODUCT_CODE,posn_account_code
--
--union all
--
--select 4 displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--      -- POSN_PRODUCT_CODE Product,
--       POSN_SUBPRODUCT_CODE SubProduct,
--       round(sum((posn_transaction_amount*posn_fcy_rate))/sum(posn_transaction_amount),4) AmountFcy,
--       'Hedge Rate'  ExposureType,
--       frmdate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--  and  posn_account_code in
--      (25900018,25900019,25900020,25900021,25900022,25900023,
--       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--  group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--           POSN_SUBPRODUCT_CODE,posn_account_code
--
--union all
--
--select 5 displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE  ProductCode,
--     --  POSN_PRODUCT_CODE  Product,
--       POSN_SUBPRODUCT_CODE SubProduct,
--      AVG( pkgforexprocess.fncGetRate
--       (posn_currency_code,30400003,frmdate,25300001,0,null,0)) AmountFcy,
--       'Spot Rate'  ExposureType,
--       frmdate AS AsOnDate
-- from  trsystem997
-- where posn_transaction_amount!=0 and posn_fcy_rate !=0
-- and   posn_account_code in
--       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
-- group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--          POSN_SUBPRODUCT_CODE,posn_account_code
-- order by ProductCode );
--
--
-- GoTo Process_End;
-- end if;

-----modified by Abhijit on 13-JUN-14

--if varReportID ='PRESENTHEDGESTATUS' THEN
--
-- -- numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--
--OPEN GenCursor for
--
--select ProductCode as ProductCode,
--       Displayorder,
--       pkgreturncursor.fncgetdescription(CompanyCode,2) CompanyCode,
--       pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
--       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
--
--      -- SubProduct AS SubProduct,
--       round( AmountFCY,2) AmountFCY,  ExposureType,
--       frmdate AS AsOnDate,
--       (select distinct  RISK_LIMIT_PERCENT  ||
--        ( case
--          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
--          else  ''
--          end)
--       from trsystem012
--       where risk_risk_type=21000017
--       and risk_product_code=ProductCode) LimitRange
--
--from  (select  POSN_PRODUCT_CODE     AS    ProductCode,
--                1 AS Displayorder,
--                posn_company_code     AS    CompanyCode,
--                posn_currency_code    AS    CurrencyCode,
--
--            --    POSN_PRODUCT_CODE     AS    Product,
--           --     POSN_SUBPRODUCT_CODE  AS    SubProduct,
--              --  sum(posn_transaction_amount)/1000000   AS    AmountFCY,
--
--                 sum  ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
--                  and posn_subproduct_code in (
--                  33800055,33800056,33800057))
--                       then -(posn_transaction_amount)/1000000
--                  else  (posn_transaction_amount)/1000000
--
--                  end) AmountFCY,  -----added by harinath for sale order values to show negative result
--
--
--
--               (case
--                when posn_account_code in
--                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
--                when posn_account_code in
--                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                          then 'Hedged'
--                when posn_account_code in
--                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
--               when  posn_account_code in
--                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                          then 'Hedged'
--               end) AS ExposureType,
--               frmdate AS AsOnDate
--          from trsystem997
--          where posn_transaction_amount!=0 and posn_fcy_rate !=0
--          --  and posn_subproduct_code not in (33800060,33800061)
--         --   and posn_subproduct_code in  (33800055,33800056,33800057)
--          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
--               when posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedged'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedged'
--               end)
--
--union all
--
--
--select  nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
--        2 displayorder,
--        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
--        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
--
--       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
--       -- nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
--        ( case
--          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
--          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
--          ELSE (round( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1),2))
--          end )*100  AmountFcy,
--         '% Hedge - Actual'  ExposureType,
--         frmdate AS AsOnDate
--
--  from  (select POSN_PRODUCT_CODE ProductCode,
--               posn_company_code CompanyCode,
--               posn_currency_code CurrencyCode,
--
--               --POSN_PRODUCT_CODE Product,
--              -- POSN_SUBPRODUCT_CODE SubProduct,
--               posn_account_code AccountCode,
--               sum(posn_transaction_amount/1000000) AmountFCY,
--               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
--               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
--               frmdate AS AsOnDate
--          from trsystem997
--          Where Posn_Transaction_Amount!=0 And Posn_Fcy_Rate !=0
--           -- and posn_subproduct_code not in (33800060,33800061)
--           and  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,
--                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--                   posn_account_code) Hedge
--
--          full outer join
--
--        (select POSN_PRODUCT_CODE  ProductCode,
--               posn_company_code CompanyCode,
--               posn_currency_code CurrencyCode,
--
--              -- POSN_PRODUCT_CODE  Product,
--              -- POSN_SUBPRODUCT_CODE SubProduct,
--               posn_account_code AccountCode,
--               sum(posn_transaction_amount/1000000) AmountFCY,
--               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
--               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
--               frmdate AS AsOnDate
--          from trsystem997
--          where posn_transaction_amount!=0 and posn_fcy_rate !=0
--          --  and posn_subproduct_code not in (33800060,33800061)
--          and posn_account_code in
--              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--               25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--                   posn_account_code) Exposure
--         on hedge.CompanyCode= Exposure.CompanyCode
--         and hedge.CurrencyCode= Exposure.CurrencyCode
--         and hedge.ProductCode= Exposure.ProductCode
--         --and Hedge.subproduct= Exposure.subproduct
--
--union all
--
----select 3 Displayorder,
----       posn_company_code CompanyCode,
----       posn_currency_code CurrencyCode,
----       POSN_PRODUCT_CODE ProductCode,
----       --POSN_PRODUCT_CODE Product,
----       --POSN_SUBPRODUCT_CODE SubProduct,
----       NULL AS SubProduct,
----      --risk_limit_percent || '% - %' ||risk_fluct_ceo
----      ( select AVG(RISK_LIMIT_PERCENT) from trsystem012
----        where risk_risk_type=21000017
----        and risk_product_code=POSN_PRODUCT_CODE
----        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
----      '% Hedge - Policy'  ExposureType,
----      frmdate AS AsOnDate
----  from trsystem997
----  where posn_transaction_amount!=0 and posn_fcy_rate !=0
----  and posn_account_code in
----      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
----       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
----  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,
----  posn_subproduct_code,posn_account_code
--
----------query changed on 27-mar-14 by harinath
--select    distinct(POSN_PRODUCT_CODE) ProductCode,
--         3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--
--       --POSN_PRODUCT_CODE Product,
--      -- POSN_SUBPRODUCT_CODE SubProduct,
--    --   NULL AS SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select avg(RISK_LIMIT_PERCENT) from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--      ) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--     frmDate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--   -- and posn_subproduct_code not in (33800060,33800061)
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,posn_account_code
--
--union all
--
--select  POSN_PRODUCT_CODE ProductCode,
--       4 displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--      -- NULL AS SubProduct,
--      -- POSN_PRODUCT_CODE Product,
--     --  POSN_SUBPRODUCT_CODE SubProduct,
--       round(sum((posn_transaction_amount*posn_fcy_rate))/sum(posn_transaction_amount),4) AmountFcy,
--       'Hedge Rate'  ExposureType,
--       frmdate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--   -- and posn_subproduct_code not in (33800060,33800061)
--  and  posn_account_code in
--      (25900018,25900019,25900020,25900021,25900022,25900023,
--       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--  group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
--          -- POSN_SUBPRODUCT_CODE,
--           posn_account_code
--
--union all
--
--select  POSN_PRODUCT_CODE  ProductCode,
--       5 displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--
--     --  POSN_PRODUCT_CODE  Product,
--      -- POSN_SUBPRODUCT_CODE SubProduct,---commented for getting spot rate on 27-mar-2014
--      -- NULL AS SubProduct,
--      AVG( pkgforexprocess.fncGetRate
--       (posn_currency_code,30400003,frmdate,25300001,0,null,0)) AmountFcy,
--       'Spot Rate'  ExposureType,
--       frmdate AS AsOnDate
--from  trsystem997
--where posn_transaction_amount!=0 and posn_fcy_rate !=0
--  --and posn_subproduct_code not in (33800060,33800061)
--and   posn_account_code in
--       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code
--order by ProductCode );
--
--
--GoTo Process_End;
--end if;

---- Abhijeet End Here   -----------------------

--- ABhijeet modified on 18-Jun-2014 ----

  if varReportID ='PRESENTHEDGESTATUSUSD' THEN

  --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
                    
OPEN GenCursor for
                    
select ProductCode as ProductCode,
       Displayorder,
       pkgreturncursor.fncgetdescription(CompanyCode,2) CompanyCode,
       pkgreturncursor.fncgetdescription(30400004,2) CurrencyCode,
       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
      
      -- SubProduct AS SubProduct,
        round( AmountFCY,2) AmountFCY,  ExposureType,
       frmdate AS AsOnDate,
       (select distinct  RISK_LIMIT_PERCENT  ||
        ( case
          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
          else  ''
          end)
       from trsystem012
       where risk_risk_type=21000017
         and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=ProductCode
                                                                and  risk_effective_date<= frmdate
                                                               --   and risk_subproduct_code=SubProductCode
                                                                  )
       and risk_product_code=ProductCode) LimitRange
                                
from  (select  POSN_PRODUCT_CODE     AS    ProductCode,
                1 AS Displayorder,  
                posn_company_code     AS    CompanyCode,
                30400004    AS    CurrencyCode,
              
            --    POSN_PRODUCT_CODE     AS    Product,
           --     POSN_SUBPRODUCT_CODE  AS    SubProduct,
              --  sum(posn_revalue_usd)/1000000   AS    AmountFCY,
                 
                 sum  ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(POSN_REVALUE_USD)/1000000
                  else  (POSN_REVALUE_USD)/1000000
                  
                  end) AmountFCY,  -----added by harinath for sale order values to show negative result 
              
              
              
               (case
                when posn_account_code in
                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
                when posn_account_code in
                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                          then 'Hedged'
                when posn_account_code in
                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
               when  posn_account_code in
                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                          then 'Hedged'
               end) AS ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_revalue_usd!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
         --   and posn_subproduct_code in  (33800055,33800056,33800057)
          group by posn_company_code,30400004,POSN_PRODUCT_CODE, 
               (case
               when posn_account_code in
               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
               when posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                         then 'Hedged'
               when posn_account_code in
               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
               when posn_account_code in
               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                         then 'Hedged'
               end)  
                    
union all
                    
                    
select  nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
        2 displayorder,
        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
      
       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
       -- nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
        ( case
          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
          ELSE ( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1))
          end )*100  AmountFcy,
         '% Hedge - Actual'  ExposureType,
         frmdate AS AsOnDate
         
  from  (select POSN_PRODUCT_CODE ProductCode,
               posn_company_code CompanyCode,
               30400004 CurrencyCode,
              
               --POSN_PRODUCT_CODE Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
              -- posn_account_code AccountCode,
               sum(posn_revalue_usd/1000000) AmountFCY,
               sum((posn_revalue_usd*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*posn_revalue_usd),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          Where posn_revalue_usd!=0 And Posn_Fcy_Rate !=0
           -- and posn_subproduct_code not in (33800060,33800061)
           and  posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,
                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
          group by posn_company_code,30400004,POSN_PRODUCT_CODE) Hedge
          
          full outer join
      
        (select POSN_PRODUCT_CODE  ProductCode,
               posn_company_code CompanyCode,
               30400004 CurrencyCode,
              
              -- POSN_PRODUCT_CODE  Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
              -- posn_account_code AccountCode,
               sum(posn_revalue_usd/1000000) AmountFCY,
               sum((posn_revalue_usd*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*posn_revalue_usd),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
                     
          from trsystem997
          where posn_revalue_usd!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
          and posn_account_code in
              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
               25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
          group by posn_company_code,30400004,POSN_PRODUCT_CODE) Exposure
         on hedge.CompanyCode= Exposure.CompanyCode
         ---and hedge.CurrencyCode= Exposure.CurrencyCode
         and hedge.ProductCode= Exposure.ProductCode
         --and Hedge.subproduct= Exposure.subproduct

union all
                    
--select 3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--       --POSN_PRODUCT_CODE Product,
--       --POSN_SUBPRODUCT_CODE SubProduct,
--       NULL AS SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select AVG(RISK_LIMIT_PERCENT) from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--      frmdate AS AsOnDate
--  from trsystem997
--  where posn_revalue_usd!=0 and posn_fcy_rate !=0
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,
--  posn_subproduct_code,posn_account_code

--------query changed on 27-mar-14 by harinath
select    distinct(POSN_PRODUCT_CODE) ProductCode,
         3 Displayorder,
       posn_company_code CompanyCode,
       30400004 CurrencyCode,
      
       --POSN_PRODUCT_CODE Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,
    --   NULL AS SubProduct,
      --risk_limit_percent || '% - %' ||risk_fluct_ceo
      ( select avg(RISK_LIMIT_PERCENT) from trsystem012
        where risk_risk_type=21000017
          and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=POSN_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
        and risk_product_code=POSN_PRODUCT_CODE
      ) AmountFcy,
      '% Hedge - Policy'  ExposureType,
     frmDate AS AsOnDate
  from trsystem997
  where posn_revalue_usd!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and posn_account_code in
      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
  group by 30400004,POSN_PRODUCT_CODE,posn_company_code,posn_account_code

--union all
--                                
--select  POSN_PRODUCT_CODE ProductCode,
--       4 displayorder,
--       posn_company_code CompanyCode,
--       30400004 CurrencyCode,
--      -- NULL AS SubProduct,
--      -- POSN_PRODUCT_CODE Product,
--     --  POSN_SUBPRODUCT_CODE SubProduct,
--
----      Case When Posn_Currency_Code = 30400004 Then
----       Round(Sum((Posn_Revalue_Usd*Posn_Fcy_Rate))/Sum(Posn_Revalue_Usd),4)
----     Else
----       Round(Sum((Posn_Revalue_Usd*(Posn_Fcy_Rate/POSN_USD_RATE)))/Sum(Posn_Revalue_Usd),4)
----     End AmountFcy,
--       Round(Sum(Posn_Revalue_Usd*(Posn_Fcy_Rate/decode(Posn_Currency_Code,30400004,1,Posn_Usd_Rate)))/Sum(Posn_Revalue_Usd),4) AmountFcy,
--       'Hedge Rate'  ExposureType,
--       frmdate AS AsOnDate  
--  from trsystem997
--  where posn_revalue_usd!=0 and posn_fcy_rate !=0
--   -- and posn_subproduct_code not in (33800060,33800061)
--  and  posn_account_code in
--      (25900018,25900019,25900020,25900021,25900022,25900023,
--       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--  group by posn_company_code,POSN_PRODUCT_CODE,
--          -- POSN_SUBPRODUCT_CODE,
--           posn_account_code
--
--union all
--
--select  POSN_PRODUCT_CODE  ProductCode,
--       5 displayorder,
--       posn_company_code CompanyCode,
--       30400004 CurrencyCode,
--      
--     --  POSN_PRODUCT_CODE  Product,
--      -- POSN_SUBPRODUCT_CODE SubProduct,---commented for getting spot rate on 27-mar-2014
--      -- NULL AS SubProduct,
--      AVG( pkgforexprocess.fncGetRate
--       (30400004,30400003,frmdate,25300001,0,null,0)) AmountFcy,
--       'Spot Rate'  ExposureType,
--       frmdate AS AsOnDate
--from  trsystem997
--where posn_revalue_usd!=0 and posn_fcy_rate !=0
--  --and posn_subproduct_code not in (33800060,33800061)
----and   posn_account_code in
----       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
----        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--group by 30400004,POSN_PRODUCT_CODE,posn_company_code
order by ProductCode );
                                                    
                                                    
GoTo Process_End;
end if;

if varReportID ='PRESENTHEDGESTATUS' THEN

  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
                    
OPEN GenCursor for
                    
select ProductCode as ProductCode,
       Displayorder,
       pkgreturncursor.fncgetdescription(CompanyCode,1) CompanyCode,
       pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
      
      -- SubProduct AS SubProduct,
       round( AmountFCY,2) AmountFCY,  ExposureType,
       frmdate AS AsOnDate,
       (select distinct  RISK_LIMIT_PERCENT  ||
        ( case
          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
          else  ''
          end)
       from trsystem012
       where risk_risk_type=21000017
         and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=ProductCode
                                                                and  risk_effective_date<= frmdate
                                                               --   and risk_subproduct_code=SubProductCode
                                                                  )
       and risk_product_code=ProductCode) LimitRange
                                
from  (select  POSN_PRODUCT_CODE     AS    ProductCode,
                1 AS Displayorder,  
                posn_company_code     AS    CompanyCode,
                posn_currency_code    AS    CurrencyCode,
              
            --    POSN_PRODUCT_CODE     AS    Product,
           --     POSN_SUBPRODUCT_CODE  AS    SubProduct,
              --  sum(posn_transaction_amount)/1000000   AS    AmountFCY,
                 
                 sum  ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount)/1000000
                  else  (posn_transaction_amount)/1000000
                  
                  end) AmountFCY,  -----added by harinath for sale order values to show negative result 
              
              
              
               (case
                when posn_account_code in
                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
                when posn_account_code in
                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                          then 'Hedged'
                when posn_account_code in
                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
               when  posn_account_code in
                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                          then 'Hedged'
               end) AS ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
         --   and posn_subproduct_code in  (33800055,33800056,33800057)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,  
               (case
               when posn_account_code in
               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Commitments'
               when posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                         then 'Hedged'
               when posn_account_code in
               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Commitments'
               when posn_account_code in
               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                         then 'Hedged'
               end)  
                    
union all
                    
                    
select  nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
        2 displayorder,
        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
      
       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
       -- nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
        ( case
          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
          ELSE ( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1))
          end )*100  AmountFcy,
         '% Hedge - Actual'  ExposureType,
         frmdate AS AsOnDate

  from  (select POSN_PRODUCT_CODE ProductCode,
               posn_company_code CompanyCode,
               posn_currency_code CurrencyCode,
              
               --POSN_PRODUCT_CODE Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
 --              posn_account_code AccountCode,
               sum(posn_transaction_amount/1000000) AmountFCY,
               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          Where Posn_Transaction_Amount!=0 And Posn_Fcy_Rate !=0
           -- and posn_subproduct_code not in (33800060,33800061)
           and  posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,
                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Hedge
          
          full outer join
      
        (select POSN_PRODUCT_CODE  ProductCode,
               posn_company_code CompanyCode,
               posn_currency_code CurrencyCode,
              
              -- POSN_PRODUCT_CODE  Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
               --posn_account_code AccountCode,
               sum(posn_transaction_amount/1000000) AmountFCY,
               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
          and posn_account_code in
              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
               25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Exposure
         on hedge.CompanyCode= Exposure.CompanyCode
         and hedge.CurrencyCode= Exposure.CurrencyCode
         and hedge.ProductCode= Exposure.ProductCode
         --and Hedge.subproduct= Exposure.subproduct

union all
                    
--select 3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--       --POSN_PRODUCT_CODE Product,
--       --POSN_SUBPRODUCT_CODE SubProduct,
--       NULL AS SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select AVG(RISK_LIMIT_PERCENT) from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--      frmdate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,
--  posn_subproduct_code,posn_account_code

--------query changed on 27-mar-14 by harinath
select    distinct(POSN_PRODUCT_CODE) ProductCode,
         3 Displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      
       --POSN_PRODUCT_CODE Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,
    --   NULL AS SubProduct,
      --risk_limit_percent || '% - %' ||risk_fluct_ceo
      ( select avg(RISK_LIMIT_PERCENT) from trsystem012
        where risk_risk_type=21000017
          and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=POSN_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
        and risk_product_code=POSN_PRODUCT_CODE
      ) AmountFcy,
      '% Hedge - Policy'  ExposureType,
     frmDate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and posn_account_code in
      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,posn_account_code

union all
                                
select  POSN_PRODUCT_CODE ProductCode,
       4 displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      -- NULL AS SubProduct,
      -- POSN_PRODUCT_CODE Product,
     --  POSN_SUBPRODUCT_CODE SubProduct,
       round(sum((posn_transaction_amount*posn_fcy_rate))/sum(posn_transaction_amount),4) AmountFcy,
       'Hedge Rate'  ExposureType,
       frmdate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and  posn_account_code in
      (25900018,25900019,25900020,25900021,25900022,25900023,
       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
  group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
          -- POSN_SUBPRODUCT_CODE,
           posn_account_code

union all

select  POSN_PRODUCT_CODE  ProductCode,
       5 displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      
     --  POSN_PRODUCT_CODE  Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,---commented for getting spot rate on 27-mar-2014
      -- NULL AS SubProduct,
      AVG( pkgforexprocess.fncGetRate
       (posn_currency_code,30400003,frmdate,25300001,0,null,0)) AmountFcy,
       'Spot Rate'  ExposureType,
       frmdate AS AsOnDate
from  trsystem997
where posn_transaction_amount!=0 and posn_fcy_rate !=0
  --and posn_subproduct_code not in (33800060,33800061)
--and   posn_account_code in
--       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code
order by ProductCode );
                                                    
                                                    
GoTo Process_End;
end if;


-----  end here -----

-------------------------------------------------------------------

-----------------------------------'MONTHALYCANCELLATIONREPORT' -----------------
--If Varreportid = 'MONTHALYCANCELLATIONREPORT' then
--     if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--
--  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--   pkgreportprograms.prcFxForcastReportPopulate(frmDate);
--  Open Gencursor For
--
--     select  MaturityMonth, datDateAsOn,BaseAmount,
--             BASEAMOUNTINR,GAINLOSS, WTDAVGRATE,
--             WTDAVGBASEAMOUNT,WTDAVGRATE1,
--             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL
--      from (select  to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
--                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
--              frmDate datDateAsOn,
--              (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null
--               else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--              round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR,
--              (Pandl.pandl/1000000)  GAINLOSS,
--                round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) -
--                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number
--                       left outer join
--                      (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= deal_deal_number
--                          and  deal_backup_deal=33300001
--                          and cdel_cancel_date  between tempDate and frmDate
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_cancel_type=27000001
--                          group by to_char(cdel_cancel_DATE,'YYYYMM') ) PandL
--                    on PandL.MaturityMonth = to_char(cdel_cancel_DATE,'YYYYMM')
--                       where cdel_RECORD_STATUS not in(10200005,10200006)
--                        and deal_RECORD_STATUS not in(10200005,10200006 )
--                        and trad_product_category =33300001
--                        and trad_record_status=10200005
--                        and trad_product_category=33300001
--                        and cdel_trade_reference is not null
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date  between tempDate and frmDate
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <=frmDate
--
--                   group by to_char(cdel_cancel_DATE,'YYYYMM'),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy'),pandl.pandl)
--
--                   Order by  MonthOrder,MaturityMonth;
--
--
--                   Goto Process_End;
-- End If;


 ---- modified by abhijeet on 18-jun-2014 -----

  If Varreportid = 'MONTHALYCANCELLATIONREPORT' then
     if (to_char(frmDate,'MM') < 4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
  
  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
   --pkgreportprograms.prcFxForcastReportPopulate(frmDate);
 -- Open Gencursor For
 
  Query_Str:='select  MaturityMonth, datDateAsOn,BaseAmount,
             BASEAMOUNTINR,Nvl(GAINLOSS,0) GAINLOSS, WTDAVGRATE,
             WTDAVGBASEAMOUNT,WTDAVGRATE1,
             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL,
             Cashamountfcy,Cashamountinr,Frwdamountfcy,Frwdamountinr,Round(Spotrate,2) As Spotrate,
             Srno
      from (select  to_char(cdel_cancel_DATE,''MON-yy'') MaturityMonth,
                   to_char(cdel_cancel_DATE,''YYYYMM'') MonthOrder,
              frmDate datDateAsOn,
--              (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--               Else Round(Sum(Cdel_Cancel_Amount)/1000000,2) End) Baseamount,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
              Pandl.pandl  GAINLOSS,
                round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),1,tempDate,frmDate) SpotRate,
                          2 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number';
             Query_Str1:='left outer join 
                      (select to_char(cdel_cancel_DATE,''YYYYMM'') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                              sum(cdel_cancel_amounteal_deal_number
                          and  deal_backup_de) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= dal=33300001
                          and cdel_cancel_date  between tempDate and frmDate
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_cancel_type=27000001
                          and cdel_record_status not in (10200005,10200006)
                          group by to_char(cdel_cancel_DATE,''YYYYMM'') ) PandL
                    On Pandl.Maturitymonth = To_Char(Cdel_Cancel_Date,''YYYYMM'')
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_product_category =33300001
                        and trad_record_status=10200005 
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  between tempDate and frmDate
                        And Deal_Base_Currency=30400004
  
                     --   AND CDEL_CANCEL_DATE <=frmDate
                     
                   group by to_char(cdel_cancel_DATE,''YYYYMM''),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,''YYYYMM''),
                              to_char(cdel_cancel_DATE,''MON-yy''),pandl.pandl
                              UNION ALL
                     select  --to_char(cdel_cancel_DATE,''MON-yy'')
                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,1)  MaturityMonth,
                   --to_char(cdel_cancel_DATE,''YYYYMM'')
                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MonthOrder,
                      frmDate datDateAsOn,
--                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
                      Pandl.pandl  GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (Nvl(Pandl.Pandl,0)/1000000))/Sum(Cdel_Cancel_Amount/1000000),2) Wtdavgrate,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),3,tempDate,tempDate) SpotRate,
                          1 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number';
                   Query_Str2:='left outer join 
                      (select fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                      sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                          and  deal_backup_deal=33300001
                          and cdel_cancel_date  < tempDate
                          and cdel_cancel_date > ''31-MAR-2014''
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_record_status not in (10200005,10200006)                          
                          and cdel_cancel_type=27000001
                          group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,''YYYYMM'')
                          ) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_product_category =33300001
                        and trad_record_status=10200005 
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  < tempDate
                        
                        and cdel_cancel_date > ''31-MAR-2014''
                        and deal_base_currency=30400004
                     --   AND CDEL_CANCEL_DATE <=frmDate
                     
                   group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,''YYYYMM''),
                   cdel_COMPANY_CODE,deal_base_CURRENCY
                   --to_char(cdel_cancel_DATE,''YYYYMM''),
                   ,fncGetFinancialYear(frmDate,cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),3,tempDate,tempDate),
                    --          to_char(cdel_cancel_DATE,''MON-yy'')
                              pandl.pandl ';
                              
                        Query_Str3:=' UNION ALL
                              
                      select  --to_char(cdel_cancel_DATE,''MON-yy'')
                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,1)  MaturityMonth,
                   --to_char(cdel_cancel_DATE,''YYYYMM'')
                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MonthOrder,
                      frmDate datDateAsOn,
--                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
                      Pandl.pandl GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),2,tempDate,frmDate) SpotRate,
                          3 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number';
                Query_Str4:='left outer join 
                      (select fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                      sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                          And  Deal_Backup_Deal=33300001
                          and cdel_cancel_date between tempDate and frmDate
                          --and cdel_cancel_date > ''31-MAR-2014''
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_cancel_type=27000001
                          and cdel_record_status not in (10200005,10200006)
                          group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,''YYYYMM'')
                          ) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_product_category =33300001
                        and trad_record_status=10200005 
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date between tempDate and frmDate
                        --and cdel_cancel_date > ''31-MAR-2014''
                        and deal_base_currency=30400004
                     --   AND CDEL_CANCEL_DATE <=frmDate
                     
                   group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,''YYYYMM''),
                   cdel_COMPANY_CODE,deal_base_CURRENCY
                   --to_char(cdel_cancel_DATE,''YYYYMM''),
                   ,fncGetFinancialYear(frmDate,cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),2,tempDate,frmDate),
                    --          to_char(cdel_cancel_DATE,''MON-yy'')
                              pandl.pandl 
                              
                              )
                              
                   Order by  MonthOrder,MaturityMonth,SrNo';

                  delete from temp;commit;
                  insert into temp values (Query_Str,Query_Str1);commit;
                  insert into temp values(Query_Str2,Query_Str3);commit;
                  insert into temp values(Query_Str4,Query_Str);commit;
              open gencursor for (Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4);
                   Goto Process_End;   
 End If;  



 --- abhijeet end here -----








   -- NUMRECORDSETS:=2;
 --     Open Gencursor For
--        select
--                          to_char(deal_maturity_date,'MON-yy') MaturityMonth,
--                            frmDate datDateAsOn,
--                            sum(cdel_cancel_amount/1000000) BaseAmount,
--                            sum(CDEL_OTHER_AMOUNT/1000000) BASEAMOUNTINR,
--                            sum(CDEL_PROFIT_LOSS/1000000) GAINLOSS,
--                           round(((sum(CDEL_OTHER_AMOUNT)-sum(CDEL_PROFIT_LOSS)) / sum(cdel_cancel_amount)),3) WTDAVGRATE
--
--                  --   sum(pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency,
--                   --  CDEL_CANCEL_DATE,Deal_Buy_Sell,1, null)* cdel_cancel_amount)/sum(cdel_cancel_amount)*sum(cdel_cancel_amount) WTDAVGBASEAMOUNT,
--                   -- sum(pkgforexprocess.fncgetrate(deal_base_currency, deal_other_currency, CDEL_CANCEL_DATE,Deal_Buy_Sell,1, null)* cdel_cancel_amount)/sum(cdel_cancel_amount) WTDAVGRATE1
--                      from trtran001, trtran006
--                       where deal_deal_number= cdel_deal_number
--                      -- and deal_execute_date >='01-apr-2012'
--                      and CDEL_CANCEL_DATE <= frmDate
--                      and deal_backup_deal=33300001
--                       and deal_record_status not in(12400005,12400006)
--                       and cdel_record_status not in (12400005,12400006)
--                       and CDEL_CANCEL_DATE between tempDate  and frmDate
--                     group by
--                     --deal_company_code ,deal_backup_deal ,deal_init_code,
--                           to_char(deal_maturity_date,'MON-yy')
--                           ,to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')
--                         --  order by to_char(deal_maturity_date,'MON-yy');
--                           order by to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy');
--
--                       select
--        to_char(trad_maturity_date,'MON-yy') MaturityMonth,
--         frmdate datDateAsOn,
--         sum(cdel_cancel_amount/1000000) BaseAmount,
--         sum(cdel_cancel_amount * trad_trade_rate/1000000) BASEAMOUNTINR,
--          sum((select
--                   sum(CDEL_PROFIT_LOSS/1000000) GAINLOSS
--                      from trtran001, trtran006
--                       where deal_deal_number= cdel_deal_number
--                      and CDEL_CANCEL_DATE <= frmdate
--                      and deal_backup_deal=33300001
--                       and deal_record_status not in(12400005,12400006)
--                       and cdel_record_status not in (12400005,12400006)
--                       and CDEL_CANCEL_DATE between tempDate and frmdate
--                       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
--                     group by
--                           to_char(deal_maturity_date,'MON-yy')
--                           ,to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')))GAINLOSS,
--                          --order by to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')) GAINLOSS,
--                         --  0 OptionPremiumPaid,
--    round(  ( ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) -
--     ( sum((select
--       sum(CDEL_PROFIT_LOSS/1000000)
--            from trtran001, trtran006
--       where deal_deal_number= cdel_deal_number
--          and CDEL_CANCEL_DATE <= frmdate
--         and deal_backup_deal=33300001
--        and deal_record_status not in(12400005,12400006)
--       and cdel_record_status not in (12400005,12400006)
--       and CDEL_CANCEL_DATE between tempDate and frmdate
--       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
--       group by
--       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
--       to_char(deal_maturity_date,'MM-yy'))))) / (sum(cdel_cancel_amount/1000000))),2)  WTDAVGRATE,
--            --  ( sum(cdel_cancel_amount/1000000) * CDEL_SPOT_RATE) WTDAVGBASEAMOUNT,
--             -- CDEL_SPOT_RATE AS WTDAVGRATE1
--                  NULL AS     WTDAVGBASEAMOUNT,
--                  NULL AS     WTDAVGRATE1
--              from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                      and trad_maturity_date  between  tempDate and frmdate
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >= '01-APR-13'
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,
--           to_char(trad_maturity_date,'MON-yy'),CDEL_SPOT_RATE
--
--             order by to_char(trad_maturity_date,'YYYYMM'),to_char(trad_maturity_date,'MON-yy') ;
--
--
--
--                  Goto Process_End;
-- End If;




-------------------------------------

---------------------PYMENT IN MN--------------
-- if VARREPORTID= 'PAYMENTREPORTFCY' then
--
--
--   if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              --dattemp := ;
--              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 )
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--
--             -- dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 )
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--         --dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--
--
--
-- open GENCURSOR for
--
--  select * from (
--
---- select
----           'Settled Exposure' Status,
----          frmdate datDateAsOn,
----          trad_company_code  CompanyCode,
----          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
----          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
----          to_char(trad_maturity_date,'YYYYMM') monthorder,
----          (sum(BREL_REVERSAL_FCY)/1000000) AmountFcy1,
----          sum ( BREL_REVERSAL_FCY*BREL_REVERSAL_RATE) AmountLocal1
----
----                  from trtran003 left outer join trtran002
----                 on  brel_trade_reference=trad_trade_reference
----                and trad_record_status not in (10200005,10200006)
----                 and TRAD_PRODUCT_CATEGORY=33300001
----                 and brel_record_status not in (10200005,10200006)
----                      -- and brel_entry_date >='01-apr-2012'
----                       and trad_record_status not in (10200005,10200006)
----                       and brel_record_status not in (10200005,10200006)
----                       and trad_maturity_date  between  tempDate and dattemp
----                        WHERE trad_maturity_date IS NOT NULL
----
----                     --  and cdel_record_Status not in (10200005,10200006)
----           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
----          -- ,to_char(trad_maturity_date,'yy'),to_char(trad_maturity_date,'MM-yy')
----
----
----           union all
----            select 'Hedged Exposure' Status,
----                   frmdate datDateAsOn,
----                   DEAL_COMPANY_CODE  CompanyCode,
----                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
----                   to_char(deal_maturity_date,'MON-yy') MaturityMonth,
----                    to_char(deal_maturity_date,'YYYYMM') monthorder,
----             (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000) AmountFcy1,
----                   sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)AmountLocal1
----                   from trtran001
----                   --left outer join trtran006 d
----                   --on CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
----                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
----                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                 and deal_maturity_date  between  tempDate and dattemp
----                  and  deal_maturity_date IS NOT NULL
----                      group by  to_char(deal_maturity_date,'YYYYMM'),DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'MON-yy')
----                  --    ,to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')
----                  --      order by to_char(deal_maturity_date,'yy'),to_char(deal_maturity_date,'MM-yy')
----                union  all
----                 select
----                       'open' Status,
----                        frmdate datDateAsOn,
----                         DEAL_COMPANY_CODE  CompanyCode,
----                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
----                   to_char(TRAD_MATURITY_DATE,'MON-yy') MaturityMonth,
----                    to_char(trad_maturity_date,'YYYYMM') monthorder,
----                   ((sum(TRAD_TRADE_FCY)-(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))))/1000000) AmountFcy1,
----                  round((sum(TRAD_TRADE_FCY)-(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))))* AVG(TRAD_TRADE_RATE),2) AmountLocal1
----
----                   from trtran001,trtran002
----                 --  on TRAD_TRADE_CURRENCY=DEAL_BASE_CURRENCY
----                   where
----                  -- TRAD_TRADE_CURRENCY=DEAL_BASE_CURRENCY and
----                   TRAD_RECORD_STATUS not in(10200005,10200006 )
----                    and trad_maturity_date IS NOT NULL
----                    and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
----                     --group by TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY )
----                  and  DEAL_RECORD_STATUS not in(10200005,10200006 )
----                  and trad_maturity_date  between  tempDate and dattemp
----                   and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
----                  group by to_char(trad_maturity_date,'YYYYMM'),DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,TRAD_TRADE_CURRENCY,to_char(TRAD_MATURITY_DATE,'MON-yy'))
----               --   ,to_char(trad_maturity_date,'yy'),to_char(trad_maturity_date,'MM-yy')
----                 --      order by to_char(trad_maturity_date,'yy'),to_char(trad_maturity_date,'MM-yy');
----
----             order by 6;
--
--           select
--          2  AS DisplayOrder,
--           'Settled' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--        ROUND(  sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--
--                  from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                      and trad_maturity_date  between  tempDate and dattemp
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >= tempDate
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--           Union All
--
--            select
--            1 AS DisplayOrder,
--           'Estimated Exp' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--
--                  from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                        and trad_maturity_date  between  tempDate and dattemp
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >= tempDate
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--
--           UNION ALL
--          select
--          1 AS DisplayOrder,
--           'Estimated Exp' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trad_trade_fcy/1000000),1) AmountFcy1,
--          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
--                    from trtran002
--                  where TRAD_RECORD_STATUS not in(10200005,10200006 )
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                   and trad_maturity_date  between  tempDate and dattemp
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--          Union All
--
--         select
--        3 AS DisplayOrder,
--         'Hedged' Status,
--                  frmdate datDateAsOn,
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--        ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000),1) AmountFcy1,
--                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
--                 and deal_backup_deal=33300001
--                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
--         UNION ALL
--
--      SELECT
--      4  AS DisplayOrder,
--                  'Open' Status,
--                  frmdate datDateAs,
--                      exposure.CompanyCode CompanyCode,
--                      exposure.CurrencyCode CurrencyCode,
--                      exposure.MaturityMonth MaturityMonth,
--                    Exposure. monthorder monthorder,
--           TRUNC( (Exposure.AmountFcy1- NVL(Hedge.AmountFcy1,0)),2) as  AmountFcy1,
--                  exposure. AmountLocal1 AmountLocal1
--
--   from   (select
--
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trad_trade_fcy/1000000),2) AmountFcy1,
--          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
--                    from trtran002
--                  where TRAD_RECORD_STATUS not in(10200005,10200006 )
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                   and trad_maturity_date  between  tempDate and '31-DEC-14'
--                and ((TRAD_PROCESS_COMPLETE = 12400001
--                and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002)
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code,
--           trad_trade_currency,to_char(trad_maturity_date,'MON-yy')) Exposure
--     FULL OUTER JOIN
--
--         (select
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--               TRUNC( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                              1,1,frmdate))/1000000),2) AmountFcy1,
--                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                               1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 )
--                 and deal_backup_deal=33300001
--                and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002)
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),
--                  to_char(deal_maturity_date,'MON-yy')) Hedge
--         on exposure.MaturityMonth= Hedge.MaturityMonth
--)
--
--                  order by 6;
--
--    Goto Process_End;
--  end if;
--
--
----end
----------------New Report Added from other Source---------as on 24/06/2015---

   if varReportID = 'STOPLOSSHEDGE' then
     CompanyCode     := GConst.fncxmlExtract(xmltype(ParamData),'CompanyID',CompanyCode);
     prcGenerateStopLossHedge(varUserID,CompanyCode,30400004,frmDate);
      OPEN GenCursor for
           select upper(monthName) monthName,
            Exports,
            ExpForwards,
            expAvgBookRate,
            expAvgDealRate,
            --(nvl(Exports,0) - nvl(ExpForwards,0))*(pkgForexProcess.fncGetRate(CURRENCY,30400003,ASONDATE,25300002,0,null,0)- nvl(expAvgBookRate,0))ExportStopLoss,
            (nvl(Exports,0) - nvl(ExpForwards,0))* (mtmrateexp - nvl(expAvgBookRate,0))ExportStopLoss,
            mtmrateexp mtmrateexport,
            --pkgForexProcess.fncGetRate(CURRENCY,30400003,ASONDATE,25300002,0,null,0) mtmrateexport,
            Imports,
            ImpAvgDealRate,
            ImpForwards,
            ImpAvgBookRate,
            --(nvl(Imports,0) - nvl(ImpForwards,0))*(nvl(ImpAvgDealRate,0) - pkgForexProcess.fncGetRate(CURRENCY,30400003,ASONDATE,25300001,0,null,0))ImportStopLoss,
            --(Imports - nvl(ImpForwards,0))*(nvl(ImpAvgBookRate,0) - pkgForexProcess.fncGetRate(CURRENCY,30400003,ASONDATE,25300001,0,null,0))ImportStopLoss,
            (Imports - nvl(ImpForwards,0))*(nvl(ImpAvgBookRate,0) - mtmrateimp)ImportStopLoss,
            mtmrateimp mtmrateimport,
            --pkgForexProcess.fncGetRate(CURRENCY,30400003,ASONDATE,25300001,0,null,0) mtmrateimport,
            pkgreturncursor.fncgetdescription(Company,1) Compshortdesc,
            pkgreturncursor.fncgetdescription(Currency,2) Curshortdesc,
            ASONDATE  frmDate,
            ImpForwardsINR,
            ImportsINR,
            ExpForwardsINR,
            ExportsINR,
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 1 and PRODUCTCODE = 25900011) as FRWCONTRACTIMP, -- Import Forward contract
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 2 and PRODUCTCODE = 25900061) as FRWCONTRACTEXP, -- EXport Forward contract            
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 1 and PRODUCTCODE = 25900018) as FUTUREIMP, -- Import FUTURE            
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 2 and PRODUCTCODE = 25900078) as FUTUREEXP, -- Export Future            
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 1 and PRODUCTCODE = 25900020) as OPTIONIMP, -- Import Option            
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 2 and PRODUCTCODE = 25900082) as OPTIONEXP, -- Export Option            
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 2 and PRODUCTCODE = 25900073) as BCLOANEXP, -- Export BCloan            
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 1 and PRODUCTCODE = 25900001) as CONOREDRIMP, -- Import Conformed orders
            (select FRWCONTRACT  from trsystem985 where IMPEXP = 1 and PRODUCTCODE = 25900051) as CONOREDRIMPEXP -- Export Conformed orders
--            (select FRWCONTRACT  from trsystem985 where IMPEXP = 1 and PRODUCTCODE = 25900011) as FRWCONTRACTIMP, -- Import Forward contract            
            from trsystem972;
      Goto Process_End;   
   end if;

   if Varreportid='M2MFORUNHEDGED' then
    Open Gencursor For
       SELECT 
      pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) as BuyerSeller,
      pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) outstanding,
      --pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) as UnhedgeAmount,
      (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as UnhedgeAmount,
      --nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as UnhedgeAmount,
      TRAD_REFERENCE_DATE as ReferenceDate,
      TRAD_MATURITY_FROM as DuedateLC,
      TRAD_MATURITY_DATE as DuedateBC,
      nvl(trad_spot_rate,0) as CostFixRate,
      TRAD_FORWARD_RATE + nvl(TRAD_MARGIN_RATE,0) as FWDPrimium,
      case  when TRAD_IMPORT_EXPORT > 25900050 then
      nvl(trad_spot_rate,0) + nvl(TRAD_FORWARD_RATE,0) + nvl(TRAD_MARGIN_RATE,0) 
      else 
      nvl(trad_spot_rate,0) + nvl(TRAD_FORWARD_RATE,0) - nvl(TRAD_MARGIN_RATE,0) 
      end as Totalrate,
      pkgforexprocess.fncGetRate(TRAD_TRADE_CURRENCY,30400003,frmDate,
      (case when TRAD_IMPORT_EXPORT > 25900050 then 25300001 else 25300002 end),0,null,0) as RbiRefRate,
      
     (pkgforexprocess.fncGetRate(TRAD_TRADE_CURRENCY,30400003,frmDate,
     (case when TRAD_IMPORT_EXPORT > 25900050 then 25300001 else 25300002 end),0,TRAD_MATURITY_DATE,0) - pkgforexprocess.fncGetRate(TRAD_TRADE_CURRENCY,30400003,frmDate,
     (case when TRAD_IMPORT_EXPORT > 25900050 then 25300001 else 25300002 end),0,null,0))   FWDPrimiumRBI,
      
      fncFrwdPrimium(TRAD_MATURITY_DATE,frmDate,1) + fncFrwdPrimium(frmDate,frmDate,2)as TotalRateRbi,
     trad_trade_rate - 
     (fncFrwdPrimium(TRAD_MATURITY_DATE,frmDate,1) + fncFrwdPrimium(frmDate,frmDate,2))as MTM,
             (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0))
        * (trad_trade_rate - (fncFrwdPrimium(TRAD_MATURITY_DATE,frmDate,1) + fncFrwdPrimium(frmDate,frmDate,2)))MTMAmt,
          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
          to_char(to_date(TRAD_MATURITY_DATE,'dd/mm/yyyy'),'MON YY')  as matmonth,
          to_char(to_date(TRAD_MATURITY_DATE,'dd/mm/yyyy'),'YYYYMM') as matyear,
          to_char(frmDate,'dd-MM-yyyy') as  FromDate ,
          to_char(ToDate,'dd-MM-yyyy') as ToDate,
          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) * trad_spot_rate as CostFixInr,
          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) * (trad_spot_rate + nvl(TRAD_FORWARD_RATE,0)) as SpotINR,
          (Trad_Maturity_Date - pkgforexprocess.fncgetcurrspotdate(Trad_Trade_Currency,30400003, frmDate)) NoDates,
           pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) CurrencyCode,
           TRAD_TRADE_REFERENCE as ReferenceNo,
           Case when TRAD_IMPORT_EXPORT > 25900050 then
            'EXPOSURE IMPORT' 
           else
            'EXPOSURE EXPORT' 
           end ImportExport 
      FROM   trtran002
      WHERE  (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,frmDate) - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) > 0
       and TRAD_RECORD_STATUS not in(10200005,10200006,10200012) and
                        ((TRAD_PROCESS_COMPLETE = 12400001  and trad_complete_date > frmDate) or TRAD_PROCESS_COMPLETE = 12400002)
                        order by to_char(to_date(TRAD_MATURITY_DATE,'dd/mm/yyyy'),'YYYYMM');
   
   
   Goto Process_End;   
 
 End If;
 
 if varReportID='OVERALLGAINLOSS' then
  delete from trsystem981;commit;
  insert into trsystem981 values(frmDate,toDate);
  delete from trsystem978;commit;
  insert into trsystem978 values (toDate); 
  Query_Str :='select * from( select to_char(to_date(DuedateBC,''dd/mm/yyyy''),''YYYYMM'') OrderDate, 
  tradereference, 
  null as dealnumber,
  BuyerSeller,
  outstanding,
  UnhedgeAmount,
  ReferenceDate,
  DuedateLC,
  DuedateBC,
  Totalrate,
  mtmRate TotalMtmRate,
  case when processcomplete = 12400002 then
  (Totalrate - mtmRate) * outstanding 
  else (totalRate - EffectTradeRate) * TradeAmount
  end as MtmPandL,
  LocalBank,
  case when processcomplete = 12400002 then ''O'' else ''C'' end  as Status,
  Null as CancelDate,
  TradeAmount as CancelAmount,
  EffectTradeRate as CancelRate,
  '||''''||frmDate||''''||'  as FromDate,
  '||''''||toDate||''''||'  as ToDate,
  pkgreturnreport.getCompanyName() as CompanyName,
  to_char(to_date(DuedateBC,''dd/mm/yyyy''),''MON YY'')  as matmonth,
  to_char(to_date(DuedateBC,''dd/mm/yyyy''),''YYYYMM'') as matyear,
  pkgreturncursor.fncgetdescription(currencycode,2) Currency,
  pkgreturncursor.fncgetdescription(companycode,2) Company,
  currencycode,companycode,DEALDATE
  from vewReportExposure  where Totalrate <> 0 
  Union ALL ';
  Query_Str1 :=' select
  to_char(to_date(maturity,''dd/mm/yyyy''),''YYYYMM'') OrderDate,
  null tradereference,
  dealnumber as dealnumber,
  BUYSELL as BuyerSeller,
  BALANCEFCY as  outstanding,
  PANDLFCY as UnhedgeAmount,
  DEALDATE as ReferenceDate,
  maturity as DuedateLC,
  MATURITY as DuedateBC,
  Exrate  as Totalrate,
  M2MRATE as TotalMtmRate,
  Case when status = 12400002 or canceldate is null then
  vewReportForward.MTMPANDL  else PANDLFCY
  end as  MTMPandL,
  bankcode LocalBank,
  Case when status = 12400002 then ''O'' else ''C'' end as Status,
  vewReportForward.CANCELDATE CancelDate,
  vewReportForward.CANCELAMOUNT CancelAmount,
  round(vewReportForward.CANCELRATE,2) CancelRate,
  '||''''||frmDate||''''||'  as FromDate,
  '||''''||toDate||''''||'  as ToDate,
  pkgreturnreport.getCompanyName() as CompanyName,
  to_char(to_date(MATURITY,''dd/mm/yyyy''),''MON YY'')  as matmonth,
  to_char(to_date(MATURITY,''dd/mm/yyyy''),''YYYYMM'') as matyear,
  pkgreturncursor.fncgetdescription(currencycode,2) Currency,
  pkgreturncursor.fncgetdescription(companycode,2) Company,
  currencycode,companycode,DEALDATE
  from vewReportForward where status = 12400002';
  Query_Str2 :=' UNION ALL select
  to_char(to_date(maturity,''dd/mm/yyyy''),''YYYYMM'') OrderDate,
  null tradereference,
  dealnumber as dealnumber,
  BUYSELL as BuyerSeller,
  BALANCEFCY as  outstanding,
  PANDLFCY as UnhedgeAmount,
  DEALDATE as ReferenceDate,
  maturity as DuedateLC,
  MATURITY as DuedateBC,
  Exrate  as Totalrate,
  M2MRATE as TotalMtmRate,
  PANDLFCY  MTMPandL,
  bankcode LocalBank,
  ''C'' as Status,
  vewReportForward.CANCELDATE CancelDate,
  vewReportForward.CANCELAMOUNT CancelAmount,
  round(vewReportForward.CANCELRATE,2) CancelRate,
  '||''''||frmDate||''''||'  as FromDate,
  '||''''||toDate||''''||'  as ToDate,
  pkgreturnreport.getCompanyName() as CompanyName,
  to_char(to_date(MATURITY,''dd/mm/yyyy''),''MON YY'')  as matmonth,
  to_char(to_date(MATURITY,''dd/mm/yyyy''),''YYYYMM'') as matyear,
  pkgreturncursor.fncgetdescription(currencycode,2) Currency,
  pkgreturncursor.fncgetdescription(companycode,2) Company,
  currencycode,companycode,DEALDATE
  from vewReportForward where canceldate is not null
  ) where DEALDATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'';
  delete from temp; commit;
  insert into  temp values(Query_Str||Query_Str1,finalCondition);
  open Gencursor for  Query_Str || Query_Str1||Query_Str2||finalCondition|| 'order by 1';
  Goto Process_End;   
end if;

   if Varreportid='TESTREPORT' then
    Open Gencursor For
       SELECT lbnk_pick_code PickCode,lbnk_short_description Sdescription,lbnk_long_description Ldescription from trmaster306;
    Goto Process_End;   
 
 End If;
 
    if Varreportid='FWDRATEAGREEMENT' then
    Open Gencursor For
             select 
                      pkgreturncursor.fncgetdescription(IFRA_COMPANY_CODE,1) as Company,
                      pkgreturncursor.fncgetdescription(IFRA_LOCATION_CODE,1) as Location1,
                      pkgreturncursor.fncgetdescription(IFRA_PORTFOLIO,2) as Portfolio,
                      pkgreturncursor.fncgetdescription(IFRA_SUB_PORTFOLIO,2) as SubPortfolio,
                      IFRA_FRA_NUMBER as FRANumber,
                      IFRA_EXECUTE_DATE as ExecuteDate,
                      pkgreturncursor.fncgetdescription(IFRA_BUY_SELL,2) as BuySell,
                      pkgreturncursor.fncgetdescription(IFRA_COUNTER_PARTY,2) as CounterParty,
                      pkgreturncursor.fncgetdescription(IFRA_CURRENCY_CODE,2) as Currency,
                      IFRA_NOTIONAL_AMOUNT as NotionalAmount,
                      IFRA_NOTIONAL_AMOUNT-nvl((select sum(IFRS_NOTIONAL_AMOUNT) from trtran090a where IFRA_FRA_NUMBER=IFRS_FRA_NUMBER and ifra_record_status not in(10200005,10200006) ),0) AS OutstandingAmt,
                      pkgreturncursor.fncgetdescription(IFRA_STERLING_PERIOD,2) as SterlingPeriod,
                      IFRA_INTEREST_STARTDATE as InterestStartDate,
                      IFRA_INTEREST_ENDDATE as InterestEndDate,
                      IFRA_FRA_RATE as FRARate,
                      pkgreturncursor.fncgetdescription(IFRA_INTEREST_DAYSTYPE,2) as InterestDaystype,
                      pkgreturncursor.fncgetdescription(IFRA_RATE_TYPE,2) as  RateType,
                      --IFRA_PROCESS_COMPLETE as  Status,
                      --IFRA_COMPLETE_DATE as CompleteDate,
                      IFRA_USER_REFERENCE as UserReference,
                      IFRA_USER_REMARKS as UserRemarks,
                      IFRA_BASE_RATE as BaseRate,
                      IFRA_SPREAD as SpreadRate,
                      IFRA_EXPIRY_DATE as ExpiryDate,
                      frmDate as AsonDate,
                      toDate as ToDate,
                      pkgreturncursor.fncgetdescription(IFRA_Hedge_Trade,2)As HedgeOrTrade 
                  from trtran090
                  where ((IFRA_PROCESS_COMPLETE = 12400001  and IFRA_complete_date > frmDate) or IFRA_PROCESS_COMPLETE = 12400002)
                  and IFRA_EXECUTE_DATE <=frmDate
                  AND ifra_record_status NOT IN(10200005,10200006);
   Goto Process_End;  
 End If;

if Varreportid='FWDRATESETTLEMENT' then
    Open Gencursor For
    SELECT 
                      pkgreturncursor.fncgetdescription(IFRA_COMPANY_CODE,1) as Company,                     
                      pkgreturncursor.fncgetdescription(IFRA_PORTFOLIO,2) as Portfolio,
                      pkgreturncursor.fncgetdescription(IFRA_SUB_PORTFOLIO,2) as SubPortfolio,                     
                      IFRA_EXECUTE_DATE as ExecuteDate,
                      pkgreturncursor.fncgetdescription(IFRA_BUY_SELL,2) as BuySell,
                      pkgreturncursor.fncgetdescription(IFRA_COUNTER_PARTY,2) as CounterParty,
                      pkgreturncursor.fncgetdescription(IFRA_CURRENCY_CODE,2) as Currency,
                      IFRA_NOTIONAL_AMOUNT as BaseAmt,
                      IFRS_FRA_NUMBER AS FwdRateSettleRefNo,
                      IFRS_SERIAL_NUMBER as SerialNo,
                      IFRS_SETTLEMENT_DATE as SettlementDate,
                      IFRS_FRA_REFRATE as RefRate,
                      IFRS_BASE_RATE as BaseRate,
                      IFRS_SPREAD as SpreadRate,
                      IFRS_CONVERSION_RATE as ConversionRate,
                      IFRS_PAYOFF_LOCALAMOUNT as PayOffLocalAmt,
                      IFRS_PAYOFF_AMOUNT as PayOffAmt,
                      pkgreturncursor.fncgetdescription(IFRS_PAYOFF_TYPE,2) as PayOffType,
                      IFRS_PAYOFF_DATE as PayOffDate,
                      IFRS_NOTIONAL_AMOUNT as SettlementAmt,
                      IFRS_CONFIRM_DATE as ConfirmDate,
                      IFRS_BANK_REFERENCE as BankRef,
                      frmDate as AsonDate,
                      toDate as ToDate,
                      pkgreturncursor.fncgetdescription(IFRS_Hedge_Trade,2)As HedgeOrTrade                       
                      from trtran090A, trtran090                      
                       where IFRA_FRA_NUMBER=IFRS_FRA_NUMBER
                       and IFRS_SETTLEMENT_DATE<=frmDate
                       and ifra_record_status not in(10200005,10200006)                       
                      and ifrs_record_status not in(10200005,10200006);
   Goto Process_End;  
 End If;
if Varreportid='INTERESTRATESWAP' then
    Open Gencursor For
        select
                pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,1) as Company,
                pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) as Location1,
                pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) as PortFolio,
                pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) as SubPortfolio,
                IIRS_IRS_NUMBER as RefNo,
                IIRS_EXECUTE_DATE as ExecuteDate,
                pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) as Bank, 
                IIRS_NOTIONAL_AMOUNT as Amount,
                IIRS_USER_REFERENCE as UserRef,
                IIRS_USER_REMARKS as UserRemarks,
                IIRS_EXPIRY_DATE as ExpiryDate,
                IIRS_START_DATE as StartDate,
                IIRS_TENOR_NUMBER ||'-'||pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2)as Tenor,
                IIRS_CONFIRM_DATE as ConfirmDate,
                IIRS_BANK_REFERENCE as BankRef,
                IIRS_BO_REMARK as BoRemark,
                frmDate as AsonDate,
                toDate as ToDate,
                pkgreturncursor.fncgetdescription(IIRS_HEDGE_TRADE,2) AS HedgeOrTrade
        from trtran091
        where ((IIRS_PROCESS_COMPLETE = 12400001  and IIRS_complete_date > frmDate) or IIRS_PROCESS_COMPLETE = 12400002)
        and IIRS_EXECUTE_DATE<=frmDate
        and iirs_record_status not in(10200005,10200006);
   Goto Process_End;  
 End If;
 ----COMMENTED BY AAKASH 24-JUN-16
--if Varreportid='ACCRUALCASHFLOWNEW' then
--    Open Gencursor For        
--          with CaldataFixed AS 
--          (Select pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
--                 IIRM_INTEND_DATE PaymentDate,
--                 (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--                      when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--                      when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
--                      days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end) InterestDays,
--                 (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
--                      when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
--                      when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
--                      days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
--                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
--                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
--                  pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE) FloatingRate,
--                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
--                   IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
--                   round((IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100.0000,4) FinalRate,
--                c.iirs_notional_amount NotionalAmount
--          from trtran091B inner join trtran091a b
--          on IIRM_IRS_NUMBER=iirl_irs_number
--          inner join trtran091 c
--          on iirl_irs_number= iirs_irs_number
--          where IIRL_INT_TYPE=80300001) --Fixed)
--          , CaldataFloating as
--          (Select pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
--                 IIRM_INTEND_DATE PaymentDate,
--                 (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--                      when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--                      when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
--                      days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end) InterestDays,
--                 (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
--                      when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
--                          (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
--                      when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
--                      days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
--                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
--                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
--                 round(pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100,4) FloatingRate,
--                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
--                   IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
--                   round(((pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100)
--                          +(IIRL_SPREAD/10000)),4) FinalRate,
--                c.iirs_notional_amount NotionalAmount
--          from trtran091B inner join trtran091a b
--          on IIRM_IRS_NUMBER=iirl_irs_number
--          inner join trtran091 c
--          on iirl_irs_number= iirs_irs_number
--          where IIRL_INT_TYPE=80300002) --Fixed)
--          SELECT fix.IRSNumber as  IRSNumber,
--          fix.SerialNumber as SerialNumber,
--          fix.InterestStartDate as InterestStartDate ,
--          fix.PaymentDate as PaymentDate,
--          fix.InterestDays as InterestDays,
--          fix.InterestDaysType as  InterestDaysType,
--          fix.RateType as RateType,
--          fix.FloatingRate as FloatingRate,
--          fix.BuySell as BuySell,
--          fix.InterestType as InterestType,
--          fix.InterestCharge as InterestType,
--          fix.BaseRate as BaseRate ,
--          fix.Spread as Spread,
--          round(fix.FinalRate *100,4) as FinalRate,
--          fix.NotionalAmount as NotionalAmount,
--          nvl(round(fix.NotionalAmount*fix.FinalRate*fix.InterestDaysCal,2),0) fixInterestAmount,
--          Flo.PaymentDate as FloPaymentDate ,
--          Flo.InterestDays as FloInterestDays,
--          Flo.InterestDaysType as FloInterestDaysType ,
--          Flo.RateType as FloRateType,
--          Flo.FloatingRate as FloFloatingRate ,
--          Flo.BuySell as FloBuySell ,
--          Flo.InterestType as FloInterestType,
--          Flo.InterestCharge as FloInterestCharge,
--          Flo.FloatingRate*100 as FloBaseRate,
--          Flo.Spread as FloSpread ,
--          round(Flo.FinalRate *100,4) as FloFinalRate,
--          Flo.NotionalAmount as FloNotionalAmount,
--          nvl(round(Flo.NotionalAmount*Flo.FinalRate*Flo.InterestDaysCal,2),0) FloInterestAmount,
--          frmDate as AsonDate,
--          toDate as ToDate,
--          fix.Company as Company
--          FROM CaldataFloating Flo full outer join 
--          CaldataFixed fix
--          on flo.IRSNumber=fix.IRSNumber
--          and flo.SerialNumber= fix.SerialNumber
--          and flo.InterestStartDate=fix.InterestStartDate;
--   Goto Process_End;  
-- End If; 

-----Modified by Ishwar\Aakash 24-JUN-16
--IF Varreportid='ACCRUALCASHFLOWNEW' THEN
--    Open Gencursor For        
--         with CaldataFixed AS 
--          (SELECT pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
--                 IIRM_INTEND_DATE IntEndDate, IIRM_SETTLEMENT_DATE PaymentDate,
--         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
--            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
--        (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
--            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
--            when IIRL_INTEREST_DAYSTYPE  in(41200003,41200005,41200004) then --INT360DAYS
--            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
--                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
--                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
--                  pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE) FloatingRate,
--                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
--                   IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
--                   round((IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100.0000,4) FinalRate,
--                c.iirs_notional_amount NotionalAmount,
--                c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
--                C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
--                c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE
--          from trtran091B inner join trtran091a b
--          on IIRM_IRS_NUMBER=iirl_irs_number
--          inner join trtran091 c
--          on iirl_irs_number= iirs_irs_number
--          where IIRL_INT_TYPE=80300001)
--          , CaldataFloating as
--          (SELECT pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
--                 IIRM_INTEND_DATE IntEndDate, IIRM_SETTLEMENT_DATE PaymentDate,
--         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
--            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
--            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
--          (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
--            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
--                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
--            WHEN IIRL_INTEREST_DAYSTYPE  IN(41200003,41200005,41200004) THEN --INT360DAYS
--            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
--                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
--                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
--                 round(pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100,4) FloatingRate,
--                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
--                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
--                   IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
--                   round(((pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100)
--                          +(IIRL_SPREAD/10000)),4) FinalRate,
--                c.iirs_notional_amount NotionalAmount,
--                c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
--                C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
--                c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE, 
--                pkgreturncursor.fncgetdescription(iirl_currency_code,2)Currency,
--                'U' Status,
--                0 as SpotRate                
--          from trtran091B inner join trtran091a b 
--          on IIRM_IRS_NUMBER=iirl_irs_number
--          inner join trtran091 c
--          on iirl_irs_number= iirs_irs_number
--          where IIRL_INT_TYPE=80300002) --Fixed)
--          SELECT fix.IRSNumber as  IRSNumber,
--          fix.SerialNumber as SerialNumber,
--          fix.InterestStartDate as InterestStartDate ,
--          fix.IntEndDate as IntEndDate,
--          fix.PaymentDate as PaymentDate,
--          fix.InterestDays as InterestDays,
--          fix.InterestDaysType as  InterestDaysType,
--          fix.RateType as RateType,
--          fix.FloatingRate as FloatingRate,
--          fix.BuySell as BuySell,
--          fix.InterestType as InterestType,
--          fix.InterestCharge as InterestType,
--          fix.BaseRate as BaseRate ,
--          fix.Spread as Spread,
--          round(fix.FinalRate *100,4) as FinalRate,
--          fix.NotionalAmount as NotionalAmount,
--          nvl(round(fix.NotionalAmount*fix.FinalRate*fix.InterestDaysCal,2),0) fixInterestAmount,
--          Flo.PaymentDate AS FloPaymentDate ,
--          flo.InterestStartDate as FloInterestStartDate,
--          Flo.InterestDays AS FloInterestDays,
--          flo.IntEndDate as FloIntEndDate,
--          Flo.InterestDaysType as FloInterestDaysType ,
--          Flo.RateType as FloRateType,
--          Flo.FloatingRate as FloFloatingRate ,
--          Flo.BuySell as FloBuySell ,
--          Flo.InterestType as FloInterestType,
--          Flo.InterestCharge as FloInterestCharge,
--          Flo.FloatingRate*100 as FloBaseRate,
--          Flo.Spread as FloSpread ,
--          round(Flo.FinalRate *100,4) as FloFinalRate,
--          Flo.NotionalAmount as FloNotionalAmount,
--          nvl(round(Flo.NotionalAmount*Flo.FinalRate*Flo.InterestDaysCal,2),0) FloInterestAmount,
--          frmDate as AsonDate,
--          toDate as ToDate,
--          fix.Company as Company,
--          Flo.Currency AS Currency,
--          Flo.Status as Status,
--          Flo.SpotRate as SpotRate          
--          FROM CaldataFloating Flo full outer join 
--          CaldataFixed fix
--          on flo.IRSNumber=fix.IRSNumber
--          and flo.SerialNumber= fix.SerialNumber
--          AND flo.InterestStartDate=fix.InterestStartDate;
-- -- Open Gencursor For Query_Str||Query_Str1||Query_Str2||finalCondition;          
--   Goto Process_End;  
-- End If; 

 IF Varreportid='ACCRUALCASHFLOWNEW' THEN
    Open Gencursor For        
         with CaldataFixed AS 
          (SELECT pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
                 IIRM_INTEND_DATE IntEndDate, IIRM_SETTLEMENT_DATE PaymentDate,
         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
        (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            when IIRL_INTEREST_DAYSTYPE  in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
                  pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE) FloatingRate,
                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
                   IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
                   round((IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100.0000,4) FinalRate,
                c.iirs_notional_amount NotionalAmount,
                c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
                C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
                c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE,
                iirm_interest_amount as InterestAmount
          from trtran091B inner join trtran091a b
          on IIRM_IRS_NUMBER=iirl_irs_number
          and iirl_serial_number = iirm_serial_number
          inner join trtran091 c
          on iirl_irs_number= iirs_irs_number
          where IIRL_INT_TYPE=80300001)
          , CaldataFloating as
          (SELECT pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
                 IIRM_INTEND_DATE IntEndDate, IIRM_SETTLEMENT_DATE PaymentDate,
         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
          (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            WHEN IIRL_INTEREST_DAYSTYPE  IN(41200003,41200005,41200004) THEN --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
                 round(pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100,4) FloatingRate,
                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
                   CASE WHEN iirm_process_complete = 12400001 THEN
                   iirm_BASE_RATE
                   else IIRL_BASE_RATE end as BaseRate,
                   CASE WHEN iirm_process_complete = 12400001 THEN
                   iirm_spread
                   else IIRL_SPREAD  end Spread ,
                   CASE WHEN iirm_process_complete = 12400001 THEN
                   iirm_final_rate
                   else round(((pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100)
                          +(IIRL_SPREAD/10000)),4)end as FinalRate,
                c.iirs_notional_amount NotionalAmount,
                c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
                C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
                c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE, 
                pkgreturncursor.fncgetdescription(iirl_currency_code,2)Currency,
                CASE WHEN iirm_process_complete = 12400001 THEN
                'R' ELSE
                'U' end as Status,
                IIRM_SPOT_RATE as SpotRate,
                iirm_interest_amount as IntAmount,
                iirm_net_cashflow as netCashFlow
          from trtran091B inner join trtran091a b 
          on IIRM_IRS_NUMBER=iirl_irs_number
          inner join trtran091 c
          on iirl_irs_number= iirs_irs_number
          where IIRL_INT_TYPE=80300002) --Fixed)
          SELECT fix.IRSNumber as  IRSNumber,
          fix.SerialNumber as SerialNumber,
          fix.InterestStartDate as InterestStartDate ,
          fix.IntEndDate as IntEndDate,
          fix.PaymentDate as PaymentDate,
          fix.InterestDays as InterestDays,
          fix.InterestDaysType as  InterestDaysType,
          fix.RateType as RateType,
          fix.FloatingRate as FloatingRate,
          fix.BuySell as BuySell,
          fix.InterestType as InterestType,
          fix.InterestCharge as InterestType,
          fix.BaseRate as BaseRate ,
          fix.Spread as Spread,
          fix.FinalRate  as FinalRate,
          fix.NotionalAmount as NotionalAmount,
          fix.InterestAmount as fixInterestAmount,
          --nvl(round(fix.NotionalAmount*fix.FinalRate*fix.InterestDaysCal,2),0) fixInterestAmount,
          Flo.PaymentDate AS FloPaymentDate ,
          flo.InterestStartDate as FloInterestStartDate,
          Flo.InterestDays AS FloInterestDays,
          flo.IntEndDate as FloIntEndDate,
          Flo.InterestDaysType as FloInterestDaysType ,
          Flo.RateType as FloRateType,
          Flo.FloatingRate as FloFloatingRate ,
          Flo.BuySell as FloBuySell ,
          Flo.InterestType as FloInterestType,
          Flo.InterestCharge as FloInterestCharge,
          Flo.FloatingRate*100 as FloBaseRate,
          Flo.Spread as FloSpread ,
          Flo.FinalRate as FloFinalRate,
          Flo.NotionalAmount as FloNotionalAmount,
          case when flo.status = 'R' then
          IntAmount
          else nvl(round(Flo.NotionalAmount*Flo.FinalRate*Flo.InterestDaysCal,2),0) end as FloInterestAmount,
          frmDate as AsonDate,
          toDate as ToDate,
          fix.Company as Company,
          Flo.Currency AS Currency,
          Flo.Status as Status,
          Flo.SpotRate as SpotRate ,
          Flo.netCashFlow as netCashFlow
          FROM CaldataFloating Flo full outer join 
          CaldataFixed fix
          on flo.IRSNumber=fix.IRSNumber
          --and flo.SerialNumber= fix.SerialNumber
          AND flo.InterestStartDate=fix.InterestStartDate;
          
--          on flo.IRSNumber=fix.IRSNumber
--          --and flo.SerialNumber= fix.SerialNumber
--          --and flo.IntEndDate = fix.IntEndDate
--          and flo.InterestStartDate = fix.IntEndDate
--          and flo.PaymentDate = fix.PaymentDate;
          --AND flo.InterestStartDate=fix.InterestStartDate;
 -- Open Gencursor For Query_Str||Query_Str1||Query_Str2||finalCondition;          
   Goto Process_End;  
 End If;  

-----END

 --------------------------------------
 if Varreportid='ACCRUALCASHFLOW' then
    Open Gencursor For
--        select 
--                    'RWL' as company,
--                    '06-sep-15' as valueDate,
--                    '10-sep-15' as CashFlowDate,
--                    '15000' as NotionalAmt,
--                    '1000' as RFAmt,
--                    '.000023' as RFRate,
--                    '' as RFActby360,
--                    '15000' as PFAmt,
--                    '' as PF3MLiborset,
--                    '10-sep-15' as PFDate,
--                    '10-sep-15' as PFDays,
--                    '' as PF3MLiborSet1,
--                    '10-sep-15' as PFDate1,
--                    '10' as PFDays1,
--                    '.000052' as PFSpread,
--                    '' as PFActby360,
--                    '100000' as ReceivePay,
--                    '50000' as ReceivePay1
--                    --frmDate as AsonDate,
--                    --Todate As Todate
--            from dual;
       with CaldataFixed AS 
(Select IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE valueDate,
       IIRM_INTEND_DATE CashFlowDate,
       (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end) InterestDays,
       (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
             pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) RFActby360,
        pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
        pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE) FloatingRate,
        pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
         pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
         pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
         IIRL_BASE_RATE BaseRate,IIRL_SPREAD PFSpread ,
        (case when IIRL_INT_TYPE=80300001 then --Fixed
                (IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100
             when IIRL_INT_TYPE=80300002 then --Floating
                (pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)
                +(IIRL_SPREAD/10000)) end) RFRate,
      c.iirs_notional_amount NotionalAmt
from trtran091B inner join trtran091a b
on IIRM_IRS_NUMBER=iirl_irs_number
inner join trtran091 c
on iirl_irs_number= iirs_irs_number
where IIRL_INT_TYPE=80300001) --Fixed)
, CaldataFloating as
(Select IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE valueDate,
       IIRM_INTEND_DATE CashFlowDate,
       (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end) PFDays,
       (case when IIRL_INTEREST_DAYSTYPE= 41200001 then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            when IIRL_INTEREST_DAYSTYPE=41200002 then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            when IIRL_INTEREST_DAYSTYPE=41200003 then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
             pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
        pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
        pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE) PF3MLiborset,
        pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
         pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
         pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
         IIRL_BASE_RATE BaseRate,IIRL_SPREAD PFSpread ,
        (case when IIRL_INT_TYPE=80300001 then --Fixed
                (IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100
             when IIRL_INT_TYPE=80300002 then --Floating
                (pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)
                +(IIRL_SPREAD/10000)) end) FinalRate,
      c.iirs_notional_amount NotionalAmt
from trtran091B inner join trtran091a b
on IIRM_IRS_NUMBER=iirl_irs_number
inner join trtran091 c
on iirl_irs_number= iirs_irs_number
where IIRL_INT_TYPE=80300002) --Fixed)
SELECT fix.IRSNumber,fix.SerialNumber,fix.valueDate,

fix.CashFlowDate,fix.InterestDays,fix.RFActby360,
fix.RateType,fix.FloatingRate,fix.BuySell,fix.InterestType,
fix.InterestCharge,fix.BaseRate,fix.PFSpread,fix.RFRate,fix.NotionalAmt,
round(fix.NotionalAmt*fix.RFRate*fix.InterestDaysCal,2) RFAmt,

Flo.CashFlowDate,Flo.PFDays,Flo.InterestDaysType,
Flo.RateType,Flo.PF3MLiborset,Flo.BuySell,Flo.InterestType,
Flo.InterestCharge,Flo.BaseRate,Flo.PFSpread,Flo.FinalRate,Flo.NotionalAmt,
round(Flo.NotionalAmt*Flo.FinalRate*Flo.InterestDaysCal,2) PFAmt

FROM CaldataFloating Flo full outer join 
CaldataFixed fix
on flo.IRSNumber=fix.IRSNumber
and flo.SerialNumber= fix.SerialNumber
and flo.valueDate=fix.valueDate;
    Goto Process_End;  
 End If;
------------------------------------------------
  IF Varreportid='IRSVALUATIONRPT' THEN
  DELETE FROM temp;COMMIT;
  insert into temp values('chandra',123); commit;
Query_str :=  ' WITH Caldata AS
(SELECT  pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,
  IIRM_IRS_NUMBER IRSNumber,
  IIRM_SERIAL_NUMBER SerialNumber,
  IIRM_INTSTART_DATE InterestStartDate,
  IIRM_INTEND_DATE IntEndDate,
  IIRM_SETTLEMENT_DATE PaymentDate,
  IIRM_INTFIXING_DATE FixingDate,
         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
--  (IIRM_INTEND_DATE-IIRM_INTSTART_DATE) InterestDays,
(case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            when IIRL_INTEREST_DAYSTYPE  in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
  pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
  0 FloatingRate,
  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell, ';
Query_Str1 := ' pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
         pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
        IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
        nvl((case when IIRL_INT_TYPE=80300001 then 
                (IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100
             when IIRL_INT_TYPE=80300002 then 
                (pkgforexprocess.fncGetIRSRate('||''''||frmDate||''''||',IIRM_INTEND_DATE,IIRL_RATE_TYPE)
                +(IIRL_SPREAD/10000)) end),0) FinalRate,
      c.iirs_notional_amount NotionalAmount,
      '||''''||frmDate||''''||' as AsonDate,
      '||''''||toDate||''''||'  as ToDate,
      c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
      C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
      c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE, IIRM_INTEREST_AMOUNT InterestAmount ' ;
Query_Str2 := 'from trtran091B inner join trtran091a b
ON IIRM_IRS_NUMBER=iirl_irs_number
and iirm_serial_number= iirl_serial_number
inner join trtran091 c
ON iirl_irs_number= iirs_irs_number) 

SELECT Company,IRSNumber,SerialNumber,InterestStartDate,PaymentDate,InterestDays,
InterestDaysType,RateType,FloatingRate,BuySell,InterestType,
InterestCharge,BaseRate,Spread,FinalRate,NotionalAmount,
round(InterestAmount,2) InterestAmount,
IntEndDate,FixingDate
FROM Caldata where IIRS_EXECUTE_DATE <= '||''''||frmDate||''''||'';
 
  INSERT INTO temp VALUES(Query_Str,'chandra');commit ;
   INSERT INTO temp VALUES(Query_Str1,'chandra1');commit ;
 INSERT INTO temp VALUES(Query_Str2,'chandra2');commit ;

insert into temp values (finalCondition,'chandra3');commit;


    OPEN Gencursor FOR Query_Str || Query_Str1 || Query_Str2 ||finalCondition|| ' order by InterestStartDate,IRSNumber';

    Goto Process_End;  
 END IF;
---------------------------------------------
----------ReturnReport-----------------
  If Varreportid = 'EFFECTIVERATE'  Then 
-----------Important Query For this report--------
  delete from trsystem978;commit;
  insert into trsystem978 values(toDate);
  delete from temp;
  insert into temp values(Finalcondition,'EFFECTIVERATE');
  select substr(tt,INSTR(TT,'COMPANYCODE',1)+17,8)||'-'||substr(tt,INSTR(TT,'CURRENCYCODE',1)+18,8)into LocalBank from temp;
  --select substr(tt,51,8)||'-'|| substr(tt,83,8) into LocalBank from temp;
  delete from trsystem979;commit;
  PrcEffectiveRate(FrmDate ,toDate ,LocalBank,1 );
  delete from TRSYSTEM981;commit;
  insert into TRSYSTEM981 values(frmDate,toDate);
----------------------------------------------------  
  Open Gencursor For
     select
         pkgreturncursor.fncgetdescription(COMPANYCODE,1) COMPANYCODE ,
        OpenHedgedFCY_Cost ,
        OpenUnHedgedFCY_Cost,
        OpenHedgedINR_Cost ,
        OpenUnhedgedINR_Cost ,
        OpenHedgedINR_Effect ,
        OpenUnhedgedINR_Effect ,
        FCCancellation ,
        OpenHedgedMTM ,
        FutureMTM ,
        OptionMTM ,
        FrwdContractFcy ,
        FtrContractFCY ,
        FrwdContractINR ,
        FtrContractINR,
        frmDate as  FromDate ,
        ToDate as ToDate,
        pkgreturnreport.getCompanyName(varUserID) as CompanyName,
        FCDELIVERYFCY,
        FCDELIVERYCOSTINR,
        FCDELIVERYEFFECTINR,
        CASHSETTLEFCY,
        CASSETTLECOSTINR,
        CASSETTLEEFFECTINR,
        OrderCancelFCY,
        OrderCancelINR,
        OrderBooklINR
      from trsystem979;
  Goto Process_End;
  
  End If; 
-----------------------------------------------------------
 If Varreportid = 'EFFECTIVERATEUSD'  Then 
-----------Important Query For this report--------
  delete from trsystem978;commit;
  insert into trsystem978 values(toDate);
  delete from temp;
  insert into temp values(Finalcondition,'EFFECTIVERATE');
  select substr(tt,INSTR(TT,'COMPANYCODE',1)+17,8)into LocalBank from temp;
  --select substr(tt,51,8)||'-'|| substr(tt,83,8) into LocalBank from temp;
  delete from trsystem979;commit;
  PrcEffectiveRateUsd(FrmDate ,toDate ,LocalBank,1 );
  delete from TRSYSTEM981;commit;
  insert into TRSYSTEM981 values(frmDate,toDate);
----------------------------------------------------  
  Open Gencursor For
     select
         pkgreturncursor.fncgetdescription(COMPANYCODE,1) COMPANYCODE ,
        OpenHedgedFCY_Cost ,
        OpenUnHedgedFCY_Cost,
        OpenHedgedINR_Cost ,
        OpenUnhedgedINR_Cost ,
        OpenHedgedINR_Effect ,
        OpenUnhedgedINR_Effect ,
        FCCancellation ,
        OpenHedgedMTM ,
        FutureMTM ,
        OptionMTM ,
        FrwdContractFcy ,
        FtrContractFCY ,
        FrwdContractINR ,
        FtrContractINR,
        frmDate as  FromDate ,
        ToDate as ToDate,
        pkgreturnreport.getCompanyName(varUserID) as CompanyName,
        FCDELIVERYFCY,
        FCDELIVERYCOSTINR,
        FCDELIVERYEFFECTINR,
        CASHSETTLEFCY,
        CASSETTLECOSTINR,
        CASSETTLEEFFECTINR
      from trsystem979;
  Goto Process_End;
  
  End If;
-----------------------------------------------------
If Varreportid = 'EFFECTIVERATEDTLS'  Then 
-----------Important Query For this report--------
  delete from trsystem978;commit;
  Insert Into Trsystem978 Values(Todate);
  PRCEFFECTIVERATERPT(FrmDate ,toDate,Varreportid,'');
  delete from TRSYSTEM981;commit;
  insert into TRSYSTEM981 values(frmDate,toDate);
----------------------------------------------------  
 Query_str :='select
        pkgreturncursor.fncgetdescription(EFFE_COMPANY_CODE,2) CompanyCode ,
        EFFE_AMOUNT_FCY AS AmountFcy,
        EFFE_AMOUNT_MTMPL AS MTMPandL,
        EFFE_BALANCE_FCY AS Outstanding,
        EFFE_COST_RATE AS CostRate,
        EFFE_EFFE_RATE AS EffevtiveRate,
        EFFE_AMOUNT_FCY * EFFE_COST_RATE AS CostINR,
        EFFE_AMOUNT_FCY * EFFE_EFFE_RATE AS EffectINR,
        pkgreturncursor.fncgetdescription(EFFE_BUY_SELL,2)  AS BuySell,
        pkgreturncursor.fncgetdescription(EFFE_CURRENCY_CODE,2)  AS CurrencyCode,
        EFFE_DESCRIPTION AS Description,
        EFFE_REF_DATE AS RefDate,
        EFFE_CLOSE_DATE AS MatDate,
        EFFE_TRADE_REFRENCE As TradeReference,
        EFFE_DEAL_NUMBER AS DealNumber,
        '||''''||frmDate||''''||' as  FromDate ,
        '||''''||toDate||''''||' as ToDate,
        pkgreturnreport.getCompanyName('||''''||varUserID||''''||') as CompanyName,
        EFFE_BANK_REFERENCE As BankReference
        '||vargroupfield||'
      from trsystem976  where EFFE_ASON_DATE Between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
      ';
      delete from temp;
      insert into temp values(Query_str,finalCondition);commit;
      insert into temp values(vargroupfield,finalcondition);commit;
  Open Gencursor For  Query_str || finalCondition;
  
  
  Goto Process_End;
  
  End If;
-----------------------------------------------------
If Varreportid = 'BESTRATEWORSTRATE'  Then 

  delete from trsystem978;commit;
  Insert Into Trsystem978 Values(Todate);
  PRCEFFECTIVERATERPT(FrmDate ,toDate,Varreportid,'');
  delete from TRSYSTEM981;commit;
  insert into TRSYSTEM981 values(frmDate,toDate);

Query_Str := 'select pkgreturncursor.fncgetdescription(EFFE_COMPANY_CODE,1) as Company,
          EFFE_REF_DATE as ContractDate,
          EFFE_AMOUNT_FCY as ExposureAmount,
          EFFE_BANK_REFERENCE as BankReference,
          EFFE_CLOSE_DATE as DueDate,
          (EFFE_CLOSE_DATE - EFFE_REF_DATE) as Period,
          fncBestRateWorstDate(EFFE_TRADE_REFRENCE,'''||frmDate||''','''||Todate||''',1) BestDate,
          fncBestRateWorstRate(EFFE_TRADE_REFRENCE,'''||frmDate||''','''||Todate||''',3) as BestRateSpot,
          fncBestRateWorstRate(EFFE_TRADE_REFRENCE,'''||frmDate||''','''||Todate||''',5) as BestRatePremium,
          0 as BestRateTotal,
          fncBestRateWorstDate(EFFE_TRADE_REFRENCE,'''||frmDate||''','''||Todate||''',2) as WorstRatePrevailingOn,
          fncBestRateWorstRate(EFFE_TRADE_REFRENCE,'''||frmDate||''','''||Todate||''',4)as WorstRateSpot,
          fncBestRateWorstRate(EFFE_TRADE_REFRENCE,'''||frmDate||''','''||Todate||''',6) as WorstRatePremium,
          0 as WorstRateTotal,';
Query_Str1 := 'CASE WHEN effe_description in(''CASH SETTLE'',''FC DELIVERY'') THEN
          EFFE_EFFE_RATE  END as FinalSettlementRate,
          CASE WHEN effe_description in(''CASH SETTLE'',''FC DELIVERY'') THEN
          EFFE_AMOUNT_MTMPL  END as PandLOnFinalSettlementRate,
          0 as PandLOnBestRate,
          0 as PandLOnWorstRate,
         '''||frmDate||''' as AsonDate,
         '''||Todate||''' as TODATE,
         EFFE_COST_RATE as ExchangeRate,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
         pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
         ''IMP/EXP'' ImpExp,
         EFFE_REF_DATE as TRAD_REFERENCE_DATE,
         EFFE_COMPANY_CODE as TRAD_COMPANY_CODE
   from TRSYSTEM976
   WHERE effe_description in(''CASH SETTLE'',''OPEN UNHEDGE'',''FC DELIVERY'')';
   delete from temp;commit;
   insert into temp values(Query_Str,Query_Str1 ||finalcondition);commit;
    Open Gencursor For Query_Str||Query_Str1||finalcondition;
    Goto Process_End;                      
   End If;

     if varReportID= 'VARANALYSISRPT' then       
    OPEN GenCursor for 
   -- select VarDate,Company,sum(nvl(pl95,0)) pl95,sum(nvl(pl97,0)) "pl97",sum(nvl(pl99,0)) pl99 from (
--    select 
--      POSN_VAR_DATE as VarDate,
--      pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,1) as Company,
--      case when POSN_VAR_DESC='95' then  sum(POSN_PNL_DIFFAMT)end as pl95,
--      case when POSN_VAR_DESC='97.5' then sum(POSN_PNL_DIFFAMT)end as pl97,
--      case when POSN_VAR_DESC='99' then sum(POSN_PNL_DIFFAMT)end as pl99,
--      POSN_VAR_DESC as VarDesc,
--      Frmdate As Asondate,
--      Todate As Todate
--    from trsystem997c 
--    where POSN_VAR_DATE<=Frmdate
--    group by POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_VAR_DESC) group by VarDate,Company;
            select VarDate,
                    Company,
                    CompanyName,
                    sum(nvl(pl95,0)) pl95,
                    sum(nvl(pl97,0)) pl97,
                    sum(nvl(pl99,0)) pl99,
                    sum(nvl(pl100,0)) pl100 
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                         pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e WHERE var_report_type='COMPANYWISE'
                          GROUP BY var_var_date, var_company_code,var_var_desc
                          )group by VarDate,Company,CompanyName
                          order by VarDate,Company ;
    Goto Process_End;   
  end if; 
  if varReportID= 'VARANALYSISRPTCURRENCYWISE' then       
    OPEN GenCursor for 
    select VarDate,
                    Company,
                    CompanyName,
                    CurrPair,
                    sum(nvl(pl95,0)) pl95,
                    sum(nvl(pl97,0)) pl97,
                    sum(nvl(pl99,0)) pl99,
                    sum(nvl(pl100,0)) pl100 
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgreturncursor.fncgetdescription(VAR_BASE_CURRENCY,2)||'/'||pkgreturncursor.fncgetdescription(VAR_OTHER_CURRENCY,2) as CurrPair,
                          
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e WHERE var_report_type='CURRENCYWISE'
                          GROUP BY var_var_date, var_company_code,VAR_BASE_CURRENCY,VAR_OTHER_CURRENCY,var_var_desc
                          )group by VarDate,Company,CurrPair,CompanyName
                          order by VarDate,Company,CurrPair ;
    
  Goto Process_End;   
  end if; 
  
  if varReportID= 'VARANALYSISRPTPRODUCTWISE' then       
    OPEN GenCursor for 
            select  VarDate,
                    Company,
                    CompanyName,
                    Product,
                    sum(nvl(pl95,0)) pl95,
                    sum(nvl(pl97,0)) pl97,
                    sum(nvl(pl99,0)) pl99,
                    sum(nvl(pl100,0)) pl100 
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgreturncursor.fncgetdescription(VAR_PRODUCT_CODE,2) as Product,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e WHERE var_report_type='PRODUCTWISE'
                          GROUP BY var_var_date, var_company_code,VAR_PRODUCT_CODE,var_var_desc
                          )group by VarDate,Company,Product,CompanyName
                          order by VarDate,Company,Product;
        Goto Process_End;   
  end if; 
  if varReportID= 'VARANALYSISRPTSUBPRODUCTWISE' then       
    OPEN GenCursor for  
      select        VarDate,
                    Company,
                    CompanyName,
                    SubProduct,
                    sum(nvl(pl95,0)) pl95,
                    sum(nvl(pl97,0)) pl97,
                    sum(nvl(pl99,0)) pl99,
                    sum(nvl(pl100,0)) pl100 
                    from (
                          select             
                          var_var_date AS VarDate,
                          pkgreturncursor.fncgetdescription(var_company_code,2) as Company ,
                          pkgreturnreport.getCompanyName(varUserID) as CompanyName,
                          pkgreturncursor.fncgetdescription(VAR_SUBPRODUCT_CODE,2) as SubProduct,
                          SUM(NVL(var_var_amt,0)),
                          case when VAR_VAR_DESC='95' then  sum(VAR_VAR_AMT)end as pl95,
                          case when VAR_VAR_DESC='97.5' then sum(VAR_VAR_AMT)end as pl97,
                          case when VAR_VAR_DESC='99' then sum(VAR_VAR_AMT)end as pl99,
                          case when VAR_VAR_DESC='100'then sum(VAR_VAR_AMT)end as pl100,
                          var_var_desc as VarDesc               
                          from trsystem997e WHERE var_report_type='SUBPRODUCTWISE'
                          GROUP BY var_var_date, var_company_code,VAR_SUBPRODUCT_CODE,var_var_desc
                          )group by VarDate,Company,SubProduct,CompanyName
                          order by VarDate,Company,SubProduct;
       Goto Process_End;   
  end if; 
  if (varReportID = 'DEALTRACKER')  then
Query_Str :=' select UserId, Remark,DealType,status,deal_execute_date as ExecuteDate,deal_deal_number as DealNumber,deal_COMPANY_CODE1 as  CompanyCode,
               deal_COUNTER_PARTY1 as CounterParty,deal_BASE_CURRENCY1 as BaseCurrency,DEAL_BUY_SELL1  as BuySell1,BaseAmount,AmtInr,
               deal_maturity_date as MaturityDate,Rate,BookingRate,ProductQty,BacKupDeal,SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
               FromDate,ToDate,DEAL_OTHER_CURRENCY1 as OtherCurrency,
               DEAL_RECORD_STATUS,DEAL_HEDGE_TRADE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,
               Case DEAL_BUY_SELL1 when ''Buy'' then 25300001
               when ''Sell'' then 25300002
               end as BuySell, CDEL_LOCAL_RATE as WashRate,DEAL_INIT_CODE1 as UserCode,
                pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2) as initcode,PandL,HedgeTrade,statusorder,BankReference
              ' || varGroupField || '
 from      
              ( select  ''Future '' dealType, ''booked'' status, 1 as statusorder,
                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
                        cfut_execute_date as deal_execute_date,
                        cfut_deal_number as deal_deal_number,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1, 
                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,';
       Query_Str1 :='   pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) as DEAL_BUY_SELL1,
                       CFUT_BASE_AMOUNT as BaseAmount,CFUT_BASE_AMOUNT*cfut_lot_price as AmtInr,
                       cfut_maturity_date as deal_maturity_date,  CFUT_EXCHANGE_RATE as  Rate,CFUT_EXCHANGE_RATE as BookingRate, CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                       TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as Buysell,
                        pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
                        CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        1  As  Cdel_Local_Rate,  0 as  PandL,CFUT_USER_REFERENCE as BankReference
                         from  trtran061   
                  where  cfut_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                        and cfut_record_status not in (10200005,10200006)
      union all 
                   select  ''Future '' dealType,
                         ''canceled'' status,2 as statusorder,
                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
                        CFRV_EXECUTE_DATE as deal_execute_date,
                        cfut_deal_number as deal_deal_number,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1,'; 
         Query_Str2 :=' pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        decode (CFUT_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1,
                       (CFRV_REVERSE_LOT*1000) as BaseAmount,(CFUT_BASE_AMOUNT*1000)*CFRV_LOT_PRICE as AmtInr,
                       cfut_maturity_date as deal_maturity_date,  CFRV_LOT_PRICE as  Rate,CFUT_EXCHANGE_RATE as BookingRate,CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                      (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,decode (CFUT_BUY_SELL,25300001,25300002,25300001) as Buysell, --0 as CDEL_LOCAL_RATE,
                         pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
                         CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        1 CDEL_LOCAL_RATE, cfrv_profit_loss PandL,CFUT_USER_REFERENCE as BankReference
                         from  trtran061,trtran063   
                  where    cfut_deal_number=CFRV_DEAL_NUMBER
                        and cfrv_RECORD_STATUS not in (10200005,10200006) 
                        and  cfut_record_status not in (10200005,10200006)
                        and (CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                        or   CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
                      
          UNION ALL
                      
                select ''Forward '' dealType, ''booked'' status,1 as statusorder,
                        DEAL_USER_ID as UserId,
                        DEAL_DEALER_REMARKS as Remark,';
          Query_Str3 :='DEAL_EXECUTE_DATE as  DEAL_EXECUTE_DATE, 
                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as DEAL_BUY_SELL1,
                        DEAL_BASE_AMOUNT as BaseAmount,DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE as AmtInr,
                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
                        DEAL_EXCHANGE_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                       TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate, 
                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as Buysell ,
                       pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                       1 as CDEL_LOCAL_RATE,
                      0 PandL,
                      DEAL_USER_REFERENCE as BankReference
                  from  trtran001
                   where  DEAL_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                         and  deal_record_status not in (10200005,10200006)
        union all
           select ''Forward'' dealType, 
                       case CDEL_CANCEL_TYPE when 27000001 then ''Cancelled''
                        when 27000002 then ''Delivery'' end as status, 2 as statusorder,';
        Query_Str4 :='  DEAL_USER_ID as UserId,
                        DEAL_DEALER_REMARKS as Remark,
                        CDEL_CANCEL_DATE as  DEAL_EXECUTE_DATE, 
                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                       decode (deal_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1,
                        CDEL_CANCEL_AMOUNT as BaseAmount,CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE as AmtInr,
                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
                        CDEL_CANCEL_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate|| ''''||') as ToDate,  
                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,decode (deal_BUY_SELL,25300001,25300002,25300001) as Buysell ,pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal '', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade,DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        CDEL_LOCAL_RATE as CDEL_LOCAL_RATE,cdel_profit_loss PandL,
                        DEAL_USER_REFERENCE as BankReference
                  from  trtran001,trtran006
                   where  deal_deal_number=cdel_deal_number
                       and (CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                       or CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
                       and CDEL_RECORD_STATUS not in (10200005,10200006))
               where  DEAL_RECORD_STATUS not in (10200005,10200006)    
                      '||substr(finalcondition,64)||'';
              -- Query_Str :=Query_Str ||Query_Str1 ||Query_Str2||Query_Str3||Query_Str4|| 'order by deal_deal_number ';
               delete from temp;commit;
               Insert Into Temp Values(Query_Str,Query_Str1);Commit;  
               Insert Into Temp Values(Query_Str2,Query_Str3);Commit; 
               insert into temp values(Query_Str4,finalcondition);commit; 
               
    OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4 ||'order by deal_deal_number,statusorder';
    Goto Process_End;   
  End If;  
  
   if (varReportID = 'IRSNEWREPORT')  then
   Query_Str:='  SELECT PKGRETURNCURSOR.fncGetDescription(IIRS_COMPANY_CODE,1)  as CompanyName,
   iirs_irs_number                                    AS RefNo,
  iirs_execute_date                                       AS ExecuteDate,
  IIRS_START_DATE                                         AS EffectiveDate,
  PKGRETURNCURSOR.fncGetDescription(iirs_counter_party,2) AS Counterparty,
  iirs_notional_amount                                    AS NotionalAmount,
  iirs_expiry_date                                        AS MaturityDate,
  (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number) AS Currency,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001 ) AS ReceiveIntType,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS PaymentIntType,
  b.SchedulePaymentDate as SchedulePaymentDate,
  b.Outstanding as Outstanding,
  b.EffectiveAmount as EffectiveAmount,
  b.PayInterest as PayInterest,
  b.ReceiveInterest as ReceiveInterest,
  case when b.Status = '||''''||'R'||''''||' then
   b.NetCashFlow
   else
   nvl(b.ReceiveInterest,0) -  nvl(b.PayInterest,0)
  end as NetCashFlow,
  b.Status as Status,
  TO_DATE('||''''||frmDate||''''||') as FromDate,
  to_date('||''''||toDate|| ''''||') as ToDate,
  FlotBaseRate,FlotSpread,FixFinalRate,
  FlotBaseRate + FlotSpread as FlotFinaRate
FROM TRTRAN091,
(SELECT FLOT.IIRS_IRS_NUMBER RefNo,
  FIX.IIRM_INTSTART_DATE SchedulePaymentDate,
  FLOT.Outstanding AS Outstanding,
  FLOT.EffectiveAmount AS EffectiveAmount,
  FIX.InterestAmount      AS PayInterest,
  FLOT.IntAmount          AS ReceiveInterest,
  NVL(FLOT.netCashFlow,0) AS NetCashFlow,
  FLOT.Status             AS Status,
  FLOT.BaseRate           AS FlotBaseRate,
  FLOT.Spread             AS FlotSpread,
  FIX.FinalRate           AS FixFinalRate
FROM
  (SELECT iirs_irs_number,
    iirm_leg_serial,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    iirm_interest_amount AS InterestAmount,
    iirl_final_rate as FinalRate
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  WHERE IIRL_INT_TYPE =80300001
  --AND IIRm_IRS_NUMBER ='||''''||'IIRS/0000013/16-17'||''''||'
  ) Fix,';
  Query_Str2 :='(SELECT iirs_irs_number,
    iirm_leg_serial,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    CASE
      WHEN iirm_process_complete = 12400001
      THEN '||''''||'R'||''''||'
      ELSE '||''''||'U'||''''||'
    END                  AS Status,
    --iirm_interest_amount AS IntAmount,
    CASE
      WHEN iirm_process_complete = 12400001 THEN    
    iirm_interest_amount 
    ELSE
    round(pkgirs.fncIRSIntCalcforperiod(iirm_intstart_date,iirm_intend_date,iirs_irs_number,2,
    (nvl(PKGirs.fncIRSGetInterestRate(iirs_irs_number, 1,'||''''||frmDate||''''||','||''''||frmDate||''''||',0,'||''''||frmDate||''''||',0),0) +
    nvl(PKGirs.fncIRSGetInterestRate(iirm_irs_number, 1,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirl_int_type,'||''''||frmDate||''''||',1),0) + iirl_spread)
    ,IIRL_INTEREST_DAYSTYPE),2)
    END  AS IntAmount,    
    iirm_net_cashflow    AS netCashFlow,
    IIRN_EFFECTIVE_DATE ,
    IIRN_OUTSTANDING_AMOUNT Outstanding,
    iirn_effective_amount EffectiveAmount,
    CASE WHEN iirm_process_complete = 12400001 THEN    
      iirl_base_rate
    else
      nvl(PKGirs.fncIRSGetInterestRate(iirs_irs_number, 1,'||''''||frmDate||''''||','||''''||frmDate||''''||',0,'||''''||frmDate||''''||',0),0) +
      nvl(PKGirs.fncIRSGetInterestRate(iirm_irs_number, 1,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirl_int_type,'||''''||frmDate||''''||',1),0)
      end as BaseRate,
    CASE WHEN iirm_process_complete = 12400001 THEN    
      iirl_spread
    else  
      iirl_spread end Spread
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  FULL OUTER JOIN TRTRAN091C
  --ON IIRN_EFFECTIVE_DATE = IIRM_INTSTART_DATE 
  ON IIRN_EFFECTIVE_DATE = IIRM_INTEND_DATE 
  AND IIRN_IRS_NUMBER = IIRM_IRS_NUMBER
  WHERE IIRL_INT_TYPE =80300002
 --AND IIRm_IRS_NUMBER = '||''''||'IIRS/0000013/16-17'||''''||'
  ) Flot
WHERE fix.iirs_irs_number  = flot.iirs_irs_number
AND fix.iirm_intstart_date = flot.iirm_intstart_date
ORDER BY 2) b
WHERE iirs_deal_type NOT IN(80800004,80800005,80800006)
AND IIRS_IRS_NUMBER = B.RefNo';
delete from temp;commit;
INSERT INTO TEMP VALUES(Query_Str,Query_Str2||finalcondition);commit;
   OPEN GenCursor for Query_Str||Query_Str2 || finalcondition;
   Goto Process_End;   
  End if;


 if (varReportID = 'CCSNEWREPORT')  then
   Query_Str:='  SELECT PKGRETURNCURSOR.fncGetDescription(IIRS_COMPANY_CODE,1)  as CompanyName,
   iirs_irs_number                                    AS RefNo,
  iirs_execute_date                                       AS ExecuteDate,
  IIRS_START_DATE                                         AS EffectiveDate,
  PKGRETURNCURSOR.fncGetDescription(iirs_counter_party,2) AS Counterparty,
  (SELECT IIRL_Notional_Amount
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001) AS NotionalAmountReceive,
  (SELECT IIRL_Notional_Amount
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS NotionalAmountPay,
  (SELECT IIRL_FINAL_RATE
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001) AS FinalRateReceive,
  (SELECT IIRL_FINAL_RATE
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS FinalRatePay,
  iirs_expiry_date                                        AS MaturityDate,
  (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001) AS ReceiveCurrency,
  (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS PayeCurrency,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001 ) AS ReceiveIntType,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS PaymentIntType,
  b.SchedulePaymentDate as SchedulePaymentDate,
  b.Outstanding as Outstanding,
  b.EffectiveAmount as EffectiveAmount,
  b.PayInterest as PayInterest,
  b.ReceiveInterest as ReceiveInterest,
  (b.ReceiveInterest - b.PayInterest) as NetCashFlow,
  b.Status as Status,
  b.Outreceiveamt as Outreceiveamt,
  b.OutPayamt as OutPayamount,
  b.schpayamt as schpayamt,
  b.schrecamt as schrecamt,
   TO_DATE('||''''||frmDate||''''||') as FromDate,
     to_date('||''''||toDate|| ''''||') as ToDate,
  pkgforexprocess.fncgetrate((SELECT DISTINCT iirl_currency_code
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002),   (SELECT DISTINCT iirl_currency_code
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001), '||''''||frmDate||''''||', 25300002,0,b.SchedulePaymentDate,0) As ConversionRate 
 FROM TRTRAN091,
(SELECT FLOT.IIRS_IRS_NUMBER RefNo,
  FIX.iirm_settlement_date SchedulePaymentDate,
   NVL(FIX.IIRM_SERIAL_NUMBER,Flot.IIRM_SERIAL_NUMBER) IIRM_SERIAL_NUMBER,
  FLOT.Outstanding AS Outstanding,
  FLOT.EffectiveAmount AS EffectiveAmount,
  FIX.InterestAmount      AS PayInterest,
  FLOT.IntAmount          AS ReceiveInterest,
  NVL(FLOT.netCashFlow,0) AS NetCashFlow,
  FLOT.Status             AS Status,
  Flot.OutPayamt as OutPayamt,
  flot.schpayamt as schpayamt,
  Fix.Outreceiveamt as Outreceiveamt,
  Fix.schrecamt as schrecamt
FROM
  (SELECT iirs_irs_number,
    iirm_leg_serial,
     IIRM_SERIAL_NUMBER,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    iirm_interest_amount AS InterestAmount,
    IIRN_OUTSTANDING_AMOUNT as   Outreceiveamt,
    IIRN_EFFECTIVE_AMOUNT as schrecamt
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  FULL OUTER JOIN TRTRAN091C
  ON IIRN_EFFECTIVE_DATE = iirm_settlement_date 
--  ON IIRN_EFFECTIVE_DATE = IIRM_INTEND_DATE 
  AND IIRN_IRS_NUMBER = IIRM_IRS_NUMBER
  WHERE IIRL_BUY_SELL =25300001
--  AND IIRm_IRS_NUMBER ='||''''||'IIRS/0000013/16-17'||''''||'
  ) Fix,';
  Query_Str2 :='(SELECT iirs_irs_number,
    iirm_leg_serial,
    IIRM_SERIAL_NUMBER,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    CASE
      WHEN iirm_process_complete = 12400001
      THEN '||''''||'R'||''''||'
      ELSE '||''''||'U'||''''||'
    END                  AS Status,
    iirm_interest_amount AS IntAmount,
    iirm_net_cashflow    AS netCashFlow,
    IIRN_EFFECTIVE_DATE ,
    IIRN_OUTSTANDING_AMOUNT Outstanding,
    iirn_effective_amount EffectiveAmount,
    IIRN_OUTSTANDING_PAYMENT as   OutPayamt,
    IIRN_PAYMENT_AMOUNT as schpayamt
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  FULL OUTER JOIN TRTRAN091C
  --ON IIRN_EFFECTIVE_DATE = IIRM_INTEND_DATE 
  ON IIRN_EFFECTIVE_DATE = iirm_settlement_date 

  AND IIRN_IRS_NUMBER = IIRM_IRS_NUMBER
  WHERE IIRL_BUY_SELL =25300002
-- AND IIRm_IRS_NUMBER = '||''''||'IIRS/0000013/16-17'||''''||'
  ) Flot 
WHERE fix.iirs_irs_number  = flot.iirs_irs_number
--AND fix.iirm_intstart_date = flot.iirm_intstart_date
--AND fix.iirm_intend_date = flot.iirm_intend_date
AND fix.iirm_settlement_date = flot.iirm_settlement_date
--AND FIX.IIRM_SERIAL_NUMBER = FLOT.IIRM_SERIAL_NUMBER
ORDER BY 2) b
WHERE iirs_deal_type IN(80800004,80800005,80800006)
AND IIRS_IRS_NUMBER = B.RefNo ';
--and d.iirn_irs_number=iirs_irs_number and d.iirn_irs_number=b.RefNo and d.iirn_serial_number=b.iirm_serial_number';
delete from temp;commit;
INSERT INTO TEMP VALUES(Query_Str,Query_Str2||finalCondition);commit;
   OPEN GenCursor for Query_Str||Query_Str2||finalcondition;
   Goto Process_End;   
  End if;
  
if VARREPORTID = 'BONDDEBENTUREOUTSTANDING'or varReportID='BONDDEBENTUREOUTSTANDINGRDLC' then
      QUERY_STR:='         select         
                            pkgreturncursor.fncgetdescription( BPUR_COMPANY_CODE,2) AS Companyname,
                            pkgreturncursor.fncgetdescription( BPUR_COMPANY_CODE,1) Company1,
                            BPUR_DEAL_NUMBER AS DealNo,
                            pkgreturncursor.fncgetdescription(BPUR_DEAL_TYPE,1) DealType,
                            BPUR_ISIN_NUMBER as ISINNo,
                            pkgreturncursor.fncgetdescription(BPUR_SCHEME_CODE,1)Scheme,
                            BPUR_EXECUTE_DATE AS ExecuteDate,
                            BPUR_VALUE_DATE as Valuedate,                            
                            pkgreturncursor.fncgetdescription(BPUR_COUNTER_PARTY ,2)AS CoutnerParty,
                            BPUR_MATURITY_DATE MaturityDate,
                            BPUR_PERIOD_YEAR||'' Years ''||BPUR_PERIOD_MONTH||'' Months ''||BPUR_PERIOD_DAYS||'' Days '' PeriodIn,
                            BPUR_COUPON_RATE CouponRate,                           
                            BPUR_MARKET_PRICE MarketPrice,
                            BPUR_FACE_VALUE FaceValue,
                            BPUR_UNIT_PRICE IssuePrice,
                            BPUR_UNIT_QUANTITY UnitQty,
                            BPUR_DEAL_AMOUNT DealAmount,
                            BPUR_MATURITY_AMOUNT MaturityAmount,
                            
                            pkgfixeddepositproject.fncgetbondaccruedbalance(bpur_deal_number,2)  OutstandingQty,
                            pkgfixeddepositproject.fncgetbondaccruedbalance(bpur_deal_number,2)*BPUR_UNIT_PRICE OutstandingDealAmt,
                            pkgfixeddepositproject.fncgetbondaccruedbalance(bpur_deal_number,2)*BPUR_UNIT_PRICE OutstandingMaturityAmt,
                            pkgreturncursor.fncgetdescription(DEBE_BOND_TYPE,2) BondType,
                            
                            BPUR_CURRENT_YIELD CurrentYield,
                            BPUR_YIELDAT_MATURITY YTM, 
                            BPUR_INTEREST_AMOUNT InterestAmount,
                            BPUR_BANK_REFERENCE BankRef,                            
                            BPUR_DEALER_REMARK Remark ,
                            '||''''||frmdate||''''||' as AsonDate
                             ' || varGroupField || '
                   from     TRTRAN032,trmaster412
                           where DEBE_PICK_CODE=BPUR_SCHEME_CODE 
                           and DEBE_ISIN_NUMBER=BPUR_ISIN_NUMBER  
                           and  debe_record_status not in(10200005,10200006)
                           and BPUR_RECORD_STATUS NOT IN (10200005,10200006) and
                            ((BPUR_PROCESS_COMPLETE = 12400001  and BPUR_COMPLETE_DATE > '||''''||frmdate||''''||') or BPUR_PROCESS_COMPLETE = 12400002)
                            and BPUR_EXECUTE_DATE <='||''''||frmdate||''''||'';
                
                 delete from TEMP; commit;
                 insert into TEMP values (QUERY_STR,FINALCONDITION); commit;
       OPEN Gencursor FOR Query_Str||finalCondition||'order by 3'; 
    GOTO PROCESS_END;
end if;

-------------------------
if varReportID ='3YEARSFINALEXPOSURE'  then
  numRecordSets := 2;
      OPEN GenCursor for
  select  Company as "Company", TLocation as "TLocation", 
       ExposureCurrency as "ExposureCurrency", 
       ReportingCurrency AS "ReportingCurrency",
--       to_char(PaymentDate,'YYYY') "FinYearOfExposure",
       to_char(PaymentDate,'MON-YYYY') "FinYearOfExposure",
       ExposureAmount,
       TransactonType as "TransactonType",to_char(PaymentDate,'YYYYMM') "MonthYear",
       0 as "AmountInr"
from (select pkgreturncursor.fncgetdescription(trad_company_code,1) Company,
       pkgreturncursor.fncgetdescription(trad_Location_code,1) TLocation,
        (case when TRAD_IMPORT_EXPORT < 25900050 then
            1 else -1 end ) * PKGFOREXPROCESS.fncGetOutstanding(trad_trade_reference,0,6,
        1, '09-Sep-2016') ExposureAmount,
       TRAD_MATURITY_DATE PaymentDate,
        TRAD_TRADE_RATE BenchmarkRate,
         pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) ExposureCurrency,
         pkgreturncursor.fncgetdescription(TRAD_LOCAL_CURRENCY,2) ReportingCurrency,
        'Exposure' TransactonType
      from trtran002
  where trad_record_Status not in (10200005,10200006)
  UNION ALL
  SELECT pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
       pkgreturncursor.fncgetdescription(deal_Location_code,1) TLocation,
        (CASE WHEN deal_buy_sell = 25300001 THEN
            1 ELSE -1 END ) * pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,'09-SEP-16') ExposureAmount,
       deal_MATURITY_DATE PaymentDate,
        deal_exchange_RATE BenchmarkRate,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) ExposureCurrency,
         pkgreturncursor.fncgetdescription(deal_other_currency,2) ReportingCurrency,
         'Forward Contract' TransactonType
      FROM trtran001
  WHERE deal_record_Status NOT IN (10200005,10200006))order by to_char(PaymentDate,'YYYYMM'),TransactonType;
  
  
  OPEN NextCursor for
select  Company as "Company", TLocation as "TLocation", TransactionNo,ExposureCategory,
       Underlying, ExposureCurrency as "ExposureCurrency", ReportingCurrency as "ReportingCurrency",
       Amount Amount,OutStandingAmount OutStandingAmount,
       ExposureAmount    ExposureAmount,
       PaymentDate PaymentDate,
       QuarterOfExposure QuarterOfExposure, 
      to_char(PaymentDate,'MON-YYYY') "FinYearOfExposure",
      ExposureAmount *BenchmarkRate BenchMarkValue,
        BenchmarkRate BenchmarkRate,
        ExposureAmount * MtMRate MtMValue,
       MtMRate MtMRate,
       (ExposureAmount * MtMRate) - (ExposureAmount *BenchmarkRate) Performance_1,
       (ExposureAmount * ForwardRate) - (ExposureAmount *BenchmarkRate) Performance_2,
       ForwardRate ForwardRate   ,
       ExposureAmount * EURRate ConvertOutStandingAmount,
       EURRate ConvertRate,
       TransactonType as "TransactonType",to_char(PaymentDate,'YYYYMM') "MonthYear",
       0 as "AmountInr"

from (select pkgreturncursor.fncgetdescription(trad_company_code,1) Company,
       pkgreturncursor.fncgetdescription(trad_Location_code,1) TLocation,
       TRAD_TRADE_REMARKS TransactionNo,
       pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,1) ExposureCategory,
       pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,1) Underlying,
       pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) ExposureCurrency,
       pkgreturncursor.fncgetdescription(TRAD_LOCAL_CURRENCY,2) ReportingCurrency,
       TRAD_TRADE_FCY Amount, TRAD_TRADE_RATE BenchmarkRate,TRAD_IMPORT_EXPORT ,
       PKGFOREXPROCESS.fncGetOutstanding(trad_trade_reference,0,6,
        1, '09-Sep-2016') OutStandingAmount,
        (case when TRAD_IMPORT_EXPORT < 25900050 then
            1 else -1 end ) * PKGFOREXPROCESS.fncGetOutstanding(trad_trade_reference,0,6,
        1, '09-Sep-2016') ExposureAmount,
       TRAD_MATURITY_DATE PaymentDate,
       (case when to_number(TO_CHAR(trunc(TRAD_MATURITY_DATE,'Q'),'MM')) =1 then
              'Q4-' || TO_CHAR(to_number(TO_CHAR(TRAD_MATURITY_DATE, 'YYYY'))-1)
            when to_number(TO_CHAR(trunc(TRAD_MATURITY_DATE,'Q'),'MM')) =2 then
              'Q1-' || TO_CHAR(to_number(TO_CHAR(TRAD_MATURITY_DATE, 'YYYY')))
            when to_number(TO_CHAR(trunc(TRAD_MATURITY_DATE,'Q'),'MM')) =3 then
              'Q2-' || TO_CHAR(to_number(TO_CHAR(TRAD_MATURITY_DATE, 'YYYY')))
            when to_number(TO_CHAR(trunc(TRAD_MATURITY_DATE,'Q'),'MM')) =4 then
              'Q3-' || TO_CHAR(to_number(TO_CHAR(TRAD_MATURITY_DATE, 'YYYY')))
        END) QuarterOfExposure,TRAD_MATURITY_DATE,
      to_char(TRAD_MATURITY_DATE,'MON-YYYY') FinYearOfExposure,
      to_char(TRAD_MATURITY_DATE,'YYYYMM') MonthYear,
        'Exposure' TransactonType,

--        PKGFOREXPROCESS.fncGetRate(TRAD_TRADE_CURRENCY,
--             TRAD_LOCAL_CURRENCY,'09-Sep-2016',
--             (case when TRAD_IMPORT_EXPORT < 25900050 then
--                25300002 else 25300001 end ) , 0, TRAD_MATURITY_DATE) 
                0 MtMRate,
--        PKGFOREXPROCESS.fncGetRate(30400002,
--             TRAD_LOCAL_CURRENCY,'09-Sep-2016',
--             (case when TRAD_IMPORT_EXPORT < 25900050 then
--                25300002 else 25300001 end ) , 0, TRAD_MATURITY_DATE) 
                0 ForwardRate,
--         PKGFOREXPROCESS.fncGetRate(TRAD_TRADE_CURRENCY,
--             30400002,'09-Sep-2016',
--             (case when TRAD_IMPORT_EXPORT < 25900050 then
--                25300002 else 25300001 end ) , 0, TRAD_MATURITY_DATE)
                0 EURRate
      from trtran002
  where trad_record_Status not in (10200005,10200006)
  union all
select pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
       pkgreturncursor.fncgetdescription(deal_Location_code,1) TLocation,
       deal_dealer_REMARKS TransactionNo,
       pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) ExposureCategory,
       pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1) Underlying,
       pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) ExposureCurrency,
       pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) ReportingCurrency,
       DEAL_BASE_AMOUNT Amount, DEAL_EXCHANGE_RATE BenchmarkRate,DEAL_BUY_SELL ,
       pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,'09-SEP-16') OutStandingAmount,
        (case when DEAL_BUY_SELL = 25300001 then
            1 else -1 end ) * pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,'09-SEP-16') ExposureAmount,
       DEAL_MATURITY_DATE PaymentDate,
       (case when to_number(TO_CHAR(trunc(DEAL_MATURITY_DATE,'Q'),'MM')) =1 then
              'Q4-' || TO_CHAR(to_number(TO_CHAR(DEAL_MATURITY_DATE, 'YYYY'))-1)
            when to_number(TO_CHAR(trunc(DEAL_MATURITY_DATE,'Q'),'MM')) =2 then
              'Q1-' || TO_CHAR(to_number(TO_CHAR(DEAL_MATURITY_DATE, 'YYYY')))
            when to_number(TO_CHAR(trunc(DEAL_MATURITY_DATE,'Q'),'MM')) =3 then
              'Q2-' || TO_CHAR(to_number(TO_CHAR(DEAL_MATURITY_DATE, 'YYYY')))
            when to_number(TO_CHAR(trunc(DEAL_MATURITY_DATE,'Q'),'MM')) =4 then
              'Q3-' || TO_CHAR(to_number(TO_CHAR(DEAL_MATURITY_DATE, 'YYYY')))
        end) QuarterOfExposure,DEAL_MATURITY_DATE,
      to_char(DEAL_MATURITY_DATE,'MON-YYYY') FinYearOfExposure,
      to_char(DEAL_MATURITY_DATE,'YYYYMM'),
      'Forward Contract' TransactonType,

                0 MtMRate,
                0 ForwardRate,
                0 EURRate
      from trtran001
  where deal_record_Status not in (10200005,10200006)  
  );
  
   Goto Process_End;
  end if;
---------------------------
    if varReportID= 'DAILYPERFORMANCERPT' then    
    numRecordSets:=2;
    OPEN GenCursor for  
      select        DEAL_DEAL_NUMBER HedgeDealNumber,
                    Deal_base_Amount HedgeDealAmount
        from trtran001;
    
    open nextCursor for
            select   DEAL_DEAL_NUMBER HedgeDealNumber,
                    Deal_base_Amount HedgeDealAmount
        from trtran001;
        
       Goto Process_End;   
  end if; 
------------------------
  if varReportID ='HEDGEEFFECTIVENESS'  then
  numRecordSets := 1;
      OPEN GenCursor FOR
        SELECT DealId,HedgeDate,MaturityDate,HedgeRate,Amount,MtmRate,
          round(Amount * MtmRate,2)MtmAmount,(round(HedgeRate * Amount,2) - round(Amount * MtmRate,2))HedgeProfitLoss,
          TradeRefNo,TradeRefDate,TradeMaturityDate,TradeRate,TradeAmount,TradeValueRate,
          round(TradeAmount * TradeValueRate,2)ValuationAmount,(round(TradeAmount * TradeRate,2) - round(TradeAmount * TradeValueRate,2))TradeProfitLoss,
          CASE WHEN HedgeDate = TradeRefDate THEN
          'YES' ELSE 'NO' END ReferenceDate1,
          CASE WHEN MaturityDate = TradeMaturityDate THEN
          'YES' ELSE 'NO' END MaturityDate1,
          CASE WHEN Amount = TradeAmount THEN
          'YES' ELSE 'NO' END Amount1,TradeCurrency,
          CASE when Currency IS NULL THEN
              TradeCurrency 
              ELSE
              Currency
              END AS Currency,
              round(HedgeRate * Amount,2) ConvertedHedgeAmount,
              round(TradeAmount * TradeRate,2)ConvertedTradeAmount
        FROM (
        SELECT DEAL_DEAL_NUMBER                                                                 AS DealId,
          deal_execute_date                                                                     AS HedgeDate,
          deal_maturity_date                                                                    AS MaturityDate,
          deal_exchange_rate                                                                    AS HedgeRate,
          pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'09-SEP-16')AS Amount,
          pkgreturncursor.fncgetdescription(deal_base_currency,2)
          ||'/'
          ||pkgreturncursor.fncgetdescription(deal_other_currency,2)                            AS Currency,
           PKGFOREXPROCESS.fncGetRate(DEAL_BASE_CURRENCY,
                     DEAL_OTHER_CURRENCY,'09-Sep-2016',DEAL_BUY_SELL ,0,DEAL_MATURITY_DATE)  AS MtmRate
        FROM TRTRAN001
        WHERE DEAL_RECORD_STATUS BETWEEN 10200001 AND 10200004) A
        FULL OUTER JOIN
        (SELECT TRAD_TRADE_REFERENCE                                                  AS TradeRefNo,
          TRAD_REFERENCE_date                                                         AS TradeRefDate,
          TRAD_maturity_date                                                          AS TradeMaturityDate,
          TRAD_TRADE_rate                                                             AS TradeRate,
          PKGFOREXPROCESS.fncGetOutstanding(trad_trade_reference,0,6,1, '09-Sep-2016')AS TradeAmount,
          pkgreturncursor.fncgetdescription(trad_trade_currency,2)
          ||'/'
          ||pkgreturncursor.fncgetdescription(trad_local_currency,2)                  AS TradeCurrency,
           PKGFOREXPROCESS.fncGetRate(TRAD_TRADE_CURRENCY,
                     TRAD_LOCAL_CURRENCY,'09-Sep-2016',
                     (CASE WHEN TRAD_IMPORT_EXPORT < 25900050 THEN
                        25300002 ELSE 25300001 END ) , 0, TRAD_MATURITY_DATE)  as TradeValueRate
        FROM TRTRAN002
        WHERE TRAD_RECORD_STATUS BETWEEN 10200001 AND 10200004)B
        ON TO_CHAR(A.MaturityDate,'MMYYYY') = TO_CHAR(B.TradeMaturityDate,'MMYYYY')
        AND A.CURRENCY = B.TradeCurrency;
   Goto Process_End;
  end if;
---------------------------------------------
 if (varReportID = 'FXFORECASTEXPOSURE')  then
   numRecordSets := 2;
 OPEN GenCursor for
 select *
 from(
  SELECT 
  NVL(NVL(NVL(NVL(NVL(Projected.Maturity,Actuals.Maturity),CashSettle.Maturity),FrwdSettle.Maturity),PandL.Maturity),ForwardContract.Maturity) AS Maturity,
  NVL(NVL(NVL(NVL(NVL(Projected.MaturityMonth,Actuals.MaturityMonth),CashSettle.MaturityMonth),FrwdSettle.MaturityMonth),PandL.MaturityMonth),ForwardContract.MaturityMonth) AS MaturityMonth,
--  NVL(Projected.MaturityMonth,ForwardContract.MaturityMonth) as MaturityMonth,
  SUM(Nvl(Projected,0))Projected,
  CASE WHEN SUM(NVL(Projected,0)) !=0 THEN
  ROUND(SUM(ProjectedINR)/SUM(Projected),4) END AS ProjectRate,
  SUM(Nvl(Actuals,0))Actuals,
  CASE WHEN SUM(NVL(Actuals,0)) !=0 THEN
  ROUND(SUM(ActualsINR)/SUM(Actuals),4) END AS ActualRate,
  (SUM(Nvl(Projected,0)) - SUM(Nvl(Actuals,0)))Variance,
  SUM(Nvl(CashAmountFcy,0))CashAmountFcy,
  CASE WHEN SUM(NVL(CashAmountFcy,0)) !=  0 THEN
  ROUND(SUM(CashAmountINR)/SUM(CashAmountFcy),4) END AS CashRate,
  SUM(Nvl(FrwdAmountFcy,0))FrwdAmountFcy,
  CASE WHEN SUM(NVL(FrwdAmountFcy,0)) !=0 THEN
  ROUND(SUM(FrwdAmountINR)/SUM(FrwdAmountFcy),4) END AS FCRate,
  --SUM(Actuals)-(SUM(CashAmountFcy)+SUM(FrwdAmountFcy))
  Sum(Nvl(TradeFCY,0)) Outstanding,
  SUM(Nvl(Outstanding,0))FrwdOutstanding,
  CASE WHEN SUM(NVL(Outstanding,0)) != 0 THEN
  ROUND(SUM(FrwdINR)/SUM(Outstanding),4) END AS HedgeRate,
  SUM(Nvl(Pandl,0))Pandl,
  CASE WHEN SUM(NVL(CashAmountFcy,0))+SUM(NVL(FrwdAmountFcy,0)) != 0 THEN
  ROUND(((SUM(CashAmountINR)+SUM(FrwdAmountINR))-SUM(Pandl))/(SUM(CashAmountFcy)+SUM(FrwdAmountFcy)),4) END AS NetRate,
  SUM (nvl(TradeFCY,0) - NVL(Outstanding,0))UncoveredAmount,
--  SUM(NVL(TradeFCY,0)) - SUM(NVL(Outstanding,0)) UncoveredAmount,
  CASE WHEN NVL(SUM(TradeFCY),0) != 0 THEN
    SUM(NVL(Outstanding,0)) END AS CoveredAmount,
  CASE WHEN NVL(SUM(TradeFCY),0) != 0 THEN
  ((SUM(NVL(Outstanding,0)))/Sum(NVL(TradeFCY,0)))
  ELSE
  0 END HedgeRatio,
  SUM(NVL(CashAmountFcy,0)) + SUM(NVL(FrwdAmountFcy,0)) SettledAmount,
  CASE WHEN SUM(NVL(CashAmountFcy,0)) != 0 OR  SUM(NVL(FrwdAmountFcy,0)) != 0 THEN
  Round((SUM(NVL(CashAmountINR,0)) + SUM(NVL(FrwdAmountINR,0)))/(SUM(NVL(CashAmountFcy,0)) + SUM(NVL(FrwdAmountFcy,0))),4) end as SettledRate,
  NVL(NVL(NVL(NVL(NVL(Projected.CurrencyCode,Actuals.CurrencyCode),CashSettle.CurrencyCode),FrwdSettle.CurrencyCode),PandL.CurrencyCode),ForwardContract.CurrencyCode)Currency,
--  Projected.TransactionType AS TransactionType,
  NVL(NVL(NVL(NVL(NVL(Projected.TransactionType,Actuals.TransactionType),CashSettle.TransactionType),FrwdSettle.TransactionType),PandL.TransactionType),ForwardContract.TransactionType) AS TransactionType,
  PKGRETURNCURSOR.fncgetdescription(Projected.CompanyCode,2)Company,
  frmDate,
  0 AS ProjectedType,
  0 AS ActualsType,
  0 AS CashSettleType,
  0 AS FrwdSettleType,
  0 AS PandLType,
  0 as ForwardContractType  
FROM
  (SELECT TO_CHAR(trad_maturity_date,'yyyymm') Maturity,
    TO_CHAR(trad_maturity_date,'MON-YYYY')MaturityMonth,
    SUM(trad_trade_fcy) Projected,
    SUM(trad_trade_fcy * trad_trade_rate)ProjectedINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2)CurrencyCode,
    CASE
      WHEN trad_import_export < 25900050
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    trad_company_code CompanyCode,
    'Projected' AS ProjectedType
  FROM trtran002
  WHERE trad_import_export IN(25900091,25900026)
  AND trad_record_status BETWEEN 10200001 AND 10200004
  AND TRAD_ENTRY_DATE <= frmDate
  GROUP BY TO_CHAR(trad_maturity_date,'yyyymm'),TO_CHAR(trad_maturity_date,'MON-YYYY'),trad_trade_currency,trad_local_currency,trad_import_export,trad_company_code
  ) Projected
FULL OUTER JOIN
  (SELECT TO_CHAR(trad_maturity_date,'yyyymm') Maturity,
    TO_CHAR(trad_maturity_date,'MON-YYYY')MaturityMonth,
    SUM(trad_trade_fcy) Actuals,
    SUM(trad_trade_fcy * trad_trade_rate)ActualsINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2) CurrencyCode,
    CASE
      WHEN trad_import_export < 25900050
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    SUM(PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,gconst.AMOUNTFCY,frmDate)) AS TradeFCY,
    'Actuals' AS ActualsType
  FROM trtran002
  WHERE trad_import_export NOT IN(25900091,25900026)
  AND trad_record_status BETWEEN 10200001 AND 10200004
  AND TRAD_ENTRY_DATE <= frmDate
  GROUP BY TO_CHAR(trad_maturity_date,'yyyymm'),TO_CHAR(trad_maturity_date,'MON-YYYY'),trad_trade_currency,trad_local_currency,trad_import_export
  )Actuals
ON Projected.Maturity = Actuals.Maturity
AND Projected.CurrencyCode = Actuals.CurrencyCode
AND Projected.TransactionType = Actuals.TransactionType
FULL OUTER JOIN
  (SELECT TO_CHAR(CDEL_CANCEL_DATE,'yyyymm')Maturity,
    TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY')MaturityMonth,
    SUM(cdel_cancel_amount) CashAmountFcy,
    SUM(cdel_cancel_amount * cdel_cancel_rate)CashAmountINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2) CurrencyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    'CashSettle' AS CashSettleType
  FROM TRTRAN006,
    TRTRAN001,TRTRAN002
  WHERE CDEL_DEAL_NUMBER      = DEAL_DEAL_NUMBER
  AND cdel_record_status NOT IN (10200005,10200006)
  AND DEAL_record_status NOT IN (10200005,10200006)
  AND Deal_Deal_Type          = 25400001
  AND CDEL_CANCEL_DATE <= frmDate
  AND TRAD_TRADE_REFERENCE = CDEL_TRADE_REFERENCE
  AND TRAD_RECORD_STATUS NOT IN (10200005,10200006)
  GROUP BY TO_CHAR(CDEL_CANCEL_DATE,'yyyymm'),TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY'),trad_trade_currency,trad_local_currency,deal_deal_type
  )CashSettle
ON CashSettle.Maturity = Projected.Maturity
AND Projected.CurrencyCode = CashSettle.CurrencyCode
AND Projected.TransactionType = CashSettle.TransactionType
FULL OUTER JOIN
  (SELECT TO_CHAR(CDEL_CANCEL_DATE,'yyyymm')Maturity,
    TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY')MaturityMonth,
    SUM(cdel_cancel_amount) FrwdAmountFcy,
    SUM(cdel_cancel_amount * cdel_cancel_rate)FrwdAmountINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2) CurrencyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
   'FrwdSettle' AS FrwdSettleType
  FROM TRTRAN006,
    TRTRAN001,trtran002
  WHERE CDEL_DEAL_NUMBER      = DEAL_DEAL_NUMBER
  AND TRAD_TRADE_REFERENCE = CDEL_TRADE_REFERENCE
  AND cdel_record_status NOT IN (10200005,10200006)
  AND DEAL_record_status NOT IN (10200005,10200006)
  AND TRAD_RECORD_STATUS NOT IN (10200005,10200006)
  AND Deal_Deal_Type         != 25400001
  AND cdel_cancel_type       != 27000001
  AND CDEL_CANCEL_DATE <= frmDate
  GROUP BY TO_CHAR(CDEL_CANCEL_DATE,'yyyymm'),TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY'),trad_trade_currency,trad_local_currency,deal_deal_type
  )FrwdSettle
ON FrwdSettle.Maturity = Projected.Maturity
AND Projected.CurrencyCode = FrwdSettle.CurrencyCode
AND Projected.TransactionType = FrwdSettle.TransactionType
FULL OUTER JOIN
  (SELECT TO_CHAR(CDEL_CANCEL_DATE,'yyyymm')Maturity,
    TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY')MaturityMonth,
    SUM(CDEL_PROFIT_LOSS) Pandl,
    PKGRETURNCURSOR.fncgetdescription(deal_base_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(deal_other_currency,2) CurrencyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    'PandL' AS PandLType
  FROM trtran006,
    trtran001
  WHERE cdel_deal_number= deal_deal_number
  --AND cdel_cancel_date BETWEEN '01-APR-16' AND '24-NOV-16'
  AND cdel_cancel_type        = 27000001
  AND cdel_record_status NOT IN (10200005,10200006)
  AND DEAL_record_status NOT IN (10200005,10200006)
  AND CDEL_CANCEL_DATE <= frmDate
  GROUP BY TO_CHAR(CDEL_CANCEL_DATE,'yyyymm'),TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY'),deal_base_currency,deal_other_currency,deal_deal_type
  ) PandL
ON PandL.Maturity = Projected.Maturity
AND Projected.CurrencyCode = PandL.CurrencyCode
AND Projected.TransactionType = PandL.TransactionType
FULL OUTER JOIN
  (SELECT TO_CHAR(deal_maturity_date,'yyyymm')Maturity,
    TO_CHAR(deal_maturity_date,'MON-YYYY')MaturityMonth,
    SUM(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,frmDate))Outstanding,
    SUM(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,frmDate)*deal_Exchange_rate)FrwdINR,
    PKGRETURNCURSOR.fncgetdescription(deal_base_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(deal_other_currency,2) CurrencyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
   'ForwardContract' AS ForwardContractType
  FROM trtran001
  WHERE DEAL_record_status NOT IN (10200005,10200006)
  AND DEAL_EXECUTE_DATE <= frmDate
  GROUP BY TO_CHAR(deal_maturity_date,'yyyymm'),TO_CHAR(deal_maturity_date,'MON-YYYY'),deal_base_currency,deal_other_currency,deal_deal_type
  ) ForwardContract
ON ForwardContract.Maturity = Projected.Maturity
AND Projected.CurrencyCode = ForwardContract.CurrencyCode
AND Projected.TransactionType = ForwardContract.TransactionType
GROUP BY 
--Projected.Maturity,Actuals.Maturity,CashSettle.Maturity,FrwdSettle.Maturity,PandL.Maturity,ForwardContract.Maturity,
--Projected.MaturityMonth,Actuals.MaturityMonth,CashSettle.MaturityMonth,FrwdSettle.MaturityMonth,PandL.MaturityMonth,ForwardContract.MaturityMonth,
----Projected.Maturity,Projected.MaturityMonth,  ForwardContract.Maturity,ForwardContract.MaturityMonth,
--  Projected.CurrencyCode,Actuals.CurrencyCode,
--  CashSettle.CurrencyCode,FrwdSettle.CurrencyCode,ForwardContract.CurrencyCode,PandL.CurrencyCode,
--  Projected.TransactionType,Actuals.TransactionType,CashSettle.TransactionType,FrwdSettle.TransactionType,
--  ForwardContract.TransactionType,PandL.TransactionType,
  NVL(NVL(NVL(NVL(NVL(Projected.Maturity,Actuals.Maturity),CashSettle.Maturity),FrwdSettle.Maturity),PandL.Maturity),ForwardContract.Maturity),
  NVL(NVL(NVL(NVL(NVL(Projected.MaturityMonth,Actuals.MaturityMonth),CashSettle.MaturityMonth),FrwdSettle.MaturityMonth),PandL.MaturityMonth),ForwardContract.MaturityMonth),
  NVL(NVL(NVL(NVL(NVL(Projected.CurrencyCode,Actuals.CurrencyCode),CashSettle.CurrencyCode),FrwdSettle.CurrencyCode),PandL.CurrencyCode),ForwardContract.CurrencyCode),
  NVL(NVL(NVL(NVL(NVL(Projected.TransactionType,Actuals.TransactionType),CashSettle.TransactionType),FrwdSettle.TransactionType),PandL.TransactionType),ForwardContract.TransactionType),
  Projected.CompanyCode
--  Projected.ProjectedType, Actuals.ActualsType,CashSettle.CashSettleType,FrwdSettle.FrwdSettleType,PandL.PandLType,ForwardContract.ForwardContractType
)
  order by Maturity; 
   OPEN NextCursor FOR
SELECT * FROM (
  SELECT 
    trad_trade_reference ReferenceNumber,
    trad_trade_fcy AmountFcy,
    trad_trade_rate Rate,
    trad_trade_fcy * trad_trade_rate AmountINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2)Currency,
    PKGRETURNCURSOR.fncgetdescription(trad_local_bank,2) LocalBank,
    trad_reference_date ReferenceDate,
    trad_maturity_date MaturityDate,
    trad_user_reference UserReference,
    TO_CHAR(trad_maturity_date,'yyyymm') Maturity,
    TO_CHAR(trad_maturity_date,'MON-YYYY')MaturityMonth,
    trad_company_code CompanyCode,
    CASE
      WHEN trad_import_export < 25900050
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    'Projected' AS ProjectedType,
    NULL AS ActualsType,
    NULL AS CashSettleType,
    NULL AS FrwdSettleType,
    NULL AS PandLType,
    null as ForwardContractType,
    0 AS OutstandingAmount,
    0 ProfitLoss,
    trad_trade_rate as  BookingRate
  FROM trtran002
  WHERE trad_import_export IN(25900091,25900026)
  AND trad_record_status BETWEEN 10200001 AND 10200004
  AND TRAD_ENTRY_DATE <= frmDate
  UNION ALL
  SELECT 
    trad_trade_reference ReferenceNumber,
    trad_trade_fcy AmountFcy,
    trad_trade_rate Rate,
    trad_trade_fcy * trad_trade_rate AmountINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2)Currency,
    PKGRETURNCURSOR.fncgetdescription(trad_local_bank,2) LocalBank,
    trad_reference_date ReferenceDate,
    trad_maturity_date MaturityDate,
    trad_user_reference UserReference,
    TO_CHAR(trad_maturity_date,'yyyymm') Maturity,
    TO_CHAR(trad_maturity_date,'MON-YYYY')MaturityMonth,
    trad_company_code CompanyCode,
    CASE
      WHEN trad_import_export < 25900050
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    NULL AS ProjectedType,
    'Actuals' AS ActualsType,
    NULL AS CashSettleType,
    NULL AS FrwdSettleType,
    NULL AS PandLType,
    null as ForwardContractType,    
    PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,1,frmDate) AS OutstandingAmount,
    0 ProfitLoss,
    trad_trade_rate as  BookingRate
  FROM trtran002
  WHERE trad_import_export NOT IN(25900091,25900026)
  AND trad_record_status BETWEEN 10200001 AND 10200004
  AND TRAD_ENTRY_DATE <= frmDate
  UNION ALL
   SELECT 
    trad_trade_reference ReferenceNumber,
    cdel_cancel_amount AmountFcy,
    cdel_cancel_rate Rate,
    cdel_cancel_amount * cdel_cancel_rate AmountINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2)Currency,
    PKGRETURNCURSOR.fncgetdescription(deal_counter_party,2) LocalBank,
    deal_execute_date ReferenceDate,
    deal_maturity_date MaturityDate,
    trad_user_reference UserReference,
    TO_CHAR(CDEL_CANCEL_DATE,'yyyymm') Maturity,
    TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY')MaturityMonth,
    deal_company_code CompanyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    NULL AS ProjectedType,
    NULL AS ActualsType,
    'CashSettle' AS CashSettleType,
    NULL AS FrwdSettleType,
    NULL AS PandLType,
    NULL AS ForwardContractType,
    0 AS OutstandingAmount,
    0 ProfitLoss,
    trad_trade_rate as  BookingRate
  FROM TRTRAN006,TRTRAN001,TRTRAN002
  WHERE CDEL_DEAL_NUMBER      = DEAL_DEAL_NUMBER
  AND cdel_record_status NOT IN (10200005,10200006)
  AND DEAL_record_status NOT IN (10200005,10200006)
  AND Deal_Deal_Type          = 25400001
  AND CDEL_CANCEL_DATE <= frmDate
  AND TRAD_TRADE_REFERENCE = CDEL_TRADE_REFERENCE
  AND TRAD_RECORD_STATUS NOT IN (10200005,10200006)
  UNION ALL
   SELECT 
    trad_trade_reference ReferenceNumber,
    cdel_cancel_amount AmountFcy,
    cdel_cancel_rate Rate,
    cdel_cancel_amount * cdel_cancel_rate AmountINR,
    PKGRETURNCURSOR.fncgetdescription(trad_trade_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(trad_local_currency,2)Currency,
    PKGRETURNCURSOR.fncgetdescription(deal_counter_party,2) LocalBank,
    deal_execute_date ReferenceDate,
    deal_maturity_date MaturityDate,
    trad_user_reference UserReference,
    TO_CHAR(CDEL_CANCEL_DATE,'yyyymm') Maturity,
    TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY')MaturityMonth,
    deal_company_code CompanyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    NULL AS ProjectedType,
    NULL AS ActualsType,
    NULL AS CashSettleType,
    'FrwdSettle' AS FrwdSettleType,
    NULL AS PandLType,
    NULL AS ForwardContractType,
    0 AS OutstandingAmount,
    0 ProfitLoss,
    trad_trade_rate as  BookingRate
  FROM TRTRAN006,TRTRAN001,TRTRAN002
  WHERE CDEL_DEAL_NUMBER      = DEAL_DEAL_NUMBER
  AND cdel_record_status NOT IN (10200005,10200006)
  AND DEAL_record_status NOT IN (10200005,10200006)
  AND Deal_Deal_Type          != 25400001
  AND CDEL_CANCEL_DATE <= frmDate
  AND TRAD_TRADE_REFERENCE = CDEL_TRADE_REFERENCE
  AND TRAD_RECORD_STATUS NOT IN (10200005,10200006)
  UNION ALL
   SELECT 
    deal_deal_number ReferenceNumber,
    cdel_cancel_amount AmountFcy,
    cdel_cancel_rate Rate,
    cdel_cancel_amount * cdel_cancel_rate AmountINR,
    PKGRETURNCURSOR.fncgetdescription(deal_base_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(deal_other_currency,2)Currency,
    PKGRETURNCURSOR.fncgetdescription(deal_counter_party,2) LocalBank,
    deal_execute_date ReferenceDate,
    deal_maturity_date MaturityDate,
    deal_user_reference UserReference,
    TO_CHAR(CDEL_CANCEL_DATE,'yyyymm') Maturity,
    TO_CHAR(CDEL_CANCEL_DATE,'MON-YYYY')MaturityMonth,
    deal_company_code CompanyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    NULL AS ProjectedType,
    NULL AS ActualsType,
    NULL AS CashSettleType,
    Null AS FrwdSettleType,
    'PandL' AS PandLType,
    NULL AS ForwardContractType,
    0 AS OutstandingAmount,
    CDEL_PROFIT_LOSS ProfitLoss,
    deal_exchange_rate as  BookingRate
  FROM trtran006,trtran001
  WHERE cdel_deal_number= deal_deal_number
  AND cdel_cancel_type        = 27000001
  AND cdel_record_status NOT IN (10200005,10200006)
  AND DEAL_record_status NOT IN (10200005,10200006)
  AND CDEL_CANCEL_DATE <= frmDate
UNION ALL
   SELECT 
    deal_deal_number ReferenceNumber,
    pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,frmDate) AmountFcy,
    deal_exchange_rate Rate,
    pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,frmDate) * deal_exchange_rate AmountINR,
    PKGRETURNCURSOR.fncgetdescription(deal_base_currency,2)||'/'|| PKGRETURNCURSOR.fncgetdescription(deal_other_currency,2)Currency,
    PKGRETURNCURSOR.fncgetdescription(deal_counter_party,2) LocalBank,
    deal_execute_date ReferenceDate,
    deal_maturity_date MaturityDate,
    deal_user_reference UserReference,
    TO_CHAR(deal_maturity_date,'yyyymm') Maturity,
    TO_CHAR(deal_maturity_date,'MON-YYYY')MaturityMonth,
    deal_company_code CompanyCode,
    CASE
      WHEN deal_deal_type = 25300002
      THEN 'Export'
      ELSE 'Import'
    END AS TransactionType,
    NULL AS ProjectedType,
    NULL AS ActualsType,
    NULL AS CashSettleType,
    NULL AS FrwdSettleType,
    NULL AS PandLType,
   'ForwardContract' AS ForwardContractType,
    pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,frmDate) AS OutstandingAmount,
    0 ProfitLoss,
    deal_exchange_rate as  BookingRate
  FROM trtran001
  WHERE DEAL_record_status NOT IN (10200005,10200006)
  AND DEAL_EXECUTE_DATE <= frmDate);   
   Goto Process_End;
  end if;
  
--  If (varReportId='MISFXREPORT') then 
----  prcMISReport(frmdate,todate);
----  numError := pkgforexprocess.fncPositionGenerate('UserID',frmdate);
--  numRecordSets:=2;
--Open Gencursor for 
--select MISR_DESCRIPTION as Description,
--    PKGRETURNCURSOR.fncgetdescription(MISR_COMPANY_CODE,2) as CompanyName,
--    PKGRETURNCURSOR.fncgetdescription(MISR_LOCATION_CODE,2) as Location,
--    PKGRETURNCURSOR.fncgetdescription(MISR_COUNTER_PARTY,2) as CounterParty,
--    PKGRETURNCURSOR.fncgetdescription(MISR_CURRENCY_CODE,2) as Currency,
--    PKGRETURNCURSOR.fncgetdescription(MISR_FOR_CURRENCY,2) as ForCurrency,
--    PKGRETURNCURSOR.fncgetdescription(MISR_TRANSACTION_TYPE,2) as TransType,
--    PKGRETURNCURSOR.fncgetdescription(MISR_BUY_SELL,2) as BuySell,
--    MISR_TRANSACTION_AMOUNT as TransAmount,
--    MISR_EXCHANGE_RATE as ExRate,
--    MISR_EFFECTIVE_RATE AS EffRate,
--    MISR_ACTUAL_PROJECTED as ActualProjected,
--    MISR_EXPAIRY_QUARTER as ExpQuterly,
--    MISR_EXPAIRY_MONTH as ExpMonth,
--    MISR_MONTH_ORDER as MonthOrder,
--    Misr_main_order as MainOrder,
--    frmdate as frmdate,
--    todate as todate
--    FROM TRSYSTEM975 
--    --WHERE MISR_ASON_DATE=frmdate
--    ORDER BY MISR_MAIN_ORDER,MISR_SUB_ORDER; 
--  
--      open nextCursor for
--      select MISR_DESCRIPTION as Description,
--    PKGRETURNCURSOR.fncgetdescription(MISR_COMPANY_CODE,2) as CompanyName,
--    PKGRETURNCURSOR.fncgetdescription(MISR_LOCATION_CODE,2) as Location,
--    PKGRETURNCURSOR.fncgetdescription(MISR_COUNTER_PARTY,2) as CounterParty,
--    PKGRETURNCURSOR.fncgetdescription(MISR_CURRENCY_CODE,2) as Currency,
--    PKGRETURNCURSOR.fncgetdescription(MISR_FOR_CURRENCY,2) as ForCurrency,
--    PKGRETURNCURSOR.fncgetdescription(MISR_TRANSACTION_TYPE,2) as TransType,
--    PKGRETURNCURSOR.fncgetdescription(MISR_BUY_SELL,2) as BuySell,
--    PKGRETURNCURSOR.fncgetdescription(MISR_PORT_FOLIO,2) as PortFolio,
--    PKGRETURNCURSOR.fncgetdescription(MISR_SUBPORT_FOLIO,2) as SubPortFolio,
--    PKGRETURNCURSOR.fncgetdescription(MISR_DEAL_TYPE,2) as DealType,
--    MISR_TRANSACTION_AMOUNT as TransAmount,
--    MISR_EXCHANGE_RATE as ExRate,
--    MISR_EFFECTIVE_RATE AS EffRate,
--    MISR_ACTUAL_PROJECTED as ActualProjected,
--    MISR_EXPAIRY_QUARTER as ExpQuterly,
--    MISR_EXPAIRY_MONTH as ExpMonth,
--    MISR_MONTH_ORDER as MonthOrder,
--    MISR_REFERENCE_DATE as RefDate,
--    misr_maturity_date as MaturityDate,
--    misr_reference_number as RefNumber,
--    MISR_BANK_REFERENCE as BankRef,
--    frmdate as frmdate,
--    todate as todate
--    FROM TRSYSTEM975 
--    WHERE MISR_ASON_DATE=frmdate
--    ORDER BY MISR_MAIN_ORDER,MISR_SUB_ORDER;      
--     
--     Goto Process_End;
--  end if;
  If (varReportId='MISFXREPORT') then 
--  prcMISReport(frmdate,todate);
  numError:= PKGRISKVALIDATION.fncRiskPopulateGAP(frmdate);
  --  into numError  fr
  numRecordSets:=2;
Open Gencursor for 
--SELECT 
--  PKGRETURNCURSOR.fncgetdescription(CRSH_COMPANY_CODE,2)  AS CompanyName,
--  PKGRETURNCURSOR.fncgetdescription(CRSH_LOCATION_CODE,2) AS Location,
--  PKGRETURNCURSOR.fncgetdescription(CRSH_CURRENCY_CODE,2)  AS Currency,
--  PKGRETURNCURSOR.fncgetdescription(CRSH_FOR_CURRENCY,2)   AS ForCurrency,
--  PKGRETURNCURSOR.fncgetdescription(CRSH_PORTFOLIO_CODE,2) AS PortFolio,
--  CRSH_EXPORT_FCY ExportFcy,
--  CRSH_IMPORT_FCY ImportFcy,
--  CRSH_NET_EXPOSURE NetExposure,
--  CRSH_HEDGE_SELL HedgeSell,
--  CRSH_HEDGE_SELLRATE HedgeSellRate,
--  CRSH_HEDGE_BUY HedgeBuy,
--  CRSH_HEDGE_BUYRATE HedgeBuyRate,
--  CRSH_TOT_HEDGE HedgeTotal,
--  CRSH_PERCENTAGE_HEDGE HedgePercentage,
--  CRSH_FIRSTFORWARD_RATE ForwardRateExposure,
--  CRSH_NET_EXPOSURE PortfolioOs,
--  CRSH_PORTFOLIO_RATE PortFolioRate,
--  (CRSH_NET_EXPOSURE - CRSH_TOT_HEDGE) OpenAmount,
--  CRSH_ADJUSTED_MTMRATE RiskAdusted,
--  CRSH_BUDGET_RATE BudgetRate,
--  CRSH_MTM_RATE TodaysMTM,
--  (CRSH_LOCKIN_RATE + NVL(CRSH_FIRSTFORWARD_RATE,0)) LockinRate,
--  CRSH_TOT_HEDGE ForwardCover,
--  CRSH_TOT_HEDGERATE CoverRate,
--  TO_CHAR(CRSH_MATURITY_DATE ,'MON YYYY')ExpMonth,
--  TO_CHAR(CRSH_MATURITY_DATE,'YYYYMM')MonthOrder,
--  frmdate as frmdate,
--  todate as todate
--  FROM trsystem996a order by TO_CHAR(CRSH_MATURITY_DATE,'YYYYMM'); 

SELECT 
  PKGRETURNCURSOR.fncgetdescription(CRSH_COMPANY_CODE,2)  AS CompanyName,
  PKGRETURNCURSOR.fncgetdescription(CRSH_LOCATION_CODE,2) AS Location,
  PKGRETURNCURSOR.fncgetdescription(CRSH_CURRENCY_CODE,2)  AS Currency,
  PKGRETURNCURSOR.fncgetdescription(CRSH_FOR_CURRENCY,2)   AS ForCurrency,
  PKGRETURNCURSOR.fncgetdescription(CRSH_PORTFOLIO_CODE,2) AS PortFolio,
  SUM(CRSH_EXPORT_FCY) ExportFcy,
  SUM(CRSH_IMPORT_FCY) ImportFcy,
  SUM(CRSH_NET_EXPOSURE) NetExposure,
  SUM(CRSH_HEDGE_SELL) HedgeSell,
  ROUND(SUM(CRSH_HEDGE_SELL * CRSH_HEDGE_SELLRATE)/DECODE (SUM(CRSH_HEDGE_SELL),0,1,SUM(CRSH_HEDGE_SELL)),4) HedgeSellRate,
  SUM(CRSH_HEDGE_BUY) HedgeBuy,
  ROUND(SUM(CRSH_HEDGE_BUY * CRSH_HEDGE_BUYRATE)/DECODE(SUM(CRSH_HEDGE_BUY),0,1,SUM(CRSH_HEDGE_BUY)),4) HedgeBuyRate,
  SUM(CRSH_TOT_HEDGE) HedgeTotal,
  ROUND((SUM(CRSH_TOT_HEDGE) * 100)/SUM(CRSH_NET_EXPOSURE),0) HedgePercentage,
  ROUND(SUM(CRSH_NET_EXPOSURE *  CRSH_FIRSTFORWARD_RATE)/SUM(CRSH_NET_EXPOSURE),4) ForwardRateExposure,
  SUM(CRSH_NET_EXPOSURE) PortfolioOs,
  ROUND(SUM(CRSH_NET_EXPOSURE * CRSH_PORTFOLIO_RATE)/SUM(CRSH_NET_EXPOSURE),4) PortFolioRate,
  (SUM(CRSH_NET_EXPOSURE) - SUM(CRSH_TOT_HEDGE)) OpenAmount,
  ROUND(SUM(CRSH_NET_EXPOSURE * CRSH_ADJUSTED_MTMRATE)/SUM(CRSH_NET_EXPOSURE),4) RiskAdusted,
  ROUND(SUM(CRSH_NET_EXPOSURE*CRSH_BUDGET_RATE)/SUM(CRSH_NET_EXPOSURE),4) BudgetRate,
  ROUND(SUM(CRSH_NET_EXPOSURE * CRSH_MTM_RATE)/SUM(CRSH_NET_EXPOSURE),4) TodaysMTM,
  round(SUM(CRSH_NET_EXPOSURE * ((nvl(CRSH_LOCKIN_RATE,0) + NVL(CRSH_FIRSTFORWARD_RATE,0))))/ SUM(CRSH_NET_EXPOSURE),4) LockinRate,
  -- 0 LockinRate,
  SUM(CRSH_TOT_HEDGE) ForwardCover,
  SUM(CRSH_TOT_HEDGE * CRSH_TOT_HEDGERATE) CoverRate,
  TO_CHAR(CRSH_MATURITY_DATE ,'MON YYYY')ExpMonth,
  TO_CHAR(CRSH_MATURITY_DATE,'YYYYMM')MonthOrder,
 frmdate as frmdate,
 todate as todate
  FROM trsystem996a 
  GROUP BY 
    PKGRETURNCURSOR.fncgetdescription(CRSH_COMPANY_CODE,2),
  PKGRETURNCURSOR.fncgetdescription(CRSH_LOCATION_CODE,2),
  PKGRETURNCURSOR.fncgetdescription(CRSH_CURRENCY_CODE,2),
  PKGRETURNCURSOR.fncgetdescription(CRSH_FOR_CURRENCY,2),
  PKGRETURNCURSOR.fncgetdescription(CRSH_PORTFOLIO_CODE,2),
    TO_CHAR(CRSH_MATURITY_DATE ,'MON YYYY'),
  TO_CHAR(CRSH_MATURITY_DATE,'YYYYMM')
  order by TO_CHAR(CRSH_MATURITY_DATE,'YYYYMM');
  
      open nextCursor for
      select MISR_DESCRIPTION as Description,
    PKGRETURNCURSOR.fncgetdescription(MISR_COMPANY_CODE,2) as CompanyName,
    PKGRETURNCURSOR.fncgetdescription(MISR_LOCATION_CODE,2) as Location,
    PKGRETURNCURSOR.fncgetdescription(MISR_COUNTER_PARTY,2) as CounterParty,
    PKGRETURNCURSOR.fncgetdescription(MISR_CURRENCY_CODE,2) as Currency,
    PKGRETURNCURSOR.fncgetdescription(MISR_FOR_CURRENCY,2) as ForCurrency,
    PKGRETURNCURSOR.fncgetdescription(MISR_TRANSACTION_TYPE,2) as TransType,
    PKGRETURNCURSOR.fncgetdescription(MISR_BUY_SELL,2) as BuySell,
    PKGRETURNCURSOR.fncgetdescription(MISR_PORT_FOLIO,2) as PortFolio,
    PKGRETURNCURSOR.fncgetdescription(MISR_SUBPORT_FOLIO,2) as SubPortFolio,
    PKGRETURNCURSOR.fncgetdescription(MISR_DEAL_TYPE,2) as DealType,
    MISR_TRANSACTION_AMOUNT as TransAmount,
    MISR_EXCHANGE_RATE as ExRate,
    MISR_EFFECTIVE_RATE AS EffRate,
    MISR_ACTUAL_PROJECTED as ActualProjected,
    MISR_EXPAIRY_QUARTER as ExpQuterly,
    MISR_EXPAIRY_MONTH as ExpMonth,
    MISR_MONTH_ORDER as MonthOrder,
    MISR_REFERENCE_DATE as RefDate,
    misr_maturity_date as MaturityDate,
    misr_reference_number as RefNumber,
    MISR_BANK_REFERENCE as BankRef,
    frmdate as frmdate,
    todate as todate
    FROM TRSYSTEM975 
    WHERE MISR_ASON_DATE=frmdate
    ORDER BY MISR_MAIN_ORDER,MISR_SUB_ORDER;      
     
     Goto Process_End;
  end if;
  
  If (varReportId='MISFOREXTRACKER') then
    --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);
    prcMISReport(frmdate,todate);
   numRecordSets:=2;
     Open Gencursor for 
           Select  misr_expairy_quarter as ExpQuarterly,misr_expairy_month as ExpMonth,
                   UPPER(PKGRETURNCURSOR.fncgetdescription(misr_location_code,2)) as LocationName,
                   PKGRETURNCURSOR.fncgetdescription(misr_currency_code,2) as Currency,MISR_MONTH_ORDER as MonthOrder,
                  (select sum(sub.MISR_TRANSACTION_AMOUNT)  
                 from trsystem975  sub where sub.misr_description='Export'
                   and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter) Export,
                   (select sum(abs(MISR_TRANSACTION_AMOUNT))  
                 from trsystem975  sub where misr_description='Import'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter) Import,
                nvl((select sum(MISR_TRANSACTION_AMOUNT)
                 from trsystem975  sub where misr_description='HedgeBuy'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),0) HedgeBuy,
                nvl((select sum(MISR_TRANSACTION_AMOUNT*MISR_EXCHANGE_RATE)
                 from trsystem975  sub where misr_description='HedgeBuy'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),0) HedgeBuyINR,
               nvl((select sum(MISR_TRANSACTION_AMOUNT) 
                 from trsystem975  sub where misr_description='HedgeSell'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),0) HedgeSell,
                  nvl((SeLECT SUM(MISR_TRANSACTION_AMOUNT*MISR_EXCHANGE_RATE)
                   from trsystem975  sub where misr_description='HedgeSell'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),0) HedgeSellINR,
               round((select sum(MISR_TRANSACTION_AMOUNT *MISR_EXCHANGE_RATE ) /
                       decode(sum(nvl(MISR_TRANSACTION_AMOUNT,0) ),0,1,sum(MISR_TRANSACTION_AMOUNT ))
                 from trsystem975 sub where sub.misr_description in('HedgeSell','HedgeBuy')
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),4) AvgForwardRate ,
                  frmdate AS fromDate,
                  'FY - '|| SUBSTR(MISR_EXPAIRY_QUARTER,3,6)financialYear,
                  misr_location_code LocationCode
              from trsystem975 Ma where misr_transaction_amount!=0
              AND MISR_LOCATION_CODE NOT IN(30200006)
              and misr_maturity_date >= trunc(frmdate,'month')
              group by misr_expairy_month,misr_location_code,misr_currency_code,misr_expairy_quarter,MISR_MONTH_ORDER
             order by MISR_MONTH_ORDER;
    
    open nextCursor for
      Select  misr_expairy_quarter as ExpQuarterly,misr_expairy_month as ExpMonth,
                   PKGRETURNCURSOR.fncgetdescription(misr_location_code,2) as LocationName,
                   PKGRETURNCURSOR.fncgetdescription(misr_currency_code,2) as Currency,MISR_MONTH_ORDER as MonthOrder,
                    (select sum(sub.MISR_TRANSACTION_AMOUNT)  
                 from trsystem975  sub where sub.misr_description='Export'
                   and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter) Export
              from trsystem975 Ma where misr_transaction_amount!=0
              group by misr_expairy_month,misr_location_code,misr_currency_code,misr_expairy_quarter,MISR_MONTH_ORDER
             order by MISR_MONTH_ORDER;
            
       Goto Process_End;
  end if;
  
if VARREPORTID = 'LIVEMARKETDEALBORROWING' then
      QUERY_STR:='select   pkgreturncursor.fncgetdescription( MBOR_COMPANY_CODE,2) AS Companyname,
                            pkgreturncursor.fncgetdescription( MBOR_COMPANY_CODE,1) Company1,
                            MBOR_DEAL_NUMBER AS DealNo,
                            pkgfixeddepositproject.fncgetisinname(MBOR_USER_REFERENCE,MBOR_TRANSACTION_TYPE) as ISINName,
                            MBOR_EXECUTE_DATE AS ExecuteDate,
                            MBOR_VALUE_DATE as Valuedate,
                            pkgreturncursor.fncgetdescription(MBOR_TRANSACTION_TYPE,2) AS TransactionType,
                            pkgreturncursor.fncgetdescription(MBOR_COUNTER_PARTY ,2)AS CoutnerParty,
                            MBOR_UNIT_QUANTITY      as units,
                            MBOR_UNIT_PRICE  as unitprice,
                            MBOR_DEAL_AMOUNT AS DealAmount,
                            MBOR_FACE_VALUE as MaturityAmount,
                            MBOR_INTEREST_RATE as Yields,
                            MBOR_MARKET_PRICE as ContractPrice,
                            MBOR_DUE_DATE as MaurityDate,
                            MBOR_COMPANY_RATING as CompanyRating,
                            MBOR_BROKERAGE_AMOUNT as BrokerageAmt,
                            MBOR_INTEREST_AMOUNT as InterestAmt,
                            MBOR_DEALER_REMARK Remark1,
                             --pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                            '||''''||frmdate||''''||' as AsonDate
                             ' || varGroupField || '
                   from     TRTRAN031A
                   where    MBOR_record_status NOT IN (10200005,10200006) and
                            ((MBOR_process_complete = 12400001  and MBOR_complete_date > '||''''||frmdate||''''||') or MBOR_process_complete = 12400002) and
                            MBOR_execute_date <='||''''||frmdate||''''||'';
                      delete from TEMP; commit;
     insert into TEMP values (QUERY_STR||FINALCONDITION,'Hari'); commit;
       OPEN Gencursor FOR Query_Str||finalCondition||'order by 5'; 
    GOTO PROCESS_END;
end if;  

 if (varReportId='EXPORTTRACKERREPORT') then
   numerror     := pkgforexprocess.fncpositiongenerate(varuserid,frmdate);
   prcMISReport_New(frmdate,todate);
   numRecordSets:=2;
      Open Gencursor for     
           Select  misr_expairy_quarter as ExpQuterly,misr_expairy_month as ExpMonth,
                   UPPER(PKGRETURNCURSOR.fncgetdescription(misr_location_code,2)) as LocationName,
                   PKGRETURNCURSOR.fncgetdescription(misr_currency_code,2) as Currency,MISR_MONTH_ORDER as MonthOrder,
               nvl((select sum(MISR_TRANSACTION_AMOUNT) 
                 from trsystem975  sub where misr_description='HedgeSell'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),0) TransAmountFCY,
                  nvl((SeLECT SUM(MISR_TRANSACTION_AMOUNT*MISR_EXCHANGE_RATE)
                   from trsystem975  sub where misr_description='HedgeSell'
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code 
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),0) TransAmountINR,
               round((select sum(MISR_TRANSACTION_AMOUNT *MISR_EXCHANGE_RATE ) /
                       decode(sum(nvl(MISR_TRANSACTION_AMOUNT,0) ),0,1,sum(MISR_TRANSACTION_AMOUNT ))
                 from trsystem975 sub where sub.misr_description in('HedgeSell','HedgeBuy')
                  and ma.misr_expairy_month= sub.misr_expairy_month
                  and ma.misr_location_code= sub.misr_location_code
                  and ma.misr_currency_code= sub.misr_currency_code
                  and ma.misr_expairy_quarter=sub.misr_expairy_quarter),4) AvgForwardRate ,
                  frmdate as frmdate,
                  todate as todate,
                  'FY - '|| SUBSTR(MISR_EXPAIRY_QUARTER,3,6)financialYear,
                  misr_location_code LocationCode
              from trsystem975 Ma where misr_transaction_amount!=0
              AND MISR_TRANSACTION_TYPE IN(25900011,25900012,25900014,25900015,25900018,
                          25900019,25900020,25900021,25900022,25900023,
                          25900061,25900062,25900078,25900079,25900082,
                          25900083,25900084,25900085,25900074,25900075)
              group by misr_expairy_month,misr_location_code,misr_currency_code,misr_expairy_quarter,MISR_MONTH_ORDER
             order by MISR_MONTH_ORDER;
             
      
--        Select  misr_expairy_quarter as ExpQuterly,misr_expairy_month as ExpMonth, sum(MISR_TRANSACTION_AMOUNT) as TransAmountFCY
--        ,sum(misr_local_amount) as TransAmountINR,PKGRETURNCURSOR.fncgetdescription(misr_location_code,2) as LocationName,
--        PKGRETURNCURSOR.fncgetdescription(misr_currency_code,2) as Currency,MISR_MONTH_ORDER as MonthOrder ,
--         frmdate as frmdate,
--          todate as todate,
--          misr_location_code LocationCode
--        from trsystem975   where MISR_TRANSACTION_TYPE IN(25900011,25900012,25900014,25900015,25900018,
--                          25900019,25900020,25900021,25900022,25900023,
--                          25900061,25900062,25900078,25900079,25900082,
--                          25900083,25900084,25900085,25900074,25900075)                   
--        group by misr_expairy_month,misr_location_code,misr_currency_code,misr_expairy_quarter,MISR_MONTH_ORDER
--        order by MISR_MONTH_ORDER;
        
      open nextCursor for              
      Select  misr_expairy_quarter as ExpQuarterly,misr_expairy_month as ExpMonth,
      MISR_BANK_REFERENCE AS BankRef,PKGRETURNCURSOR.fncgetdescription(MISR_COUNTER_PARTY,2) as CounterParty,
      sum(MISR_TRANSACTION_AMOUNT) as TransAmountFCY,sum(misr_local_amount) as TransAmountINR,
      PKGRETURNCURSOR.fncgetdescription(misr_location_code,2) as LocationName,
      PKGRETURNCURSOR.fncgetdescription(misr_currency_code,2) as Currency,MISR_MONTH_ORDER as MonthOrder  ,
      MISR_EXCHANGE_RATE as ExRate,misr_maturity_date as expirydate,
       frmdate as frmdate,
       todate as todate
      from trsystem975   where  MISR_TRANSACTION_TYPE IN(25900011,25900012,25900014,25900015,25900018,
                          25900019,25900020,25900021,25900022,25900023,
                          25900061,25900062,25900078,25900079,25900082,
                          25900083,25900084,25900085,25900074,25900075)                    
      group by misr_expairy_month,misr_location_code,misr_currency_code,MISR_COUNTER_PARTY,
      MISR_BANK_REFERENCE,misr_expairy_quarter,MISR_MONTH_ORDER,MISR_EXCHANGE_RATE,misr_maturity_date
      order by MISR_MONTH_ORDER;
     Goto Process_End;
  end if;

-- if varReportID= 'INVESTMENTREPORT'   then
--  insert into temp values(finalcondition,finalcondition);commit;
----    SELECT  substr(FINALCONDITION, instr(FINALCONDITION,'MFTR_COMPANY_CODE',1)+23,8) 
----       into NUMSELCTEDCOMPANY from DUAL;    
--       
--       insert into temp values (NUMSELCTEDCOMPANY,NUMSELCTEDCOMPANY);commit;
--      Query_str:='select
--        pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) as Company,
--        MFSC_SCHEME_NAVNAME as NAVName,
--        pkgreturncursor.fncgetdescription(MFTR_TRANSACTION_TYPE,1) as TransactionType,
--        mftr_reference_number as transactionrefno,
--        MFTR_reference_DATE as TransactionDate,
--        MFTR_TRANSACTION_PRICE as Rate,
--        MFTR_TRANSACTION_QUANTITY as Units,
--       -1* MFTR_TRANSACTION_AMOUNT as TransAMt,
--        (select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=mftr_nav_code
--         and mfmm_record_status in (10200003 ,10200004) and MFMM_REFERENCE_DATE<='||''''||frmdate||''''||') as NAVDate,      
--        pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,'||''''||frmdate||''''||',3) as LatestNAV, --check
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE) as BalancedUnits,--check
--        round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,'||''''||frmdate||''''||',3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE)),2) as PresentValue,
--        decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE),0,0,
--        (round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,'||''''||frmdate||''''||',3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE)),2) -
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,'||''''||frmdate||''''||',MFTR_COMPANY_CODE) /*MFTR_TRANSACTION_AMOUNT*/ )) as NotionalPandL,
--      --  pkgfixeddepositproject.fncgetmfgainloss(mftr_reference_number ,'||''''||frmdate||''''||') as ProfitBooked,
--         0 as ProfitBooked,
--      decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE),0 ,0,((select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<='||''''||frmdate||''''||') - MFTR_TRANSACTION_DATE)) as AgeinDays,
--        round((((decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,'||''''||frmdate||''''||',MFTR_COMPANY_CODE),0,0, --if balance is zero
--        (round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,'||''''||frmdate||''''||',3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE)),2) -
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,'||''''||frmdate||''''||',MFTR_COMPANY_CODE)/*MFTR_TRANSACTION_AMOUNT */ )) /
--          decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,'||''''||frmdate||''''||',MFTR_COMPANY_CODE),0,1,
--          pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,'||''''||frmdate||''''||',MFTR_COMPANY_CODE)) /*MFTR_TRANSACTION_AMOUNT */) *36500)/decode(((select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<='||''''||frmdate||''''||') - MFTR_TRANSACTION_DATE),0,1,
--        (select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<='||''''||frmdate||''''||') - MFTR_TRANSACTION_DATE)),2) as SimAnnualReturn,
--    --    decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,'||''''||frmdate||''''||',MFTR_COMPANY_CODE),0,0,pkgfixeddepositproject.fncReturnXIRR(MFTR_COMPANY_CODE,MFTR_SCHEME_CODE,MFTR_REFERENCE_DATE ,'||''''||frmdate||''''||' ,mftr_reference_number)) as XIRR,
--NULL,
--        pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) Company1,
--       '||''''||frmdate||''''||' As Todate --,
--     from trtran048,trmaster404
--      where MFTR_COMPANY_CODE =30100001
--         and MFTR_SCHEME_CODE=MFSC_SCHEME_CODE
--     -- and mftr_nav_code=''103340''
--      --and MFTR_PROCESS_COMPLETE !=12400001 or mftr_complete_date <='||''''||frmdate||''''||'
--        and mftr_REFERENCE_DATE<='||''''||frmdate||''''||'
--        and mftr_transaction_date<='||''''||frmdate||''''||'
--        and MFTR_RECORD_STATUS not in(10200005,10200006)';
--  Query_str1 :='union
--      select
--            pkgreturncursor.fncgetdescription(MFtr_COMPANY_CODE,2) as Company,
--            MFSC_SCHEME_NAVNAME,
--            ''Sold'' as TransactionType,
--            REDM_INVEST_REFERENCE as transactionrefno,
--            REDM_TRANSACTION_DATE as TransactionDate,
--            REDM_REDEEM_NAV as Rate,
--            REDM_NOOF_UNITS as Units,
--            --- round(REDM_REDEEM_NAV*REDM_NOOF_UNITS,2) as TransAMt, 
--           redm_invest_amount + REDM_REDEEM_PANDL as TransAMt  , --added for rounding
--            null as NAVDate,
--            null as LatestNAV, --check
--            null as BalancedUnits,--check
--            null as PresentValue,
--            null as NotionalPandL,
--            --pkgfixeddepositproject.fncgetmfgainloss(MFCL_reference_number ,frmdate) as ProfitBooked,
--            REDM_REDEEM_PANDL as ProfitBooked,
--            REDM_TRANSACTION_DATE -MFTR_REFERENCE_DATE as AgeinDays,
--            decode(trunc(redm_invest_amount), 0, 0,round(((REDM_REDEEM_PANDL *36500)/((REDM_TRANSACTION_DATE -MFTR_REFERENCE_DATE) * round(REDM_REDEEM_NAV*REDM_NOOF_UNITS,2))),2)) as SimAnnualReturn,
--            decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,REDM_TRANSACTION_DATE,MFTR_COMPANY_CODE),0,pkgfixeddepositproject.fncReturnXIRR(MFTR_COMPANY_CODE,MFTR_SCHEME_CODE,MFTR_REFERENCE_DATE ,REDM_TRANSACTION_DATE,REDM_INVEST_REFERENCE),0) as XIRR,
--            pkgreturncursor.fncgetdescription(MFtr_COMPANY_CODE,2) Company1,
--           '||''''||frmdate||''''||' As Todate--,
--      from trtran049A,trmaster404,trtran048
--      where MFTR_COMPANY_CODE=30100001
--      and MFtr_SCHEME_CODE=MFSC_SCHEME_CODE
--     -- and mftr_nav_code=''103340''
--      and REDM_INVEST_REFERENCE=MFTR_REFERENCE_NUMBER
--      -- and MFCL_PROCESS_COMPLETE !=12400001
--      and REDM_TRANSACTION_DATE<='||''''||frmdate||''''||'
--      and REDM_RECORD_STATUS not in(10200005,10200006)';
-- Query_str2 :='union
--    select 
--        pkgreturncursor.fncgetdescription(30100001,2) as Company,
--        ''Overal'' as NAVName,
--        '''' as TransactionType,
--        '''' as transactionrefno,
--        null as TransactionDate,
--        null as Rate,
--        null as Units,
--        null as TransAMt,
--        null as NAVDate,
--        null AS LatestNAV,
--        null as BalancedUnits,
--        null as PresentValue,
--        null as NotionalPandL,
--        null as ProfitBooked,
--        null as AgeinDays,
--        null as SimAnnualReturn,        
--        pkgfixeddepositproject.fncReturnXIRR(30100001,0,to_date(''01/01/2010'' ,''dd/mm/yyyy'') ,'||''''||frmdate||''''||') as XIRR,
--        -- pkgfixeddepositproject.fncReturnXIRR(MFSC_SCHEME_CODE,to_date(''01/01/2010'',''dd/mm/yyyy'') ,'||''''||frmdate||''''||')
--         pkgreturncursor.fncgetdescription(30100001,2) Company1,
--         '||''''||frmdate||''''||' As Todate
--    from dual 
--      order by 5,4';
--        OPEN GenCursor for Query_str||Query_str1||Query_str2;
--       
--  Goto Process_End;
-- end if;  







-- if varReportID= 'TRANSACTIONWISEINVESTMENT' then
---- SELECT  substr(FINALCONDITION, instr(FINALCONDITION,'MFTR_COMPANY_CODE',1)+23,8) 
----       into NUMSELCTEDCOMPANY from DUAL;    
--    
--    OPEN GenCursor for
--      select
--        pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) as Company,
--        MFSC_SCHEME_NAVNAME as NAVName,
--        pkgreturncursor.fncgetdescription(MFTR_TRANSACTION_TYPE,1) as TransactionType,
--        mftr_reference_number as transactionrefno,
--        MFTR_reference_DATE as TransactionDate,
--        MFTR_TRANSACTION_PRICE as Rate,
--        MFTR_TRANSACTION_QUANTITY as Units,
--       -1* MFTR_TRANSACTION_AMOUNT as TransAMt,
--        (select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=mftr_nav_code
--         and mfmm_record_status in (10200003 ,10200004) and MFMM_REFERENCE_DATE<=frmdate) as NAVDate,
--          pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3) as LatestNAV, --check
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE) as BalancedUnits,--check
--        round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE)),2) as PresentValue,
--        decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE),0,0,
--        (round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE)),2) -
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE) /*MFTR_TRANSACTION_AMOUNT*/ )) as NotionalPandL,
--      --  pkgfixeddepositproject.fncgetmfgainloss(mftr_reference_number ,frmdate) as ProfitBooked,
--         0 as ProfitBooked,
--        decode(  pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE),0 ,0,((select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<=frmdate) - MFTR_TRANSACTION_DATE)) as AgeinDays,
--        round((((decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE),0,0, --if balance is zero
--        (round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE)),2) -
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE)/*MFTR_TRANSACTION_AMOUNT */ )) /
--          decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE),0,1,
--          pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE)) /*MFTR_TRANSACTION_AMOUNT */) *36500)/decode(((select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<=frmdate) - MFTR_TRANSACTION_DATE),0,1,
--        (select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<=frmdate) - MFTR_TRANSACTION_DATE)),2) as SimAnnualReturn,
--      --  decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE),0,0,pkgfixeddepositproject.fncReturnXIRR(MFTR_COMPANY_CODE,MFTR_SCHEME_CODE,MFTR_REFERENCE_DATE ,frmdate ,mftr_reference_number)) as XIRR,
--         NULL,
--        pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) Company1,
--       frmdate As Todate --,
--     from trtran048,trmaster404
--      where MFTR_COMPANY_CODE =30100001
--         and MFTR_SCHEME_CODE=MFSC_SCHEME_CODE
--     -- and mftr_nav_code='103340'
--      --and MFTR_PROCESS_COMPLETE !=12400001 or mftr_complete_date <=frmdate
--        and mftr_REFERENCE_DATE<=frmdate
--        and mftr_transaction_date<=frmdate
--        and MFTR_RECORD_STATUS not in(10200005,10200006)
--
--    union
--      select
--            pkgreturncursor.fncgetdescription(MFtr_COMPANY_CODE,2) as Company,
--            MFSC_SCHEME_NAVNAME,
--            'Sold' as TransactionType,
--            REDM_INVEST_REFERENCE as transactionrefno,
--            REDM_TRANSACTION_DATE as TransactionDate,
--            REDM_REDEEM_NAV as Rate,
--            REDM_NOOF_UNITS as Units,
--            --- round(REDM_REDEEM_NAV*REDM_NOOF_UNITS,2) as TransAMt, 
--           redm_invest_amount + REDM_REDEEM_PANDL as TransAMt  , --added for rounding
--            null as NAVDate,
--            null as LatestNAV, --check
--            null as BalancedUnits,--check
--            null as PresentValue,
--            null as NotionalPandL,
--            --pkgfixeddepositproject.fncgetmfgainloss(MFCL_reference_number ,frmdate) as ProfitBooked,
--            REDM_REDEEM_PANDL as ProfitBooked,
--            REDM_TRANSACTION_DATE -MFTR_REFERENCE_DATE as AgeinDays,
--            decode(trunc(redm_invest_amount), 0, 0,round(((REDM_REDEEM_PANDL *36500)/((REDM_TRANSACTION_DATE -MFTR_REFERENCE_DATE) * round(REDM_REDEEM_NAV*REDM_NOOF_UNITS,2))),2)) as SimAnnualReturn,
--            decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,REDM_TRANSACTION_DATE,MFTR_COMPANY_CODE),0,pkgfixeddepositproject.fncReturnXIRR(MFTR_COMPANY_CODE,MFTR_SCHEME_CODE,MFTR_REFERENCE_DATE ,REDM_TRANSACTION_DATE,REDM_INVEST_REFERENCE),0) as XIRR,
--            pkgreturncursor.fncgetdescription(MFtr_COMPANY_CODE,2) Company1,
--           frmdate As Todate--,
--      from trtran049A,trmaster404,trtran048
--      where MFTR_COMPANY_CODE=30100001
--      and MFtr_SCHEME_CODE=MFSC_SCHEME_CODE
--     -- and mftr_nav_code='103340'
--      and REDM_INVEST_REFERENCE=MFTR_REFERENCE_NUMBER
--      -- and MFCL_PROCESS_COMPLETE !=12400001
--      and REDM_TRANSACTION_DATE<=frmdate
--      and REDM_RECORD_STATUS not in(10200005,10200006)
--  union
--    select 
--        pkgreturncursor.fncgetdescription(30100001,2) as Company,
--        'Overal' as NAVName,
--        '' as TransactionType,
--        '' as transactionrefno,
--        null as TransactionDate,
--        null as Rate,
--        null as Units,
--        null as TransAMt,
--        null as NAVDate,
--        null AS LatestNAV,
--        null as BalancedUnits,
--        null as PresentValue,
--        null as NotionalPandL,
--        null as ProfitBooked,
--        null as AgeinDays,
--        null as SimAnnualReturn,        
--        pkgfixeddepositproject.fncReturnXIRR(30100001,0,to_date('01/01/2010' ,'dd/mm/yyyy') ,frmDate) as XIRR,
--        -- pkgfixeddepositproject.fncReturnXIRR(MFSC_SCHEME_CODE,to_date('01/01/2010','dd/mm/yyyy') ,frmDate)
--         pkgreturncursor.fncgetdescription(30100001,2) Company1,
--         frmDate As Todate
--    from dual 
--      order by 5,4;
--
-- Goto Process_End;
-- end if; 



 
-- if   varReportID='INVESTMENTTRACKER' then
-- 
----  SELECT  substr(FINALCONDITION, instr(FINALCONDITION,'MFTR_COMPANY_CODE',1)+23,8) 
----       into NUMSELCTEDCOMPANY from DUAL;    
--    
--    OPEN GenCursor for
--      select
--        pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) as Company,
--        MFSC_SCHEME_NAVNAME as NAVName,
--        pkgreturncursor.fncgetdescription(MFTR_TRANSACTION_TYPE,1) as TransactionType,
--        mftr_reference_number as transactionrefno,
--        MFTR_reference_DATE as TransactionDate,
--        MFTR_TRANSACTION_PRICE as Rate,
--        MFTR_TRANSACTION_QUANTITY as Units,
--       -1* MFTR_TRANSACTION_AMOUNT as TransAMt,
--        (select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=mftr_nav_code
--         and mfmm_record_status in (10200003 ,10200004) and MFMM_REFERENCE_DATE<=frmdate) as NAVDate,      
--        pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3) as LatestNAV, --check
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE) as BalancedUnits,--check
--        round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE)),2) as PresentValue,
--        decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE),0,0,
--        (round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE)),2) -
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE) /*MFTR_TRANSACTION_AMOUNT*/ )) as NotionalPandL,
--      --  pkgfixeddepositproject.fncgetmfgainloss(mftr_reference_number ,frmdate) as ProfitBooked,
--         0 as ProfitBooked,
--        decode(  pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE),0 ,0,((select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<=frmdate) - MFTR_TRANSACTION_DATE)) as AgeinDays,
--        round((((decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE),0,0, --if balance is zero
--        (round((pkgfixeddepositproject.fncgetnav(mftr_scheme_code ,frmdate,3)*
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE)),2) -
--        pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE)/*MFTR_TRANSACTION_AMOUNT */ )) /
--          decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE),0,1,
--          pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,2,frmdate,MFTR_COMPANY_CODE)) /*MFTR_TRANSACTION_AMOUNT */) *36500)/decode(((select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<=frmdate) - MFTR_TRANSACTION_DATE),0,1,
--        (select max(MFMM_REFERENCE_DATE) from trtran050 where MFmm_NAV_CODE=MFSC_NAV_CODE and MFMM_REFERENCE_DATE<=frmdate) - MFTR_TRANSACTION_DATE)),2) as SimAnnualReturn,
--    --    decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,frmdate,MFTR_COMPANY_CODE),0,0,pkgfixeddepositproject.fncReturnXIRR(MFTR_COMPANY_CODE,MFTR_SCHEME_CODE,MFTR_REFERENCE_DATE ,frmdate ,mftr_reference_number)) as XIRR,
--         NULL,
--        pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) Company1,
--       frmdate As Todate --,
--     from trtran048,trmaster404
--      where MFTR_COMPANY_CODE =30100001
--         and MFTR_SCHEME_CODE=MFSC_SCHEME_CODE
--     -- and mftr_nav_code='103340'
--      --and MFTR_PROCESS_COMPLETE !=12400001 or mftr_complete_date <=frmdate
--        and mftr_REFERENCE_DATE<=frmdate
--        and mftr_transaction_date<=frmdate
--        and MFTR_RECORD_STATUS not in(10200005,10200006)
--
--    union
--      select
--            pkgreturncursor.fncgetdescription(MFtr_COMPANY_CODE,2) as Company,
--            MFSC_SCHEME_NAVNAME,
--            'Sold' as TransactionType,
--            REDM_INVEST_REFERENCE as transactionrefno,
--            REDM_TRANSACTION_DATE as TransactionDate,
--            REDM_REDEEM_NAV as Rate,
--            REDM_NOOF_UNITS as Units,
--            --- round(REDM_REDEEM_NAV*REDM_NOOF_UNITS,2) as TransAMt, 
--           redm_invest_amount + REDM_REDEEM_PANDL as TransAMt  , --added for rounding
--            null as NAVDate,
--            null as LatestNAV, --check
--            null as BalancedUnits,--check
--            null as PresentValue,
--            null as NotionalPandL,
--            --pkgfixeddepositproject.fncgetmfgainloss(MFCL_reference_number ,frmdate) as ProfitBooked,
--            REDM_REDEEM_PANDL as ProfitBooked,
--            REDM_TRANSACTION_DATE -MFTR_REFERENCE_DATE as AgeinDays,
--            decode(trunc(redm_invest_amount), 0, 0,round(((REDM_REDEEM_PANDL *36500)/((REDM_TRANSACTION_DATE -MFTR_REFERENCE_DATE) * round(REDM_REDEEM_NAV*REDM_NOOF_UNITS,2))),2)) as SimAnnualReturn,
--            decode(pkgForexProcess.fncGetOutstanding(mftr_reference_number,0,20,1,REDM_TRANSACTION_DATE,MFTR_COMPANY_CODE),0,pkgfixeddepositproject.fncReturnXIRR(MFTR_COMPANY_CODE,MFTR_SCHEME_CODE,MFTR_REFERENCE_DATE ,REDM_TRANSACTION_DATE,REDM_INVEST_REFERENCE),0) as XIRR,
--            pkgreturncursor.fncgetdescription(MFtr_COMPANY_CODE,2) Company1,
--           frmdate As Todate--,
--      from trtran049A,trmaster404,trtran048
--      where MFTR_COMPANY_CODE=30100001
--      and MFtr_SCHEME_CODE=MFSC_SCHEME_CODE
--     -- and mftr_nav_code='103340'
--      and REDM_INVEST_REFERENCE=MFTR_REFERENCE_NUMBER
--      -- and MFCL_PROCESS_COMPLETE !=12400001
--      and REDM_TRANSACTION_DATE<=frmdate
--      and REDM_RECORD_STATUS not in(10200005,10200006)
--  union
--    select 
--        pkgreturncursor.fncgetdescription(30100001,2) as Company,
--        'Overal' as NAVName,
--        '' as TransactionType,
--        '' as transactionrefno,
--        null as TransactionDate,
--        null as Rate,
--        null as Units,
--        null as TransAMt,
--        null as NAVDate,
--        null AS LatestNAV,
--        null as BalancedUnits,
--        null as PresentValue,
--        null as NotionalPandL,
--        null as ProfitBooked,
--        null as AgeinDays,
--        null as SimAnnualReturn,        
--        pkgfixeddepositproject.fncReturnXIRR(30100001,0,to_date('01/01/2010' ,'dd/mm/yyyy') ,frmDate) as XIRR,
--        -- pkgfixeddepositproject.fncReturnXIRR(MFSC_SCHEME_CODE,to_date('01/01/2010','dd/mm/yyyy') ,frmDate)
--         pkgreturncursor.fncgetdescription(30100001,2) Company1,
--         frmDate As Todate
--    from dual 
--      order by 5,4;
--  Goto Process_End;
-- end if; 

IF (VARREPORTID = 'CURRFUTUREDEALFORTHEDAYNEW')  THEN
OPEN GENCURSOR FOR
        select UserId, Remark,DealType,status,deal_execute_date as ExecuteDate,deal_deal_number as DealNumber,deal_COMPANY_CODE1 as  CompanyCode,
               deal_COUNTER_PARTY1 as CounterParty,deal_BASE_CURRENCY1 as BaseCurrency,DEAL_BUY_SELL1  as BuySell1,BaseAmount,AmtInr,
               deal_maturity_date as MaturityDate,Rate,BookingRate,ProductQty,BacKupDeal,SystemDate,  pkgreturnreport.getCompanyName(VARUSERID) as CompanyName,
               FromDate,ToDate,DEAL_OTHER_CURRENCY1 as OtherCurrency,
               DEAL_RECORD_STATUS,DEAL_HEDGE_TRADE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,
               Case DEAL_BUY_SELL1 when 'Buy' then 25300001
               when 'Sell' then 25300002
               end as BuySell, CDEL_LOCAL_RATE as WashRate,DEAL_INIT_CODE1 as UserCode,
                pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2) as initcode,PandL,HedgeTrade,statusorder,
                pkgreturncursor.fncgetdescription(LocationCode,2)LocationCode,Premium,
--                (SELECT bnkc_invoice_numbers FROM himatsingkatf_prod.tftran021 
--                where bnkc_invoice_number = InvoiceNumber 
--                and bnkc_record_status between 10200001 and 10200004)
                NULL InvoiceNumber,
                to_char(deal_maturity_date,'MON-YY')ExpiryMonth,
                CASE 
                    WHEN to_number(to_char(deal_maturity_date,'mm')) BETWEEN 4  AND 6  THEN 'Q1 ' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
                    WHEN to_number(to_char(deal_maturity_date,'mm')) BETWEEN 7  AND 9  THEN 'Q2 ' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
                    WHEN to_number(to_char(deal_maturity_date,'mm')) BETWEEN 10  AND 12  THEN 'Q3 ' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
                    WHEN to_number(to_char(deal_maturity_date,'mm')) BETWEEN 1 AND 3 THEN 'Q4 ' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
                END as ExpiryQtr,
                case when SpotRate <> 0 then
                IntOutlay
                else null end as IntOutlay,
                decode(SpotRate,0,null,SpotRate)SpotRate,null CashSpot,null SwapCharges                  
 from      
              ( select  'Future' dealType, 'Booking' status, 1 as statusorder,
                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
                        cfut_execute_date as deal_execute_date,
                        cfut_deal_number as deal_deal_number,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1, 
                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) as DEAL_BUY_SELL1,
                       CFUT_BASE_AMOUNT as BaseAmount,CFUT_BASE_AMOUNT*cfut_Exchange_rate as AmtInr,
                       cfut_maturity_date as deal_maturity_date,  CFUT_EXCHANGE_RATE as  Rate,CFUT_EXCHANGE_RATE as BookingRate, CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GCONST.UTILFUTUREDEAL,GCONST.AMOUNTFCY,FRMDATE)) as ProductQty,
                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                       TO_DATE(FRMDATE) as FromDate,
                        to_date(TODATE) as ToDate,
                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as Buysell,
                        pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
                        CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, 'Hedge Deal', 26000002,'Trade Deal',26000003,'FT Deal') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        1  As  Cdel_Local_Rate,  0 as  PandL,
                        CFUT_LOCATION_CODE LocationCode,
                        0 as Premium,
                        '' AS InvoiceNumber,
                        0 IntOutlay,
                        0 SpotRate,
                        0 as CashSpot,
                        0 as SwapCharges                          
                         from  trtran061   
                  where  cfut_EXECUTE_DATE between FRMDATE and TODATE
                        and cfut_record_status not in (10200005,10200006)
      union all 
                   select  'Future' dealType,
                         'canceled' status,2 as statusorder,
                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
                        CFRV_EXECUTE_DATE as deal_execute_date,
                        cfut_deal_number as deal_deal_number,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1, 
                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        decode (CFUT_BUY_SELL,25300001,'Sell','Buy') as DEAL_BUY_SELL1,
                        (CFRV_REVERSE_LOT*1000) as BaseAmount,(CFUT_BASE_AMOUNT*1000)*CFRV_LOT_PRICE as AmtInr,
                       cfut_maturity_date as deal_maturity_date,  CFRV_LOT_PRICE as  Rate,CFUT_EXCHANGE_RATE as BookingRate,CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                      (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GCONST.UTILFUTUREDEAL,GCONST.AMOUNTFCY,FRMDATE)) as ProductQty,
                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        TO_DATE(FRMDATE) as FromDate,
                        to_date(TODATE) as ToDate,
                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,decode (CFUT_BUY_SELL,25300001,25300002,25300001) as Buysell, --0 as CDEL_LOCAL_RATE,
                         pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
                         CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, 'Hedge Deal', 26000002,'Trade Deal',26000003,'FT Deal') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        1 CDEL_LOCAL_RATE, cfrv_profit_loss PandL,
                        CFUT_LOCATION_CODE LocationCode,
                        0 as Premium,
                        '' AS InvoiceNumber,
                        0 IntOutlay,
                        0 SpotRate,
                        0 as CashSpot,
                        0 as SwapCharges                          
                         from  trtran061,trtran063   
                  where    cfut_deal_number=CFRV_DEAL_NUMBER
                        and cfrv_RECORD_STATUS not in (10200005,10200006) 
                        and  cfut_record_status not in (10200005,10200006)
                        and (CFRV_EXECUTE_DATE between FRMDATE and TODATE
                        or   CFRV_EXECUTE_DATE between FRMDATE and TODATE)
          UNION ALL
                select 'Forward' dealType, 'Booking' status,1 as statusorder,
                        DEAL_USER_ID as UserId,
                        DEAL_USER_REFERENCE as Remark,
                        DEAL_EXECUTE_DATE as  DEAL_EXECUTE_DATE, 
                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as DEAL_BUY_SELL1,
                        DEAL_BASE_AMOUNT as BaseAmount,
                        round((pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,DEAL_EXECUTE_DATE))*DEAL_EXCHANGE_RATE,2) as AmtInr,
                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
                        DEAL_EXCHANGE_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,DEAL_EXECUTE_DATE)) as ProductQty,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                       TO_DATE(FRMDATE) as FromDate,
                        to_date(TODATE) as ToDate, 
                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as Buysell ,
                        pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, 'Hedge Deal', 26000002,'Trade Deal',26000003,'FT Deal') HedgeTrade, DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                       1 as CDEL_LOCAL_RATE,
                       0 PandL,
                       deal_location_code LocationCode,
                       0 as Premium,
                       '' AS InvoiceNumber,
                        0 IntOutlay,
                        0 SpotRate,
                        0 as CashSpot,
                        0 as SwapCharges                       
                  from  trtran001
                   where  DEAL_EXECUTE_DATE between FRMDATE and TODATE
                         and  deal_record_status not in (10200005,10200006)
                         and deal_deal_type not in(25400001)
        union all
           select 'Forward' dealType, 
                       case CDEL_CANCEL_TYPE when 27000001 then 'Cancelled'
                        when 27000002 then 'Delivery' end as status, 2 as statusorder,
                        DEAL_USER_ID as UserId,
                        DEAL_USER_REFERENCE as Remark,
                        CDEL_CANCEL_DATE as  DEAL_EXECUTE_DATE, 
                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        decode (deal_BUY_SELL,25300001,'Sell','Buy') as DEAL_BUY_SELL1,
                        CDEL_CANCEL_AMOUNT as BaseAmount,(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE)*-1 as AmtInr,
                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
                        CDEL_CANCEL_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       --(pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,FRMDATE)) 
                        CDEL_CANCEL_AMOUNT * -1 as ProductQty,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        TO_DATE(FRMDATE) as FromDate,
                        to_date(TODATE) as ToDate,  
                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,decode (deal_BUY_SELL,25300001,25300002,25300001) as Buysell ,pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, 'Hedge Deal ', 26000002,'Trade Deal',26000003,'FT Deal') HedgeTrade,DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        CDEL_LOCAL_RATE as CDEL_LOCAL_RATE,cdel_profit_loss PandL,
                        deal_location_code LocationCode,
                        case when CDEL_CANCEL_TYPE = 27000002 then
                        CASE WHEN DEAL_BUY_SELL = 25300001 THEN
                        DEAL_EXCHANGE_RATE - CDEL_CANCEL_RATE
                        ELSE
                        CDEL_CANCEL_RATE - DEAL_EXCHANGE_RATE END
                        else 0 end as Premium,
                        cdel_trade_reference  AS InvoiceNumber,
                        (((DEAL_EXCHANGE_RATE - cdel_intoutlay_rate) * CDEL_CANCEL_AMOUNT)*(DEAL_MATURITY_DATE-CDEL_CANCEL_DATE)*-1) IntOutlay,
                        cdel_intoutlay_rate SpotRate,
                        0 as CashSpot,
                        0 as SwapCharges
                  from  trtran001,trtran006
                   where  deal_deal_number=cdel_deal_number
                       and (CDEL_CANCEL_DATE between FRMDATE and TODATE
                       or CDEL_CANCEL_DATE between FRMDATE and TODATE)
                       and CDEL_RECORD_STATUS not in (10200005,10200006)
                       and deal_deal_type not in(25400001))
               where  DEAL_RECORD_STATUS not in (10200005,10200006)  order by deal_deal_number,statusorder;  
    GOTO PROCESS_END;   
  END IF;
--if  varReportID ='EXPOSURESETTLEMENT' then
--  OPEN GENCURSOR FOR
--    SELECT TO_CHAR(referencedate,'MONYY') ExecuteMonth,
--      referencedate,
--      vendor,
--      LocationCode,
--      contract_no,
--      currency,
--      'Inflow' Inflow,
--      bank,
--      dealtype,
--      deliverdrate,
--      deliverdamount,
--      deliverdamount * deliverdrate AmountInr,
--      documentno,
--      ContractAmount InvoiceAmount,
--      FRMDATE frmDate,
--      TODATE toDate,
--      pkgreturnreport.getCompanyName(VARUSERID) as CompanyName      
--    FROM VEWEXPOSURESETTLEMENT where deliverydate between FRMDATE AND TODATE;
--  GOTO PROCESS_END;
--END IF;

if  varReportID ='FORWARDSBOOKED' then
     Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                        pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE,2) as LocationName,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterParty,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,
                        DEAL_USER_REFERENCE as UserREf,
                        DEAL_BANK_REFERENCE as BankRef,
                        deal_maturity_from as FrmDueDate,deal_maturity_date  as DueDate,
                        deal_exchange_rate as FcyRate,
                        DEAL_SPOT_RATE AS Spot,
                        DEAL_FORWARD_RATE as Forward,
                        DEAl_MARGIN_RATE as Margin,
                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * deal_exchange_rate ) as InrValue,
                        round((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)),4)as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))
                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))) as RevalueInr,
                        0 as PositionInr,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, 
                        pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter,';
                       Query_Str1 :='pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BackupDeal,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdiscr ,
                        decode(deal_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
                        ''Forward Covers'' as ForwardCovers
                from    trtran001
                where   --deal_hedge_trade = 26000001 and
                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
                        --hedg_deal_serial = deal_serial_number and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||')
                          and deal_execute_date <='||''''||frmDate||''''||'  and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                       ';
                       
                        delete from temp1;commit;
                        insert into temp1 values(Query_Str,Query_Str1);commit;
                         

    OPEN GenCursor for Query_Str||Query_Str1|| ' order by pkgreturncursor.fncgetdescription(deal_base_currency,2),
                                                             pkgreturncursor.fncgetdescription(deal_other_currency,2),
                                                             deal_maturity_date ' ;
    Goto Process_End;
  end if;





If Varreportid ='FORWARDSCANCELLED' Then
  Delete From Trsystem978;Commit;
  insert into trsystem978 values(toDate);commit;
Query_Str :='  with tabCancel as

                    (select cdel_deal_number DealNumber, cdel_cancel_date CancelDate, cdel_cancel_rate CancelRate,
                    cdel_cancel_amount CancleAmount, cdel_profit_loss RealizedPandL, cdel_local_rate WashRate,
                    (cdel_cancel_amount * cdel_cancel_rate) as CancleAmtInr
                    From Trtran006
                    Where Cdel_Cancel_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cdel_record_status not in (10200005,10200006) and cdel_profit_loss <> 0
                    union all
                    select cfrv_deal_number DealNumber, cfrv_execute_date CancelDate, cfrv_lot_price CancelRate,
                    cfrv_cancel_amount CancleAmount, cfrv_profit_loss RealizedPandL, cfrv_lot_price WashRate,
                     (cfrv_cancel_amount * cfrv_lot_price) as CancleAmtInr
                    from trtran063
                    Where Cfrv_Execute_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cfrv_record_status not in (10200005,10200006))

                    select a.DEALNUMBER,pkgreturncursor.fncgetdescription(DealType,2) DealType,DEALREF AS Remark,
                    BANKNAME as CounterParty,DEALREF as ReferenceNum, COMPANYNAME as Company,a.CompanyCode,
                    USERID,TRANS as BackupDeal,Currency,BuySell, pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,
                    DEALDATE as ExecuteDate,EXRATE as StrickRate,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,

                    b.Washrate As Washrate,
                    round(b.CANCELRATE,6) cancelrate, b.CANCELDATE,b.RealizedPandL as RealizedPandL,b.CANCLeAMOUNT as CancleAmount,b.CancleAmtInr,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter, RecordStatus,HedgeTrade,Maturity as MaturityDate,
                    TO_DATE('||''''||frmDate||''''||') as FromDate,
                   to_date('||''''||toDate||''''||') as ToDate                
                    from vewForwardFuture a , tabCancel b
                    where a.DealNumber = b.DealNumber
                    And Status Not In (10200005,10200006)
                   -- CANCELDATE between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                  --  Substr(finalcondition,decode(instr(finalcondition,'|| 'Canceldate' ||'),0,0,19),length(finalcondition))
                '||substr(finalcondition,57)||'';
               delete from temp; commit;
               Insert Into Temp Values(Query_Str,Finalcondition);Commit;
    Open Gencursor For Query_Str || 'order by DealNumber,CancelDate';
    Goto Process_End;
  End If;
if  varReportID ='HEDGEMTM' then
    -- here fncgetoutstanding is used to get the actual amount on 19-may-09
    Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                        pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE,2) as LocationName,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterParty,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,DEAL_USER_REFERENCE as BnkREf,
                        deal_maturity_from as FrmDueDate,deal_maturity_date  as DueDate,
                        deal_exchange_rate as FcyRate,
                        DEAL_SPOT_RATE AS Spot,
                        round(pkgforexprocess.fncGetRate(deal_base_currency,30400003,trunc(to_date('||''''||frmDate||''''||'),''Q'')-1,deal_buy_sell,0,null,0),4) as Forward,
                        DEAl_MARGIN_RATE as Margin,
                        Round(deal_base_amount * (DEAL_EXCHANGE_RATE - DEAL_SPOT_RATE),2) as Premium,
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * deal_exchange_rate ) as InrValue,
                        round((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)),4)as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0))
                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))) as RevalueInr,
                        0 as PositionInr,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter,';
                       Query_Str1 :='pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BackupDeal,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdiscr ,
                        trunc(to_date('||''''||frmDate||''''||'),''Q'')-1 as LatQtr,
                        Round((((deal_base_amount * (DEAL_EXCHANGE_RATE - DEAL_SPOT_RATE))* ((trunc(to_date('||''''||frmDate||''''||'),''Q'')-1) - deal_execute_date))/(deal_maturity_date - deal_execute_date)),2) as LastPrimium,
                        round(pkgforexprocess.fncGetRate(deal_base_currency,30400003,'||''''||frmDate||''''||',deal_buy_sell,0,null,0),4) as ClosingRate,
                        decode(deal_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade
                        ' || varGroupField || '
                from    trtran001
                where   --deal_hedge_trade = 26000001 and
                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
                        --hedg_deal_serial = deal_serial_number and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') > 0 and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                         '||finalcondition||'';

                        delete from temp1;commit;
                        insert into temp1 values(Query_Str,Query_Str1);commit;
--                      (deal_complete_date is null or
--                      deal_complete_date > '||''''||frmDate||''''||') ';
     --   insert into temp values(Query_Str,finalCondition);commit;
    OPEN GenCursor for Query_Str||Query_Str1||finalCondition||' order by pkgreturncursor.fncgetdescription(deal_base_currency,2),
                                                             pkgreturncursor.fncgetdescription(deal_other_currency,2),
                                                             deal_maturity_date ' ;


    Goto Process_End;
  end if;

if varReportID ='FXIMPACTONHEDGE' THEN
  dattemp := (frmDate - 1);
 delete from temp; commit;
  insert into temp values (finalcondition,'Before');
  
  select replace ( finalcondition, 'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY')||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''' ,'')  
   into  finalcondition from dual;
-- And DEAL_MATURITY_DATE  between '01-Jan-2015' and '27-Apr-2015' 
  
  insert into temp values (finalcondition,'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY') ||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''');
  
  
 Query_Str := 'select 
         pkgreturncursor.fncgetdescription(deal_company_code,2) as CompanyName,
          pkgreturncursor.fncgetdescription(deal_location_code,2) as LocationName,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as Company,
         deal_deal_number as DealNo,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
         pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry ,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
         pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrrency,
         pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
         pkgreturncursor.fncgetdescription(deal_buy_sell,2) buysell,
         deal_user_reference as BankRefNo ,
         NVL((SELECT BNKC_INVOICE_NUMBERS FROM HIMATSINGKATF_PROD.TFTRAN021 
                      WHERE BNKC_INVOICE_NUMBER = CDEL_TRADE_REFERENCE
                      AND BNKC_RECORD_STATUS NOT IN(10200005,10200006)),
         deal_user_reference) as InvoiceNo,         
         --a.deal_execute_date
         Utlizeddate as BookingDate  , 
         a.deal_base_amount as BookingAmt, 
         round(pkgforexprocess.fncGetRate(deal_base_currency,30400003,NVL(Utlizeddate,'||''''||ToDate||''''||'),deal_buy_sell,0,null,0),4) as Spot,
         a.deal_exchange_rate as Forward,
         a.deal_margin_rate as Margin,
         a.deal_exchange_rate as NetRate,
         a.deal_maturity_date as DueDate,
         Case When b.Cdel_Cancel_Type=27000001
                  Then ' || '''Cancelled'''||'
                  Else
                  ' || '''Delivery'''||'
                  end as "CancelledDelivered" ,'; 
  Query_Str1 := '  pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||dattemp||''''||') as outstandingason,
        nvl(cancelamount,0)*-1 as CancelledAmt,
         nvl(Utilizedamount,0)*-1 as UtilizedAmt,
         nvl(Utilizedamountinr,0)*-1 as Utilizedamountinr,
         pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') as Outstanding,
         nvl(cancelPnl,0)cancelPnl ,
         nvl(UtilizedpnL,0)UtilizedpnL,
         nvl(cancelPnl,0)+nvl(UtilizedpnL,0) as TotalPnL ,
         '||''''||frmDate||''''||' as AsonDate,
         '||''''||ToDate||''''||' as ToDate,
            CASE 
          WHEN to_number(to_char(deal_maturity_date,''mm'')) BETWEEN 4  AND 6  THEN ''Q1 '' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
          WHEN to_number(to_char(deal_maturity_date,''mm'')) BETWEEN 7  AND 9  THEN ''Q2 '' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
          WHEN to_number(to_char(deal_maturity_date,''mm'')) BETWEEN 10  AND 12  THEN ''Q3 '' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
          WHEN to_number(to_char(deal_maturity_date,''mm'')) BETWEEN 1 AND 3 THEN ''Q4 '' || FNCGETFINANCIALYEAR(deal_maturity_date,deal_maturity_date,2)
          END expityqtr,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair
    
         ' || varGroupField || ' 
         
         from trtran001 a left outer join';
Query_Str2 := '              (select  nvl(case when b.cdel_cancel_type =27000001 then cdel_cancel_amount else 0 end,0) cancelamount,
                      nvl(case when b.cdel_cancel_type =27000002 then cdel_cancel_amount else 0 end,0) Utilizedamount,
                      nvl(case when b.cdel_cancel_type =27000002 then cdel_cancel_amount else 0 end,0) Utilizedamountinr,
                      nvl(case when b.cdel_cancel_type =27000001 then cdel_profit_loss else 0 end,0) cancelPnl,
                      nvl(case when b.cdel_cancel_type =27000002 then cdel_profit_loss else 0 end,0) UtilizedpnL,
                      cdel_deal_number, Cdel_Cancel_Type,cdel_cancel_date Utlizeddate,CDEL_CANCEL_RATE,
                      CDEL_TRADE_REFERENCE,cdel_cancel_type canceltype
                from trtran006 b
                where cdel_record_status not in (10200005,10200006)
                and cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
                and cdel_cancel_type = 27000002) b
         on  deal_deal_number=cdel_deal_number
         where deal_record_status not in (10200005,10200006)
         and a.deal_deal_type not in (25400001) 
         and B.canceltype = 27000002
         and (a.deal_maturity_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||')
              --or (nvl(Utlizeddate,''' || '01-Jan-1900' ||''') between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'))
          '|| finalcondition||' 
         order by a.deal_maturity_date ';
         
          
  --       delete from temp;commit;
     insert into temp values (Query_Str,Query_str1);
      commit;
        Open Gencursor For Query_Str||Query_Str1||Query_Str2 ;  
     Goto Process_End;      
 end if;
if  varReportID ='FUTUREREGISTER' then
  delete from trsystem978;
  insert into trsystem978 values (ToDate);
  OPEN GENCURSOR FOR
        select 
          DEALDATE DealDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
          ExchangeTrade Exchange, BankRef BookingRef,
          BUYSELL BuySell, CURRENCY CurrencyPair, DealAmount BookedAmt,
          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
          MATURITY DeliveryDate, M2MRATE MtmRate,Round(BALANCEFCY * M2MRATE,2) MtmAmt,
          MTMPANDL MtmPL,'' CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
          case when CAmount > 0 then
         (CASE WHEN BUYSELLCODE = 25300002 THEN
         'Buy' ELSE 'Sell' END)
          end AS SellBuy, CAmount CancelAmt, CSpotRate CancelSpot,
          CMarginRate CPrimium,CForwardRate CForward,
          CANCELRATE CancelRate,PANDLFCY GainAmt, CompanyName Company,
          Loction Location,TRANS Portfolio,
          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
          USERID UserId,
          DEALREF Remarks, case when ProcessComplete = 12400001 then 'Closed' else 'Open' end Status,
          DEALNUMBER IbsRef,
          frmDate AsonDate,
          DEALCONFIRMDATE,
          DEALCONFIRMTIME,
          DEALDEALERREMARKS,
          DEALBOREMARKS,
          DEAL_OURDEALERNAME,
          DEAL_THEIRDEALERNAME,
          DEAL_DEALENTEREDBY,
          CANCELCONFIRMTIME,
          CANCELCONFIRMDATE,
          CANCELBOREMARKS,
          CANCELDEALERREMARKS,
          CANCELOURDEALERNAME,
          CANCELTHEIRDEALERNAME,
          CancelEnteredBy,
          CASHFLOWDATE,
          HEDGETRADE,
          ToDate Todate,
          CASE WHEN PANDLFCY != 0 THEN
          Round(PANDLFCY/fncgetPandLRate(DEALNUMBER,1,ToDate,2),2) ELSE 0 END GainAmountUSD,
          CASE WHEN PANDLFCY != 0 THEN
          fncgetPandLRate(DEALNUMBER,1,ToDate,2) ELSE 0 END PandLUSDRate ,
          fncgetPandLRate(DEALNUMBER,1,ToDate,2) SwareRate
        from VEWREPORTFUTURE where 
        (DEALDATE  between frmDate and ToDate) --Client requirement
        --(DEALDATE <= ToDate or CANCELDATE between frmDate and ToDate) --Ishwarachandra commented
        order by DEALDATE;
  GOTO PROCESS_END;
END IF;
if  varReportID ='FORWARDREGISTER' then
  delete from trsystem978;
  insert into trsystem978 values (ToDate);
  OPEN GENCURSOR FOR
      select 
        DEALDATE DealDate,  BANKNAME Bank, USERREFERENCE BookingRef,
        BUYSELL BuySell,  CURRENCY CurrencyPair,  DEALAMOUNT BookedFCY,
        BALANCEINR BookedINR, SPOT Spot, FORWARD Forward, MARGIN Margin,
        EXRATE FinalRate, ExpairySpot ExpiryDate, Maturity DeliveryDate,
        M2MRATE MtmRate, Round(BALANCEFCY * M2MRATE,2) MtmAmt, MTMPANDL MtmPL, '' CancelRef,
        CANCELDATE CancelDate, 
        case when CANCELAMOUNT > 0 then
        BANKNAME  ELSE '' END Bank1, 
        case when CANCELAMOUNT > 0 then
        (CASE WHEN BUYSELLCODE = 25300002 THEN
        'Buy' ELSE 'Sell' END)
        end AS SellBuy,
        CANCELAMOUNT CancelAmt, Round(CANCELSPOTRATE,4) CancelSpot, Round(CANCELFORWARDRATE,4) ForwardPremium,
        Round(CANCELMARGINRATE,4) CMargin, Round(CANCELRATE,4) CancelRate, PANDLFCY GainAmt,
        DEALERREMARKS UnderlyingRef, COMPANYNAME Company, 
        pkgReturnCursor.fncGetDescription(LocationCode,2) Location,
        TRANS PortFolio, 
        pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortFolio, 
        USERID UserId,
        DEALERREMARKS Remarks, RECORDSTATUS Status, DEALNUMBER IbsRef,
        case when ProcessComplete = 12400001 then
        'Closed'
        else 'Open' end ProcessStatus,
        frmDate AsonDate,
        DealConfirmDate,
        DealConfirmTime,
        DealBORemarks,
        Deal_OurDealerName,
        Deal_TheirDealerName ,
        Deal_DealEnteredby,
        EDCCharges,
        CancelConfirmTime,
        CancelConfirmDate,
        CancelBoRemarks,
        CancelDealerRemarks,
        CancelOurDealerName,
        CancelTheirDealerName,
        CancelEnteredBy,
        CashFlowDate,
        pkgReturnCursor.fncGetDescription(Deal_Type,1) DealType,
        ToDate Todate,
        BALANCEFCY Outstanding,
        HEDGETRADE,        
        CASE WHEN PANDLFCY != 0 THEN
        Round(PANDLFCY/DECODE(fncgetPandLRate(DEALNUMBER,ReverseSerial,ToDate,1),0,1,fncgetPandLRate(DEALNUMBER,ReverseSerial,ToDate,1)),2) ELSE 0 END GainAmountUSD,
        CASE WHEN PANDLFCY != 0 THEN
        fncgetPandLRate(DEALNUMBER,ReverseSerial,ToDate,1) ELSE 0 END PandLUSDRate,
        fncgetPandLRate(DEALNUMBER,1,ToDate,2) SwareRate
      from VEWREPORTFORWARD  where
        (DEALDATE  between frmDate and ToDate) --Client requirement
        --(DEALDATE <= ToDate or CANCELDATE between frmDate and ToDate) --Ishwarachandra commented
      order by DEALDATE;
  GOTO PROCESS_END;
END IF;
  if  varReportID ='OPTIONREGISTER' then
  delete from trsystem978;
  insert into trsystem978 values (ToDate);
  OPEN GENCURSOR FOR
    select 
        BankRef as BankRef,pkgReturnCursor.fncGetDescription(DealType,1) DealType,
        DEALDATE DealDate, BANKNAME BankName, StrikeRate,
        pkgReturnCursor.fncGetDescription(BuySell,2) BuySell,
        pkgReturnCursor.fncGetDescription(OptionType,2) blank,CURRENCY Currency,
        --Outstanding 
        DealAmount Amount,PremiumRate PremiumPaid,0 BankMargin,PremiumRate FinalRate,
        MATURITY ExpiryDate,SETTLEMENT DeliveryDate,'' CancelRef,
        case when STATUS = 12400001 then 'Closed' else 'Open' end Status,
        CANCELDATE CancelDate, BANKNAME BankName,
        case when CANCELAMOUNT > 0 then
          (CASE WHEN BuySell = 25300002 THEN
            'Buy' ELSE 'Sell' END)
          end AS SellBuy,CancelAmount CancelAmount,Cspot CancelSpot,
        CForward FwdPremium,CMargin Margin,CFinalRte CancelRate,Premium PremiumAtInception,
        GainLoss AS  GainLoss,0 Net,
        --fncgetLinkReference(DEALNUMBER,2)
        null UnderlyingRef,
        COMPANYNAME Company, pkgReturnCursor.fncGetDescription(LocationCode,2) Location,
        TRANS PortFolio, pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortFolio,
        UserID UserId, DEALREF Remarks,  RecordStatus Status, DEALNUMBER IbsRef,
        pkgReturnCursor.fncGetDescription(PremiumStatus,2) PremiumStatus,
        pkgReturnCursor.fncGetDescription(CpremiumStatus,2)CPremiumStatus,CPremiumAmount,
        frmDate AsonDate,
        pkgReturnCursor.fncGetDescription(HEDGETRADE,1)HEDGETRADE,
        PremiumExRate, ConfirmDate,ConfirmTime,BORemarks,OurDealerName, ThierDealerName,
        pkgReturnCursor.fncGetDescription(DeliveryType,1)DeliveryType, CashFlowDate, COurDealerName, CTheirDealerName, CComfirmDate,
        CComfirmTime, CBORemark, CPremiumExRate, CPremiumLocal,PremiumDate,PremiumLocal,MTMPandL,ToDate Todate,
        CASE WHEN PANDLFCY != 0 THEN
        Round(GainLoss/DECODE(fncgetPandLRate(DEALNUMBER,ReverseSerial,ToDate,3),0,1,fncgetPandLRate(DEALNUMBER,ReverseSerial,ToDate,3)),2) ELSE 0 END GainAmountUSD,
        CASE WHEN PANDLFCY != 0 THEN
        fncgetPandLRate(DEALNUMBER,ReverseSerial,ToDate,3) ELSE 0 END PandLUSDRate,
        fncgetPandLRate(DEALNUMBER,1,ToDate,2) SwareRate,
        fncGetOptionRate(Dealnumber,32400001,25300001)BuyCall,
        fncGetOptionRate(Dealnumber,32400001,25300002)SellCall,
        fncGetOptionRate(Dealnumber,32400002,25300002)Sellput,
        fncGetOptionRate(Dealnumber,32400002,25300001)Buyput
    from VEWOPTIONS where 
        (DEALDATE  between frmDate and ToDate) --Client requirement
        --(DEALDATE <= ToDate or CANCELDATE between frmDate and ToDate) --Ishwarachandra commented
        order by DEALDATE;
  GOTO PROCESS_END;
END IF;


If Varreportid = 'HEDGERATIONEW' then
     if (to_char(frmDate,'MM') <=4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
  
  --Open Gencursor For
            Query_Str:='  with x as ( select
                           HDAY_CALENDAR_DATE ,
                           pkgreturncursor.fncgetdescription(HDAY_LOCATION_CODE,2) AS LocationName,
                           to_char(HDAY_CALENDAR_DATE,'||''''||'MON-YY'||''''||') MONTHORDER,
                          (select
                          sum (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,HDAY_CALENDAR_DATE))
                           from 
                           trtran001
                           where
                           DEAL_RECORD_STATUS not in(10200005,10200006)
                           and
                           ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date >HDAY_CALENDAR_DATE) or DEAL_PROCESS_COMPLETE = 12400002)
                           and  DEAL_BACKUP_DEAL=33300001)DEALSOUTSTANDING,
                           -- DEAL_PROCESS_COMPLETE = 12400001  and DEAL_complete_date > HDAY_CALENDAR_DATE) 
                           --and frmdate= HDAY_CALENDAR_DATE

                            (select
                              sum( pkgforexprocess.fncPurchaseContractOS( trad_trade_reference,HDAY_CALENDAR_DATE,trad_maturity_date,trad_contract_no)) "OutstandingAmount"
                              from
                              trtran002 
                              where
                              TRAD_RECORD_STATUS not in(10200005,10200006) 
                              and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_complete_date >HDAY_CALENDAR_DATE) or TRAD_PROCESS_COMPLETE = 12400002)
                              and TRAD_PRODUCT_CATEGORY=33300001)
                             -- and  (TRAD_PROCESS_COMPLETE = 12400001 and TRAD_complete_date > HDAY_CALENDAR_DATE))
                              TRADEOUTSTANDING
                              
                              
                          from 
                          TRSYSTEM001
                          where
                       --   HDAY_LOCATION_CODE=30299999
                            HDAY_CALENDAR_DATE between '||''''||frmdate||''''||' and '||''''||todate||''''||'
                           and HDAY_DAY_STATUS in (26400002,26400003,26400005)
                           and HDAY_RECORD_STATUS not in(10200005,10200006)
                                '||finalcondition||') select HDAY_CALENDAR_DATE "CancelDate",LocationName,DEALSOUTSTANDING,TRADEOUTSTANDING ,
                             round(((DEALSOUTSTANDING/TRADEOUTSTANDING)*100),2) "hegderatioamount",
                              '||''''||'60%'||''''||' "Minimum",
                              '||''''||'75%'||''''||' "Maximum",
                              '||''''||frmdate||''''||' as frmdate,
                              '||''''||todate||''''||' as todate,
                               to_char(HDAY_CALENDAR_DATE,'||''''||'MON-YY'||''''||') MONTHORDER
                             from x                                                  
                             order by HDAY_CALENDAR_DATE
                             ';
                             
                             delete from temp;commit;
                             insert into temp values(Query_Str,finalcondition);commit;
   Open genCursor for (Query_Str);
    Goto Process_End;   
 End If;
 
 if varReportID ='FXANALYSISCONSOLIDATEDNEW' THEN
  dattemp := (frmDate - 1);
 delete from temp; commit;
  insert into temp values (finalcondition,'Before');
  
  select replace ( finalcondition, 'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY')||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''' ,'')  
   into  finalcondition from dual;
-- And DEAL_MATURITY_DATE  between '01-Jan-2015' and '27-Apr-2015' 
  
  insert into temp values (finalcondition,'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY') ||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''');
  
  
 Query_Str := 'select 
         pkgreturncursor.fncgetdescription(deal_company_code,2) as CompanyName,
          pkgreturncursor.fncgetdescription(deal_location_code,2) as LocationName,
         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as Company,
         deal_deal_number as DealNo,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
         pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry ,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
         pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrrency,
         pkgreturncursor.fncgetdescription(deal_counter_party,2) as Bank,
         deal_user_reference as BankRefNo ,
         a.deal_execute_date as BookingDate  , 
         a.deal_base_amount as BookingAmt, 
         a.deal_spot_rate as Spot,
         a.deal_forward_rate as Forward,
         a.deal_margin_rate as Margin,
         a.deal_exchange_rate as NetRate,
         a.deal_maturity_date as DueDate,
         a.deal_maturity_from as ExpiryDate,
         pkgreturncursor.fncgetdescription(deal_buy_sell,2) as BuySell,'; 
  Query_Str1 := '  pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||dattemp||''''||') as outstandingason,
        nvl(cancelamount,0) as CancelledAmt,
         nvl(Utilizedamount,0) as UtilizedAmt,
         pkgforexprocess.fncgetoutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') as Outstanding,
         nvl(cancelPnl,0)cancelPnl ,
         nvl(UtilizedpnL,0)UtilizedpnL,
         nvl(cancelPnl,0)+nvl(UtilizedpnL,0) as TotalPnL ,
         '||''''||frmDate||''''||' as AsonDate,
         '||''''||ToDate||''''||' as ToDate,
         pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair
    
        -- ' || varGroupField || ' 
         
         from trtran001 a left outer join
             (select  nvl(sum(case when b.cdel_cancel_type =27000001 then cdel_cancel_amount else 0 end),0) cancelamount,
                      nvl(sum(case when b.cdel_cancel_type =27000002 then cdel_cancel_amount else 0 end),0) Utilizedamount,
                      nvl(sum(case when b.cdel_cancel_type =27000001 then cdel_profit_loss else 0 end),0) cancelPnl,
                      nvl(sum(case when b.cdel_cancel_type =27000002 then cdel_profit_loss else 0 end),0) UtilizedpnL,
                      cdel_deal_number, Min(cdel_cancel_date) Utlizeddate
                from trtran006 b
                where cdel_record_status not in (10200005,10200006)
                and cdel_cancel_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'
                group by cdel_deal_number) b
         on  deal_deal_number=cdel_deal_number
         where deal_record_status not in (10200005,10200006)
         and a.deal_deal_type not in (25400001) 
         and ((a.deal_execute_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||')
              or (nvl(Utlizeddate,''' || '01-Jan-1900' ||''') between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'))
          '|| finalcondition||' 
         order by a.deal_execute_date ';
         
          
      delete from temp;commit;
     insert into temp values (Query_Str,Query_str1);
      commit;
        Open Gencursor For Query_Str||Query_Str1 ;  
     Goto Process_End;      
 end if;


-- If Varreportid = 'MONTHALYCANCELLATIONREPORT1' then
--     if (to_char(frmDate,'MM') < 4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--  
--  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
--   --pkgreportprograms.prcFxForcastReportPopulate(frmDate);
-- -- Open Gencursor For
-- 
--  Query_Str:='select  MaturityMonth, datDateAsOn,BaseAmount,
--             BASEAMOUNTINR,Nvl(GAINLOSS,0) GAINLOSS, WTDAVGRATE,
--             WTDAVGBASEAMOUNT,WTDAVGRATE1,
--             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL,
--             Cashamountfcy,Cashamountinr,Frwdamountfcy,Frwdamountinr,Round(Spotrate,2) As Spotrate,
--             Srno
--      from (select  to_char(cdel_cancel_DATE,''MON-yy'') MaturityMonth,
--                   to_char(cdel_cancel_DATE,''YYYYMM'') MonthOrder,
--              frmDate datDateAsOn,
----              (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
----               Else Round(Sum(Cdel_Cancel_Amount)/1000000,2) End) Baseamount,
--              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
--               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
--              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              Pandl.pandl  GAINLOSS,
--                round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
--                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      cdel_cancel_amount/1000000
--                  end) as CashAmountFcy,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end) as CashAmountINR,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      cdel_cancel_amount/1000000
--                  end) as FrwdAmountFcy,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end )as FrwdAmountINR,
--                  fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),1,tempDate,frmDate) SpotRate,
--                          2 SrNo
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number';
--             Query_Str1:='left outer join 
--                      (select to_char(cdel_cancel_DATE,''YYYYMM'') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
--                              sum(cdel_cancel_amounteal_deal_number
--                          and  deal_backup_de) as FwdAmount
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= dal=33300001
--                          and cdel_cancel_date  between tempDate and frmDate
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_cancel_type=27000001
--                          and cdel_record_status not in (10200005,10200006)
--                          group by to_char(cdel_cancel_DATE,''YYYYMM'') ) PandL
--                    On Pandl.Maturitymonth = To_Char(Cdel_Cancel_Date,''YYYYMM'')
--                       where cdel_RECORD_STATUS not in(10200005,10200006) 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        and trad_product_category =33300001
--                        and trad_record_status=10200005 
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date  between tempDate and frmDate
--                        And Deal_Base_Currency=30400004
--  
--                     --   AND CDEL_CANCEL_DATE <=frmDate
--                     
--                   group by to_char(cdel_cancel_DATE,''YYYYMM''),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,''YYYYMM''),
--                              to_char(cdel_cancel_DATE,''MON-yy''),pandl.pandl
--                              UNION ALL
--                     select  --to_char(cdel_cancel_DATE,''MON-yy'')
--                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,1)  MaturityMonth,
--                   --to_char(cdel_cancel_DATE,''YYYYMM'')
--                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MonthOrder,
--                      frmDate datDateAsOn,
----                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
----                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
----                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR,
--              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
--               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
--              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--                      Pandl.pandl  GAINLOSS,
--                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
--                           (Nvl(Pandl.Pandl,0)/1000000))/Sum(Cdel_Cancel_Amount/1000000),2) Wtdavgrate,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      cdel_cancel_amount/1000000
--                  end) as CashAmountFcy,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end) as CashAmountINR,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      cdel_cancel_amount/1000000
--                  end) as FrwdAmountFcy,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end )as FrwdAmountINR,
--                  fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),3,tempDate,tempDate) SpotRate,
--                          1 SrNo
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number';
--                   Query_Str2:='left outer join 
--                      (select fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
--                      sum(cdel_cancel_amount) as FwdAmount
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= deal_deal_number
--                          and  deal_backup_deal=33300001
--                          and cdel_cancel_date  < tempDate
--                          and cdel_cancel_date > ''31-MAR-2014''
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_record_status not in (10200005,10200006)                          
--                          and cdel_cancel_type=27000001
--                          group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,''YYYYMM'')
--                          ) PandL
--                    on PandL.MaturityMonth = fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)
--                       where cdel_RECORD_STATUS not in(10200005,10200006) 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        and trad_product_category =33300001
--                        and trad_record_status=10200005 
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date  < tempDate
--                        
--                        and cdel_cancel_date > ''31-MAR-2014''
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <=frmDate
--                     
--                   group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,''YYYYMM''),
--                   cdel_COMPANY_CODE,deal_base_CURRENCY
--                   --to_char(cdel_cancel_DATE,''YYYYMM''),
--                   ,fncGetFinancialYear(frmDate,cdel_cancel_DATE,2),
--                   fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),3,tempDate,tempDate),
--                    --          to_char(cdel_cancel_DATE,''MON-yy'')
--                              pandl.pandl ';
--                              
--                        Query_Str3:=' UNION ALL
--                              
--                      select  --to_char(cdel_cancel_DATE,''MON-yy'')
--                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,1)  MaturityMonth,
--                   --to_char(cdel_cancel_DATE,''YYYYMM'')
--                      fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MonthOrder,
--                      frmDate datDateAsOn,
----                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
----                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
----                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
--               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
--              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
--              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--                      Pandl.pandl GAINLOSS,
--                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
--                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
--                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
--                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      cdel_cancel_amount/1000000
--                  end) as CashAmountFcy,
--                  sum(case when Deal_Deal_Type = 25400001 then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end) as CashAmountINR,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      cdel_cancel_amount/1000000
--                  end) as FrwdAmountFcy,
--                  sum(case when Deal_Deal_Type not in(25400001) then
--                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
--                  end )as FrwdAmountINR,
--                  fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),2,tempDate,frmDate) SpotRate,
--                          3 SrNo
--               from    trtran002 inner join trtran006 a1
--                       on trad_trade_reference=cdel_trade_reference
--                       inner join trtran001 b1
--                       on cdel_deal_number= deal_deal_number';
--                Query_Str4:='left outer join 
--                      (select fncGetFinancialYear(frmDate,cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
--                      sum(cdel_cancel_amount) as FwdAmount
--                        from trtran006 a2, trtran001 b2
--                       where cdel_deal_number= deal_deal_number
--                          And  Deal_Backup_Deal=33300001
--                          and cdel_cancel_date between tempDate and frmDate
--                          --and cdel_cancel_date > ''31-MAR-2014''
--                          and deal_base_currency=30400004
--                          and deal_other_currency =30400003
--                          and cdel_cancel_type=27000001
--                          and cdel_record_status not in (10200005,10200006)
--                          group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,''YYYYMM'')
--                          ) PandL
--                    on PandL.MaturityMonth = fncGetFinancialYear(frmDate,cdel_cancel_DATE,2)
--                       where cdel_RECORD_STATUS not in(10200005,10200006) 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        and trad_product_category =33300001
--                        and trad_record_status=10200005 
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                       -- and cdel_cancel_type =27000001
--                        and cdel_cancel_date between tempDate and frmDate
--                        --and cdel_cancel_date > ''31-MAR-2014''
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <=frmDate
--                     
--                   group by fncGetFinancialYear(frmDate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,''YYYYMM''),
--                   cdel_COMPANY_CODE,deal_base_CURRENCY
--                   --to_char(cdel_cancel_DATE,''YYYYMM''),
--                   ,fncGetFinancialYear(frmDate,cdel_cancel_DATE,2),
--                   fncGetSpotRate(to_char(cdel_cancel_DATE,''YYYYMM''),2,tempDate,frmDate),
--                    --          to_char(cdel_cancel_DATE,''MON-yy'')
--                              pandl.pandl 
--                              
--                              )
--                              
--                   Order by  MonthOrder,MaturityMonth,SrNo';
--
--                  delete from temp;commit;
--                  insert into temp values (Query_Str,Query_Str1);commit;
--                  insert into temp values(Query_Str2,Query_Str3);commit;
--                  insert into temp values(Query_Str4,Query_Str);commit;
--              open gencursor for (Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4);
--                   Goto Process_End;   
-- End If;  
 
 If Varreportid = 'MONTHALYCANCELLATIONREPORT1' then
     if (to_char(frmDate,'MM') < 4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
  numRecords:=2;
  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
   pkgreportprograms.prcFxForcastReportPopulate(frmDate);
  Open Gencursor For
 
     select  MaturityMonth,datDateAsOn,BaseAmount,
             BASEAMOUNTINR,Nvl(GAINLOSS,0) GAINLOSS, WTDAVGRATE,
             WTDAVGBASEAMOUNT,WTDAVGRATE1,
             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL,
             Cashamountfcy,Cashamountinr,Frwdamountfcy,Frwdamountinr,Round(Spotrate,2) As Spotrate,
             Srno
      from (  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
              avg(SpotRate)SpotRate,SrNo
      from (select  to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
              frmdate datDateAsOn,
--              (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--               Else Round(Sum(Cdel_Cancel_Amount)/1000000,2) End) Baseamount,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              --sum(cdel_cancel_amount*cdel_cancel_RATE) - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              -
--              sum(CASE WHEN cdel_cancel_type = 27000002
--                  THEN CDEL_PROFIT_LOSS end)
              Pandl.pandl  GAINLOSS,
                round  ((sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),1,tempDate,frmdate) SpotRate,
                          2 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                              sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                          and  deal_backup_deal=33300001
                          and cdel_cancel_date  between tempDate and frmdate
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_cancel_type=27000001
                          and cdel_record_status not in (10200005,10200006)
                          group by to_char(cdel_cancel_DATE,'YYYYMM') ) PandL
                    On Pandl.Maturitymonth = To_Char(Cdel_Cancel_Date,'YYYYMM')
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_product_category =33300001
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  between tempDate and frmdate
                        And Deal_Base_Currency=30400004
                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
                   group by to_char(cdel_cancel_DATE,'YYYYMM'),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
                              to_char(cdel_cancel_DATE,'MON-yy'),pandl.pandl
                              union all 
            SELECT  to_char(trad_maturity_date,'MON-yy') MaturityMonth,
                         to_char(trad_maturity_date,'YYYYMM') MonthOrder,
                     frmdate datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            2 SrNo
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                          and brel_entry_date between  tempDate and frmdate
                          AND brel_trade_reference    = loln_trade_reference
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          and trad_product_category =33300001
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   to_char(trad_maturity_date,'MON-yy'),
                                      to_char(trad_maturity_date,'YYYYMM'),trad_company_code,trad_trade_currency) 
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo)
                              UNION ALL
             ( select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
              avg(SpotRate)SpotRate,SrNo FROM (           
                     select  --to_char(cdel_cancel_DATE,'MON-yy')
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,1)  MaturityMonth,
                   --to_char(cdel_cancel_DATE,'YYYYMM')
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MonthOrder,
                      frmdate datDateAsOn,
--                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              --sum(cdel_cancel_amount*cdel_cancel_RATE)  - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              -
--              sum(CASE WHEN cdel_cancel_type = 27000002
--                  THEN CDEL_PROFIT_LOSS end)BASEAMOUNTINR, 
                      Pandl.pandl  GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (Nvl(Pandl.Pandl,0)/1000000))/Sum(Cdel_Cancel_Amount/1000000),2) Wtdavgrate,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate) SpotRate,
                          1 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (select fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                      sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                          and  deal_backup_deal=33300001
                          and cdel_cancel_date  < tempDate
                          and cdel_cancel_date > '31-MAR-2014'
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_record_status not in (10200005,10200006)                          
                          and cdel_cancel_type=27000001
                          group by fncGetFinancialYear(frmdate,cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,'YYYYMM')
                          ) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(frmdate,cdel_cancel_DATE,2)
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_product_category =33300001
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  < tempDate
                        and cdel_cancel_date > '31-MAR-2014'
                        and deal_base_currency=30400004
                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
                   group by fncGetFinancialYear(frmdate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
                   cdel_COMPANY_CODE,deal_base_CURRENCY,
                   --to_char(cdel_cancel_DATE,'YYYYMM'),
                   fncGetFinancialYear(frmdate,cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate),
                    --          to_char(cdel_cancel_DATE,'MON-yy')
                              pandl.pandl
                                       union all 
            SELECT   fncGetFinancialYear(frmdate,trad_maturity_date,1) MaturityMonth,
                          fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
                     frmdate datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            1 SrNo
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                         -- and brel_entry_date between  tempDate and frmdate
                          AND brel_trade_reference    = loln_trade_reference
                           and trad_maturity_date  < tempDate
                        and trad_maturity_date > '31-MAR-2014'
                        and trad_trade_currency=30400004
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          and trad_product_category =33300001
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   fncGetFinancialYear(frmdate,trad_maturity_date,1),
                                      fncGetFinancialYear(frmdate,trad_maturity_date,2),trad_company_code,trad_trade_currency)
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo  )                            
              UNION ALL
                  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
                  sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
                  avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
                  sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
                  sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
                  avg(SpotRate)SpotRate,SrNo FROM (                
                      select  --to_char(cdel_cancel_DATE,'MON-yy')
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,1)  MaturityMonth,
                   --to_char(cdel_cancel_DATE,'YYYYMM')
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MonthOrder,
                     frmdate datDateAsOn,
--                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              --sum(cdel_cancel_amount*cdel_cancel_RATE)  - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              -
--              sum(CASE WHEN cdel_cancel_type = 27000002
--                  THEN CDEL_PROFIT_LOSS end)BASEAMOUNTINR,
                      Pandl.pandl GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,frmdate) SpotRate,
                          3 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (select fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                      sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                          And  Deal_Backup_Deal=33300001
                          and cdel_cancel_date between tempDate and frmdate
                          --and cdel_cancel_date > '31-MAR-2014'
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_cancel_type=27000001
                          and cdel_record_status not in (10200005,10200006)
                          group by fncGetFinancialYear(frmdate,cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,'YYYYMM')
                          ) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(frmdate,cdel_cancel_DATE,2)
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_product_category =33300001
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date between tempDate and frmdate
                        --and cdel_cancel_date > '31-MAR-2014'
                        and deal_base_currency=30400004
                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
                     
                   group by fncGetFinancialYear(frmdate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
                   cdel_COMPANY_CODE,deal_base_CURRENCY
                   --to_char(cdel_cancel_DATE,'YYYYMM'),
                   ,fncGetFinancialYear(frmdate,cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,frmdate),
                    --          to_char(cdel_cancel_DATE,'MON-yy')
                              pandl.pandl
                                                  union all 
            SELECT  fncGetFinancialYear(frmdate,trad_maturity_date,1) MaturityMonth,
                         fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
                     frmdate datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            3 SrNo
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference                         
                          AND brel_trade_reference    = loln_trade_reference
                            and trad_maturity_date between tempDate and frmdate              
                          and trad_trade_currency=30400004
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          and trad_product_category =33300001
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   fncGetFinancialYear(frmdate,trad_maturity_date,1),
                                      fncGetFinancialYear(frmdate,trad_maturity_date,2),trad_company_code,trad_trade_currency)
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo)           
                              )
                    Order by  MonthOrder,MaturityMonth,SrNo; 
                   
 open NextCursor for
 select  Company,MaturityMonth,MonthOrder,refnum,CATEGORY,SubCategory,Agreement,Vendor,Bank,BankRef,
          Duedate,Currency, FwdContractNo,Amount,CashFCY,CashRate,CashinINR,FwdAmt,
          FwdRate,AmtinINR,EDinPaisa,EDINR,NetRate,NetINR,AsonDate,DOCUMENTNO,CATEGORY1,SrNo,frmdate datDateAsOn
          from(
select * from ( SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
              to_char(trad_maturity_date,'MON-yy') MaturityMonth,
              to_char(trad_maturity_date,'YYYYMM') MonthOrder,
              trad_trade_reference refnum,
              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
              trad_contract_no                                            AS Agreement,
              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
              trad_user_reference                                         AS BankRef,
              trad_maturity_date                                          AS Duedate,
              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
              trad_contract_no                                            AS FwdContractNo,--rearranged
              trad_trade_fcy                                              AS Amount,
              (b.CashAmount+b.ForwardAmount)                              AS SettledAmt,
              ROUND(b.CashAmount,2)                                       AS CashFCY,--new
              ROUND(b.cashrate,4)                                         AS CashRate,       
              CASE
                WHEN b.CashAmount <> 0
                THEN ROUND((b.CashAmount * b.cashrate),2)
                ELSE 0
              END                      AS CashinINR,
              ROUND(b.ForwardAmount,2) AS FwdAmt,        
              CASE
                WHEN b.ForwardAmount <> 0
                THEN ROUND(((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount),4)
                ELSE 0
              END AS FwdRate,         
              DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
              ROUND(b.Edpisa,4)                                                                                            AS EDinPaisa,
              ROUND(b.EdBenifit,2)                                                                                         AS EDINR,

              CASE
                WHEN b.CashAmount  <> 0
                OR b.ForwardAmount <> 0
                THEN ROUND(((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate))/(b.ForwardAmount + b.CashAmount),4)
              END AS NetRate,
              --ROUND(b.forwardrate*b.ForwardAmount,2) AS NetINR,
              ROUND((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate),2) AS NetINR,
              b.CancelDate                                                            AS AsonDate,             
              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
              trad_product_category    AS CATEGORY1,
              2 SrNo
            FROM trtran002 a,
              (SELECT cdel_trade_reference,
                SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
                (SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate) / SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
                SUM((
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 0
                END)) ForwardAmount,
                (SUM( (
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 0
                END)* cdel_cancel_rate) / SUM( (
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 1
                END))) Forwardrate,
                CASE
                  WHEN cdel_cancel_type = 27000002
                  THEN SUM(CDEL_PROFIT_LOSS)
                END EdBenifit,
                CASE
                  WHEN cdel_cancel_type = 27000002
                  THEN AVG(deal_exchange_rate-cdel_cancel_rate)
                END Edpisa,
                MAX(CDEL_CANCEL_DATE) AS CancelDate
              FROM trtran001,
                trtran006
              WHERE deal_deal_number      = cdel_deal_number
              AND deal_record_status NOT IN (10200005,10200006)
              AND cdel_record_status NOT IN(10200005,10200006)
              AND CDEL_CANCEL_DATE BETWEEN tempdate and frmdate
              GROUP BY cdel_trade_reference,
                cdel_cancel_type
              ) b
            WHERE a.trad_trade_reference  = b.cdel_trade_reference
            AND a.trad_record_status NOT IN(10200006)
            AND A.trad_import_export NOT IN(25900025) 
            and A.trad_product_category =33300001  
          UNION ALL
            SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
              to_char(trad_maturity_date,'MON-yy') MaturityMonth,
              to_char(trad_maturity_date,'YYYYMM') MonthOrder,
              trad_trade_reference refnum,
              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
              trad_contract_no                                            AS Agreement,
              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
              trad_user_reference                                         AS BankRef,
              trad_maturity_date                                          AS Duedate,
              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
              NULL                                                        AS FwdContractNo,--rearranged
              trad_trade_fcy                                              AS Amount,
              LOLN_ADJUSTED_FCY                                           AS SettledAmt,
              0                                                           AS CashFCY,--new
              0                                                           AS CashRate,
              0                                                           AS CashinINR,
              0                                                           AS FwdAmt,
              0                                                           AS FwdRate,
              0                                                           AS AmtinINR,
              0                                                           AS EDinPaisa,
              0                                                           AS EDINR,
              BCRD_SPOT_RATE                                              AS NetRate,
              LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE                          AS NetINR,
              loln_adjusted_date                                          AS AsonDate,             
              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
              trad_product_category    AS CATEGORY1,
              2 SrNo
            FROM trtran002,
              trtran003,
              trtran010,
              TRTRAN045
            WHERE trad_trade_reference  = brel_trade_reference
            AND brel_trade_reference    = loln_trade_reference
            AND trad_record_status NOT IN(10200006)
            AND trad_import_export NOT IN(25900025)
            AND brel_record_status NOT IN(10200006)
            and trad_product_category=33300001
            AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
            AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
            AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
            AND BREL_ENTRY_DATE BETWEEN tempdate and frmdate          
            union all
            select  pkgreturncursor.fncgetdescription(cdel_company_code,2) Company,
            to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth ,
            to_char(cdel_cancel_DATE,'YYYYMM')  MaturityOrder,
            cdel_deal_number refnum,
            pkgreturncursor.fncgetdescription(deal_backup_deal,2) CATEGORY,
            pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
            null Agreement, null Vendor, 
            pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
            null BankRef,
            cdel_cancel_date Duedate,
            pkgreturncursor.fncgetdescription( deal_base_currency ,2) Currency, 
            null FwdContractNo,
            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
            null FwdRate,null AmtinINR,      
            (CDEL_PROFIT_LOSS)  EDinPaisa,
            null EDINR,null NetRate,null NetINR,cdel_cancel_date AsonDate,null DOCUMENTNO,
            deal_backup_deal CATEGORY1,2 SrNo            
            from trtran006 a2, trtran001 b2
            where cdel_deal_number= deal_deal_number
            and  deal_backup_deal=33300001
            and cdel_cancel_date  between tempdate and frmdate
            and deal_base_currency=30400004
            and deal_other_currency =30400003
            and cdel_cancel_type=27000001
            and cdel_record_status not in (10200005,10200006))
           UNION ALL
             select* from(SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
                fncGetFinancialYear(frmdate,b.canceldate,1)  MaturityMonth,
            fncGetFinancialYear(frmdate,b.canceldate,2) MonthOrder,
              trad_trade_reference refnum,
              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
              trad_contract_no                                            AS Agreement,
              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
              trad_user_reference                                         AS BankRef,
              trad_maturity_date                                          AS Duedate,
              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
              trad_contract_no                                            AS FwdContractNo,--rearranged
              trad_trade_fcy                                              AS Amount,
              (b.CashAmount+b.ForwardAmount)                              AS SettledAmt,
              ROUND(b.CashAmount,2)                                       AS CashFCY,--new
              ROUND(b.cashrate,4)                                         AS CashRate,
              --ROUND(b.CashAmount*((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount),4) AS CashinINR,
              CASE
                WHEN b.CashAmount <> 0
                THEN ROUND((b.CashAmount * b.cashrate),2)
                ELSE 0
              END                      AS CashinINR,
              ROUND(b.ForwardAmount,2) AS FwdAmt,
              --round(((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount),4) as FwdRate,
              CASE
                WHEN b.ForwardAmount <> 0
                THEN ROUND(((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount),4)
                ELSE 0
              END AS FwdRate,
              --round((((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount))*(b.CashAmount+b.ForwardAmount),2) as AmtinINR,
              --DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
              DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
              ROUND(b.Edpisa,4)                                                                                            AS EDinPaisa,
              ROUND(b.EdBenifit,2)                                                                                         AS EDINR,
              -- round(b.Edpisa*b.Cancelamt,2) as EdINR,
              --ROUND(b.forwardrate,4)                 AS NetRate,
              CASE
                WHEN b.CashAmount  <> 0
                OR b.ForwardAmount <> 0
                THEN ROUND(((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate))/(b.ForwardAmount + b.CashAmount),4)
              END AS NetRate,
              --ROUND(b.forwardrate*b.ForwardAmount,2) AS NetINR,
              ROUND((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate),2) AS NetINR,
              b.CancelDate                                                            AS AsonDate,             
              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
              trad_product_category    AS CATEGORY1,
              1 SrNo
            FROM trtran002 a,
              (SELECT cdel_trade_reference,
                SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
                (SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate) / SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
                SUM((
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 0
                END)) ForwardAmount,
                (SUM( (
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 0
                END)* cdel_cancel_rate) / SUM( (
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 1
                END))) Forwardrate,
                CASE
                  WHEN cdel_cancel_type = 27000002
                  THEN SUM(CDEL_PROFIT_LOSS)
                END EdBenifit,
                CASE
                  WHEN cdel_cancel_type = 27000002
                  THEN AVG(deal_exchange_rate-cdel_cancel_rate)
                END Edpisa,
                MAX(CDEL_CANCEL_DATE) AS CancelDate
              FROM trtran001,
                trtran006
              WHERE deal_deal_number      = cdel_deal_number
              AND deal_record_status NOT IN (10200005,10200006)
              AND cdel_record_status NOT IN(10200005,10200006)
              and cdel_cancel_date  < frmdate                     
              and cdel_cancel_date > '31-MAR-2014'
              and cdel_trade_reference is not null 
               and deal_base_currency=30400004
              GROUP BY cdel_trade_reference,
                cdel_cancel_type
              ) b
            WHERE a.trad_trade_reference  = b.cdel_trade_reference
             and trad_record_status in (10200005,10200001,10200003,10200004)
               and A.trad_product_category =33300001
            UNION ALL
            SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
               fncGetFinancialYear(frmdate,trad_maturity_date,1)  MaturityMonth,
                             --to_char(cdel_cancel_DATE,'YYYYMM')
             fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
             trad_trade_reference refnum,
              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
              trad_contract_no                                            AS Agreement,
              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
              trad_user_reference                                         AS BankRef,
              trad_maturity_date                                          AS Duedate,
              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
              NULL                                                        AS FwdContractNo,--rearranged
              trad_trade_fcy                                              AS Amount,
              LOLN_ADJUSTED_FCY                                           AS SettledAmt,
              0                                                           AS CashFCY,--new
              0                                                           AS CashRate,
              0                                                           AS CashinINR,
              0                                                           AS FwdAmt,
              0                                                           AS FwdRate,
              0                                                           AS AmtinINR,
              0                                                           AS EDinPaisa,
              0                                                           AS EDINR,
              BCRD_SPOT_RATE                                              AS NetRate,
              LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE                          AS NetINR,
              loln_adjusted_date                                         AS AsonDate,
              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
              trad_product_category    AS CATEGORY1,
              1 SrNo
            FROM trtran002,
              trtran003,
              trtran010,
              TRTRAN045
            WHERE trad_trade_reference  = brel_trade_reference
            AND brel_trade_reference    = loln_trade_reference
            AND trad_record_status NOT IN(10200006)
            AND trad_import_export NOT IN(25900025)
            AND brel_record_status NOT IN(10200006)
            and trad_product_category=33300001
            AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
            AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
            AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
            AND trad_maturity_date < frmdate
            and trad_maturity_date > '31-MAR-2014'
             and trad_trade_currency=30400004           
            union all
            select  pkgreturncursor.fncgetdescription(cdel_company_code,2) Company,
            fncGetFinancialYear(frmdate,cdel_cancel_DATE,1) MaturityMonth,
            fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MaturityOrder,
            cdel_deal_number refnum,pkgreturncursor.fncgetdescription(deal_backup_deal,2) CATEGORY,
            pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
            null Agreement, null Vendor,pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
            null BankRef,cdel_cancel_date Duedate,pkgreturncursor.fncgetdescription( deal_base_currency ,2) Currency, 
            null FwdContractNo,null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
            null FwdRate,null AmtinINR,(CDEL_PROFIT_LOSS)  EDinPaisa,
            null EDINR,null NetRate,null NetINR,cdel_cancel_date AsonDate,null DOCUMENTNO,
            deal_backup_deal CATEGORY1, 1 SrNo
            from trtran006 a2, trtran001 b2
            where cdel_deal_number= deal_deal_number
            and  deal_backup_deal=33300001
            and cdel_cancel_date  < frmdate
            and cdel_cancel_date > '31-MAR-2014'
            and deal_base_currency=30400004
            and deal_other_currency =30400003
            and cdel_record_status not in (10200005,10200006)                          
            and cdel_cancel_type=27000001 )
         UNION ALL 
         select * from (
            SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
              fncGetFinancialYear(frmdate,b.canceldate,1)  MaturityMonth,
                             --to_char(cdel_cancel_DATE,'YYYYMM')
             fncGetFinancialYear(frmdate,b.canceldate,2) MonthOrder,
              trad_trade_reference refnum,
              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
              trad_contract_no                                            AS Agreement,
              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
              trad_user_reference                                         AS BankRef,
              trad_maturity_date                                          AS Duedate,
              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
              trad_contract_no                                            AS FwdContractNo,--rearranged
              trad_trade_fcy                                              AS Amount,
              (b.CashAmount+b.ForwardAmount)                              AS SettledAmt,
              ROUND(b.CashAmount,2)                                       AS CashFCY,--new
              ROUND(b.cashrate,4)                                         AS CashRate,
              --ROUND(b.CashAmount*((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount),4) AS CashinINR,
              CASE
                WHEN b.CashAmount <> 0
                THEN ROUND((b.CashAmount * b.cashrate),2)
                ELSE 0
              END                      AS CashinINR,
              ROUND(b.ForwardAmount,2) AS FwdAmt,
              --round(((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount),4) as FwdRate,
              CASE
                WHEN b.ForwardAmount <> 0
                THEN ROUND(((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount),4)
                ELSE 0
              END AS FwdRate,
              --round((((b.CashAmount*b.Cashrate)+(b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.CashAmount+b.ForwardAmount))*(b.CashAmount+b.ForwardAmount),2) as AmtinINR,
              --DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate)+(b.EdBenifit))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
              DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
              ROUND(b.Edpisa,4)                                                                                            AS EDinPaisa,
              ROUND(b.EdBenifit,2)                                                                                         AS EDINR,
              -- round(b.Edpisa*b.Cancelamt,2) as EdINR,
              --ROUND(b.forwardrate,4)                 AS NetRate,
              CASE
                WHEN b.CashAmount  <> 0
                OR b.ForwardAmount <> 0
                THEN ROUND(((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate))/(b.ForwardAmount + b.CashAmount),4)
              END AS NetRate,
              --ROUND(b.forwardrate*b.ForwardAmount,2) AS NetINR,
              ROUND((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate),2) AS NetINR,
              b.CancelDate                                                            AS AsonDate,             
              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
              trad_product_category    AS CATEGORY1,
              3 SrNo
            FROM trtran002 a,
              (SELECT cdel_trade_reference,
                SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
                (SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate) / SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
                SUM((
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 0
                END)) ForwardAmount,
                (SUM( (
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 0
                END)* cdel_cancel_rate) / SUM( (
                CASE
                  WHEN deal_deal_type!=25400001
                  THEN cdel_cancel_amount
                  ELSE 1
                END))) Forwardrate,
                CASE
                  WHEN cdel_cancel_type = 27000002
                  THEN SUM(CDEL_PROFIT_LOSS)
                END EdBenifit,
                CASE
                  WHEN cdel_cancel_type = 27000002
                  THEN AVG(deal_exchange_rate-cdel_cancel_rate)
                END Edpisa,
                MAX(CDEL_CANCEL_DATE) AS CancelDate
              FROM trtran001,
                trtran006
            WHERE deal_deal_number      = cdel_deal_number
            AND deal_record_status NOT IN (10200005,10200006)
            AND cdel_record_status NOT IN(10200005,10200006)
            and cdel_cancel_date between tempdate and frmdate
             and deal_base_currency=30400004
            GROUP BY cdel_trade_reference,
              cdel_cancel_type
            ) b
          WHERE a.trad_trade_reference  = b.cdel_trade_reference
           and trad_record_status in (10200005,10200001,10200003,10200004)
             and A.trad_product_category =33300001
          UNION ALL
          SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
             fncGetFinancialYear(frmdate,trad_maturity_date,1)  MaturityMonth,
            fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
            trad_trade_reference refnum,
            pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
            pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
            trad_contract_no                                            AS Agreement,
            pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
            pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
            trad_user_reference                                         AS BankRef,
            trad_maturity_date                                          AS Duedate,
            pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
            NULL                                                        AS FwdContractNo,--rearranged
            trad_trade_fcy                                              AS Amount,
            LOLN_ADJUSTED_FCY                                           AS SettledAmt,
            0                                                           AS CashFCY,--new
            0                                                           AS CashRate,
            0                                                           AS CashinINR,
            0                                                           AS FwdAmt,
            0                                                           AS FwdRate,
            0                                                           AS AmtinINR,
            0                                                           AS EDinPaisa,
            0                                                           AS EDINR,
            BCRD_SPOT_RATE                                              AS NetRate,
            LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE                          AS NetINR,
            loln_adjusted_date                                         AS AsonDate,
            TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
            trad_product_category    AS CATEGORY1,
            3 SrNo
          FROM trtran002,
            trtran003,
            trtran010,
            TRTRAN045
          WHERE trad_trade_reference  = brel_trade_reference
          AND brel_trade_reference    = loln_trade_reference
          AND trad_record_status NOT IN(10200006)
          AND trad_import_export NOT IN(25900025)
          AND brel_record_status NOT IN(10200006)
          and trad_product_category=33300001
          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
          AND brel_entry_date between tempdate and frmdate
          and trad_trade_currency=30400004         
          union all
          select  pkgreturncursor.fncgetdescription(cdel_company_code,2) Company,
          fncGetFinancialYear(frmdate,cdel_cancel_DATE,1) MaturityMonth,
          fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MaturityOrder,
          cdel_deal_number refnum,pkgreturncursor.fncgetdescription(deal_backup_deal,2) CATEGORY,
          pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
          null Agreement, null Vendor,pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
          null BankRef,cdel_cancel_date Duedate,pkgreturncursor.fncgetdescription( deal_base_currency ,2) Currency, 
          null FwdContractNo,null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
          null FwdRate,null AmtinINR,(CDEL_PROFIT_LOSS)  EDinPaisa,
          null EDINR,null NetRate,null NetINR,cdel_cancel_date AsonDate,null DOCUMENTNO,
          deal_backup_deal CATEGORY1, 3 SrNo              
          from trtran006 a2, trtran001 b2
          where cdel_deal_number= deal_deal_number
          And  Deal_Backup_Deal=33300001
          and cdel_cancel_date between tempdate and frmdate                    
          and deal_base_currency=30400004
          and deal_other_currency =30400003
           and cdel_cancel_type=27000001
          and cdel_record_status not in (10200005,10200006))) order by MaturityMonth,MonthOrder,SrNo;
 Goto Process_End;   
 End If;   
 
  If varReportID='HEDGESTATUSREPORTNEW' THEN  
          
           --   numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;   
                
            --  PRCCALCULATEGAPEXPOSURE(frmDate,1);
              
              --delete from report_hedgestatus;
                numRecords:=2;
              PKGREPORTPROGRAMS.prcHedgeStatusReportPopulate(varUserID,frmDate,33399999,33899999);
              finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
              finalCondition:= replace(finalCondition,'DEAL_BACKUP_DEAL','ProductCode');
              finalCondition:= replace(finalCondition,'DEAL_INIT_CODE','SubProductCode');
              finalCondition:= replace(finalCondition,'POSN_DUE_DATE', 'to_date('||''''||frmDate||''''||',''dd-MON-RRRR'')');
              
              --finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
             Query_Str :='select  to_char(to_date('||''''||frmDate||''''||'),''dd-MON-yy'') as FromDate,
                              --   to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as FromDate,
                                  to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as ToDate,
                                  '||''''||sysdate||''''||' as SystemDate,
                                  pkgreturnreport.getCompanyName(''SK123'') as CompanyName,
                                  DisplayOrder, TransType, ProductCode,SubProductCode,
                                   pkgreturncursor.fncgetdescription(ProductCode,2) Product,
                                   pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct, 
                                   pkgreturncursor.fncgetdescription(Company,2) Company, 
                                   pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
                             nvl (Forward1,0) Forward1,
                             nvl (Forward2,0) Forward2 ,
                             nvl (Forward3,0) Forward3 ,
                             nvl (Forward4,0) Forward4 ,
                             nvl (Forward5,0) Forward5 ,
                             nvl (Forward6,0) Forward6 ,
                             nvl (Forward7,0) Forward7 , 
                             nvl (Forward8,0) Forward8 ,
                             nvl (Forward9,0) Forward9 ,
                             nvl (Forward10,0) Forward10 ,
                             nvl (Forward11,0) Forward11 ,
                             nvl (Forward12,0) Forward12 , 
                             nvl (Total,0) Total,
                            LimitRange,LimitPercent,FluctAllowed
                           -- '||varGroupfield||'
                     from  report_hedgestatus
                     where 1=1 
                      '||finalcondition||'';                            
          
                                  delete from temp;commit; 
                                  insert into temp values(Query_Str,finalCondition);
                                  commit;
             OPEN GenCursor for Query_Str||finalCondition || ' order by pkgreturncursor.fncgetdescription(ProductCode,2),
                                                                       pkgreturncursor.fncgetdescription(SubProductCode,2)'  ;
         OPEN NextCursor for
         select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
         posn_transaction_amount AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         --POSN_M2M_INRRATE AS M2MINRRATE,
         POSN_DUE_DATE AS DUEDATE,
         to_char(to_date(POSN_DUE_DATE),'MON-yy') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
        25900025,25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Exposure'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedged' end) TransType,
        frmdate as frmdate,
        todate as todate FROM TRSYSTEM997;
    Goto Process_End; 
    End If;
    
  if varReportID= 'PREMIUMAMORTISATIONLATEST1' then   

--if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;


  Open Gencursor For
     select 
       pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
       pkgreturncursor.fncgetdescription(deal_backup_deal,2) as Categry,
       pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2)||'/'||pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as BaseCurrency,
     --  dat.CalendarDate, 
       --round(sum( nvl((fncAmountization (deal_deal_number,dat.CalendarDate)),0))/100000,2) Amortization,
       round(sum( nvl((fncAmountization (deal_deal_number,dat.CalendarDate)),0)),2) Amortization, -- Added by Ishwarachandra on 18/11/2015 for removing lacks.
       frmdate as frmdate,
       Todate as todate,
       to_char(dat.CalendarDate,'YYYYMM') as monthorder,
       
       -- to_char(dat.CalendarDate,'YYYYMM') as monthorder,
        to_char(dat.CalendarDate,'MON-YY') as CalendarDate,
       --pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName
      (case when  dat.CalendarDate <=datWorkDate then 'Past' else 'Future Months' end)  Status
         --null Status
    from trtran001 a , (select last_day(hday_calendar_date) CalendarDate
          from trsystem001 
          where hday_calendar_date between frmDate and Todate
          and hday_location_code=30299999
          group by last_day(hday_calendar_date)) Dat      
          where  deal_deal_type not in(25400001)
          and deal_maturity_date !=deal_execute_date
          and (deal_maturity_date between frmDate and Todate
          or deal_execute_date between frmDate and Todate)
--          and (deal_maturity_date <= frmDate 
--          or deal_execute_date >= frmDate)
          and deal_record_status not in (10200005,10200006)
     group by DEAL_COMPANY_CODE,deal_backup_deal,DEAL_BASE_CURRENCY,DEAL_Other_Currency,CalendarDate,
     (case when  dat.CalendarDate <=datWorkDate then 'Past' else 'Future Months' end);
         Goto Process_End;   
  end if;  
  
--  If  Varreportid ='CURRFUTUREMTMREPORTNEW' Then
--  Delete From Trsystem978;Commit;
--   Insert Into Trsystem978 Values(toDate);commit;
-- -- Insert Into Temp Select Asondate,'' From Trsystem978;
--
--Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
--               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
--               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
--               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
--               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
--                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
--                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
--               TO_DATE('||''''||frmDate||''''||') as FromDate,
--               to_date('||''''||toDate||''''||') as ToDate
--              ' || varGroupField || '
--          from  vewForwardFuture
--          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
--                  '||finalCondition||'';
--              delete from temp; commit;
--            insert into temp values(Query_Str,finalcondition);commit;
--    Open Gencursor For Query_Str;
--    Goto Process_End;
--  End If;
  If  Varreportid ='CURRFUTUREMTMREPORTNEW' Then
  Delete From Trsystem978;Commit;
   Insert Into Trsystem978 Values(frmDate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;

Query_str :='  select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,
               DealAmount*Exrate as AmtInr,Maturity, Exrate as Rate,
               decode(buysellcode,25300001,BalanceFcy,25300002,BalanceFcy * -1) as ProductQty,TRANS as BackupDeal,M2MRate,
               Maturity as MaturityDate,DEALREF AS Remark,pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,
               WASHRATE as WashRate,MTMPANDLINR as mtmValue,sum(PANDLFCY) as PandL,0 COBRATE,MTMPANDL,
               MTMPANDLINR MTMPANDLINR,RecordStatus,HedgeTrade,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate,
               USERREFERENCE BankReference
             -- ' || varGroupField || '
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
                  '||finalCondition||'';
              delete from temp; commit;
            insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str||'group by UserID,DealType,DealDate,DealNumber,CompanyCode,COMPANYNAME,BankName,Currency,BuySell,Maturity,TRANS,DEALREF,
                                   INITCODE,WASHRATE,RecordStatus,HedgeTrade,BankCode,TRANSCODE,DealAmount,Exrate,BalanceFcy,M2MRate,
                                   MTMPANDLINR,MTMPANDL,buysellcode,HedgeCode ,CURRENCYCODE,USERREFERENCE';
    Goto Process_End;
  End If;  
  
    If  Varreportid ='MTMREPORTNEW' Then
--  Delete From Trsystem978;Commit;
--   Insert Into Trsystem978 Values(toDate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;

Query_str :='select DataType,Companycode,CounterParty ,Dealamount,Transcode,
          Initcode,Trader,frmdate from(
       Select ''Forwards'' DataType,
    Pkgreturncursor.Fncgetdescription(Deal_Company_Code,2) Companycode,
    pkgreturncursor.fncgetdescription(Deal_Counter_Party ,2) CounterParty,
     Sum(Deal_Base_Amount) Dealamount, 
    Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) Transcode,
    Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) Initcode,
    pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,2)  Trader,
    '||''''||frmdate||''''||' frmdate
  From Trtran006
  LEFT OUTER JOIN trtran001
  On Deal_Deal_Number = Cdel_Deal_Number
  AND deal_complete_date <='||''''||frmdate||''''||'
  And Cdel_Record_Status Between 10200001 And 10200004
  GROUP BY 
    deal_company_code,
    deal_counter_party,
    Deal_Backup_Deal,
    Deal_Init_Code,Deal_Hedge_Trade
    union all
       ----------------------------FUTURE-----------------   
   Select ''Futures'' DataType,
   Pkgreturncursor.Fncgetdescription(Cfut_Company_Code,2) Companycode,    
     Pkgreturncursor.Fncgetdescription(Cfut_Counter_Party,2) Bankcode, 
   Sum(Cfut_Base_Amount) Dealamount,
     Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) Transcode,   
    Pkgreturncursor.Fncgetdescription(Cfut_Init_Code,2) Initcode,
     Pkgreturncursor.Fncgetdescription(Cfut_Hedge_Trade,2)  Trader,
     '||''''||frmdate||''''||' frmdate
  FROM trtran063
  LEFT OUTER JOIN trtran061
  ON cfut_deal_number = cfrv_deal_number
  AND cfrv_record_status BETWEEN 10200001 AND 10200004
  and cfut_complete_date <='||''''||frmdate||''''||'
   GROUP BY 
    cfut_company_code,
    cfut_counter_party,
    cfut_backup_deal,
    Cfut_Hedge_Trade,   
    Cfut_Init_Code
    union all
       -------OPTIONS-----------------   
 Select ''Options'' DataType,
      Pkgreturncursor.Fncgetdescription(Copt_Company_Code,2) Companycode,
      Pkgreturncursor.Fncgetdescription(Copt_Counter_Party,2) Bankcode,
    sum(Copt_Base_Amount) Dealamount,
      Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Transcode,
      Pkgreturncursor.Fncgetdescription(Copt_Hedge_Trade,2) Hedgetrade, 
      Pkgreturncursor.Fncgetdescription(copt_init_code,2) InitCode,
      '||''''||frmdate||''''||' frmdate
  From Trtran073
  LEFT OUTER JOIN trtran071
  On Copt_Deal_Number = Corv_Deal_Number
  And Corv_Record_Status Between 10200001 And 10200004
  and copt_complete_date <='||''''||frmdate||''''||'
  Group By Copt_Company_Code,Copt_Counter_Party,Copt_Backup_Deal,
  Copt_Hedge_Trade,copt_init_code)  where Dealamount>0';
              delete from temp; commit;
            insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;    
    Open Nextcursor For
   Select Datatype,DealNumber,Companycode,Counterparty ,Dealamount,Transcode,
          Initcode,Hedgetrade,Exedate,Currencycode,Buysell,Exerate,Otheramount,
         Fwdrate,Spotrate,Marginrate Frmdate From(
       Select 'Forwards' DataType,deal_deal_number DealNumber,
    Pkgreturncursor.Fncgetdescription(Deal_Company_Code,2) Companycode,
    Pkgreturncursor.Fncgetdescription(Deal_Counter_Party ,2) Counterparty,
    (Deal_Base_Amount) Dealamount, 
    Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) Transcode,
    Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) Initcode,
    Pkgreturncursor.Fncgetdescription(Deal_Hedge_Trade,2)  HedgeTrade,
    Deal_Execute_Date Exedate,
   Pkgreturncursor.Fncgetdescription(Deal_Base_Currency,2) Currencycode,
      Pkgreturncursor.Fncgetdescription(Deal_Buy_sell,2) BuySell,
   Deal_Exchange_Rate Exerate,
   Deal_Other_Amount Otheramount,
   Deal_Forward_Rate Fwdrate,
   Deal_Spot_Rate Spotrate,
   Deal_Margin_rate Marginrate,
    frmdate frmdate
  From Trtran001
  LEFT OUTER JOIN trtran006
  On Deal_Deal_Number = Cdel_Deal_Number
  And Deal_Complete_Date <frmdate
  and deal_record_status not in (10200005,10200006)
  And Cdel_Record_Status Between 10200001 And 10200004
 
    union all
       ----------------------------FUTURE-----------------   
     
   Select 'Futures' DataType,cfut_deal_number DealNumber,
   Pkgreturncursor.Fncgetdescription(Cfut_Company_Code,2) Companycode,    
     Pkgreturncursor.Fncgetdescription(Cfut_Counter_Party,2) Bankcode, 
   (Cfut_Base_Amount) Dealamount,
     Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) Transcode,   
    Pkgreturncursor.Fncgetdescription(Cfut_Init_Code,2) Initcode,
     Pkgreturncursor.Fncgetdescription(Cfut_Hedge_Trade,2)  HedgeTrade,
       cfut_Execute_Date Exedate,
   Pkgreturncursor.Fncgetdescription(Cfut_Base_Currency,2) Currencycode,
     Pkgreturncursor.Fncgetdescription(Cfut_Buy_Sell,2) Buysell,
   Cfut_Exchange_Rate Exerate,
   Cfut_Other_Amount Otheramount,
   Cfut_Forward_Rate Fwdrate,
   Cfut_Spot_Rate Spotrate,
   Cfut_Bank_Margin Marginrate,
    frmdate frmdate
  FROM trtran061
  LEFT OUTER JOIN trtran063
  ON cfut_deal_number = cfrv_deal_number
  And Cfrv_Record_Status Between 10200001 And 10200004
  and cfrv_record_status not in(10200005,10200006)
  and cfut_complete_date <=frmdate

    union all
       -------OPTIONS-----------------   

 Select 'Options' DataType,Copt_Deal_Number DealNumber,
      Pkgreturncursor.Fncgetdescription(Copt_Company_Code,2) Companycode,
      Pkgreturncursor.Fncgetdescription(Copt_Counter_Party,2) Bankcode,
    (Copt_Base_Amount) Dealamount,
      Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Transcode,
      Pkgreturncursor.Fncgetdescription(Copt_Hedge_Trade,2) Hedgetrade, 
      Pkgreturncursor.Fncgetdescription(Copt_Init_Code,2) Initcode,
         Copt_Execute_Date Exedate,
   Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) Currencycode,
     null Buysell,
   Null Exerate,
   Copt_Other_Amount Otheramount,
   null Fwdrate,
   null Spotrate,
   Copt_Margin_rate Marginrate,
      frmdate frmdate
  From Trtran071
  LEFT OUTER JOIN trtran073
  On Copt_Deal_Number = Corv_Deal_Number
  and copt_record_status not in(10200005,10200006)
  And Corv_Record_Status Between 10200001 And 10200004
  and copt_complete_date <=frmdate
  )  where Dealamount>0;
    Goto Process_End;
  End If;
  
  
  If Varreportid='FWDFUTUREOPTION' Then
   numRecords:=2;
  open GenCursor for
  select MainOrder,Company,Location,Businessunit,Profitcentre,Bank,nvl(Amount,0) Amount,
  nvl(pandl,0) pandl,Cashflowdate,  frmDate frmDate from (
  Select  'Forwards' MainOrder,
                Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,1) Company,
                 Pkgreturncursor.Fncgetdescription(Deal_Location_Code,2) Location,
                Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
                Sum(Cdel_Cancel_Amount) Amount,
                sum(cdel_profit_loss) pandl,
                Cdel_Cashflow_Date Cashflowdate FROM trtran001
                LEFT OUTER JOIN trtran006
                ON deal_deal_number = cdel_deal_number
                AND cdel_record_status BETWEEN 10200001 AND 10200004  
                and deal_record_status not in (10200005,10200006)
                AND cdel_cancel_date <frmDate
                and Cdel_Cashflow_Date  >frmDate
                Group By Cdel_Company_Code,Deal_Location_Code,Cdel_Cashflow_Date,Deal_Backup_Deal,Deal_Init_Code,
                deal_counter_party
                Union All
                Select  'Futures' MainOrder,
                Pkgreturncursor.Fncgetdescription(Cfut_Company_Code,1) Company,
                Pkgreturncursor.Fncgetdescription(cfut_location_code,2) Loaction,
                Pkgreturncursor.Fncgetdescription(cfut_backup_deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(cfut_init_code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(cfut_counter_party,2) Bank,
                Sum(Cfrv_Cancel_Amount) Amount,
                sum(cfrv_profit_loss) pandl,
                Cfrv_Execute_Date Cashflowdate 
                 FROM trtran061
                  LEFT OUTER JOIN trtran063
                  ON cfut_deal_number = cfrv_deal_number
                  AND cfrv_record_status BETWEEN 10200001 AND 10200004  
                  And Cfut_Record_Status Not In (10200005,10200006)
                  AND cfrv_execute_date > frmDate
                  GROUP BY cfut_company_code,cfut_counter_party,Cfrv_Execute_Date,
                  Cfut_Backup_Deal,cfut_init_code,cfut_location_code
                union all
                Select 'Options' MainOrder,Pkgreturncursor.Fncgetdescription(Corv_Company_Code,1) Company,
                Pkgreturncursor.Fncgetdescription(copt_location_code,2) Loaction,
                Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(copt_init_code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
                Sum(Corv_Base_Amount) Amount,
                sum(corv_profit_loss) pandl,
               Corv_Settlement_Date Cashflowdate FROM trtran071
                JOIN TRTRAN072A 
                ON COPT_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSM_SERIAL_NUMBER      = 1
                AND COSM_RECORD_STATUS NOT IN(10200005,10200006)
                LEFT OUTER JOIN trtran073
                ON copt_deal_number = corv_deal_number
                AND corv_record_status BETWEEN 10200001 AND 10200004
                JOIN TRTRAN072
                ON COSU_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSU_SERIAL_NUMBER      = COSM_SERIAL_NUMBER
                AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
                and corv_exerCise_date < frmDate
                And Corv_Settlement_Date > Frmdate
                Group By Corv_Company_Code,Corv_Settlement_Date,Copt_Counter_Party,Copt_Location_Code
                ,Copt_Init_Code,Copt_Backup_Deal) Where Amount>0
                ORDER BY Cashflowdate;                
--                Delete From Temp; Commit;
--           insert into temp values(Query_Str,Query_Str);commit;               
                 
          Open Nextcursor For                 
                 Select Company,Location,Bank,Businessunit,Profitcentre,Dealnumber,Canceldate,
                  Canceltype,Amount,Cancelrate,Otheramount,Profitloss,Fwdrate,Spotrate,Marginrate,
                  Cnclreason,Remarks,Cashflowdate,frmDate frmDate from (
                  select  Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,2) Company,
                Pkgreturncursor.Fncgetdescription(Cdel_Location_Code,2) Location,
                  pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
                Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) Businessunit,
                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) Profitcentre,
                Cdel_Deal_Number Dealnumber,
                Cdel_Cancel_Date Canceldate,
                 Pkgreturncursor.Fncgetdescription(Cdel_Cancel_Type,2) Canceltype,
                  Cdel_Cancel_Amount Amount,
                  Cdel_Cancel_Rate Cancelrate,
                  Cdel_Other_Amount Otheramount,
                  Cdel_Profit_Loss Profitloss,
                  b.Cdel_Forward_Rate Fwdrate,
                  b.Cdel_Spot_Rate Spotrate,
                 b.Cdel_Margin_Rate Marginrate,
                  Pkgreturncursor.Fncgetdescription(Cdel_Cancel_Reason,2) Cnclreason,
                  cdel_dealer_remark Remarks,
                Cdel_Cashflow_Date Cashflowdate
            FROM trtran001
                LEFT OUTER JOIN trtran006 b
                ON deal_deal_number = cdel_deal_number
                AND cdel_record_status BETWEEN 10200001 AND 10200004  
                and deal_record_status not in (10200005,10200006)
            union all
            select  Pkgreturncursor.Fncgetdescription(Cfrv_Company_Code,2) Company,
                Pkgreturncursor.Fncgetdescription(cfut_location_code,2) Location,
                pkgreturncursor.fncgetdescription(cfut_counter_party,2) Bank,
                Pkgreturncursor.Fncgetdescription(cfut_backup_deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(cfut_init_code,2) Profitcentre,
                Cfrv_Deal_Number Dealnumber,             
                Cfrv_execute_Date Canceldate,
               null Canceltype,
                  Cfrv_Cancel_Amount Amount,
                  Cfrv_Lot_Price Cancelrate,
                 null Otheramount,
                  Cfrv_Profit_Loss Profitloss,
                  Cfrv_Forward_Rate Fwdrate,
                  Cfrv_Spot_Rate Spotrate,
                  Cfrv_bank_margin Marginrate,
                  Pkgreturncursor.Fncgetdescription(Cfrv_Cancel_Reason,2) Cnclreason,
                  Cfrv_Dealer_Remarks Remarks,
                  Cfrv_Execute_Date Cashflowdate
           FROM trtran061
                  LEFT OUTER JOIN trtran063
                  ON cfut_deal_number = cfrv_deal_number
                  And Cfrv_Record_Status Between 10200001 And 10200004 
                  and cfut_record_status not in (10200005,10200006)
          union all
          select  Pkgreturncursor.Fncgetdescription(Corv_Company_Code,2) Company,
              Pkgreturncursor.Fncgetdescription(copt_location_code,2) Loaction,
                pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
               Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(copt_init_code,2) Profitcentre,
                Corv_Deal_Number Dealnumber,             
                Corv_Exercise_Date Canceldate,
                Pkgreturncursor.Fncgetdescription(Corv_Exercise_Type,2) Canceltype,
                  cOrv_Base_Amount Amount,
                  Corv_Rbi_refRate Cancelrate,
                 Corv_Other_Amount Otheramount,
                  Corv_Profit_Loss Profitloss,
                  Null Fwdrate,
                  Null Spotrate,
                  Null Marginrate,
                  null Cnclreason,
                  Corv_Dealer_Remarks Remarks,
                  Corv_Settlement_Date Cashflowdate
                FROM trtran071
                JOIN TRTRAN072A
                ON COPT_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSM_SERIAL_NUMBER      = 1
                AND COSM_RECORD_STATUS NOT IN(10200005,10200006)
                LEFT OUTER JOIN trtran073
                ON copt_deal_number = corv_deal_number
                AND corv_record_status BETWEEN 10200001 AND 10200004
                JOIN TRTRAN072
                ON COSU_DEAL_NUMBER         = COSM_DEAL_NUMBER
                And Cosu_Serial_Number      = Cosm_Serial_Number
                AND COSU_RECORD_STATUS NOT IN(10200005,10200006));
   
  Goto Process_End;
  End If;
  
  
    If Varreportid='FWDFUTUREOPTIONDTRANGE' Then
   numRecords:=2;
  open GenCursor for
   Select Mainorder,Company,Location,Businessunit,Profitcentre,Bank,Nvl(Amount,0) Amount,
  nvl(pandl,0) pandl,Cashflowdate,  frmDate frmDate,todate todate from (
  Select  'Forwards' MainOrder,
                Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,1) Company,
                 Pkgreturncursor.Fncgetdescription(Deal_Location_Code,2) Location,
                Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
                Sum(Cdel_Cancel_Amount) Amount,
                sum(cdel_profit_loss) pandl,
                Cdel_Cashflow_Date Cashflowdate FROM trtran001
                LEFT OUTER JOIN trtran006
                ON deal_deal_number = cdel_deal_number
                AND cdel_record_status BETWEEN 10200001 AND 10200004  
                and deal_record_status not in (10200005,10200006)                
                and Cdel_Cashflow_Date  between frmDate and todate
                Group By Cdel_Company_Code,Deal_Location_Code,Cdel_Cashflow_Date,Deal_Backup_Deal,Deal_Init_Code,
                deal_counter_party
                Union All
                Select  'Futures' MainOrder,
                Pkgreturncursor.Fncgetdescription(Cfut_Company_Code,1) Company,
                Pkgreturncursor.Fncgetdescription(cfut_location_code,2) Loaction,
                Pkgreturncursor.Fncgetdescription(cfut_backup_deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(cfut_init_code,2) Profitcentre,
                Pkgreturncursor.Fncgetdescription(Cfut_Counter_Party,2) Bank,
                Sum(Cfrv_Cancel_Amount) Amount,
                sum(cfrv_profit_loss) pandl,
                Cfrv_Execute_Date Cashflowdate 
                 FROM trtran061
                  LEFT OUTER JOIN trtran063
                  On Cfut_Deal_Number = Cfrv_Deal_Number
                  And Cfrv_Record_Status Between 10200001 And 10200004  
                  and cfut_record_status not in (10200005,10200006)
                  AND cfrv_execute_date between frmDate and todate 
                  GROUP BY cfut_company_code,cfut_counter_party,Cfrv_Execute_Date,
                  Cfut_Backup_Deal,cfut_init_code,cfut_location_code
                union all
                Select 'Options' MainOrder,Pkgreturncursor.Fncgetdescription(Corv_Company_Code,1) Company,
                Pkgreturncursor.Fncgetdescription(copt_location_code,2) Loaction,
                Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(copt_init_code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
                Sum(Corv_Base_Amount) Amount,
                sum(corv_profit_loss) pandl,
               Corv_Settlement_Date Cashflowdate FROM trtran071
                JOIN TRTRAN072A 
                ON COPT_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSM_SERIAL_NUMBER      = 1
                AND COSM_RECORD_STATUS NOT IN(10200005,10200006)
                JOIN trtran073
                ON copt_deal_number = corv_deal_number
                AND corv_record_status BETWEEN 10200001 AND 10200004
                JOIN TRTRAN072
                ON COSU_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSU_SERIAL_NUMBER      = COSM_SERIAL_NUMBER
                AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
                And Corv_Settlement_Date  between frmDate and todate
                Group By Corv_Company_Code,Corv_Settlement_Date,Copt_Counter_Party,Copt_Location_Code
                ,copt_init_code,Copt_Backup_Deal
                    union all
                Select 'Options' MainOrder,Pkgreturncursor.Fncgetdescription(CoPT_Company_Code,1) Company,
                Pkgreturncursor.Fncgetdescription(copt_location_code,2) Loaction,
                Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(copt_init_code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
                Sum(CoSU_Base_Amount) Amount,
                sum(decode(coPT_premium_status,33200001,ABS(coPT_PREMIUM_AMOUNT),33200002,-1*ABS(coPT_PREMIUM_AMOUNT))) pandl,
                CoSU_Settlement_Date Cashflowdate FROM trtran071
                JOIN TRTRAN072A 
                ON COPT_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSM_RECORD_STATUS NOT IN(10200005,10200006) 
                JOIN TRTRAN072
                ON COSU_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSU_SERIAL_NUMBER      = COSM_SERIAL_NUMBER
                AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
                And CoSU_Settlement_Date  between frmDate and todate 
                AND COPT_CONTRACT_TYPE=32800002
                Group By CoPT_Company_Code,CoSU_Settlement_Date,Copt_Counter_Party,Copt_Location_Code
                ,copt_init_code,Copt_Backup_Deal,coPT_premium_status
                ) where Amount>0
                ORDER BY Cashflowdate;                
--                Delete From Temp; Commit;
--           insert into temp values(Query_Str,Query_Str);commit;               
                 
          Open Nextcursor For                 
                    Select Company,Location,Bank,Businessunit,Profitcentre,Dealnumber,Canceldate,
                  Canceltype,Amount,Cancelrate,Otheramount,Profitloss,Fwdrate,Spotrate,Marginrate,
                  Cnclreason,Remarks,Cashflowdate,frmDate frmDate,todate todate from (
                  select  Pkgreturncursor.Fncgetdescription(Cdel_Company_Code,2) Company,
                Pkgreturncursor.Fncgetdescription(Cdel_Location_Code,2) Location,
                  pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
                Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) Businessunit,
                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) Profitcentre,
                Cdel_Deal_Number Dealnumber,
                Cdel_Cancel_Date Canceldate,
                 Pkgreturncursor.Fncgetdescription(Cdel_Cancel_Type,2) Canceltype,
                  Cdel_Cancel_Amount Amount,
                  Cdel_Cancel_Rate Cancelrate,
                  Cdel_Other_Amount Otheramount,
                  Cdel_Profit_Loss Profitloss,
                  b.Cdel_Forward_Rate Fwdrate,
                  b.Cdel_Spot_Rate Spotrate,
                 b.Cdel_Margin_Rate Marginrate,
                  Pkgreturncursor.Fncgetdescription(Cdel_Cancel_Reason,2) Cnclreason,
                  cdel_dealer_remark Remarks,
                Cdel_Cashflow_Date Cashflowdate
            FROM trtran001
                LEFT OUTER JOIN trtran006 b
                ON deal_deal_number = cdel_deal_number
                AND cdel_record_status BETWEEN 10200001 AND 10200004  
                and deal_record_status not in (10200005,10200006)
            union all
            select  Pkgreturncursor.Fncgetdescription(Cfrv_Company_Code,2) Company,
                Pkgreturncursor.Fncgetdescription(cfut_location_code,2) Location,
                pkgreturncursor.fncgetdescription(cfut_counter_party,2) Bank,
                Pkgreturncursor.Fncgetdescription(cfut_backup_deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(cfut_init_code,2) Profitcentre,
                Cfrv_Deal_Number Dealnumber,             
                Cfrv_execute_Date Canceldate,
               null Canceltype,
                  Cfrv_Cancel_Amount Amount,
                  Cfrv_Lot_Price Cancelrate,
                 null Otheramount,
                  Cfrv_Profit_Loss Profitloss,
                  Cfrv_Forward_Rate Fwdrate,
                  Cfrv_Spot_Rate Spotrate,
                  Cfrv_bank_margin Marginrate,
                  Pkgreturncursor.Fncgetdescription(Cfrv_Cancel_Reason,2) Cnclreason,
                  Cfrv_Dealer_Remarks Remarks,
                  Cfrv_Execute_Date Cashflowdate
           FROM trtran061
                  LEFT OUTER JOIN trtran063
                  ON cfut_deal_number = cfrv_deal_number
                  AND cfrv_record_status BETWEEN 10200001 AND 10200004 
          union all
          select  Pkgreturncursor.Fncgetdescription(Corv_Company_Code,2) Company,
              Pkgreturncursor.Fncgetdescription(copt_location_code,2) Loaction,
                pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
               Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(copt_init_code,2) Profitcentre,
                Corv_Deal_Number Dealnumber,             
                Corv_Exercise_Date Canceldate,
                Pkgreturncursor.Fncgetdescription(Corv_Exercise_Type,2) Canceltype,
                  cOrv_Base_Amount Amount,
                  Corv_Rbi_refRate Cancelrate,
                 Corv_Other_Amount Otheramount,
                  Corv_Profit_Loss Profitloss,
                  Null Fwdrate,
                  Null Spotrate,
                  Null Marginrate,
                  null Cnclreason,
                  Corv_Dealer_Remarks Remarks,
                  Corv_Settlement_Date Cashflowdate
                FROM trtran071
                JOIN TRTRAN072A
                ON COPT_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSM_SERIAL_NUMBER      = 1
                AND COSM_RECORD_STATUS NOT IN(10200005,10200006)
              JOIN trtran073
                ON copt_deal_number = corv_deal_number
                AND corv_record_status BETWEEN 10200001 AND 10200004
                JOIN TRTRAN072
                ON COSU_DEAL_NUMBER         = COSM_DEAL_NUMBER
                And Cosu_Serial_Number      = Cosm_Serial_Number
                AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
                 union all
                Select Pkgreturncursor.Fncgetdescription(CoPT_Company_Code,1) Company,
                Pkgreturncursor.Fncgetdescription(copt_location_code,2) Loaction,
                Pkgreturncursor.Fncgetdescription(Copt_Backup_Deal,2) Businessunit,
                Pkgreturncursor.Fncgetdescription(copt_init_code,2) Profitcentre,
                pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
                Copt_Deal_Number Dealnumber,             
                Copt_Execute_Date Canceldate,
                 null Canceltype,
                (CoSU_Base_Amount) Amount,           
                  null Cancelrate,
                  Cosu_Other_Amount Otheramount,
                  decode(coPT_premium_status,33200001,ABS(coPT_PREMIUM_AMOUNT),33200002,-1*ABS(coPT_PREMIUM_AMOUNT)) Profitloss,
                  Null Fwdrate,
                  Null Spotrate,
                  Null Marginrate,
                  null Cnclreason,
                  Copt_Dealer_Remark Remarks,
                  Cosu_Settlement_Date Cashflowdate
                   FROM trtran071
                JOIN TRTRAN072A 
                ON COPT_DEAL_NUMBER         = COSM_DEAL_NUMBER
                and COSM_RECORD_STATUS NOT IN(10200005,10200006) 
                JOIN TRTRAN072
                ON COSU_DEAL_NUMBER         = COSM_DEAL_NUMBER
                AND COSU_SERIAL_NUMBER      = COSM_SERIAL_NUMBER
                AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
                AND COPT_CONTRACT_TYPE=32800002
                );
                
  Goto Process_End;
  End If;
  
      If Varreportid = 'REALIZEDPROFITLOSSNEW' Then
 Query_Str :=' Select Dealno,Exdate,Buysell,Basecrncy,Othercrncy,Bkname,Backupdeal,Initcode,Location,HEDGETRADE,SWAPOUTRIGHT,
DEALTYPE,Exrate,Baseamt,Lcrate,Amtlcl,AMTLCL AS AMOUNTLOCAL,Otheramt,Cancelinr,Cancelrate,Washrate,Cancellocalrate,
Cancelotheramt,Cancelamount,Dealerremarks,Canceldate,Maturityfrm,Maturitydate,
Profitloss,Profit,Loss,Newprofitloss,Company,CompanyCode,Systemdate,Canceltype,CompanyName AS COMPLONGDESC,
CompanyName,CashFlowDate,RecordStatus,To_Date('||''''||frmDate||''''||') As Fromdate,
To_Date('||''''||toDate||''''||') As Todate
    ' || varGroupField || ' 
 from (
 select CDEL_DEAL_NUMBER as DEALNO,DEAL_EXECUTE_DATE AS EXDATE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY ,2) AS BKNAME,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL ,2) AS BACKUPDEAL,DEAL_BACKUP_DEAL TRANSCODE,
                        pkgreturncursor.fncgetdescription(DEAL_INIT_CODE ,2) AS INITCODE,
                        pkgreturncursor.fncgetdescription(DEAL_LOCATION_CODE ,2) AS LOCATION,
                        pkgreturncursor.fncgetdescription(deal_hedge_trade,2) as HEDGETRADE,
                          pkgreturncursor.fncgetdescription(deal_swap_outright,2) as SWAPOUTRIGHT,
                          pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,2) AS DEALTYPE,
                        DEAL_EXCHANGE_RATE AS EXRATE,
                        --DEAL_BASE_AMOUNT AS BASEAMT,
                        pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) as BASEAMT,
                        DEAL_LOCAL_RATE as LCRATE,
                        decode(DEAL_OTHER_CURRENCY,30400003,DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL) as AMTLCL,
                        --DEAL_OTHER_AMOUNT  AS OTHERAMT,
                        (pkgreturnreport.getTradeOutstanding(deal_deal_number,'||''''||frmDate||''''||','||''''||frmDate||''''||',cdel_cancel_date,cdel_reverse_serial) * deal_exchange_rate)  as OTHERAMT,
                        CDEL_CANCEL_INR as CancelInr,';
                        Query_Str1:='CDEL_CANCEL_RATE  as CancelRate,
                        (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
                        --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0))) as WashRate,
                        CDEL_LOCAL_RATE  as CancelLocalRate,
                        CDEL_OTHER_AMOUNT as CancelOtherAmt,CDEL_CANCEL_AMOUNT as CancelAmount,
                        CDEL_DEALER_REMARK as DealerRemarks,CDEL_CANCEL_DATE as CancelDate,
                        DEAL_MATURITY_FROM as MATURITYFRM,DEAL_MATURITY_DATE AS MATURITYDATE,
                        round(decode(CDEL_LOCAL_RATE,0,cdel_profit_loss,(cdel_profit_loss / CDEL_LOCAL_RATE)),4) as ProfitLoss,
                        (case when cdel_profit_loss > 0 then cdel_profit_loss else 0 end) as Profit,
                        (abs(case when CDEL_PROFIT_LOSS < 0 then CDEL_PROFIT_LOSS else 0 end)) as Loss,
                CDEL_PROFIT_LOSS as NewProfitLoss,
                        pkgreturncursor.fncGetdescription(DEAL_COMPANY_CODE,2) as company,
                        DEAL_COMPANY_CODE as CompanyCode,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        pkgreturncursor.fncgetdescription(CDEL_CANCEL_TYPE,2) as CancelType,
                         pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName ,
                        cdel_cashflow_date CashFlowDate ,
                        cdel_record_status RecordStatus
                from    trtran001,trtran006
          where   cdel_deal_number  = deal_deal_number 
                  --      and cdel_deal_serial  = deal_serial_number
                    --    and CDEL_CANCEL_TYPE= 27000001  
                        and deal_RECORD_STATUS not in(10200005,10200006)
                        and CDEL_RECORD_STATUS not in(10200005,10200006)
                        and cdel_deal_number not in(select LMOD_REFERENCE_NUMBER from trtran009 where LMOD_RECORD_STATUS in(10200001,10200002,10200003,10200004) )';   
                        Query_Str2:='union all
                        Select  Cfut_Deal_Number As Dealno,Cfut_Execute_Date As Exedate, 
                          Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,1) As Buysell,
                          Pkgreturncursor.Fncgetdescription(Cfut_Base_Currency,2) As Basecrncy,
                          Pkgreturncursor.Fncgetdescription(Cfut_Other_Currency,2) As Othercrncy,
                          Pkgreturncursor.Fncgetdescription(Cfut_Local_Bank ,2) As Bkname,
                          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal ,2) As Backupdeal, Cfut_Backup_Deal TRANSCODE,
                          Pkgreturncursor.Fncgetdescription(Cfut_Init_Code ,2) As Initcode,
                          Pkgreturncursor.Fncgetdescription(Cfut_Location_Code ,2) As Location,
                          Pkgreturncursor.Fncgetdescription(Cfut_Hedge_Trade,2) As Hedgetrade,
                          Null As Swapoutright,
                          null AS DEALTYPE,
                          CFUT_EXCHANGE_RATE AS EXRATE,
                            --DEAL_BASE_AMOUNT AS BASEAMT,
                         (CFRV_REVERSE_LOT*1000) as BASEAMT,
                          CFRV_LOT_PRICE As Lcrate,
                          (CFUT_BASE_AMOUNT*1000)*CFRV_LOT_PRICE as AMTLCL,
                          --DEAL_OTHER_AMOUNT  AS OTHERAMT,
                         null  As Otheramt,
                           Null As Cancelinr,
                           Null  As Cancelrate,
                           null as WashRate,
                           --(decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,'||''''||frmDate||''''||',deal_maturity_date),null,0))) as WashRate,
                           null  As Cancellocalrate,
                           null As Cancelotheramt,Cfrv_Cancel_Amount As Cancelamount,
                           Cfrv_Dealer_Remarks As Dealerremarks,Cfrv_execute_Date As Canceldate,
                           Cfut_Maturity_Date As Maturityfrm,Cfut_Maturity_Date As Maturitydate,
                           cfrv_profit_loss As Profitloss,
                           (Case When Cfrv_Profit_Loss > 0 Then Cfrv_Profit_Loss Else 0 End) As Profit,
                           (Abs(Case When Cfrv_Profit_Loss < 0 Then Cfrv_Profit_Loss Else 0 End)) As Loss,
                           Cfrv_Profit_Loss As Newprofitloss,
                           Pkgreturncursor.Fncgetdescription(Cfut_Company_Code,2) As Company,
                           Cfut_Company_Code As CompanyCode,                          
                           Pkgreturnreport.Getsystemdate() As Systemdate,
                           pkgreturncursor.fncgetdescription(Cfrv_CANCEL_reason,2) as CancelType,
                           Pkgreturnreport.Getcompanyname(' ||''''|| varUserID ||''''||' ) As Companyname ,
                           Cfrv_Execute_Date Cashflowdate,
                           cfrv_record_status RecordStatus                             
                              From Trtran061,Trtran063  Where Cfut_Deal_Number = Cfrv_Deal_Number)
                              where RecordStatus not in (10200005,10200006) '|| finalcondition;
                         Delete From Temp;Commit;
    Insert Into Temp Values(Query_Str,Query_Str1);Commit;
    insert into temp values (Query_Str2,finalcondition);commit;
    open GenCursor for Query_Str||Query_Str1||Query_Str2;
    --order by DEAL_EXECUTE_DATE,cdel_deal_number,cdel_reverse_serial';
   
    GoTo Process_End;  
  end if;  
  
   If Varreportid ='CURRFUTUREREALIZEDPANDL1' Then
  Delete From Trsystem978;Commit;
  insert into trsystem978 values(toDate);commit;
Query_Str :='  with tabCancel as

                    (select cdel_deal_number DealNumber, cdel_cancel_date CancelDate, cdel_cancel_rate CancelRate,
                    cdel_cancel_amount CancleAmount, cdel_profit_loss RealizedPandL, cdel_local_rate WashRate,
                    (cdel_cancel_amount * cdel_cancel_rate) as CancleAmtInr
                    From Trtran006
                    Where Cdel_Cancel_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cdel_record_status not in (10200005,10200006)
                    union all
                    select cfrv_deal_number DealNumber, cfrv_execute_date CancelDate, cfrv_lot_price CancelRate,
                    cfrv_cancel_amount CancleAmount, cfrv_profit_loss RealizedPandL, cfrv_lot_price WashRate,
                     (cfrv_cancel_amount * cfrv_lot_price) as CancleAmtInr
                    from trtran063
                    Where Cfrv_Execute_Date Between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                    and cfrv_record_status not in (10200005,10200006))

                    select a.DEALNUMBER,pkgreturncursor.fncgetdescription(DealType,2) DealType,DEALREF AS Remark,
                    BANKNAME as CounterParty,DEALREF as ReferenceNum, COMPANYNAME as Company,a.CompanyCode,
                    USERID,TRANS as BackupDeal,Currency,BuySell, pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,
                    DEALDATE as ExecuteDate,EXRATE as StrickRate,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,

                    b.Washrate As Washrate,
                    round(b.CANCELRATE,6) cancelrate, b.CANCELDATE,b.RealizedPandL as RealizedPandL,b.CANCLeAMOUNT as CancleAmount,b.CancleAmtInr,
                    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter, RecordStatus,HedgeTrade,Maturity as MaturityDate,
                    TO_DATE('||''''||frmDate||''''||') as FromDate,
                   to_date('||''''||toDate||''''||') as ToDate
                   ' || varGroupField || '
                    from vewForwardFuture a , tabCancel b
                    where a.DealNumber = b.DealNumber
                    And Status Not In (10200005,10200006)
                   -- CANCELDATE between '||''''||frmDate||''''||' And '||''''||todate||''''||'
                  --  Substr(finalcondition,decode(instr(finalcondition,'|| 'Canceldate' ||'),0,0,19),length(finalcondition))
                '||substr(finalcondition,57)||'';
               delete from temp; commit;
               Insert Into Temp Values(Query_Str,Finalcondition);Commit;
    Open Gencursor For Query_Str || 'order by DealNumber,CancelDate';
    Goto Process_End;
  End If;
  
  if (varReportID = 'DEALTRACKER1')  then
Query_Str :=' select UserId, Remark,DealType,status,deal_execute_date as ExecuteDate,deal_deal_number as DealNumber,deal_COMPANY_CODE1 as  CompanyCode,
               deal_COUNTER_PARTY1 as CounterParty,deal_BASE_CURRENCY1 as BaseCurrency,DEAL_BUY_SELL1  as BuySell1,BaseAmount,AmtInr,
               deal_maturity_date as MaturityDate,Rate,BookingRate,ProductQty,BacKupDeal,SystemDate,  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
               FromDate,ToDate,DEAL_OTHER_CURRENCY1 as OtherCurrency,
               DEAL_RECORD_STATUS,DEAL_HEDGE_TRADE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,
               Case DEAL_BUY_SELL1 when ''Buy'' then 25300001
               when ''Sell'' then 25300002
               end as BuySell, CDEL_LOCAL_RATE as WashRate,DEAL_INIT_CODE1 as UserCode,
                pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2) as initcode,PandL,HedgeTrade,statusorder,BankReference
              ' || varGroupField || '
 from      
              ( select  ''Future '' dealType, ''booked'' status, 1 as statusorder,
                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
                        cfut_execute_date as deal_execute_date,
                        cfut_deal_number as deal_deal_number,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1, 
                        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,';
       Query_Str1 :='   pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) as DEAL_BUY_SELL1,
                       CFUT_BASE_AMOUNT as BaseAmount,CFUT_BASE_AMOUNT*cfut_lot_price as AmtInr,
                       cfut_maturity_date as deal_maturity_date,  CFUT_EXCHANGE_RATE as  Rate,CFUT_EXCHANGE_RATE as BookingRate, CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                       TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,CFUT_BUY_SELL as Buysell,
                        pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
                        CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        1  As  Cdel_Local_Rate,  0 as  PandL,CFUT_USER_REFERENCE as BankReference
                         from  trtran061   
                  where  cfut_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                        and cfut_record_status not in (10200005,10200006)
      union all 
                   select  ''Future '' dealType,
                         ''canceled'' status,2 as statusorder,
                        CFUT_USER_ID as UserId, CFUT_DEALER_REMARK as Remark,
                        CFRV_EXECUTE_DATE as deal_execute_date,
                        cfut_deal_number as deal_deal_number,
                        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,2) as deal_COMPANY_CODE1,'; 
         Query_Str2 :=' pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) as deal_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as deal_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        decode (CFUT_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1,
                       (CFRV_REVERSE_LOT*1000) as BaseAmount,(CFUT_BASE_AMOUNT*1000)*CFRV_LOT_PRICE as AmtInr,
                       cfut_maturity_date as deal_maturity_date,  CFRV_LOT_PRICE as  Rate,CFUT_EXCHANGE_RATE as BookingRate,CFUT_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                      (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,'||GConst.UTILFUTUREDEAL||', '||GConst.AMOUNTFCY||','||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate,
                        cfut_RECORD_STATUS as DEAL_RECORD_STATUS,CFUT_COMPANY_CODE as DEAL_COMPANY_CODE,CFUT_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        CFUT_BASE_CURRENCY as DEAL_BASE_CURRENCY,decode (CFUT_BUY_SELL,25300001,25300002,25300001) as Buysell, --0 as CDEL_LOCAL_RATE,
                         pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2)as DEAL_INIT_CODE1,
                         CFUT_INIT_CODE as DEAL_INIT_CODE,decode(cfut_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, CFUT_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        1 CDEL_LOCAL_RATE, cfrv_profit_loss PandL,CFUT_USER_REFERENCE as BankReference
                         from  trtran061,trtran063   
                  where    cfut_deal_number=CFRV_DEAL_NUMBER
                        and cfrv_RECORD_STATUS not in (10200005,10200006) 
                        and  cfut_record_status not in (10200005,10200006)
                        and (CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                        or   CFRV_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
                      
          UNION ALL
                      
                select ''Forward '' dealType, ''booked'' status,1 as statusorder,
                        DEAL_USER_ID as UserId,
                        DEAL_DEALER_REMARKS as Remark,';
          Query_Str3 :='DEAL_EXECUTE_DATE as  DEAL_EXECUTE_DATE, 
                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) as DEAL_BUY_SELL1,
                        DEAL_BASE_AMOUNT as BaseAmount,DEAL_BASE_AMOUNT*DEAL_EXCHANGE_RATE as AmtInr,
                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
                        DEAL_EXCHANGE_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
                       pkgreturnreport.GetSystemDate() as SystemDate,
                       TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate||''''||') as ToDate, 
                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,DEAL_BUY_SELL as Buysell ,
                       pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal'', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade, DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                       1 as CDEL_LOCAL_RATE,
                      0 PandL,
                      DEAL_USER_REFERENCE as BankReference
                  from  trtran001
                   where  DEAL_EXECUTE_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                         and  deal_record_status not in (10200005,10200006)
        union all
           select ''Forward'' dealType, 
                       case CDEL_CANCEL_TYPE when 27000001 then ''Cancelled''
                        when 27000002 then ''Delivery'' end as status, 2 as statusorder,';
        Query_Str4 :='  DEAL_USER_ID as UserId,
                        DEAL_DEALER_REMARKS as Remark,
                        CDEL_CANCEL_DATE as  DEAL_EXECUTE_DATE, 
                        DEAL_DEAL_NUMBER as DEAL_DEAL_NUMBER,
                        pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as DEAL_COMPANY_CODE1,
                        pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as DEAL_COUNTER_PARTY1,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as DEAL_BASE_CURRENCY1,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as DEAL_OTHER_CURRENCY1,
                       decode (deal_BUY_SELL,25300001,''Sell'',''Buy'') as DEAL_BUY_SELL1,
                        CDEL_CANCEL_AMOUNT as BaseAmount,CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE as AmtInr,
                        DEAL_MATURITY_DATE as DEAL_MATURITY_DATE,
                        CDEL_CANCEL_RATE as  Rate,DEAL_EXCHANGE_RATE as BookingRate,DEAL_HEDGE_TRADE as DEAL_HEDGE_TRADE,
                       (pkgforexprocess.fncGetOutstanding(DEAL_DEAL_NUMBER, 1,1, 1,'||''''||frmDate||''''||')) as ProductQty,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) BacKupDeal,
                        pkgreturnreport.GetSystemDate() as SystemDate,
                        TO_DATE('||''''||frmDate||''''||') as FromDate,
                        to_date('||''''||toDate|| ''''||') as ToDate,  
                        DEAL_RECORD_STATUS as DEAL_RECORD_STATUS, DEAL_COMPANY_CODE as DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY as DEAL_COUNTER_PARTY,
                        DEAL_BASE_CURRENCY as DEAL_BASE_CURRENCY,decode (deal_BUY_SELL,25300001,25300002,25300001) as Buysell ,pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,2)as DEAL_INIT_CODE1,
                        DEAL_INIT_CODE as DEAL_INIT_CODE,decode(deal_hedge_trade, 26000001, ''Hedge Deal '', 26000002,''Trade Deal'',26000003,''FT Deal'') HedgeTrade,DEAL_BACKUP_DEAL as DEAL_BACKUP_DEAL,
                        CDEL_LOCAL_RATE as CDEL_LOCAL_RATE,cdel_profit_loss PandL,
                        DEAL_USER_REFERENCE as BankReference
                  from  trtran001,trtran006
                   where  deal_deal_number=cdel_deal_number
                       and (CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||'
                       or CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||toDate||''''||')
                       and CDEL_RECORD_STATUS not in (10200005,10200006))
               where  DEAL_RECORD_STATUS not in (10200005,10200006)    
                      '||substr(finalcondition,64)||'';
              -- Query_Str :=Query_Str ||Query_Str1 ||Query_Str2||Query_Str3||Query_Str4|| 'order by deal_deal_number ';
               delete from temp;commit;
               Insert Into Temp Values(Query_Str,Query_Str1);Commit;  
               Insert Into Temp Values(Query_Str2,Query_Str3);Commit; 
               insert into temp values(Query_Str4,finalcondition);commit; 
               
    OPEN GenCursor for Query_Str||Query_Str1||Query_Str2||Query_Str3||Query_Str4 ||'order by deal_deal_number,statusorder';
    Goto Process_End;   
  End If;
  
  if varReportID = 'OPTHDGDEALREALIZED1' then
Query_Str := '
                 select COPT_DEAL_NUMBER As DealNumber,
                 COPT_COMPANY_CODE AS COMPANYCODE,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,1) AS COMPLONGDESC,
                 pkgreturncursor.fncgetdescription( COPT_COMPANY_CODE,2) AS COMPSHORTDESC,
                 COPT_DEAL_NUMBER AS DEALNO,COPT_EXECUTE_DATE AS EXDATE,COPT_SERIAL_NUMBER AS SERIALNUMBER,
                 pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY ,2)AS BKNAME,
                 COPT_COUNTER_PARTY as counterpartycode, COPT_COMPANY_CODE as COMPANYCODE,
                 (COPT_BASE_AMOUNT/1000000) AS BASEAMT,COPT_PREMIUM_EXRATE AS EXRATE,
                 COPT_MATURITY_DATE AS MaturityDate,
                 COPT_EXPIRY_DATE AS FINALSETTLEMENT,
                  (select round( avg(cosu_strike_rate),4) from trtran072
                   where cosu_deal_number=copt_deal_number
                    and cosu_buy_sell=25300001
                    and cosu_option_type=32400001) "BC",
                   (select avg(cosu_strike_rate) from trtran072
                    where cosu_deal_number=copt_deal_number
                      and cosu_buy_sell=25300001
                      and cosu_option_type=32400002) "BP",
                   (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400002) "SP",
                    (select avg(cosu_strike_rate) from trtran072
                      where cosu_deal_number=copt_deal_number
                        and cosu_buy_sell=25300002
                        and cosu_option_type=32400001) "SC",
                  COPT_PREMIUM_VALUEDATE AS PAIDDATE,
                  COPT_USER_REFERENCE AS USERREFNO,';
     QUERY_STR1 := 'pkgreturncursor.fncgetdescription(COPT_REFRATE_CODE,2) RefrateCode,
                  decode(sign(corv_base_amount - copt_base_amount), -1,
                  (copt_premium_amount / copt_base_amount) * corv_base_amount,
                  copt_PREMIUM_AMOUNT) AS PremiumAmount, copt_PREMIUM_LOCAL AS PremiumLocal,
                  substr(pkgreturncursor.fncgetdescription(COpt_PREMIUM_STATUS,2),1,1) as status,
                  corv_exercise_date cancelDate,
                  --corv_exercise_rate cancelRate,
                  CORV_BASE_AMOUNT as CancelAmount,
                 nvl(decode(CORV_EXERCISE_TYPE,33000003,CORV_PREMIUM_EXRATE,33000001,CORV_RBI_REFRATE,CORV_EXERCISE_RATE),0) cancelRate,
                 nvl(corv_premium_amount,0) profitloss,
                 /*(corv_profit_loss) as profitloss,*/
                nvl( Pkgforexprocess.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER,CORV_SERIAL_NUMBER),0) as NetPandL,

                  CORV_PANDL_USD as GainLossUsd,
                --  decode(copt_process_complete,12400002,''Open'',12400001,''Close'') as openclose,
                case
                   when CORV_EXERCISE_DATE < COPT_EXPIRY_DATE THEN ''Cancel''
                   ELSE decode(copt_process_complete,12400002,''Open'',12400001,''Close'')  END openclose,
                   pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) InitCode,
                   pkgreturncursor.fncgetdescription( COPT_BASE_CURRENCY,2) Basecurrency,
                    pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2)Othercurrency,
                     pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) BackupDeal,
           Decode (copt_Record_Status,10200001,''Unconfm'',10200003,''2ndConfm'',10200002,''1stConfm'',10200004,''Updated'') RecordStatus,
                 decode(copt_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade,
                  pkgreturnreport.GetSystemDate() as SystemDate,
                   pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                    pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                   TO_DATE('||''''||FRMDATE||''''||') as  FromDate,
                   TO_DATE('||''''||TODATE||''''||' ) as ToDate
                   ' || varGroupField || '
          from trtran071,trtran073
          where  copt_deal_number=corv_deal_number
               and copt_record_status not in(10200005,10200006)
               and corv_record_status not in(10200005,10200006)
                    '||FINALCONDITION||'
            order by COPT_DEAL_NUMBER,copt_execute_date';
            delete from temp;commit;
            insert into TEMP values(QUERY_STR ,QUERY_STR1);
            commit;
            open GENCURSOR for QUERY_STR||QUERY_STR1 ;
 GOTO PROCESS_END;
 End If;
  if Varreportid='FWDRATEAGREEMENT1' then
    Open Gencursor For
             select 
                      pkgreturncursor.fncgetdescription(IFRA_COMPANY_CODE,1) as Company,
                      pkgreturncursor.fncgetdescription(IFRA_LOCATION_CODE,1) as Location1,
                      pkgreturncursor.fncgetdescription(IFRA_PORTFOLIO,2) as Portfolio,
                      pkgreturncursor.fncgetdescription(IFRA_SUB_PORTFOLIO,2) as SubPortfolio,
                      IFRA_FRA_NUMBER as FRANumber,
                      IFRA_EXECUTE_DATE as ExecuteDate,
                      pkgreturncursor.fncgetdescription(IFRA_BUY_SELL,2) as BuySell,
                      pkgreturncursor.fncgetdescription(IFRA_COUNTER_PARTY,2) as CounterParty,
                      pkgreturncursor.fncgetdescription(IFRA_CURRENCY_CODE,2) as Currency,
                      IFRA_NOTIONAL_AMOUNT as NotionalAmount,
                      IFRA_NOTIONAL_AMOUNT-nvl((select sum(IFRS_NOTIONAL_AMOUNT) from trtran090a where IFRA_FRA_NUMBER=IFRS_FRA_NUMBER and ifra_record_status not in(10200005,10200006) ),0) AS OutstandingAmt,
                      pkgreturncursor.fncgetdescription(IFRA_STERLING_PERIOD,2) as SterlingPeriod,
                      IFRA_INTEREST_STARTDATE as InterestStartDate,
                      IFRA_INTEREST_ENDDATE as InterestEndDate,
                      IFRA_FRA_RATE as FRARate,
                      pkgreturncursor.fncgetdescription(IFRA_INTEREST_DAYSTYPE,2) as InterestDaystype,
                      pkgreturncursor.fncgetdescription(IFRA_RATE_TYPE,2) as  RateType,
                      --IFRA_PROCESS_COMPLETE as  Status,
                      --IFRA_COMPLETE_DATE as CompleteDate,
                      IFRA_USER_REFERENCE as UserReference,
                      IFRA_USER_REMARKS as UserRemarks,
                      IFRA_BASE_RATE as BaseRate,
                      IFRA_SPREAD as SpreadRate,
                      IFRA_EXPIRY_DATE as ExpiryDate,
                      frmDate as AsonDate,
                      toDate as ToDate,
                      pkgreturncursor.fncgetdescription(IFRA_Hedge_Trade,2)As HedgeOrTrade 
                  from trtran090
                  where ((IFRA_PROCESS_COMPLETE = 12400001  and IFRA_complete_date > frmDate) or IFRA_PROCESS_COMPLETE = 12400002)
                  and IFRA_EXECUTE_DATE <=frmDate
                  AND ifra_record_status NOT IN(10200005,10200006);
   Goto Process_End;  
 End If;
 if Varreportid='FWDRATESETTLEMENT1' then
    Open Gencursor For
    SELECT 
                      pkgreturncursor.fncgetdescription(IFRA_COMPANY_CODE,1) as Company,                     
                      pkgreturncursor.fncgetdescription(IFRA_PORTFOLIO,2) as Portfolio,
                      pkgreturncursor.fncgetdescription(IFRA_SUB_PORTFOLIO,2) as SubPortfolio,                     
                      IFRA_EXECUTE_DATE as ExecuteDate,
                      pkgreturncursor.fncgetdescription(IFRA_BUY_SELL,2) as BuySell,
                      pkgreturncursor.fncgetdescription(IFRA_COUNTER_PARTY,2) as CounterParty,
                      pkgreturncursor.fncgetdescription(IFRA_CURRENCY_CODE,2) as Currency,
                      IFRA_NOTIONAL_AMOUNT as BaseAmt,
                      IFRS_FRA_NUMBER AS FwdRateSettleRefNo,
                      IFRS_SERIAL_NUMBER as SerialNo,
                      IFRS_SETTLEMENT_DATE as SettlementDate,
                      IFRS_FRA_REFRATE as RefRate,
                      IFRS_BASE_RATE as BaseRate,
                      IFRS_SPREAD as SpreadRate,
                      IFRS_CONVERSION_RATE as ConversionRate,
                      IFRS_PAYOFF_LOCALAMOUNT as PayOffLocalAmt,
                      IFRS_PAYOFF_AMOUNT as PayOffAmt,
                      pkgreturncursor.fncgetdescription(IFRS_PAYOFF_TYPE,2) as PayOffType,
                      IFRS_PAYOFF_DATE as PayOffDate,
                      IFRS_NOTIONAL_AMOUNT as SettlementAmt,
                      IFRS_CONFIRM_DATE as ConfirmDate,
                      IFRS_BANK_REFERENCE as BankRef,
                      frmDate as AsonDate,
                      toDate as ToDate,
                      pkgreturncursor.fncgetdescription(IFRS_Hedge_Trade,2)As HedgeOrTrade                       
                      from trtran090A, trtran090                      
                       where IFRA_FRA_NUMBER=IFRS_FRA_NUMBER
                       and IFRS_SETTLEMENT_DATE<=frmDate
                       and ifra_record_status not in(10200005,10200006)                       
                      and ifrs_record_status not in(10200005,10200006);
   Goto Process_End;  
 End If;
 if Varreportid='INTERESTRATESWAP1' then
    Open Gencursor For
        select
                pkgreturncursor.fncgetdescription(IIRS_COMPANY_CODE,1) as Company,
                pkgreturncursor.fncgetdescription(IIRS_LOCATION_CODE,2) as Location1,
                pkgreturncursor.fncgetdescription(IIRS_PORTFOLIO,2) as PortFolio,
                pkgreturncursor.fncgetdescription(IIRS_SUB_PORTFOLIO,2) as SubPortfolio,
                IIRS_IRS_NUMBER as RefNo,
                IIRS_EXECUTE_DATE as ExecuteDate,
                pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) as Bank, 
                IIRS_NOTIONAL_AMOUNT as Amount,
                IIRS_USER_REFERENCE as UserRef,
                IIRS_USER_REMARKS as UserRemarks,
                IIRS_EXPIRY_DATE as ExpiryDate,
                IIRS_START_DATE as StartDate,
                IIRS_TENOR_NUMBER ||'-'||pkgreturncursor.fncgetdescription(IIRS_TENOR_TYPE,2)as Tenor,
                IIRS_CONFIRM_DATE as ConfirmDate,
                IIRS_BANK_REFERENCE as BankRef,
                IIRS_BO_REMARK as BoRemark,
                frmDate as AsonDate,
                toDate as ToDate,
                pkgreturncursor.fncgetdescription(IIRS_HEDGE_TRADE,2) AS HedgeOrTrade
        from trtran091
        where ((IIRS_PROCESS_COMPLETE = 12400001  and IIRS_complete_date > frmDate) or IIRS_PROCESS_COMPLETE = 12400002)
        and IIRS_EXECUTE_DATE<=frmDate
        and iirs_record_status not in(10200005,10200006);
   Goto Process_End;  
 End If;
 IF Varreportid='IRSVALUATIONRPT1' THEN
  DELETE FROM temp;COMMIT;
  insert into temp values('chandra',123); commit;
Query_str :=  ' WITH Caldata AS
(SELECT  pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,
  IIRM_IRS_NUMBER IRSNumber,
  IIRM_SERIAL_NUMBER SerialNumber,
  IIRM_INTSTART_DATE InterestStartDate,
  IIRM_INTEND_DATE IntEndDate,
  IIRM_SETTLEMENT_DATE PaymentDate,
  IIRM_INTFIXING_DATE FixingDate,
         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
--  (IIRM_INTEND_DATE-IIRM_INTSTART_DATE) InterestDays,
(case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            when IIRL_INTEREST_DAYSTYPE  in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
  pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
  0 FloatingRate,
  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell, ';
Query_Str1 := ' pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
         pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
        IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
        nvl((case when IIRL_INT_TYPE=80300001 then 
                (IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100
             when IIRL_INT_TYPE=80300002 then 
                (pkgforexprocess.fncGetIRSRate('||''''||frmDate||''''||',IIRM_INTEND_DATE,IIRL_RATE_TYPE)
                +(IIRL_SPREAD/10000)) end),0) FinalRate,
      c.iirs_notional_amount NotionalAmount,
      '||''''||frmDate||''''||' as AsonDate,
      '||''''||toDate||''''||'  as ToDate,
      c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
      C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
      c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE, IIRM_INTEREST_AMOUNT InterestAmount ' ;
Query_Str2 := 'from trtran091B inner join trtran091a b
ON IIRM_IRS_NUMBER=iirl_irs_number
and iirm_serial_number= iirl_serial_number
inner join trtran091 c
ON iirl_irs_number= iirs_irs_number) 

SELECT Company,IRSNumber,SerialNumber,InterestStartDate,PaymentDate,InterestDays,
InterestDaysType,RateType,FloatingRate,BuySell,InterestType,
InterestCharge,BaseRate,Spread,FinalRate,NotionalAmount,
round(InterestAmount,2) InterestAmount,
IntEndDate,FixingDate,AsonDate,ToDate
FROM Caldata where IIRS_EXECUTE_DATE <= '||''''||frmDate||''''||'';
 
  INSERT INTO temp VALUES(Query_Str,'chandra');commit ;
   INSERT INTO temp VALUES(Query_Str1,'chandra1');commit ;
 INSERT INTO temp VALUES(Query_Str2,'chandra2');commit ;

insert into temp values (finalCondition,'chandra3');commit;


    OPEN Gencursor FOR Query_Str || Query_Str1 || Query_Str2 ||finalCondition|| ' order by InterestStartDate,IRSNumber';

    Goto Process_End;  
 END IF;
 
 IF Varreportid='ACCRUALCASHFLOWNEW1' THEN
    Open Gencursor For        
         with CaldataFixed AS 
          (SELECT pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
                 IIRM_INTEND_DATE IntEndDate, IIRM_SETTLEMENT_DATE PaymentDate,
         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
        (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            when IIRL_INTEREST_DAYSTYPE  in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
                  pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE) FloatingRate,
                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
                   IIRL_BASE_RATE BaseRate,IIRL_SPREAD Spread ,
                   round((IIRL_FINAL_RATE + (IIRL_SPREAD/10000))/100.0000,4) FinalRate,
                c.iirs_notional_amount NotionalAmount,
                c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
                C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
                c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE,
                iirm_interest_amount as InterestAmount
          from trtran091B inner join trtran091a b
          on IIRM_IRS_NUMBER=iirl_irs_number
          and iirl_serial_number = iirm_serial_number
          inner join trtran091 c
          on iirl_irs_number= iirs_irs_number
          where IIRL_INT_TYPE=80300001)
          , CaldataFloating as
          (SELECT pkgreturncursor.fncgetdescription(Iirs_Company_code,1) Company,IIRM_IRS_NUMBER IRSNumber,IIRM_SERIAL_NUMBER SerialNumber,IIRM_INTSTART_DATE InterestStartDate,
                 IIRM_INTEND_DATE IntEndDate, IIRM_SETTLEMENT_DATE PaymentDate,
         (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200002,41200007) then --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)
            when IIRL_INTEREST_DAYSTYPE in(41200003,41200005,41200004) then --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE) end)InterestDays,
          (case when IIRL_INTEREST_DAYSTYPE in(41200001,41200006) then --INT365DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/365
            WHEN IIRL_INTEREST_DAYSTYPE in(41200002,41200007) THEN --INT366DAYS
                (IIRM_INTEND_DATE-IIRM_INTSTART_DATE)/366
            WHEN IIRL_INTEREST_DAYSTYPE  IN(41200003,41200005,41200004) THEN --INT360DAYS
            days360(IIRM_INTSTART_DATE,IIRM_INTEND_DATE)/360 end) InterestDaysCal,
                       pkgreturncursor.fncgetdescription(IIRL_INTEREST_DAYSTYPE,2) InterestDaysType,
                  pkgreturncursor.fncgetdescription(IIRL_RATE_TYPE,2) RateType,
                 round(pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100,4) FloatingRate,
                  pkgreturncursor.fncgetdescription(IIRL_BUY_SELL,2) BuySell,
                   pkgreturncursor.fncgetdescription(IIRL_INT_TYPE,2) InterestType,
                   pkgreturncursor.fncgetdescription(IIRL_INT_CHARGE,2) InterestCharge,
                   CASE WHEN iirm_process_complete = 12400001 THEN
                   iirm_BASE_RATE
                   else IIRL_BASE_RATE end as BaseRate,
                   CASE WHEN iirm_process_complete = 12400001 THEN
                   iirm_spread
                   else IIRL_SPREAD  end Spread ,
                   CASE WHEN iirm_process_complete = 12400001 THEN
                   iirm_final_rate
                   else round(((pkgforexprocess.fncGetIRSRate(frmDate,IIRM_INTEND_DATE,IIRL_RATE_TYPE)/100)
                          +(IIRL_SPREAD/10000)),4)end as FinalRate,
                c.iirs_notional_amount NotionalAmount,
                c.IIRS_COUNTER_PARTY AS IIRS_COUNTER_PARTY,
                C.IIRS_EXECUTE_DATE AS IIRS_EXECUTE_DATE,
                c.IIRS_COMPANY_CODE AS IIRS_COMPANY_CODE, 
                pkgreturncursor.fncgetdescription(iirl_currency_code,2)Currency,
                CASE WHEN iirm_process_complete = 12400001 THEN
                'R' ELSE
                'U' end as Status,
                IIRM_SPOT_RATE as SpotRate,
                iirm_interest_amount as IntAmount,
                iirm_net_cashflow as netCashFlow
          from trtran091B inner join trtran091a b 
          on IIRM_IRS_NUMBER=iirl_irs_number
          inner join trtran091 c
          on iirl_irs_number= iirs_irs_number
          where IIRL_INT_TYPE=80300002) --Fixed)
          SELECT fix.IRSNumber as  IRSNumber,
          fix.SerialNumber as SerialNumber,
          fix.InterestStartDate as InterestStartDate ,
          fix.IntEndDate as IntEndDate,
          fix.PaymentDate as PaymentDate,
          fix.InterestDays as InterestDays,
          fix.InterestDaysType as  InterestDaysType,
          fix.RateType as RateType,
          fix.FloatingRate as FloatingRate,
          fix.BuySell as BuySell,
          fix.InterestType as InterestType,
          fix.InterestCharge as InterestType,
          fix.BaseRate as BaseRate ,
          fix.Spread as Spread,
          fix.FinalRate  as FinalRate,
          fix.NotionalAmount as NotionalAmount,
          fix.InterestAmount as fixInterestAmount,
          --nvl(round(fix.NotionalAmount*fix.FinalRate*fix.InterestDaysCal,2),0) fixInterestAmount,
          Flo.PaymentDate AS FloPaymentDate ,
          flo.InterestStartDate as FloInterestStartDate,
          Flo.InterestDays AS FloInterestDays,
          flo.IntEndDate as FloIntEndDate,
          Flo.InterestDaysType as FloInterestDaysType ,
          Flo.RateType as FloRateType,
          Flo.FloatingRate as FloFloatingRate ,
          Flo.BuySell as FloBuySell ,
          Flo.InterestType as FloInterestType,
          Flo.InterestCharge as FloInterestCharge,
          Flo.FloatingRate*100 as FloBaseRate,
          Flo.Spread as FloSpread ,
          Flo.FinalRate as FloFinalRate,
          Flo.NotionalAmount as FloNotionalAmount,
          case when flo.status = 'R' then
          IntAmount
          else nvl(round(Flo.NotionalAmount*Flo.FinalRate*Flo.InterestDaysCal,2),0) end as FloInterestAmount,
          frmDate as AsonDate,
          toDate as ToDate,
          fix.Company as Company,
          Flo.Currency AS Currency,
          Flo.Status as Status,
          Flo.SpotRate as SpotRate ,
          Flo.netCashFlow as netCashFlow
          FROM CaldataFloating Flo full outer join 
          CaldataFixed fix
          on flo.IRSNumber=fix.IRSNumber
          --and flo.SerialNumber= fix.SerialNumber
          AND flo.InterestStartDate=fix.InterestStartDate;
          
--          on flo.IRSNumber=fix.IRSNumber
--          --and flo.SerialNumber= fix.SerialNumber
--          --and flo.IntEndDate = fix.IntEndDate
--          and flo.InterestStartDate = fix.IntEndDate
--          and flo.PaymentDate = fix.PaymentDate;
          --AND flo.InterestStartDate=fix.InterestStartDate;
 -- Open Gencursor For Query_Str||Query_Str1||Query_Str2||finalCondition;          
   Goto Process_End;  
 End If;  
 
   if (varReportID = 'IRSNEWREPORT1')  then
   Query_Str:='  SELECT PKGRETURNCURSOR.fncGetDescription(IIRS_COMPANY_CODE,1)  as CompanyName,
   iirs_irs_number                                    AS RefNo,
  iirs_execute_date                                       AS ExecuteDate,
  IIRS_START_DATE                                         AS EffectiveDate,
  PKGRETURNCURSOR.fncGetDescription(iirs_counter_party,2) AS Counterparty,
  iirs_notional_amount                                    AS NotionalAmount,
  iirs_expiry_date                                        AS MaturityDate,
  (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number) AS Currency,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001 ) AS ReceiveIntType,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS PaymentIntType,
  b.SchedulePaymentDate as SchedulePaymentDate,
  b.Outstanding as Outstanding,
  b.EffectiveAmount as EffectiveAmount,
  b.PayInterest as PayInterest,
  b.ReceiveInterest as ReceiveInterest,
  case when b.Status = '||''''||'R'||''''||' then
   b.NetCashFlow
   else
   nvl(b.ReceiveInterest,0) -  nvl(b.PayInterest,0)
  end as NetCashFlow,
  b.Status as Status,
  TO_DATE('||''''||frmDate||''''||') as FromDate,
  to_date('||''''||toDate|| ''''||') as ToDate,
  FlotBaseRate,FlotSpread,FixFinalRate,
  FlotBaseRate + FlotSpread as FlotFinaRate
FROM TRTRAN091,
(SELECT FLOT.IIRS_IRS_NUMBER RefNo,
  FIX.IIRM_INTSTART_DATE SchedulePaymentDate,
  FLOT.Outstanding AS Outstanding,
  FLOT.EffectiveAmount AS EffectiveAmount,
  FIX.InterestAmount      AS PayInterest,
  FLOT.IntAmount          AS ReceiveInterest,
  NVL(FLOT.netCashFlow,0) AS NetCashFlow,
  FLOT.Status             AS Status,
  FLOT.BaseRate           AS FlotBaseRate,
  FLOT.Spread             AS FlotSpread,
  FIX.FinalRate           AS FixFinalRate
FROM
  (SELECT iirs_irs_number,
    iirm_leg_serial,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    iirm_interest_amount AS InterestAmount,
    iirl_final_rate as FinalRate
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  WHERE IIRL_INT_TYPE =80300001
  --AND IIRm_IRS_NUMBER ='||''''||'IIRS/0000013/16-17'||''''||'
  ) Fix,';
  Query_Str2 :='(SELECT iirs_irs_number,
    iirm_leg_serial,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    CASE
      WHEN iirm_process_complete = 12400001
      THEN '||''''||'R'||''''||'
      ELSE '||''''||'U'||''''||'
    END                  AS Status,
    --iirm_interest_amount AS IntAmount,
    CASE
      WHEN iirm_process_complete = 12400001 THEN    
    iirm_interest_amount 
    ELSE
    round(pkgirs.fncIRSIntCalcforperiod(iirm_intstart_date,iirm_intend_date,iirs_irs_number,2,
    (nvl(PKGirs.fncIRSGetInterestRate(iirs_irs_number, 1,'||''''||frmDate||''''||','||''''||frmDate||''''||',0,'||''''||frmDate||''''||',0),0) +
    nvl(PKGirs.fncIRSGetInterestRate(iirm_irs_number, 1,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirl_int_type,'||''''||frmDate||''''||',1),0) + iirl_spread)
    ,IIRL_INTEREST_DAYSTYPE),2)
    END  AS IntAmount,    
    iirm_net_cashflow    AS netCashFlow,
    IIRN_EFFECTIVE_DATE ,
    IIRN_OUTSTANDING_AMOUNT Outstanding,
    iirn_effective_amount EffectiveAmount,
    CASE WHEN iirm_process_complete = 12400001 THEN    
      iirl_base_rate
    else
      nvl(PKGirs.fncIRSGetInterestRate(iirs_irs_number, 1,'||''''||frmDate||''''||','||''''||frmDate||''''||',0,'||''''||frmDate||''''||',0),0) +
      nvl(PKGirs.fncIRSGetInterestRate(iirm_irs_number, 1,IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirl_int_type,'||''''||frmDate||''''||',1),0)
      end as BaseRate,
    CASE WHEN iirm_process_complete = 12400001 THEN    
      iirl_spread
    else  
      iirl_spread end Spread
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  FULL OUTER JOIN TRTRAN091C
  --ON IIRN_EFFECTIVE_DATE = IIRM_INTSTART_DATE 
  ON IIRN_EFFECTIVE_DATE = IIRM_INTEND_DATE 
  AND IIRN_IRS_NUMBER = IIRM_IRS_NUMBER
  WHERE IIRL_INT_TYPE =80300002
 --AND IIRm_IRS_NUMBER = '||''''||'IIRS/0000013/16-17'||''''||'
  ) Flot
WHERE fix.iirs_irs_number  = flot.iirs_irs_number
AND fix.iirm_intstart_date = flot.iirm_intstart_date
ORDER BY 2) b
WHERE iirs_deal_type NOT IN(80800004,80800005,80800006)
AND IIRS_IRS_NUMBER = B.RefNo';
delete from temp;commit;
INSERT INTO TEMP VALUES(Query_Str,Query_Str2||finalcondition);commit;
   OPEN GenCursor for Query_Str||Query_Str2 || finalcondition;
   Goto Process_End;   
  End if;

if (varReportID = 'CCSNEWREPORT1')  then
   Query_Str:='  SELECT PKGRETURNCURSOR.fncGetDescription(IIRS_COMPANY_CODE,1)  as CompanyName,
   iirs_irs_number                                    AS RefNo,
  iirs_execute_date                                       AS ExecuteDate,
  IIRS_START_DATE                                         AS EffectiveDate,
  PKGRETURNCURSOR.fncGetDescription(iirs_counter_party,2) AS Counterparty,
  (SELECT IIRL_Notional_Amount
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001) AS NotionalAmountReceive,
  (SELECT IIRL_Notional_Amount
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS NotionalAmountPay,
  (SELECT IIRL_FINAL_RATE
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001) AS FinalRateReceive,
  (SELECT IIRL_FINAL_RATE
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS FinalRatePay,
  iirs_expiry_date                                        AS MaturityDate,
  (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001) AS ReceiveCurrency,
  (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS PayeCurrency,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001 ) AS ReceiveIntType,
  (SELECT PKGRETURNCURSOR.fncGetDescription(iirl_int_type,1)
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002) AS PaymentIntType,
  b.SchedulePaymentDate as SchedulePaymentDate,
  b.Outstanding as Outstanding,
  b.EffectiveAmount as EffectiveAmount,
  b.PayInterest as PayInterest,
  b.ReceiveInterest as ReceiveInterest,
  (b.ReceiveInterest - b.PayInterest) as NetCashFlow,
  b.Status as Status,
  b.Outreceiveamt as Outreceiveamt,
  b.OutPayamt as OutPayamount,
  b.schpayamt as schpayamt,
  b.schrecamt as schrecamt,
   TO_DATE('||''''||frmDate||''''||') as FromDate,
     to_date('||''''||toDate|| ''''||') as ToDate,
  pkgforexprocess.fncgetrate((SELECT DISTINCT iirl_currency_code
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300002),   (SELECT DISTINCT iirl_currency_code
  FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
  AND iirl_buy_sell     = 25300001), '||''''||frmDate||''''||', 25300002,0,b.SchedulePaymentDate,0) As ConversionRate 
 FROM TRTRAN091,
(SELECT FLOT.IIRS_IRS_NUMBER RefNo,
  FIX.iirm_settlement_date SchedulePaymentDate,
   NVL(FIX.IIRM_SERIAL_NUMBER,Flot.IIRM_SERIAL_NUMBER) IIRM_SERIAL_NUMBER,
  FLOT.Outstanding AS Outstanding,
  FLOT.EffectiveAmount AS EffectiveAmount,
  FIX.InterestAmount      AS PayInterest,
  FLOT.IntAmount          AS ReceiveInterest,
  NVL(FLOT.netCashFlow,0) AS NetCashFlow,
  FLOT.Status             AS Status,
  Flot.OutPayamt as OutPayamt,
  flot.schpayamt as schpayamt,
  Fix.Outreceiveamt as Outreceiveamt,
  Fix.schrecamt as schrecamt
FROM
  (SELECT iirs_irs_number,
    iirm_leg_serial,
     IIRM_SERIAL_NUMBER,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    iirm_interest_amount AS InterestAmount,
    IIRN_OUTSTANDING_AMOUNT as   Outreceiveamt,
    IIRN_EFFECTIVE_AMOUNT as schrecamt
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  FULL OUTER JOIN TRTRAN091C
  ON IIRN_EFFECTIVE_DATE = iirm_settlement_date 
--  ON IIRN_EFFECTIVE_DATE = IIRM_INTEND_DATE 
  AND IIRN_IRS_NUMBER = IIRM_IRS_NUMBER
  WHERE IIRL_BUY_SELL =25300001
--  AND IIRm_IRS_NUMBER ='||''''||'IIRS/0000013/16-17'||''''||'
  ) Fix,';
  Query_Str2 :='(SELECT iirs_irs_number,
    iirm_leg_serial,
    IIRM_SERIAL_NUMBER,
    iirm_intstart_date,
    iirm_intend_date,
    iirm_settlement_date,
    CASE
      WHEN iirm_process_complete = 12400001
      THEN '||''''||'R'||''''||'
      ELSE '||''''||'U'||''''||'
    END                  AS Status,
    iirm_interest_amount AS IntAmount,
    iirm_net_cashflow    AS netCashFlow,
    IIRN_EFFECTIVE_DATE ,
    IIRN_OUTSTANDING_AMOUNT Outstanding,
    iirn_effective_amount EffectiveAmount,
    IIRN_OUTSTANDING_PAYMENT as   OutPayamt,
    IIRN_PAYMENT_AMOUNT as schpayamt
  FROM trtran091B
  INNER JOIN trtran091a b
  ON IIRM_IRS_NUMBER     =iirl_irs_number
  AND iirl_serial_number = iirm_serial_number
  INNER JOIN trtran091 c
  ON iirl_irs_number  = iirs_irs_number
  FULL OUTER JOIN TRTRAN091C
  --ON IIRN_EFFECTIVE_DATE = IIRM_INTEND_DATE 
  ON IIRN_EFFECTIVE_DATE = iirm_settlement_date 

  AND IIRN_IRS_NUMBER = IIRM_IRS_NUMBER
  WHERE IIRL_BUY_SELL =25300002
-- AND IIRm_IRS_NUMBER = '||''''||'IIRS/0000013/16-17'||''''||'
  ) Flot 
WHERE fix.iirs_irs_number  = flot.iirs_irs_number
--AND fix.iirm_intstart_date = flot.iirm_intstart_date
--AND fix.iirm_intend_date = flot.iirm_intend_date
AND fix.iirm_settlement_date = flot.iirm_settlement_date
--AND FIX.IIRM_SERIAL_NUMBER = FLOT.IIRM_SERIAL_NUMBER
ORDER BY 2) b
WHERE iirs_deal_type IN(80800004,80800005,80800006)
AND IIRS_IRS_NUMBER = B.RefNo ';
--and d.iirn_irs_number=iirs_irs_number and d.iirn_irs_number=b.RefNo and d.iirn_serial_number=b.iirm_serial_number';
delete from temp;commit;
INSERT INTO TEMP VALUES(Query_Str,Query_Str2||finalCondition);commit;
   OPEN GenCursor for Query_Str||Query_Str2||finalcondition;
   Goto Process_End;   
  End if;

 if varReportID = 'CURRFUTUREFORSPECIFICPERIOD1' then
Delete From Trsystem978;Commit;
 insert into trsystem978 values(toDate);commit;
Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,--M2MRate,
               Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,--BalanceFcy*Exrate as mtmValue,
               PANDLFCY as PandL,COBRATE,--MTMPANDL,MTMPANDLINR,
               HedgeTrade,
                pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || '
          from  vewForwardFuture
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002)
                  '||finalcondition||'';
              delete from temp; commit;
               insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;
    Goto Process_End;
End if;

if varReportID = 'EDBENIFITRPTNEW'  then   
    QUERY_STR := 'select * from(select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
            (select LBNK_ACCOUNT_NUMBER from trmaster306
              where LBNK_PICK_CODE= DEAL_COUNTER_PARTY
              and LBNK_RECORD_STATUS not in (10200005,10200006)
              )as AccountNo,          
             DEAL_USER_REFERENCE as ContractNo,
            c.cdel_cancel_amount as Amount ,
             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
                               c.cdel_cancel_rate end),''999d999999'') as NetRate,
            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
                               else  c.cdel_Spot_rate end),''999d999999'')as Spot,
            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
                               else c.cdel_forward_rate end ),''999d999999'')as FwdRate , 
            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
                               else c.cdel_margin_rate end),''999d999999'') as Margin,';
           Query_Str1:=' deal_maturity_date as MaturityDate,
              (case when c.cdel_cancel_type=27000001 then            
                      to_char((d.deal_exchange_rate),''999d999999'') else null end )as BookingRate,
            c.cdel_profit_loss as PandL,
            c.cdel_cancel_date  as CancelDate,               
             --(c.cdel_cancel_amount) * to_char((d.deal_exchange_rate-c.cdel_cancel_rate))  as AmtInLacs,
             c.cdel_profit_loss as AmtInLacs,
               (case when c.cdel_cancel_type=27000002 then ''FX Utilisation''               
                  end) DealType,
           (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) 
            then  ''''  when (c.cdel_cancel_type=27000002)
                  then ''ED Benefit'' ||'' ''|| to_char(round((d.deal_exchange_rate-c.cdel_cancel_rate)*100,4))||'' ''|| '' Paisa ''
                  end) as Remarks,
                  to_char(CDEL_CANCEL_DATE,''MON-yy'') as monthorder1, 
                  to_char(CDEL_CANCEL_DATE,''yyyymm'') as monthorder, 
                         -- pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,                  
                 '||''''||frmDate||''''||'   as AsonDate,
                  '||''''||Todate||''''||' as ToDate
                    ' || varGroupField || '
     from trtran001 d inner join trtran006 c
       on deal_deal_number= cdel_deal_number
     where deal_record_status not in (10200005,10200006) 
      and nvl(cdel_record_status,10200001) not in (10200005,10200006)'
    --  and (CDEL_CANCEL_DATE between '||''''||frmDate||''''||' and '||''''||Todate||''''||') ' 
      || finalcondition || ')
      where Remarks like''ED Benefit%''';
       delete from temp; commit;
     insert into temp values (QUERY_STR,Query_Str1);commit; 
     
      Open Gencursor For QUERY_STR||Query_Str1||'order by CancelDate,monthorder asc'; 

Goto Process_End;   
  End If;
  
   if  varReportID ='HEDGEDEALM2MREPORTNEW' then
    -- here fncgetoutstanding is used to get the actual amount on 19-may-09
    Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency, 
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterParty,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,DEAL_USER_REFERENCE as BnkREf,
                        deal_maturity_from as FrmDueDate,deal_maturity_date  as DueDate,
                        deal_exchange_rate as FcyRate,';
            Query_Str1:='          
                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,                        
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,                        
                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,                        
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') * deal_exchange_rate ) as InrValue,                        
                        round((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)),4)as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency, 30400003, '||''''||frmDate||''''||', deal_buy_sell,pkgforexprocess.fncAllotMonth(deal_counter_party,deal_execute_date,deal_maturity_date),deal_maturity_date,0))) as WashRate,
                        ((pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,'||''''||frmDate||''''||',deal_buy_sell,(pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,deal_execute_date,deal_maturity_date)),deal_maturity_date,0)) 
                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))) as RevalueInr,
                        0 as PositionInr,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BackupDeal,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdiscr ,
                        decode(deal_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade
                 from    trtran001            
                where   --deal_hedge_trade = 26000001 and
                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
                        --hedg_deal_serial = deal_serial_number and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                         '||finalcondition||'';                                   

                        delete from temp;commit; 
                        insert into temp values(Query_Str,Query_Str1);commit;
--                      (deal_complete_date is null or 
--                      deal_complete_date > '||''''||frmDate||''''||') ';                       
     --   insert into temp values(Query_Str,finalCondition);commit;
    OPEN GenCursor for Query_Str||Query_Str1||finalCondition||' order by pkgreturncursor.fncgetdescription(deal_base_currency,2),
                                                             pkgreturncursor.fncgetdescription(deal_other_currency,2),
                                                             deal_maturity_date ' ;
                                                             
                                                           
    Goto Process_End; 
  end if;
  
  
  if  varReportID ='HEDGEDEALSPOTM2MREPORTNEW' then
    -- here fncgetoutstanding is used to get the actual amount on 19-may-09
    
    Query_Str :='select pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) as company,
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) as BaseCurrency,
                        pkgreturncursor.fncgetdescription(deal_other_currency,2) as OtherCurrency, 
                        pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair,
                        pkgreturncursor.fncgetdescription(deal_buy_sell,2) as AccountCode,
                        pkgreturncursor.fncgetdescription(deal_counter_party,2) as counterParty,
                        (select user_user_name from trsystem022 where user_user_id = deal_user_id) as UserId,
                        deal_deal_number as ReferenceNumber,deal_execute_date as ReferenceDate,DEAL_USER_REFERENCE as BnkREf,
                        deal_maturity_from as FrmDueDate,deal_maturity_date  as DueDate,
                        deal_spot_rate as FcyRate,
                        deal_base_amount BaseAmount,
                        DEAL_EXCHANGE_RATE NetRate,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))*deal_spot_rate as FCR,
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||'))*DEAL_EXCHANGE_RATE as FCP,
                        --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) as TransactionAmount,                        
                        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILTRADEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||') as TransactionAmount,                        
                        --(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,'||GConst.UTILHEDGEDEAL||','||GConst.AMOUNTFCY||','||''''||frmDate||''''||',HEDG_TRADE_REFERENCE) * deal_exchange_rate ) as InrValue,                        
                        (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,'||''''||frmDate||''''||') * deal_exchange_rate )  as InrValue,                        
                        round(pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,'||''''||frmDate||''''||',DEAL_BUY_SELL,0,null,0),4)as M2mInrRate,
                        (decode(deal_other_currency,30400003,1,pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,'||''''||frmDate||''''||',DEAL_BUY_SELL,0,null,0))) as WashRate,
                        ((pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,'||''''||frmDate||''''||',DEAL_BUY_SELL,0,null,0)) 
                                                   * (pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,'||''''||frmDate||''''||'))) as RevalueInr,
                        0 as PositionInr,
                        to_date('||''''||frmDate||''''||') as AsonDate,
                        pkgreturnreport.GetSystemDate() as SystemDate, pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                         pkgreturnReport.getCompanyNameFooter() as CompanyFooter, ';
                         
    Query_Str1 :=      ' pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BackupDeal,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as Backupdiscr ,
                        decode(deal_hedge_trade, 26000001, ''Hedge'', ''Trade'') HedgeTrade
                        ' || varGroupField || '                       
                from    trtran001            
                where   --deal_hedge_trade = 26000001 and
                        --HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER and
                        --hedg_deal_serial = deal_serial_number and
                        DEAL_record_status NOT IN('||gconst.statusdeleted||','||gconst.statusinactive||') and
                        ((deal_process_complete = 12400001  and deal_complete_date > '||''''||frmDate||''''||') or deal_process_complete = 12400002)
                         '||finalcondition||'';                                   

                        delete from temp;commit; 
                        insert into temp values(Query_Str,Query_Str1);commit;
--                      (deal_complete_date is null or 
--                      deal_complete_date > '||''''||frmDate||''''||') ';                       
     --   insert into temp values(Query_Str,finalCondition);commit;
    OPEN GenCursor for Query_Str || Query_Str1 ||finalCondition||' order by pkgreturncursor.fncgetdescription(deal_base_currency,2),
                                                             pkgreturncursor.fncgetdescription(deal_other_currency,2),
                                                             deal_maturity_date ' ;
                                                             
                                                           
    Goto Process_End; 
  end if;
  
  
   if varReportID ='REALIZEDPLCLOSEDTRADESNEW' then

delete from temp; commit;
  insert into temp values (finalcondition,'Before');
  
  select replace ( finalcondition, 'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY')||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''' ,'')  
   into  finalcondition from dual;
-- And DEAL_MATURITY_DATE  between '01-Jan-2015' and '27-Apr-2015' 
  dattemp := (frmDate - 1);
  insert into temp values (finalcondition,'And DEAL_MATURITY_DATE  between '||''''||to_char(frmDate,'DD-Mon-YYYY') ||''''||' and '||''''|| to_char(ToDate,'DD-Mon-YYYY')||'''');
  
   Query_Str := 'select  DEAL_DEAL_NUMBER AS DEALNUMBER, 
                  --pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS BANKDESC,
                  pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2) AS CompanyCode,
                  pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) as Trans,
                  --DEAL_COMPANY_CODE AS COMPCODE, 
                  pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
                      DEAL_BASE_AMOUNT as BookAmt,
                  CDEL_CANCEL_DATE AS CancelDate,
                  cdel_cancel_amount as CancelAmt,
                  Case When d.Cdel_Cancel_Type=27000001
                  Then ' || '''C'''||'
                  Else
                  ' || '''D'''||'
                  end as "CancelledDelivered" ,
                  d.CDEL_SPOT_RATE as CancelSpot,
                  d.CDEL_Forward_RATE as CancelForward, 
                  cdel_cancel_rate as NetCancel,
                     (decode(deal_other_currency,30400003,1,Cdel_local_rate)) as WashRate,
                  nvl(CDEL_PROFIT_LOSS,0) as profitlossINR,
                  /*pkgreturnreport.fncgetprofitloss(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, '||''''||frmDate||''''||'),pkgforexprocess.fncGetRate(DEAL_BASE_CURRENCY, 30400003,'||''''||frmDate||''''||' , deal_buy_sell, (pkgForexProcess.fncAllotMonth(deal_counter_party,'||''''||frmDate||''''||' ,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,deal_buy_sell) as m2m,*/
                  decode(round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2),1,0,round(decode(cdel_profit_loss,0,0,(decode(CDEL_PROFIT_LOSS,0,1,null,1,cdel_profit_loss) / decode(cdel_cancel_rate,0,1,null,1,cdel_cancel_rate))),2)) as profitlossUSD,
                  Deal_user_reference as bankref,
                  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSAL,
                  pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                  --pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPARTY,
                  pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) AS OTHERCURRENCY,
                 ';
                 
          Query_Str1 := '   DEAL_EXECUTE_DATE AS EXEDATE,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||ToDate||''''||') AS BASEAMT,
               --DEAL_BASE_AMOUNT AS BASEAMT,
                 DEAL_EXCHANGE_RATE AS EXERATE,
                 --(DEAL_SPOT_RATE+DEAL_Forward_Rate+Deal_Margin_Rate) AS EXERATE,
                 DEAL_Forward_RATE AS FORWRATE,
                 DEAL_MATURITY_DATE AS MATURITYDATE,
                 DEAL_SPOT_RATE AS SPOTRATE,
                 DEAL_USER_REFERENCE as REFNO,
                 pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,2) as BACKUPDEAL,
                  (select(case 
                  when trad_import_export <= 25900050 then
                 ' || '''Exp''' || '
                  when trad_import_export > 25900050 then
                  '||'''Imp'''||'
                  end) Catg from trtran002 where TRAD_TRADE_REFERENCE = CDEL_TRADE_REFERENCE)as importexport,

                 pkgreturnreport.GetSystemDate() as SystemDate,
                  pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
              -- pkgforexprocess.fncGetSpotDueDate(DEAL_COUNTER_PARTY,DEAL_MATURITY_DATE,-2) as spotduedate,
                  DEAL_MATURITY_DATE as spotduedate,
                 '||''''||frmDate||''''||' as  FromDate, 
                 '||''''||ToDate||''''||'  as ToDate,
                 deal_margin_rate as Margin,
                 deal_exchange_rate as netrate,
                 pkgreturncursor.fncgetdescription(deal_base_currency,2) || '''|| ' /  ' ||''' || pkgreturncursor.fncgetdescription(deal_other_currency,2) as CurrencyPair,
                 pkgreturncursor.fncgetdescription(deal_init_code,2) as SubCategry ,
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,'||''''||GConst.UTILTRADEDEAL||''''||','||''''||GConst.AMOUNTFCY||''''||','||''''||dattemp||''''||') AS Outstandingason
                 ' || varGroupField || '  
   from trtran001 left outer join trtran006 d
     on CDEL_DEAL_NUMBER=DEAL_DEAL_NUMBER
     and deal_serial_number = cdel_deal_serial 
      where  deal_deal_type not in (25400001)
      and DEAL_RECORD_STATUS not in (10200005,10200006)
      and nvl(CDEL_RECORD_STATUS,10200001) not in (10200005,10200006)
               and ((deal_execute_date between '||''''||frmDate||''''||' and '||''''||ToDate||''''||')
              or (nvl((cdel_cancel_date),'''||'01-Jan-1900'||''') between '||''''||frmDate||''''||' and '||''''||ToDate||''''||'))
               AND (nvl((cdel_cancel_date),'''||'01-Jan-1900'||''') between '||''''||frmDate||''''||' and '||''''||ToDate||''''||')
              '|| finalcondition||'
        order by CDEL_CANCEL_DATE'; 
        
        --'|| finalcondition||' removed the final condition Because Deal_maturity_date is coming in daterange 
      
     insert into temp values (Query_Str,Query_str1);
      commit;
       Open Gencursor  For Query_Str||Query_Str1 ;
     Goto Process_End;      
 end if; 
 
  If Varreportid ='FRWFUTUREOUTSTANDINGDEALNEW'  Then
  Delete From Trsystem978;Commit;
   Insert Into Trsystem978 Values(Frmdate);commit;
 -- Insert Into Temp Select Asondate,'' From Trsystem978;
  
Query_str :=' select   UserID, pkgreturncursor.fncgetdescription(DealType,2) DealType, DealDate as ExecuteDate,DealNumber,CompanyCode,
               COMPANYNAME as Company,BankName as CounterParty,Currency,BuySell,DealAmount as BaseAmount,DealAmount*Exrate as AmtInr,Maturity,
               Exrate as Rate,BalanceFcy as ProductQty,TRANS as BackupDeal,M2MRate,Maturity as MaturityDate,DEALREF AS Remark,
               pkgreturncursor.fncgetdescription(INITCODE,2) as InitCode,WASHRATE as WashRate,MTMPANDLINR as mtmValue,
               PANDLFCY as PandL,COBRATE,MTMPANDL,MTMPANDLINR,RecordStatus,HedgeTrade,
                 pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||' ) as CompanyName,
                pkgreturnReport.getCompanyNameFooter() as CompanyFooter, 
               TO_DATE('||''''||frmDate||''''||') as FromDate,
               to_date('||''''||toDate||''''||') as ToDate
              ' || varGroupField || '
          from  vewForwardFuture  
          where  ((Status = 12400001  and CompleteDate > '||''''||frmDate||''''||' )or Status = 12400002) 

                  '||finalCondition||'';  
              delete from temp; commit;
            insert into temp values(Query_Str,finalcondition);commit;
    Open Gencursor For Query_Str;
    Goto Process_End;   
  End If;
  
   if varReportID= 'CONTRACTSHCEDULEWINDOWSNEW' then     
QUERY_STR := 'select '||''''||frmDate||''''||' as "ToDate",
             pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
             TRAD_CONTRACT_NO  as "ContractNo",
             pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",    
             CONR_TOTAL_QUANTITY as "TotalQuantity", 
             CONR_PRODUCT_RATE as "Price/Ton",
             CONR_PRODUCT_RATE as "PriceTon",
             pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
             CONR_BASE_AMOUNT as "TotalFCYAmount", 
             trad_reference_date as "ContractDate",
             --pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
             pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as "Bank",
             trad_maturity_date as "MonthlySchedule",
             trad_product_quantity as "Quantity",
             trad_trade_fcy  as "Amount",            
            nvl((select sum(brel_reversal_fcy) from trtran003 ,trtran002 b 
            where brel_trade_reference = b.trad_trade_reference
            and b.trad_contract_no = a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0) "SettledAmount",
                                           
                                           pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) as Category,
                                           pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,';
                                           
Query_Str1 := 'nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE 
               and HEDG_RECORD_STATUS not in(10200005,10200006,10200012)),0) as "HedgedFcy",
               (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') -   nvl((select sum(brel_reversal_fcy) from trtran003 ,trtran002 b 
            where brel_trade_reference = b.trad_trade_reference
            and b.trad_contract_no = a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)  - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as "UnhedgeAmount",
               trad_trade_reference  as "ReverseReference",
               pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
               to_char(ROUND(TRAD_trade_RATE,4),''999d9999'') as "BenchMarkRate",     
               to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
               trad_maturity_date),4),''999d9999'') as "MTMRate" ,
               ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
                         trad_maturity_date) -trad_trade_rate))/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4)  as "%Increase/DecreaseMTM",
                         ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
                          trad_maturity_date) -trad_trade_rate))/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4)  as "IncreaseDecreaseMTM"
                         ' || varGroupField || '
               from trtran002 a left outer join trtran002c b 
               on   TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
               where ((trad_process_complete=12400002) or (trad_complete_date >'||''''||frmDate||''''||' 
                               and trad_process_complete=12400001))
              --and  trad_import_export=25900077
              and trad_record_status not in (10200005,10200006)
              and trad_maturity_date >= '||''''||frmDate||''''||'
              and trad_entry_date<='||''''||frmDate||''''||'
              and trad_trade_fcy > 0
              and  
                        ROUND(( (pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
                       trad_maturity_date)-trad_trade_rate )/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4) > ((TRAD_trade_RATE*(-0.5))/1000)
                       and trad_trade_fcy!= nvl((select sum(brel_reversal_fcy) from trtran003 ,trtran002 b 
            where brel_trade_reference = b.trad_trade_reference
            and b.trad_contract_no = a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)' ;
        delete from temp; commit;
     insert into temp values (QUERY_STR,Query_Str1 || finalcondition);commit;         
       Open Gencursor For QUERY_STR||Query_Str1||finalcondition||'order by TRAD_TRADE_CURRENCY,TRAD_PRODUCT_CATEGORY,trad_reference_date' ;  
             Goto Process_End;   
  end if;
  
  If  Varreportid ='CONTRACTPOSITIONBANKNEW1' Then
delete from temp;
insert into temp values('CONTRACTPOSITIONBANK','before');commit;

   QUERY_STR := 'with outData as (
     select to_char(deal_maturity_date,''YYYYMM'') MonthOrder ,to_char(deal_maturity_date,''MON-yy'') MaturityMonth,
            deal_backup_deal ProductType, deal_company_code CompanyCode,30400004 CurrencyCode,
            DEAL_COUNTER_PARTY Counterparty,
            DEAL_MATURITY_DATE ,
            DEAL_BACKUP_DEAL,
            DEAL_COUNTER_PARTY,
            DEAL_BASE_CURRENCY,
             sum(case when deal_base_currency= 30400004 then  
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'''|| frmDate ||''')
                 when deal_base_currency != 30400004 then  
                 pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'''|| frmDate ||''')
                  * (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))
                 end) USDBaseAmount,';              
                 
             QUERY_STR1:='  sum(case when (deal_base_currency= 30400004 and deal_other_currency= 30400003) then 
                  pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'''|| frmDate ||''')* deal_exchange_rate
                   when (deal_base_currency= 30400004 and deal_other_currency != 30400003) then 
                      (pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'''|| frmDate ||''') *
                      Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))        
                  when  (deal_base_currency != 30400004) then 
                     ((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'''|| frmDate ||''') *
                      (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date)))
                    * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))
                  end) InrBaseAmount,
                 '''|| frmDate ||'''  Asondate                  
   from trtran001 
   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
     and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'''|| frmDate ||''') 
                          or DEAL_PROCESS_COMPLETE = 12400002) 
     and deal_maturity_date >='''|| frmDate ||'''                       
  group by to_char(deal_maturity_date,''YYYYMM''),to_char(deal_maturity_date,''MON-yy''),deal_backup_deal,
             deal_company_code,DEAL_BASE_CURRENCY, DEAL_COUNTER_PARTY,deal_MATURITY_DATE) ';
        
  QUERY_STR2:=' select  MonthOrder , MaturityMonth,
                pkgreturncursor.fncgetdescription(ProductType,2) ProductType,
                pkgreturncursor.fncgetdescription(CompanyCode,1) CompanyCode,
                pkgreturncursor.fncgetdescription(Counterparty,2) Counterparty,
                pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
                USDBaseAmount,InrBaseAmount ,
                round(InrBaseAmount/decode(USDBaseAmount,0,1,USDBaseAmount),4) WeightedAvgrate, 
                '''|| frmDate ||''' Asondate 
                  ' || varGroupField || '
       from outData 
        where USDBaseAmount<>0';
        
         insert into temp values(QUERY_STR||QUERY_STR1||QUERY_STR2,finalCondition);commit;
         
    Open Gencursor For QUERY_STR||QUERY_STR1||QUERY_STR2||finalCondition;             
Goto Process_End; 
 end if;
  
  
  If Varreportid = 'USDINRMOVEMENTNEW' then
           
        Open Gencursor For
         
            select EFFECTIVEDATE,MINRATE,MAXRATE,frmdate,todate,OPENRATE,
              CLOSERATE,MONTHORDER,WEIGHTEDAVGRATE,(CancelAmountinr/1000000)CancelAmountinr,
              (CancelAmount/1000000)as CancelAmount,nvl((CancelPandL.PANDL/1000000),0) PANDL
        from (select DRAT_EFFECTIVE_DATE EFFECTIVEDATE,
             min(DRAT_SPOT_BID) MINRATE,
             max(DRAT_SPOT_BID) MAXRATE,
              frmdate as frmdate,
              todate as todate,
            (SELECT max(DRAT_SPOT_BID) OPENBID 
               FROM TRTRAN012 B 
               WHERE B.DRAT_EFFECTIVE_DATE=A.DRAT_EFFECTIVE_DATE
                 --AND B.DRAT_SERIAL_NUMBER=1 
                   AND B.DRAT_SERIAL_NUMBER= (select min( DRAT_SERIAL_NUMBER) 
                                              from TRTRAN012 d
                                              where d.DRAT_CURRENCY_CODE=30400004 
                                              and d.DRAT_FOR_CURRENCY =30400003 
                                              and d.DRAT_EFFECTIVE_DATE=B.DRAT_EFFECTIVE_DATE
                                              and d.DRAT_SERIAL_NUMBER > 0)                 
                 AND B.DRAT_CURRENCY_CODE=30400004 
                 AND B.DRAT_FOR_CURRENCY =30400003 ) OPENRATE,
              (SELECT max(DRAT_SPOT_BID) OPENBID FROM TRTRAN012 B 
                 WHERE B.DRAT_EFFECTIVE_DATE=A.DRAT_EFFECTIVE_DATE
                   AND B.DRAT_SERIAL_NUMBER= (select max( DRAT_SERIAL_NUMBER) 
                                              from TRTRAN012 c
                                              where C.DRAT_CURRENCY_CODE=30400004 
                                              and C.DRAT_FOR_CURRENCY =30400003 
                                              and C.DRAT_EFFECTIVE_DATE=B.DRAT_EFFECTIVE_DATE)
                   AND B.DRAT_CURRENCY_CODE=30400004 
                   AND B.DRAT_FOR_CURRENCY =30400003 ) CLOSERATE,
                    to_char(DRAT_EFFECTIVE_DATE,'MON-YY') MONTHORDER
            from trtran012 a
            where  a.DRAT_CURRENCY_CODE=30400004 and a.DRAT_FOR_CURRENCY=30400003
            and  a.DRAT_RECORD_STATUS not in (10200005,10200006)
            and a.DRAT_EFFECTIVE_DATE  between frmdate and todate
            group by a.DRAT_EFFECTIVE_DATE
            order by a.DRAT_EFFECTIVE_DATE) rates 
        left outer join 
         --(select round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)-sum(CDEL_PROFIT_LOSS)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,
            
            (select round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,
              --   to_char(cdel_cancel_DATE,'MON-YY') MONTHORDER,
                 cdel_cancel_DATE,
               -- round(sum(cdel_cancel_amount * CDEL_CANCEL_RATE)/sum(cdel_cancel_amount),4) WEIGHTEDAVGRATE,
               round(sum(cdel_cancel_amount*CDEL_CANCEL_RATE),4) CancelAmountinr,
              -- round(sum(cdel_cancel_amount*CDEL_CANCEL_RATE)-sum(CDEL_PROFIT_LOSS)),4) CancelAmountinr,
              --  round((sum(cdel_cancel_amount*cdel_cancel_RATE) -nvl(Pandl.Pandl,0))/sUM(cdel_cancel_amount),2) USDINR,
                sum(cdel_cancel_amount) CancelAmount  
               from trtran006 left outer join trtran001
              on deal_deal_number=cdel_deal_number 
              left outer join trtran002
              on Trad_Trade_Reference=Cdel_Trade_Reference
              where cdel_record_status not in  (10200005,10200006)
              and deal_record_status not in (10200005,10200006)
              and cdel_cancel_type =27000002
              and cdel_cancel_DATE  between frmdate and todate
              and deal_base_currency=30400004
              and TRAD_PRODUCT_CATEGORY=33300001
              group by  cdel_cancel_DATE) cancelamt
          on  rates. EFFECTIVEDATE= cancelamt.cdel_cancel_DATE left outer join 
          (select cdel_cancel_date, sum(cdel_profit_loss) PANDL
              from trtran006 left outer join trtran001
              on deal_deal_number=cdel_deal_number 
              where cdel_record_status not in  (10200005,10200006)
              and deal_record_status not in (10200005,10200006)
              and cdel_cancel_type =27000001
              and cdel_cancel_DATE between frmdate and todate
              and deal_base_currency=30400004
              and DEAL_BACKUP_DEAL=33300001
             group by  cdel_cancel_DATE) CancelPandL
       on rates.EFFECTIVEDATE= CancelPandL.cdel_cancel_date  
      where rates. EFFECTIVEDATE between frmdate and todate
      order by 1;
      
            Goto Process_End;   
         End If; 
    
 if varReportID = 'INWARDREMITTANCERPTNEW'  then
  open gencursor for
  select * from(select  deal_deal_number,pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(deal_counter_party,1) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,            
            (select REMT_REMITTANCE_REFERENCE from trtran008a
              where remt_remittance_reference= cdel_trade_reference
              and remt_record_status not in (10200005,10200006)
              )as ContractNo,
            c.cdel_cancel_amount as Amount ,
             to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
                               c.cdel_cancel_rate end),'999d9999') as NetRate,
            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
                               else  c.cdel_Spot_rate end),'999d9999')as Spot,
            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
                               else c.cdel_forward_rate end ),'990d9999')as FwdRate , 
            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
                               else c.cdel_margin_rate end),'990d9999') as Margin,
            deal_maturity_date as MaturityDate,
            (case when c.cdel_cancel_type=27000001 then            
                      to_char((d.deal_exchange_rate),'999d9999') else null end )as BookingRate,
            c.cdel_profit_loss as PandL,
            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,           
            (case  when nvl((select remt_remittance_type from 
                        trtran008a 
                        where remt_remittance_reference= cdel_trade_reference
                        and remt_record_status not in (10200005,10200006)),'')=33900001
                        then  'Inward Remittance'
                  end) DealType,
                    (select REMT_BANK_REFERENCE from trtran008a
                    where remt_remittance_reference= cdel_trade_reference
                    and remt_record_status not in (10200005,10200006)
                    )as Remarks,
                    (select REMT_REMITTANCE_DETAILS from trtran008a
                    where remt_remittance_reference= cdel_trade_reference
                    and remt_record_status not in (10200005,10200006)
                    )as Description,
                    to_char(deal_maturity_date,'MON-yy') as monthorder1,
                    to_char(CDEL_CANCEL_DATE,'yyyymm') as monthorder, 
                  frmDate as AsonDate,
                  toDate as ToDate
     from trtran001 d inner join trtran006 c
       on deal_deal_number= cdel_deal_number
     where deal_record_status not in (10200005,10200006)
      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
      and (CDEL_CANCEL_DATE between frmDate and toDate))
    where DealType='Inward Remittance'
    order by monthorder asc,MaturityDate;
   Goto Process_End;   
  End If;
  
  
  If  Varreportid ='POSITIONCATEGORYWISENEW' Then
delete from temp;commit;
insert into temp values(varGroupField,finalCondition);
QUERY_STR := 'SELECT 3 AS DisplayOrder,
        ''Hedged'' as  Status,
         '||''''||frmDate||''''||' as datDateAsOn,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
         pkgreturncursor.fncgetdescription(deal_company_code,1)  as CompanyCode,
         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
         to_char(deal_maturity_date,''MON-yy'')as MaturityMonth,
         to_char(deal_maturity_date,''YYYYMM'') as monthorder,
         round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,'||''''||frmDate||''''||')*deal_exchange_rate)/1000000),2)as  AmountLocal1,
                     nvl( round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,'||''''||frmDate||''''||'))),2),0) as  AmountFcy, 
         initcap(''Amt'') as  Datatype,
         initcap(''Rate'') as Datatype1, 
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,'||''''||frmDate||''''||')* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,'||''''||frmDate||''''||')),4) as WtRate  
                    ' || varGroupField || '
   from trtran001 
   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'||''''||frmDate||''''||') <> 0
    and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'||''''||frmDate||''''||') 
                          or DEAL_PROCESS_COMPLETE = 12400002) 
                          and deal_maturity_date >='||''''||frmDate||''''||'';
    --delete from temp;commit;
    insert into temp values(QUERY_STR,finalCondition);
    Open Gencursor For QUERY_STR||finalCondition  ||'group by to_char(deal_maturity_date,''YYYYMM''),to_char(deal_maturity_date,''MON-yy''),deal_backup_deal,
             deal_company_code,DEAL_BASE_CURRENCY, DEAL_COUNTER_PARTY Order by monthorder' ;  
    Goto Process_End; 
 end if;
 
-- if varReportID= 'CONTRACTSHCEDULEWINDOWS2' then     
--QUERY_STR := 'select '||''''||frmDate||''''||' as "ToDate",
--             pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
--             trad_user_reference  as "ContractNo",
--             pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",    
--             CONR_TOTAL_QUANTITY as "TotalQuantity", 
--             CONR_PRODUCT_RATE as "Price/Ton",
--             CONR_PRODUCT_RATE as "PriceTon",
--             pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
--             CONR_BASE_AMOUNT as "TotalFCYAmount", 
--             trad_reference_date as "ContractDate",
--             --pkgreturncursor.fncgetdescription(CONR_LOCAL_BANK,2) as "Bank",
--             pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as "Bank",
--             trad_maturity_date as "MonthlySchedule",
--             trad_product_quantity as "Quantity",
--             trad_trade_fcy  as "Amount",            
--            nvl((select sum(brel_reversal_fcy) from trtran003 
--            where brel_trade_reference = A.trad_trade_reference
--            --and b.trad_contract_no = a.trad_contract_no
--            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0) "SettledAmount",
--            pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) as Category,
--            pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,';
--Query_Str1 := 'nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE 
--               and HEDG_RECORD_STATUS BETWEEN 10200001 AND 10200004),0) as "HedgedFcy",
--               (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') -   nvl((select sum(brel_reversal_fcy) from trtran003,trtran002 b 
--            where brel_trade_reference = b.trad_trade_reference
--            and b.trad_contract_no = a.trad_contract_no
--            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)  - nvl((select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004 where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE and hedg_record_status not in(10200006,10200005,10200012)),0)) as "UnhedgeAmount",
--               trad_trade_reference  as "ReverseReference",
--               pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
--               to_char(ROUND(TRAD_trade_RATE,4),''999d9999'') as "BenchMarkRate",     
----               to_char(ROUND(pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
----               trad_maturity_date),4),''999d9999'') as 
--               0 "MTMRate" ,
----               ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
----                         trad_maturity_date) -trad_trade_rate))/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4)  
--               0  as "%Increase/DecreaseMTM",
----                          ROUND((((pkgforexprocess.fncgetrate( TRAD_TRADE_CURRENCY,30400003,'||''''||frmDate||''''||',0, 0,
----                         trad_maturity_date) -trad_trade_rate))/decode(trad_trade_rate,0,1,trad_trade_rate))*100,4)  
--               0 as "IncreaseDecreaseMTM"
--                         ' || varGroupField || '
--               from trtran002 a left outer join trtran002c b 
--               on   TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
--               where ((trad_process_complete=12400002) or (trad_complete_date >'||''''||frmDate||''''||' 
--                               and trad_process_complete=12400001))
--              and trad_record_status not in (10200005,10200006)
--              and trad_maturity_date >= '||''''||frmDate||''''||'
--              and trad_entry_date<='||''''||frmDate||''''||'
--              and trad_trade_fcy > 0 and trad_trade_fcy!=nvl((select sum(brel_reversal_fcy) from trtran003,trtran002 b 
--            where brel_trade_reference = b.trad_trade_reference
--            and b.trad_contract_no = a.trad_contract_no
--            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)';
--        delete from temp; commit;
--     insert into temp values (QUERY_STR,Query_Str1 || finalcondition);commit;         
--       Open Gencursor For QUERY_STR||Query_Str1||finalcondition||'order by  TRAD_TRADE_CURRENCY,TRAD_PRODUCT_CATEGORY,trad_reference_date' ;  
--             Goto Process_End;   
--  end if;  

if varReportID= 'CONTRACTSHCEDULEWINDOWS2' then     
QUERY_STR := 'select '||''''||frmDate||''''||' as "ToDate",
             pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1) as "Company",
             trad_user_reference  as "ContractNo",
             pkgreturncursor.fncgetdescription(CONR_BUYER_SELLER,2) as "Vendor",    
             CONR_TOTAL_QUANTITY as "TotalQuantity", 
             CONR_PRODUCT_RATE as "Price/Ton",
             CONR_PRODUCT_RATE as "PriceTon",
             pkgreturncursor.fncgetdescription(CONR_PAYMENT_TERMS,2) as "PaymentTerms",
             CONR_BASE_AMOUNT as "TotalFCYAmount", 
             trad_reference_date as "ContractDate",
             pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as "Bank",
             trad_maturity_date as "MonthlySchedule",
             trad_product_quantity as "Quantity",
             trad_trade_fcy  as "Amount",            
            nvl((select sum(brel_reversal_fcy) from trtran003 
            where brel_trade_reference = A.trad_trade_reference
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0) "SettledAmount",
            pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) as Category,
            pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) as Currency,';
Query_Str1 := '
          NVL(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,'''||frmDate||'''),0)as "HedgedFcy",
          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,'''||frmDate||''') -   nvl((select sum(brel_reversal_fcy) from trtran003,trtran002 b 
            where brel_trade_reference = b.trad_trade_reference
            and b.trad_contract_no = a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)  -
            NVL(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,'''||frmDate||'''),0))as "UnhedgeAmount",
            trad_trade_reference  as "ReverseReference",
            pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
            to_char(ROUND(TRAD_trade_RATE,4),''999d9999'') as "BenchMarkRate",     
            0 as "MTMRate" ,
            0 as "%Increase/DecreaseMTM",
            0 "IncreaseDecreaseMTM",pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) as TransactionType,
            pkgreturnreport.getCompanyNameFooter()CompanyName
           --' || varGroupField || '
          from trtran002 a left outer join trtran002c b 
            on   TRAD_reverse_REFERENCE=CONR_TRADE_REFERENCE
            where ((trad_process_complete=12400002) or (trad_complete_date >'||''''||frmDate||''''||' 
                           and trad_process_complete=12400001))
              and trad_record_status not in (10200005,10200006)
              and trad_maturity_date >= '||''''||frmDate||''''||'
              and trad_entry_date<='||''''||frmDate||''''||'
              and trad_trade_fcy > 0 and trad_trade_fcy!=nvl((select sum(brel_reversal_fcy) from trtran003,trtran002 b 
            where brel_trade_reference = b.trad_trade_reference
            and b.trad_contract_no = a.trad_contract_no
            and brel_record_status not in (10200005,10200006) and brel_entry_date <='||''''||frmDate||''''||'),0)';
QUERY_STR2 :='union all
        select '||''''||frmDate||''''||' as "ToDate",
             pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE,1) as "Company",
             BCRD_LOAN_REMARKS  as "ContractNo",
             null as "Vendor",    
             null as "TotalQuantity", 
             null as "Price/Ton",
             null as "PriceTon",
             NULL  as "PaymentTerms",
             BCRD_SANCTIONED_FCY as "TotalFCYAmount", 
             BCRD_SANCTION_DATE as "ContractDate",
             pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK,2) as "Bank",
             BCRD_DUE_DATE as "MonthlySchedule",
             0 as "Quantity",
             BCRD_SANCTIONED_FCY  as "Amount",            
            nvl((select sum(cdel_cancel_amount) from trtran006 
            where CDEL_TRADE_REFERENCE = A.BCRD_BUYERS_CREDIT
            and cdel_record_status not in (10200005,10200006) and cdel_cancel_date <='||''''||frmDate||''''||'),0) "SettledAmount",';
 QUERY_STR3 := 'pkgreturncursor.fncgetdescription(BCRD_PRODUCT_CATEGORY,2) as Category,
            pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE,2) as Currency,
            NVL(getExposureCoveredAmount(bcrd_buyers_credit,'||''''||frmDate||''''||'),0)as "HedgedFcy",
            ( pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,1,12,1,'||''''||frmDate||''''||',null)  -
            NVL(getExposureCoveredAmount(bcrd_buyers_credit,'||''''||frmDate||''''||'),0))as "UnhedgeAmount",
            BCRD_BUYERS_CREDIT  as "ReverseReference",
            pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,1,12,1,'||''''||frmDate||''''||',null) "OutstandingAmount",
            to_char(ROUND(BCRD_CONVERSION_RATE,4),''999d9999'') as "BenchMarkRate",
            0 as "MTMRate" ,
            0 as "%Increase/DecreaseMTM",
            0 "IncreaseDecreaseMTM",
            ''BuyerCredit'' as TransactionType,
            pkgreturnreport.getCompanyNameFooter()CompanyName
           from trtran045  a
         where ((bcrd_process_complete=12400002) or (bcrd_completion_date >'||''''||frmDate||''''||'
                 and bcrd_process_complete=12400001))
           and bcrd_record_status not in (10200005,10200006)
           and bcrd_due_date >= '||''''||frmDate||''''||'
           and bcrd_request_date<='||''''||frmDate||''''||'';            
        delete from temp; commit;
        insert into temp values (QUERY_STR,'QUERY_STR');
        insert into temp values (Query_Str1,'Query_Str1');
        insert into temp values (QUERY_STR2,'Query_Str1');
        insert into temp values (QUERY_STR3,finalcondition);
        commit;         
       Open Gencursor For QUERY_STR||Query_Str1||QUERY_STR2||QUERY_STR3||'order by  10' ;  
             Goto Process_End;   
  end if;  

  
  If  Varreportid ='CONTRACTPOSITIONBANKNEWNEW' Then
   Open Gencursor For  
  SELECT 3 AS DisplayOrder,
        'Hedged' as  Status,
         frmDate as datDateAsOn,
         pkgreturncursor.fncgetdescription(deal_backup_deal,2) as category1,
         pkgreturncursor.fncgetdescription(deal_company_code,1)  as CompanyCode,
         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as CurrencyCode,
         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as CounterParty,
         to_char(deal_maturity_date,'MON-yy')as MaturityMonth,
         to_char(deal_maturity_date,'YYYYMM') as monthorder,
         round( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
             deal_serial_number,1,1,frmDate)*deal_exchange_rate)/1000000),2)as  AmountLocal1,
                     nvl( CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(to_date(frmDate,'dd/mm/yyyy'),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy1, 
                      
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),1),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy2,    
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),2),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy3,   
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),3),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy4,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),4),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy5, 
                     nvl( CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),5),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),0) end,0) as  AmountFcy6,  
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),6),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy7,  
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),7),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy8,   
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),8),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy9, 
                     nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),9),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy10,
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),10),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy11, 
                      nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),11),'MON') then
         round((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                      deal_serial_number,1,1,frmDate))),2) end,0) as  AmountFcy12,   
                 --avg (DEAL_EXCHANGE_RATE)
         initcap('Amt') as  Datatype,
         initcap('Rate') as Datatype1,
         
         nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(to_date(frmDate,'dd/mm/yyyy'),'MON') then         
        nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate1,
        
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),1),'MON') then
                nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate2,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),2),'MON') then
               nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate3,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),3),'MON') then
                nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate4,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),4),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate5,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),5),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate6,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),6),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate7,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),7),'MON') then
                nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate8,
        
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),8),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate9,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),9),'MON') then
                 nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate10,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),10),'MON') then
              nvl((case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end ),0)end,0) as WtRate11,
        nvl(CASE WHEN TO_CHAR(to_date(deal_MATURITY_DATE,'dd/mm/yyyy'),'MON') = TO_CHAR(add_months(to_date(frmDate,'dd/mm/yyyy'),11),'MON') then
                nvl(( case when DEAL_BASE_CURRENCY = 30400004 then
         round(sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)* DEAL_EXCHANGE_RATE)/
                    sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                    deal_serial_number,1,1,frmDate)),4)
          else
            round(sum(((pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate)* (Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))) * Pkgforexprocess.Fncgetrate(30400004,30400003,deal_execute_date,0,0,deal_execute_date))) /
            sum((pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,frmDate) * Pkgforexprocess.Fncgetrate(DEAL_BASE_CURRENCY,30400004,deal_execute_date,0,0,deal_execute_date))),4)
        end),0) end,0) as WtRate12
        
   from trtran001 
   where  DEAL_RECORD_STATUS not in(10200005,10200006 )
   --and deal_backup_deal=33300001
    and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmDate) <> 0
    
    and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmDate) 
                          or DEAL_PROCESS_COMPLETE = 12400002) 
                          and deal_maturity_date >=frmDate
                          and deal_backup_deal=33300001
                          -- and pkgreturncursor.fncgetdescription(deal_backup_deal,2) = 'NewsPrint'
  group by to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy'),deal_backup_deal,
             deal_company_code,DEAL_BASE_CURRENCY, DEAL_COUNTER_PARTY,deal_MATURITY_DATE
    Order by monthorder ;
               
Goto Process_End; 
 end if;
 
 if  varReportID= 'TRANMATUREDNOTCLOSEDRPTNEW'   then
  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit; 
             SELECT max(hday_calendar_date)
             INTO dattemp
           FROM trsystem001
           WHERE hday_day_status NOT IN(26400007,26400008,26400009) -----chek if last working day is holiday
           AND hday_location_code     = 30299999
           AND hday_calendar_date BETWEEN frmDate AND Last_Day(frmDate);
           IF frmDate = dattemp THEN
              frmDate := Last_Day(frmDate);
           END IF;
OPEN GenCursor for

select
      pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,1) as company,
      pkgreturncursor.fncgetdescription( trsystem997.posn_currency_code,2) as CurrencyCode,
      pkgreturncursor.fncGetDescription(POSN_ACCOUNT_CODE,1) as AccountCode,
      posn_reference_number as ReferenceNo,
      posn_reference_date as ReferenceDate,
      pkgreturncursor.fncGetDescription(posn_counter_party,2) as CounterParty,
      POSN_TRANSACTION_AMOUNT as TransactionAmt,
      POSN_FCY_RATE as FcyRate,
      POSN_DUE_DATE as DueDate,
      pkgreturncursor.fncgetdescription(posn_product_code,2) as ProductCode,
      pkgreturncursor.fncgetdescription(posn_subproduct_code,2) as SubproductCode,
      frmDate as AsonDate,
      toDate as  ToDate
 
from trsystem997 where POSN_DUE_DATE <= frmDate and POSN_TRANSACTION_AMOUNT !=0;
  GOTO process_end;  
  End If;
  
  
 if varReportID ='PRESENTHEDGESTATUSNEW' THEN

  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
  numRecords:=2;                
OPEN GenCursor for
                    
select ProductCode as ProductCode,
       Displayorder,
       pkgreturncursor.fncgetdescription(CompanyCode,1) CompanyCode,
       pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
      
      -- SubProduct AS SubProduct,
       round( AmountFCY,2) AmountFCY,  ExposureType,
       frmdate AS AsOnDate,
       (select distinct  RISK_LIMIT_PERCENT  ||
        ( case
          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
          else  ''
          end)
       from trsystem012
       where risk_risk_type=21000017
         and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=ProductCode
                                                                and  risk_effective_date<= frmdate
                                                               --   and risk_subproduct_code=SubProductCode
                                                                  )
       and risk_product_code=ProductCode) LimitRange
                                
from  (select  POSN_PRODUCT_CODE     AS    ProductCode,
                1 AS Displayorder,  
                posn_company_code     AS    CompanyCode,
                posn_currency_code    AS    CurrencyCode,
              
            --    POSN_PRODUCT_CODE     AS    Product,
           --     POSN_SUBPRODUCT_CODE  AS    SubProduct,
              --  sum(posn_transaction_amount)/1000000   AS    AmountFCY,
                 
                 sum  ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount)/1000000
                  else  (posn_transaction_amount)/1000000
                  
                  end) AmountFCY,  -----added by harinath for sale order values to show negative result 
              
              
              
               (case
                when posn_account_code in
                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
                when posn_account_code in
                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                          then 'Hedged'
                when posn_account_code in
                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when  posn_account_code in
                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                          then 'Hedged'
               end) AS ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
         --   and posn_subproduct_code in  (33800055,33800056,33800057)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,  
               (case
               when posn_account_code in
               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                         then 'Hedged'
               when posn_account_code in
               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                         then 'Hedged'
               end)  
                    
union all
                    
                    
select  nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
        2 displayorder,
        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
      
       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
       -- nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
        ( case
          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
          ELSE ( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1))
          end )*100  AmountFcy,
         '% Hedge - Actual'  ExposureType,
         frmdate AS AsOnDate

  from  (select POSN_PRODUCT_CODE ProductCode,
               posn_company_code CompanyCode,
               posn_currency_code CurrencyCode,
              
               --POSN_PRODUCT_CODE Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
 --              posn_account_code AccountCode,
               sum(posn_transaction_amount/1000000) AmountFCY,
               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          Where Posn_Transaction_Amount!=0 And Posn_Fcy_Rate !=0
           -- and posn_subproduct_code not in (33800060,33800061)
           and  posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,
                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Hedge
          
          full outer join
      
        (select POSN_PRODUCT_CODE  ProductCode,
               posn_company_code CompanyCode,
               posn_currency_code CurrencyCode,
              
              -- POSN_PRODUCT_CODE  Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
               --posn_account_code AccountCode,
               sum(posn_transaction_amount/1000000) AmountFCY,
               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
          and posn_account_code in
              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025,
              25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Exposure
         on hedge.CompanyCode= Exposure.CompanyCode
         and hedge.CurrencyCode= Exposure.CurrencyCode
         and hedge.ProductCode= Exposure.ProductCode
         --and Hedge.subproduct= Exposure.subproduct

union all
                    
--select 3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--       --POSN_PRODUCT_CODE Product,
--       --POSN_SUBPRODUCT_CODE SubProduct,
--       NULL AS SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select AVG(RISK_LIMIT_PERCENT) from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--      frmdate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,
--  posn_subproduct_code,posn_account_code

--------query changed on 27-mar-14 by harinath
select    distinct(POSN_PRODUCT_CODE) ProductCode,
         3 Displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      
       --POSN_PRODUCT_CODE Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,
    --   NULL AS SubProduct,
      --risk_limit_percent || '% - %' ||risk_fluct_ceo
      ( select avg(RISK_LIMIT_PERCENT) from trsystem012
        where risk_risk_type=21000017
          and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=POSN_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
        and risk_product_code=POSN_PRODUCT_CODE
      ) AmountFcy,
      '% Hedge - Policy'  ExposureType,
     frmDate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and posn_account_code in
      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025,
       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087)
  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,posn_account_code

union all
                                
select  POSN_PRODUCT_CODE ProductCode,
       4 displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      -- NULL AS SubProduct,
      -- POSN_PRODUCT_CODE Product,
     --  POSN_SUBPRODUCT_CODE SubProduct,
       round(sum((posn_transaction_amount*posn_fcy_rate))/sum(posn_transaction_amount),4) AmountFcy,
       'Hedge Rate'  ExposureType,
       frmdate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and  posn_account_code in
      (25900018,25900019,25900020,25900021,25900022,25900023,
       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
  group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
          -- POSN_SUBPRODUCT_CODE,
           posn_account_code

union all

select  POSN_PRODUCT_CODE  ProductCode,
       5 displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      
     --  POSN_PRODUCT_CODE  Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,---commented for getting spot rate on 27-mar-2014
      -- NULL AS SubProduct,
      AVG( pkgforexprocess.fncGetRate
       (posn_currency_code,30400003,frmdate,25300001,0,null,0)) AmountFcy,
       'Spot Rate'  ExposureType,
       frmdate AS AsOnDate
    from  trsystem997
    where posn_transaction_amount!=0 and posn_fcy_rate !=0
      --and posn_subproduct_code not in (33800060,33800061)
    --and   posn_account_code in
    --       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
    --        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
    group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code
    order by ProductCode );

 OPEN NextCursor for
         select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
         ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount)
         else  (posn_transaction_amount) end) AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         POSN_M2M_INRRATE AS M2MINRRATE,
         POSN_DUE_DATE AS DUEDATE,
         to_char(to_date(POSN_DUE_DATE),'MON-yy') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case  when posn_account_code in
        (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
        (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012) then 'Hedged'
               when posn_account_code in
        (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
        (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075) then 'Hedged'
               end)   TransType,
        frmdate as frmdate,
        Todate As Todate From Trsystem997;                                                    
                                                    
Goto Process_End;
end if; 

If varReportID='HEDGESTATUSUSDBUCKETINGNEW' THEN  
numRecords:=2;
    numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;   
      
    Pkgreportprograms.prcHedgeStatusUSDRptPopulate(varUserID,frmDate,33399999,33899999);

    finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
    finalCondition:= replace(finalCondition,'DEAL_BACKUP_DEAL','ProductCode');
    finalCondition:= replace(finalCondition,'DEAL_INIT_CODE','SubProductCode');
    finalCondition:= replace(finalCondition,'POSN_DUE_DATE', 'to_date('||''''||frmDate||''''||',''dd-MON-RRRR'')');

     Query_Str :='select  to_char(to_date('||''''||frmDate||''''||'),''dd-MON-yy'') as FromDate,
                      --   to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as FromDate,
                          to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as ToDate,
                          '||''''||sysdate||''''||' as SystemDate,
                          pkgreturnreport.getCompanyName(''SK123'') as CompanyName,
                          DisplayOrder, TransType, ProductCode,SubProductCode,
                           pkgreturncursor.fncgetdescription(ProductCode,2) Product,
                           pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct, 
                           pkgreturncursor.fncgetdescription(Company,2) Company, 
                           pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
                     nvl (Forward1,0) Forward1,
                     nvl (Forward2,0) Forward2 ,
                     nvl (Forward3,0) Forward3 ,
                     nvl (Forward4,0) Forward4 ,
                     nvl (Forward5,0) Forward5 ,
                     nvl (Forward6,0) Forward6 ,
                     nvl (Forward7,0) Forward7 , 
                     nvl (Forward8,0) Forward8 ,
                     nvl (Forward9,0) Forward9 ,
                     nvl (Forward10,0) Forward10 ,
                     nvl (Forward11,0) Forward11 ,
                     nvl (Forward12,0) Forward12 , 
                     nvl (Total,0) Total,
                    LimitRange,LimitPercent,FluctAllowed
             from  report_hedgestatus
             where 1=1 
             '||finalcondition||'';                                   

              delete from temp;commit; 
              insert into temp values(Query_Str,finalCondition);
              commit;
     OPEN GenCursor for Query_Str||finalCondition || ' order by pkgreturncursor.fncgetdescription(ProductCode,2),
                                                               pkgreturncursor.fncgetdescription(SubProductCode,2)'  ;
                                                               
        OPEN NextCursor for
         select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
         POSN_TRANSACTION_AMOUNT AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         POSN_REVALUE_USD AS REVUSD,
         POSN_USD_RATE AS USDRATE,
         POSN_REVALUE_INR AS REVINR,
         POSN_M2M_INRRATE AS M2MINRRATE,
         POSN_DUE_DATE AS DUEDATE,
         to_char(to_date(POSN_DUE_DATE),'MON-yy') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
        25900025,25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Exposure'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedged' end) TransType,
        frmdate as frmdate,
        todate as todate FROM TRSYSTEM997;
 
  Goto Process_End; 
  End If;

 If varReportID='HEDGESTATUSREPORTPRODUCTWISE1' THEN  
          
           --   numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;   
                
            --  PRCCALCULATEGAPEXPOSURE(frmDate,1);
              
              --delete from report_hedgestatus;
              numRecords:=2;
              PKGREPORTPROGRAMS.prcforexsumprodwisePopulate(varUserID,frmDate,33399999,33899999);
              finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
              finalCondition:= replace(finalCondition,'DEAL_BACKUP_DEAL','ProductCode');
              finalCondition:= replace(finalCondition,'DEAL_INIT_CODE','SubProductCode');
              finalCondition:= replace(finalCondition,'POSN_DUE_DATE', 'to_date('||''''||frmDate||''''||',''dd-MON-RRRR'')');
              
              --finalCondition:= replace(finalCondition,'DEAL_BASE_CURRENCY','CurrencyCode');
             Query_Str :='select  to_char(to_date('||''''||frmDate||''''||'),''dd-MON-yy'') as FromDate,
                               --  to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as FromDate,
                                  to_char(to_date('||''''||frmDate||''''||'),''dd-MM-yyyy'') as ToDate,
                                  '||''''||sysdate||''''||' as SystemDate,
                                  pkgreturnreport.getCompanyName(''SK123'') as CompanyName,
                                  DisplayOrder, TransType, ProductCode,SubProductCode,
                                   pkgreturncursor.fncgetdescription(ProductCode,2) Product,
                                   pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct, 
                                   pkgreturncursor.fncgetdescription(Company,2) Company, 
                                   pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
                             nvl (Forward1,0) Forward1,
                             nvl (Forward2,0) Forward2 ,
                             nvl (Forward3,0) Forward3 ,
                             nvl (Forward4,0) Forward4 ,
                             nvl (Forward5,0) Forward5 ,
                             nvl (Forward6,0) Forward6 ,
                             nvl (Forward7,0) Forward7 , 
                             nvl (Forward8,0) Forward8 ,
                             nvl (Forward9,0) Forward9 ,
                             nvl (Forward10,0) Forward10 ,
                             nvl (Forward11,0) Forward11 ,
                             nvl (Forward12,0) Forward12 , 
                             nvl (Total,0) Total,
                            LimitRange,LimitPercent,FluctAllowed
                     from  REPORT_FOREXSUMMARYPRODUCTWISE
                     where 1=1 
                     '||finalcondition||'';                                   
          
                                  delete from temp;commit; 
                                  insert into temp values(Query_Str,finalCondition);
                                  commit;
             OPEN GenCursor for Query_Str||finalCondition || ' order by pkgreturncursor.fncgetdescription(ProductCode,2),
                                                            pkgreturncursor.fncgetdescription(SubProductCode,2)'  ;
  OPEN NextCursor for
         select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
         POSN_TRANSACTION_AMOUNT AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         POSN_REVALUE_USD AS REVUSD,
         POSN_USD_RATE AS USDRATE,
         POSN_REVALUE_INR AS REVINR,
         POSN_M2M_INRRATE AS M2MINRRATE,
         POSN_DUE_DATE AS DUEDATE,
         to_char(to_date(POSN_DUE_DATE),'MON-yy') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
        25900025,25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Exposure'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedged' end) TransType,
        frmdate as frmdate,
        todate as todate FROM TRSYSTEM997;
        
    Goto Process_End; 
    End If;
 
  if varReportID ='ForwardRates' THEN
                  
    OPEN GenCursor for 
      SELECT 
         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
         ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,NULL,0),2) AS SpotRate, 
         'SpotRate' RateType 
 FROM     (  SELECT 0 Months FROM DUAL
          UNION ALL
          SELECT 1 Months FROM DUAL
          UNION ALL
          SELECT 2 Months FROM DUAL
          UNION ALL
          SELECT 3 Months FROM DUAL
          UNION ALL
          SELECT 4 Months FROM DUAL
          UNION ALL
          SELECT 5 Months FROM DUAL
          UNION ALL
          SELECT 6 Months FROM DUAL
          UNION ALL
          SELECT 7 Months FROM DUAL
          UNION ALL
          SELECT 8 Months FROM DUAL
          UNION ALL
          SELECT 9 Months FROM DUAL
          UNION ALL
          SELECT 10 Months FROM DUAL
          UNION ALL
          SELECT 11 Months FROM DUAL
         )
union all
 SELECT 
         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
         ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,last_day(ADD_MONTHS(frmdate,Months)),0),2)  AS SpotRate,
         'Forward Rates' RateType 
  FROM   (  SELECT 0 Months FROM DUAL
          UNION ALL
          SELECT 1 Months FROM DUAL
          UNION ALL
          SELECT 2 Months FROM DUAL
          UNION ALL
          SELECT 3 Months FROM DUAL
          UNION ALL
          SELECT 4 Months FROM DUAL
          UNION ALL
          SELECT 5 Months FROM DUAL
          UNION ALL
          SELECT 6 Months FROM DUAL
          UNION ALL
          SELECT 7 Months FROM DUAL
          UNION ALL
          SELECT 8 Months FROM DUAL
          UNION ALL
          SELECT 9 Months FROM DUAL
          UNION ALL
          SELECT 10 Months FROM DUAL
          UNION ALL
          SELECT 11 Months FROM DUAL
       ) 
UNION ALL 
                
   SELECT 
          to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityDate,
          to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
   (ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,last_day(ADD_MONTHS(frmdate,Months)),0),2) -
    ROUND(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,GConst.SALEDEAL,0,NULL,0),2)) AS SpotRate,
         'Premium' RateType 
                  FROM     (  SELECT 0 Months FROM DUAL
          UNION ALL
          SELECT 1 Months FROM DUAL
          UNION ALL
          SELECT 2 Months FROM DUAL
          UNION ALL
          SELECT 3 Months FROM DUAL
          UNION ALL
          SELECT 4 Months FROM DUAL
          UNION ALL
          SELECT 5 Months FROM DUAL
          UNION ALL
          SELECT 6 Months FROM DUAL
          UNION ALL
          SELECT 7 Months FROM DUAL
          UNION ALL
          SELECT 8 Months FROM DUAL
          UNION ALL
          SELECT 9 Months FROM DUAL
          UNION ALL
          SELECT 10 Months FROM DUAL
          UNION ALL
          SELECT 11 Months FROM DUAL
        )
          
      ORDER BY monthorder;
       Goto Process_End;
      end if;
      
      if varReportID ='HedgeStatusAsOn' THEN

  numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
  numRecords:=2;                
OPEN GenCursor for
                    
select ProductCode as ProductCode,
       Displayorder,
       pkgreturncursor.fncgetdescription(CompanyCode,1) CompanyCode,
       pkgreturncursor.fncgetdescription(CurrencyCode,2) CurrencyCode,
       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
      
      -- SubProduct AS SubProduct,
       round( AmountFCY,2) AmountFCY,  ExposureType,
       frmdate AS AsOnDate,
       (select distinct  RISK_LIMIT_PERCENT  ||
        ( case
          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
          else  ''
          end)
       from trsystem012
       where risk_risk_type=21000017
         and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=ProductCode
                                                                and  risk_effective_date<= frmdate
                                                               --   and risk_subproduct_code=SubProductCode
                                                                  )
       and risk_product_code=ProductCode) LimitRange
                                
from  (select  POSN_PRODUCT_CODE     AS    ProductCode,
                1 AS Displayorder,  
                posn_company_code     AS    CompanyCode,
                posn_currency_code    AS    CurrencyCode,
              
            --    POSN_PRODUCT_CODE     AS    Product,
           --     POSN_SUBPRODUCT_CODE  AS    SubProduct,
              --  sum(posn_transaction_amount)/1000000   AS    AmountFCY,
                 
                 sum  ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount)/1000000
                  else  (posn_transaction_amount)/1000000
                  
                  end) AmountFCY,  -----added by harinath for sale order values to show negative result 
              
              
              
               (case
                when posn_account_code in
                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
                when posn_account_code in
                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                          then 'Hedged'
                when posn_account_code in
                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when  posn_account_code in
                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                          then 'Hedged'
               end) AS ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
         --   and posn_subproduct_code in  (33800055,33800056,33800057)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,  
               (case
               when posn_account_code in
               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                         then 'Hedged'
               when posn_account_code in
               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                         then 'Hedged'
               end)  
                    
union all
                    
                    
select  nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
        2 displayorder,
        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
      
       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
       -- nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
        ( case
          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
          ELSE ( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1))
          end )*100  AmountFcy,
         '% Hedge - Actual'  ExposureType,
         frmdate AS AsOnDate

  from  (select POSN_PRODUCT_CODE ProductCode,
               posn_company_code CompanyCode,
               posn_currency_code CurrencyCode,
              
               --POSN_PRODUCT_CODE Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
 --              posn_account_code AccountCode,
               sum(posn_transaction_amount/1000000) AmountFCY,
               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          Where Posn_Transaction_Amount!=0 And Posn_Fcy_Rate !=0
           -- and posn_subproduct_code not in (33800060,33800061)
           and  posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,
                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Hedge
          
          full outer join
      
        (select POSN_PRODUCT_CODE  ProductCode,
               posn_company_code CompanyCode,
               posn_currency_code CurrencyCode,
              
              -- POSN_PRODUCT_CODE  Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
               --posn_account_code AccountCode,
               sum(posn_transaction_amount/1000000) AmountFCY,
               sum((posn_transaction_amount*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
          and posn_account_code in
              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025,
              25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087)
          group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE) Exposure
         on hedge.CompanyCode= Exposure.CompanyCode
         and hedge.CurrencyCode= Exposure.CurrencyCode
         and hedge.ProductCode= Exposure.ProductCode
         --and Hedge.subproduct= Exposure.subproduct

union all
                    
--select 3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--       --POSN_PRODUCT_CODE Product,
--       --POSN_SUBPRODUCT_CODE SubProduct,
--       NULL AS SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select AVG(RISK_LIMIT_PERCENT) from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--      frmdate AS AsOnDate
--  from trsystem997
--  where posn_transaction_amount!=0 and posn_fcy_rate !=0
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,
--  posn_subproduct_code,posn_account_code

--------query changed on 27-mar-14 by harinath
select    distinct(POSN_PRODUCT_CODE) ProductCode,
         3 Displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      
       --POSN_PRODUCT_CODE Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,
    --   NULL AS SubProduct,
      --risk_limit_percent || '% - %' ||risk_fluct_ceo
      ( select avg(RISK_LIMIT_PERCENT) from trsystem012
        where risk_risk_type=21000017
          and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=POSN_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
        and risk_product_code=POSN_PRODUCT_CODE
      ) AmountFcy,
      '% Hedge - Policy'  ExposureType,
     frmDate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and posn_account_code in
      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025,
       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087)
  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,posn_account_code

union all
                                
select  POSN_PRODUCT_CODE ProductCode,
       4 displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      -- NULL AS SubProduct,
      -- POSN_PRODUCT_CODE Product,
     --  POSN_SUBPRODUCT_CODE SubProduct,
       round(sum((posn_transaction_amount*posn_fcy_rate))/sum(posn_transaction_amount),4) AmountFcy,
       'Hedge Rate'  ExposureType,
       frmdate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and  posn_account_code in
      (25900018,25900019,25900020,25900021,25900022,25900023,
       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
  group by posn_company_code,posn_currency_code,POSN_PRODUCT_CODE,
          -- POSN_SUBPRODUCT_CODE,
           posn_account_code

union all

select  POSN_PRODUCT_CODE  ProductCode,
       5 displayorder,
       posn_company_code CompanyCode,
       posn_currency_code CurrencyCode,
      
     --  POSN_PRODUCT_CODE  Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,---commented for getting spot rate on 27-mar-2014
      -- NULL AS SubProduct,
      AVG( pkgforexprocess.fncGetRate
       (posn_currency_code,30400003,frmdate,25300001,0,null,0)) AmountFcy,
       'Spot Rate'  ExposureType,
       frmdate AS AsOnDate
    from  trsystem997
    where posn_transaction_amount!=0 and posn_fcy_rate !=0
      --and posn_subproduct_code not in (33800060,33800061)
    --and   posn_account_code in
    --       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
    --        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
    group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code
    order by ProductCode );

 OPEN NextCursor for
         select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
          ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount)
         else  (posn_transaction_amount) end) AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         POSN_M2M_INRRATE AS M2MINRRATE,
         POSN_DUE_DATE AS DUEDATE,
         to_char(to_date(POSN_DUE_DATE),'MON-yy') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case  when posn_account_code in
        (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
        (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012) then 'Hedged'
               when posn_account_code in
        (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
        (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075) then 'Hedged'
               end)   TransType,
        frmdate as frmdate,
        todate as todate FROM TRSYSTEM997;                                                    
                                                    
GoTo Process_End;
end if;

 if varReportID ='HedgeStatusAsOnUSD' THEN

  --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
  numRecords:=2;                   
OPEN GenCursor for                    
select ProductCode as ProductCode,
       Displayorder,
       pkgreturncursor.fncgetdescription(CompanyCode,2) CompanyCode,
       pkgreturncursor.fncgetdescription(30400004,2) CurrencyCode,
       pkgreturncursor.fncgetdescription(ProductCode,2) Product,
      
      -- SubProduct AS SubProduct,
        round( AmountFCY,2) AmountFCY,  ExposureType,
       frmdate AS AsOnDate,
       (select distinct  RISK_LIMIT_PERCENT  ||
        ( case
          when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then ' - ' ||  RISK_FLUCT_ALLOWED
          else  ''
          end)
       from trsystem012
       where risk_risk_type=21000017
         and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=ProductCode
                                                                and  risk_effective_date<= frmdate
                                                               --   and risk_subproduct_code=SubProductCode
                                                                  )
       and risk_product_code=ProductCode) LimitRange
                                
from  (select  POSN_PRODUCT_CODE     AS    ProductCode,
                1 AS Displayorder,  
                posn_company_code     AS    CompanyCode,
                30400004    AS    CurrencyCode,
              
            --    POSN_PRODUCT_CODE     AS    Product,
           --     POSN_SUBPRODUCT_CODE  AS    SubProduct,
              --  sum(posn_revalue_usd)/1000000   AS    AmountFCY,
                 
                 sum  ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount * posn_usd_rate)/1000000
                  else  (posn_transaction_amount * posn_usd_rate)/1000000
                  
                  end) AmountFCY,  -----added by harinath for sale order values to show negative result 
              
              
              
               (case
                when posn_account_code in
                (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
                when posn_account_code in
                (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                          then 'Hedged'
                when posn_account_code in
                (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when  posn_account_code in
                (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                          then 'Hedged'
               end) AS ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
         --   and posn_subproduct_code in  (33800055,33800056,33800057)
          group by posn_company_code,30400004,POSN_PRODUCT_CODE, 
               (case
               when posn_account_code in
               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
                                                                                         then 'Hedged'
               when posn_account_code in
               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
                                                                                         then 'Hedged'
               end)  
                    
union all
                    
                    
select  nvl(Hedge.ProductCode, Exposure.ProductCode) ProductCode,
        2 displayorder,
        nvl(Hedge.CompanyCode,Exposure.CompanyCode) CompanyCode,
        nvl(Hedge.CurrencyCode,Exposure.CurrencyCode) CurrencyCode,
      
       -- nvl(Hedge.ProductCode, Exposure.ProductCode) Product,
       -- nvl(Hedge.SubProduct, Exposure.SubProduct) SubProduct,
        ( case
          when   (Exposure.AmountFCY IS NULL) OR  (Exposure.AmountFCY =0) THEN 0
          when   (Hedge.AmountFCY IS NULL) OR  (Hedge.AmountFCY =0) THEN 0
          ELSE ( nvl(Hedge.AmountFCY,1) /nvl(Exposure.AmountFCY,1))
          end )*100  AmountFcy,
         '% Hedge - Actual'  ExposureType,
         frmdate AS AsOnDate
         
  from  (select POSN_PRODUCT_CODE ProductCode,
               posn_company_code CompanyCode,
               30400004 CurrencyCode,
              
               --POSN_PRODUCT_CODE Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
              -- posn_account_code AccountCode,
               sum(posn_transaction_amount * posn_usd_rate/1000000) AmountFCY,
               sum(((posn_transaction_amount * posn_usd_rate)*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*(posn_transaction_amount * posn_usd_rate)),0) AmountMTMLocal,
--               (case
--               when  posn_account_code in
--               (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012)
--                                                                                         then 'Hedge Buy'
--               when posn_account_code in
--               (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--                                                                                         then 'Hedge Sell'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
          from trsystem997
          Where posn_transaction_amount!=0 And Posn_Fcy_Rate !=0
           -- and posn_subproduct_code not in (33800060,33800061)
           and  posn_account_code in
               (25900018,25900019,25900020,25900021,25900022,25900023,
                25900014,25900015,25900011,25900012,25900061,25900062,25900078,
                25900079,25900082,25900083,25900084,25900085,25900074,25900075)
          group by posn_company_code,30400004,POSN_PRODUCT_CODE) Hedge
          
          full outer join
      
        (select POSN_PRODUCT_CODE  ProductCode,
               posn_company_code CompanyCode,
               30400004 CurrencyCode,
              
              -- POSN_PRODUCT_CODE  Product,
              -- POSN_SUBPRODUCT_CODE SubProduct,
              -- posn_account_code AccountCode,
               sum(posn_transaction_amount * posn_usd_rate/1000000) AmountFCY,
               sum(((posn_transaction_amount * posn_usd_rate)*posn_fcy_rate)/1000000) AmountLocal,
               nvl(sum(posn_M2M_INRRATE*(posn_transaction_amount * posn_usd_rate)),0) AmountMTMLocal,
--               
--               sum(posn_revalue_usd/1000000) AmountFCY,
--               sum((posn_revalue_usd*posn_fcy_rate)/1000000) AmountLocal,
--               nvl(sum(posn_M2M_INRRATE*posn_revalue_usd),0) AmountMTMLocal,
--               (case
--               when posn_account_code in
--               (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--               when posn_account_code in
--               (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--               end) ExposureType,
                null as ExposureType,
               frmdate AS AsOnDate
                     
          from trsystem997
          where posn_transaction_amount!=0 and posn_fcy_rate !=0
          --  and posn_subproduct_code not in (33800060,33800061)
          and posn_account_code in
              (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025,
               25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087)
          group by posn_company_code,30400004,POSN_PRODUCT_CODE) Exposure
         on hedge.CompanyCode= Exposure.CompanyCode
         ---and hedge.CurrencyCode= Exposure.CurrencyCode
         and hedge.ProductCode= Exposure.ProductCode
         --and Hedge.subproduct= Exposure.subproduct

union all
                    
--select 3 Displayorder,
--       posn_company_code CompanyCode,
--       posn_currency_code CurrencyCode,
--       POSN_PRODUCT_CODE ProductCode,
--       --POSN_PRODUCT_CODE Product,
--       --POSN_SUBPRODUCT_CODE SubProduct,
--       NULL AS SubProduct,
--      --risk_limit_percent || '% - %' ||risk_fluct_ceo
--      ( select AVG(RISK_LIMIT_PERCENT) from trsystem012
--        where risk_risk_type=21000017
--        and risk_product_code=POSN_PRODUCT_CODE
--        and risk_subproduct_code=POSN_SUBPRODUCT_CODE) AmountFcy,
--      '% Hedge - Policy'  ExposureType,
--      frmdate AS AsOnDate
--  from trsystem997
--  where posn_revalue_usd!=0 and posn_fcy_rate !=0
--  and posn_account_code in
--      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
--       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--  group by posn_currency_code,POSN_PRODUCT_CODE,posn_company_code,
--  posn_subproduct_code,posn_account_code

--------query changed on 27-mar-14 by harinath
select    distinct(POSN_PRODUCT_CODE) ProductCode,
         3 Displayorder,
       posn_company_code CompanyCode,
       30400004 CurrencyCode,
      
       --POSN_PRODUCT_CODE Product,
      -- POSN_SUBPRODUCT_CODE SubProduct,
    --   NULL AS SubProduct,
      --risk_limit_percent || '% - %' ||risk_fluct_ceo
      ( select avg(RISK_LIMIT_PERCENT) from trsystem012
        where risk_risk_type=21000017
          and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=POSN_PRODUCT_CODE
                                                                  and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  )
        and risk_product_code=POSN_PRODUCT_CODE
      ) AmountFcy,
      '% Hedge - Policy'  ExposureType,
     frmDate AS AsOnDate
  from trsystem997
  where posn_transaction_amount!=0 and posn_fcy_rate !=0
   -- and posn_subproduct_code not in (33800060,33800061)
  and posn_account_code in
      (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025,
       25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087)
  group by 30400004,POSN_PRODUCT_CODE,posn_company_code,posn_account_code

--union all
--                                
--select  POSN_PRODUCT_CODE ProductCode,
--       4 displayorder,
--       posn_company_code CompanyCode,
--       30400004 CurrencyCode,
--      -- NULL AS SubProduct,
--      -- POSN_PRODUCT_CODE Product,
--     --  POSN_SUBPRODUCT_CODE SubProduct,
--
----      Case When Posn_Currency_Code = 30400004 Then
----       Round(Sum((Posn_Revalue_Usd*Posn_Fcy_Rate))/Sum(Posn_Revalue_Usd),4)
----     Else
----       Round(Sum((Posn_Revalue_Usd*(Posn_Fcy_Rate/POSN_USD_RATE)))/Sum(Posn_Revalue_Usd),4)
----     End AmountFcy,
--       Round(Sum(Posn_Revalue_Usd*(Posn_Fcy_Rate/decode(Posn_Currency_Code,30400004,1,Posn_Usd_Rate)))/Sum(Posn_Revalue_Usd),4) AmountFcy,
--       'Hedge Rate'  ExposureType,
--       frmdate AS AsOnDate  
--  from trsystem997
--  where posn_revalue_usd!=0 and posn_fcy_rate !=0
--   -- and posn_subproduct_code not in (33800060,33800061)
--  and  posn_account_code in
--      (25900018,25900019,25900020,25900021,25900022,25900023,
--       25900014,25900015,25900011,25900012,25900061,25900062,25900078,
--       25900079,25900082,25900083,25900084,25900085,25900074,25900075)
--  group by posn_company_code,POSN_PRODUCT_CODE,
--          -- POSN_SUBPRODUCT_CODE,
--           posn_account_code
--
--union all
--
--select  POSN_PRODUCT_CODE  ProductCode,
--       5 displayorder,
--       posn_company_code CompanyCode,
--       30400004 CurrencyCode,
--      
--     --  POSN_PRODUCT_CODE  Product,
--      -- POSN_SUBPRODUCT_CODE SubProduct,---commented for getting spot rate on 27-mar-2014
--      -- NULL AS SubProduct,
--      AVG( pkgforexprocess.fncGetRate
--       (30400004,30400003,frmdate,25300001,0,null,0)) AmountFcy,
--       'Spot Rate'  ExposureType,
--       frmdate AS AsOnDate
--from  trsystem997
--where posn_revalue_usd!=0 and posn_fcy_rate !=0
--  --and posn_subproduct_code not in (33800060,33800061)
----and   posn_account_code in
----       (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
----        25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086)
--group by 30400004,POSN_PRODUCT_CODE,posn_company_code
order by ProductCode );     
Open NextCursor for
         select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
         POSN_TRANSACTION_AMOUNT AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         POSN_M2M_INRRATE AS M2MINRRATE,
         posn_usd_rate as usdrate,
         (case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in(
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount * posn_usd_rate)
                        else (posn_transaction_amount * posn_usd_rate) end) AMOUNTUSD,
         POSN_DUE_DATE AS DUEDATE,
         POSN_PRODUCT_CODE ProductCode,
         to_char(to_date(POSN_DUE_DATE),'MON-yy') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case  when posn_account_code in
        (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
        (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012) then 'Hedged'
               when posn_account_code in
        (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
        (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075) then 'Hedged'
               end)   TransType,
        frmdate as frmdate,
        todate as todate FROM TRSYSTEM997;                                                      
Goto Process_End;
end if;

if VARREPORTID= 'NewPaymentFCY' then
  
--  if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
  
 -- numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
 --  pkgreportprograms.prcFxForcastReportPopulate(frmDate);
  
   Open Gencursor For 
    Select Displayorder,Status,
    Companycode,Maturitymonth,monthorder,Currencycode,Amountfcy1 From
    (Select 1 Displayorder , 'Settled' Status, 
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         Pkgreturncursor.Fncgetdescription(Currencycode,2) Currencycode,
         round(sum(AmountLocal)/Sum(AmountFCY),2) AmountFcy1
    from Report_FxForcast
    where status ='NP Payment'
    And Datatype In ('Actual')
    And Amountfcy<>0 
   -- and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    Group By Companycode,Maturitymonth,Maturitymonthdate,Displayorder,Status,Currencycode)    
    union all
    select 1 DisplayOrder , 'Settled' Status, 
         CompanyCode,'Total',(select Maturitymonthdate from 
                                Report_FxForcast
                               where datatype = 'Total'
                               group by Maturitymonthdate ) monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(sum(AmountLocal)/sum(AmountFCY),2) AmountFcy1
    from Report_FxForcast
    where status ='NP Payment'
    and datatype in ('Actual')
    and AmountFCY<>0
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by  pkgreturncursor.fncgetdescription(currencycode,2),companycode
    
    union all
    select 2 DisplayOrder, 'Hedged' Status, 
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         AmountFCY AmountFcy1
    from Report_FxForcast
    where status ='Hedge Rate'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
    select 3 DisplayOrder , 'Open' Status, 
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         AmountFCY AmountFcy1
    from Report_FxForcast
    where status ='Unhedged Forward Rate'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
--    select 4 DisplayOrder , 'Total' Status, 
--            CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
--            pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
--            AmountFCY AmountFcy1
--    from Report_FxForcast 
--    where status ='Wt. Avg. Rate'
--    and AmountFcy !=0;
    
     select 4 DisplayOrder , 'Total' Status,
           CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
           pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
           round((sum(AmountLocal)/1000000)/(sum(AmountFCY)/1000000),2) AmountFcy1
          -- round(sum(AmountLocal)/1000000,2) AmountLocal1
    from Report_FxForcast where status ='NP Payment'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by CompanyCode,MaturityMonth,Maturitymonthdate,
           currencycode;    
 Open NextCursor for
         select Status,refnumber,CompanyCode,Bank,Category,SubCategory,refdate,duedate,MaturityMonth,MaturityMonthDate,
              Currencycode,AmountFcy1,rate,AmountLocal1,wtrate,DataType,frmdate asondate from(
              select 'Settled' Status, Trad_Trade_Reference refnumber,
                       pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,2)  CompanyCode,
                       pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
                       pkgreturncursor.fncgetdescription(deal_backup_deal,2) Category,
                       pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
                       deal_execute_date refdate,
                       cdel_cancel_DATE duedate,to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
                        to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonthDate,
                       pkgreturncursor.fncgetdescription(Deal_Base_Currency,2) Currencycode,
                      (cdel_cancel_amount) AmountFcy1,Cdel_Cancel_Rate rate,
                        (Cdel_Cancel_Amount*Cdel_Cancel_Rate)- nvl(Pandl.Pandl,0) AmountLocal1,
                           round((Cdel_Cancel_Amount*Cdel_Cancel_Rate- nvl(Pandl.Pandl,0))/(cdel_cancel_amount),2) wtrate,
                          (case when frmdate >= cdel_cancel_DATE  then 'Actual'
                           else 'Projected' end)  DataType
                      From Trtran006 B inner join Trtran002 A
                            on A.Trad_Trade_Reference=B.Cdel_Trade_Reference 
                            inner join Trtran001 C
                            on B.Cdel_Deal_Number=C.Deal_Deal_Number left outer join
                              (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,(CDEL_PROFIT_LOSS)  Pandl 
                                from trtran006 a2, trtran001 b2
                               where cdel_deal_number= deal_deal_number
                                 and  deal_backup_deal=33300001
                                 and Cdel_Cancel_Amount!=0
                                 -- and to_char(a2.cdel_cancel_DATE,'MON-yy') = to_char(a1.cdel_cancel_DATE,'MON-yy')
                                  And Cdel_Cancel_Date Between tempDate And frmdate
                                  and deal_base_currency=30400004
                                  and deal_other_currency =30400003
                                  and cdel_cancel_type=27000001
                                  --group by to_char(cdel_cancel_DATE,'YYYYMM')
                                  ) PandL
                                on PandL.MaturityMonth= to_char(cdel_cancel_DATE,'YYYYMM')
                                    Where 
                                    A.Trad_Product_Category=33300001 
--                                    And C.Deal_Backup_Deal=33300001 
--                                    And B.Cdel_Cancel_Date Between tempDate And frmdate
                                    And B.Cdel_Record_Status Not In(10200006,10200005) 
                                    And Cdel_Trade_Reference Is Not Null 
                                    And Deal_Base_Currency=30400004
                                    and deal_RECORD_STATUS not in(10200005,10200006 ) 
                                    --and cdel_cancel_type =27000002
                                    and a.trad_record_status in(10200001,10200002,10200003,10200004,10200005)
                        AND CDEL_CANCEL_DATE <= '30-apr-17'
           UNION ALL
                        SELECT 'Settled' Status,trad_trade_reference refnumber,
                        pkgreturncursor.fncgetdescription(trad_company_code,2)  CompanyCode,
                        pkgreturncursor.fncgetdescription(trad_local_bank,2) Bank,
                        pkgreturncursor.fncgetdescription(trad_product_category,2) Category,
                        pkgreturncursor.fncgetdescription(trad_subproduct_code,2) SubCategory,
                        trad_reference_date refdate,
                        trad_maturity_date duedate,
                                to_char(trad_maturity_date,'MON-YY')      AS MaturityMonth,
                                to_char(trad_maturity_date,'YYYYMM')      AS MaturityMonthDate,
                                pkgreturncursor.fncgetdescription(trad_trade_currency,2)   AS CurrencyCode,
                                (LOLN_ADJUSTED_FCY)                    AS AmountFcy1,
                                BCRD_SPOT_RATE rate,
                                round((LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)              AS AmountLocal1,
                                 round((LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE)/(LOLN_ADJUSTED_FCY),2) wtrate,
                                (case when frmdate >= trad_maturity_date  then 'Actual'
                                 else 'Projected' end) DataType
                          FROM trtran002,trtran003,trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                         --and brel_entry_date between  tempDate And frmdate
                          AND brel_trade_reference    = loln_trade_reference
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          and Trad_Product_Category=33300001 
                          and LOLN_ADJUSTED_FCY!=0 
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                           AND trad_maturity_date <= frmdate
                     union all
                           SELECT 'Hedged' Status,posn_reference_number refnumber,
                           pkgreturncursor.fncgetdescription(posn_company_code,2) CompanyCode,
                           pkgreturncursor.fncgetdescription(posn_counter_party,2) Bank,
                           pkgreturncursor.fncgetdescription(posn_product_code,2) Category,
                           pkgreturncursor.fncgetdescription(posn_subproduct_code,2) SubCategory,
                           posn_reference_date refdate,
                           posn_due_date duedate,
                           to_char(posn_due_date,'MON-yy') MaturityMonth,
                           to_char(posn_due_date,'YYYYMM') MaturityMonthDate,
                           pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
                          (POSN_TRANSACTION_AMOUNT) AmountFcy1,                          
                          POSN_FCY_RATE rate,
                          (POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
                          round(((POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ 
                                DECODE(POSN_TRANSACTION_AMOUNT,0,1,POSN_TRANSACTION_AMOUNT)),2) wtrate,
                          (case when frmdate > posn_due_date  then 'Actual'
                                else 'Projected' end)
              from trsystem997
              where posn_transaction_amount!=0
              and posn_fcy_rate !=0
              And Posn_Product_Code=33300001
              and posn_currency_code=30400004
              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                        25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                        25900085,25900074,25900075));
    
--  select 
--  displayOrder,
--  Status,datDateAsOn,CompanyCode,CurrencyCode,MaturityMonth, 
--          monthorder, AmountFcy1,AmountLocal1
--   from ( 
-- 
-- select   
-- 1 as DisplayOrder,
--             'Settled' Status,
--          frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--     round(  ( ( ( sum(cdel_cancel_amount * trad_trade_rate/1000000)) - 
--     ( sum((select 
--       sum(CDEL_PROFIT_LOSS/1000000) 
--            from trtran001, trtran006
--       where deal_deal_number= cdel_deal_number
--          and CDEL_CANCEL_DATE <= frmdate
--         and deal_backup_deal=33300001
--        and deal_record_status not in(12400005,12400006)
--       and cdel_record_status not in (12400005,12400006)
--       and CDEL_CANCEL_DATE between tempDate and frmdate
--       and to_char(deal_maturity_date,'MON-yy') = to_char(trad_maturity_date,'MON-yy')
--       group by 
--       to_char(deal_maturity_date,'MON-yy') ,to_char(deal_maturity_date,'yy'),
--       to_char(deal_maturity_date,'MM-yy'))))) / (sum(cdel_cancel_amount/1000000))),2) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--         
--                  from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate 
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                      and trad_maturity_date  between tempDate and frmdate
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >=tempDate
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--           
-- union all
--            select 
--            2 as DisplayOrder,
--            'Hedged' Status,
--                   frmdate datDateAsOn,
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--       round( ( (sum(pkgForexProcess.fncGetOutstanding
--               (deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) /
--               (sum(pkgForexProcess.fncGetOutstanding
--                (deal_deal_number,deal_serial_number,1,1,frmdate))/1000000)),2) AmountFcy1,
--               (sum(pkgForexProcess.fncGetOutstanding
--               (deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001 
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 ) 
--                 and deal_backup_deal=33300001
--                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE > frmdate) or DEAL_PROCESS_COMPLETE = 12400002) 
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
-- union all
-- SELECT  
-- 3 as DisplayOrder,
--         'Open' Status,
--         frmdate datDateAsOn,
--          (select distinct(trad_company_code) from trtran002) CompanyCode,
--         pkgreturncursor.fncgetdescription(30400004,2) as CurrencyCode,
--         to_char(ADD_MONTHS(frmdate,Months),'MON-YY') AS MaturityMonth,
--         to_char(ADD_MONTHS(frmdate,Months),'YYYYMM') monthorder,
--         trunc(PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,0,0,ADD_MONTHS(frmdate,Months),0),2)  AS AmountLocal1,
--         1 as AmountFcy1
--         
--  FROM   ( 
--          SELECT 1 Months FROM DUAL
--          UNION ALL
--          SELECT 2 Months FROM DUAL
--          UNION ALL
--          SELECT 3 Months FROM DUAL
--          UNION ALL
--          SELECT 4 Months FROM DUAL
--          UNION ALL
--          SELECT 5 Months FROM DUAL
--          UNION ALL
--          SELECT 6 Months FROM DUAL
--         )
--         order by monthorder);
   Goto Process_End;   
  end if;
  
   if varReportID='PastPerformance' then
      open GenCursor For
                  
                                select * from
                                (select bank_local_bank BankLocalBank, pkgreturncursor.fncgetdescription(bank_local_bank,2) "LocalBank",
                                    (bank_limit_amount)/1000000 "PPLimit", frmdate as dateason,
                                    (select Min(bank_limit_amount)/1000000 --This line added by Ishwarachadra for taking Minimum  pplimit
                                    from trtran015 a where  bank_limit_type =31100004 and bank_limit_amount > 0 
                                    and bank_record_status not in (10200005,10200006) and a.bank_local_bank = bank_local_bank)
                                    "MimiumPPLimit"
                                 from trtran015
                                      where bank_limit_type =31100004
                                      and bank_record_status not in (10200005,10200006)) limits left outer join
                                (select pkgreturncursor.fncgetdescription(deal_company_code,1) CompanyCode,
                                deal_counter_party  DealCounterparty ,
                                pkgreturncursor.fncgetdescription(deal_counter_party,2) CounterParty,
                                    nvl( ( sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
                                             GConst.UTILTRADEDEAL, GConst.AMOUNTFCY,frmdate) *
                                              pkgforexprocess.fncGetRate(deal_base_currency,30400004,
                               frmdate,deal_buy_sell,0,null,0) ))/1000000,0)
                                             
                                             "Utilised"
                                from trtran001
                                
                                      where deal_record_status not in (10200005,10200006)
                                      --added on 240114------------
                                     -- and deal_deal_number= cdel_deal_number
                                   ---   and deal_execute_date >='01-apr-2012'
                                      and ((deal_process_complete=12400002) or 
                                          ((deal_complete_date is null) or (deal_complete_date > frmDate)) )
                                      and deal_record_status not in(12400005,12400006)
                                      --and deal_backup_deal=33300001
                                     -- and cdel_record_status not in (12400005,12400006)
                                      group by deal_counter_party,pkgreturncursor.fncgetdescription(deal_company_code,1)) Utilised
                                      
                                      on limits.BankLocalBank= Utilised.DealCounterparty;
  Goto Process_End;
  End if;
  
  if VARREPORTID= 'PaymentReportFCY' then

--    
--   if (to_char(frmDate,'MM') <=4) then
--              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
--              --dattemp := ;
--              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--                
--             -- dattemp:= '31-MAR-' ||to_char(frmDate,'YYYY');
--              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
--         else
--         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
--         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
--         --dattemp:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
--         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
--       end if;
--   

--pkgreportprograms.prcFxForcastReportPopulate(frmDate);
  -- numRecords:=2;
   open gencursor for 
   SELECT DisplayOrder,Status,datDateAsOn,CompanyCode,MaturityMonth,monthorder,
   CurrencyCode,AmountFcy1,AmountLocal1 from(
    select 4 DisplayOrder , 'Total NP Payments' Status,frmdate datDateAsOn,
           CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
           pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
           round(sum(AmountFCY)/1000000,2) AmountFcy1,
           round(sum(AmountLocal)/1000000,2) AmountLocal1
    from Report_FxForcast where status ='NP Payment'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by CompanyCode,MaturityMonth,Maturitymonthdate,
           currencycode
    union all
    select 1 DisplayOrder , 'Settled' Status,frmdate datDateAsOn,
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(AmountFCY/1000000,2) AmountFcy1,
         round(AmountLocal/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='NP Payment'
    and datatype in ('Actual')
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
    select 1 DisplayOrder , 'Settled' Status,frmdate datDateAsOn,
         CompanyCode,'Total',(select Maturitymonthdate 
                               from Report_FxForcast
                              where MaturityMonth ='Total' 
                              group by Maturitymonthdate) monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(sum(AmountFCY)/1000000,2) AmountFcy1,
         round(sum(AmountLocal)/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='NP Payment'
    and datatype in ('Actual')
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    group by CompanyCode,currencycode    
    union all
    select 2 DisplayOrder , 'Hedged' Status,frmdate datDateAsOn,
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription(currencycode,2) CurrencyCode,
         round(AmountFCY/1000000,2) AmountFcy1,
         round(AmountLocal/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='Hedge Exposure'
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM')
    union all
    select 3 DisplayOrder , 'Open' Status,frmdate datDateAsOn,
         CompanyCode,MaturityMonth,Maturitymonthdate monthorder,
         pkgreturncursor.fncgetdescription( currencycode,2) CurrencyCode ,
         round(AmountFCY/1000000,2) AmountFcy1,
         round(AmountLocal/1000000,2) AmountLocal1
    from Report_FxForcast
    where status ='Unhedged Exposure');
    Open NextCursor for
     select Status,refnumber,CompanyCode,Bank,Category,SubCategory,refdate,duedate,MaturityMonth,MaturityMonthDate,
              Currencycode,AmountFcy1,rate,AmountLocal1,DataType,frmdate asondate from(
              select 'Settled' Status, Trad_Trade_Reference refnumber,
                       pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,2)  CompanyCode,
                       pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
                       pkgreturncursor.fncgetdescription(deal_backup_deal,2) Category,
                        pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
                        deal_execute_date refdate,
                       cdel_cancel_DATE duedate,to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
                        to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonthDate,
                       pkgreturncursor.fncgetdescription(Deal_Base_Currency,2) Currencycode,
                      (cdel_cancel_amount) AmountFcy1,Cdel_Cancel_Rate rate,
                        (Cdel_Cancel_Amount*Cdel_Cancel_Rate)- nvl(Pandl.Pandl,0) AmountLocal1,
                          (case when frmdate >= cdel_cancel_DATE  then 'Actual'
                           else 'Projected' end)  DataType
                      From Trtran006 B inner join Trtran002 A
                            on A.Trad_Trade_Reference=B.Cdel_Trade_Reference 
                            inner join Trtran001 C
                            on B.Cdel_Deal_Number=C.Deal_Deal_Number left outer join
                              (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,(CDEL_PROFIT_LOSS)  Pandl 
                                from trtran006 a2, trtran001 b2
                               where cdel_deal_number= deal_deal_number
                                 and  deal_backup_deal=33300001
                                 -- and to_char(a2.cdel_cancel_DATE,'MON-yy') = to_char(a1.cdel_cancel_DATE,'MON-yy')
                                  And Cdel_Cancel_Date Between tempDate And frmdate
                                  and deal_base_currency=30400004
                                  and deal_other_currency =30400003
                                  and cdel_cancel_type=27000001
                                  --group by to_char(cdel_cancel_DATE,'YYYYMM')
                                  ) PandL
                                on PandL.MaturityMonth= to_char(cdel_cancel_DATE,'YYYYMM')
                                    Where 
                                    A.Trad_Product_Category=33300001 
                                    --And C.Deal_Backup_Deal=33300001 
                                    --And B.Cdel_Cancel_Date Between tempDate And frmdate
                                    And B.Cdel_Record_Status Not In(10200006,10200005) 
                                    And Cdel_Trade_Reference Is Not Null 
                                    And Deal_Base_Currency=30400004
                                    and deal_RECORD_STATUS not in(10200005,10200006 ) 
                                    --and cdel_cancel_type =27000002
                                    and a.trad_record_status in(10200001,10200002,10200003,10200004,10200005)
                        AND CDEL_CANCEL_DATE <= frmdate
           UNION ALL
                        SELECT 'Settled' Status,trad_trade_reference refnumber,
                        pkgreturncursor.fncgetdescription(trad_company_code,2)  CompanyCode,
                        pkgreturncursor.fncgetdescription(trad_local_bank,2) Bank,
                         pkgreturncursor.fncgetdescription(trad_product_category,2) Category,
                         pkgreturncursor.fncgetdescription(trad_subproduct_code,2) SubCategory,
                         trad_reference_date refdate,
                        trad_maturity_date duedate,
                                to_char(trad_maturity_date,'MON-YY')      AS MaturityMonth,
                                to_char(trad_maturity_date,'YYYYMM')      AS MaturityMonthDate,
                                pkgreturncursor.fncgetdescription(trad_trade_currency,2)   AS CurrencyCode,
                                round((LOLN_ADJUSTED_FCY),2)                    AS AmountFcy1,
                                BCRD_SPOT_RATE rate,
                                round((LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)              AS AmountLocal1,
                                (case when frmdate >= trad_maturity_date  then 'Actual'
                                 else 'Projected' end) DataType
                          FROM trtran002,trtran003,trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                         -- and brel_entry_date between  tempDate And frmdate
                          AND brel_trade_reference    = loln_trade_reference
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          and Trad_Product_Category=33300001 
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND trad_maturity_date <= frmdate
                     union all
                           SELECT 'Hedged' Status,posn_reference_number refnumber,
                           pkgreturncursor.fncgetdescription(posn_company_code,2) CompanyCode,
                            pkgreturncursor.fncgetdescription(posn_counter_party,2) Bank,
                            pkgreturncursor.fncgetdescription(posn_product_code,2) Category,
                            pkgreturncursor.fncgetdescription(posn_subproduct_code,2) SubCategory,
                            posn_reference_date refdate,
                           posn_due_date duedate,
                           to_char(posn_due_date,'MON-yy') MaturityMonth,
                           to_char(posn_due_date,'YYYYMM') MaturityMonthDate,
                           pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
                          round((POSN_TRANSACTION_AMOUNT),2) AmountFcy1,
                          POSN_FCY_RATE rate,
                          (POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AmountLocal1,
                          (case when frmdate > posn_due_date  then 'Actual'
                                else 'Projected' end)
              from trsystem997
              where posn_transaction_amount!=0
              and posn_fcy_rate !=0
              And Posn_Product_Code=33300001
              and posn_currency_code=30400004
              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                        25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                        25900085,25900074,25900075));
    --and MaturityMonthDate <= to_char(frmDate,'YYYYMM');


   
-- open GENCURSOR for 
--   
--  select * from ( 
--        
--           select 
--          2  AS DisplayOrder,
--           'Settled' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--        ROUND(  sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--                           from    trtran002,trtran006,trtran001 
--                   where   
--                       cdel_deal_number= deal_deal_number 
--                       and cdel_RECORD_STATUS not in(10200005,10200006) 
--                       and trad_trade_reference=cdel_trade_reference 
--                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
--                        and deal_backup_deal=33300001
--                        and trad_record_status=10200005 
--                        and trad_product_category=33300001 
--                        and cdel_trade_reference is not null 
--                      --  and cdel_cancel_type =27000002
--                        and cdel_cancel_date  between tempDate and frmDate
--                        and deal_base_currency=30400004
--                     --   AND CDEL_CANCEL_DATE <=frmDate
--                   group by to_char(cdel_cancel_DATE,'YYYYMM'),trad_company_code,TRAD_TRADE_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
--                              to_char(cdel_cancel_DATE,'MON-yy'), to_char(trad_maturity_date,'YYYYMM'),to_char(trad_maturity_date,'MON-yy')
--           Union All
--           
--            select
--            1 AS DisplayOrder,
--           'Estimated Exp' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trtran006.cdel_cancel_amount/1000000),1) AmountFcy1,
--          sum ( CDEL_CANCEL_AMOUNT*cdel_cancel_rate/1000000) AmountLocal1
--         
--                  from trtran003,trtran002,trtran006
--                  where brel_trade_reference=trad_trade_reference
--                       and cdel_trade_reference= brel_trade_reference
--                       and ((trad_process_complete=12400002) or (trad_complete_date <=frmdate
--                       and trad_process_complete=12400001))
--                      -- and brel_entry_date >='01-apr-2012'
--                        and TRAD_PRODUCT_CATEGORY=33300001
--                        and trad_maturity_date  between  tempDate and dattemp
--                       and trad_record_status not in (10200005,10200006)
--                       and brel_record_status not in (10200005,10200006)
--                       and cdel_record_Status not in (10200005,10200006)
--                       and cdel_cancel_date >= tempDate
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--           
--           UNION ALL 
--          select 
--          1 AS DisplayOrder,
--           'Estimated Exp' Status,
--         frmdate datDateAsOn,
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trad_trade_fcy/1000000),1) AmountFcy1,
--          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
--                    from trtran002
--                  where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                   and trad_maturity_date  between  tempDate and dattemp
--                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002) 
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, trad_trade_currency,to_char(trad_maturity_date,'MON-yy')
--          Union All
--          
--         select 
--        3 AS DisplayOrder,
--         'Hedged' Status,
--                  frmdate datDateAsOn,
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--        ROUND((sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate))/1000000),1) AmountFcy1,
--                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001 
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 ) 
--                 and deal_backup_deal=33300001
--                 and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002) 
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),to_char(deal_maturity_date,'MON-yy')
--         UNION ALL
--         
--      SELECT    
--      4  AS DisplayOrder,
--                  'Open' Status,
--                  frmdate datDateAs,
--                      exposure.CompanyCode CompanyCode,
--                      exposure.CurrencyCode CurrencyCode,
--                      exposure.MaturityMonth MaturityMonth,
--                    Exposure. monthorder monthorder,
--           TRUNC( (Exposure.AmountFcy1- NVL(Hedge.AmountFcy1,0)),2) as  AmountFcy1,
--                  exposure. AmountLocal1 AmountLocal1
--                   
--   from   (select 
--         
--          trad_company_code  CompanyCode,
--          pkgreturncursor.fncgetdescription( trtran002.TRAD_TRADE_CURRENCY,2) CurrencyCode,
--          to_char(trad_maturity_date,'MON-yy')MaturityMonth,
--          to_char(trad_maturity_date,'YYYYMM') monthorder,
--         ROUND( sum(trad_trade_fcy/1000000),2) AmountFcy1,
--          sum ( trad_trade_fcy*TRAD_TRADE_RATE/1000000) AmountLocal1
--                    from trtran002
--                  where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
--                   and TRAD_PRODUCT_CATEGORY=33300001
--                   and trad_maturity_date  between  tempDate and '31-DEC-14'
--                and ((TRAD_PROCESS_COMPLETE = 12400001  
--                and TRAD_COMPLETE_DATE >frmdate) or TRAD_PROCESS_COMPLETE = 12400002) 
--           group by  to_char(trad_maturity_date,'YYYYMM'),trad_company_code, 
--           trad_trade_currency,to_char(trad_maturity_date,'MON-yy')) Exposure
--     FULL OUTER JOIN       
--        
--         (select   
--                    deal_company_code  CompanyCode,
--                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) CurrencyCode,
--                   to_char(deal_maturity_date,'MON-yy')MaturityMonth,
--                   to_char(deal_maturity_date,'YYYYMM') monthorder,
--               TRUNC( (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                              1,1,frmdate))/1000000),2) AmountFcy1,
--                   (sum(pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,
--                               1,1,frmdate)*deal_exchange_rate)/1000000) AmountLocal1
--                   from trtran001 
--                 where   DEAL_RECORD_STATUS not in(10200005,10200006 ) 
--                 and deal_backup_deal=33300001
--                and pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,frmdate) <> 0
--                 and ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate) or DEAL_PROCESS_COMPLETE = 12400002) 
--                  group by DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,to_char(deal_maturity_date,'YYYYMM'),
--                  to_char(deal_maturity_date,'MON-yy')) Hedge
--         on exposure.MaturityMonth= Hedge.MaturityMonth         
--)
--                  
--                  order by 6;

    Goto Process_End;   
  end if;
  
  If Varreportid = 'YearlyExposure' then   
    -- delete from temp ;
    numRecords:=2;
     if (to_char(frmDate,'MM') <4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
                   and TRAD_PRODUCT_CATEGORY=33300001
                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              tempDate1 := dattemp1 + 1;
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
         
         tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
         select max(trad_maturity_date)  into dattemp from trtran002 where TRAD_RECORD_STATUS not in(10200005,10200006 ) 
                   and TRAD_PRODUCT_CATEGORY=33300001
                and ((TRAD_PROCESS_COMPLETE = 12400001  and TRAD_COMPLETE_DATE > frmDate) or TRAD_PROCESS_COMPLETE = 12400002);
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
        tempDate1 := dattemp1 + 1;
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
   insert into temp values ('Varreportid',Varreportid);
   commit;
   
   --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;  
   PKGREPORTPROGRAMS.prcreport_M_yearlyexp( frmDate ,tempDate ,datTemp );
   Query_str:= fncGetFinancialYear(frmdate,frmdate,1);
       Open Gencursor For
      
      select  STATUS1,
              TYPEOFTRANS1,
              pkgreturncursor.fncgetdescription(COMPANYCODE,1)CompanyCode1,
              CURRENCYCODE,
              BASEAMOUNT1,
              frmdate as DateAsOn,
              EXCHANGERATE EXCHANGERATE1,
              ORDER1 as DisplayOrder,
              BASEAMOUNTINR,
              Query_str AS FinacialYear
              from  
              REPORT_MONTHLYREPORT_YEARLYEXP
              ORDER  BY ORDER1 asc ;
               Open NextCursor For
      select Status,CompanyCode,CurrencyCode,Bank,Category,SubCategory,refdate,
      MaturityDate,traderef,BaseAmount,BaseAmountinr,
             ExchangeRate,MaturityMonth,MaturityMonthDate,DataType,frmdate asondate from (
                select  'Settled Exposure (A)' Status, 
            pkgreturncursor.fncgetdescription(cdel_COMPANY_CODE,2) CompanyCode,
            pkgreturncursor.fncgetdescription(deal_base_CURRENCY,2) CurrencyCode,
            pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
            pkgreturncursor.fncgetdescription(deal_backup_deal,2) Category,
            pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
            deal_execute_date refdate,
            cdel_cancel_date MaturityDate,
            cdel_trade_reference traderef,
            cdel_cancel_amount BaseAmount,
            (cdel_cancel_amount*cdel_cancel_RATE)-nvl(CDEL_PROFIT_LOSS,0) BaseAmountinr,
            round((cdel_cancel_amount*cdel_cancel_RATE)- nvl(CDEL_PROFIT_LOSS,0)/(cdel_cancel_amount),2) ExchangeRate,
            to_char(cdel_cancel_date,'MON-yy') MaturityMonth,
            to_char(cdel_cancel_date,'YYYYMM') MaturityMonthDate,null DataType                 
            From Trtran006 B left outer join 
            Trtran001 C on B.Cdel_Deal_Number=C.Deal_Deal_Number
            left outer join  Trtran002 A 
            on A.Trad_Trade_Reference=B.Cdel_Trade_Reference
            Where A.Trad_Product_Category=33300001 
--        And C.Deal_Backup_Deal=33300001 
            And B.Cdel_Cancel_Date Between tempDate and frmdate
            And B.Cdel_Record_Status Not In(10200006,10200005) 
            And A.Trad_Record_Status in(10200005,10200001,10200003,10200004)
            And B.Cdel_Trade_Reference Is Not Null 
            And C.Deal_Base_Currency=30400004
     -- group by cdel_COMPANY_CODE,deal_base_CURRENCY
           union all
  SELECT   'Settled Exposure (A)' Status, 
            pkgreturncursor.fncgetdescription(trad_company_code,2)  CompanyCode,
            pkgreturncursor.fncgetdescription(trad_trade_currency,2)    CurrencyCode,
             pkgreturncursor.fncgetdescription(trad_local_bank,2) Bank,
              pkgreturncursor.fncgetdescription(trad_product_category,2) Category,
               pkgreturncursor.fncgetdescription(trad_subproduct_code,2) SubCategory,
               trad_reference_date refdate,
            trad_maturity_date MaturityDate,
            trad_trade_reference traderef,LOLN_ADJUSTED_FCY AS BaseAmount,
            (LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE)  AS BaseAmountinr,
            round((LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE)/ (LOLN_ADJUSTED_FCY),2)  as ExchangeRate,
             to_char(trad_maturity_date,'MON-yy') MaturityMonth,
             to_char(trad_maturity_date,'YYYYMM') MaturityMonthDate,null DataType                        
             FROM trtran002,trtran003,trtran010,TRTRAN045
             where  trad_trade_reference  = brel_trade_reference
             and brel_entry_date between  tempDate and frmdate
             AND brel_trade_reference    = loln_trade_reference
             AND trad_record_status NOT IN(10200006)
             AND trad_import_export NOT IN(25900025)
             AND brel_record_status NOT IN(10200006)
             AND Trad_Product_Category=33300001 
             AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
             AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
             AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
             union all
  SELECT 'Hedged Exposure (B)' Status,
            pkgreturncursor.fncgetdescription(posn_company_code,2) CompanyCode,
            pkgreturncursor.fncgetdescription(posn_currency_code,2) CurrencyCode,
            pkgreturncursor.fncgetdescription(posn_counter_party,2) Bank,
            pkgreturncursor.fncgetdescription(posn_product_code,2) Category,
            pkgreturncursor.fncgetdescription(posn_subproduct_code,2) SubCategory, 
            posn_reference_date refdate,
            posn_due_date MaturityDate,
            posn_reference_number traderef,
            (POSN_TRANSACTION_AMOUNT) BaseAmount,
            (POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) BaseAmountinr,
            round((POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/(POSN_TRANSACTION_AMOUNT),2) ExchangeRate,
             to_char(posn_due_date,'MON-yy') MaturityMonth,
             to_char(posn_due_date,'YYYYMM') MaturityMonthDate,
             (case when frmdate > posn_due_date  then 'Actual'
                                else 'Projected' end) DataType
              from trsystem997  
              where posn_transaction_amount!=0 and posn_fcy_rate !=0           
              And Posn_Product_Code=33300001 and posn_currency_code=30400004
              aND posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                        25900014,25900015,25900011,25900012,25900061,25900062,25900078,
                                        25900079,25900082,25900083,25900084,25900085,25900074,25900075));
         Goto Process_End;   
                 End If; 
------------------------    
--if varReportID = 'CURRFUTUREDEALFORTHEDAYNEW1'  then 
--    Query_Str :='SELECT  deal_deal_number IBSReference,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--        Amount as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,PandL as PandL,
--        AmtInLacs as AmtInLacs,         
--          DealType,Remarks,
--          '||''''||frmDate||''''||' AsonDate,
--          '||''''||ToDate||''''||' ToDate,
--          DEAL_backup_deal,DEAL_INIT_CODE,DEAL_EXECUTE_DATE,DEAL_COMPANY_CODE ,
--          FRWDTD,FRWMTD,FRWYTD,FURDTD,FURMTD,FURYTD,OPTDTD,OPTMTD,OPTYTD ,Reporttype,
--          Forwardtotal,FutureTotal,OptionTotal,PnLTotal,FRWMTM,FURMTM,OPTMTM,MTMTotal,BuySell,Exchange,ExpiryDate,
--           pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1) as ProfitCenter,
--           Optiontype,PrimiumStatus,PrimiumAmount
--          FROM (     
--     select deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--        sum(Amount) as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,sum(PandL) as PandL,
--         sum( case when DealType=''Inward Remittance'' then
--          -1* AmtInLacs 
--          when DealType=''FX Cancellation'' then
--           0
--          else AmtInLacs end) as AmtInLacs,         
--          DealType,Remarks,
--          '||''''||frmDate||''''||' AsonDate,
--          '||''''||ToDate||''''||' ToDate,
--          DEAL_backup_deal,DEAL_INIT_CODE,DEAL_EXECUTE_DATE,DEAL_COMPANY_CODE,
--          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--          CASE WHEN DealType = ''Inward Remittance'' THEN
--          ''Sell''
--          WHEN DealType = ''Outward Remittance'' THEN
--          ''Buy'' else
--          BuySell end as BuySell,Exchange,ExpiryDate,Optiontype,null,0
--          from(
--           select  deal_deal_number,
--           pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
--           c.cdel_cancel_amount as Amount , ';
--           Query_Str1 :='   to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
--                               c.cdel_cancel_rate end),''999d9999'') as NetRate,
--            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
--                               else  c.cdel_Spot_rate end),''999d9999'')as Spot,
--            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
--                               else c.cdel_forward_rate end ),''990d9999'')as FwdRate , 
--            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
--                               else c.cdel_margin_rate end),''990d9999'') as Margin,
--            deal_maturity_date as MaturityDate,
--            (case when c.cdel_cancel_type=27000001 then            
--                      to_char((d.deal_exchange_rate),''999d9999'') else null end )as BookingRate,
--            c.cdel_profit_loss as PandL,
--            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,            
--            (case  when nvl((select remt_remittance_type from 
--                        trtran008a 
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),NULL) =33900001
--                        then  ''Inward Remittance''
--                  when nvl((select remt_remittance_type from 
--                        trtran008a 
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),NULL) =33900002
--                        then  ''Outward Remittance''
--                  when d.deal_deal_type=25400001 then ''Cash Rate''
--                  when c.cdel_deal_number is null then ''FX Booking''
--                  when c.cdel_cancel_type=27000001 then ''FX Cancellation''
--                  when c.cdel_cancel_type=27000002 then ''FX Utilisation''
--                  else ''No Matching''
--                  end) DealType,
--            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  NULL
--                  when (c.cdel_cancel_type=27000002) then ''ED Benefit '' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  || '' Paisa ''
--                  else NULL end) as Remarks,
--                  '||''''||frmDate||''''||' AsonDate,
--                  '||''''||ToDate||''''||' ToDate,                  
--                  DEAL_backup_deal,DEAL_INIT_CODE,
--                  TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,DEAL_COMPANY_CODE,
--            0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--            0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--            case when deal_buy_sell = 25300001 then
--             pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end BuySell,
--             pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
--             deal_maturity_from ExpiryDate,null Optiontype,null,0
--          from trtran001 d inner join trtran006 c
--       on deal_deal_number= cdel_deal_number
--     where deal_record_status not in (10200005,10200006)
--      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and (CDEL_CANCEL_DATE='||''''||frmDate||''''||')) x
--      group by deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--       NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,DealType,Remarks,AsonDate,ToDate,DEAL_COMPANY_CODE, DEAL_EXECUTE_DATE,DEAL_backup_deal,DEAL_INIT_CODE,BuySell,Exchange,ExpiryDate';     
-- Query_Str2 :=' union all
--              select  deal_deal_number,
--              pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            DEAL_USER_REFERENCE as ContractNo,
--            deal_base_amount as Amount ,
--            to_char(deal_exchange_rate,''999d9999'') as NetRate,
--            to_char(deal_Spot_rate,''999d9999'')as Spot,
--            to_char(deal_forward_rate,''990d9999'')as FwdRate , 
--            to_char(deal_margin_rate,''990d9999'') as Margin,
--            deal_maturity_date as MaturityDate,
--            null as BookingRate,
--            null as PandL,
--            null as AmtInLacs,            
--            ''FX Booking'' DealType,
--            null as Remarks,
--            '||''''||frmDate||''''||' AsonDate,
--            '||''''||ToDate||''''||' ToDate, 
--            DEAL_backup_deal,DEAL_INIT_CODE,
--            TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,
--            DEAL_COMPANY_CODE,
--          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--          pkgreturncursor.fncgetdescription(deal_buy_sell,2),
--          pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
--          deal_maturity_from ExpiryDate,null Optiontype,null,0
--     from trtran001 
--     where deal_record_status not in (10200005,10200006)     
--      and  DEAL_EXECUTE_DATE= '||''''||frmDate||''''||'
--      and deal_deal_type not in (25400001)
--      --and DEAL_init_code not in (33800055)
--    union all ';
--    Query_Str3 :='SELECT cfut_deal_number,
--        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(cfut_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(cfut_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2) AS OtherCurrency,
--        CFUT_USER_REFERENCE                                      AS ContractNo,
--        cfut_base_amount                                         AS Amount ,
--        TO_CHAR(cfut_exchange_rate,''999d9999'')                   AS NetRate,
--        TO_CHAR(cfut_Spot_rate,''999d9999'')                       AS Spot,
--        TO_CHAR(cfut_forward_rate,''990d9999'')                    AS FwdRate ,
--        TO_CHAR(cfut_bank_margin,''990d9999'')                     AS Margin,
--        cfut_maturity_date                                       AS MaturityDate,
--        NULL                                                     AS BookingRate,
--        NULL                                                     AS PandL,
--        NULL                                                     AS AmtInLacs,
--        ''Future Booking'' DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        CFUT_backup_deal,CFUT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,CFUT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        pkgreturncursor.fncgetdescription(cfut_buy_sell,2),
--        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
--        cfut_maturity_from ExpiryDate, null Optiontype,null,0
--      FROM trtran061
--      WHERE cfut_record_status NOT IN (10200005,10200006)
--      AND cfut_EXECUTE_DATE         = '||''''||frmDate||''''||' ';
-- Query_Str4 :='UNION ALL 
--      SELECT CFRV_DEAL_NUMBER,
--        pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,1)     AS Company,
--        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)      AS ExposureType,
--        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2)    AS BankName,
--        pkgreturncursor.fncgetdescription(cfut_base_currency,2)    AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2)   AS OtherCurrency,
--        CFUT_USER_REFERENCE                                        AS ContractNo,
--        C.CFRV_CANCEL_AMOUNT                                       AS Amount ,
--        TO_CHAR(CFRV_LOT_PRICE,''999d9999'')                         AS NetRate,
--        TO_CHAR(CFRV_SPOT_RATE,''999d9999'')                         AS Spot,
--        TO_CHAR(CFRV_FORWARD_RATE,''990d9999'')                      AS FwdRate ,
--        TO_CHAR(CFRV_BANK_MARGIN,''990d9999'')                       AS Margin,
--        cfut_maturity_date                                         AS MaturityDate,
--        TO_CHAR((d.cfut_exchange_rate),''999d9999'')                 AS BookingRate,
--        c.CFRV_PROFIT_LOSS                                         AS PandL,
--        ROUND((d.CFUT_BASE_AMOUNT* d.cfut_exchange_rate) /100000,2)AS AmtInLacs,
--        ''Future Cancellation'' DealType,
--        CFRV_DEALER_REMARKS AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        CFUT_backup_deal,CFUT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,CFUT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        case when cfut_buy_sell = 25300001 then
--        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end,
--        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
--        cfut_maturity_from ExpiryDate,null Optiontype,null,0
--      FROM trtran061 d
--      INNER JOIN trtran063 c
--      ON cfut_deal_number           = cfrv_deal_number
--      WHERE cfut_record_status NOT IN (10200005,10200006)
--      AND cfrv_record_status NOT   IN (10200005,10200006)
--      AND CFRV_EXECUTE_DATE         ='||''''||frmDate||''''||'
--   UNION ALL ';
--Query_Str5 :='SELECT copt_deal_number,
--        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
--        COPT_USER_REFERENCE                                      AS ContractNo,
--        copt_base_amount                                         AS Amount ,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                     AS NetRate,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                     AS Spot,
--        TO_CHAR(0,''990d9999'')                                    AS FwdRate ,
--        TO_CHAR(0,''990d9999'')                                    AS Margin,
--        copt_maturity_date                                       AS MaturityDate,
--        NULL                                                     AS BookingRate,
--        NULL                                                     AS PandL,
--        NULL                                                     AS AmtInLacs,
--        ''Option Booking'' DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        COPT_backup_deal,COPT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,COPT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        pkgreturncursor.fncgetdescription(cosu_buy_sell,2),
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) as Exchange,
--        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
--        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),COSU_PREMIUM_AMOUNT
--      FROM TRTRAN071
--      JOIN TRTRAN072A ON
--         COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--      and COSM_SERIAL_NUMBER = 1
--      AND COSM_RECORD_STATUS NOT IN(10200005,10200006)      
--      JOIN TRTRAN072 ON
--          COSU_DEAL_NUMBER = COSM_DEAL_NUMBER
--      AND COSU_SERIAL_NUMBER = COSM_SERIAL_NUMBER
--      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
--      WHERE copt_record_status NOT IN (10200005,10200006)
--      AND COPT_EXECUTE_DATE = '||''''||frmDate||''''||' ';
--Query_Str6 :=' UNION ALL SELECT copt_deal_number,
--        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
--        COPT_USER_REFERENCE                                      AS ContractNo,
--        CORV_BASE_AMOUNT                                         AS Amount ,
--        TO_CHAR(CORV_EXERCISE_RATE,''999d9999'')                     AS NetRate,
--        TO_CHAR(CORV_EXERCISE_RATE,''999d9999'')                     AS Spot,
--        TO_CHAR(0,''990d9999'')                                    AS FwdRate ,
--        TO_CHAR(0,''990d9999'')                                    AS Margin,
--        copt_maturity_date                                       AS MaturityDate,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                   AS BookingRate,
--        CORV_PROFIT_LOSS                                         AS PandL,
--        NULL                                                     AS AmtInLacs,
--        CASE WHEN CORV_EXERCISE_TYPE = 33000001 THEN
--        ''Option Exercise'' 
--             WHEN CORV_EXERCISE_TYPE = 33000002 THEN
--        ''No Exercise'' 
--        ELSE
--        ''Option Cancel'' 
--        END DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        COPT_backup_deal,COPT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,COPT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        case when COSU_BUY_SELL = 25300001 then
--        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end,
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2),
--        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
--        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),CORV_PREMIUM_AMOUNT
--      FROM TRTRAN071
--      JOIN TRTRAN073 ON
--         COPT_DEAL_NUMBER = CORV_DEAL_NUMBER
--      AND CORV_RECORD_STATUS NOT IN(10200005,10200006)      
--      JOIN TRTRAN072 ON
--          COSU_DEAL_NUMBER = CORV_DEAL_NUMBER
--      AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
--      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
--      WHERE copt_record_status NOT IN (10200005,10200006)
--      AND CORV_EXERCISE_DATE = '||''''||frmDate||''''||' ';      
--    Query_Str7 :=' UNION ALL
--      SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,
--      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),
--      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),NULL,null,null,null,
--        pkgreturncursor.fncgetdescription(Deal_type,2),
--        null Remarks, '||''''||frmDate||''''||' AsonDate, '||''''||frmDate||''''||' ToDate, 
--        Deal_type, 0 DEAL_INIT_CODE, ason_date, CompanyCode,
--       sum(FRWDTD),sum(FRWMTD),sum(FRWYTD),sum(FURDTD),sum(FURMTD),sum(FURYTD),sum(OPTDTD),sum(OPTMTD),sum(OPTYTD),
--       1 Reporttype,
--       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0))) Forwardtotal,
--       (sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ sum(NVL(FURYTD,0))) FutureTotal,
--       (sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0))) OptionTotal,
--       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0)) + sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ 
--       sum(NVL(FURYTD,0)) + sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0)))PnLTotal,
--       SUM(FRWMTM)FRWMTM,SUM(FURMTM)FURMTM,SUM(OPTMTM)OPTMTM,
--       SUM(NVL(FRWMTM,0)) + SUM(NVL(FURMTM,0)) + SUM(NVL(OPTMTM,0)) MTMTotal,null,NULL,null ExpiryDate,null,null,0
--      FROM trsystem983  WHERE ason_date = '||''''||frmDate||''''||' 
--      group by Deal_type,ason_date,CompanyCode
--      ) WHERE DEAL_EXECUTE_DATE = '||''''||frmDate||''''||'
--      '||finalcondition||'';
--      delete from temp;
--      insert into temp values(Query_Str,'Query_Str');
--      insert into temp values(Query_Str1,'Query_Str1');
--      insert into temp values(Query_Str2,'Query_Str2');
--      insert into temp values(Query_Str3,'Query_Str3');
--      insert into temp values(Query_Str4,'Query_Str4');
--      insert into temp values(Query_Str5,'Query_Str5');
--      insert into temp values(Query_Str6,'Query_Str6');
--       insert into temp values(Query_Str6,'Query_Str7');COMMIT;
--    open gencursor for  Query_Str || Query_Str1|| Query_Str2|| Query_Str3||Query_Str4||Query_Str5||Query_Str6 || Query_Str7 ;
--    Goto Process_End;   
--  End If;  

--if varReportID = 'CURRFUTUREDEALFORTHEDAYNEW1'  then 
--  NUMRECORDSETS:=2;
--  if Varreportid ='TREASURYNUMBERMTM' Then
--  Select Fncuserpnlpopulate(Frmdate,Varuserid,'Y')
--  INTO NUMRECORDS FROM DUAL;
-- ELSE
--  SELECT FNCUSERPNLPOPULATE(FRMDATE,VARUSERID,'N')
--  INTO NUMRECORDS FROM DUAL;
--  end if;
--
--   SELECT MAX( HDAY_CALENDAR_DATE) INTO DATTEMP
--  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
--   And Hday_Day_Status Not In (26400007,26400008,26400009);
--    Query_Str :='SELECT  deal_deal_number IBSReference,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--        Amount as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,PandL as PandL,
--        AmtInLacs as AmtInLacs,         
--          DealType,Remarks,
--          '||''''||frmDate||''''||' AsonDate,
--          '||''''||ToDate||''''||' ToDate,
--          DEAL_backup_deal,DEAL_INIT_CODE,DEAL_EXECUTE_DATE,DEAL_COMPANY_CODE ,
--          FRWDTD,FRWMTD,FRWYTD,FURDTD,FURMTD,FURYTD,OPTDTD,OPTMTD,OPTYTD ,Reporttype,
--          Forwardtotal,FutureTotal,OptionTotal,PnLTotal,FRWMTM,FURMTM,OPTMTM,MTMTotal,BuySell,Exchange,ExpiryDate,
--           pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1) as ProfitCenter,
--           Optiontype,PrimiumStatus,PrimiumAmount,SwaerRate,NetPandL,
--           round(CASE WHEN PandL != 0 THEN PandL/SwaerRate ELSE 0 END,2) GainlossD
--          FROM (     
--     select deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--        sum(Amount) as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,sum(PandL) as PandL,
--         sum( case when DealType=''Inward Remittance'' then
--          -1* AmtInLacs 
--          when DealType=''FX Cancellation'' then
--           0
--          else AmtInLacs end) as AmtInLacs,         
--          DealType,Remarks,
--          '||''''||frmDate||''''||' AsonDate,
--          '||''''||ToDate||''''||' ToDate,
--          DEAL_backup_deal,DEAL_INIT_CODE,DEAL_EXECUTE_DATE,DEAL_COMPANY_CODE,
--          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--          CASE WHEN DealType = ''Inward Remittance'' THEN
--          ''Sell''
--          WHEN DealType = ''Outward Remittance'' THEN
--          ''Buy'' else
--          BuySell end as BuySell,Exchange,ExpiryDate,Optiontype, PrimiumStatus, sum(PrimiumAmount)PrimiumAmount,SwaerRate, sum(NetPandL)NetPandL
--          from(
--           select  deal_deal_number,
--           pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
--           c.cdel_cancel_amount as Amount , ';
--           Query_Str1 :='   to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
--                               c.cdel_cancel_rate end),''999d9999'') as NetRate,
--            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
--                               else  c.cdel_Spot_rate end),''999d9999'')as Spot,
--            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
--                               else c.cdel_forward_rate end ),''990d9999'')as FwdRate , 
--            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
--                               else c.cdel_margin_rate end),''990d9999'') as Margin,
--            deal_maturity_date as MaturityDate,
--            (case when c.cdel_cancel_type=27000001 then            
--                      to_char((d.deal_exchange_rate),''999d9999'') else null end )as BookingRate,
--            c.cdel_profit_loss as PandL,
--            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,            
--            (case  when nvl((select remt_remittance_type from 
--                        trtran008a 
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),NULL) =33900001
--                        then  ''Inward Remittance''
--                  when nvl((select remt_remittance_type from 
--                        trtran008a 
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),NULL) =33900002
--                        then  ''Outward Remittance''
--                  when d.deal_deal_type=25400001 then ''Cash Rate''
--                  when c.cdel_deal_number is null then ''FX Booking''
--                  when c.cdel_cancel_type=27000001 then ''FX Cancellation''
--                  when c.cdel_cancel_type=27000002 then ''FX Utilisation''
--                  else ''No Matching''
--                  end) DealType,
--            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  NULL
--                  when (c.cdel_cancel_type=27000002) then ''ED Benefit '' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  || '' Paisa ''
--                  else NULL end) as Remarks,
--                  '||''''||frmDate||''''||' AsonDate,
--                  '||''''||ToDate||''''||' ToDate,                  
--                  DEAL_backup_deal,DEAL_INIT_CODE,
--                  TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,DEAL_COMPANY_CODE,
--            0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--            0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--            case when deal_buy_sell = 25300001 then
--             pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end BuySell,
--             pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
--             deal_maturity_from ExpiryDate,null Optiontype,null PrimiumStatus,0 PrimiumAmount,
--            CASE WHEN NVL(CDEL_PANDL_SPOT,0) > 0
--            THEN CDEL_PANDL_SPOT
--            ELSE fncgetSwaerRate(30400004,CDEL_CANCEL_DATE)END SwaerRate,0 NetPandL            
--          from trtran001 d inner join trtran006 c
--       on deal_deal_number= cdel_deal_number
--     where deal_record_status not in (10200005,10200006)
--      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and (CDEL_CANCEL_DATE='||''''||frmDate||''''||')) x
--      group by deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--       NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,DealType,Remarks,AsonDate,ToDate,DEAL_COMPANY_CODE, DEAL_EXECUTE_DATE,
--        DEAL_backup_deal,DEAL_INIT_CODE,BuySell,Exchange,ExpiryDate,Optiontype,SwaerRate ';     
-- Query_Str2 :=' union all
--              select  deal_deal_number,
--              pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            DEAL_USER_REFERENCE as ContractNo,
--            deal_base_amount as Amount ,
--            to_char(deal_exchange_rate,''999d9999'') as NetRate,
--            to_char(deal_Spot_rate,''999d9999'')as Spot,
--            to_char(deal_forward_rate,''990d9999'')as FwdRate , 
--            to_char(deal_margin_rate,''990d9999'') as Margin,
--            deal_maturity_date as MaturityDate,
--            null as BookingRate,
--            0 as PandL,
--            null as AmtInLacs,            
--            ''FX Booking'' DealType,
--            null as Remarks,
--            '||''''||frmDate||''''||' AsonDate,
--            '||''''||ToDate||''''||' ToDate, 
--            DEAL_backup_deal,DEAL_INIT_CODE,
--            TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,
--            DEAL_COMPANY_CODE,
--          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--          pkgreturncursor.fncgetdescription(deal_buy_sell,2),
--          pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
--          deal_maturity_from ExpiryDate,null Optiontype,null,0,0,0
--     from trtran001 
--     where deal_record_status not in (10200005,10200006)     
--      and  DEAL_EXECUTE_DATE= '||''''||frmDate||''''||'
--      and deal_deal_type not in (25400001)
--      --and DEAL_init_code not in (33800055)
--    union all ';
--    Query_Str3 :='SELECT cfut_deal_number,
--        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(cfut_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(cfut_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2) AS OtherCurrency,
--        CFUT_USER_REFERENCE                                      AS ContractNo,
--        cfut_base_amount                                         AS Amount ,
--        TO_CHAR(cfut_exchange_rate,''999d9999'')                   AS NetRate,
--        TO_CHAR(cfut_Spot_rate,''999d9999'')                       AS Spot,
--        TO_CHAR(cfut_forward_rate,''990d9999'')                    AS FwdRate ,
--        TO_CHAR(cfut_bank_margin,''990d9999'')                     AS Margin,
--        cfut_maturity_date                                       AS MaturityDate,
--        NULL                                                     AS BookingRate,
--        0                                                     AS PandL,
--        NULL                                                     AS AmtInLacs,
--        ''Future Booking'' DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        CFUT_backup_deal,CFUT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,CFUT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        pkgreturncursor.fncgetdescription(cfut_buy_sell,2),
--        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
--        cfut_maturity_from ExpiryDate, null Optiontype,null,0,0,0
--      FROM trtran061
--      WHERE cfut_record_status NOT IN (10200005,10200006)
--      AND cfut_EXECUTE_DATE         = '||''''||frmDate||''''||' ';
-- Query_Str4 :='UNION ALL 
--      SELECT CFRV_DEAL_NUMBER,
--        pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,1)     AS Company,
--        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)      AS ExposureType,
--        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2)    AS BankName,
--        pkgreturncursor.fncgetdescription(cfut_base_currency,2)    AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2)   AS OtherCurrency,
--        CFUT_USER_REFERENCE                                        AS ContractNo,
--        C.CFRV_CANCEL_AMOUNT                                       AS Amount ,
--        TO_CHAR(CFRV_LOT_PRICE,''999d9999'')                         AS NetRate,
--        TO_CHAR(CFRV_SPOT_RATE,''999d9999'')                         AS Spot,
--        TO_CHAR(CFRV_FORWARD_RATE,''990d9999'')                      AS FwdRate ,
--        TO_CHAR(CFRV_BANK_MARGIN,''990d9999'')                       AS Margin,
--        cfut_maturity_date                                         AS MaturityDate,
--        TO_CHAR((d.cfut_exchange_rate),''999d9999'')                 AS BookingRate,
--        c.CFRV_PROFIT_LOSS                                         AS PandL,
--        ROUND((d.CFUT_BASE_AMOUNT* d.cfut_exchange_rate) /100000,2)AS AmtInLacs,
--        ''Future Cancellation'' DealType,
--        CFRV_DEALER_REMARKS AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        CFUT_backup_deal,CFUT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,CFUT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        case when cfut_buy_sell = 25300001 then
--        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end,
--        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
--        cfut_maturity_from ExpiryDate,null Optiontype,null,0,
--        fncgetSwaerRate(30400004,CFRV_EXECUTE_DATE)SwaerRate,0           
--      FROM trtran061 d
--      INNER JOIN trtran063 c
--      ON cfut_deal_number           = cfrv_deal_number
--      WHERE cfut_record_status NOT IN (10200005,10200006)
--      AND cfrv_record_status NOT   IN (10200005,10200006)
--      AND CFRV_EXECUTE_DATE         ='||''''||frmDate||''''||'
--   UNION ALL ';
--Query_Str5 :='SELECT copt_deal_number,
--        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
--        COPT_USER_REFERENCE                                      AS ContractNo,
--        copt_base_amount                                         AS Amount ,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                     AS NetRate,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                     AS Spot,
--        TO_CHAR(0,''990d9999'')                                    AS FwdRate ,
--        TO_CHAR(0,''990d9999'')                                    AS Margin,
--        copt_maturity_date                                       AS MaturityDate,
--        NULL                                                     AS BookingRate,
--        0                                                     AS PandL,
--        NULL                                                     AS AmtInLacs,
--        ''Option Booking'' DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        COPT_backup_deal,COPT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,COPT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        pkgreturncursor.fncgetdescription(cosu_buy_sell,2),
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) as Exchange,
--        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
--        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),COSU_PREMIUM_AMOUNT,
--        fncgetSwaerRate(30400004,COPT_EXECUTE_DATE) SwaerRate,
--        decode(COPT_PREMIUM_STATUS,33200001,-1,33200002,1,0)* COSU_PREMIUM_AMOUNT
--      FROM TRTRAN071
--      JOIN TRTRAN072A ON
--         COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--      and COSM_SERIAL_NUMBER = 1
--      AND COSM_RECORD_STATUS NOT IN(10200005,10200006)      
--      JOIN TRTRAN072 ON
--          COSU_DEAL_NUMBER = COSM_DEAL_NUMBER
--      AND COSU_SERIAL_NUMBER = COSM_SERIAL_NUMBER
--      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
--      WHERE copt_record_status NOT IN (10200005,10200006)
--      AND COPT_EXECUTE_DATE = '||''''||frmDate||''''||' ';
--Query_Str6 :=' UNION ALL SELECT copt_deal_number,
--        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
--        COPT_USER_REFERENCE                                      AS ContractNo,
--        CORV_BASE_AMOUNT                                         AS Amount ,
--        TO_CHAR(CORV_EXERCISE_RATE,''999d9999'')                     AS NetRate,
--        TO_CHAR(CORV_EXERCISE_RATE,''999d9999'')                     AS Spot,
--        TO_CHAR(0,''990d9999'')                                    AS FwdRate ,
--        TO_CHAR(0,''990d9999'')                                    AS Margin,
--        copt_maturity_date                                       AS MaturityDate,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                   AS BookingRate,
--        CORV_PROFIT_LOSS                                         AS PandL,
--        NULL                                                     AS AmtInLacs,
--        CASE WHEN CORV_EXERCISE_TYPE = 33000001 THEN
--        ''Option Exercise'' 
--             WHEN CORV_EXERCISE_TYPE = 33000002 THEN
--        ''No Exercise'' 
--        ELSE
--        ''Option Cancel'' 
--        END DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        COPT_backup_deal,COPT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as DEAL_EXECUTE_DATE,COPT_COMPANY_CODE,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        case when COSU_BUY_SELL = 25300001 then
--        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end,
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2),
--        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
--        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),CORV_PREMIUM_AMOUNT,
--        CASE WHEN NVL(CORV_PANDL_SPOT,0) > 0
--        THEN CORV_PANDL_SPOT
--        ELSE fncgetSwaerRate(30400004,CORV_EXERCISE_DATE)END SwaerRate,
--        Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,Corv_Serial_Number)
--      FROM TRTRAN071
--      JOIN TRTRAN073 ON
--         COPT_DEAL_NUMBER = CORV_DEAL_NUMBER
--      AND CORV_RECORD_STATUS NOT IN(10200005,10200006)      
--      JOIN TRTRAN072 ON
--          COSU_DEAL_NUMBER = CORV_DEAL_NUMBER
--      AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
--      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
--      WHERE copt_record_status NOT IN (10200005,10200006)
--      AND CORV_EXERCISE_DATE = '||''''||frmDate||''''||' ';      
--    Query_Str7 :=' UNION ALL
--      SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,
--      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),
--      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),NULL,null,null,null,
--        pkgreturncursor.fncgetdescription(Deal_type,2),
--        null Remarks, '||''''||frmDate||''''||' AsonDate, '||''''||frmDate||''''||' ToDate, 
--        Deal_type, 0 DEAL_INIT_CODE, ason_date, CompanyCode,
--       sum(FRWDTD),sum(FRWMTD),sum(FRWYTD),sum(FURDTD),sum(FURMTD),sum(FURYTD),sum(OPTDTD),sum(OPTMTD),sum(OPTYTD),
--       1 Reporttype,
--       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0))) Forwardtotal,
--       (sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ sum(NVL(FURYTD,0))) FutureTotal,
--       (sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0))) OptionTotal,
--       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0)) + sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ 
--       sum(NVL(FURYTD,0)) + sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0)))PnLTotal,
--       SUM(FRWMTM)FRWMTM,SUM(FURMTM)FURMTM,SUM(OPTMTM)OPTMTM,
--       SUM(NVL(FRWMTM,0)) + SUM(NVL(FURMTM,0)) + SUM(NVL(OPTMTM,0)) MTMTotal,null,NULL,null ExpiryDate,null,null,0,0,0
--      FROM trsystem983  WHERE ason_date = '||''''||frmDate||''''||' 
--      group by Deal_type,ason_date,CompanyCode
--      ) WHERE DEAL_EXECUTE_DATE = '||''''||frmDate||''''||'
--      '||finalcondition||'';
--      delete from temp;
--      insert into temp values(Query_Str,'Query_Str');
--      insert into temp values(Query_Str1,'Query_Str1');
--      insert into temp values(Query_Str2,'Query_Str2');
--      insert into temp values(Query_Str3,'Query_Str3');
--      insert into temp values(Query_Str4,'Query_Str4');
--      insert into temp values(Query_Str5,'Query_Str5');
--      insert into temp values(Query_Str6,'Query_Str6');
--       insert into temp values(Query_Str7,'Query_Str7');COMMIT;
--    open gencursor for  Query_Str || Query_Str1|| Query_Str2|| Query_Str3||Query_Str4||Query_Str5||Query_Str6 || Query_Str7 ;
--    Goto Process_End;   
--  End If;  

--if varReportID = 'CURRFUTUREDEALFORTHEDAYNEW1'  then 
--  NUMRECORDSETS:=2;
--  if Varreportid ='TREASURYNUMBERMTM' Then
--  Select Fncuserpnlpopulate(Frmdate,Varuserid,'Y')
--  INTO NUMRECORDS FROM DUAL;
-- ELSE
--  SELECT FNCUSERPNLPOPULATE(FRMDATE,VARUSERID,'N')
--  INTO NUMRECORDS FROM DUAL;
--  end if;
--
--   SELECT MAX( HDAY_CALENDAR_DATE) INTO DATTEMP
--  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
--   And Hday_Day_Status Not In (26400007,26400008,26400009);
--    Query_Str :='SELECT  deal_deal_number IBSReference,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--        Amount as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,PandL as PandL,
--        AmtInLacs as AmtInLacs,         
--          DealType,Remarks,
--          '||''''||frmDate||''''||' AsonDate,
--          '||''''||ToDate||''''||' ToDate,
--          Deal_type,DEAL_INIT_CODE,ASON_DATE,DEAL_COMPANY_CODE ,COUNTERPARTY,
--          FRWDTD,FRWMTD,FRWYTD,FURDTD,FURMTD,FURYTD,OPTDTD,OPTMTD,OPTYTD ,Reporttype,
--          Forwardtotal,FutureTotal,OptionTotal,PnLTotal,FRWMTM,FURMTM,OPTMTM,MTMTotal,BuySell,Exchange,ExpiryDate,
--           pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1) as ProfitCenter,
--           Optiontype,PrimiumStatus,PrimiumAmount,SwaerRate,NetPandL,
--           round(CASE WHEN PandL != 0 THEN PandL/SwaerRate ELSE 0 END,2) GainlossD,CPremiumStatus,CPremiumAmount
--          FROM (     
--     select deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--        sum(Amount) as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,sum(PandL) as PandL,
--         sum( case when DealType=''Inward Remittance'' then
--          -1* AmtInLacs 
--          when DealType=''FX Cancellation'' then
--           0
--          else AmtInLacs end) as AmtInLacs,         
--          DealType,Remarks,
--          '||''''||frmDate||''''||' AsonDate,
--          '||''''||ToDate||''''||' ToDate,
--          Deal_type,DEAL_INIT_CODE,ASON_DATE,DEAL_COMPANY_CODE,COUNTERPARTY,
--          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--          CASE WHEN DealType = ''Inward Remittance'' THEN
--          ''Sell''
--          WHEN DealType = ''Outward Remittance'' THEN
--          ''Buy'' else
--          BuySell end as BuySell,Exchange,ExpiryDate,Optiontype, PrimiumStatus, sum(PrimiumAmount)PrimiumAmount,SwaerRate, sum(NetPandL)NetPandL,
--          CPremiumStatus,Sum(CPremiumAmount)CPremiumAmount
--          from(
--           select  deal_deal_number,
--           pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
--           c.cdel_cancel_amount as Amount , ';
--           Query_Str1 :='   to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
--                               c.cdel_cancel_rate end),''999d9999'') as NetRate,
--            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
--                               else  c.cdel_Spot_rate end),''999d9999'')as Spot,
--            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
--                               else c.cdel_forward_rate end ),''990d9999'')as FwdRate , 
--            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
--                               else c.cdel_margin_rate end),''990d9999'') as Margin,
--            deal_maturity_date as MaturityDate,
--            (case when c.cdel_cancel_type=27000001 then            
--                      to_char((d.deal_exchange_rate),''999d9999'') else null end )as BookingRate,
--            c.cdel_profit_loss as PandL,
--            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,            
--            (case  when nvl((select remt_remittance_type from 
--                        trtran008a 
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),NULL) =33900001
--                        then  ''Inward Remittance''
--                  when nvl((select remt_remittance_type from 
--                        trtran008a 
--                        where remt_remittance_reference= cdel_trade_reference
--                        and remt_record_status not in (10200005,10200006)),NULL) =33900002
--                        then  ''Outward Remittance''
--                  when d.deal_deal_type=25400001 then ''Cash Rate''
--                  when c.cdel_deal_number is null then ''FX Booking''
--                  when c.cdel_cancel_type=27000001 then ''FX Cancellation''
--                  when c.cdel_cancel_type=27000002 then ''FX Utilisation''
--                  else ''No Matching''
--                  end) DealType,
--            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  NULL
--                  when (c.cdel_cancel_type=27000002) then ''ED Benefit '' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  || '' Paisa ''
--                  else NULL end) as Remarks,
--                  '||''''||frmDate||''''||' AsonDate,
--                  '||''''||ToDate||''''||' ToDate,                  
--                  DEAL_backup_deal Deal_type,DEAL_INIT_CODE,
--                  TO_DATE('||''''||frmDate||''''||') as ASON_DATE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY COUNTERPARTY,
--            0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--            0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--            case when deal_buy_sell = 25300001 then
--             pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end BuySell,
--             pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
--             deal_maturity_from ExpiryDate,null Optiontype,null PrimiumStatus,0 PrimiumAmount,
--            CASE WHEN NVL(CDEL_PANDL_SPOT,0) > 0
--            THEN CDEL_PANDL_SPOT
--            ELSE fncgetSwaerRate(30400004,CDEL_CANCEL_DATE)END SwaerRate,0 NetPandL,NULL CPremiumStatus,0  CPremiumAmount          
--          from trtran001 d inner join trtran006 c
--       on deal_deal_number= cdel_deal_number
--     where deal_record_status not in (10200005,10200006)
--      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
--      and (CDEL_CANCEL_DATE='||''''||frmDate||''''||')) x
--      group by deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
--       NetRate,Spot,FwdRate,Margin,MaturityDate,
--        BookingRate,DealType,Remarks,AsonDate,ToDate,DEAL_COMPANY_CODE, COUNTERPARTY,ASON_DATE,
--        Deal_type,DEAL_INIT_CODE,BuySell,Exchange,ExpiryDate,Optiontype,SwaerRate ';     
-- Query_Str2 :=' union all
--              select  deal_deal_number,
--              pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
--            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
--            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
--            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
--            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
--            DEAL_USER_REFERENCE as ContractNo,
--            deal_base_amount as Amount ,
--            to_char(deal_exchange_rate,''999d9999'') as NetRate,
--            to_char(deal_Spot_rate,''999d9999'')as Spot,
--            to_char(deal_forward_rate,''990d9999'')as FwdRate , 
--            to_char(deal_margin_rate,''990d9999'') as Margin,
--            deal_maturity_date as MaturityDate,
--            null as BookingRate,
--            0 as PandL,
--            null as AmtInLacs,            
--            ''FX Booking'' DealType,
--            null as Remarks,
--            '||''''||frmDate||''''||' AsonDate,
--            '||''''||ToDate||''''||' ToDate, 
--            DEAL_backup_deal Deal_type,DEAL_INIT_CODE,
--            TO_DATE('||''''||frmDate||''''||') as ASON_DATE,
--            DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY COUNTERPARTY,
--          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--          pkgreturncursor.fncgetdescription(deal_buy_sell,2),
--          pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
--          deal_maturity_from ExpiryDate,null Optiontype,null,0,0,0,NULL,0
--     from trtran001 
--     where deal_record_status not in (10200005,10200006)     
--      and  DEAL_EXECUTE_DATE= '||''''||frmDate||''''||'
--      and deal_deal_type not in (25400001)
--      --and DEAL_init_code not in (33800055)
--    union all ';
--    Query_Str3 :='SELECT cfut_deal_number,
--        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)    AS ExposureType,
--        pkgreturncursor.fncgetdescription(cfut_COUNTER_PARTY,2)  AS BankName,
--        pkgreturncursor.fncgetdescription(cfut_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2) AS OtherCurrency,
--        CFUT_USER_REFERENCE                                      AS ContractNo,
--        cfut_base_amount                                         AS Amount ,
--        TO_CHAR(cfut_exchange_rate,''999d9999'')                   AS NetRate,
--        TO_CHAR(cfut_Spot_rate,''999d9999'')                       AS Spot,
--        TO_CHAR(cfut_forward_rate,''990d9999'')                    AS FwdRate ,
--        TO_CHAR(cfut_bank_margin,''990d9999'')                     AS Margin,
--        cfut_maturity_date                                       AS MaturityDate,
--        NULL                                                     AS BookingRate,
--        0                                                     AS PandL,
--        NULL                                                     AS AmtInLacs,
--        ''Future Booking'' DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        CFUT_backup_deal Deal_type,CFUT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,CFUT_COMPANY_CODE,CFUT_COUNTER_PARTY COUNTERPARTY,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        pkgreturncursor.fncgetdescription(cfut_buy_sell,2),
--        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
--        cfut_maturity_from ExpiryDate, null Optiontype,null,0,0,0,NULL,0
--      FROM trtran061
--      WHERE cfut_record_status NOT IN (10200005,10200006)
--      AND cfut_EXECUTE_DATE         = '||''''||frmDate||''''||' ';
-- Query_Str4 :='UNION ALL 
--      SELECT CFRV_DEAL_NUMBER,
--        pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,1)     AS Company,
--        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)      AS ExposureType,
--        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2)    AS BankName,
--        pkgreturncursor.fncgetdescription(cfut_base_currency,2)    AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2)   AS OtherCurrency,
--        CFUT_USER_REFERENCE                                        AS ContractNo,
--        C.CFRV_CANCEL_AMOUNT                                       AS Amount ,
--        TO_CHAR(CFRV_LOT_PRICE,''999d9999'')                         AS NetRate,
--        TO_CHAR(CFRV_SPOT_RATE,''999d9999'')                         AS Spot,
--        TO_CHAR(CFRV_FORWARD_RATE,''990d9999'')                      AS FwdRate ,
--        TO_CHAR(CFRV_BANK_MARGIN,''990d9999'')                       AS Margin,
--        cfut_maturity_date                                         AS MaturityDate,
--        TO_CHAR((d.cfut_exchange_rate),''999d9999'')                 AS BookingRate,
--        c.CFRV_PROFIT_LOSS                                         AS PandL,
--        ROUND((d.CFUT_BASE_AMOUNT* d.cfut_exchange_rate) /100000,2)AS AmtInLacs,
--        ''Future Cancellation'' DealType,
--        CFRV_DEALER_REMARKS AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        CFUT_backup_deal Deal_type,CFUT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,CFUT_COMPANY_CODE,CFUT_COUNTER_PARTY COUNTERPARTY,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        case when cfut_buy_sell = 25300001 then
--        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end,
--        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
--        cfut_maturity_from ExpiryDate,null Optiontype,null,0,
--        fncgetSwaerRate(30400004,CFRV_EXECUTE_DATE)SwaerRate,0,NULL,0           
--      FROM trtran061 d
--      INNER JOIN trtran063 c
--      ON cfut_deal_number           = cfrv_deal_number
--      WHERE cfut_record_status NOT IN (10200005,10200006)
--      AND cfrv_record_status NOT   IN (10200005,10200006)
--      AND CFRV_EXECUTE_DATE         ='||''''||frmDate||''''||'
--   UNION ALL ';
--Query_Str5 :='SELECT copt_deal_number,
--        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
--        CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
--        pkgreturncursor.fncgetdescription(COPT_BROKER_CODE,2) ELSE
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END  AS BankName,
--        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
--        COPT_USER_REFERENCE                                      AS ContractNo,
--        copt_base_amount                                         AS Amount ,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                     AS NetRate,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                     AS Spot,
--        TO_CHAR(0,''990d9999'')                                    AS FwdRate ,
--        TO_CHAR(0,''990d9999'')                                    AS Margin,
--        copt_maturity_date                                       AS MaturityDate,
--        NULL                                                     AS BookingRate,
--        0                                                     AS PandL,
--        NULL                                                     AS AmtInLacs,
--        ''Option Booking'' DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        COPT_backup_deal Deal_type,COPT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,COPT_COMPANY_CODE,COPT_COUNTER_PARTY COUNTERPARTY,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        pkgreturncursor.fncgetdescription(cosu_buy_sell,2),
--        CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
--        pkgreturncursor.fncgetdescription(COPT_EXCHANGE_CODE,2) ELSE
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END as Exchange,
--        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
--        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),
--        decode(COPT_PREMIUM_STATUS,33200002,-1,33200001,1,0) * ABS(COPT_PREMIUM_AMOUNT),
--        fncgetSwaerRate(30400004,COPT_EXECUTE_DATE) SwaerRate,
--        decode(COPT_PREMIUM_STATUS,33200002,-1,33200001,1,0)* COSU_PREMIUM_AMOUNT,
--        NULL,0
--      FROM TRTRAN071
--      JOIN TRTRAN072A ON
--         COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--      and COSM_SERIAL_NUMBER = 1
--      AND COSM_RECORD_STATUS NOT IN(10200005,10200006)      
--      JOIN TRTRAN072 ON
--          COSU_DEAL_NUMBER = COSM_DEAL_NUMBER
--      AND COSU_SERIAL_NUMBER = COSM_SERIAL_NUMBER
--      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
--      WHERE copt_record_status NOT IN (10200005,10200006)
--      AND COPT_EXECUTE_DATE = '||''''||frmDate||''''||' ';
--Query_Str6 :=' UNION ALL SELECT copt_deal_number,
--        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
--        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
--        CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
--        pkgreturncursor.fncgetdescription(COPT_BROKER_CODE,2) ELSE
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END  AS BankName,
--        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
--        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
--        COPT_USER_REFERENCE                                      AS ContractNo,
--        CORV_BASE_AMOUNT                                         AS Amount ,
--        TO_CHAR(CORV_EXERCISE_RATE,''999d9999'')                     AS NetRate,
--        TO_CHAR(CORV_EXERCISE_RATE,''999d9999'')                     AS Spot,
--        TO_CHAR(0,''990d9999'')                                    AS FwdRate ,
--        TO_CHAR(0,''990d9999'')                                    AS Margin,
--        copt_maturity_date                                       AS MaturityDate,
--        TO_CHAR(COSU_STRIKE_RATE,''999d9999'')                   AS BookingRate,
--        PKGFOREXPROCESS.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER, 1)AS PandL,
--        NULL                                                     AS AmtInLacs,
--        CASE WHEN CORV_EXERCISE_TYPE = 33000001 THEN
--        ''Option Exercise'' 
--             WHEN CORV_EXERCISE_TYPE = 33000002 THEN
--        ''No Exercise'' 
--        ELSE
--        ''Option Cancel'' 
--        END DealType,
--        NULL    AS Remarks,
--        '||''''||frmDate||''''||' AsonDate,
--        '||''''||ToDate||''''||' ToDate, 
--        COPT_backup_deal Deal_type,COPT_INIT_CODE,
--        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,COPT_COMPANY_CODE,COPT_COUNTER_PARTY COUNTERPARTY,
--        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
--        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
--        case when COSU_BUY_SELL = 25300001 then
--        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end,
--                CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
--        pkgreturncursor.fncgetdescription(COPT_EXCHANGE_CODE,2) ELSE
--        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END,
--        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
--        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),
--        decode(COPT_PREMIUM_STATUS,33200002,-1,33200001,1,0) * ABS(COPT_PREMIUM_AMOUNT),
--        CASE WHEN NVL(CORV_PANDL_SPOT,0) > 0
--        THEN CORV_PANDL_SPOT
--        ELSE fncgetSwaerRate(30400004,CORV_EXERCISE_DATE)END SwaerRate,
--        Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,Corv_Serial_Number),
--        pkgreturncursor.fncgetdescription(CORV_PREMIUM_STATUS,2),
--        decode(CORV_PREMIUM_STATUS,33200002,-1,33200001,1,0) * ABS(CORV_PREMIUM_AMOUNT)        
--      FROM TRTRAN071
--      JOIN TRTRAN073 ON
--         COPT_DEAL_NUMBER = CORV_DEAL_NUMBER
--      AND CORV_RECORD_STATUS NOT IN(10200005,10200006)      
--      JOIN TRTRAN072 ON
--          COSU_DEAL_NUMBER = CORV_DEAL_NUMBER
--      AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
--      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
--      WHERE copt_record_status NOT IN (10200005,10200006)
--      AND CORV_EXERCISE_DATE = '||''''||frmDate||''''||'';      
----    Query_Str7 :=' UNION ALL
----      SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,
----      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),
----      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),NULL,null,null,null,
----        pkgreturncursor.fncgetdescription(Deal_type,2),
----        null Remarks, '||''''||frmDate||''''||' AsonDate, '||''''||frmDate||''''||' ToDate, 
----        Deal_type, 0 DEAL_INIT_CODE, ASON_DATE, CompanyCode,
----       sum(FRWDTD),sum(FRWMTD),sum(FRWYTD),sum(FURDTD),sum(FURMTD),sum(FURYTD),sum(OPTDTD),sum(OPTMTD),sum(OPTYTD),
----       1 Reporttype,
----       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0))) Forwardtotal,
----       (sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ sum(NVL(FURYTD,0))) FutureTotal,
----       (sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0))) OptionTotal,
----       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0)) + sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ 
----       sum(NVL(FURYTD,0)) + sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0)))PnLTotal,
----       SUM(FRWMTM)FRWMTM,SUM(FURMTM)FURMTM,SUM(OPTMTM)OPTMTM,
----       SUM(NVL(FRWMTM,0)) + SUM(NVL(FURMTM,0)) + SUM(NVL(OPTMTM,0)) MTMTotal,null,NULL,null ExpiryDate,null,null,0,0,0,NULL,0
----      FROM trsystem983  WHERE ason_date = '||''''||frmDate||''''||' 
----      group by Deal_type,ason_date,CompanyCode
--       Query_Str7 :=' ) WHERE ASON_DATE = '||''''||frmDate||''''||'
--      '||finalcondition||'';
--      delete from temp;
--      insert into temp values(Query_Str,'Query_Str');
--      insert into temp values(Query_Str1,'Query_Str1');
--      insert into temp values(Query_Str2,'Query_Str2');
--      insert into temp values(Query_Str3,'Query_Str3');
--      insert into temp values(Query_Str4,'Query_Str4');
--      insert into temp values(Query_Str5,'Query_Str5');
--      insert into temp values(Query_Str6,'Query_Str6');
--       insert into temp values(Query_Str7,'Query_Str7');COMMIT;
--    open gencursor for  Query_Str || Query_Str1|| Query_Str2|| Query_Str3||Query_Str4||Query_Str5||Query_Str6 || Query_Str7 ;
--    Goto Process_End;   
--  End If;

if varReportID = 'CURRFUTUREDEALFORTHEDAYNEW1'  then 
  NUMRECORDSETS:=2;
--  if Varreportid ='TREASURYNUMBERMTM' Then
--  Select Fncuserpnlpopulate(Frmdate,Varuserid,'Y')
--  INTO NUMRECORDS FROM DUAL;
-- ELSE
--  SELECT FNCUSERPNLPOPULATE(FRMDATE,VARUSERID,'N','N')
--  INTO NUMRECORDS FROM DUAL;
--  end if;

   SELECT MAX( HDAY_CALENDAR_DATE) INTO DATTEMP
  from trsystem001 where HDAY_CALENDAR_DATE<frmDate
   And Hday_Day_Status Not In (26400007,26400008,26400009);
    Query_Str :='SELECT  deal_deal_number IBSReference,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
        Amount as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
        BookingRate,PandL as PandL,
        AmtInLacs as AmtInLacs,         
          DealType,Remarks,
          '||''''||frmDate||''''||' AsonDate,
          '||''''||ToDate||''''||' ToDate,
          Deal_type,DEAL_INIT_CODE,ASON_DATE,DEAL_COMPANY_CODE ,COUNTERPARTY,TRADER,
          FRWDTD,FRWMTD,FRWYTD,FURDTD,FURMTD,FURYTD,OPTDTD,OPTMTD,OPTYTD ,Reporttype,
          Forwardtotal,FutureTotal,OptionTotal,PnLTotal,FRWMTM,FURMTM,OPTMTM,MTMTotal,
          (case when BuySell=''Buy'' then ''Import'' else ''Export'' end) BuySell,Exchange,ExpiryDate,
           pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1) as ProfitCenter,
           Optiontype,PrimiumStatus,PrimiumAmount,SwaerRate,NetPandL,
           round(CASE WHEN PandL != 0 THEN PandL/decode(SwaerRate,0,1,SwaerRate) ELSE 0 END,2) GainlossD,CPremiumStatus,CPremiumAmount
          FROM (     
     select deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
        sum(Amount) as Amount,NetRate,Spot,FwdRate,Margin,MaturityDate,
        BookingRate,sum(PandL) as PandL,
         sum( case when DealType=''Inward Remittance'' then
          -1* AmtInLacs 
          when DealType=''FX Cancellation'' then
           0
          else AmtInLacs end) as AmtInLacs,         
          DealType,Remarks,
          '||''''||frmDate||''''||' AsonDate,
          '||''''||ToDate||''''||' ToDate,
          Deal_type,DEAL_INIT_CODE,ASON_DATE,DEAL_COMPANY_CODE,COUNTERPARTY,TRADER,
          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
          CASE WHEN DealType = ''Inward Remittance'' THEN
          ''Sell''
          WHEN DealType = ''Outward Remittance'' THEN
          ''Buy'' else
          BuySell end as BuySell,Exchange,ExpiryDate,Optiontype, PrimiumStatus, sum(PrimiumAmount)PrimiumAmount,SwaerRate, sum(NetPandL)NetPandL,
          CPremiumStatus,Sum(CPremiumAmount)CPremiumAmount
          from(
           select  deal_deal_number,
           pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
            (case when d.deal_deal_type=25400001 then null else DEAL_USER_REFERENCE end) as ContractNo,
           c.cdel_cancel_amount as Amount , ';
           Query_Str1 :='   to_char((case when c.cdel_cancel_type=27000002 then d.deal_exchange_rate else 
                               c.cdel_cancel_rate end),''999d999999'') as NetRate,
            to_char((case when  c.cdel_cancel_type=27000002 then d.deal_spot_rate 
                               else  c.cdel_Spot_rate end),''999d999999'')as Spot,
            to_char(( case when  c.cdel_cancel_type=27000002 then d.deal_forward_rate
                               else c.cdel_forward_rate end ),''990d999999'')as FwdRate , 
            to_char(( case when c.cdel_cancel_type=27000002 then d.deal_margin_rate
                               else c.cdel_margin_rate end),''990d999999'') as Margin,
            deal_maturity_date as MaturityDate,
            (case when c.cdel_cancel_type=27000001 then            
                      to_char((d.deal_exchange_rate),''999d999999'') else null end )as BookingRate,
            c.cdel_profit_loss as PandL,
            round((c.cdel_cancel_amount* d.deal_exchange_rate) /100000,2)as AmtInLacs,            
            (case  when nvl((select remt_remittance_type from 
                        trtran008a 
                        where remt_remittance_reference= cdel_trade_reference
                        and remt_record_status not in (10200005,10200006)),NULL) =33900001
                        then  ''Inward Remittance''
                  when nvl((select remt_remittance_type from 
                        trtran008a 
                        where remt_remittance_reference= cdel_trade_reference
                        and remt_record_status not in (10200005,10200006)),NULL) =33900002
                        then  ''Outward Remittance''
                  when d.deal_deal_type=25400001 then ''Cash Rate''
                  when c.cdel_deal_number is null then ''FX Booking''
                  when c.cdel_cancel_type=27000001 then ''FX Cancellation''
                  when c.cdel_cancel_type=27000002 then ''FX Utilisation''
                  else ''No Matching''
                  end) DealType,
            (case when ((c.cdel_cancel_type=27000002) and (d.deal_maturity_date = c.cdel_cancel_date)) then  NULL
                  when (c.cdel_cancel_type=27000002) then ''ED Benefit '' ||  to_char(round((c.cdel_cancel_rate-d.deal_exchange_rate)*100,4))  || '' Paisa ''
                  else NULL end) as Remarks,
                  '||''''||frmDate||''''||' AsonDate,
                  '||''''||ToDate||''''||' ToDate,                  
                  DEAL_backup_deal Deal_type,DEAL_INIT_CODE,
                  TO_DATE('||''''||frmDate||''''||') as ASON_DATE,DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY COUNTERPARTY,DEAL_INIT_CODE TRADER,
            0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
            0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
            case when deal_buy_sell = 25300001 then
             pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2)end BuySell,           
             pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
             deal_maturity_from ExpiryDate,null Optiontype,null PrimiumStatus,0 PrimiumAmount,
            CASE WHEN NVL(CDEL_PANDL_SPOT,0) > 0
            THEN CDEL_PANDL_SPOT
            ELSE fncgetSwaerRate(30400004,CDEL_CANCEL_DATE)END SwaerRate,0 NetPandL,NULL CPremiumStatus,0  CPremiumAmount          
          from trtran001 d inner join trtran006 c
       on deal_deal_number= cdel_deal_number
     where deal_record_status not in (10200005,10200006)
      and nvl(cdel_record_status,10200001) not in (10200005,10200006)
      and (CDEL_CANCEL_DATE='||''''||frmDate||''''||')) x
      group by deal_deal_number,Company,ExposureType,BankName,BaseCurrency,OtherCurrency,ContractNo,
       NetRate,Spot,FwdRate,Margin,MaturityDate,
        BookingRate,DealType,Remarks,AsonDate,ToDate,DEAL_COMPANY_CODE, COUNTERPARTY,ASON_DATE,
        Deal_type,DEAL_INIT_CODE,BuySell,Exchange,ExpiryDate,Optiontype,SwaerRate ';     
 Query_Str2 :=' union all
              select  deal_deal_number,
              pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,1) as Company,
            pkgreturncursor.fncgetdescription(DEAL_backup_deal,2) as ExposureType,
            pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as BankName,
            pkgreturncursor.fncgetdescription(DEAL_base_currency,2) as BaseCurrency,
            pkgreturncursor.fncgetdescription(DEAL_Other_Currency,2) as OtherCurrency,
            DEAL_USER_REFERENCE as ContractNo,
            deal_base_amount as Amount ,
            to_char(deal_exchange_rate,''999d999999'') as NetRate,
            to_char(deal_Spot_rate,''999d999999'')as Spot,
            to_char(deal_forward_rate,''990d999999'')as FwdRate , 
            to_char(deal_margin_rate,''990d999999'') as Margin,
            deal_maturity_date as MaturityDate,
            null as BookingRate,
            0 as PandL,
            null as AmtInLacs,            
            ''FX Booking'' DealType,
            null as Remarks,
            '||''''||frmDate||''''||' AsonDate,
            '||''''||ToDate||''''||' ToDate, 
            DEAL_backup_deal Deal_type,DEAL_INIT_CODE,
            TO_DATE('||''''||frmDate||''''||') as ASON_DATE,
            DEAL_COMPANY_CODE,DEAL_COUNTER_PARTY COUNTERPARTY,DEAL_INIT_CODE TRADER,
          0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
          0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
          pkgreturncursor.fncgetdescription(deal_buy_sell,2),
          pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) as Exchange,
          deal_maturity_from ExpiryDate,null Optiontype,null,0,0,0,NULL,0
     from trtran001 
     where deal_record_status not in (10200005,10200006)     
      and  DEAL_EXECUTE_DATE= '||''''||frmDate||''''||'
      --and deal_deal_type not in (25400001)
      --and DEAL_init_code not in (33800055)
    union all ';
    Query_Str3 :='SELECT cfut_deal_number,
        pkgreturncursor.fncgetdescription(CFUT_COMPANY_CODE,1)   AS Company,
        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)    AS ExposureType,
        pkgreturncursor.fncgetdescription(cfut_COUNTER_PARTY,2)  AS BankName,
        pkgreturncursor.fncgetdescription(cfut_base_currency,2)  AS BaseCurrency,
        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2) AS OtherCurrency,
        CFUT_USER_REFERENCE                                      AS ContractNo,
        cfut_base_amount                                         AS Amount ,
        TO_CHAR(cfut_exchange_rate,''999d999999'')                   AS NetRate,
        TO_CHAR(cfut_Spot_rate,''999d999999'')                       AS Spot,
        TO_CHAR(cfut_forward_rate,''990d999999'')                    AS FwdRate ,
        TO_CHAR(cfut_bank_margin,''990d999999'')                     AS Margin,
        cfut_maturity_date                                       AS MaturityDate,
        NULL                                                     AS BookingRate,
        0                                                     AS PandL,
        NULL                                                     AS AmtInLacs,
        ''Future Booking'' DealType,
        NULL    AS Remarks,
        '||''''||frmDate||''''||' AsonDate,
        '||''''||ToDate||''''||' ToDate, 
        CFUT_backup_deal Deal_type,CFUT_INIT_CODE,
        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,CFUT_COMPANY_CODE,CFUT_COUNTER_PARTY COUNTERPARTY,CFUT_INIT_CODE TRADER,
        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
        pkgreturncursor.fncgetdescription(cfut_buy_sell,2),
        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
        cfut_maturity_from ExpiryDate, null Optiontype,null,0,0,0,NULL,0
      FROM trtran061
      WHERE cfut_record_status NOT IN (10200005,10200006)
      AND cfut_EXECUTE_DATE         = '||''''||frmDate||''''||' ';
 Query_Str4 :='UNION ALL 
      SELECT CFRV_DEAL_NUMBER,
        pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,1)     AS Company,
        pkgreturncursor.fncgetdescription(cfut_backup_deal,2)      AS ExposureType,
        pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2)    AS BankName,
        pkgreturncursor.fncgetdescription(cfut_base_currency,2)    AS BaseCurrency,
        pkgreturncursor.fncgetdescription(cfut_Other_Currency,2)   AS OtherCurrency,
        CFUT_USER_REFERENCE                                        AS ContractNo,
        C.CFRV_CANCEL_AMOUNT                                       AS Amount ,
        TO_CHAR(CFRV_LOT_PRICE,''999d999999'')                         AS NetRate,
        TO_CHAR(CFRV_SPOT_RATE,''999d999999'')                         AS Spot,
        TO_CHAR(CFRV_FORWARD_RATE,''990d999999'')                      AS FwdRate ,
        TO_CHAR(CFRV_BANK_MARGIN,''990d999999'')                       AS Margin,
        cfut_maturity_date                                         AS MaturityDate,
        TO_CHAR((d.cfut_exchange_rate),''999d999999'')                 AS BookingRate,
        c.CFRV_PROFIT_LOSS                                         AS PandL,
        ROUND((d.CFUT_BASE_AMOUNT* d.cfut_exchange_rate) /100000,2)AS AmtInLacs,
        ''Future Cancellation'' DealType,
        CFRV_DEALER_REMARKS AS Remarks,
        '||''''||frmDate||''''||' AsonDate,
        '||''''||ToDate||''''||' ToDate, 
        CFUT_backup_deal Deal_type,CFUT_INIT_CODE,
        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,CFUT_COMPANY_CODE,CFUT_COUNTER_PARTY COUNTERPARTY,CFUT_INIT_CODE TRADER,
        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
        case when cfut_buy_sell = 25300001 then
        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2) end BuySell,
        pkgreturncursor.fncgetdescription(cfut_exchange_code,2) as Exchange,
        cfut_maturity_from ExpiryDate,null Optiontype,null,0,
        fncgetSwaerRate(30400004,CFRV_EXECUTE_DATE)SwaerRate,0,NULL,0           
      FROM trtran061 d
      INNER JOIN trtran063 c
      ON cfut_deal_number           = cfrv_deal_number
      WHERE cfut_record_status NOT IN (10200005,10200006)
      AND cfrv_record_status NOT   IN (10200005,10200006)
      AND CFRV_EXECUTE_DATE         ='||''''||frmDate||''''||'
   UNION ALL ';
Query_Str5 :='SELECT copt_deal_number,
        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
        CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
        pkgreturncursor.fncgetdescription(COPT_BROKER_CODE,2) ELSE
        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END  AS BankName,
        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
        COPT_USER_REFERENCE                                      AS ContractNo,
        copt_base_amount                                         AS Amount ,
        TO_CHAR(COSU_STRIKE_RATE,''999d999999'')                     AS NetRate,
        TO_CHAR(COSU_STRIKE_RATE,''999d999999'')                     AS Spot,
        TO_CHAR(0,''990d999999'')                                    AS FwdRate ,
        TO_CHAR(0,''990d999999'')                                    AS Margin,
        copt_maturity_date                                       AS MaturityDate,
        NULL                                                     AS BookingRate,
        0                                                     AS PandL,
        NULL                                                     AS AmtInLacs,
        ''Option Booking'' DealType,
        NULL    AS Remarks,
        '||''''||frmDate||''''||' AsonDate,
        '||''''||ToDate||''''||' ToDate, 
        COPT_backup_deal Deal_type,COPT_INIT_CODE,
        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,COPT_COMPANY_CODE,COPT_COUNTER_PARTY COUNTERPARTY,COPT_INIT_CODE TRADER,
        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
        pkgreturncursor.fncgetdescription(cosu_buy_sell,2),
        CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
        pkgreturncursor.fncgetdescription(COPT_EXCHANGE_CODE,2) ELSE
        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END as Exchange,
        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),
        Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,1,'||''''||frmDate||''''||'),
        --decode(COPT_PREMIUM_STATUS,33200002,-1,33200001,1,0) * ABS(COPT_PREMIUM_AMOUNT),
        fncgetSwaerRate(30400004,COPT_EXECUTE_DATE) SwaerRate,
        --decode(COPT_PREMIUM_STATUS,33200002,-1,33200001,1,0)* COSU_PREMIUM_AMOUNT,
        Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,1,'||''''||frmDate||''''||'),
        NULL,0
      FROM TRTRAN071
      JOIN TRTRAN072A ON
         COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
      and COSM_SERIAL_NUMBER = 1
      AND COSM_RECORD_STATUS NOT IN(10200005,10200006)      
      JOIN TRTRAN072 ON
          COSU_DEAL_NUMBER = COSM_DEAL_NUMBER
      AND COSU_SERIAL_NUMBER = COSM_SERIAL_NUMBER
      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
      WHERE copt_record_status NOT IN (10200005,10200006)
      AND COPT_EXECUTE_DATE = '||''''||frmDate||''''||' ';
Query_Str6 :=' UNION ALL SELECT copt_deal_number,
        pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,1)   AS Company,
        pkgreturncursor.fncgetdescription(COPT_backup_deal,2)    AS ExposureType,
        CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
        pkgreturncursor.fncgetdescription(COPT_BROKER_CODE,2) ELSE
        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END  AS BankName,
        pkgreturncursor.fncgetdescription(COPT_base_currency,2)  AS BaseCurrency,
        pkgreturncursor.fncgetdescription(COPT_Other_Currency,2) AS OtherCurrency,
        COPT_USER_REFERENCE                                      AS ContractNo,
        CORV_BASE_AMOUNT                                         AS Amount ,
        TO_CHAR(CORV_EXERCISE_RATE,''999d999999'')                     AS NetRate,
        TO_CHAR(CORV_EXERCISE_RATE,''999d999999'')                     AS Spot,
        TO_CHAR(0,''990d999999'')                                    AS FwdRate ,
        TO_CHAR(0,''990d999999'')                                    AS Margin,
        copt_maturity_date                                       AS MaturityDate,
        TO_CHAR(COSU_STRIKE_RATE,''999d999999'')                   AS BookingRate,
        PKGFOREXPROCESS.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER, 1)AS PandL,
        NULL                                                     AS AmtInLacs,
        CASE WHEN CORV_EXERCISE_TYPE = 33000001 THEN
        ''Option Exercise'' 
             WHEN CORV_EXERCISE_TYPE = 33000002 THEN
        ''No Exercise'' 
        ELSE
        ''Option Cancel'' 
        END DealType,
        NULL    AS Remarks,
        '||''''||frmDate||''''||' AsonDate,
        '||''''||ToDate||''''||' ToDate, 
        COPT_backup_deal Deal_type,COPT_INIT_CODE,
        TO_DATE('||''''||frmDate||''''||') as ASON_DATE,COPT_COMPANY_CODE,COPT_COUNTER_PARTY COUNTERPARTY,COPT_INIT_CODE TRADER,
        0 FRWDTD,0 FRWMTD,0 FRWYTD,0 FURDTD,0 FURMTD,0 FURYTD,0 OPTDTD,0 OPTMTD,0 OPTYTD ,0 Reporttype,
        0 Forwardtotal,0 FutureTotal,0 OptionTotal,0 PnLTotal,0 FRWMTM,0 FURMTM,0 OPTMTM,0 MTMTotal,
        case when COSU_BUY_SELL = 25300001 then
        pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2) end BuySell,
                CASE WHEN COPT_CONTRACT_TYPE = 32800001 THEN 
        pkgreturncursor.fncgetdescription(COPT_EXCHANGE_CODE,2) ELSE
        pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) END,
        copt_expiry_date ExpiryDate, pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2),
        pkgreturncursor.fncgetdescription(COPT_PREMIUM_STATUS,2),
        --decode(COPT_PREMIUM_STATUS,33200002,-1,33200001,1,0) * ABS(COPT_PREMIUM_AMOUNT),
        Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,Corv_Serial_Number,'||''''||frmDate||''''||'),
        CASE WHEN NVL(CORV_PANDL_SPOT,0) > 0
        THEN CORV_PANDL_SPOT
        ELSE fncgetSwaerRate(30400004,CORV_EXERCISE_DATE)END SwaerRate,
        Pkgforexprocess.Fncgetprofitlossoptnetpandl(Copt_Deal_Number,Corv_Serial_Number),
        pkgreturncursor.fncgetdescription(CORV_PREMIUM_STATUS,2),
        decode(CORV_PREMIUM_STATUS,33200002,-1,33200001,1,0) * ABS(CORV_PREMIUM_AMOUNT)        
      FROM TRTRAN071
      JOIN TRTRAN073 ON
         COPT_DEAL_NUMBER = CORV_DEAL_NUMBER
      AND CORV_RECORD_STATUS NOT IN(10200005,10200006)      
      JOIN TRTRAN072 ON
          COSU_DEAL_NUMBER = CORV_DEAL_NUMBER
      AND COSU_SERIAL_NUMBER = CORV_SERIAL_NUMBER
      AND COSU_RECORD_STATUS NOT IN(10200005,10200006) 
      WHERE copt_record_status NOT IN (10200005,10200006)
      AND CORV_EXERCISE_DATE = '||''''||frmDate||''''||'';      
--    Query_Str7 :=' UNION ALL
--      SELECT NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,
--      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),
--      TO_CHAR(0,''990d9999''),TO_CHAR(0,''990d9999''),NULL,null,null,null,
--        pkgreturncursor.fncgetdescription(Deal_type,2),
--        null Remarks, '||''''||frmDate||''''||' AsonDate, '||''''||frmDate||''''||' ToDate, 
--        Deal_type, 0 DEAL_INIT_CODE, ASON_DATE, CompanyCode,
--       sum(FRWDTD),sum(FRWMTD),sum(FRWYTD),sum(FURDTD),sum(FURMTD),sum(FURYTD),sum(OPTDTD),sum(OPTMTD),sum(OPTYTD),
--       1 Reporttype,
--       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0))) Forwardtotal,
--       (sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ sum(NVL(FURYTD,0))) FutureTotal,
--       (sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0))) OptionTotal,
--       (sum(NVL(FRWDTD,0))+ sum(NVL(FRWMTD,0))+ sum(NVL(FRWYTD,0)) + sum(NVL(FURDTD,0))+ sum(NVL(FURMTD,0))+ 
--       sum(NVL(FURYTD,0)) + sum(NVL(OPTDTD,0))+ sum(NVL(OPTMTD,0))+ sum(NVL(OPTYTD,0)))PnLTotal,
--       SUM(FRWMTM)FRWMTM,SUM(FURMTM)FURMTM,SUM(OPTMTM)OPTMTM,
--       SUM(NVL(FRWMTM,0)) + SUM(NVL(FURMTM,0)) + SUM(NVL(OPTMTM,0)) MTMTotal,null,NULL,null ExpiryDate,null,null,0,0,0,NULL,0
--      FROM trsystem983  WHERE ason_date = '||''''||frmDate||''''||' 
--      group by Deal_type,ason_date,CompanyCode
       Query_Str7 :=' ) WHERE ASON_DATE = '||''''||frmDate||''''||'
      '||finalcondition||'';
      delete from temp;
      insert into temp values(Query_Str,'Query_Str');
      insert into temp values(Query_Str1,'Query_Str1');
      insert into temp values(Query_Str2,'Query_Str2');
      insert into temp values(Query_Str3,'Query_Str3');
      insert into temp values(Query_Str4,'Query_Str4');
      insert into temp values(Query_Str5,'Query_Str5');
      insert into temp values(Query_Str6,'Query_Str6');
       insert into temp values(Query_Str7,'Query_Str7');COMMIT;
    open gencursor for  Query_Str || Query_Str1|| Query_Str2|| Query_Str3||Query_Str4||Query_Str5||Query_Str6 || Query_Str7 ;
    Goto Process_End;   
  End If;
--if varReportID = 'FOREXFINAL'  then
--     numRecords:=2;
--     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
--      WHERE HDAY_LOCATION_CODE = 30299999 
--        AND HDAY_CALENDAR_DATE < frmdate
--        AND HDAY_DAY_STATUS = 26400005;
--     Query_str:= fncProductPnlPopulate(ToDate,varUserID);
--     Query_str:= fncProductPnlPopulate(frmDate,varUserID);         
--     open gencursor for
--        SELECT Description,Trader,recorder,ReportOrder,Product,SUM(OpenBuy)OpenBuy,SUM(OpenSell)OpenSell,
--          SUM(Closed)Closed,SUM(MTMAmount)MTMAmount,SUM(ClosedAmount)ClosedAmount,
--          SUM(POpenBuy)POpenBuy,SUM(POpenSell)POpenSell,SUM(PClosed)PClosed,
--          SUM(PMTMAmount)PMTMAmount,SUM(PClosedAmount)PClosedAmount,
--          SUM(nvl(ActualMTM,0)) - sum(nvl(PActualMTM,0)) Deviation,
--          sum(ActualMTM)ActualMTM,sum(PActualMTM)PActualMTM,currency,
--          UserId,ToDate AsonDate,frmDate FromDate,sum(DeltaValue)DeltaValue,sum(OptionMTM)OptionMTM FROM (
--          SELECT DESCRIPTION Description,Trader,recorder recorder,
--            CASE WHEN recorder in(1,2,3) THEN 1 ELSE 2 END ReportOrder,
--            Pkgreturncursor.Fncgetdescription(Trader,1)Product,
--            case WHEN recorder in(1,2,3) THEN
--              SUM(CASE WHEN BUYSELLCODE = 25300001 and ProcessComplete = 12400002 THEN DEALBASEAMOUNT END)
--            ELSE
--              SUM(CASE WHEN ProcessComplete = 12400002 THEN DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT * -1) END)
--            END AS OpenBuy,
--            SUM(CASE WHEN BUYSELLCODE = 25300002 and ProcessComplete = 12400002 THEN DEALBASEAMOUNT END) AS OpenSell,
--            SUM(PROFITLOSS) Closed,SUM(FRWMTM) MTMAmount,SUM(CANCELAMOUNT) ClosedAmount,
--            0 POpenBuy,0 POpenSell,0 PClosed,0 PMTMAmount,0 PClosedAmount,
--            SUM(nvl(PROFITLOSS,0)) + SUM(nvl(FRWMTM,0))ActualMTM, 0 PActualMTM,0 Deviation,ToDate AS AsonDate,
--            Pkgreturncursor.Fncgetdescription(currencycode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) currency,
--            userId UserId,1 TODAY,SUM(DeltaValue)DeltaValue,
--            sum(fncgetOPTMTM(dealnumber,ason_date,currencycode))OptionMTM
--          FROM TRSYSTEM983 where ason_date = ToDate
--          --AND DEAL_TYPE not in(33399999)
--          GROUP BY DESCRIPTION,Trader,recorder,currencycode,forcurrency,userId
--          UNION ALL
--          SELECT DESCRIPTION Description,Trader,recorder recorder,
--            CASE WHEN recorder in(1,2,3) THEN 1 ELSE 2 END ReportOrder,
--            Pkgreturncursor.Fncgetdescription(Trader,1)Product,
--            0 OpenBuy,0 OpenSell,0 Closed,0 MTMAmount,0 ClosedAmount,
--            case WHEN recorder in(1,2,3) THEN
--              SUM(CASE WHEN BUYSELLCODE = 25300001 and ProcessComplete = 12400002 THEN DEALBASEAMOUNT END)
--            ELSE
--              SUM(CASE WHEN ProcessComplete = 12400002 THEN DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT * -1) END)
--            END AS OpenBuy,
--            SUM(CASE WHEN BUYSELLCODE = 25300002 and ProcessComplete = 12400002 THEN DEALBASEAMOUNT END) AS POpenSell,
--            SUM(PROFITLOSS) PClosed,SUM(FRWMTM) PMTMAmount,SUM(CANCELAMOUNT) PClosedAmount,
--            0 ActualMTM, SUM(nvl(PROFITLOSS,0)) + SUM(nvl(FRWMTM,0)) PActualMTM,0 Deviation,ToDate AS AsonDate,
--            Pkgreturncursor.Fncgetdescription(currencycode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) currency,
--            userId UserId,2 TODAY,SUM(DeltaValue)DeltaValue,sum(fncgetOPTMTM(dealnumber,ason_date,currencycode))OptionMTM
--          FROM TRSYSTEM983 
--          where ason_date = frmDate 
--          --AND DEAL_TYPE not in(33399999)
--          GROUP BY DESCRIPTION,Trader,recorder,currencycode,forcurrency,userId)
--          GROUP BY Description,Trader,recorder,ReportOrder,Product,currency,UserId,AsonDate,frmdate
--          order by Trader,recorder;     
--    open nextCursor for
--      SELECT a.DESCRIPTION Description,a.Trader Trader,case when a.recorder in(1,2,3) then 1 else 2 end recorder,1 ReportOrder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        CASE WHEN a.BUYSELLCODE = 25300001 THEN ABS(a.DEALBASEAMOUNT) END AS OpenBuy,
--        CASE WHEN a.BUYSELLCODE = 25300002 THEN ABS(a.DEALBASEAMOUNT) END AS OpenSell,
--        a.PROFITLOSS Closed,a.FRWMTM MTMAmount,a.CANCELAMOUNT ClosedAmount,1 As Today,
--        dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--        Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(a.forcurrency,2) Currency,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,
--        ToDate AS AsonDate,userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,mtmrate
--      FROM TRSYSTEM983 a
--      where ason_date = ToDate
--      AND A.DEAL_TYPE not in(33399999)
--      and a.recorder in(1,2,3,4,5)
--      union all    
--      SELECT a.DESCRIPTION Description,a.Trader,case when a.recorder in(1,2,3) then 1 else 2 end recorder,2 ReportOrder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        CASE WHEN a.BUYSELLCODE = 25300001 THEN ABS(a.DEALBASEAMOUNT) END AS OpenBuy,
--        CASE WHEN a.BUYSELLCODE = 25300002 THEN ABS(a.DEALBASEAMOUNT) END AS OpenSell,
--        a.PROFITLOSS Closed,a.FRWMTM MTMAmount,a.CANCELAMOUNT ClosedAmount,2 PToday,
--        dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--        Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(a.forcurrency,2) Currency,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,
--        frmDate AS AsonDate,userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,mtmrate
--      FROM TRSYSTEM983 a  where ason_date = frmDate
--      AND A.DEAL_TYPE not in(33399999)
--      and a.recorder in(1,2,3,4,5)
--      order by 3,2; 
--    Goto Process_End;   
--End If; 
--if varReportID = 'FOREXFINAL'  then
--     numRecords:=2;
--     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
--      WHERE HDAY_LOCATION_CODE = 30299999 
--        AND HDAY_CALENDAR_DATE < frmdate
--        AND HDAY_DAY_STATUS = 26400005;
--     Query_str:= fncProductPnlPopulate(ToDate,varUserID);
--     Query_str:= fncProductPnlPopulate(frmDate,varUserID);         
--     open gencursor for
--        SELECT Description,Trader,recorder,ReportOrder,Product,SUM(OpenBuy)OpenBuy,SUM(OpenSell)OpenSell,
--          SUM(Closed)Closed,SUM(MTMAmount)MTMAmount,SUM(ClosedAmount)ClosedAmount,
--          SUM(POpenBuy)POpenBuy,SUM(POpenSell)POpenSell,SUM(PClosed)PClosed,
--          SUM(PMTMAmount)PMTMAmount,SUM(PClosedAmount)PClosedAmount,
--          SUM(nvl(ActualMTM,0)) - sum(nvl(PActualMTM,0)) Deviation,
--          sum(ActualMTM)ActualMTM,sum(PActualMTM)PActualMTM,currency,
--          UserId,ToDate AsonDate,frmDate FromDate,sum(DeltaValue)DeltaValue,sum(OptionMTM)OptionMTM FROM (
--          SELECT DESCRIPTION Description,Trader,recorder recorder,
--            CASE WHEN recorder in(1,2,3) THEN 1 ELSE 2 END ReportOrder,
--            Pkgreturncursor.Fncgetdescription(Trader,1)Product,
--            case WHEN recorder in(1,2,3) THEN
--              SUM(CASE WHEN BUYSELLCODE = 25300001 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END)
--            ELSE
--              SUM(CASE WHEN ProcessComplete = 12400002 THEN DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT * -1) END)
--            END AS OpenBuy,
--            SUM(CASE WHEN BUYSELLCODE = 25300002 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END) AS OpenSell,
--            SUM(PROFITLOSS) Closed,
--            SUM(CASE WHEN recorder in(1,2,3) THEN FRWMTM
--            else OPTVPLINR end) MTMAmount, SUM(CANCELAMOUNT) ClosedAmount,
--            0 POpenBuy,0 POpenSell,0 PClosed,0 PMTMAmount,0 PClosedAmount,
--            SUM(nvl(PROFITLOSS,0)) + SUM(CASE WHEN recorder in(1,2,3) THEN nvl(FRWMTM,0)
--            else nvl(OPTVPLINR,0) end) ActualMTM, 0 PActualMTM,0 Deviation,ToDate AS AsonDate,
--            Pkgreturncursor.Fncgetdescription(currencycode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) currency,
--            userId UserId,1 TODAY,SUM(DeltaValue)DeltaValue,
--            sum(fncgetOPTMTM(dealnumber,ason_date,currencycode))OptionMTM
--          FROM TRSYSTEM983 where ason_date = ToDate
--          --AND DEAL_TYPE not in(33399999)
--          GROUP BY DESCRIPTION,Trader,recorder,currencycode,forcurrency,userId
--          UNION ALL
--          SELECT DESCRIPTION Description,Trader,recorder recorder,
--            CASE WHEN recorder in(1,2,3) THEN 1 ELSE 2 END ReportOrder,
--            Pkgreturncursor.Fncgetdescription(Trader,1)Product,
--            0 OpenBuy,0 OpenSell,0 Closed,0 MTMAmount,0 ClosedAmount,
--            case WHEN recorder in(1,2,3) THEN
--              SUM(CASE WHEN BUYSELLCODE = 25300001 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END)
--            ELSE
--              SUM(CASE WHEN ProcessComplete = 12400002 THEN DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT * -1) END)
--            END AS OpenBuy,
--            SUM(CASE WHEN BUYSELLCODE = 25300002 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END) AS POpenSell,
--            SUM(PROFITLOSS) PClosed,SUM(CASE WHEN recorder in(1,2,3) THEN FRWMTM
--            else OPTVPLINR end) PMTMAmount,SUM(CANCELAMOUNT) PClosedAmount,
--            0 ActualMTM, SUM(nvl(PROFITLOSS,0)) + SUM(CASE WHEN recorder in(1,2,3) THEN nvl(FRWMTM,0)
--            else nvl(OPTVPLINR,0) end) PActualMTM,0 Deviation,ToDate AS AsonDate,
--            Pkgreturncursor.Fncgetdescription(currencycode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) currency,
--            userId UserId,2 TODAY,SUM(DeltaValue)DeltaValue,sum(fncgetOPTMTM(dealnumber,ason_date,currencycode))OptionMTM
--          FROM TRSYSTEM983 
--          where ason_date = frmDate 
--          --AND DEAL_TYPE not in(33399999)
--          GROUP BY DESCRIPTION,Trader,recorder,currencycode,forcurrency,userId)
--          GROUP BY Description,Trader,recorder,ReportOrder,Product,currency,UserId,AsonDate,frmdate
--          order by Trader,recorder;     
--    open nextCursor for
--      SELECT a.DESCRIPTION Description,a.Trader Trader,case when a.recorder in(1,2,3) then 1 else 2 end recorder,1 ReportOrder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        a.PROFITLOSS Closed,
--        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
--        a.CANCELAMOUNT ClosedAmount,1 As Today,
--        dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--        Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(a.forcurrency,2) Currency,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)Deal_type,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,
--        ToDate AS AsonDate,userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
--        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
--        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--        CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--        CENTERDBY Center,ENTERDBY EnterdBy,
--        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--        Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
--        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
--        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--        CPREMIUMAMOUNT CPremiumAmount
--      FROM TRSYSTEM983 a
--      where ason_date = ToDate
--      AND A.DEAL_TYPE not in(33399999)
--      and a.recorder in(1,2,3,4,5)
--      union all    
--      SELECT a.DESCRIPTION Description,a.Trader,case when a.recorder in(1,2,3) then 1 else 2 end recorder,2 ReportOrder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        a.PROFITLOSS Closed,
--        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,
--        a.CANCELAMOUNT ClosedAmount,2 PToday,
--        dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--        Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(a.forcurrency,2) Currency,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)Deal_type,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,
--        frmDate AS AsonDate,userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
--        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
--        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--        CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--        CENTERDBY Center,ENTERDBY EnterdBy,
--        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--        Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
--        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
--        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,CPREMIUMAMOUNT CPremiumAmount        
--      FROM TRSYSTEM983 a  where ason_date = frmDate
--      AND A.DEAL_TYPE not in(33399999)
--      and a.recorder in(1,2,3,4,5)
--      order by 3,2; 
--    Goto Process_End;   
--End If; 
if varReportID = 'FOREXFINAL'  then
     --numRecords:=2;
     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
      WHERE HDAY_LOCATION_CODE = 30299999 
        AND HDAY_CALENDAR_DATE < frmdate
        AND HDAY_DAY_STATUS = 26400005;
     Query_str:= fncProductPnlPopulate(ToDate,varUserID);
     Query_str:= fncProductPnlPopulate(frmDate,varUserID);         
     open gencursor for
        SELECT Description,Trader,recorder,ReportOrder,Product,SUM(OpenBuy)OpenBuy,SUM(OpenSell)OpenSell,
          SUM(Closed)Closed,SUM(MTMAmount)MTMAmount,SUM(ClosedAmount)ClosedAmount,
          SUM(POpenBuy)POpenBuy,SUM(POpenSell)POpenSell,SUM(PClosed)PClosed,
          SUM(PMTMAmount)PMTMAmount,SUM(PClosedAmount)PClosedAmount,
          SUM(nvl(ActualMTM,0)) - sum(nvl(PActualMTM,0)) Deviation,
          sum(ActualMTM)ActualMTM,sum(PActualMTM)PActualMTM,currency,
          UserId,ToDate AsonDate,frmDate FromDate,sum(DeltaValue)DeltaValue,sum(OptionMTM)OptionMTM,
          sum(OpenBaseAmount) OpenBaseAmount,sum(ClosedBaseAmount)ClosedBaseAmount, 
          sum(POpenBaseAmount) POpenBaseAmount,sum(PClosedBaseAmount)PClosedBaseAmount,
          pkgreturnreport.getCompanyName(varUserID) as CompanyName
          FROM (
          SELECT DESCRIPTION Description,Trader,recorder recorder,
            CASE WHEN recorder in(1,2,3) THEN 1 ELSE 2 END ReportOrder,
            Pkgreturncursor.Fncgetdescription(Trader,1)Product,
            case WHEN recorder in(1,2,3) THEN
              SUM(CASE WHEN BUYSELLCODE = 25300001 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END)
            ELSE
              SUM(ABS(OUTSTANDINGAMOUNT))
            END AS OpenBuy,
            SUM(CASE WHEN BUYSELLCODE = 25300002 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END) AS OpenSell,
            SUM(PROFITLOSS) Closed,
            SUM(CASE WHEN recorder in(1,2,3) THEN FRWMTM
            else OPTVPLINR end) MTMAmount, SUM(CANCELAMOUNT) ClosedAmount,
            0 POpenBuy,0 POpenSell,0 PClosed,0 PMTMAmount,0 PClosedAmount,
            SUM(nvl(PROFITLOSS,0)) + SUM(CASE WHEN recorder in(1,2,3) THEN nvl(FRWMTM,0)
            else nvl(OPTVPLINR,0) end) ActualMTM, 0 PActualMTM,0 Deviation,ToDate AS AsonDate,
            Pkgreturncursor.Fncgetdescription(currencycode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) currency,
            userId UserId,1 TODAY,SUM(DeltaValue)DeltaValue,
            sum(fncgetOPTMTM(dealnumber,ason_date,currencycode))OptionMTM,
            sum(CASE WHEN ProcessComplete = 12400002 THEN
            DealBaseAmount  end) OpenBaseAmount,
            sum(CASE WHEN ProcessComplete = 12400001 THEN
            DealBaseAmount  end) ClosedBaseAmount,
            0 POpenBaseAmount,0 PClosedBaseAmount
          FROM TRSYSTEM983 where ason_date = ToDate
          --AND DEAL_TYPE not in(33399999)
          GROUP BY DESCRIPTION,Trader,recorder,currencycode,forcurrency,userId
          UNION ALL
          SELECT DESCRIPTION Description,Trader,recorder recorder,
            CASE WHEN recorder in(1,2,3) THEN 1 ELSE 2 END ReportOrder,
            Pkgreturncursor.Fncgetdescription(Trader,1)Product,
            0 OpenBuy,0 OpenSell,0 Closed,0 MTMAmount,0 ClosedAmount,
            case WHEN recorder in(1,2,3) THEN
              SUM(CASE WHEN BUYSELLCODE = 25300001 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END)
            ELSE
              SUM(ABS(OUTSTANDINGAMOUNT))
            END AS OpenBuy,
            SUM(CASE WHEN BUYSELLCODE = 25300002 and ProcessComplete = 12400002 THEN OUTSTANDINGAMOUNT END) AS POpenSell,
            SUM(PROFITLOSS) PClosed,SUM(CASE WHEN recorder in(1,2,3) THEN FRWMTM
            else OPTVPLINR end) PMTMAmount,SUM(CANCELAMOUNT) PClosedAmount,
            0 ActualMTM, SUM(nvl(PROFITLOSS,0)) + SUM(CASE WHEN recorder in(1,2,3) THEN nvl(FRWMTM,0)
            else nvl(OPTVPLINR,0) end) PActualMTM,0 Deviation,ToDate AS AsonDate,
            Pkgreturncursor.Fncgetdescription(currencycode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) currency,
            userId UserId,2 TODAY,SUM(DeltaValue)DeltaValue,sum(fncgetOPTMTM(dealnumber,ason_date,currencycode))OptionMTM,0,0,
            sum(CASE WHEN ProcessComplete = 12400002 THEN
            DealBaseAmount  end) POpenBaseAmount,
            sum(CASE WHEN ProcessComplete = 12400001 THEN
            DealBaseAmount  end) PClosedBaseAmount
          FROM TRSYSTEM983 
          where ason_date = frmDate 
          --AND DEAL_TYPE not in(33399999)
          GROUP BY DESCRIPTION,Trader,recorder,currencycode,forcurrency,userId)
          GROUP BY Description,Trader,recorder,ReportOrder,Product,currency,UserId,AsonDate,frmdate
          order by Trader,recorder;     
--    open nextCursor for
--      SELECT a.DESCRIPTION Description,a.Trader Trader,case when a.recorder in(1,2,3) then 1 else 2 end recorder,1 ReportOrder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        a.PROFITLOSS Closed,
--        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
--        a.CANCELAMOUNT ClosedAmount,1 As Today,
--        dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--        Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(a.forcurrency,2) Currency,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,
--        ToDate AS AsonDate,userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
--        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
--        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--        CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--        CENTERDBY Center,ENTERDBY EnterdBy,
--        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--        Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
--        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
--        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--        CPREMIUMAMOUNT CPremiumAmount,
--        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
--        case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)else OPTVPLUSD end MTMUSDAmount,
--        CANCELPNLSPOT SwareRate,
--        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
--        PRESENTVALUEINR,PRESENTVALUEUSD
--      FROM TRSYSTEM983 a
--      where ason_date = ToDate
--      AND A.DEAL_TYPE not in(33399999)
--      and a.recorder in(1,2,3,4,5,6)
--      union all    
--      SELECT a.DESCRIPTION Description,a.Trader,case when a.recorder in(1,2,3) then 1 else 2 end recorder,2 ReportOrder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        a.PROFITLOSS Closed,
--        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,
--        a.CANCELAMOUNT ClosedAmount,2 PToday,
--        dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--        Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(a.forcurrency,2) Currency,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,
--        frmDate AS AsonDate,userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
--        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
--        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,      
--        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--        CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--        CENTERDBY Center,ENTERDBY EnterdBy,
--        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--        Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
--        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
--        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,CPREMIUMAMOUNT CPremiumAmount,
--        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
--        case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)else OPTVPLUSD end MTMUSDAmount,
--        CANCELPNLSPOT SwareRate,
--        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
--        PRESENTVALUEINR,PRESENTVALUEUSD
--      FROM TRSYSTEM983 a  where ason_date = frmDate
--      AND A.DEAL_TYPE not in(33399999)
--      and a.recorder in(1,2,3,4,5,6)
--      order by 3,2; 
    Goto Process_End;   
End If; 
if varReportID = 'FOREXFINALBANKWISE'  then 
    Query_str:= fncProductPnlPopulate(frmdate,varUserID);
    numRecords:=2;
    Query_Str := 'SELECT USERID ProfitCenter,
      Pkgreturncursor.Fncgetdescription(Deal_type,2)BusinessUnit,
      CASE
        WHEN RECORDER IN(2,3) THEN ''Forward''
        WHEN RECORDER IN(1) THEN ''Future''
        ELSE ''Option'' END AS Intrument,
      Pkgreturncursor.Fncgetdescription(BROKERCODE,2)Bank,
      SUM(DECODE(PROCESSCOMPLETE,12400002,DECODE(BUYSELLCODE,25300001,1,25300002,-1,0)* DEALBASEAMOUNT,12400001,0,0)) NetOpen,
      SUM(NVL(FRWMTM,0))M2MPandL,
      SUM(NVL(CancelAmount,0)) ClosedAmount,
      SUM(NVL(PROFITLOSS,0))ProfitLoss,
      SUM(NVL(PROFITLOSS,0)) + SUM(NVL(FRWMTM,0))ActM2M,
      ason_date frmdate
    FROM TRSYSTEM983 WHERE ason_date = '||''''||frmDate||''''||' '||finalcondition||'
    GROUP BY USERID, Deal_type,RECORDER,BROKERCODE,ason_date';
  open gencursor for Query_Str;
  open nextCursor for
    SELECT USERID ProfitCenter,
      Pkgreturncursor.Fncgetdescription(Deal_type,2)BusinessUnit,
      CASE
        WHEN RECORDER IN(2,3) THEN 'Forward'
        WHEN RECORDER IN(1) THEN 'Future'
        ELSE 'Option' END AS Intrument,
        Pkgreturncursor.Fncgetdescription(BROKERCODE,2)Bank,
        Pkgreturncursor.Fncgetdescription(BUYSELLCODE,2)BookingBuySell,
        DECODE(PROCESSCOMPLETE,12400002,DEALBASEAMOUNT,12400001,0) Outstanding,
        FRWMTM MTMPandL,
        CancelAmount ClosedAmount,
        PROFITLOSS ProfitLoss,
        dealnumber,EXECUTEDATE,EXPIRYDATE,
        MATURITYDATE,EXCHANGERATE,CANCELDATE,CANCELRATE,
        Pkgreturncursor.Fncgetdescription(CurrencyCode,2)||Pkgreturncursor.Fncgetdescription(forcurrency,2) Currency,
        DECODE(PROCESSCOMPLETE,12400001,DECODE(BUYSELLCODE,25300001,'Sell',25300002,'Buy',0),12400002,null,null)CancelBuySell,
        ason_date,
        PROCESSCOMPLETE
      FROM TRSYSTEM983   where ason_date = frmDate;  
  Goto Process_End; 
END IF;  
--if varReportID = 'FOREXLATEST'  then   
--    numRecords:=2;
--     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
--      WHERE HDAY_LOCATION_CODE = 30299999 
--        AND HDAY_CALENDAR_DATE < frmdate
--        AND HDAY_DAY_STATUS = 26400005;
--    Query_str:= fncProductPnlPopulate(frmdate,varUserID);
--    Query_str:= fncProductPnlPopulate(tempDate,varUserID);       
--    open gencursor for
--      SELECT MainDescription,GroupOrders,SUM(ClosedAmount)ClosedAmount,SUM(OpenAmount)OpenAmount,
--      0 recorder,SUM(PClosedAmount)PClosedAmount,SUM(POpenAmount)POpenAmount,SubDescription,
--      SubOrder,DisplayOrder,frmDate AsonDate,
--      fncgetSwaerRate(30400004,frmDate)SpotRate FROM(
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        CANCELAMOUNT ClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002 THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)ELSE 0 END OpenAmount,
--        recorder, 0 PClosedAmount, 0 POpenAmount,
--        'Trade Size / NOP - $' SubDescription,1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder, CANCELAMOUNT PClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002 THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)ELSE 0 END POpenAmount,
--        'Trade Size / NOP - $' SubDescription, 1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = tempDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        PROFITLOSS ClosedAmount,FRWMTM OpenAmount,recorder,0 PClosedAmount,0 POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,PROFITLOSS PClosedAmount,FRWMTM POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = tempDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        round(PROFITLOSS/fncgetSwaerRate(currencycode,frmDate),2) ClosedAmount,---Need to change sware rate
--        round(FRWMTM/fncgetSwaerRate(currencycode,frmDate),2) OpenAmount,---Need to change sware rate
--        recorder,0 PClosedAmount,0 POpenAmount,
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,
--        round(PROFITLOSS/fncgetSwaerRate(currencycode,frmDate),2) PClosedAmount,---Need to change sware rate
--        round(FRWMTM/fncgetSwaerRate(currencycode,frmDate),2) POpenAmount,  ---Need to change sware rate
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = tempDate) GROUP BY MainDescription,GroupOrders,0,SubDescription,SubOrder,DisplayOrder;
--    open nextCursor for
--           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--                   fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--                   CANCELAMOUNT ClosedAmount, 
--                  DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,DEALBASEAMOUNT*-1) OpenAmount,
--                  recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--          fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
--          1 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate                       
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = frmdate
--      Union all
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--             fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--             PROFITLOSS ClosedAmount,FRWMTM OpenAmount, recorder,'G C' SubDescription,2 SubOrder,
--             fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          1 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate                    
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = frmdate
--    UNION ALL
--    SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--         fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--                  round(PROFITLOSS/fncgetSwaerRate(currencycode,frmDate),2) ClosedAmount,
--                  round(FRWMTM/fncgetSwaerRate(currencycode,frmDate),2) OpenAmount,
--                  recorder,'G C -$' SubDescription,3 SubOrder,
--          fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          1 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmDate AS AsonDate                     
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = frmdate
--      Union All
--            SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,CANCELAMOUNT ClosedAmount, 
--                  DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,DEALBASEAMOUNT*-1) OpenAmount,
--                  recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          2 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmDate AS AsonDate                     
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = tempDate
--      Union all
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,PROFITLOSS ClosedAmount,FRWMTM OpenAmount,
--                  recorder,'G C' SubDescription,2 SubOrder,
--             fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          2 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmDate AS AsonDate                   
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = tempDate
--    UNION ALL
--    SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--                  round(PROFITLOSS/fncgetSwaerRate(currencycode,frmDate),2) ClosedAmount,
--                  round(FRWMTM/fncgetSwaerRate(currencycode,frmDate),2) OpenAmount,
--                  recorder,'G C -$' SubDescription,3 SubOrder,
--             fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          2 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate                  
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = tempDate;
--    Goto Process_End;                              
--end if;
--if varReportID = 'FOREXLATEST'  then   
--    numRecords:=2;
--     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
--      WHERE HDAY_LOCATION_CODE = 30299999 
--        AND HDAY_CALENDAR_DATE < frmdate
--        AND HDAY_DAY_STATUS = 26400005;
--    Query_str:= fncProductPnlPopulate(ToDate,varUserID);
--    Query_str:= fncProductPnlPopulate(frmDate,varUserID);       
--    open gencursor for
--      SELECT MainDescription,GroupOrders,SUM(ClosedAmount)ClosedAmount,
--      0 recorder,SUM(PClosedAmount)PClosedAmount,SubDescription,
--      SubOrder,DisplayOrder,ToDate AsonDate,frmDate FromDate,
--      fncgetSwaerRate(30400004,ToDate)SpotRate,sum(deltavalue)Deltavalue,instrument,
--      CASE WHEN instrument = 1 THEN  SUM(OpenAmount)  
--      WHEN instrument = 2 AND sum(NOPValue) = 0 THEN SUM(OpenAmount)
--      WHEN instrument = 2 AND sum(NOPValue)!= 0 THEN sum(deltavalue) END OpenAmount,
--      CASE WHEN instrument = 1 THEN  SUM(POpenAmount) 
--      WHEN instrument = 2 AND sum(NOPValue) = 0 THEN SUM(POpenAmount)
--      WHEN instrument = 2 AND sum(NOPValue) != 0 THEN sum(deltavalue) END POpenAmount        
--      FROM(
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        CANCELAMOUNT ClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE
--        0 END OpenAmount,
--        recorder, 0 PClosedAmount, 0 POpenAmount,
--        'Trade Size / NOP - $' SubDescription,1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN deltavalue else 0 end Deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE  0 END NOPValue        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder, CANCELAMOUNT PClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE
--        0 END POpenAmount,
--        'Trade Size / NOP - $' SubDescription, 1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN deltavalue else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument ,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE  0 END NOPValue        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        PROFITLOSS ClosedAmount,
--        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--              else FRWMTM  end as OpenAmount,recorder,0 PClosedAmount,0 POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN OPTVPLINR else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE  0 END NOPValue        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,PROFITLOSS PClosedAmount,
--        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--              else FRWMTM  end  as POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN OPTVPLINR else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE  0 END NOPValue        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        round(PROFITLOSS/CANCELPNLSPOT,2) ClosedAmount,---Need to change sware rate
--        round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--          else FRWMTM  end )/CANCELPNLSPOT,2) OpenAmount,---Need to change sware rate
--        recorder,0 PClosedAmount,0 POpenAmount,
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN round(OPTVPLINR/CANCELPNLSPOT,2) else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE  0 END NOPValue        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,
--        round(PROFITLOSS/CANCELPNLSPOT,2) PClosedAmount,---Need to change sware rate
--        round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--          else FRWMTM  end )/CANCELPNLSPOT,2) POpenAmount,  ---Need to change sware rate
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN round(OPTVPLINR/CANCELPNLSPOT,2) else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,DEALBASEAMOUNT,25300002,DEALBASEAMOUNT*-1)
--        ELSE  0 END NOPValue        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate) GROUP BY MainDescription,GroupOrders,0,SubDescription,SubOrder,DisplayOrder,instrument;
--      open nextCursor for
--           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--              CANCELAMOUNT ClosedAmount, DEALBASEAMOUNT OpenAmount,
--              recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
--              1 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--              EXCHANGERATE,DEALREMARKS,Userreference,
--              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,ToDate AS AsonDate,
--              EXPIRYDATE,Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,
--              PREMIUMAMOUNT,Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--              0 CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD
--          FROM TRSYSTEM983 a 
--            where a.deal_type in(33300012,33300011)
--          and ason_date = ToDate
--          Union all
--          SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--            fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--            PROFITLOSS ClosedAmount,case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--              else FRWMTM  end as OpenAmount, recorder,'G C' SubDescription,2 SubOrder,
--            fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--            1 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--            Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--            Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--            EXCHANGERATE,DEALREMARKS,Userreference,
--            Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--            Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--            SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,ToDate AS AsonDate,
--            EXPIRYDATE,Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,
--            PREMIUMAMOUNT,Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--            CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD
--          FROM TRSYSTEM983 a 
--            where a.deal_type in(33300012,33300011)
--          and ason_date = ToDate
--        UNION ALL
--        SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--          fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--          round(PROFITLOSS/CANCELPNLSPOT,2) ClosedAmount,
--          round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--          else FRWMTM
--          end )/CANCELPNLSPOT,2) OpenAmount,
--          recorder,'G C -$' SubDescription,3 SubOrder,
--          fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          1 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,ToDate AS AsonDate,
--          EXPIRYDATE,Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,
--          PREMIUMAMOUNT,Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--          CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = ToDate
--      Union All
--            SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,CANCELAMOUNT ClosedAmount, 
--              DEALBASEAMOUNT OpenAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          2 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmDate AS AsonDate,
--          EXPIRYDATE,Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,
--          PREMIUMAMOUNT,Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--          0 CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = frmDate
--      Union all
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,PROFITLOSS ClosedAmount,
--        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--        when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--        else FRWMTM
--        end as OpenAmount,
--          recorder,'G C' SubDescription,2 SubOrder,
--          fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          2 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmDate AS AsonDate,
--          EXPIRYDATE,Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,
--          PREMIUMAMOUNT,Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--          CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = frmDate
--    UNION ALL
--    SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--            round(PROFITLOSS/CANCELPNLSPOT,2) ClosedAmount,
--            round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--        when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--        else FRWMTM
--        end)/CANCELPNLSPOT,2) OpenAmount,recorder,'G C -$' SubDescription,3 SubOrder,
--             fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--          2 PToday,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--          Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--          Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--          EXCHANGERATE,DEALREMARKS,Userreference,
--          Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--          Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--          SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate,
--          EXPIRYDATE,Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,PREMIUMAMOUNT,
--          Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--          CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD
--      FROM TRSYSTEM983 a 
--      where a.deal_type in(33300012,33300011)
--                       and ason_date = frmDate;
--    Goto Process_End;                              
--end if;  
--if varReportID = 'FOREXLATEST'  then   
--    numRecords:=2;
--     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
--      WHERE HDAY_LOCATION_CODE = 30299999 
--        AND HDAY_CALENDAR_DATE < frmdate
--        AND HDAY_DAY_STATUS = 26400005;
--    Query_str:= fncProductPnlPopulate(ToDate,varUserID);
--    Query_str:= fncProductPnlPopulate(frmDate,varUserID);       
--    open gencursor for
--      SELECT MainDescription "MainDescription",GroupOrders,SUM(ClosedAmount)ClosedAmount,
--      0 recorder,SUM(PClosedAmount)PClosedAmount,SubDescription,
--      SubOrder,DisplayOrder,ToDate AsonDate,frmDate FromDate,
--      fncgetSwaerRate(30400004,ToDate)SpotRate,sum(deltavalue)Deltavalue,instrument,
--      SUM(CASE WHEN instrument = 1 AND ason_date = ToDate THEN OpenAmount 
--      WHEN instrument = 2 AND NOPValue = 0 AND ason_date = ToDate THEN OpenAmount
--      WHEN instrument = 2 AND NOPValue!= 0 AND ason_date = ToDate THEN  deltavalue END) OpenAmount,
--      SUM(CASE WHEN instrument = 1 AND ason_date = frmDate THEN  POpenAmount 
--      WHEN instrument = 2 AND NOPValue = 0 AND ason_date = frmDate THEN POpenAmount
--      WHEN instrument = 2 AND NOPValue != 0 AND ason_date = frmDate THEN deltavalue END) POpenAmount --,ason_date       
--      FROM(
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        CANCELAMOUNT ClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE
--        0 END OpenAmount,
--        recorder, 0 PClosedAmount, 0 POpenAmount,
--        'Trade Size / NOP - $' SubDescription,1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN deltavalue else 0 end Deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,
--        ason_date
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder, CANCELAMOUNT PClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE
--        0 END POpenAmount,
--        'Trade Size / NOP - $' SubDescription, 1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN deltavalue else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument ,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,ason_date        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        PROFITLOSS ClosedAmount,
--        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--              else FRWMTM  end as OpenAmount,recorder,0 PClosedAmount,0 POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN OPTVPLINR else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue ,ason_date       
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,PROFITLOSS PClosedAmount,
--        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--              else FRWMTM  end  as POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN OPTVPLINR else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue ,ason_date       
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        round(PROFITLOSS/CANCELPNLSPOT,2) ClosedAmount,---Need to change sware rate
--        round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--          else FRWMTM  end )/CANCELPNLSPOT,2) OpenAmount,---Need to change sware rate
--        recorder,0 PClosedAmount,0 POpenAmount,
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN round(OPTVPLINR/CANCELPNLSPOT,2) else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,ason_date        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,
--        round(PROFITLOSS/CANCELPNLSPOT,2) PClosedAmount,---Need to change sware rate
--        round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
--          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
--          else FRWMTM  end )/CANCELPNLSPOT,2) POpenAmount,  ---Need to change sware rate
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5) THEN round(OPTVPLINR/CANCELPNLSPOT,2) else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,ason_date        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate) GROUP BY MainDescription,GroupOrders,0,SubDescription,SubOrder,DisplayOrder,instrument;--,ason_date;
--      
--      open nextCursor for
--           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) "MainDescription",
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--              CANCELAMOUNT ClosedAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
--              1 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--              EXCHANGERATE,DEALREMARKS,Userreference,
--              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,ToDate AS AsonDate,
--              EXPIRYDATE,
--              --Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,     PREMIUMAMOUNT,
--              Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD,
--              
--              PROFITLOSS ProfitLoss,case when recorder in(1,2,3) then  FRWMTM 
--              else OPTVPLINR end MTMAmount,
--              case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
--              else OPTVPLUSD end MTMUSDAmount,
--              Round(PROFITLOSS/CANCELPNLSPOT,2) PandLUSDAmount,
--              (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate1,
--              A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--              Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--              CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--              CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--              CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--              DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--              CENTERDBY Center,ENTERDBY EnterdBy,
--              DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--              Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--              Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--              CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--              Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
--              PREMIUMAMOUNT PREMIUMAMOUNT,PREMIUMVALUEDATE PValueDate,
--              Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--              CPREMIUMAMOUNT CPremiumAmount,
--                            Pkgreturncursor.Fncgetdescription(TRADER,1)Profitcenter
--
--          FROM TRSYSTEM983 a 
--            where a.deal_type in(33300012,33300011)
--          and ason_date = ToDate
--        UNION ALL
--           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--              CANCELAMOUNT ClosedAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
--              2 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--              EXCHANGERATE,DEALREMARKS,Userreference,
--              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate,
--              EXPIRYDATE,
--              --Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS, PREMIUMAMOUNT,
--              Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD,
--
--              PROFITLOSS ProfitLoss,case when recorder in(1,2,3) then  FRWMTM 
--              else OPTVPLINR end MTMAmount,
--              case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
--              else OPTVPLUSD end MTMUSDAmount,
--              Round(PROFITLOSS/CANCELPNLSPOT,2) PandLUSDAmount,
--              (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate1,
--              A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--              Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--              CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--              CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--              CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--              DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--              CENTERDBY Center,ENTERDBY EnterdBy,
--              DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--              Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--              Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--              CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--              Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
--              PREMIUMAMOUNT PREMIUMAMOUNT,PREMIUMVALUEDATE PValueDate,
--              Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--              CPREMIUMAMOUNT CPremiumAmount,
--              Pkgreturncursor.Fncgetdescription(TRADER,1)Profitcenter
--          FROM TRSYSTEM983 a 
--            where a.deal_type in(33300012,33300011)
--          and ason_date = frmDate;    
--          
--    Goto Process_End;                              
--end if;                      
if varReportID = 'FOREXLATEST'  then   
--    numRecords:=2;
--     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
--      WHERE HDAY_LOCATION_CODE = 30299999 
--        AND HDAY_CALENDAR_DATE < frmdate
--        AND HDAY_DAY_STATUS = 26400005;
--    Query_str:= fncProductPnlPopulate(ToDate,varUserID);
--    Query_str:= fncProductPnlPopulate(frmDate,varUserID);       
--    open gencursor for
--      SELECT MainDescription "MainDescription",GroupOrders,SUM(ClosedAmount)ClosedAmount,
--      0 recorder,SUM(PClosedAmount)PClosedAmount,SubDescription,
--      SubOrder,DisplayOrder,ToDate AsonDate,frmDate FromDate,
--      fncgetSwaerRate(30400004,ToDate)SpotRate,sum(deltavalue)Deltavalue,instrument,
--      SUM(CASE WHEN instrument = 1 AND ason_date = ToDate THEN OpenAmount 
--      WHEN instrument = 2 AND NOPValue = 0 AND ason_date = ToDate THEN OpenAmount
--      WHEN instrument = 2 AND NOPValue!= 0 AND ason_date = ToDate THEN  deltavalue END) OpenAmount,
--      SUM(CASE WHEN instrument = 1 AND ason_date = frmDate THEN  POpenAmount 
--      WHEN instrument = 2 AND NOPValue = 0 AND ason_date = frmDate THEN POpenAmount
--      WHEN instrument = 2 AND NOPValue != 0 AND ason_date = frmDate THEN deltavalue END) POpenAmount --,ason_date       
--      FROM(
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        CANCELAMOUNT ClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE
--        0 END OpenAmount,
--        recorder, 0 PClosedAmount, 0 POpenAmount,
--        'Trade Size / NOP - $' SubDescription,1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5,6) THEN deltavalue else 0 end Deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5,6) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,
--        ason_date
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder, CANCELAMOUNT PClosedAmount,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE
--        0 END POpenAmount,
--        'Trade Size / NOP - $' SubDescription, 1 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5,6) THEN deltavalue else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5,6) then 2 end instrument ,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,ason_date        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        PROFITLOSS ClosedAmount,
--        case when recorder in(1,2,3) then  FRWMTM 
--              else OPTVPLINR end  OpenAmount,       
----        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
----             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
----              else FRWMTM  end as OpenAmount,
--              recorder,0 PClosedAmount,0 POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5,6) THEN OPTVPLINR else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5,6) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue ,ason_date       
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,PROFITLOSS PClosedAmount,
--        case when recorder in(1,2,3) then  FRWMTM 
--              else OPTVPLINR end  POpenAmount,         
----        case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
----             when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
----              else FRWMTM  end  as POpenAmount,
--        'G C' SubDescription,2 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5,6) THEN OPTVPLINR else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5,6) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue ,ason_date       
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        round(PROFITLOSS/CANCELPNLSPOT,2) ClosedAmount,---Need to change sware rate
--        ROUND(case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
--        else OPTVPLUSD end ,2) OpenAmount,     
----        round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
----          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
----          else FRWMTM  end )/CANCELPNLSPOT,2) OpenAmount,---Need to change sware rate
--        recorder,0 PClosedAmount,0 POpenAmount,
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5,6) THEN round(OPTVPLUSD) else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5,6) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,ason_date        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = ToDate
--      UNION ALL
--      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--        0 ClosedAmount,0 OpenAmount,recorder,
--        round(PROFITLOSS/CANCELPNLSPOT,2) PClosedAmount,---Need to change sware rate
--        ROUND(case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
--        else OPTVPLUSD end ,2) POpenAmount,       
----        round((case when nvl(PREMIUMSTATUS,0) = 0 then  FRWMTM 
----          when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
----          else FRWMTM  end )/CANCELPNLSPOT,2) POpenAmount,  ---Need to change sware rate
--        'G C -$' SubDescription,3 SubOrder,
--        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
--        CASE WHEN recorder IN(4,5,6) THEN round(OPTVPLUSD,2) else 0 end deltavalue,
--        CASE WHEN recorder IN(1,2,3) then 1 
--        when recorder IN(4,5,6) then 2 end instrument,
--        CASE WHEN  ProcessComplete = 12400002  THEN
--        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
--        ELSE  0 END NOPValue,ason_date        
--      FROM TRSYSTEM983
--      WHERE deal_type IN(33300012,33300011)
--      AND ason_date    = frmDate) GROUP BY MainDescription,GroupOrders,0,SubDescription,SubOrder,DisplayOrder,instrument;--,ason_date;
--      
--      open nextCursor for
--           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) "MainDescription",
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--              CANCELAMOUNT ClosedAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
--              1 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--              EXCHANGERATE,DEALREMARKS,Userreference,
--              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,ToDate AS AsonDate,
--              EXPIRYDATE,
--              --Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,     PREMIUMAMOUNT,
--              Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD,
--              PROFITLOSS ProfitLoss,case when recorder in(1,2,3) then  FRWMTM 
--              else OPTVPLINR end MTMAmount,
--              case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
--              else OPTVPLUSD end MTMUSDAmount,
--              Round(PROFITLOSS/CANCELPNLSPOT,2) PandLUSDAmount,
--              (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate1,
--              A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--              Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--              CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--              CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--              CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--              DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--              CENTERDBY Center,ENTERDBY EnterdBy,
--              DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--              Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--              Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--              CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--              Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
--              PREMIUMAMOUNT PREMIUMAMOUNT,PREMIUMVALUEDATE PValueDate,
--              Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--              CPREMIUMAMOUNT CPremiumAmount,
--              Pkgreturncursor.Fncgetdescription(TRADER,1)Profitcenter,
--              Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE ,
--              CANCELPNLSPOT SwareRate,
--              Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD
--          FROM TRSYSTEM983 a 
--            where a.deal_type in(33300012,33300011)
--          and ason_date = ToDate
--        UNION ALL
--           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
--              CANCELAMOUNT ClosedAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
--              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
--              2 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
--              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
--              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--              EXCHANGERATE,DEALREMARKS,Userreference,
--              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
--              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate,
--              EXPIRYDATE,
--              --Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS, PREMIUMAMOUNT,
--              Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD,
--              PROFITLOSS ProfitLoss,case when recorder in(1,2,3) then  FRWMTM 
--              else OPTVPLINR end MTMAmount,
--              case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
--              else OPTVPLUSD end MTMUSDAmount,
--              Round(PROFITLOSS/CANCELPNLSPOT,2) PandLUSDAmount,
--              (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate1,
--              A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--              Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--              CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
--              CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
--              CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--              DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--              CENTERDBY Center,ENTERDBY EnterdBy,
--              DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--              Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
--              Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--              CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--              Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
--              PREMIUMAMOUNT PREMIUMAMOUNT,PREMIUMVALUEDATE PValueDate,
--              Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--              CPREMIUMAMOUNT CPremiumAmount,
--              Pkgreturncursor.Fncgetdescription(TRADER,1)Profitcenter,
--              Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
--              CANCELPNLSPOT SwareRate,
--              Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD              
--          FROM TRSYSTEM983 a 
--            where a.deal_type in(33300012,33300011)
--          and ason_date = frmDate;    
--          

    numRecords:=2;
     SELECT MAX(HDAY_CALENDAR_DATE) INTO tempDate FROM TRSYSTEM001 
      WHERE HDAY_LOCATION_CODE = 30299999 
        AND HDAY_CALENDAR_DATE < frmdate
        AND HDAY_DAY_STATUS = 26400005;
    Query_str:= fncProductPnlPopulate(ToDate,varUserID);
    Query_str:= fncProductPnlPopulate(frmDate,varUserID);       
    open gencursor for
      SELECT MainDescription "MainDescription",
      GroupOrders,
      sum(ClosedAmount)ClosedAmount,
      SubDescription,
      SubOrder,
      DisplayOrder,
      ason_date,
      fncgetSwaerRate(30400004,ToDate)SpotRate,
      case when instrument = 1 then sum(OpenAmount)
      when instrument = 2 and sum(NOPValue) = 0 then sum(OpenAmount)
      when instrument = 2 and sum(NOPValue) != 0 then sum(Deltavalue)end NOPAmount,
      sum(Deltavalue)Deltavalue,
      instrument,
      sum(OpenAmount)OpenAmount,
      sum(NOPValue)NOPValue,to_char(ason_date,'yyyymmdd')Dateorder,
      ToDate AsonDate,
      CASE WHEN ason_date = frmDate THEN
      (sum(NVL(ClosedAmount,0)) +  (case when instrument = 1 then sum(NVL(OpenAmount,0))
      when instrument = 2 and sum(NVL(NOPValue,0)) = 0 then sum(NVL(OpenAmount,0))
      when instrument = 2 and sum(NVL(NOPValue,0)) != 0 then sum(NVL(Deltavalue,0))end))end FromTotal,
      CASE WHEN ason_date = ToDate THEN
      (sum(NVL(ClosedAmount,0)) +  (case when instrument = 1 then sum(NVL(OpenAmount,0))
      when instrument = 2 and sum(NVL(NOPValue,0)) = 0 then sum(NVL(OpenAmount,0))
      when instrument = 2 and sum(NVL(NOPValue,0)) != 0 then sum(NVL(Deltavalue,0))end))end ToTotal,
      pkgreturnreport.getCompanyName(varUserID) as CompanyName      
      from (SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
        CANCELAMOUNT ClosedAmount,
        CASE WHEN  ProcessComplete = 12400002  THEN
        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
        ELSE
        0 END OpenAmount,
        'Trade Size / NOP - $' SubDescription,1 SubOrder,
        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
        CASE WHEN recorder IN(4,5,6) THEN deltavalue else 0 end Deltavalue,
        CASE WHEN recorder IN(1,2,3) then 1 else 2 end instrument,
        CASE WHEN  ProcessComplete = 12400002  THEN
        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
        ELSE  0 END NOPValue,
        ason_date
      FROM TRSYSTEM983
      WHERE deal_type IN(33300012,33300011)
      AND ason_date  in(ToDate,frmDate)
      UNION ALL
      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
        PROFITLOSS ClosedAmount,
        case when recorder in(1,2,3) then  FRWMTM 
        when nvl(PREMIUMSTATUS,0) = 33200002 then abs(FRWMTM) * - 1
        when nvl(PREMIUMSTATUS,0) = 33200001 then FRWMTM end  OpenAmount,       
        'G C' SubDescription,2 SubOrder,
        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
        CASE WHEN recorder IN(4,5,6) THEN OPTVPLINR else 0 end deltavalue,
        CASE WHEN recorder IN(1,2,3) then 1 else 2 end instrument,
        CASE WHEN  ProcessComplete = 12400002  THEN
        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
        ELSE  0 END NOPValue ,ason_date       
      FROM TRSYSTEM983
      WHERE deal_type IN(33300012,33300011)
      AND ason_date  in(ToDate,frmDate)
      UNION ALL
      SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
        round(PROFITLOSS/CANCELPNLSPOT,2) ClosedAmount,
        round((case when recorder in(1,2,3) then FRWMTM 
        when nvl(PREMIUMSTATUS,0) = 33200001 then FRWMTM end)/CANCELPNLSPOT,2)OpenAmount,     
        'G C -$' SubDescription,3 SubOrder,
        fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder,
        CASE WHEN recorder IN(4,5,6) THEN round(OPTVPLUSD) else 0 end deltavalue,
        CASE WHEN recorder IN(1,2,3) then 1 else 2 end instrument,
        CASE WHEN  ProcessComplete = 12400002  THEN
        DECODE(BUYSELLCODE,25300001,OUTSTANDINGAMOUNT,25300002,OUTSTANDINGAMOUNT*-1)
        ELSE  0 END NOPValue,ason_date        
      FROM TRSYSTEM983
      WHERE deal_type IN(33300012,33300011)
      AND ason_date  in(ToDate,frmDate))
      group by MainDescription,GroupOrders,SubDescription,SubOrder,DisplayOrder,ason_date,instrument;
      open nextCursor for
           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) "MainDescription",
              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
              CANCELAMOUNT ClosedAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
              1 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
              EXCHANGERATE,DEALREMARKS,Userreference,
              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,ToDate AS AsonDate,
              EXPIRYDATE,
              --Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS,     PREMIUMAMOUNT,
              Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD,
              PROFITLOSS ProfitLoss,case when recorder in(1,2,3) then  FRWMTM 
              else OPTVPLINR end MTMAmount,
              case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
              else OPTVPLUSD end MTMUSDAmount,
              Round(PROFITLOSS/CANCELPNLSPOT,2) PandLUSDAmount,
              (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate1,
              A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
              Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
              CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
              CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
              CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
              DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
              CENTERDBY Center,ENTERDBY EnterdBy,
              DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
              Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
              Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
              CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
              Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
              PREMIUMAMOUNT PREMIUMAMOUNT,PREMIUMVALUEDATE PValueDate,
              Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
              CPREMIUMAMOUNT CPremiumAmount,
              Pkgreturncursor.Fncgetdescription(TRADER,1)Profitcenter,
              Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE ,
              CANCELPNLSPOT SwareRate,
              Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
              ason_date,PRESENTVALUEINR,PRESENTVALUEUSD
          FROM TRSYSTEM983 a 
            where a.deal_type in(33300012,33300011)
          and ason_date = ToDate
        UNION ALL
           SELECT fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,1) MainDescription,
              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,2) GroupOrders,
              CANCELAMOUNT ClosedAmount,recorder,'Trade Size / NOP - $' SubDescription,1 SubOrder,
              fncGetMainDescription (deal_type,COUNTERPARTY,recorder,TRADER,3) DisplayOrder ,
              2 Today,dealnumber,EXECUTEDATE,MATURITYDATE,CANCELDATE,CANCELRATE,
              Pkgreturncursor.Fncgetdescription(a.CurrencyCode,2)Currency,
              Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
              EXCHANGERATE,DEALREMARKS,Userreference,
              Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
              Pkgreturncursor.Fncgetdescription(a.Deal_type,2)Deal_type,
              SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete ,frmDate AS AsonDate,
              EXPIRYDATE,
              --Pkgreturncursor.Fncgetdescription(a.PREMIUMSTATUS,2)PREMIUMSTATUS, PREMIUMAMOUNT,
              Pkgreturncursor.Fncgetdescription(a.OPTIONTYPE,2)OPTIONTYPE,
              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end CANCELPNLSPOT,MTMRATE,Deltavalue,OPTVPLINR,OPTVPLUSD,
              PROFITLOSS ProfitLoss,case when recorder in(1,2,3) then  FRWMTM 
              else OPTVPLINR end MTMAmount,
              case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
              else OPTVPLUSD end MTMUSDAmount,
              Round(PROFITLOSS/CANCELPNLSPOT,2) PandLUSDAmount,
              (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate1,
              A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
              Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
              CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
              case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,round(a.PROFITLOSS/CANCELPNLSPOT,2) PConversionAmount,
              CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,
              CCONFIRMDATE CConfirmDate,CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
              DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
              CENTERDBY Center,ENTERDBY EnterdBy,
              DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
              Pkgreturncursor.Fncgetdescription(COMPANYCODE,2)Company,
              Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
              CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
              Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
              PREMIUMAMOUNT PREMIUMAMOUNT,PREMIUMVALUEDATE PValueDate,
              Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
              CPREMIUMAMOUNT CPremiumAmount,
              Pkgreturncursor.Fncgetdescription(TRADER,1)Profitcenter,
              Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
              CANCELPNLSPOT SwareRate,
              Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
              ason_date,PRESENTVALUEINR,PRESENTVALUEUSD
          FROM TRSYSTEM983 a 
            where a.deal_type in(33300012,33300011)
          and ason_date = frmDate;    
    Goto Process_End;                              
end if;    
If Varreportid = 'MONTHLYSETTLEMENT' then
     if (to_char(frmDate,'MM') < 4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
              temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
         else
          tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
         temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
       end if;
  numRecords:=2;
  --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
  --pkgreportprograms.prcFxForcastReportPopulate(frmDate);
  Open Gencursor For
     select  MaturityMonth,datDateAsOn,BaseAmount,
             BASEAMOUNTINR,Nvl(GAINLOSS,0) GAINLOSS, WTDAVGRATE,
             WTDAVGBASEAMOUNT,WTDAVGRATE1,
             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL,
             Cashamountfcy,Cashamountinr,Frwdamountfcy,Frwdamountinr,Round(Spotrate,2) As Spotrate,
             Srno,Pkgreturncursor.Fncgetdescription(BusinessUnit,2)BusinessUnit,frmDate,tempDate as dattemp1
      from (  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
              avg(SpotRate)SpotRate,SrNo,BusinessUnit
      from (select  to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
              frmdate datDateAsOn,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
              Pandl.pandl  GAINLOSS,
                round  ((sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),1,tempDate,frmdate) SpotRate,
                          2 SrNo,trad_product_category BusinessUnit
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (SELECT TO_CHAR(cdel_cancel_DATE,'YYYYMM') MaturityMonth,
                        SUM(CDEL_PROFIT_LOSS) Pandl,
                        SUM(cdel_cancel_amount) AS FwdAmount,
                        deal_backup_deal BusinessUnit
                      FROM trtran006 a2,
                        trtran001 b2
                      WHERE cdel_deal_number= deal_deal_number
                      AND cdel_cancel_date BETWEEN tempDate AND frmdate
                      AND deal_base_currency      =30400004
                      AND deal_other_currency     =30400003
                      AND cdel_cancel_type        =27000001
                      AND cdel_record_status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(cdel_cancel_DATE,'YYYYMM'),
                        deal_backup_deal
                      UNION ALL
                      SELECT TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM') MaturityMonth,
                        SUM(Cfrv_Profit_Loss) Pandl,
                        SUM(CFRV_CANCEL_AMOUNT) AS FwdAmount,
                        cfut_backup_deal BusinessUnit
                      FROM Trtran063 a2,
                        Trtran061 b2
                      WHERE Cfrv_Deal_Number= cfut_deal_number
                      AND CFRV_EXECUTE_DATE BETWEEN tempDate AND frmdate
                      AND cfut_base_currency      =30400004
                      AND cfut_other_currency     =30400003
                      AND cfrv_record_status NOT IN (10200005,10200006)
                      and Cfut_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM'),
                        cfut_backup_deal
                      UNION ALL
                      SELECT TO_CHAR(corv_exercise_date,'YYYYMM') MaturityMonth,
                        SUM(corv_pandl_usd) Pandl,
                        SUM(0) AS FwdAmount,
                        copt_backup_deal BusinessUnit
                      FROM Trtran073 a2,
                        Trtran071 b2
                      WHERE copt_deal_number = corv_deal_number
                      AND corv_exercise_date BETWEEN tempDate AND frmdate
                      AND copt_base_currency      =30400004
                      AND COPT_other_currency     =30400003
                      AND copt_record_status NOT IN (10200005,10200006)
                      and corv_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(corv_exercise_date,'YYYYMM'),
                        copt_backup_deal) PandL
                    On Pandl.Maturitymonth = To_Char(Cdel_Cancel_Date,'YYYYMM')
                      and Pandl.BusinessUnit = trad_product_category
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and cdel_trade_reference is not null 
                        and cdel_cancel_date  between tempDate and frmdate
                        And Deal_Base_Currency=30400004
                   group by to_char(cdel_cancel_DATE,'YYYYMM'),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
                              to_char(cdel_cancel_DATE,'MON-yy'),pandl.pandl,trad_product_category
                              union all 
            SELECT  to_char(trad_maturity_date,'MON-yy') MaturityMonth,
                         to_char(trad_maturity_date,'YYYYMM') MonthOrder,
                     frmdate datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            2 SrNo,trad_product_category
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                          and brel_entry_date between  tempDate and frmdate
                          AND brel_trade_reference    = loln_trade_reference
                          AND BCRD_PRODUCT_CATEGORY = trad_product_category
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   to_char(trad_maturity_date,'MON-yy'),
                                      to_char(trad_maturity_date,'YYYYMM'),trad_company_code,trad_trade_currency,trad_product_category) 
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo,BusinessUnit)
                              UNION ALL
             ( select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
              avg(SpotRate)SpotRate,SrNo,BusinessUnit FROM (           
                     select  
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,1)  MaturityMonth,
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MonthOrder,
                      frmdate datDateAsOn,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
                      Pandl.pandl  GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (Nvl(Pandl.Pandl,0)/1000000))/Sum(Cdel_Cancel_Amount/1000000),2) Wtdavgrate,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate) SpotRate,
                          1 SrNo,trad_product_category BusinessUnit
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (SELECT TO_CHAR(cdel_cancel_DATE,'YYYYMM') MaturityMonth,
                        SUM(CDEL_PROFIT_LOSS) Pandl,
                        SUM(cdel_cancel_amount) AS FwdAmount,
                        deal_backup_deal BusinessUnit
                      FROM trtran006 a2,
                        trtran001 b2
                      WHERE cdel_deal_number= deal_deal_number
                      AND cdel_cancel_date < tempDate
                      AND deal_base_currency      =30400004
                      AND deal_other_currency     =30400003
                      AND cdel_cancel_type        =27000001
                      AND cdel_record_status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(cdel_cancel_DATE,'YYYYMM'),
                        deal_backup_deal
                      UNION ALL
                      SELECT TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM') MaturityMonth,
                        SUM(Cfrv_Profit_Loss) Pandl,
                        SUM(CFRV_CANCEL_AMOUNT) AS FwdAmount,
                        cfut_backup_deal BusinessUnit
                      FROM Trtran063 a2,
                        Trtran061 b2
                      WHERE Cfrv_Deal_Number= cfut_deal_number
                      AND CFRV_EXECUTE_DATE < tempDate
                      AND cfut_base_currency      =30400004
                      AND cfut_other_currency     =30400003
                      AND cfrv_record_status NOT IN (10200005,10200006)
                      and Cfut_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM'),
                        cfut_backup_deal
                      UNION ALL
                      SELECT TO_CHAR(corv_exercise_date,'YYYYMM') MaturityMonth,
                        SUM(corv_pandl_usd) Pandl,
                        SUM(0) AS FwdAmount,
                        copt_backup_deal BusinessUnit
                      FROM Trtran073 a2,
                        Trtran071 b2
                      WHERE copt_deal_number = corv_deal_number
                      AND corv_exercise_date < tempDate
                      AND copt_base_currency      =30400004
                      AND COPT_other_currency     =30400003
                      AND copt_record_status NOT IN (10200005,10200006)
                      and corv_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(corv_exercise_date,'YYYYMM'),
                        copt_backup_deal) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(frmdate,cdel_cancel_DATE,2)
                       and pandl.BusinessUnit = trad_product_category
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  < tempDate
                        and cdel_cancel_date > '31-MAR-2014'
                        and deal_base_currency=30400004
                   group by fncGetFinancialYear(frmdate,cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
                   cdel_COMPANY_CODE,deal_base_CURRENCY,
                   fncGetFinancialYear(frmdate,cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate),
                              pandl.pandl,trad_product_category
                                       union all 
            SELECT   fncGetFinancialYear(frmdate,trad_maturity_date,1) MaturityMonth,
                          fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
                     frmdate datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            1 SrNo,trad_product_category
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                         -- and brel_entry_date between  tempDate and frmdate
                          AND brel_trade_reference    = loln_trade_reference
                           and trad_maturity_date  < tempDate
                        and trad_maturity_date > '31-MAR-2014'
                        and trad_trade_currency=30400004
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          AND BCRD_PRODUCT_CATEGORY = trad_product_category
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   fncGetFinancialYear(frmdate,trad_maturity_date,1),
                                      fncGetFinancialYear(frmdate,trad_maturity_date,2),trad_company_code,trad_trade_currency,trad_product_category)
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo,BusinessUnit)                            
              UNION ALL
                  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
                  sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
                  avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
                  sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
                  sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
                  avg(SpotRate)SpotRate,SrNo,BusinessUnit FROM (                
                      select  
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,1)  MaturityMonth,
                      fncGetFinancialYear(frmdate,cdel_cancel_DATE,2) MonthOrder,
                     frmdate datDateAsOn,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
                      Pandl.pandl GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,frmdate) SpotRate,
                          3 SrNo,trad_product_category BusinessUnit
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (SELECT TO_CHAR(cdel_cancel_DATE,'YYYYMM') MaturityMonth,
                        SUM(CDEL_PROFIT_LOSS) Pandl,
                        SUM(cdel_cancel_amount) AS FwdAmount,
                        deal_backup_deal BusinessUnit
                      FROM trtran006 a2,
                        trtran001 b2
                      WHERE cdel_deal_number= deal_deal_number
                      AND cdel_cancel_date between tempDate and frmdate
                      AND deal_base_currency      =30400004
                      AND deal_other_currency     =30400003
                      AND cdel_cancel_type        =27000001
                      AND cdel_record_status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(cdel_cancel_DATE,'YYYYMM'),
                        deal_backup_deal
                      UNION ALL
                      SELECT TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM') MaturityMonth,
                        SUM(Cfrv_Profit_Loss) Pandl,
                        SUM(CFRV_CANCEL_AMOUNT) AS FwdAmount,
                        cfut_backup_deal BusinessUnit
                      FROM Trtran063 a2,
                        Trtran061 b2
                      WHERE Cfrv_Deal_Number= cfut_deal_number
                      AND CFRV_EXECUTE_DATE between tempDate and frmdate
                      AND cfut_base_currency      =30400004
                      AND cfut_other_currency     =30400003
                      AND cfrv_record_status NOT IN (10200005,10200006)
                      and Cfut_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM'),
                        cfut_backup_deal
                      UNION ALL
                      SELECT TO_CHAR(corv_exercise_date,'YYYYMM') MaturityMonth,
                        SUM(corv_pandl_usd) Pandl,
                        SUM(0) AS FwdAmount,
                        copt_backup_deal BusinessUnit
                      FROM Trtran073 a2,
                        Trtran071 b2
                      WHERE copt_deal_number = corv_deal_number
                      AND corv_exercise_date between tempDate and frmdate
                      AND copt_base_currency      =30400004
                      AND COPT_other_currency     =30400003
                      AND copt_record_status NOT IN (10200005,10200006)
                      and corv_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(corv_exercise_date,'YYYYMM'),
                        copt_backup_deal) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(frmdate,cdel_cancel_DATE,2)
                       and PandL.BusinessUnit = trad_product_category
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and cdel_trade_reference is not null 
                        and cdel_cancel_date between tempDate and frmdate
                        and deal_base_currency=30400004
                   group by fncGetFinancialYear(frmdate,cdel_cancel_DATE,1),
                   cdel_COMPANY_CODE,deal_base_CURRENCY
                   ,fncGetFinancialYear(frmdate,cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,frmdate),
                              pandl.pandl,trad_product_category
           union all 
            SELECT  fncGetFinancialYear(frmdate,trad_maturity_date,1) MaturityMonth,
                         fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
                     frmdate datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            3 SrNo,trad_product_category
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference                         
                          AND brel_trade_reference    = loln_trade_reference
                            and trad_maturity_date between tempDate and frmdate              
                          and trad_trade_currency=30400004
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          AND BCRD_PRODUCT_CATEGORY = trad_product_category  
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   fncGetFinancialYear(frmdate,trad_maturity_date,1),
                                      fncGetFinancialYear(frmdate,trad_maturity_date,2),trad_company_code,trad_trade_currency,trad_product_category)
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo,BusinessUnit))
                    Order by  MonthOrder,MaturityMonth,SrNo; 
                    
--         open NextCursor for
--           select  Company,MaturityMonth,MonthOrder,refnum,CATEGORY,SubCategory,Agreement,Vendor,Bank,BankRef,
--            Duedate,Currency, FwdContractNo,Amount,CashFCY,CashRate,CashinINR,FwdAmt,
--            FwdRate,AmtinINR,EDinPaisa,EDINR,NetRate,NetINR,AsonDate,DOCUMENTNO,CATEGORY1,SrNo,frmdate datDateAsOn,
--            pkgreturncursor.fncgetdescription(CATEGORY1,2)BusinessUnit
--            from(
--            select * from ( SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
--              to_char(trad_maturity_date,'MON-yy') MaturityMonth,
--              to_char(trad_maturity_date,'YYYYMM') MonthOrder,
--              trad_trade_reference refnum,
--              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
--              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
--              trad_contract_no                                            AS Agreement,
--              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
--              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
--              trad_user_reference                                         AS BankRef,
--              trad_maturity_date                                          AS Duedate,
--              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
--              trad_contract_no                                            AS FwdContractNo,--rearranged
--              trad_trade_fcy                                              AS Amount,
--              (b.CashAmount+b.ForwardAmount)                              AS SettledAmt,
--              ROUND(b.CashAmount,2)                                       AS CashFCY,--new
--              ROUND(b.cashrate,4)                                         AS CashRate,       
--              CASE
--                WHEN b.CashAmount <> 0
--                THEN ROUND((b.CashAmount * b.cashrate),2)
--                ELSE 0
--              END                      AS CashinINR,
--              ROUND(b.ForwardAmount,2) AS FwdAmt,        
--              CASE
--                WHEN b.ForwardAmount <> 0
--                THEN ROUND(((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount),4)
--                ELSE 0
--              END AS FwdRate,         
--              DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
--              ROUND(b.Edpisa,4)                                                                                            AS EDinPaisa,
--              ROUND(b.EdBenifit,2)                                                                                         AS EDINR,
--
--              CASE
--                WHEN b.CashAmount  <> 0
--                OR b.ForwardAmount <> 0
--                THEN ROUND(((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate))/(b.ForwardAmount + b.CashAmount),4)
--              END AS NetRate,
--              ROUND((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate),2) AS NetINR,
--              b.CancelDate                                                            AS AsonDate,             
--              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
--              trad_product_category    AS CATEGORY1,
--              2 SrNo
--            FROM trtran002 a,
--              (SELECT cdel_trade_reference,
--                SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
--                (SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate) / SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
--                SUM((
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 0
--                END)) ForwardAmount,
--                (SUM( (
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 0
--                END)* cdel_cancel_rate) / SUM( (
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 1
--                END))) Forwardrate,
--                CASE
--                  WHEN cdel_cancel_type = 27000002
--                  THEN SUM(CDEL_PROFIT_LOSS)
--                END EdBenifit,
--                CASE
--                  WHEN cdel_cancel_type = 27000002
--                  THEN AVG(deal_exchange_rate-cdel_cancel_rate)
--                END Edpisa,
--                MAX(CDEL_CANCEL_DATE) AS CancelDate
--              FROM trtran001,
--                trtran006
--              WHERE deal_deal_number      = cdel_deal_number
--              AND deal_record_status NOT IN (10200005,10200006)
--              AND cdel_record_status NOT IN(10200005,10200006)
--              AND CDEL_CANCEL_DATE BETWEEN tempdate and frmdate
--              GROUP BY cdel_trade_reference,
--                cdel_cancel_type
--              ) b
--            WHERE a.trad_trade_reference  = b.cdel_trade_reference
--            AND a.trad_record_status NOT IN(10200006)
--            AND A.trad_import_export NOT IN(25900025) 
--          UNION ALL
--            SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
--              to_char(trad_maturity_date,'MON-yy') MaturityMonth,
--              to_char(trad_maturity_date,'YYYYMM') MonthOrder,
--              trad_trade_reference refnum,
--              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
--              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
--              trad_contract_no                                            AS Agreement,
--              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
--              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
--              trad_user_reference                                         AS BankRef,
--              trad_maturity_date                                          AS Duedate,
--              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
--              NULL                                                        AS FwdContractNo,--rearranged
--              trad_trade_fcy                                              AS Amount,
--              LOLN_ADJUSTED_FCY                                           AS SettledAmt,
--              0                                                           AS CashFCY,--new
--              0                                                           AS CashRate,
--              0                                                           AS CashinINR,
--              0                                                           AS FwdAmt,
--              0                                                           AS FwdRate,
--              0                                                           AS AmtinINR,
--              0                                                           AS EDinPaisa,
--              0                                                           AS EDINR,
--              BCRD_SPOT_RATE                                              AS NetRate,
--              LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE                          AS NetINR,
--              loln_adjusted_date                                          AS AsonDate,             
--              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
--              trad_product_category    AS CATEGORY1,
--              2 SrNo
--            FROM trtran002,
--              trtran003,
--              trtran010,
--              TRTRAN045
--            WHERE trad_trade_reference  = brel_trade_reference
--            AND brel_trade_reference    = loln_trade_reference
--            AND trad_record_status NOT IN(10200006)
--            AND trad_import_export NOT IN(25900025)
--            AND brel_record_status NOT IN(10200006)
--            AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--            AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
--            AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
--            AND BREL_ENTRY_DATE BETWEEN tempdate and frmdate          
--            union all
--            select  pkgreturncursor.fncgetdescription(cdel_company_code,2) Company,
--            to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth ,
--            to_char(cdel_cancel_DATE,'YYYYMM')  MaturityOrder,
--            cdel_deal_number refnum,
--            pkgreturncursor.fncgetdescription(deal_backup_deal,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
--            null BankRef,
--            cdel_cancel_date Duedate,
--            pkgreturncursor.fncgetdescription( deal_base_currency ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CDEL_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,cdel_cancel_date AsonDate,null DOCUMENTNO,
--            deal_backup_deal CATEGORY1,2 SrNo            
--            from trtran006 a2, trtran001 b2
--            where cdel_deal_number= deal_deal_number
--            and cdel_cancel_date  between tempdate and frmdate
--            and deal_base_currency=30400004
--            and deal_other_currency =30400003
--            and cdel_cancel_type=27000001
--            and cdel_record_status not in (10200005,10200006)
--            and deal_record_status not in (10200005,10200006)
--            union all
--            select  pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,2) Company,
--            to_char(CFRV_EXECUTE_DATE,'MON-yy') MaturityMonth ,
--            to_char(CFRV_EXECUTE_DATE,'YYYYMM')  MaturityOrder,
--            CFRV_DEAL_NUMBER refnum,
--            pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) Bank,
--            null BankRef,
--            CFRV_EXECUTE_DATE Duedate,
--            pkgreturncursor.fncgetdescription( CFUT_BASE_CURRENCY ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CFRV_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,CFRV_EXECUTE_DATE AsonDate,null DOCUMENTNO,
--            CFUT_BACKUP_DEAL CATEGORY1,2 SrNo            
--            from trtran063 a2, trtran061 b2
--            where CFRV_DEAL_NUMBER= CFUT_DEAL_NUMBER
--            and CFRV_EXECUTE_DATE  between tempdate and frmdate
--            and CFUT_BASE_CURRENCY=30400004
--            and CFUT_OTHER_CURRENCY =30400003
--            and cfut_record_status not in (10200005,10200006)  
--            and cfrv_record_status not in (10200005,10200006)  
--            union all
--            select  pkgreturncursor.fncgetdescription(CORV_COMPANY_CODE,2) Company,
--            to_char(CORV_EXERCISE_DATE,'MON-yy') MaturityMonth ,
--            to_char(CORV_EXERCISE_DATE,'YYYYMM')  MaturityOrder,
--            CORV_DEAL_NUMBER refnum,
--            pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
--            null BankRef,
--            CORV_EXERCISE_DATE Duedate,
--            pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CORV_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,CORV_EXERCISE_DATE AsonDate,null DOCUMENTNO,
--            COPT_BACKUP_DEAL CATEGORY1,2 SrNo            
--            from trtran073 a2, trtran071 b2
--            where COPT_DEAL_NUMBER= CORV_DEAL_NUMBER
--            and CORV_EXERCISE_DATE  between tempdate and frmdate
--            and COPT_BASE_CURRENCY=30400004
--            and COPT_OTHER_CURRENCY =30400003
--            and copt_record_status not in (10200005,10200006)  
--            and corv_record_status not in (10200005,10200006))
--           UNION ALL
--             select* from(SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
--                fncGetFinancialYear(frmdate,b.canceldate,1)  MaturityMonth,
--            fncGetFinancialYear(frmdate,b.canceldate,2) MonthOrder,
--              trad_trade_reference refnum,
--              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
--              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
--              trad_contract_no                                            AS Agreement,
--              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
--              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
--              trad_user_reference                                         AS BankRef,
--              trad_maturity_date                                          AS Duedate,
--              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
--              trad_contract_no                                            AS FwdContractNo,--rearranged
--              trad_trade_fcy                                              AS Amount,
--              (b.CashAmount+b.ForwardAmount)                              AS SettledAmt,
--              ROUND(b.CashAmount,2)                                       AS CashFCY,--new
--              ROUND(b.cashrate,4)                                         AS CashRate,
--              CASE
--                WHEN b.CashAmount <> 0
--                THEN ROUND((b.CashAmount * b.cashrate),2)
--                ELSE 0
--              END                      AS CashinINR,
--              ROUND(b.ForwardAmount,2) AS FwdAmt,
--              CASE
--                WHEN b.ForwardAmount <> 0
--                THEN ROUND(((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount),4)
--                ELSE 0
--              END AS FwdRate,
--              DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
--              ROUND(b.Edpisa,4)                                                                                            AS EDinPaisa,
--              ROUND(b.EdBenifit,2)                                                                                         AS EDINR,
--              CASE
--                WHEN b.CashAmount  <> 0
--                OR b.ForwardAmount <> 0
--                THEN ROUND(((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate))/(b.ForwardAmount + b.CashAmount),4)
--              END AS NetRate,
--              ROUND((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate),2) AS NetINR,
--              b.CancelDate                                                            AS AsonDate,             
--              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
--              trad_product_category    AS CATEGORY1,
--              1 SrNo
--            FROM trtran002 a,
--              (SELECT cdel_trade_reference,
--                SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
--                (SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate) / SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
--                SUM((
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 0
--                END)) ForwardAmount,
--                (SUM( (
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 0
--                END)* cdel_cancel_rate) / SUM( (
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 1
--                END))) Forwardrate,
--                CASE
--                  WHEN cdel_cancel_type = 27000002
--                  THEN SUM(CDEL_PROFIT_LOSS)
--                END EdBenifit,
--                CASE
--                  WHEN cdel_cancel_type = 27000002
--                  THEN AVG(deal_exchange_rate-cdel_cancel_rate)
--                END Edpisa,
--                MAX(CDEL_CANCEL_DATE) AS CancelDate
--              FROM trtran001,
--                trtran006
--              WHERE deal_deal_number      = cdel_deal_number
--              AND deal_record_status NOT IN (10200005,10200006)
--              AND cdel_record_status NOT IN(10200005,10200006)
--              and cdel_cancel_date  < frmdate                     
--              and cdel_cancel_date > '31-MAR-2014'
--              and cdel_trade_reference is not null 
--               and deal_base_currency=30400004
--              GROUP BY cdel_trade_reference,
--                cdel_cancel_type
--              ) b
--            WHERE a.trad_trade_reference  = b.cdel_trade_reference
--             and trad_record_status in (10200005,10200001,10200003,10200004)
--            UNION ALL
--            SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
--               fncGetFinancialYear(frmdate,trad_maturity_date,1)  MaturityMonth,
--             fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
--             trad_trade_reference refnum,
--              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
--              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
--              trad_contract_no                                            AS Agreement,
--              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
--              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
--              trad_user_reference                                         AS BankRef,
--              trad_maturity_date                                          AS Duedate,
--              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
--              NULL                                                        AS FwdContractNo,--rearranged
--              trad_trade_fcy                                              AS Amount,
--              LOLN_ADJUSTED_FCY                                           AS SettledAmt,
--              0                                                           AS CashFCY,--new
--              0                                                           AS CashRate,
--              0                                                           AS CashinINR,
--              0                                                           AS FwdAmt,
--              0                                                           AS FwdRate,
--              0                                                           AS AmtinINR,
--              0                                                           AS EDinPaisa,
--              0                                                           AS EDINR,
--              BCRD_SPOT_RATE                                              AS NetRate,
--              LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE                          AS NetINR,
--              loln_adjusted_date                                         AS AsonDate,
--              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
--              trad_product_category    AS CATEGORY1,
--              1 SrNo
--            FROM trtran002,
--              trtran003,
--              trtran010,
--              TRTRAN045
--            WHERE trad_trade_reference  = brel_trade_reference
--            AND brel_trade_reference    = loln_trade_reference
--            AND trad_record_status NOT IN(10200006)
--            AND trad_import_export NOT IN(25900025)
--            AND brel_record_status NOT IN(10200006)
--            AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--            AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
--            AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
--            AND trad_maturity_date < frmdate
--            and trad_maturity_date > '31-MAR-2014'
--             and trad_trade_currency=30400004           
--            union all
--            select  pkgreturncursor.fncgetdescription(cdel_company_code,2) Company,
--            to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth ,
--            to_char(cdel_cancel_DATE,'YYYYMM')  MaturityOrder,
--            cdel_deal_number refnum,
--            pkgreturncursor.fncgetdescription(deal_backup_deal,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
--            null BankRef,
--            cdel_cancel_date Duedate,
--            pkgreturncursor.fncgetdescription( deal_base_currency ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CDEL_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,cdel_cancel_date AsonDate,null DOCUMENTNO,
--            deal_backup_deal CATEGORY1,1 SrNo            
--            from trtran006 a2, trtran001 b2
--            where cdel_deal_number= deal_deal_number
--            and cdel_cancel_date  < frmdate
--            and deal_base_currency=30400004
--            and deal_other_currency =30400003
--            and cdel_cancel_type=27000001
--            and cdel_record_status not in (10200005,10200006)
--            and deal_record_status not in (10200005,10200006)
--            union all
--            select  pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,2) Company,
--            to_char(CFRV_EXECUTE_DATE,'MON-yy') MaturityMonth ,
--            to_char(CFRV_EXECUTE_DATE,'YYYYMM')  MaturityOrder,
--            CFRV_DEAL_NUMBER refnum,
--            pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) Bank,
--            null BankRef,
--            CFRV_EXECUTE_DATE Duedate,
--            pkgreturncursor.fncgetdescription( CFUT_BASE_CURRENCY ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CFRV_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,CFRV_EXECUTE_DATE AsonDate,null DOCUMENTNO,
--            CFUT_BACKUP_DEAL CATEGORY1,1 SrNo            
--            from trtran063 a2, trtran061 b2
--            where CFRV_DEAL_NUMBER= CFUT_DEAL_NUMBER
--            and CFRV_EXECUTE_DATE  < frmdate
--            and CFUT_BASE_CURRENCY=30400004
--            and CFUT_OTHER_CURRENCY =30400003
--            and cfut_record_status not in (10200005,10200006)  
--            and cfrv_record_status not in (10200005,10200006)  
--            union all
--            select  pkgreturncursor.fncgetdescription(CORV_COMPANY_CODE,2) Company,
--            to_char(CORV_EXERCISE_DATE,'MON-yy') MaturityMonth ,
--            to_char(CORV_EXERCISE_DATE,'YYYYMM')  MaturityOrder,
--            CORV_DEAL_NUMBER refnum,
--            pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
--            null BankRef,
--            CORV_EXERCISE_DATE Duedate,
--            pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CORV_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,CORV_EXERCISE_DATE AsonDate,null DOCUMENTNO,
--            COPT_BACKUP_DEAL CATEGORY1,1 SrNo            
--            from trtran073 a2, trtran071 b2
--            where COPT_DEAL_NUMBER= CORV_DEAL_NUMBER
--            and CORV_EXERCISE_DATE  < frmdate
--            and COPT_BASE_CURRENCY=30400004
--            and COPT_OTHER_CURRENCY =30400003
--            and copt_record_status not in (10200005,10200006)  
--            and corv_record_status not in (10200005,10200006))
--         UNION ALL 
--         select * from (
--            SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
--              fncGetFinancialYear(frmdate,b.canceldate,1)  MaturityMonth,
--             fncGetFinancialYear(frmdate,b.canceldate,2) MonthOrder,
--              trad_trade_reference refnum,
--              pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
--              pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
--              trad_contract_no                                            AS Agreement,
--              pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
--              pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
--              trad_user_reference                                         AS BankRef,
--              trad_maturity_date                                          AS Duedate,
--              pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
--              trad_contract_no                                            AS FwdContractNo,--rearranged
--              trad_trade_fcy                                              AS Amount,
--              (b.CashAmount+b.ForwardAmount)                              AS SettledAmt,
--              ROUND(b.CashAmount,2)                                       AS CashFCY,--new
--              ROUND(b.cashrate,4)                                         AS CashRate,
--              CASE
--                WHEN b.CashAmount <> 0
--                THEN ROUND((b.CashAmount * b.cashrate),2)
--                ELSE 0
--              END                      AS CashinINR,
--              ROUND(b.ForwardAmount,2) AS FwdAmt,
--              CASE
--                WHEN b.ForwardAmount <> 0
--                THEN ROUND(((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount),4)
--                ELSE 0
--              END AS FwdRate,
--              DECODE(b.ForwardAmount,0,0,ROUND((((b.ForwardAmount*b.Forwardrate))/(b.ForwardAmount))*(b.ForwardAmount),2)) AS AmtinINR,
--              ROUND(b.Edpisa,4)                                                                                            AS EDinPaisa,
--              ROUND(b.EdBenifit,2)                                                                                         AS EDINR,
--              CASE
--                WHEN b.CashAmount  <> 0
--                OR b.ForwardAmount <> 0
--                THEN ROUND(((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate))/(b.ForwardAmount + b.CashAmount),4)
--              END AS NetRate,
--              ROUND((b.forwardrate * b.ForwardAmount) + (b.CashAmount * b.cashrate),2) AS NetINR,
--              b.CancelDate                                                            AS AsonDate,             
--              TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
--              trad_product_category    AS CATEGORY1,
--              3 SrNo
--            FROM trtran002 a,
--              (SELECT cdel_trade_reference,
--                SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)) CashAmount,
--                (SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,0)* cdel_cancel_rate) / SUM(DECODE(deal_deal_type,25400001,cdel_cancel_amount,1))) Cashrate,
--                SUM((
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 0
--                END)) ForwardAmount,
--                (SUM( (
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 0
--                END)* cdel_cancel_rate) / SUM( (
--                CASE
--                  WHEN deal_deal_type!=25400001
--                  THEN cdel_cancel_amount
--                  ELSE 1
--                END))) Forwardrate,
--                CASE
--                  WHEN cdel_cancel_type = 27000002
--                  THEN SUM(CDEL_PROFIT_LOSS)
--                END EdBenifit,
--                CASE
--                  WHEN cdel_cancel_type = 27000002
--                  THEN AVG(deal_exchange_rate-cdel_cancel_rate)
--                END Edpisa,
--                MAX(CDEL_CANCEL_DATE) AS CancelDate
--              FROM trtran001,
--                trtran006
--            WHERE deal_deal_number      = cdel_deal_number
--            AND deal_record_status NOT IN (10200005,10200006)
--            AND cdel_record_status NOT IN(10200005,10200006)
--            and cdel_cancel_date between tempdate and frmdate
--             and deal_base_currency=30400004
--            GROUP BY cdel_trade_reference,
--              cdel_cancel_type
--            ) b
--          WHERE a.trad_trade_reference  = b.cdel_trade_reference
--           and trad_record_status in (10200005,10200001,10200003,10200004)
--          UNION ALL
--          SELECT pkgreturncursor.fncgetdescription(trad_company_code,2) AS Company,
--             fncGetFinancialYear(frmdate,trad_maturity_date,1)  MaturityMonth,
--            fncGetFinancialYear(frmdate,trad_maturity_date,2) MonthOrder,
--            trad_trade_reference refnum,
--            pkgreturncursor.fncgetdescription(trad_product_category,2)  AS CATEGORY,
--            pkgreturncursor.fncgetdescription(trad_subproduct_code,2)   AS SubCategory,
--            trad_contract_no                                            AS Agreement,
--            pkgreturncursor.fncgetdescription(trad_buyer_seller,2)      AS Vendor,
--            pkgreturncursor.fncgetdescription(trad_local_bank,2)        AS Bank,
--            trad_user_reference                                         AS BankRef,
--            trad_maturity_date                                          AS Duedate,
--            pkgreturncursor.fncgetdescription(trad_trade_currency,2)    AS Currency,
--            NULL                                                        AS FwdContractNo,--rearranged
--            trad_trade_fcy                                              AS Amount,
--            LOLN_ADJUSTED_FCY                                           AS SettledAmt,
--            0                                                           AS CashFCY,--new
--            0                                                           AS CashRate,
--            0                                                           AS CashinINR,
--            0                                                           AS FwdAmt,
--            0                                                           AS FwdRate,
--            0                                                           AS AmtinINR,
--            0                                                           AS EDinPaisa,
--            0                                                           AS EDINR,
--            BCRD_SPOT_RATE                                              AS NetRate,
--            LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE                          AS NetINR,
--            loln_adjusted_date                                         AS AsonDate,
--            TRAD_PRODUCT_DESCRIPTION AS DOCUMENTNO,
--            trad_product_category    AS CATEGORY1,
--            3 SrNo
--          FROM trtran002,
--            trtran003,
--            trtran010,
--            TRTRAN045
--          WHERE trad_trade_reference  = brel_trade_reference
--          AND brel_trade_reference    = loln_trade_reference
--          AND trad_record_status NOT IN(10200006)
--          AND trad_import_export NOT IN(25900025)
--          AND brel_record_status NOT IN(10200006)
--          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
--          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
--          AND brel_entry_date between tempdate and frmdate
--          and trad_trade_currency=30400004         
--          union all
--            select  pkgreturncursor.fncgetdescription(cdel_company_code,2) Company,
--            to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth ,
--            to_char(cdel_cancel_DATE,'YYYYMM')  MaturityOrder,
--            cdel_deal_number refnum,
--            pkgreturncursor.fncgetdescription(deal_backup_deal,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(deal_init_code,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
--            null BankRef,
--            cdel_cancel_date Duedate,
--            pkgreturncursor.fncgetdescription( deal_base_currency ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CDEL_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,cdel_cancel_date AsonDate,null DOCUMENTNO,
--            deal_backup_deal CATEGORY1,3 SrNo            
--            from trtran006 a2, trtran001 b2
--            where cdel_deal_number= deal_deal_number
--            and cdel_cancel_date  between tempdate and frmdate 
--            and deal_base_currency=30400004
--            and deal_other_currency =30400003
--            and cdel_cancel_type=27000001
--            and cdel_record_status not in (10200005,10200006)
--            and deal_record_status not in (10200005,10200006)
--            union all
--            select  pkgreturncursor.fncgetdescription(CFRV_COMPANY_CODE,2) Company,
--            to_char(CFRV_EXECUTE_DATE,'MON-yy') MaturityMonth ,
--            to_char(CFRV_EXECUTE_DATE,'YYYYMM')  MaturityOrder,
--            CFRV_DEAL_NUMBER refnum,
--            pkgreturncursor.fncgetdescription(CFUT_BACKUP_DEAL,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) Bank,
--            null BankRef,
--            CFRV_EXECUTE_DATE Duedate,
--            pkgreturncursor.fncgetdescription( CFUT_BASE_CURRENCY ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CFRV_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,CFRV_EXECUTE_DATE AsonDate,null DOCUMENTNO,
--            CFUT_BACKUP_DEAL CATEGORY1,3 SrNo            
--            from trtran063 a2, trtran061 b2
--            where CFRV_DEAL_NUMBER= CFUT_DEAL_NUMBER
--            and CFRV_EXECUTE_DATE  between tempdate and frmdate
--            and CFUT_BASE_CURRENCY=30400004
--            and CFUT_OTHER_CURRENCY =30400003
--            and cfut_record_status not in (10200005,10200006)  
--            and cfrv_record_status not in (10200005,10200006)  
--            union all
--            select  pkgreturncursor.fncgetdescription(CORV_COMPANY_CODE,2) Company,
--            to_char(CORV_EXERCISE_DATE,'MON-yy') MaturityMonth ,
--            to_char(CORV_EXERCISE_DATE,'YYYYMM')  MaturityOrder,
--            CORV_DEAL_NUMBER refnum,
--            pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL,2) CATEGORY,
--            pkgreturncursor.fncgetdescription(COPT_INIT_CODE,2) SubCategory,
--            null Agreement, null Vendor, 
--            pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
--            null BankRef,
--            CORV_EXERCISE_DATE Duedate,
--            pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY ,2) Currency, 
--            null FwdContractNo,
--            null Amount,null SettledAmt,null CashFCY,null CashRate,null CashinINR, null FwdAmt,
--            null FwdRate,null AmtinINR,      
--            (CORV_PROFIT_LOSS)  EDinPaisa,
--            null EDINR,null NetRate,null NetINR,CORV_EXERCISE_DATE AsonDate,null DOCUMENTNO,
--            COPT_BACKUP_DEAL CATEGORY1,3 SrNo            
--            from trtran073 a2, trtran071 b2
--            where COPT_DEAL_NUMBER= CORV_DEAL_NUMBER
--            and CORV_EXERCISE_DATE  between tempdate and frmdate
--            and COPT_BASE_CURRENCY=30400004
--            and COPT_OTHER_CURRENCY =30400003
--            and copt_record_status not in (10200005,10200006)  
--            and corv_record_status not in (10200005,10200006)))order by MaturityMonth,MonthOrder,SrNo;                    
    Goto Process_End;                              
end if;                    

  If Varreportid = 'BANKWISEDDETAILSRDLC'  Then
      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
      numRecords:=2;
      Query_str := 'select case when posn_account_code in(25900011,25900012,25900061,25900062) then '||'''Forward'''||'
            when posn_account_code in(25900018,25900019,25900078,25900079) then '||'''Future'''||'
            when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then '||'''Option'''||'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code  in(25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           CASE WHEN posn_account_code  in(25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName,
           ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate,
            pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker
        from trsystem997 where 
           posn_account_code in(25900011,25900012,25900082,25900083,25900019,25900018,25900021,25900020,
                                25900022,25900023,25900061,25900062,25900078,25900079,
                                25900082,25900083,25900084,25900085)';
           delete from temp;commit;
           insert into temp values (Query_str,finalCondition);
           Open Gencursor for Query_str||finalCondition;
    open NextCursor for 
      select case when posn_account_code in(25900011,25900012,25900061,25900062) then 'Forward'
            when posn_account_code in(25900018,25900019,25900078,25900079) then 'Future'
            when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then 'Option'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code  in(25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           CASE WHEN posn_account_code  in(25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           frmDate as FromDate,
           CASE WHEN posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) then 25300002 else 25300001  END BuySell,
           POSN_REFERENCE_NUMBER IbsReference,
           POSN_REFERENCE_DATE ReferenceDate,
           POSN_FCY_RATE ExchangeRate,
           POSN_DUE_DATE MaturityDate,
           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2)BusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
           POSN_MATURITY_FROM ExpiryDate,
           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2)ProfitCenter
        from trsystem997 where 
           posn_account_code in(25900011,25900012,25900082,25900083,25900019,25900018,25900021,25900020,
                                25900022,25900023,25900061,25900062,25900078,25900079,
                                25900082,25900083,25900084,25900085);    
    Goto Process_End;
  End if;

--if  varReportID ='FXPOSITION' then
--  delete from trsystem978;
--  insert into trsystem978 values (frmDate);
--  SELECT LRAT_MER_RATE INTO numMonthendRate
--    FROM TRSYSTEM017
--  WHERE LRAT_EFFECTIVE_DATE =
--    (SELECT MAX(LRAT_EFFECTIVE_DATE)
--    FROM TRSYSTEM017 A
--    WHERE A.LRAT_EFFECTIVE_DATE = LRAT_EFFECTIVE_DATE
--    AND A.LRAT_CURRENCY_CODE    = LRAT_CURRENCY_CODE
--    AND A.LRAT_EFFECTIVE_DATE <= frmDate)
--    AND LRAT_EFFECTIVE_DATE <= frmDate;  
--    
--    Query_str4 := 'select DealDate,Broker,Exchange,BookingRef,BuySell,CurrencyPair,BookedAmt,
--    BalanceINR,BalanceFCY,DealSpot,ForwardPremium,BankMargin,FinalRate,ExpiryDate,DeliveryDate,CancelRef,
--    CancelDate,Bank,SellBuy,CancelAmt,CancelSpot,CPrimium,CForward,CancelRate,GainAmt,Portfolio,
--    SubPortfolio,Remarks,Status,IbsRef,GainAmountUSD,Todate,AsonDate,
--    Reporttype,DeliveryStatus,UnderlyingRef,StrikeRate,OptionType,PremiumInception, 
--    PremiumCancellation,TRANSCODE,CompanyCode,PandLUSDRate from (' ;
--    Query_str := 'select 
--          DEALDATE DealDate, 
--          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
--          ExchangeTrade Exchange, BankRef BookingRef,
--          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
--          CASE WHEN BUYSELLCODE = 25300002 THEN BALANCEFCY * -1 ELSE BALANCEFCY end BalanceFCY,
--          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
--          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
--          MATURITY DeliveryDate,null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
--          case when CAmount > 0 then
--         (CASE WHEN BUYSELLCODE = 25300002 THEN
--         '||'''Buy'''||' ELSE '||'''Sell'''||' END)
--          end AS SellBuy, CAmount CancelAmt, CSpotRate CancelSpot,
--          CMarginRate CPrimium,CForwardRate CForward,
--          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
--          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
--          DEALREF Remarks, 
--          case when ProcessComplete = 12400001 then '||'''Closed'''||' else '||'''Open'''||' end Status,
--          DEALNUMBER IbsRef,
--          CASE WHEN PANDLFCY != 0 THEN
--          Round(PANDLFCY/fncgetPandLRate(DEALNUMBER,1,' ||''''||frmDate||'''' ||',2),2) ELSE 0 END GainAmountUSD,
--          '||''''||toDate||''''||' Todate,
--          ' ||''''||frmDate||'''' ||' AsonDate,
--          1 Reporttype,null DeliveryStatus,
--          null UnderlyingRef,
--          0 StrikeRate,
--          Null OptionType,
--          0 PremiumInception,
--          0 PremiumCancellation,
--          TRANSCODE,
--          CompanyCode,
--          CASE WHEN PANDLFCY != 0 THEN
--          fncgetPandLRate(DEALNUMBER,1,' ||''''||frmDate||'''' ||',2) ELSE 0 END PandLUSDRate         
--        from VEWREPORTFUTURE';
--    Query_str1 := ' UNION ALL
--         select 
--          DEALDATE DealDate, 
--          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
--          NULL Exchange, DEALREF BookingRef,
--          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
--           CASE WHEN BUYSELLCODE = 25300002 THEN BALANCEFCY * -1 ELSE BALANCEFCY end BalanceFCY,
--          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
--          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
--          MATURITY DeliveryDate,Null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
--          case when CANCELAMOUNT > 0 then
--         (CASE WHEN BUYSELLCODE = 25300002 THEN
--         '||'''Buy'''||' ELSE '||'''Sell'''||' END)
--          end AS SellBuy, CANCELAMOUNT CancelAmt, CANCELSPOTRATE CancelSpot,
--          CANCELMARGINRATE CPrimium,CANCELFORWARDRATE CForward,
--          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
--          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
--          DEALREF Remarks, 
--          case when ProcessComplete = 12400001 then '||'''Closed'''||' else '||'''Open'''||' end Status,
--          DEALNUMBER IbsRef,
--          CASE WHEN PANDLFCY != 0 THEN
--          Round(PANDLFCY/fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',1),2) ELSE 0 END GainAmountUSD,
--          '||''''||toDate||''''||' Todate,
--          ' ||''''||frmDate||'''' ||' AsonDate, 
--          2 ReportType,
--          case when CancelType = 27000001 then '||'''Cancelled'''||'  else '||'''Delivery'''||'  end DeliveryStatus,
--          null UnderlyingRef,
--          0 StrikeRate,
--          Null OptionType,
--          0 PremiumInception,
--          0 PremiumCancellation ,
--          TRANSCODE,
--          CompanyCode,
--          CASE WHEN PANDLFCY != 0 THEN
--          fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',1) ELSE 0 END          
--        FROM VEWREPORTFORWARD where CancelType = 27000001';    
--      Query_str2 := ' UNION ALL
--         select 
--          DEALDATE DealDate, 
--          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
--          NULL Exchange, DEALREF BookingRef,
--          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
--           CASE WHEN BUYSELLCODE = 25300002 THEN BALANCEFCY * -1 ELSE BALANCEFCY end BalanceFCY,
--          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
--          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
--          MATURITY DeliveryDate,Null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
--          case when CANCELAMOUNT > 0 then
--         (CASE WHEN BUYSELLCODE = 25300002 THEN
--         '||'''Buy'''||'  ELSE '||'''Sell'''||'  END)
--          end AS SellBuy, CANCELAMOUNT CancelAmt, CANCELSPOTRATE CancelSpot,
--          CANCELMARGINRATE CPrimium,CANCELFORWARDRATE CForward,
--          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
--          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
--          DEALREF Remarks, 
--          case when ProcessComplete = 12400001 then '||'''Closed'''||'  else '||'''Open'''||'  end Status,
--          DEALNUMBER IbsRef,
--          CASE WHEN PANDLFCY != 0 THEN
--          Round(PANDLFCY/fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',1),2) ELSE 0 END GainAmountUSD,
--          '||''''||toDate||''''||' Todate,
--          ' ||''''||frmDate||'''' ||' AsonDate, 
--          3 ReportType,
--          case when CancelType = 27000001 then '||'''Cancelled'''||'  else '||'''Delivery'''||'  end DeliveryStatus,
--          null UnderlyingRef,
--          0 StrikeRate,
--          Null OptionType,
--          0 PremiumInception,
--          0 PremiumCancellation,
--          TRANSCODE,
--          CompanyCode,
--          CASE WHEN PANDLFCY != 0 THEN
--          fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',1) ELSE 0 END            
--        FROM VEWREPORTFORWARD where CancelType = 27000002';
--        Query_str3 := ' union all
--         select 
--          DEALDATE DealDate, 
--          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
--          NULL Exchange, DEALREF BookingRef,
--          pkgReturnCursor.fncGetDescription(BUYSELL,2) BuySell, 
--          CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
--          CASE WHEN BUYSELL = 25300002 THEN Outstanding * -1 ELSE Outstanding end BalanceFCY,
--          0 BalanceINR, PREMIUMRATE DealSpot, 0 ForwardPremium,
--          0 BankMargin, PREMIUMRATE FinalRate, MATURITY ExpiryDate,
--          SETTLEMENT DeliveryDate,Null CancelRef, CANCELDATE CancelDate, 
--          pkgReturnCursor.fncGetDescription(BANKCODE,2) Bank,
--          case when CANCELAMOUNT > 0 then
--         (CASE WHEN BUYSELL = 25300002 THEN
--         '||'''Buy'''||'  ELSE '||'''Sell'''||'  END)
--          end AS SellBuy, 
--          CANCELAMOUNT CancelAmt, 0 CancelSpot,
--          0 CPrimium,0 CForward,
--          CANCELRATE CancelRate,PANDLFCY GainAmt, 
--           TRANS Portfolio,
--          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
--          DEALREF Remarks, 
--          null Status,
--          DEALNUMBER IbsRef,
--          CASE WHEN PANDLFCY != 0 THEN
--          Round(PANDLFCY/fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',3),2) ELSE 0 END GainAmountUSD,
--          '||''''||toDate||''''||' Todate,
--          ' ||''''||frmDate||'''' ||' AsonDate, 
--          4 ReportType,
--          Null DeliveryStatus,
--          null UnderlyingRef,
--          STRIKERATE StrikeRate,
--          pkgReturnCursor.fncGetDescription(OPTIONTYPE,2)OptionType,
--          0 PremiumInception,
--          0 PremiumCancellation,
--          TRANSCODE,
--          CompanyCode,
--          CASE WHEN PANDLFCY != 0 THEN
--          fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',3) ELSE 0 END            
--        FROM VEWOPTIONS) where DEALDATE <= ' ||''''||frmDate||'''' ||' '; 
--        delete from temp;
--        insert into temp values(Query_str,'Query_str');
--        insert into temp values(Query_str1,'Query_str1');
--        insert into temp values(Query_str2,'Query_str2');
--        insert into temp values(Query_str3,'Query_str3');
--        insert into temp values(Query_str4,'Query_str4');
--        insert into temp values(finalCondition,'finalCondition');commit;
--      OPEN GENCURSOR FOR Query_str4 || Query_str||Query_str1||Query_str2 ||Query_str3 ||finalCondition;
--      GOTO PROCESS_END;
--END IF;

if  varReportID ='FXPOSITION' then
    Query_str:= fncProductPnlPopulate(frmDate,varUserID);
    datTemp := '01-JAN-'||to_char(frmDate,'yyyy');
    Query_str := 'select DealDate,Broker,Exchange,BookingRef,BuySell,CurrencyPair,BookedAmt,
    BalanceINR,BalanceFCY,DealSpot,ForwardPremium,BankMargin,FinalRate,ExpiryDate,DeliveryDate,CancelRef,
    CancelDate,Bank,SellBuy,CancelAmt,CancelSpot,CPrimium,CForward,CancelRate,GainAmt,Portfolio,
    SubPortfolio,Remarks,Status,IbsRef,GainAmountUSD,Todate,AsonDate,
    Reporttype,DeliveryStatus,UnderlyingRef,StrikeRate,OptionType,PremiumInception, 
    PremiumCancellation,DEAL_TYPE,CompanyCode,PandLUSDRate,ASON_DATE,
    MTMAmount,MTMUSDAmount,mtmrate1,PREMIUMSTATUS,CpremiumStatus,EXCERSISETYPE,
    SwareRate,PremiumUSD,SwarerateStatus,
    pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName
    from (' ;
    Query_str1 := 'select 
          EXECUTEDATE DealDate, 
          pkgReturnCursor.fncGetDescription(COUNTERPARTY,2) Broker, 
          pkgReturnCursor.fncGetDescription(EXCHANGECODE,2) Exchange,
          NULL BookingRef,
          pkgReturnCursor.fncGetDescription(BUYSELLCODE,2) BuySell, 
          pkgReturnCursor.fncGetDescription(CURRENCYCODE,2)||'||'''/'''||'||pkgReturnCursor.fncGetDescription(FORCURRENCY,2) CurrencyPair, 
          DEALBASEAMOUNT BookedAmt,
          CASE WHEN BUYSELLCODE = 25300002 THEN ABS(OUTSTANDINGAMOUNT) * -1 ELSE ABS(OUTSTANDINGAMOUNT) end BalanceFCY,
          ROUND(DEALBASEAMOUNT * EXCHANGERATE,2) BalanceINR, 
          SPOTRATE DealSpot, FORWARDRATE ForwardPremium,
          MARGINRATE BankMargin, EXCHANGERATE FinalRate, EXPIRYDATE ExpiryDate,
          MATURITYDATE DeliveryDate,null CancelRef, CANCELDATE CancelDate, 
          pkgReturnCursor.fncGetDescription(COUNTERPARTY,2) Bank,
          case when CANCELAMOUNT > 0 then
         (CASE WHEN BUYSELLCODE = 25300002 THEN
         '||'''Buy'''||' ELSE '||'''Sell'''||' END)end AS SellBuy,
          CANCELAMOUNT CancelAmt, CANCELSPOT CancelSpot,
          CANCELMARGIN CPrimium,CANCELFORWARD CForward,
          CANCELRATE CancelRate,PROFITLOSS GainAmt, 
          pkgReturnCursor.fncGetDescription(DEAL_TYPE,1)Portfolio,
          pkgReturnCursor.fncGetDescription(TRADER,1) SubPortfolio,NULL Remarks, 
          case when ProcessComplete = 12400001 then '||'''Closed'''||' else '||'''Open'''||' end Status,
          DEALNUMBER IbsRef,
          CASE WHEN PROFITLOSS != 0 THEN
          round(PROFITLOSS/CANCELPNLSPOT,2)ELSE 0 END GainAmountUSD,
          --Round(PROFITLOSS/fncgetPandLRate(DEALNUMBER,1,' ||''''||frmDate||'''' ||',2),2) ELSE 0 END GainAmountUSD,
          '||''''||toDate||''''||' Todate,
          ' ||''''||frmDate||'''' ||' AsonDate,
          CASE WHEN RECORDER = 1 THEN 1
          WHEN RECORDER IN(2,3) THEN 2
          WHEN RECORDER IN(4,5,6) THEN 4 END Reporttype,
          pkgReturnCursor.fncGetDescription(EXCERSISETYPE,2) DeliveryStatus,
          null UnderlyingRef,EXCHANGERATE StrikeRate,
          pkgReturnCursor.fncGetDescription(OPTIONTYPE,2) OptionType,
          PREMIUMAMOUNT PremiumInception,
          CPREMIUMAMOUNT PremiumCancellation,
          DEAL_TYPE DEAL_TYPE, COMPANYCODE CompanyCode,
          CASE WHEN PROFITLOSS != 0 THEN
          CANCELPNLSPOT ELSE 0 END PandLUSDRate,
          TO_DATE(' ||''''||frmDate||'''' ||') ASON_DATE,
          case when recorder in(1,2,3) then  FRWMTM 
          else OPTVPLINR end MTMAmount,
          case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)
          else OPTVPLUSD end MTMUSDAmount,
          (CASE WHEN recorder in(1,2,3) THEN mtmrate 
          else round(OPTVPLINR/DECODE(NVL(OPTVPLUSD,0),0,1,OPTVPLUSD),4) end)mtmrate1,
          Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PREMIUMSTATUS,
          Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
          Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
          CANCELPNLSPOT SwareRate,
          Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
          case when RECORDER in(2,3) then
          fncgetPandLRateStatus(dealnumber,DEALSERIAL,' ||''''||frmDate||'''' ||',1)
          when RECORDER in(4,5,6) then
          fncgetPandLRateStatus(dealnumber,DEALSERIAL,' ||''''||frmDate||'''' ||',3)
          else '||'''Sware Rate'''||' end SwarerateStatus 
        from TRSYSTEM983 WHERE ASON_DATE = '||''''||frmDate||'''' ||'';
      Query_str2 := ' UNION ALL
         select 
          DEALDATE DealDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
          NULL Exchange, DEALREF BookingRef,
          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
           CASE WHEN BUYSELLCODE = 25300002 THEN BALANCEFCY * -1 ELSE BALANCEFCY end BalanceFCY,
          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
          MATURITY DeliveryDate,Null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
          case when CANCELAMOUNT > 0 then
         (CASE WHEN BUYSELLCODE = 25300002 THEN
         '||'''Buy'''||'  ELSE '||'''Sell'''||'  END)end AS SellBuy, 
          CANCELAMOUNT CancelAmt, CANCELSPOTRATE CancelSpot,
          CANCELMARGINRATE CPrimium,CANCELFORWARDRATE CForward,
          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
          DEALREF Remarks, 
          case when ProcessComplete = 12400001 then '||'''Closed'''||'  else '||'''Open'''||'  end Status,
          DEALNUMBER IbsRef,
          CASE WHEN PANDLFCY != 0 THEN
          Round(PANDLFCY/fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',1),2) ELSE 0 END GainAmountUSD,
          '||''''||toDate||''''||' Todate,
          ' ||''''||frmDate||'''' ||' AsonDate, 
          3 ReportType,
          case when CancelType = 27000001 then '||'''Cancelled'''||'  else '||'''Delivery'''||'  end DeliveryStatus,
          null UnderlyingRef, 0 StrikeRate,
          Null OptionType,0 PremiumInception, 0 PremiumCancellation,
          TRANSCODE DEAL_TYPE, CompanyCode,
          CASE WHEN PANDLFCY != 0 THEN
          fncgetPandLRate(DEALNUMBER,ReverseSerial,' ||''''||frmDate||'''' ||',1) ELSE 0 END,
          TO_DATE(' ||''''||frmDate||'''' ||') ASON_DATE,
          0 MTMAmount,0 MTMUSDAmount,0 mtmrate1,
          NULL PREMIUMSTATUS,NULL CpremiumStatus,NULL EXCERSISETYPE,
          0 SwareRate,0 PremiumUSD,null SwarerateStatus 
        FROM VEWREPORTFORWARD where CancelType = 27000002 and CANCELDATE BETWEEN ' ||''''||datTemp||'''' ||' and ' ||''''||frmDate||'''' ||') where 1 = 1'; 
        delete from temp;
        insert into temp values(Query_str, 'Query_str');
        insert into temp values(Query_str1,'Query_str1');
        insert into temp values(Query_str2,'Query_str2');
        insert into temp values(finalCondition,'finalCondition');commit;
      OPEN GENCURSOR FOR Query_str || Query_str1||Query_str2||finalCondition;
      GOTO PROCESS_END;
END IF;

  If Varreportid = 'BUSINESSUNITWISERDLC'  Then
      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
      numRecords:=2;
      Query_str := 'select case when posn_account_code in(25900011,25900012,25900061,25900062) then '||'''Forward'''||'
            when posn_account_code in(25900018,25900019,25900078,25900079) then '||'''Future'''||'
            when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then '||'''Option'''||'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code  in(25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           CASE WHEN posn_account_code  in(25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName,
           ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate,
           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) BusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) SubBusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
           CASE WHEN posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) then '||'''Sell'''||' else '||'''Buy'''||'  END BuySellType,
           ABS(POSN_TRANSACTION_AMOUNT) TransAmount,
           case when posn_account_code in(25900011,25900012,25900061,25900062,25900018,25900019,25900078,25900079) then 1
                      when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
                      then 2  end As ExpNo           
        from trsystem997 where 
           posn_account_code in(25900011,25900012,25900082,25900083,25900019,25900018,25900021,25900020,
                                25900022,25900023,25900061,25900062,25900078,25900079,
                                25900082,25900083,25900084,25900085)';
           delete from temp;commit;
           insert into temp values (Query_str,finalCondition);
           Open Gencursor for Query_str||finalCondition;
    open NextCursor for 
      select case when posn_account_code in(25900011,25900012,25900061,25900062) then 'Forward'
            when posn_account_code in(25900018,25900019,25900078,25900079) then 'Future'
            when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then 'Option'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code in(25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           CASE WHEN posn_account_code in(25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           frmDate as FromDate,
           CASE WHEN posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) then 25300002 else 25300001  END BuySell,
           POSN_REFERENCE_NUMBER IbsReference,
           POSN_REFERENCE_DATE ReferenceDate,
           POSN_FCY_RATE ExchangeRate,
           POSN_DUE_DATE MaturityDate,
           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) BusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) SubBusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
           CASE WHEN posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) then 'Sell' else 'Buy'  END BuySellType,
           ABS(POSN_TRANSACTION_AMOUNT) TransAmount,
           POSN_MATURITY_FROM ExpiryDate
        from trsystem997 where 
           posn_account_code in(25900011,25900012,25900082,25900083,25900019,25900018,25900021,25900020,
                                25900022,25900023,25900061,25900062,25900078,25900079,
                                25900082,25900083,25900084,25900085);    
    Goto Process_End;
  End if;

  If Varreportid = 'BROKERWISERDLC'  Then
     -- numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
     -- numRecords:=2;
      Query_str := 'select case when posn_account_code in(25900011,25900012,25900061,25900062) then '||'''Forward'''||'
            when posn_account_code in(25900018,25900019,25900078,25900079) then '||'''Future'''||'
            when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then '||'''Option'''||'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code  in(25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           CASE WHEN posn_account_code  in(25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName,
           ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate,
           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) BusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) SubBusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
           to_char(POSN_DUE_DATE,'||'''MON YY'''||')MatMonth,
           to_char(POSN_DUE_DATE,'||'''YYYYMM'''||')MonthOrder,
            case when posn_account_code in(25900011,25900012,25900061,25900062) then 2
                        when posn_account_code in(25900018,25900019,25900078,25900079) then 1
                        when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
                        then 3  end As RepOrder           
        from trsystem997 where 
           posn_account_code in(25900011,25900012,25900082,25900083,25900019,25900018,25900021,25900020,
                                25900022,25900023,25900061,25900062,25900078,25900079,
                                25900082,25900083,25900084,25900085)';
           delete from temp;commit;
           insert into temp values (Query_str,finalCondition);
           Open Gencursor for Query_str||finalCondition;
--    open NextCursor for 
--      select case when posn_account_code in(25900011,25900012,25900061,25900062) then 'Forward'
--            when posn_account_code in(25900018,25900019,25900078,25900079) then 'Future'
--            when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
--            then 'Option'  end As EXPTYPE,
--           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
--           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
--           CASE WHEN posn_account_code in(25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
--           CASE WHEN posn_account_code in(25900011,25900012,25900018,25900019,25900020,25900021,25900022,25900023) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
--           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
--           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
--           frmDate as FromDate,
--           CASE WHEN posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) then 25300002 else 25300001  END BuySell,
--           POSN_REFERENCE_NUMBER IbsReference,
--           POSN_REFERENCE_DATE ReferenceDate,
--           POSN_FCY_RATE ExchangeRate,
--           POSN_DUE_DATE MaturityDate,
--           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) BusinessUnit,
--           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) SubBusinessUnit,
--           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
--           to_char(POSN_DUE_DATE,'MON YY')MatMonth,
--           to_char(POSN_DUE_DATE,'YYMM')MonthOrder ,
--           pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2) OptionType,
--           CASE WHEN posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085) then 'Sell' else 'Buy'  END BuySellType,
--           POSN_MATURITY_FROM ExpiryDate
--        from trsystem997 where 
--           posn_account_code in(25900011,25900012,25900082,25900083,25900019,25900018,25900021,25900020,
--                                25900022,25900023,25900061,25900062,25900078,25900079,
--                                25900082,25900083,25900084,25900085);    
    Goto Process_End;
  End if;

  If Varreportid = 'OPTIONPOSITIONRDLC'  Then
      numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;
      numRecords:=2;
      Query_str := 'select case when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then '||'''Option'''||'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code  in(25900020,25900021) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           CASE WHEN posn_account_code  in(25900082,25900083) THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           pkgreturnreport.getCompanyName(' ||''''|| varUserID ||''''||') as CompanyName,
           ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate,
           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) BusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) SubBusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
           to_char(POSN_DUE_DATE,'||'''MON YY'''||')MatMonth,
           to_char(POSN_DUE_DATE,'||'''YYYYMM'''||')MonthOrder,
            case when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
                        then 3  end As RepOrder,
           CASE WHEN posn_account_code in(25900082) THEN
            '||'''Sell '''||'  || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2)
            WHEN posn_account_code in(25900083) THEN
            '||'''Buy '''||'  || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2)
            WHEN posn_account_code in(25900020) THEN
            '||'''Buy '''||'  || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2)
            WHEN posn_account_code in(25900021) THEN
            '||'''Sell '''||'  || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2) end OptionType,
           CASE WHEN posn_account_code in(25900082,25900083) then '||'''Sell'''||' else '||'''Buy'''||'  END BuySellType,
           ABS(POSN_TRANSACTION_AMOUNT) TransAmount
        from trsystem997 where 
           posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085)';
           delete from temp;commit;
           insert into temp values (Query_str,finalCondition);
           Open Gencursor for Query_str||finalCondition;
    open NextCursor for 
      select case when posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085) 
            then 'Option'  end As EXPTYPE,
           pkgreturncursor.fncgetdescription(Posn_Counter_PArty,2) As CounterParty,
           pkgreturncursor.fncgetdescription (POSN_COMPANY_CODE,2) As CompanyCode,
           CASE WHEN posn_account_code in(25900082,25900083)  THEN ABS(POSN_TRANSACTION_AMOUNT) END SellAmount,
           CASE WHEN posn_account_code in(25900020,25900021) THEN ABS(POSN_TRANSACTION_AMOUNT) END BuyAmount,
           pkgreturncursor.fncgetdescription(posn_account_code,2) As AccountCode,
           pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS CurrencyCode,
           frmDate as FromDate,
           CASE WHEN posn_account_code in(25900082,25900083) then 25300002 else 25300001  END BuySell,
           POSN_REFERENCE_NUMBER IbsReference,
           POSN_REFERENCE_DATE ReferenceDate,
           POSN_FCY_RATE ExchangeRate,
           POSN_DUE_DATE MaturityDate,
           pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) BusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) SubBusinessUnit,
           pkgreturncursor.fncgetdescription(POSN_BROKER_CODE,2) Broker,
           to_char(POSN_DUE_DATE,'MON YY')MatMonth,
           to_char(POSN_DUE_DATE,'YYMM')MonthOrder ,
           CASE WHEN posn_account_code in(25900082) THEN
            'Sell ' || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2)
            WHEN posn_account_code in(25900083) THEN
            'Buy '  || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2)
            WHEN posn_account_code in(25900020) THEN
            'Buy ' || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2)
            WHEN posn_account_code in(25900021) THEN
            'Sell '  || pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,2) end OptionType,
           CASE WHEN posn_account_code in(25900082,25900083) then 'Sell' else 'Buy'  END BuySellType,
           ABS(POSN_TRANSACTION_AMOUNT) TransAmount
        from trsystem997 where 
           posn_account_code in(25900020,25900021,25900022,25900023,25900082,25900083,25900084,25900085);    
    Goto Process_End;
  End if;
 If Varreportid = 'LINKINGREPORTRDLC'  Then
    Query_str := 'SELECT ReferenceNo,ExecuteDate,Currency,BuySell,HedgeTrade,OptionType,BaseAmount,ExchangeRate,
    ExpairyDate,DeliveryDate,Product,Subproduct,Bank,LinkingAmount,ExposureNo,
    UserReference,ReferenceDate,ExposureAmount,MaturityDate,ProductCode,SubProductcode,
    deal_backup_deal,DEAL_EXECUTE_DATE,Company,
    ' ||''''||frmDate||'''' ||' as FromDate,'||''''||toDate||''''||' as ToDate FROM(
    SELECT DEAL_DEAL_NUMBER ReferenceNo,DEAL_EXECUTE_DATE ExecuteDate,
           pkgreturncursor.fncgetdescription(deal_base_Currency,2) Currency,
           --|| pkgreturncursor.fncgetdescription( deal_other_currency,2) Currency,
           pkgreturncursor.fncgetdescription( deal_buy_sell,2) BuySell,
           pkgreturncursor.fncgetdescription( deal_hedge_trade,2) HedgeTrade,
           null OptionType,
           deal_base_amount BaseAmount,
           deal_exchange_Rate ExchangeRate,
           deal_maturity_from ExpairyDate,
           Deal_maturity_date DeliveryDate,
           pkgreturncursor.fncgetdescription(deal_backup_deal,2)Product,
           pkgreturncursor.fncgetdescription(deal_init_code,2)Subproduct,
           pkgreturncursor.fncgetdescription(deal_counter_party,2)Bank,
           hedg_hedged_fcy LinkingAmount,
           trad_trade_reference ExposureNo,
           TRAD_USER_REFERENCE UserReference,
           TRAD_REFERENCE_DATE ReferenceDate,
           trad_trade_fcy ExposureAmount,
           trad_maturity_date MaturityDate,
           pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2)ProductCode,
           pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,2)SubProductcode,
           pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,2)Company,
           deal_backup_deal,
           DEAL_EXECUTE_DATE,
           DEAL_COMPANY_CODE
    FROM TRTRAN001
    LEFT OUTER JOIN TRTRAN004
    ON DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER
    AND HEDG_RECORD_STATUS NOT IN(10200005,10200006)
    LEFT OUTER JOIN TRTRAN002
    ON HEDG_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
    AND TRAD_RECORD_STATUS NOT IN(10200005,10200006)
    WHERE DEAL_RECORD_STATUS NOT IN(10200005,10200006)
    AND DEAL_DEAL_TYPE NOT IN(25400001)';
    Query_str1 := 'UNION ALL
    SELECT COPT_DEAL_NUMBER ReferenceNo,COPT_EXECUTE_DATE ExecuteDate,
           pkgreturncursor.fncgetdescription(copt_base_Currency,2) Currency,
           --pkgreturncursor.fncgetdescription( copt_other_currency,2) Currency,
           pkgreturncursor.fncgetdescription( cosu_buy_sell,2) BuySell,
           pkgreturncursor.fncgetdescription( copt_hedge_trade,2) HedgeTrade,
           pkgreturncursor.fncgetdescription( cosu_option_type,2) OptionType,
           cosu_base_amount BaseAmount,
           cosu_strike_Rate ExchangeRate,
           cosu_maturity_date ExpairyDate,
           cosu_settlement_date DeliveryDate,
           pkgreturncursor.fncgetdescription(copt_backup_deal,2)Product,
           pkgreturncursor.fncgetdescription(copt_init_code,2)Subproduct,
           pkgreturncursor.fncgetdescription(copt_counter_party,2)Bank,
           hedg_hedged_fcy LinkingAmount,
           trad_trade_reference ExposureNo,
           TRAD_USER_REFERENCE UserReference,
           TRAD_REFERENCE_DATE ReferenceDate,
           trad_trade_fcy ExposureAmount,
           trad_maturity_date MaturityDate,
           pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2)ProductCode,
           pkgreturncursor.fncgetdescription(TRAD_SUBPRODUCT_CODE,2)SubProductcode,
           pkgreturncursor.fncgetdescription(COPT_COMPANY_CODE,2)Company,
           copt_backup_deal,
           COPT_EXECUTE_DATE,
           COPT_COMPANY_CODE
    FROM TRTRAN071
    JOIN TRTRAN072 ON
    copt_deal_number = cosu_deal_number
    AND COSU_RECORD_STATUS NOT IN(10200005,10200006)
    LEFT OUTER JOIN TRTRAN004 ON
    copt_deal_number      = HEDG_DEAL_NUMBER
    AND HEDG_RECORD_STATUS NOT IN(10200005,10200006)
    LEFT OUTER JOIN TRTRAN002 ON 
    HEDG_TRADE_REFERENCE    = TRAD_TRADE_REFERENCE
    AND TRAD_RECORD_STATUS NOT IN(10200005,10200006)
    where COPT_RECORD_STATUS NOT IN(10200005,10200006)) 
    WHERE 1=1';
    delete from temp;commit;
        insert into temp values (Query_str,'Query_str');
    insert into temp values (Query_str1,finalCondition);
    Open Gencursor for Query_str||Query_str1||finalCondition;
    Goto Process_End;
  End if;  
if  varReportID ='FXPOSITIONDELTASTATUS' then
  delete from trsystem978;
  insert into trsystem978 values (frmDate);
  SELECT LRAT_MER_RATE INTO numMonthendRate
    FROM TRSYSTEM017
  WHERE LRAT_EFFECTIVE_DATE =
    (SELECT MAX(LRAT_EFFECTIVE_DATE)
    FROM TRSYSTEM017 A
    WHERE A.LRAT_EFFECTIVE_DATE = LRAT_EFFECTIVE_DATE
    AND A.LRAT_CURRENCY_CODE    = LRAT_CURRENCY_CODE
    AND A.LRAT_EFFECTIVE_DATE <= frmDate)
    AND LRAT_EFFECTIVE_DATE <= frmDate;  
    
    Query_str4 := 'select DealDate,Broker,Exchange,BookingRef,BuySell,CurrencyPair,BookedAmt,
    BalanceINR,BalanceFCY,DealSpot,ForwardPremium,BankMargin,FinalRate,ExpiryDate,DeliveryDate,CancelRef,
    CancelDate,Bank,SellBuy,CancelAmt,CancelSpot,CPrimium,CForward,CancelRate,GainAmt,Portfolio,
    SubPortfolio,Remarks,Status,IbsRef,GainAmountUSD,Todate,AsonDate,
    Reporttype,DeliveryStatus,UnderlyingRef,StrikeRate,OptionType,PremiumInception, 
    PremiumCancellation,TRANSCODE,CompanyCode,RateStatus,PandLUSDRate from (' ;
    Query_str := 'select 
          DEALDATE DealDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
          ExchangeTrade Exchange, BankRef BookingRef,
          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
           BALANCEFCY BalanceFCY,
          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
          MATURITY DeliveryDate,null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
          case when CAmount > 0 then
         (CASE WHEN BUYSELLCODE = 25300002 THEN
         '||'''Buy'''||' ELSE '||'''Sell'''||' END)
          end AS SellBuy, CAmount CancelAmt, CSpotRate CancelSpot,
          CMarginRate CPrimium,CForwardRate CForward,
          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
          DEALREF Remarks, 
          case when ProcessComplete = 12400001 then '||'''Closed'''||' else '||'''Open'''||' end Status,
          DEALNUMBER IbsRef,
          CASE WHEN PANDLFCY != 0 THEN
          Round(PANDLFCY/fncgetSwaerRate(30400004,CANCELDATE),2) ELSE 0 END GainAmountUSD,
          '||''''||toDate||''''||' Todate,
          ' ||''''||frmDate||'''' ||' AsonDate,
          1 Reporttype,null DeliveryStatus,
          null UnderlyingRef,
          0 StrikeRate,
          Null OptionType,
          0 PremiumInception,
          0 PremiumCancellation,
          TRANSCODE,
          CompanyCode,
          '||'''Sware Rate'''||' RateStatus,
          CASE WHEN PANDLFCY != 0 THEN
          fncgetSwaerRate(30400004,CANCELDATE) ELSE 0 END PandLUSDRate          
        from VEWREPORTFUTURE';
    Query_str1 := ' UNION ALL
         select 
          DEALDATE DealDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
          NULL Exchange, DEALREF BookingRef,
          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
           BALANCEFCY BalanceFCY,
          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
          MATURITY DeliveryDate,Null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
          case when CANCELAMOUNT > 0 then
         (CASE WHEN BUYSELLCODE = 25300002 THEN
         '||'''Buy'''||' ELSE '||'''Sell'''||' END)
          end AS SellBuy, CANCELAMOUNT CancelAmt, CANCELSPOTRATE CancelSpot,
          CANCELMARGINRATE CPrimium,CANCELFORWARDRATE CForward,
          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
          DEALREF Remarks, 
          case when ProcessComplete = 12400001 then '||'''Closed'''||' else '||'''Open'''||' end Status,
          DEALNUMBER IbsRef,
          CASE WHEN PANDLFCY != 0 THEN
          Round(PANDLFCY/fncgetPandLRate(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',1),2) ELSE 0 END GainAmountUSD,
          '||''''||toDate||''''||' Todate,
          ' ||''''||frmDate||'''' ||' AsonDate, 
          2 ReportType,
          case when CancelType = 27000001 then '||'''Cancelled'''||'  else '||'''Delivery'''||'  end DeliveryStatus,
          null UnderlyingRef,
          0 StrikeRate,
          Null OptionType,
          0 PremiumInception,
          0 PremiumCancellation ,
          TRANSCODE,
          CompanyCode,
          fncgetPandLRateStatus(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',1) RateStatus,
          CASE WHEN PANDLFCY != 0 THEN
          fncgetPandLRate(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',1) ELSE 0 END PandLUSDRate            
        FROM VEWREPORTFORWARD where CancelType = 27000001';    
      Query_str2 := ' UNION ALL
         select 
          DEALDATE DealDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
          NULL Exchange, DEALREF BookingRef,
          BUYSELL BuySell, CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
           BALANCEFCY BalanceFCY,
          BALANCEINR BalanceINR, SPOT DealSpot, FORWARD ForwardPremium,
          MARGIN BankMargin, EXRATE FinalRate, MATURITY ExpiryDate,
          MATURITY DeliveryDate,Null CancelRef, CANCELDATE CancelDate, BANKNAME Bank,
          case when CANCELAMOUNT > 0 then
         (CASE WHEN BUYSELLCODE = 25300002 THEN
         '||'''Buy'''||'  ELSE '||'''Sell'''||'  END)
          end AS SellBuy, CANCELAMOUNT CancelAmt, CANCELSPOTRATE CancelSpot,
          CANCELMARGINRATE CPrimium,CANCELFORWARDRATE CForward,
          CANCELRATE CancelRate,PANDLFCY GainAmt, TRANS Portfolio,
          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
          DEALREF Remarks, 
          case when ProcessComplete = 12400001 then '||'''Closed'''||'  else '||'''Open'''||'  end Status,
          DEALNUMBER IbsRef,
          CASE WHEN PANDLFCY != 0 THEN
          Round(PANDLFCY/fncgetPandLRate(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',1),2) ELSE 0 END GainAmountUSD,
          '||''''||toDate||''''||' Todate,
          ' ||''''||frmDate||'''' ||' AsonDate, 
          3 ReportType,
          case when CancelType = 27000001 then '||'''Cancelled'''||'  else '||'''Delivery'''||'  end DeliveryStatus,
          null UnderlyingRef,
          0 StrikeRate,
          Null OptionType,
          0 PremiumInception,
          0 PremiumCancellation,
          TRANSCODE,
          CompanyCode,
          fncgetPandLRateStatus(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',1) RateStatus,
          CASE WHEN PANDLFCY != 0 THEN
          fncgetPandLRate(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',1) ELSE 0 END PandLUSDRate            
        FROM VEWREPORTFORWARD where CancelType = 27000002';
        Query_str3 := ' union all
         select 
          DEALDATE DealDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Broker, 
          NULL Exchange, DEALREF BookingRef,
          pkgReturnCursor.fncGetDescription(BUYSELL,2) BuySell, 
          CURRENCY CurrencyPair, DEALAMOUNT BookedAmt,
          OUTSTANDING BalanceFCY,
          0 BalanceINR, PREMIUMRATE DealSpot, 0 ForwardPremium,
          0 BankMargin, PREMIUMRATE FinalRate, MATURITY ExpiryDate,
          SETTLEMENT DeliveryDate,Null CancelRef, CANCELDATE CancelDate, 
          pkgReturnCursor.fncGetDescription(BANKCODE,2) Bank,
          case when CANCELAMOUNT > 0 then
         (CASE WHEN BUYSELL = 25300002 THEN
         '||'''Buy'''||'  ELSE '||'''Sell'''||'  END)
          end AS SellBuy, 
          CANCELAMOUNT CancelAmt, 0 CancelSpot,
          0 CPrimium,0 CForward,
          CANCELRATE CancelRate,PANDLFCY GainAmt, 
           TRANS Portfolio,
          pkgReturnCursor.fncGetDescription(INITCODE,2) SubPortfolio, 
          DEALREF Remarks, 
          null Status,
          DEALNUMBER IbsRef,
          CASE WHEN PANDLFCY != 0 THEN
          Round(PANDLFCY/fncgetPandLRate(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',3),2) ELSE 0 END GainAmountUSD,
          '||''''||toDate||''''||' Todate,
          ' ||''''||frmDate||'''' ||' AsonDate, 
          4 ReportType,
          Null DeliveryStatus,
          null UnderlyingRef,
          STRIKERATE StrikeRate,
          pkgReturnCursor.fncGetDescription(OPTIONTYPE,2)OptionType,
          0 PremiumInception,
          0 PremiumCancellation,
          TRANSCODE,
          CompanyCode,
          fncgetPandLRateStatus(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',3) RateStatus,
          CASE WHEN PANDLFCY != 0 THEN
          fncgetPandLRate(dealnumber,reverseserial,' ||''''||frmDate||'''' ||',3) ELSE 0 END PandLUSDRate           
        FROM VEWOPTIONS) where DEALDATE <= ' ||''''||frmDate||'''' ||' '; 
        delete from temp;
        insert into temp values(Query_str,'Query_str');
        insert into temp values(Query_str1,'Query_str1');
        insert into temp values(Query_str2,'Query_str2');
        insert into temp values(Query_str3,'Query_str3');
        insert into temp values(Query_str4,'Query_str4');
        insert into temp values(finalCondition,'finalCondition');commit;
      OPEN GENCURSOR FOR Query_str4 || Query_str||Query_str1||Query_str2 ||Query_str3 ||finalCondition;
      GOTO PROCESS_END;
END IF;
if  varReportID ='SUMMARYREPORT' then
        Query_str := 'select Broker,sum(Amount) Amount,BuySell,round(sum(Amount*Rate)/sum(Amount),4) Rate,MaturityDate,
        ' ||''''||frmDate||'''' ||'  Asondate,'||''''||toDate||''''||' todate,ExecuteDate,Exchange
        from (
          select pkgreturncursor.fncgetdescription(cfut_counter_party,2) Broker ,
          Sum(cfut_base_amount) Amount,
          pkgreturncursor.fncgetdescription(cfut_buy_sell,2) BuySell,
          Round(Sum(cfut_base_amount * cfut_exchange_rate)/Sum(cfut_base_amount),4) Rate,cfut_maturity_DATE MaturityDate,
          cfut_execute_date ExecuteDate,
          pkgreturncursor.fncgetdescription(CFUT_EXCHANGE_CODE,2)Exchange
          from trtran061
          where cfut_record_status not in (10200005,10200006)
          and cfut_execute_date between ' ||''''||frmDate||'''' ||' and '||''''||toDate||''''||'
          group by cfut_counter_party,cfut_buy_sell,cfut_maturity_DATE,cfut_execute_date,CFUT_EXCHANGE_CODE
          union all
          select pkgreturncursor.fncgetdescription(cfut_counter_party,2) Broker ,
          Sum(cfrv_cancel_amount) amount,
          case when cfut_buy_sell = 25300001 then
          pkgreturncursor.fncgetdescription(25300002,2) else pkgreturncursor.fncgetdescription(25300001,2) end BuySell,
          Round(Sum(cfrv_cancel_amount * CFRV_LOT_PRICE)/Sum(cfrv_cancel_amount),4) Rate,cfut_maturity_DATE MaturityDate,
          cfrv_execute_date ExecuteDate,
          pkgreturncursor.fncgetdescription(CFUT_EXCHANGE_CODE,2)Exchange
          from trtran063 inner join trtran061
          on cfrv_deal_number=cfut_deal_number 
          and cfrv_execute_date between '||''''||frmDate||'''' ||' and '||''''||toDate||''''||'
          and cfrv_record_status not in (10200005,10200006)
          and  cfut_record_status not in (10200005,10200006)
          group by cfut_counter_party,cfut_buy_sell,cfut_maturity_DATE,cfrv_execute_date,CFUT_EXCHANGE_CODE)
          group by Broker,BuySell,MaturityDate,ExecuteDate,Exchange 
          ORDER BY ExecuteDate';
--  delete from trsystem978;
--  insert into trsystem978 values (frmDate);
--        Query_str := 'SELECT   BANKNAME Broker ,
--             (case when processcomplete=12400002 then Sum(balancefcy)
--              else Sum(CancelAmount) end) Amount,
--          --   sum(balancefcy)  Amount,
--          buysell BuySell,
--          exrate Rate,maturity MaturityDate,
--               ' ||''''||frmDate||'''' ||'  Asondate,'||''''||toDate||''''||' todate
--          from vewreportfuture
--          where  dealdate between   ' ||''''||frmDate||'''' ||' and '||''''||toDate||''''||'
--          group by BANKNAME,maturity,exrate,buysell,processcomplete';
          DELETE FROM TEMP;COMMIT;
          insert into temp values(Query_str,Query_str);commit;
            OPEN GENCURSOR FOR Query_str;
  GOTO PROCESS_END;
END IF;
--
--if varReportId='PPLIMIT' then
--  Query_Str:=' select ''PP Limit Export'' UnderLying,''Any'' Product,''Apr to Jun 17'' refdate,
--          (select nvl(sum(bank_limit_amount),0) From trtran015 where bank_limit_type=31100003 
--          and bank_record_status not in (10200005,10200006)) as PPLimitAmount ,
--          (select sum(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, ' ||''''||frmDate||'''' ||'))
--          from trtran001 where deal_hedge_trade=26000003) AS RunningAmount,
--          '''' inwdcancel, (SELECT sum(case when cdel_cancel_type =27000002 then cdel_profit_loss else 0 end) FROM TRTRAN006
--          WHERE cdel_record_status NOT IN (10200005,10200006)) AS utilized,         
--          ' ||''''||frmDate||'''' ||'  Asondate,'||''''||toDate||''''||' todate
--          from dual';
--    OPEN GENCURSOR FOR Query_str;
--  GOTO PROCESS_END;
--END IF;   
--if varReportId='PPLIMIT' then
--  Query_Str:='select ''Any'' Product,PPLimitAmount,LimitType Underlying,Period,EffectiveDate, DueDate,  
--          (select sum(pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, ' ||''''||frmDate||'''' ||'))
--          from trtran001 where deal_hedge_trade=26000003
--          AND DEAL_RECORD_STATUS NOT IN (10200005,10200006)) AS RunningAmount,
--          (SELECT sum(case when cdel_cancel_type =27000001 then CDEL_CANCEL_AMOUNT else 0 end) FROM TRTRAN006,TRTRAN001
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER AND deal_hedge_trade=26000003 
--          AND DEAL_RECORD_STATUS NOT IN (10200005,10200006)AND cdel_record_status NOT IN (10200005,10200006)) AS inwdcancel, 
--          (SELECT sum(case when cdel_cancel_type =27000002 then CDEL_CANCEL_AMOUNT else 0 end) FROM TRTRAN006,TRTRAN001
--          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER AND deal_hedge_trade=26000003 
--          AND DEAL_RECORD_STATUS NOT IN (10200005,10200006)AND cdel_record_status NOT IN (10200005,10200006)) AS utilized ,
--           ' ||''''||frmDate||'''' ||'  Asondate,'||''''||toDate||''''||' todate
--          from (
--          (select nvl(sum(bank_limit_amount),0) PPLimitAmount,
--          pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
--          bank_effective_date  EffectiveDate,bank_due_date DueDate,
--             to_char(to_date(bank_effective_date,''dd-MON-yy''), ''Mon'') || '' to '' || to_char(to_date(bank_due_date,''dd-MON-yy''), ''Mon'')
--           ||'' '' ||  to_char(to_date(bank_due_date,''dd-MON-yy''), ''YY'')   Period
--          From trtran015 where bank_limit_type in (31100005,31100006)
--          and bank_record_status not in (10200005,10200006)
--          group by bank_limit_type,bank_effective_date,bank_due_date) )  where EffectiveDate=' ||''''||frmDate||'''' ||'
--          and DueDate>=' ||''''||frmDate||'''' ||' ' ; 
--          delete from temp;
--          insert into temp values(Query_Str,'chandra');
--    OPEN GENCURSOR FOR Query_str;
--  GOTO PROCESS_END;
--END IF;   
if varReportId='PPLIMIT' then
  if (to_char(frmdate,'MM') >3) then              
              datTemp:= '31-MAR-' ||to_char(frmdate,'YY');              
         else        
             datTemp:= '31-MAR-' || to_number(To_Char(to_date(frmdate,'dd-MON-yy'),'YY')-1);       
  end if;
  Query_Str:='select ''Any'' Product, LimitType UnderLying,PPLimitAmount,RunningAmount,inwdcancel,utilized,
      EffectiveDate,DueDate,Period ,    ' ||''''||frmDate||'''' ||'  Asondate,'||''''||toDate||''''||' todate from (
         select 
          pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
          nvl(sum(bank_limit_amount),0) PPLimitAmount,
          fncGetPPLimitUtilise(' ||''''||frmDate||'''' ||',25300001,1)  as RunningAmount,
          fncGetPPLimitUtilise(' ||''''||frmDate||'''' ||',25300001,2)  AS inwdcancel,
          fncGetPPLimitUtilise(' ||''''||frmDate||'''' ||',25300001,3)  AS utilized, 
          bank_effective_date  EffectiveDate,bank_due_date DueDate,
          to_char(to_date(bank_effective_date,''dd-MON-yy''), ''Mon'') || '' to '' || to_char(to_date(bank_due_date,''dd-MON-yy''), ''Mon'')
           || '' '' || to_char(to_date(bank_due_date,''dd-MON-yy''), ''YY'')   Period                 
          From trtran015 where bank_limit_type in (31100006)
          and bank_record_status not in (10200005,10200006)
          group by bank_limit_type,bank_effective_date,bank_due_date 
          union all
          select 
          pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
          nvl(sum(bank_limit_amount),0) PPLimitAmount,
          fncGetPPLimitUtilise(' ||''''||frmDate||'''' ||',25300002,1)  as RunningAmount,
          fncGetPPLimitUtilise(' ||''''||frmDate||'''' ||',25300002,2)  AS inwdcancel,
          fncGetPPLimitUtilise(' ||''''||frmDate||'''' ||',25300002,3)  AS utilized ,
          bank_effective_date  EffectiveDate,bank_due_date DueDate,
          to_char(to_date(bank_effective_date,''dd-MON-yy''), ''Mon'') || '' to '' || to_char(to_date(bank_due_date,''dd-MON-yy''), ''Mon'')
           || '' '' || to_char(to_date(bank_due_date,''dd-MON-yy''), ''YY'')   Period              
          From trtran015 where bank_limit_type in (31100005)
          and bank_record_status not in (10200005,10200006)
          group by bank_limit_type,bank_effective_date,bank_due_date) ' ; 
          delete from temp;
          insert into temp values(Query_Str,'chandra');
    OPEN GENCURSOR FOR Query_str;
    
   open nextcursor for
   select  'Any' Product,deal_deal_number DEALNUMBER, pkgreturncursor.fncgetdescription(deal_buy_sell,2)  BuySell,  
     (case when Deal_Buy_Sell=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,frmdate)),0) amount,
     pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
     pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
     Deal_base_Amount BaseAmount,deal_exchange_rate Exerate,
     deal_spot_rate Spot,Deal_forward_rate fwdrate,
     deal_margin_rate Margin,deal_maturity_from ExpiryDate,
     deal_maturity_date SettlementDate,deal_execute_date BookingDate,
     null CancelAmount,null CancelDate,Null Premiumamount, null PremiumStatus,
     'Forward' InstrumentType,'Running' RunnInward,
     pkgreturncursor.fncgetdescription(deal_base_currency,2)||pkgreturncursor.fncgetdescription(deal_other_currency,2) BaseCurrency,
     Pkgreturncursor.Fncgetdescription(Deal_Other_Currency,2) Othercurrency,
     null ProfitLoss,frmdate frmdate,12400002 ProcessComplete
     From Trtran001 
     where ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >frmdate)
                          Or Deal_Process_Complete = 12400002)                         
                          And Deal_Hedge_Trade=26000003
                          And Deal_Record_Status Not In (10200005,10200006)
    Union All          
     SELECT  'Any' Product, COPT_DEAL_NUMBER DEALNUMBER,
     pkgreturncursor.fncgetdescription(cosu_buy_sell,2)||pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) BuySell,
      ( case when COSU_BUY_SELL=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,frmdate,NULL,1)),0)   amount,
     pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
     pkgreturncursor.fncgetdescription(copt_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(copt_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
     copt_base_Amount BaseAmount,cosu_strike_rate Exerate,0 Spot, 0 fwdrate,
     copt_margin_rate Margin,copt_expiry_date ExpiryDate,
     copt_maturity_date SettlementDate,copt_execute_date BookingDate,
     null CancelAmount, null CancelDate,Copt_Premium_Amount Premiumamount,
     pkgreturncursor.fncgetdescription(copt_premium_status,2) PremiumStatus,
     'Option' InstrumentType,'Running' RunnInward,
     pkgreturncursor.fncgetdescription(copt_base_currency,2) || pkgreturncursor.fncgetdescription(copt_other_currency,2) BaseCurrency,
     pkgreturncursor.fncgetdescription(copt_other_currency,2) OtherCurrency,
     null ProfitLoss,frmdate frmdate,12400002 ProcessComplete
     From trtran071 , trtran072
     where  COPT_DEAL_NUMBER = COSU_DEAL_NUMBER
     AND ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >frmdate) or copt_PROCESS_COMPLETE = 12400002)
     and (COPT_EXECUTE_DATE <= frmdate)
     and  COPT_RECORD_STATUS not in (10200005,10200006)
     AND cosu_record_status NOT IN (10200005,10200006)
     And Copt_Hedge_Trade=26000003       
     Union All 
     SELECT 'Any' Product,deal_deal_number DEALNUMBER,pkgreturncursor.fncgetdescription(deal_buy_sell,2) BuySell,   
     ( case when Deal_Buy_Sell=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,datTemp)),0) amount,
     pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
     pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
     Deal_base_Amount BaseAmount,deal_exchange_rate Exerate,deal_spot_rate Spot,
     Deal_forward_rate fwdrate,deal_margin_rate Margin,deal_maturity_from ExpiryDate,
     deal_maturity_date SettlementDate,deal_execute_date BookingDate,
     (case when cdel_cancel_type =27000001 then CDEL_CANCEL_AMOUNT else 0 end) CancelAmount,
     cdel_cancel_date CancelDate, null Premiumamount,Null Premiumstatus,
     'Forward Cancel' Instrumenttype,'Cancelled' RunnInward,
     pkgreturncursor.fncgetdescription(deal_base_currency,2)||pkgreturncursor.fncgetdescription(deal_other_currency,2) BaseCurrency,
     pkgreturncursor.fncgetdescription(deal_other_currency,2) OtherCurrency,
     cdel_profit_loss ProfitLoss,frmdate frmdate,12400001 ProcessComplete
     FROM TRTRAN006,TRTRAN001
     WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER 
     AND deal_hedge_trade=26000003 
     AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
     AND cdel_record_status NOT IN (10200005,10200006)
     and cdel_cancel_date  between datTemp and frmdate    
     union all
     SELECT 'Any' Product,copt_deal_number DEALNUMBER,
     pkgreturncursor.fncgetdescription(cosu_buy_sell,2)||pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) BuySell,   
     ( case when cosu_Buy_Sell=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,frmdate,NULL,1)),0) amount,
     pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
     pkgreturncursor.fncgetdescription(copt_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(copt_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
     copt_base_Amount BaseAmount,cosu_strike_rate Exerate,0 Spot, 0 fwdrate,0 Margin,COPT_EXPIRY_DATE ExpiryDate,
     copt_maturity_date SettlementDate,copt_execute_date BookingDate,CORV_BASE_AMOUNT CancelAmount,
     CORV_EXERCISE_DATE CancelDate, null Premiumamount,Null Premiumstatus,
     'Option Unwind' Instrumenttype,'Cancelled' RunnInward,
     pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY,2)|| pkgreturncursor.fncgetdescription(copt_other_currency,2) BaseCurrency,
     pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2) OtherCurrency,
     PKGFOREXPROCESS.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER, CORV_REVERSE_SERIAL,frmdate) ProfitLoss,
     frmdate frmdate,12400001 ProcessComplete
     FROM trtran073,trtran071,trtran072
     WHERE copt_DEAL_NUMBER = corv_DEAL_NUMBER 
     and copt_deal_number = cosu_deal_number
     AND copt_hedge_trade=26000003
     AND copt_RECORD_STATUS NOT IN (10200005,10200006) 
     AND corv_record_status NOT IN (10200005,10200006)
     AND cosu_record_status NOT IN (10200005,10200006)
     and CORV_EXERCISE_DATE between datTemp and frmdate;
  Goto Process_End;
END IF; 
 if varReportId='EXPORTSUMMARY' then 
  OPEN GENCURSOR FOR
       with Cte as (select round( sum(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) / sum(POSN_TRANSACTION_AMOUNT),6) WeightedAvgRate,
            POSN_MATURITY_MONTH    
      FROM TRSYSTEM997    
      group by POSN_MATURITY_MONTH)    
    SELECT Pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,1)Company,    
       Pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) || '/' ||    
       Pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) CurrencyPair, 
       Pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) BaseCurrency,
       Pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,2) AccountType,    
       POSN_USER_ID UserID, POSN_DEALER_ID DealerID,  POSN_HEDGE_TRADE HedgeTrade,    
       Pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,1) Bank,    
       POSN_TRANSACTION_AMOUNT TransactionAmount,  POSN_FCY_RATE ExchangeRate,    
       POSN_USD_RATE RevaluedRate, POSN_USD_VALUE RevaluedAmount,    
       POSN_DUE_DATE DueDate,  p.POSN_MATURITY_MONTH MaturityMonth,    
       Pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,1)Product,    
        Pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,1)SubProduct,    
        Pkgreturncursor.fncgetdescription(POSN_OPTION_TYPE,1) OptionType,    
       POSN_PRODUCT_CODE ProductCode, POSN_ASSET_LIABILITY AssetLiability,    
       POSN_USER_REFERENCE UserRef,  POSN_BROKER_CODE BrokerCode,  POSN_OPTION_TYPE OptionCode,    
       POSN_PRIMIUM_STATUS PremiumStatus,  POSN_PRIMIUM_AMOUNT PremiumAmnt,    
       POSN_COUNTER_PARTY BankCode,POSN_CURRENCY_CODE CurrencyCode,POSN_SUBPRODUCT_CODE SubProductCode,    
       POSN_FOR_CURRENCY ForCurrencyCode,WeightedAvgRate,    
       POSN_MTM_RATEACTUAL MTMRateActual,POSN_MTM_ACTUAL MTMActual,    
    POSN_MTM_LOCAL MTMLocal,POSN_MTM_WASHRATE MTMWashRate    
    FROM TRSYSTEM997 p right outer join Cte    
    on cte.POSN_MATURITY_MONTH=p.POSN_MATURITY_MONTH    
    where POSN_ACCOUNT_CODE in (GConst.FORWARDHEDGEBUY,GConst.FORWARDHEDGESALE,Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE,    
    Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE)  ;
   GOTO PROCESS_END;
END IF;  
if varReportId='MARKETINGSUMMARY' then 
  if (to_char(frmDate,'MM') <=4) then
    tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
    dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
    temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
  else
    tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
    dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
    temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
  end if;
  OPEN GENCURSOR FOR
    select MarketingPlan.Company,MarketingPlan.ProductCategory,MarketingPlan.MaturityDate MaturityDate,
       pkgforexprocess.fncGetCustomRate(Last_day(MaturitydateL),trad_trade_currency,
             (case when TRAD_IMPORT_EXPORT=25900156 then 25300001 else 25300002 end),4) BudgetRate,
        MarketingPlan.MarketingPlanRate,
           MarketingPlan.AmountFcy,Relization.RelizationAmount,Relization.RelizationRate,
            (Relization.RelizationRate- MarketingPlan.MarketingPlanRate) VarianceRate,
            ((Relization.RelizationRate- MarketingPlan.MarketingPlanRate)*(MarketingPlan.AmountFcy/10)) Variance_PnL,
            1 ReportOrder
       from
           (select pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,2)Company,
               pkgreturncursor.fncgetdescription(Trad_Product_category,2) ProductCategory,
               sum(TRAD_TRADE_FCY)/1000000 AmountFcy,TRAD_IMPORT_EXPORT,trad_trade_currency,
               avg(pkgforexprocess.fncGetCustomRate(Last_day(Trad_Maturity_date),trad_trade_currency,
              (case when TRAD_IMPORT_EXPORT=25900156 then 25300001 else 25300002 end),3))MarketingPlanRate,
              TO_CHAR(Trad_Maturity_date,'MON-yy') MaturityDate,Trad_Product_category ProductCode,
              LAST_DAY(Trad_Maturity_date)MaturitydateL
         from trtran002
         where trad_import_export in (25900157)
          and trad_record_status not in (10200005,10200006)
          group by TRAD_COMPANY_CODE,TRAD_IMPORT_EXPORT,trad_trade_currency,
          Trad_Product_category,TO_CHAR(Trad_Maturity_date,'MON-yy'),LAST_DAY(Trad_Maturity_date) )MarketingPlan
    left outer join
        (select TO_CHAR(CDEL_CANCEL_DATE,'MON-yy') CancelDate, Sum(CDEL_CANCEL_AMOUNT)/1000000 RelizationAmount,
              round(sum(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) /sum(CDEL_CANCEL_AMOUNT),6) RelizationRate,
              DEAL_BASE_CURRENCY,DEAL_BACKUP_DEAL ProductCode,DEAL_OTHER_CURRENCY,
              pkgreturncursor.fncgetdescription(CDEL_COMPANY_CODE,2)Company
            from trtran006 inner join trtran001
            on cdel_deal_number= deal_deal_number
            where cdel_record_Status not in (10200005,10200006)
            and deal_record_Status not in (10200005,10200006)
            and deal_buy_sell = 25300002
            and CDEL_CANCEL_DATE BETWEEN tempDate and frmDate
            group by TO_CHAR(CDEL_CANCEL_DATE,'MON-yy'),DEAL_BASE_CURRENCY,
            DEAL_BACKUP_DEAL,DEAL_OTHER_CURRENCY,CDEL_COMPANY_CODE) Relization
    on MarketingPlan.MaturityDate=Relization.CancelDate
    and MarketingPlan.Company=Relization.Company
    UNION ALL
     SELECT pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,2)Company,
        pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CATEGORY,2) ProductCategory,
        TO_CHAR(CDEL_CANCEL_DATE,'MON-yy') MaturityDate,
        ROUND(SUM(CDEL_CANCEL_AMOUNT*fncgetBLRate(trad_bill_date,trad_trade_currency)) /SUM(CDEL_CANCEL_AMOUNT),6)BLRate,
        0,SUM(CDEL_CANCEL_AMOUNT/1000000)RelizationAmount,0,
        ROUND(SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) /SUM(CDEL_CANCEL_AMOUNT),6) RelizationRate,0,0,2
        --TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM')MonthOrder
      FROM trtran006
      INNER JOIN trtran002
      ON cdel_trade_reference       = trad_trade_reference
      WHERE cdel_record_Status NOT IN (10200005,10200006)
      AND trad_record_Status NOT   IN (10200005,10200006)
      AND CDEL_CANCEL_DATE BETWEEN tempDate and frmDate
      AND TRAD_IMPORT_EXPORT < 25900050
      GROUP BY TRAD_COMPANY_CODE,TO_CHAR(CDEL_CANCEL_DATE,'MON-yy'),TRAD_TRADE_CURRENCY,
        TRAD_PRODUCT_CATEGORY,TRAD_LOCAL_CURRENCY,TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM');
   OPEN nextcursor FOR
    SELECT  contract_no  ContractNo, Company, Category BusinessUnit,
            subCategory ProfileCenter, ReferenceDate, Vendor, Bank,
            BankRef, DueDate, Currency,ContractAmount, BenchMarkRate,
            ForwardContract,ExecuteDate,CurrencyPair,
            ForwardContractBank ForwardContracrBank, DealType, BaseAmount,
            Exchangerate, Deliverdrate Deliveryrate, Deliverdamount Deliveryamount,
            DeliveryDate,ED_Pisa EDPisa, EDBenifit,DocumentNo,ASONDate,IMPORTEXPORT,
            TO_CHAR(DeliveryDate,'MON-yy')MaturityDate
    FROM VEWSETTLED_PO_DETAIL where ImportExporttype < 25900050;   
   GOTO PROCESS_END;
END IF;  
if varreportid='BOOKINGBANKWISE' then
 open Gencursor for 
 
         select 'IMPEXP' IMPORTEXPORT,BookingAmount.Company "Company",BookingAmount.Counterparty "Bank",
               decode(BookingAmount.Buysell,'Buy','Import','Sell','Export') "Buysell",
               BookingAmount.BookingAmount/1000000 "BookinAmount",
               CompanyBookingAmount.BookingAmount/1000000  CompanyBookingAmount,
               OverAllBookingAmount.BookingAmount/1000000  OverAllBookingAmount,
               round(BookingAmount.BookingAmount/DECODE(CompanyBookingAmount.BookingAmount,0,1,CompanyBookingAmount.BookingAmount),4) ComapnyLevelPercentage,
               round(CompanyBookingAmount.BookingAmount/DECODE(OverAllBookingAmount.BookingAmount,0,1,OverAllBookingAmount.BookingAmount),4) OverallPercentage,
               frmdate FromDate,todate Todate
        from
        (select pkgreturncursor.fncgetdescription(Deal_company_code,1) Company,
              pkgreturncursor.fncgetdescription(deal_counter_Party,2) Counterparty,
              pkgreturncursor.fncgetdescription(deal_buy_sell,1) Buysell,
              sum(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookingAmount
          from trtran001
          where deal_record_status not in (10200005,10200006)
          and deal_process_complete =12400002
          group by Deal_company_code,deal_counter_Party,deal_buy_sell) BookingAmount
          inner join
          (select pkgreturncursor.fncgetdescription(Deal_company_code,1) Company,
              pkgreturncursor.fncgetdescription(deal_buy_sell,1) Buysell,
              sum(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookingAmount
          from trtran001
          where deal_record_status not in (10200005,10200006)
          and deal_process_complete =12400002
          group by Deal_company_code,deal_buy_sell) CompanyBookingAmount
          on BookingAmount.Company=CompanyBookingAmount.Company
          and BookingAmount.Buysell=CompanyBookingAmount.Buysell
          inner join
          (select pkgreturncursor.fncgetdescription(deal_buy_sell,1) Buysell,
              sum(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookingAmount
          from trtran001
          where deal_record_status not in (10200005,10200006)
          and deal_process_complete =12400002
          group by deal_buy_sell) OverAllBookingAmount
          on  BookingAmount.Buysell=OverAllBookingAmount.Buysell
          Union All  
          select 'OPTIONS' IMPORTEXPORT,optBooking.Company,optBooking.Bank,'Outstanding' Buysell,optBooking.BookinAmount/1000000,
         0 CompanyBookingAmount,OptPrevious.BookinAmount/1000000 OverAllBookingAmount,
         0 ComapnyLevelPercentage, 0 OverallPercentage, frmdate,todate
        from
      (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
             sum(COPT_BASE_AMOUNT) BookinAmount
      From Trtran071
      where copt_record_Status not in (10200005,10200006)
      and copt_process_complete =12400002
      group by COPT_COUNTER_PARTY,copt_company_code)optBooking
      inner join
        (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
                sum(COPT_BASE_AMOUNT) BookinAmount
          from trtran071
          where copt_record_Status not in (10200005,10200006)
           and copt_process_complete =12400002
          group by copt_company_code)OptPrevious
      on optBooking.Company=OptPrevious.Company
      union all
  select 'OPTIONS' IMPORTEXPORT, optBooking.Company,optBooking.Bank,'Booking of '||FNCGETFINANCIALYEAR(todate,todate,1) Buysell,optBooking.BookinAmount/1000000,
         0 CompanyBookingAmount,OptPrevious.BookinAmount/1000000 OverAllBookingAmount,
         0 ComapnyLevelPercentage, 0 OverallPercentage,frmdate,todate
  from
      (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
             sum(COPT_BASE_AMOUNT) BookinAmount
      from trtran071
      where copt_record_Status not in (10200005,10200006)
      and COPT_EXECUTE_DATE between frmdate and todate
      group by COPT_COUNTER_PARTY,copt_company_code)optBooking
      inner join
        (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
                sum(COPT_BASE_AMOUNT) BookinAmount
          from trtran071
          where copt_record_Status not in (10200005,10200006)
           and COPT_EXECUTE_DATE between frmdate and todate
          group by copt_company_code)OptPrevious
      on optBooking.Company=OptPrevious.Company
    union all      
    SELECT 'IRS' IMPORTEXPORT,
    a.Company Company,a.Bank Bank,a.FinancialYear FinancialYear,a.Amount/1000000 Amount,
    0,B.Amount/1000000 TotalBooking,0,0,frmdate,todate from(
    Select Pkgreturncursor.Fncgetdescription(Iirs_Company_Code,2) Company,
           pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) Bank,  sum(IIRS_NOTIONAL_AMOUNT) Amount,
           FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)FinancialYear
     from trtran091 WHERE IIRS_EXECUTE_DATE between frmdate and todate 
     AND IIRS_RECORD_STATUS NOT IN(10200005,10200006)
     group by IIRS_COMPANY_CODE, IIRS_COUNTER_PARTY,FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)) A
     inner Join
    (Select Pkgreturncursor.Fncgetdescription(Iirs_Company_Code,2) Company,
           sum(IIRS_NOTIONAL_AMOUNT) Amount,
           FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)FinancialYear
     from trtran091  WHERE IIRS_EXECUTE_DATE between frmdate and todate 
     AND IIRS_RECORD_STATUS NOT IN(10200005,10200006)
     group by IIRS_COMPANY_CODE,FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1))B 
     on A.Company=B.Company 
     and a.FinancialYear = b.FinancialYear;
      open nextcursor for
           select   pkgreturncursor.fncgetdescription(Deal_company_code,1) Company,
              pkgreturncursor.fncgetdescription(deal_counter_Party,2) Bank,
              Decode(Deal_Buy_Sell,25300001,'Import',25300002,'Export') Buysell,  
              Deal_Deal_Number Dealnumber,
              Deal_Execute_Date Exedate,
               Pkgreturncursor.Fncgetdescription(Deal_Base_Currency,2) Basecurrency,
               Pkgreturncursor.Fncgetdescription(Deal_Other_Currency,2) Othercurrency,
               Deal_Exchange_Rate Exerate,
               Deal_Base_Amount Baseamount,
               Deal_Other_Amount Otheramount,
               Deal_Maturity_From Maturity,
               Deal_Maturity_Date Maturitydate,
               Deal_Dealer_Remarks Dealremarks,
               Deal_User_Reference Userref,               
               deal_dealer_name dealername,
              (pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookinAmount
          from trtran001
          Where Deal_Record_Status Not In (10200005,10200006)
          and deal_process_complete =12400002
          union all 
          select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
              'Booking of ' || FNCGETFINANCIALYEAR(todate,todate,1) Buysell,     
                    Copt_Deal_Number Dealnumber,
              Copt_Execute_Date Exedate,
               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) Basecurrency,
               Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) Othercurrency,
               copt_lot_price Exerate,
               Copt_Base_Amount Baseamount,
              Copt_Other_Amount Otheramount,
               copt_expiry_date Maturity,
               Copt_Maturity_Date Maturitydate,
               copt_bo_Remark Dealremarks,
              Copt_User_Reference Userref,
             copt_dealer_name dealername,
             (COPT_BASE_AMOUNT) BookinAmount
      from trtran071
      where copt_record_Status not in (10200005,10200006)
      and COPT_EXECUTE_DATE between frmdate and todate
      union all
      select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
             'Outstanding' Buysell,
                Copt_Deal_Number Dealnumber,
              Copt_Execute_Date Exedate,
               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) Basecurrency,
               Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) Othercurrency,
               copt_lot_price Exerate,
               Copt_Base_Amount Baseamount,
              Copt_Other_Amount Otheramount,
               copt_expiry_date Maturity,
               Copt_Maturity_Date Maturitydate,
              copt_bo_Remark Dealremarks,
              Copt_User_Reference Userref,
             copt_dealer_name dealername,
             (COPT_BASE_AMOUNT) BookinAmount
      From Trtran071
      where copt_record_Status not in (10200005,10200006)
      and copt_process_complete =12400002;
              
--        
--          Union All  
--          select 'OPTIONS' IMPORTEXPORT,optBooking.Company,optBooking.Bank,'Outstanding' Buysell,optBooking.BookinAmount,
--         0 CompanyBookingAmount,OptPrevious.BookinAmount OverAllBookingAmount,
--         0 ComapnyLevelPercentage, 0 OverallPercentage
--        from
--      (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
--             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
--             (COPT_BASE_AMOUNT) BookinAmount
--      From Trtran071
--      where copt_record_Status not in (10200005,10200006)
--      and copt_process_complete =12400002
--    )optBooking
--      inner join
--        (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
--                (COPT_BASE_AMOUNT) BookinAmount
--          from trtran071
--          where copt_record_Status not in (10200005,10200006)
--           and copt_process_complete =12400002
--          )OptPrevious
--      on optBooking.Company=OptPrevious.Company
--      union all
--  select 'OPTIONS' IMPORTEXPORT, optBooking.Company,optBooking.Bank,'Booking of' Buysell,optBooking.BookinAmount,
--         0 CompanyBookingAmount,OptPrevious.BookinAmount OverAllBookingAmount,
--         0 ComapnyLevelPercentage, 0 OverallPercentage
--  from
--      (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
--             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
--             (COPT_BASE_AMOUNT) BookinAmount
--      from trtran071
--      where copt_record_Status not in (10200005,10200006)
--      and Copt_Complete_date between '01-Apr-2017' and '31-Mar-2018'
--     )optBooking
--      inner join
--        (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
--                (COPT_BASE_AMOUNT) BookinAmount
--          from trtran071
--          where copt_record_Status not in (10200005,10200006)
--           and Copt_Complete_date between '01-Apr-2017' and '31-Mar-2018'
--          )OptPrevious
--      on optBooking.Company=OptPrevious.Company;
 GOTO PROCESS_END;
END IF;  

if varreportid='IRSBankWise' then
open GEncursor for

    Select Pkgreturncursor.Fncgetdescription(Iirs_Company_Code,2) Company,
           pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) Bank,  sum(IIRS_NOTIONAL_AMOUNT) Amount,
           FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)FinancialYear
     from trtran091
     group by IIRS_COMPANY_CODE, IIRS_COUNTER_PARTY,FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1);
     open nextcursor for 
    Select Pkgreturncursor.Fncgetdescription(Iirs_Company_Code,2) Company,
           pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) Bank,  (IIRS_NOTIONAL_AMOUNT) Amount,
           FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)FinancialYear
     from trtran091;
GOTO PROCESS_END;
END IF; 

If Varreportid='TRANSACTIONMISREPORT' Then
  delete from trsystem978;
  insert into trsystem978 values (ToDate);
 
    Open Gencursor For
    Select Transtype,Company,Executedate,Baseamount,Spotrate,Fwdrate,Profitloss,Currencypair,ImpExp,
      frmDate as frmDate,toDate as toDate from (
          select 'Booking' Transtype, pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(deal_execute_date,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(deal_base_amount) BaseAmount,
          round(sum(deal_base_amount*deal_Spot_rate)/sum(deal_base_amount),6) SpotRate,
          round(sum(deal_base_amount*deal_Exchange_rate)/sum(deal_base_amount),6) FwdRate,0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp
          from trtran001
          where deal_record_Status not in (10200005,10200006)
          and deal_execute_date  between frmDate and ToDate
          group by  trunc(deal_execute_date,'MM'),Deal_buy_sell,deal_company_code,deal_base_currency,deal_Other_currency
          union all
          select 'Due Date' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(deal_Maturity_date,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(deal_base_amount) BaseAmount,
          round(sum(deal_base_amount*deal_Spot_rate)/sum(deal_base_amount),6) SpotRate,
          round(sum(deal_base_amount*deal_Exchange_rate)/sum(deal_base_amount),6) FwdRate,
          0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp
          from trtran001
          where deal_record_Status not in (10200005,10200006)
          and deal_Maturity_date  between frmDate and ToDate
          group by  trunc(deal_Maturity_date,'MM'),Deal_buy_sell,deal_company_code,deal_base_currency,deal_Other_currency
          union all
          select 'Cancellation' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(cdel_cancel_date,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(cdel_cancel_amount) BaseAmount,
          round(sum(cdel_cancel_amount*cdel_cancel_rate)/sum(cdel_cancel_amount),6) CancelRate,
          round(sum(cdel_cancel_amount*deal_Exchange_rate)/sum(cdel_cancel_amount),6) BookingRate,
          sum(CDEL_PROFIT_LOSS) ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp
          from trtran006 inner join trtran001
          on deal_deal_number= cdel_deal_number
          where deal_record_Status not in (10200005,10200006)
          and cdel_record_status not in (10200005,10200006)
          and cdel_cancel_date between   frmDate and ToDate
          Group By  Trunc(Cdel_Cancel_Date,'MM'),Deal_Buy_Sell,Deal_Company_Code,Deal_Base_Currency,Deal_Other_Currency
          union all
          select 'BookingToday' Transtype, pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(deal_execute_date,'MM') MaturityDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(deal_base_amount) BaseAmount,
          round(sum(deal_base_amount*deal_Spot_rate)/sum(deal_base_amount),6) SpotRate,
          round(sum(deal_base_amount*DEAL_FORWARD_RATE+DEAL_MARGIN_RATE)/sum(deal_base_amount),6) FwdRate,0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp
          from trtran001
          where deal_record_Status not in (10200005,10200006)
          and deal_execute_date =  todate 
          group by  trunc(deal_execute_date,'MM'),Deal_buy_sell,deal_company_code,deal_base_currency,deal_Other_currency
          union all
          select 'CancellationToday' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(cdel_cancel_date,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(cdel_cancel_amount) BaseAmount,
          round(sum(cdel_cancel_amount*cdel_cancel_rate)/sum(cdel_cancel_amount),6) CancelRate,
          round(sum(cdel_cancel_amount*deal_Exchange_rate)/sum(cdel_cancel_amount),6) BookingRate,
          sum(CDEL_PROFIT_LOSS) ProfitLoss,
          (Pkgreturncursor.Fncgetdescription(Deal_Base_Currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp
          from trtran006 inner join trtran001
          on deal_deal_number= cdel_deal_number
          where deal_record_Status not in (10200005,10200006)
          and cdel_record_status not in (10200005,10200006)
          and  cdel_cancel_date = todate    
          group by  trunc(cdel_cancel_date,'MM'),Deal_buy_sell,deal_company_code,deal_base_currency,deal_Other_currency);
 open nextcursor for

  Select Transtype,Company,Dealnumber,Executedate DealDate,to_char(Executedate,'MON-yy') DealMonth,Baseamount,Spotrate,Fwdrate,Profitloss,Currencypair,ImpExp,
  Exerate,Maturity,Maturitydate,Dealremarks,
  Userref,dealername,TheirDelaer,Marginrate,Userid,HedgeTrade,Bank,DealType,DealMonth,
      frmDate as frmDate,toDate as toDate from (
          select 'Booking' Transtype, pkgreturncursor.fncgetdescription(deal_company_code,1) Company,        
          trunc(deal_execute_date,'MM') ExecuteDate,
          Deal_Deal_Number Dealnumber,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,(deal_base_amount) BaseAmount,
          round((deal_base_amount*deal_Spot_rate)/(deal_base_amount),6) SpotRate,
          round((deal_base_amount*deal_Exchange_rate)/(deal_base_amount),6) FwdRate,0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp,
                Deal_Exchange_Rate Exerate,
               Deal_Maturity_From Maturity,
               Deal_Maturity_Date Maturitydate,
               Deal_Dealer_Remarks Dealremarks,
               Deal_User_Reference Userref,               
               deal_dealer_name dealername,
                  deal_counter_dealer TheirDelaer,
               Deal_Margin_Rate Marginrate,
                Deal_User_Id Userid,
                Pkgreturncursor.Fncgetdescription(deal_hedge_trade,1) HedgeTrade,
                  Pkgreturncursor.Fncgetdescription(deal_counter_party,2) Bank,
                  Pkgreturncursor.Fncgetdescription(deal_deal_type,1) DealType,
                  to_char(deal_execute_date,'MON-yy') DealMonth
          from trtran001
          where deal_record_Status not in (10200005,10200006)
          and deal_execute_date  between frmDate and ToDate          
          union all
          select 'Due Date' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(deal_Maturity_date,'MM') ExecuteDate,
                    Deal_Deal_Number Dealnumber,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,(deal_base_amount) BaseAmount,
          round((deal_base_amount*deal_Spot_rate)/(deal_base_amount),6) SpotRate,
          round((deal_base_amount*deal_Exchange_rate)/(deal_base_amount),6) FwdRate,
          0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp,
                Deal_Exchange_Rate Exerate,
               Deal_Maturity_From Maturity,
               Deal_Maturity_Date Maturitydate,
               Deal_Dealer_Remarks Dealremarks,
               Deal_User_Reference Userref,               
               deal_dealer_name dealername,
                deal_counter_dealer TheirDelaer,
                Deal_Margin_Rate Marginrate,
                Deal_User_Id Userid,
                Pkgreturncursor.Fncgetdescription(Deal_Hedge_Trade,1) Hedgetrade,
                  Pkgreturncursor.Fncgetdescription(deal_counter_party,2) Bank,
                 Pkgreturncursor.Fncgetdescription(deal_deal_type,1) DealType,
                 to_char(deal_execute_date,'MON-yy') DealMonth
          from trtran001
          where deal_record_Status not in (10200005,10200006)
          and deal_Maturity_date  between frmDate and ToDate
        
          union all
          select 'Cancellation' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(cdel_cancel_date,'MM') ExecuteDate,
                    Deal_Deal_Number Dealnumber,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,(cdel_cancel_amount) BaseAmount,
          round((cdel_cancel_amount*cdel_cancel_rate)/(cdel_cancel_amount),6) CancelRate,
          round((cdel_cancel_amount*deal_Exchange_rate)/(cdel_cancel_amount),6) BookingRate,
          (CDEL_PROFIT_LOSS) ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp,
                Deal_Exchange_Rate Exerate,
               Deal_Maturity_From Maturity,
               Deal_Maturity_Date Maturitydate,
               Deal_Dealer_Remarks Dealremarks,
               Deal_User_Reference Userref,               
               deal_dealer_name dealername,
                deal_counter_dealer TheirDelaer,
                Deal_Margin_Rate Marginrate,
                Deal_User_Id Userid,
                Pkgreturncursor.Fncgetdescription(deal_hedge_trade,1) HedgeTrade,
                  Pkgreturncursor.Fncgetdescription(deal_counter_party,2) Bank,
                 Pkgreturncursor.Fncgetdescription(deal_deal_type,1) DealType,
                 to_char(deal_execute_date,'MON-yy') DealMonth
          from trtran006 inner join trtran001
          on deal_deal_number= cdel_deal_number
          where deal_record_Status not in (10200005,10200006)
          and cdel_record_status not in (10200005,10200006)
          and cdel_cancel_date between   frmDate and ToDate
        
          union all
          select 'BookingToday' Transtype, pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(deal_execute_date,'MM') MaturityDate,
           Deal_Deal_Number Dealnumber,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,(deal_base_amount) BaseAmount,
          round((deal_base_amount*deal_Spot_rate)/(deal_base_amount),6) SpotRate,
          round((deal_base_amount*DEAL_FORWARD_RATE+DEAL_MARGIN_RATE)/(deal_base_amount),6) FwdRate,0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp,
                Deal_Exchange_Rate Exerate,
               Deal_Maturity_From Maturity,
               Deal_Maturity_Date Maturitydate,
               Deal_Dealer_Remarks Dealremarks,
               Deal_User_Reference Userref,               
               deal_dealer_name dealername,
                deal_counter_dealer TheirDelaer,
                Deal_Margin_Rate Marginrate,
                Deal_User_Id Userid,
                Pkgreturncursor.Fncgetdescription(deal_hedge_trade,1) HedgeTrade,
                  Pkgreturncursor.Fncgetdescription(deal_counter_party,2) Bank,
                 Pkgreturncursor.Fncgetdescription(Deal_Deal_Type,1) Dealtype,
                 to_char(deal_execute_date,'MON-yy') DealMonth
          from trtran001
          Where Deal_Record_Status Not In (10200005,10200006)
          and deal_execute_date =todate
       --   group by  trunc(deal_Maturity_date,'MM'),Deal_buy_sell,deal_company_code,deal_base_currency,deal_Other_currency
          union all
          select 'CancellationToday' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          Trunc(Cdel_Cancel_Date,'MM') Executedate,
          deal_Deal_Number Dealnumber,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,(cdel_cancel_amount) BaseAmount,
          round((cdel_cancel_amount*cdel_cancel_rate)/(cdel_cancel_amount),6) CancelRate,
          round((cdel_cancel_amount*deal_Exchange_rate)/(cdel_cancel_amount),6) BookingRate,
          (CDEL_PROFIT_LOSS) ProfitLoss,
          (Pkgreturncursor.Fncgetdescription(Deal_Base_Currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp,
              Deal_Exchange_Rate Exerate,
               Deal_Maturity_From Maturity,
               Deal_Maturity_Date Maturitydate,
               Deal_Dealer_Remarks Dealremarks,
               Deal_User_Reference Userref,               
               deal_dealer_name dealername,
                Deal_Counter_Dealer Theirdelaer,
                Deal_Margin_Rate Marginrate,
                Deal_User_Id Userid,
                Pkgreturncursor.Fncgetdescription(Deal_Hedge_Trade,1) Hedgetrade,
                  Pkgreturncursor.Fncgetdescription(deal_counter_party,2) Bank,
                 Pkgreturncursor.Fncgetdescription(deal_deal_type,1) DealType,
                 to_char(deal_execute_date,'MON-yy') DealMonth
          from trtran006 inner join trtran001
          on deal_deal_number= cdel_deal_number
          where deal_record_Status not in (10200005,10200006)
          and cdel_cancel_date=toDate
          and cdel_record_status not in (10200005,10200006)             
         );
   GOTO PROCESS_END;
END IF;  

if varreportid='CUMULATIVEOUTSTANDING' then
  --numRecords:=2;
  --DELETE FROM TRSYSTEM983;COMMIT;
  --Query_str:= fncProductPnlPopulate(frmDate,varUserID); 
  open gencursor for
  SELECT 'MTMPOSITION' Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName('admin')CompanyName,
        to_char(maturitydate,'MON-yy') MaturityDate,
        pkgreturncursor.fncgetdescription(buysellcode,2) Buysell,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        Round(sum(outstandingamount * SpotRate)/sum(decode(outstandingamount,0,1,outstandingamount)),6) SpotRate,
        round(sum(outstandingamount * exchangerate)/sum(decode(outstandingamount,0,1,outstandingamount)),6) FwdRate,
        0 ProfitLoss,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        Case When buysellcode=25300001 Then 'Import' 
        else 'Export' end ImpExp,       
        pkgreturncursor.fncgetdescription(currencycode,2) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,1) BussinessUnit,0 SellPut,
        DEAL_TYPE Backupdeal,
        Round(sum(FRWMTM)/10000000,2)MTMPanl,
        0 GainCompare,
        '15-oct-18' FromDate,
        to_char(maturitydate,'YYYYMM')MonthOrder
      from trsystem983 where processcomplete = 12400002
      AND RECORDER = 2 ---Forwards --Option including seperatly
      AND ason_date = '15-oct-18'
      group by CompanyCode,to_char(maturitydate,'MON-yy'),to_char(maturitydate,'YYYYMM'),buysellcode,currencycode,forcurrency,DEAL_TYPE
      union all
      SELECT 'MTMPOSITION' Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName('admin')CompanyName,
        to_char(EXPIRYDATE,'MON-yy') MaturityDate,
        NULL Buysell,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        round(sum(DEALBASEAMOUNT * BUYCALL)/sum(decode(DEALBASEAMOUNT,0,1,DEALBASEAMOUNT)),6) SpotRate,
        round(sum(DEALBASEAMOUNT * SELLCALL)/sum(decode(DEALBASEAMOUNT,0,1,DEALBASEAMOUNT)),6) FwdRate,
        Round(sum(PREMIUMAMOUNT)/10000000,2)ProfitLoss,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'Options' ImpExp,       
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,1) BussinessUnit,
        round(sum(DEALBASEAMOUNT * SELLPUT)/sum(decode(DEALBASEAMOUNT,0,1,DEALBASEAMOUNT)),6) SellPut,
        0 Backupdeal,
        ROUND((SELECT sum(OPTV_PL_CCY2)
                FROM TRTRAN074A
              WHERE to_date(OPTV_ENTRY_DATE)         = to_date('15-oct-18')
            AND TO_CHAR(OPTV_EXPIRY_DATE,'YYYYMM') = TO_CHAR(EXPIRYDATE,'YYYYMM'))/10000000,2)MTMPanl,
        ROUND(sum(DAYONEFRWD)/10000000,2)  GainCompare,
        '15-oct-18' FromDate,
        to_char(EXPIRYDATE,'YYYYMM')MonthOrder
      from trsystem983 where processcomplete = 12400002
      AND RECORDER in(4,5)--Option including
      AND ason_date = '15-oct-18'
      group by CompanyCode,to_char(EXPIRYDATE,'MON-yy'),to_char(EXPIRYDATE,'YYYYMM'),currencycode,forcurrency,DEAL_TYPE
      order by 18;
--   open nextCursor for
--      SELECT 
--        a.DESCRIPTION Description, a.Trader Trader,
--        case when a.recorder in(1,2,3) then 1 else 2 end recorder,
--        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
--        a.PROFITLOSS Closed,
--        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
--        a.CANCELAMOUNT ClosedAmount,dealnumber,EXECUTEDATE,MATURITYDATE SettlementDate,CANCELDATE,CANCELRATE,
--        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
--        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
--        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
--        EXCHANGERATE,DEALREMARKS,Userreference,
--        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
--        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)BussinessUnit,
--        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,'15-oct-18' AS AsonDate,
--        userId,EXPIRYDATE,DeltaValue,
--        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
--        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
--        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
--        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
--        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
--        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,
--        round(a.PROFITLOSS/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2) PConversionAmount,
--        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,CCONFIRMDATE CConfirmDate,
--        CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
--        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
--        CENTERDBY Center,ENTERDBY EnterdBy,
--        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
--        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
--        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
--        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
--        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
--        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
--        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
--        CPREMIUMAMOUNT CPremiumAmount,
--        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
--        case when recorder in(1,2,3) then  round(FRWMTM/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2)else OPTVPLUSD end MTMUSDAmount,
--        CANCELPNLSPOT SwareRate,
--        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
--        PRESENTVALUEINR,PRESENTVALUEUSD,
--        case when a.recorder in(1,2,3) then
--        Case When buysellcode=25300001 Then 'Import' 
--        else 'Export' end else 'Options' end ImpExp,
--        Pkgreturncursor.Fncgetdescription(Transactiontype,1)Transactiontype,
--        buycall,sellcall,sellput,buyput,
--        to_char(maturitydate,'MON-yy') MaturityDate
--      FROM TRSYSTEM983 a
--      where ason_date = '15-oct-18'
--      and processcomplete = 12400002
--      and a.recorder in(1,2,3,4,5,6);
   GOTO PROCESS_END;
END IF;  


if varreportid='DAILYTRANSACTIONMIS' then
  numRecords:=2;
  DELETE FROM TRSYSTEM983;COMMIT;
  Query_str:= fncProductPnlPopulate(frmDate,varUserID); 
  open gencursor for
     Select 'BOOKING' Transtype, Pkgreturncursor.Fncgetdescription(Deal_Company_Code,1) Company,
          trunc(deal_execute_date,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(deal_base_amount/1000000) BaseAmount,
          round(sum(deal_base_amount * deal_Spot_rate)/sum(DECODE(deal_base_amount,0,1,deal_base_amount)),6) SpotRate,
          round(sum(deal_base_amount * deal_exchange_rate)/sum(DECODE(deal_base_amount,0,1,deal_base_amount)),6) FwdRate,0 ProfitLoss,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          else 'Export' end ) ImpExp,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) BaseCurrency,
          deal_backup_deal BussinessUnit,0 SellPut,frmDate FromDate
          from trtran001
          where deal_record_Status not in (10200005,10200006)
          and deal_execute_date =  frmdate
          and deal_deal_type not in(25400001)
          Group By  Trunc(Deal_Execute_Date,'MM'),Deal_Buy_Sell,Deal_Company_Code,Deal_Base_Currency,Deal_Other_Currency,deal_backup_deal
          union all
        select 'CANCELLATION' Transtype,pkgreturncursor.fncgetdescription(deal_company_code,1) Company,
          trunc(cdel_cancel_date,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(Deal_buy_sell,2) Buysell,sum(cdel_cancel_amount/1000000) BaseAmount,
          round(sum(cdel_cancel_amount*cdel_cancel_rate)/sum(DECODE(cdel_cancel_amount,0,1,cdel_cancel_amount)),6) SpotRate,
          round(sum(cdel_cancel_amount*deal_Exchange_rate)/sum(DECODE(cdel_cancel_amount,0,1,cdel_cancel_amount)),6) FwdRate,
          sum(CDEL_PROFIT_LOSS/10000000) ProfitLoss,
          (Pkgreturncursor.Fncgetdescription(Deal_Base_Currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) CurrencyPair,
           (Case When Deal_Buy_Sell=25300001 Then 'Import' 
          Else 'Export' End ) Impexp,
          (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
          pkgreturncursor.fncgetdescription(deal_Other_currency,2)) BaseCurrency,
          deal_backup_deal BussinessUnit,0 SellPut,frmDate FromDate
          from trtran006 inner join trtran001
          on deal_deal_number= cdel_deal_number
          where deal_record_Status not in (10200005,10200006)
          and cdel_record_status not in (10200005,10200006)
          and deal_deal_type not in(25400001)
          and  cdel_cancel_date = frmdate    
          group by  trunc(cdel_cancel_date,'MM'),Deal_buy_sell,deal_company_code,deal_base_currency,deal_Other_currency,deal_backup_deal
      UNION ALL
        Select 'OPTIONBOOKING' Transtype, Pkgreturncursor.Fncgetdescription(COMPANYCODE,1) Company,
          trunc(EXECUTEDATE,'MM') ExecuteDate,
          pkgreturncursor.fncgetdescription(25399999,2) Buysell,
          sum(OUTSTANDINGAMOUNT/1000000) BaseAmount,
          round(sum(DEALBASEAMOUNT * BUYCALL)/sum(DECODE(DEALBASEAMOUNT,0,1,DEALBASEAMOUNT)),6) SpotRate,
          round(sum(DEALBASEAMOUNT * SELLCALL)/sum(DECODE(DEALBASEAMOUNT,0,1,DEALBASEAMOUNT)),6) FwdRate,
          SUM(PREMIUMAMOUNT/10000000) ProfitLoss,
          (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
          pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
          null,
          (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
          pkgreturncursor.fncgetdescription(forcurrency,2)) BaseCurrency,
          0 BussinessUnit,
          round(sum(DEALBASEAMOUNT * SELLPUT)/sum(DECODE(DEALBASEAMOUNT,0,1,DEALBASEAMOUNT)),6) SellPut,frmDate FromDate
          from TRSYSTEM983
          where EXECUTEDATE =  frmdate 
          AND PROCESSCOMPLETE = 12400002
          AND RECORDER IN(4,5,6)
        Group By  COMPANYCODE,Trunc(EXECUTEDATE,'MM'),currencycode,forcurrency      
      union all    
      SELECT Transtype,Company,ExecuteDate,Buysell,SUM(BaseAmount)BaseAmount,0 SpotRate,
      Round(SUM(BaseAmount * FwdRate)/ SUM(decode(BaseAmount,0,1,BaseAmount)),6) FwdRate,
      sum(ProfitLoss) ProfitLoss,CurrencyPair,ImpExp,BaseCurrency,BussinessUnit,0 SellPut,FromDate from(
      SELECT 'MTMPOSITION' Transtype,  
        pkgreturnreport.getCompanyName(varUserID)Company,
        null ExecuteDate, null Buysell,
        Round(outstandingamount/1000000,2)BaseAmount,
        0 SpotRate,
        round(outstandingamount*exchangerate/decode(outstandingamount,0,1,outstandingamount),6) FwdRate,
        Round(FRWMTM/10000000,2)ProfitLoss,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        case when deal_type = 33300101  then
          (Case When buysellcode=25300001 Then 'Imports Trading' 
          else 'Exports Trading' end)
        else  
        case when TransactionType in(25200003) then
          (Case When buysellcode=25300001 Then 'Par Forwards-Import' 
          else 'Par Forwards-Export' end)
        else 
          (Case When buysellcode=25300001 Then 'Import' 
          else 'Export' end)
        end end ImpExp,       
        pkgreturncursor.fncgetdescription(currencycode,2) BaseCurrency,
        0 BussinessUnit,0 SellPut,frmDate FromDate
      from trsystem983 where processcomplete = 12400002
      AND RECORDER = 2) ---Forwards --Option including seperatly
      group by Transtype,Company,ExecuteDate,Buysell,CurrencyPair,ImpExp,BaseCurrency,SpotRate,BussinessUnit,FromDate
      union all
      SELECT 'MTMPOSITION' Transtype,  
        pkgreturnreport.getCompanyName(varUserID)Company,
        null ExecuteDate,
        null Buysell,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        0 SpotRate,
        round(sum(outstandingamount*exchangerate)/sum(DECODE(outstandingamount,0,1,outstandingamount)),6) FwdRate,
        ROUND((SELECT sum(OPTV_PL_CCY2)
                FROM TRTRAN074A
              WHERE to_date(OPTV_ENTRY_DATE)         = to_date(frmDate)
            --AND TO_CHAR(OPTV_EXPIRY_DATE,'YYYYMM') = TO_CHAR(EXPIRYDATE,'YYYYMM')
            )/10000000,2)ProfitLoss,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'Options' ImpExp,       
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) BaseCurrency,
        0 BussinessUnit,0 SellPut,frmDate FromDate
      from trsystem983 where processcomplete = 12400002
      AND RECORDER in(4,5)--Option including
      group by currencycode,forcurrency
      union all
      select Transtype,Company,ExecuteDate,Buysell,sum(BaseAmount)BaseAmount,SpotRate,round(sum(BaseAmount * FwdRate)/ sum(decode(BaseAmount,0,1,BaseAmount)),6)FwdRate,
      sum(ProfitLoss)ProfitLoss,CurrencyPair,ImpExp,BaseCurrency,BussinessUnit,0 SellPut,FromDate from
      (SELECT 'IRS' Transtype,  
        pkgreturnreport.getCompanyName(varUserID)Company,
        trunc(frmdate,'MM') ExecuteDate,
        null Buysell,
        Round(iirs_notional_amount/1000000,2)BaseAmount,
        0 SpotRate,
        round(iirs_notional_amount *
        (SELECT iirl_final_rate
         FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
         and  iirl_buy_sell     = 25300001
         and iirl_record_status not in(10200005,10200006))/decode(iirs_notional_amount,0,1,iirs_notional_amount),6) FwdRate,
        0 ProfitLoss,
        (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
         FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
          and iirl_record_status not in(10200005,10200006)
          and  iirl_buy_sell     = 25300001)CurrencyPair,
        'IRS' ImpExp,       
        (SELECT DISTINCT PKGRETURNCURSOR.fncGetDescription(iirl_currency_code,2)
         FROM trtran091a a WHERE iirs_irs_number = iirl_irs_number
         and iirl_record_status not in(10200005,10200006)
         and  iirl_buy_sell = 25300001) BaseCurrency,
         0 BussinessUnit,0 SellPut, frmDate FromDate   
        from trtran091 where
        ((IIRS_PROCESS_COMPLETE = 12400001  and IIRS_complete_date > frmdate) or IIRS_PROCESS_COMPLETE = 12400002)
        and IIRS_EXECUTE_DATE <= frmdate
        and iirs_record_status not in(10200005,10200006))
        group by Transtype,Company,ExecuteDate,Buysell,SpotRate,CurrencyPair,ImpExp,BaseCurrency,BussinessUnit,FromDate; 

   open nextCursor for
      SELECT 
        a.DESCRIPTION Description, a.Trader Trader,
        case when a.recorder in(1,2,3) then 1 else 2 end recorder,
        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
        a.PROFITLOSS Closed,
        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
        a.CANCELAMOUNT ClosedAmount,dealnumber,EXECUTEDATE,MATURITYDATE SettlementDate,CANCELDATE,CANCELRATE,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
        EXCHANGERATE,DEALREMARKS,Userreference,
        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)BussinessUnit,
        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmdate AS AsonDate,
        userId,EXPIRYDATE,DeltaValue,
        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,
        round(a.PROFITLOSS/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2) PConversionAmount,
        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,CCONFIRMDATE CConfirmDate,
        CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
        CENTERDBY Center,ENTERDBY EnterdBy,
        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
        CPREMIUMAMOUNT CPremiumAmount,
        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
        case when recorder in(1,2,3) then  round(FRWMTM/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2)else OPTVPLUSD end MTMUSDAmount,
        CANCELPNLSPOT SwareRate,
        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
        PRESENTVALUEINR,PRESENTVALUEUSD,
        case when a.recorder in(1,2,3) then
        case when deal_type = 33300101  then
          (Case When buysellcode=25300001 Then 'Imports Trading' 
          else 'Exports Trading' end)
        else  
        case when TransactionType in(25200003) then
          (Case When buysellcode=25300001 Then 'Par Forwards-Import' 
          else 'Par Forwards-Export' end)
        else 
          (Case When buysellcode=25300001 Then 'Import' 
          else 'Export' end)
        end end  else 'Options' end ImpExp,
        Pkgreturncursor.Fncgetdescription(Transactiontype,1)Transactiontype,
        buycall,sellcall,sellput,buyput,
        to_char(maturitydate,'MON-yy') MaturityDate
      FROM TRSYSTEM983 a
      where ason_date = frmdate
      and processcomplete = 12400002
      and a.recorder in(1,2,3,4,5,6);
      
   GOTO PROCESS_END;
END IF;   


  if varReportID='SETTLEDPODETAILS' then
  delete from trsystem981;
  insert into trsystem981 values(frmDate,ToDate);
  open GenCursor For
    SELECT  contract_no  ContractNo, Company, Category BusinessUnit,
            subCategory ProfileCenter, ReferenceDate, Vendor, Bank,
            BankRef, DueDate, Currency,ContractAmount, BenchMarkRate,
            ForwardContract,ExecuteDate,CurrencyPair,
            ForwardContractBank ForwardContracrBank, DealType, BaseAmount,
            Exchangerate, Deliverdrate Deliveryrate, Deliverdamount Deliveryamount,
            DeliveryDate,ED_Pisa EDPisa, EDBenifit,DocumentNo,ASONDate,IMPORTEXPORT
    FROM VEWSETTLED_PO_DETAIL;
   Goto Process_End;
 End if;
 if varReportID='IRSDETAILS' then
  numRecords:=2;
  open GenCursor For
    SELECT iirs_expiry_date duedate,iirs_notional_amount/1000000 usdmio,
           round( (iirs_expiry_date - iirs_start_date) / 365) tenor,
           iirl_final_rate intrate,
           fncgetIRSMTMValue(iirs_irs_number,frmDate) AS mtmamount,
           frmDate FromDate,
           pkgreturncursor.fncgetdescription(iirs_company_code,2) Company,
           pkgreturnreport.getCompanyName(varUserID)CompanyName,
           iirs_irs_number SystemReference,
           iirs_user_reference UserReference,
           iirs_underlying_exposure LoanReference,
           pkgreturncursor.fncgetdescription(iirl_rate_type,2) Ratetype,
           pkgreturncursor.fncgetdescription(iirl_int_type,2)ReceiptType,
           (select pkgreturncursor.fncgetdescription(B.iirl_int_type,2)
           from trtran091a B where iirl_buy_sell = 25300002
           and B.iirl_irs_number = C.iirl_irs_number  
           and B.iirl_record_status NOT IN (10200005,10200006))PaymentType           
    FROM  trtran091,trtran091a C
    WHERE iirs_irs_number = C.iirl_irs_number
    AND iirs_record_status NOT IN (10200005,10200006)
    AND C.iirl_record_status NOT IN (10200005,10200006)
    AND C.iirl_buy_sell = 25300001
    AND ((IIRS_PROCESS_COMPLETE = 12400001  and IIRS_complete_date > frmDate) or IIRS_PROCESS_COMPLETE = 12400002)
    and IIRS_EXECUTE_DATE<=frmDate;
  open nextCursor for
    SELECT iirs_irs_number SystemReference,
           iirs_user_reference UserReference,
           iirs_underlying_exposure LoanReference,
           iirm_settlement_date SettlementDate,
           iirm_intstart_date IntstartDate,
           iirm_intend_date IntendDate,
           (iirm_intend_date - iirm_intstart_date)NoofDay,
           0 OutstandingAmount,
           iirm_base_rate BaseRate,
           iirm_spread SpredRate,
           iirm_Final_rate  FinalRate,
           iirm_interest_amount InterestAmount,
           iirm_net_cashflow NetCashflow,
           frmDate FromDate,
           pkgreturncursor.fncgetdescription(iirs_company_code,2) Company,
           pkgreturnreport.getCompanyName(varUserID)CompanyName,
           1 as Reportorder,
           'Receive Leg' SettlementType
    FROM  trtran091,trtran091a C,trtran091b
    WHERE iirs_irs_number = C.iirl_irs_number
    AND c.iirl_irs_number = iirm_irs_number
    AND C.iirl_serial_number = iirm_serial_number
    AND iirs_record_status NOT IN (10200005,10200006)
    AND C.iirl_record_status NOT IN (10200005,10200006)
    and iirm_record_status NOT IN (10200005,10200006)
    AND C.iirl_buy_sell = 25300001
    AND ((IIRS_PROCESS_COMPLETE = 12400001  and IIRS_complete_date > frmDate) or IIRS_PROCESS_COMPLETE = 12400002)
    and IIRS_EXECUTE_DATE<=frmDate
    UNION ALL 
    SELECT iirs_irs_number SystemReference,
           iirs_user_reference UserReference,
           iirs_underlying_exposure LoanReference,
           iirm_settlement_date SettlementDate,
           iirm_intstart_date IntstartDate,
           iirm_intend_date IntendDate,
           (iirm_intend_date - iirm_intstart_date)NoofDay,
           0 OutstandingAmount,
           iirm_base_rate BaseRate,
           iirm_spread SpredRate,
           iirm_Final_rate  FinalRate,
           iirm_interest_amount InterestAmount,
           iirm_net_cashflow NetCashflow,
           frmDate FromDate,
           pkgreturncursor.fncgetdescription(iirs_company_code,2) Company,
           pkgreturnreport.getCompanyName(varUserID)CompanyName,
           2 as Reportorder,
           'Payment Leg' SettlementType
    FROM  trtran091,trtran091a C,trtran091b
    WHERE iirs_irs_number = C.iirl_irs_number
    AND c.iirl_irs_number = iirm_irs_number
    AND C.iirl_serial_number = iirm_serial_number
    AND iirs_record_status NOT IN (10200005,10200006)
    AND C.iirl_record_status NOT IN (10200005,10200006)
    and iirm_record_status NOT IN (10200005,10200006)
    AND C.iirl_buy_sell = 25300002
    AND ((IIRS_PROCESS_COMPLETE = 12400001  and IIRS_complete_date > frmDate) or IIRS_PROCESS_COMPLETE = 12400002)
    and IIRS_EXECUTE_DATE<=frmDate
    order by 5;  
  Goto Process_End;
 End if;
   
if varreportid='BOOKINGCANCELLATION' then
  if (to_char(frmDate,'MM') <=4) then
    tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
    dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
    temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
  else
    tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
    dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
    temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
  end if;
  open gencursor for
      SELECT Transtype,Company,CompanyName,ExecuteDate,SUM(nvl(BaseAmount,0)/1000000)BaseAmount,
      ROUND(SUM(BaseAmount * SoptRate)/SUM(DECODE(BaseAmount,0,1,BaseAmount)),6)SoptRate,
      ROUND(SUM(BaseAmount * FwdRate)/SUM(DECODE(BaseAmount,0,1,BaseAmount)),6)FwdRate,
      ProfitLoss,CurrencyPair,ImpExp,BaseCurrency,BussinessUnit,Backupdeal,
      FromDate,MonthOrder,PortFolio,FinancialYear,MaturityDate,DueMonthOrder,SUM(SpotInr)SpotInr,
      ROUND(SUM(BaseAmount * SpotExp)/SUM(DECODE(BaseAmount,0,1,BaseAmount)),6)SpotExp,
      ROUND(SUM(BaseAmountImp * SpotImp)/SUM(DECODE(BaseAmountImp,0,1,BaseAmountImp)),6)SpotImp,order1,
      SUM(nvl(BaseAmountImp,0)/1000000)BaseAmountImp,
      ROUND(SUM(BaseAmount * FrwdExp)/SUM(DECODE(BaseAmount,0,1,BaseAmount)),6)FrwdExp,
      ROUND(SUM(BaseAmountImp * FrwdImp)/SUM(DECODE(BaseAmountImp,0,1,BaseAmountImp)),6)FrwdImp FROM(  
      SELECT 'Booking' Transtype,  
        null Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(deal_execute_date,'MON-yy') ExecuteDate,
        round(decode(deal_buy_sell, 25300002,deal_base_amount,0),2)BaseAmount,
        round((deal_base_amount * deal_spot_rate)/decode(deal_base_amount,0,1,deal_base_amount),6) SoptRate,
        round((deal_base_amount * deal_exchange_rate)/decode(deal_base_amount,0,1,deal_base_amount),6) FwdRate,
        0 as ProfitLoss,
        (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
         pkgreturncursor.fncgetdescription(deal_other_currency,2)) CurrencyPair,
         null ImpExp,        
        (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
         pkgreturncursor.fncgetdescription(deal_other_currency,2)) BaseCurrency,
        null BussinessUnit,0 Backupdeal,
        frmdate FromDate,
        to_char(deal_execute_date,'YYYYMM')MonthOrder,
        null PortFolio,
        FNCGETFINANCIALYEAR(frmDate,frmDate,1) FinancialYear,
        null MaturityDate,null DueMonthOrder,
        Round(((deal_base_amount) * deal_spot_rate),2)SpotInr,
        round(decode(deal_buy_sell,25300002,
          (deal_base_amount * deal_spot_rate)/decode(deal_base_amount,0,1,deal_base_amount),0),6) SpotExp,
        round(decode(deal_buy_sell,25300001,
          (deal_base_amount * deal_spot_rate)/decode(deal_base_amount,0,1,deal_base_amount),0),6) SpotImp,
          1 order1,
        round(decode(deal_buy_sell, 25300001,deal_base_amount,0),2) BaseAmountImp,
        round(decode(deal_buy_sell,25300002,
        (deal_base_amount * deal_exchange_rate)/decode(deal_base_amount,0,1,deal_base_amount),0),6) FrwdExp,
        round(decode(deal_buy_sell,25300001,
        (deal_base_amount * deal_exchange_rate)/decode(deal_base_amount,0,1,deal_base_amount),0),6) FrwdImp
      from trtran001 where deal_record_status not in(10200005,10200006)
      and deal_deal_type not in(25400001)
      and deal_execute_date between tempDate and frmDate)
--      group by to_char(deal_execute_date,'MON-yy'),to_char(deal_execute_date,'YYYYMM'),deal_buy_sell,
--               deal_base_currency,deal_other_currency)
      GROUP BY Transtype,Company,CompanyName,ExecuteDate,ProfitLoss,CurrencyPair,ImpExp,BaseCurrency,BussinessUnit,Backupdeal,
                FromDate,MonthOrder,PortFolio,FinancialYear,MaturityDate,DueMonthOrder,order1               
      UNION ALL----Including Exposure
      SELECT 'Cancellation' Transtype,
        pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(CDEL_CANCEL_DATE,'MON-yy') ExecuteDate,
        abs(Round(sum(CDEL_CANCEL_AMOUNT/1000000),2))BaseAmount,
        round(sum(deal_base_amount * deal_exchange_rate)/sum(decode(deal_base_amount,0,1,deal_base_amount)),6) SoptRate,
        round(sum(CDEL_CANCEL_AMOUNT * CDEL_CANCEL_RATE)/sum(decode(CDEL_CANCEL_AMOUNT,0,1,CDEL_CANCEL_AMOUNT)),6) FwdRate,
        Round(sum(CDEL_PROFIT_LOSS/10000000),2) as ProfitLoss,
        (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
         pkgreturncursor.fncgetdescription(deal_other_currency,2)),
         Case When deal_buy_sell=25300001 Then 'Import' 
         else 'Export' end ImpExp,      
        (pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/'||
         pkgreturncursor.fncgetdescription(deal_other_currency,2)) BaseCurrency,
        pkgreturncursor.fncgetdescription(deal_backup_deal,2) BussinessUnit,
        deal_backup_deal Backupdeal,
        frmdate FromDate,
        to_char(CDEL_CANCEL_DATE,'YYYYMM')MonthOrder ,
        pkgreturncursor.fncgetdescription(deal_init_code,2)PortFolio,
        FNCGETFINANCIALYEAR(frmDate,frmDate,1) FinancialYear,
        to_char(deal_maturity_date,'MON-yy') MaturityDate,
        to_char(deal_maturity_date,'YYYYMM')DueMonthOrder,
        0 SpotInr,0 SpotExp,0 SpotImp,0 order1,0 BaseAmountImp,0 FrwdExp,0 FrwdImp
      from trtran006 inner join trtran001
      on deal_deal_number= cdel_deal_number
      where deal_record_Status not in (10200005,10200006)
      and cdel_record_status not in (10200005,10200006)
      and deal_deal_type not in(25400001)
      and CDEL_CANCEL_DATE between tempDate and frmDate 
      group by deal_company_code,to_char(CDEL_CANCEL_DATE,'MON-yy'),deal_buy_sell,
              to_char(CDEL_CANCEL_DATE,'YYYYMM'),deal_base_currency,deal_other_currency,deal_backup_deal,deal_init_code,
              to_char(deal_maturity_date,'MON-yy'),to_char(deal_maturity_date,'YYYYMM'); 
  GOTO PROCESS_END;
END IF;               
if varreportid='DAILYEXPEXPOSUREMANAGEMENT' then
  DELETE FROM TRSYSTEM983;COMMIT;
  Query_str:= fncProductPnlPopulate(frmDate,varUserID); 
  SELECT NVL(COUNT(*),0)
  INTO NUMRECORDS
  FROM TRTRAN002
  WHERE TRAD_IMPORT_EXPORT = 25900157
  AND trad_entry_date BETWEEN TRUNC(frmdate,'MM') AND frmdate
  AND TRAD_RECORD_STATUS NOT IN(10200005,10200006);
  IF NUMRECORDS > 0 THEN 
    numError := 25900157;
  ELSE
    numError := 25900155;
  END IF;  
  open gencursor for
      SELECT CASE WHEN TRANSACTIONTYPE != 25200003 THEN 'Forward Hedges'
              ELSE 'Par Forwards' END Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(maturitydate,'MON-yy') MaturityDate,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        round(sum(outstandingamount * exchangerate)/sum(decode(outstandingamount,0,1,outstandingamount)),6) FwdRate,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'Export' ImpExp,       
        pkgreturncursor.fncgetdescription(currencycode,2) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,2) BussinessUnit,
        DEAL_TYPE Backupdeal,
        frmdate FromDate,
        to_char(maturitydate,'YYYYMM')MonthOrder,
        pkgreturncursor.fncgetdescription(TRADER,2)PortFolio,
        Round(sum((outstandingamount/1000000) * exchangerate),2) AmountInr,
        2 DisplayOrder
      from trsystem983 where processcomplete = 12400002
      AND RECORDER in(2) ----Forward 
      AND buysellcode = 25300002 ---Buy details
      --AND TRANSACTIONTYPE != 25200003
      group by CompanyCode,to_char(maturitydate,'MON-yy'),to_char(maturitydate,'YYYYMM'),buysellcode,
               currencycode,forcurrency,DEAL_TYPE,TRADER,TRANSACTIONTYPE
      UNION ALL----Including Exposure
      SELECT 'PLAN' Transtype,
        pkgreturncursor.fncgetdescription(trad_company_code,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(trad_maturity_date,'MON-yy') MaturityDate,
        abs(Round(sum(trad_trade_fcy/1000000),2))BaseAmount,
        0 FwdRate,
        (pkgreturncursor.fncgetdescription(trad_trade_currency,2) || '/'||
        pkgreturncursor.fncgetdescription(trad_local_currency,2)) CurrencyPair,
        'Exposure' ImpExp,       
       (pkgreturncursor.fncgetdescription(trad_trade_currency,2) || '/'||
        pkgreturncursor.fncgetdescription(trad_local_currency,2))BaseCurrency,
        pkgreturncursor.fncgetdescription(trad_product_category,2) BussinessUnit,
        trad_product_category Backupdeal,
        frmdate FromDate,
        to_char(trad_maturity_date,'YYYYMM')MonthOrder ,
        pkgreturncursor.fncgetdescription(trad_subproduct_code,2)PortFolio,
        0 AmountInr,
        1 DisplayOrder
      FROM trtran002 
      WHERE trad_import_export = numError 
      and trad_entry_date between trunc(frmdate,'MM') and frmdate
        group by trad_company_code,to_char(trad_maturity_date,'MON-yy'),
        to_char(trad_maturity_date,'YYYYMM'),trad_trade_currency,trad_local_currency,trad_product_category,trad_subproduct_code; 
     open nextCursor for   
      SELECT 
        a.DESCRIPTION Description, a.Trader Trader,
        case when a.recorder in(1,2,3) then 1 else 2 end recorder,
        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
        a.PROFITLOSS Closed,
        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
        a.CANCELAMOUNT ClosedAmount,dealnumber,EXECUTEDATE,MATURITYDATE SettlementDate,CANCELDATE,CANCELRATE,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
        EXCHANGERATE,DEALREMARKS,Userreference,
        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)BussinessUnit,
        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmdate AS AsonDate,
        userId,EXPIRYDATE,DeltaValue,
        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,
        round(a.PROFITLOSS/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2) PConversionAmount,
        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,CCONFIRMDATE CConfirmDate,
        CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
        CENTERDBY Center,ENTERDBY EnterdBy,
        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
        CPREMIUMAMOUNT CPremiumAmount,
        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
        case when recorder in(1,2,3) then  round(FRWMTM/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2)else OPTVPLUSD end MTMUSDAmount,
        CANCELPNLSPOT SwareRate,
        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
        PRESENTVALUEINR,PRESENTVALUEUSD,
        case when a.recorder in(1,2,3) then
        case when deal_type = 33300101  then
          (Case When buysellcode=25300001 Then 'Imports Trading' 
          else 'Exports Trading' end)
        else  
        case when TransactionType in(25200003) then
          (Case When buysellcode=25300001 Then 'Par Forwards-Import' 
          else 'Par Forwards-Export' end)
        else 
          (Case When buysellcode=25300001 Then 'Import' 
          else 'Export' end)
        end end  else 'Options' end ImpExp,
        Pkgreturncursor.Fncgetdescription(Transactiontype,1)Transactiontype,
        buycall,sellcall,sellput,buyput,
        to_char(maturitydate,'MON-yy') MaturityDate,
        CASE WHEN TRANSACTIONTYPE != 25200003 THEN 'Forward Hedges'
              ELSE 'Par Forwards' END Transtype         
      FROM TRSYSTEM983 a
      where ason_date = frmdate
      and processcomplete = 12400002
      AND buysellcode = 25300002
      and a.recorder in(1,2,3);        
  GOTO PROCESS_END;
END IF;  


if varreportid='DAILYIMPEXPOSUREMANAGEMENT' then
  DELETE FROM TRSYSTEM983;COMMIT;
  Query_str:= fncProductPnlPopulate(frmDate,varUserID); 
  open gencursor for
      SELECT 'Forward Hedges' Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(maturitydate,'MON-yy') MaturityDate,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        round(sum(outstandingamount * exchangerate)/sum(decode(outstandingamount,0,1,outstandingamount)),6) FwdRate,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'Import' ImpExp,       
        pkgreturncursor.fncgetdescription(currencycode,2) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,2) BussinessUnit,
        DEAL_TYPE Backupdeal,
        frmdate FromDate,
        to_char(maturitydate,'YYYYMM')MonthOrder,
        pkgreturncursor.fncgetdescription(TRADER,2)PortFolio,
        Round(sum((outstandingamount/1000000) * exchangerate),2) AmountInr
      from trsystem983 where processcomplete = 12400002
      AND RECORDER in(2) ----Forward 
      AND buysellcode = 25300001 ---Buy details
      group by CompanyCode,to_char(maturitydate,'MON-yy'),to_char(maturitydate,'YYYYMM'),buysellcode,
               currencycode,forcurrency,DEAL_TYPE,TRADER
      UNION ALL
      SELECT 'Option Hedges' Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(expirydate,'MON-yy') MaturityDate,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        round(sum(outstandingamount * BUYCALL)/sum(decode(outstandingamount,0,1,outstandingamount)),6) FwdRate,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'Import' ImpExp,       
        pkgreturncursor.fncgetdescription(currencycode,2) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,2) BussinessUnit,
        DEAL_TYPE Backupdeal,
        frmdate FromDate,
        to_char(expirydate,'YYYYMM')MonthOrder,
        pkgreturncursor.fncgetdescription(TRADER,2)PortFolio,
        Round(sum((outstandingamount/1000000) * BUYCALL),2) AmountInr
      from trsystem983 where processcomplete = 12400002
      AND RECORDER in(4,5) ----Option
      AND DEAL_TYPE NOT IN(33300004) --Client not considered Capex related entries in this report
      group by CompanyCode,to_char(expirydate,'MON-yy'),to_char(expirydate,'YYYYMM'),buysellcode,
               currencycode,forcurrency,DEAL_TYPE,TRADER   
      UNION ALL----Including Exposure
      SELECT 'Exposure' Transtype,
        pkgreturncursor.fncgetdescription(posn_company_code,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(posn_due_date,'MON-yy') MaturityDate,
        abs(Round(sum(posn_transaction_amount/1000000),2))BaseAmount,
        abs(Round(SUM(posn_transaction_amount * POSN_FCY_RATE)/SUM(posn_transaction_amount),6))FwdRate,
        (pkgreturncursor.fncgetdescription(posn_currency_code,2) || '/'||
        pkgreturncursor.fncgetdescription(posn_for_currency,2)) CurrencyPair,
        'Import' ImpExp,       
        (pkgreturncursor.fncgetdescription(posn_currency_code,2) || '/'||
        pkgreturncursor.fncgetdescription(posn_for_currency,2))BaseCurrency,
        pkgreturncursor.fncgetdescription(posn_product_code,2) BussinessUnit,
        posn_product_code Backupdeal,
        frmdate FromDate,
        to_char(posn_due_date,'YYYYMM')MonthOrder ,
        pkgreturncursor.fncgetdescription(posn_subproduct_code,2)PortFolio,
        0 AmountInr
      FROM trsystem997
      WHERE posn_account_code BETWEEN 25900050 AND 25900100
      and posn_account_code not in (25900077)
      AND posn_reference_number NOT IN
        (SELECT deal_deal_number FROM trtran001)
      AND posn_reference_number NOT IN
        (SELECT copt_deal_number FROM trtran071)
      AND posn_reference_number NOT IN
        (SELECT cfut_deal_number FROM trtran061)
        group by posn_company_code,to_char(posn_due_date,'MON-yy'),
        to_char(posn_due_date,'YYYYMM'),posn_currency_code,posn_for_currency,posn_product_code,posn_subproduct_code; 
     open nextCursor for   
      SELECT 
        a.DESCRIPTION Description, a.Trader Trader,
        case when a.recorder in(1,2,3) then 1 else 2 end recorder,
        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
        a.PROFITLOSS Closed,
        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
        a.CANCELAMOUNT ClosedAmount,dealnumber,EXECUTEDATE,MATURITYDATE SettlementDate,CANCELDATE,CANCELRATE,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
        EXCHANGERATE,DEALREMARKS,Userreference,
        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)BussinessUnit,
        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmdate AS AsonDate,
        userId,EXPIRYDATE,DeltaValue,
        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,
        round(a.PROFITLOSS/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2) PConversionAmount,
        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,CCONFIRMDATE CConfirmDate,
        CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
        CENTERDBY Center,ENTERDBY EnterdBy,
        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
        CPREMIUMAMOUNT CPremiumAmount,
        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
        case when recorder in(1,2,3) then  round(FRWMTM/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2)else OPTVPLUSD end MTMUSDAmount,
        CANCELPNLSPOT SwareRate,
        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
        PRESENTVALUEINR,PRESENTVALUEUSD,
        case when a.recorder in(1,2,3) then
        case when deal_type = 33300101  then
          (Case When buysellcode=25300001 Then 'Imports Trading' 
          else 'Exports Trading' end)
        else  
        case when TransactionType in(25200003) then
          (Case When buysellcode=25300001 Then 'Par Forwards-Import' 
          else 'Par Forwards-Export' end)
        else 
          (Case When buysellcode=25300001 Then 'Import' 
          else 'Export' end)
        end end  else 'Options' end ImpExp,
        Pkgreturncursor.Fncgetdescription(Transactiontype,1)Transactiontype,
        buycall,sellcall,sellput,buyput,
        to_char(maturitydate,'MON-yy') MaturityDate,
        CASE WHEN recorder in(1,2,3) THEN 'Forward Hedges'
               WHEN recorder in(4,5,6) then 'Option Hedges' END Transtype         
      FROM TRSYSTEM983 a
      where ason_date = frmdate
      and processcomplete = 12400002
      AND DEAL_TYPE NOT IN(33300004)
      AND buysellcode = 25300001
      and a.recorder in(1,2,3,4,5,6)
      UNION ALL
      SELECT 
        null Description,0 Trader, 0 recorder,
        Pkgreturncursor.Fncgetdescription(POSN_SUBPRODUCT_CODE,1)Product,
        0 Closed,0 MTMAmount,0 ClosedAmount,
        POSN_REFERENCE_NUMBER dealnumber,
        POSN_REFERENCE_DATE EXECUTEDATE,
        POSN_DUE_DATE SettlementDate,null,0,
        (pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) || '/'||
        pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2)) CurrencyPair,
        Pkgreturncursor.Fncgetdescription(POSN_COUNTER_PARTY,2)CounterParty,
        POSN_FCY_RATE,null DEALREMARKS,null Userreference,null BuySell,
        Pkgreturncursor.Fncgetdescription(POSN_PRODUCT_CODE,1)BussinessUnit,
        0 SPOTRATE,0 FORWARDRATE,0 MARGINRATE,12400002 ProcessComplete,frmdate AS AsonDate,
        null userId,POSN_DUE_DATE EXPIRYDATE,0 DeltaValue,null OPTIONTYPE,0 mtmrate,
        ABS(POSN_TRANSACTION_AMOUNT) BaseAmount,ABS(POSN_TRANSACTION_AMOUNT) Outstanding,
        null Exchangename,0 CancelSpot,0 CForward,0 CMargin,0 PConvestionRate,
        0 PConversionAmount,0 EDCharge,null CashFlowDate,null CConfirmDate,
        null CDealerName,null CCounterDealer,'Confirmed'Cststus,
        null Center,null EnterdBy,'Confirmed' ststus,
        pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) Company,
        Pkgreturncursor.Fncgetdescription(POSN_LOCATION_CODE,2)Location,
        null ConfirmDate,null DealerName,null CounterDealer,
        null PremiumStatus,0 PremiumAmount,null PValueDate,null CpremiumStatus,
        0 CPremiumAmount,null EXCERSISETYPE,0 MTMUSDAmount, 0 SwareRate,0 PremiumUSD,
        0 PRESENTVALUEINR, 0 PRESENTVALUEUSD, null ImpExp,null Transactiontype,
        0 buycall,0 sellcall,0 sellput,0 buyput,
        to_char(POSN_DUE_DATE,'MON-yy') MaturityDate,
        'Exposure' Transtype         
      FROM trsystem997
      WHERE posn_account_code BETWEEN 25900050 AND 25900100
      and posn_account_code not in (25900077)
      AND posn_reference_number NOT IN
        (SELECT deal_deal_number FROM trtran001)
      AND posn_reference_number NOT IN
        (SELECT copt_deal_number FROM trtran071)
      AND posn_reference_number NOT IN
        (SELECT cfut_deal_number FROM trtran061);      
  GOTO PROCESS_END;
END IF; 
  if varreportid = 'OPTIONPERFORMANCE' then
    numRecords:=2;
    DELETE FROM TRSYSTEM983;COMMIT;
    Query_str:= fncProductPnlPopulate(frmDate,varUserID); 
    open gencursor for
      SELECT 'MTM on O/s  options' Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(EXPIRYDATE,'MON-yy') MaturityDate,
        NULL Buysell,
        Round(sum(outstandingamount/1000000),2)BaseAmount,
        round(sum(DEALBASEAMOUNT * BUYCALL)/sum(DEALBASEAMOUNT),6) SpotRate,
        round(sum(DEALBASEAMOUNT * SELLCALL)/sum(DEALBASEAMOUNT),6) FwdRate,
        Round(sum(PREMIUMAMOUNT)/10000000,2)ProfitLoss,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'Options' ImpExp,       
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,1) BussinessUnit,
        round(sum(DEALBASEAMOUNT * SELLPUT)/sum(DEALBASEAMOUNT),6) SellPut,
        0 Backupdeal,
        ROUND((SELECT sum(OPTV_PL_CCY2)
                FROM TRTRAN074A
              WHERE to_date(OPTV_ENTRY_DATE)         = to_date(frmdate)
              AND TO_CHAR(OPTV_EXPIRY_DATE,'YYYYMM') = TO_CHAR(EXPIRYDATE,'YYYYMM'))/10000000,2)MTMPanl,        
        --ROUND(SUM(fncgetUploadPrimiumValue(NULL,frmDate,5,to_char(EXPIRYDATE,'YYYYMM')))/10000000,2)MTMPanl,
        --Round(sum(OPTVPLINR)/10000000,2)MTMPanl,
        SUM(ROUND(DAYONEFRWD/10000000,2)) GainCompare,
        frmdate FromDate,
        to_char(EXPIRYDATE,'YYYYMM')MonthOrder,
        to_char(executedate,'MON-yy') CancelMonth,
        to_char(executedate,'YYYYMM') CancelMonthOrder,
        pkgreturncursor.fncgetdescription(excersisetype,2)excersisetype,
        pkgreturncursor.fncgetdescription(optiontype,2)optiontype,
        excersisetype excersisetypeCode,optiontype OptionTypeCode,
        fncGetQuater(executedate) ||'-'|| FNCGETFINANCIALYEAR(executedate,executedate,1) Quarter,
        0 RBIRefRate, 0 PREMIUMRATE ,0 CPREMIUMRATE,
        Round(sum(OPTVPLINR)/10000000,2)GainLoss,
        0 as settlementRate,
        0 as netPaymentRate,
        0 as LastMTM,
        frmDate FromDate
      from trsystem983 where processcomplete = 12400002
      AND RECORDER in(4,5)--Option including
      AND ason_date = frmdate
      group by CompanyCode,to_char(EXPIRYDATE,'MON-yy'),to_char(EXPIRYDATE,'YYYYMM'),currencycode,forcurrency,DEAL_TYPE,
      excersisetype,optiontype,fncGetQuater(executedate),FNCGETFINANCIALYEAR(executedate,executedate,1),
      to_char(executedate,'MON-yy'),to_char(executedate,'YYYYMM')
      UNION ALL
      SELECT 'Gain/(Loss) on options ' Transtype,  
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        to_char(EXPIRYDATE,'MON-yy') MaturityDate,
        NULL Buysell,
        Round(sum(CANCELAMOUNT/1000000),2)BaseAmount,
        round(sum(CANCELAMOUNT * BUYCALL)/sum(CANCELAMOUNT),6) SpotRate,
        round(sum(CANCELAMOUNT * SELLCALL)/sum(CANCELAMOUNT),6) FwdRate,
        Round(sum(PROFITLOSS)/10000000,2)ProfitLoss,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        'OptionsCancel' ImpExp,       
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) BaseCurrency,
        pkgreturncursor.fncgetdescription(DEAL_TYPE,1) BussinessUnit,
        round(sum(CANCELAMOUNT * SELLPUT)/sum(CANCELAMOUNT),6) SellPut,
        0 Backupdeal,
        Round(sum(OPTVPLINR)/10000000,2)MTMPanl,
        SUM((PKGFOREXPROCESS.fncgetrate(30400004,30400003,frmdate,0,0,NULL,0) - BUYCALL) * CANCELAMOUNT)  GainCompare,
        frmdate FromDate,
        to_char(EXPIRYDATE,'YYYYMM')MonthOrder,
        to_char(CANCELDATE,'MON-yy') CancelMonth,
        to_char(CANCELDATE,'YYYYMM') CancelMonthOrder,
        pkgreturncursor.fncgetdescription(excersisetype,2),
        pkgreturncursor.fncgetdescription(optiontype,2),
        excersisetype excersisetypeCode,optiontype OptionTypeCode,
        fncGetQuater(CANCELDATE) ||'-'|| FNCGETFINANCIALYEAR(CANCELDATE,CANCELDATE,1) Quarter,
        round(sum(CANCELAMOUNT * RBIREFRATE)/sum(CANCELAMOUNT),6)  RBIRefRate,
        0 PREMIUMRATE,
        round(sum(CANCELAMOUNT * CPREMIUMRATE)/sum(CANCELAMOUNT),6) CPREMIUMRATE,
        Round(sum(PROFITLOSS)/10000000,2)GainLoss,
--        round((round(sum(CANCELAMOUNT * CANCELRATE)/sum(CANCELAMOUNT),6) - round(sum(CANCELAMOUNT * SELLPUT)/sum(CANCELAMOUNT),6))/sum(CANCELAMOUNT)/10000000,2)GainLoss,
        round(sum(CANCELAMOUNT * CANCELRATE)/sum(CANCELAMOUNT),6)  as settlementRate,
        round(sum(CANCELAMOUNT * SELLPUT)/sum(CANCELAMOUNT),6) as netPaymentRate,
        0 as LastMTM,frmDate FromDate
      from trsystem983 where processcomplete = 12400001
      AND RECORDER in(4,5)--Option including
      AND ason_date = frmdate
      group by CompanyCode,to_char(EXPIRYDATE,'MON-yy'),to_char(EXPIRYDATE,'YYYYMM'),currencycode,forcurrency,DEAL_TYPE,
              to_char(CANCELDATE,'MON-yy'), to_char(CANCELDATE,'YYYYMM'),excersisetype,optiontype,fncGetQuater(CANCELDATE) ,
              FNCGETFINANCIALYEAR(CANCELDATE,CANCELDATE,1)
      order by 18;
   open nextCursor for
      SELECT 
        a.DESCRIPTION Description, a.Trader Trader,
        case when a.recorder in(1,2,3) then 1 else 2 end recorder,
        Pkgreturncursor.Fncgetdescription(a.Trader,1)Product,
        a.PROFITLOSS Closed,
        (CASE WHEN recorder in(1,2,3) THEN a.FRWMTM else a.OPTVPLINR end)MTMAmount,        
        a.CANCELAMOUNT ClosedAmount,dealnumber,EXECUTEDATE,MATURITYDATE SettlementDate,CANCELDATE,CANCELRATE,
        (pkgreturncursor.fncgetdescription(currencycode,2) || '/'||
        pkgreturncursor.fncgetdescription(forcurrency,2)) CurrencyPair,
        Pkgreturncursor.Fncgetdescription(a.CounterParty,2)CounterParty,
        EXCHANGERATE,DEALREMARKS,Userreference,
        Pkgreturncursor.Fncgetdescription(a.BUYSELLCODE,2)BuySell,
        Pkgreturncursor.Fncgetdescription(a.Deal_type,1)BussinessUnit,
        SPOTRATE,FORWARDRATE,MARGINRATE,ProcessComplete,frmdate AS AsonDate,
        userId,EXPIRYDATE,DeltaValue,
        Pkgreturncursor.Fncgetdescription(OPTIONTYPE,1)OPTIONTYPE,
        (CASE WHEN recorder in(1,2,3) THEN mtmrate else round(a.OPTVPLINR/DECODE(NVL(a.OPTVPLUSD,0),0,1,a.OPTVPLUSD),4) end)mtmrate,
        A.DEALBASEAMOUNT BaseAmount,ABS(a.OUTSTANDINGAMOUNT) Outstanding,
        Pkgreturncursor.Fncgetdescription(a.EXCHANGECODE,2)Exchangename,
        CANCELSPOT CancelSpot,CANCELFORWARD CForward,CANCELMARGIN CMargin,
        case when PROFITLOSS != 0 then CANCELPNLSPOT else 0 end PConvestionRate,
        round(a.PROFITLOSS/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),2) PConversionAmount,
        CEDCCHARGE EDCharge,CCASHFLOWDATE CashFlowDate,CCONFIRMDATE CConfirmDate,
        CDEALERNAME CDealerName,CCOUNTERDEALER CCounterDealer,
        DECODE (CRECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')Cststus,
        CENTERDBY Center,ENTERDBY EnterdBy,
        DECODE (RECORDSTATUS,10200001,'unconfirmed',10200003,'Confirmed',10200002,'First Confi',10200004, 'Edited')ststus,
        pkgreturncursor.fncgetdescription(CompanyCode,2) Company,
        Pkgreturncursor.Fncgetdescription(LOCATIONCODE,2)Location,
        CONFIRMDATE ConfirmDate,DEALERNMAE DealerName,COUNTERDEALER CounterDealer,
        Pkgreturncursor.Fncgetdescription(PREMIUMSTATUS,1) PremiumStatus,
        PREMIUMAMOUNT PremiumAmount,PREMIUMVALUEDATE PValueDate,
        Pkgreturncursor.Fncgetdescription(CPREMIUMSTATUS,1) CpremiumStatus,
        CPREMIUMAMOUNT CPremiumAmount,
        Pkgreturncursor.Fncgetdescription(EXCERSISETYPE,1)EXCERSISETYPE,
        case when recorder in(1,2,3) then  round(FRWMTM/CANCELPNLSPOT,2)else OPTVPLUSD end MTMUSDAmount,
        CANCELPNLSPOT SwareRate,
        Round(PREMIUMAMOUNT/decode(CANCELPNLSPOT,0,1,CANCELPNLSPOT),4)PremiumUSD,
        PRESENTVALUEINR,PRESENTVALUEUSD,
        case when processcomplete = 12400001 then
        'OptionsCancel'
        else 'Options' end ImpExp,
        Pkgreturncursor.Fncgetdescription(Transactiontype,1)Transactiontype,
        buycall,sellcall,sellput,buyput,
        to_char(EXPIRYDATE,'MON-yy') MaturityDate
      FROM TRSYSTEM983 a
      where ason_date = frmdate
      --and processcomplete = 12400002
      and a.recorder in(4,5,6);      
    GOTO PROCESS_END;
  END IF;
  if varreportid='FOREIGNCURRENCYLOANREPAYMENT' then
 
    open gencursor for
      SELECT pkgreturncursor.fncgetdescription(TLON_LOCAL_BANK,2)Bank,
        pkgreturncursor.fncgetdescription(TLON_CURRENCY_CODE,2) Currency, 
        to_char(REPS_INSTALLMENT_DATE,'MON-YY') DueDate,
        ROUND(SUM(REPS_PRINCIPAL_AMOUNT)/10000000,2) Amount,
        to_char(REPS_INSTALLMENT_DATE,'YYYYMM')MonthOrder,
        1 reportorder,frmDate frmDate,null monthorder1,null Year1,null Qurter
      FROM TRTRAN081,TRTRAN081A 
      WHERE TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
      AND REPS_INSTALLMENT_DATE >= frmDate
      AND REPS_RECORD_TYPE = 1
      AND REPS_RECORD_STATUS NOT IN(10200005,10200006)
      AND TLON_RECORD_STATUS NOT IN(10200005,10200006)
      GROUP BY TLON_LOCAL_BANK,TLON_CURRENCY_CODE, to_char(REPS_INSTALLMENT_DATE,'MON-YY'),
              to_char(REPS_INSTALLMENT_DATE,'YYYYMM')
      UNION ALL
      SELECT pkgreturncursor.fncgetdescription(TLON_LOCAL_BANK,2)Bank,
          pkgreturncursor.fncgetdescription(TLON_CURRENCY_CODE,2) Currency, 
          CASE 
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 4  AND 6  THEN 'Q1'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 7  AND 9  THEN 'Q2'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 10  AND 12  THEN 'Q3'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 1 AND 3 THEN 'Q4'
          END,
          ROUND(SUM(REPS_PRINCIPAL_AMOUNT)/10000000,2) Amount,
          CASE 
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 4  AND 6  THEN '1'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 7  AND 9  THEN '2'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 10  AND 12  THEN '3'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 1 AND 3 THEN '4'
          END,
          2 reportorder,frmDate frmDate,to_char(REPS_INSTALLMENT_DATE,'YYYY')monthorder1,
          to_char(REPS_INSTALLMENT_DATE,'YYYY')Year1,
          CASE 
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 4  AND 6  THEN 'Q1'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 7  AND 9  THEN 'Q2'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 10  AND 12  THEN 'Q3'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 1 AND 3 THEN 'Q4'
          END Qurter        
      FROM TRTRAN081,TRTRAN081A 
      WHERE TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
      AND REPS_INSTALLMENT_DATE >= frmDate
      AND REPS_RECORD_TYPE = 1
      AND REPS_RECORD_STATUS NOT IN(10200005,10200006)
      AND TLON_RECORD_STATUS NOT IN(10200005,10200006)
      GROUP BY TLON_LOCAL_BANK,TLON_CURRENCY_CODE,to_char(REPS_INSTALLMENT_DATE,'YYYY'),to_char(REPS_INSTALLMENT_DATE,'YYYY'), 
              CASE 
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 4  AND 6  THEN 'Q1'
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 7  AND 9  THEN 'Q2'
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 10  AND 12  THEN 'Q3'
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 1 AND 3 THEN 'Q4'
              END,
              CASE 
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 4  AND 6  THEN '1'
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 7  AND 9  THEN '2'
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 10  AND 12  THEN '3'
                WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 1 AND 3 THEN '4'
              END;
   open nextCursor for              
      SELECT pkgreturncursor.fncgetdescription(TLON_LOCAL_BANK,2)Bank,
        pkgreturncursor.fncgetdescription(TLON_CURRENCY_CODE,2) Currency, 
        to_char(REPS_INSTALLMENT_DATE,'MON-YY') DueDate,
        REPS_PRINCIPAL_AMOUNT Amount,
        REPS_INSTALLMENT_DATE InstallmentDate,
        to_char(REPS_INSTALLMENT_DATE,'YYYYMM')MonthOrder,
        1 reportorder,frmDate frmDate,
        TLON_LOAN_NUMBER LoanNumber,
        TLON_DUE_DATE MaturityDate,
        TLON_INTEREST_RATE InterestRate,
        TLON_REFERENCE_DATE ReferenceDate,
        TLON_SANCTIONED_FCY SanctionedFcy,
        to_char(REPS_INSTALLMENT_DATE,'YYYY')Year1,
          CASE 
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 4  AND 6  THEN 'Q1'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 7  AND 9  THEN 'Q2'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 10  AND 12  THEN 'Q3'
            WHEN to_number(to_char(REPS_INSTALLMENT_DATE,'mm')) BETWEEN 1 AND 3 THEN 'Q4'
          END Qurter        
      FROM TRTRAN081,TRTRAN081A 
      WHERE TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
      AND REPS_INSTALLMENT_DATE >= frmDate
      AND REPS_RECORD_TYPE = 1
      AND REPS_RECORD_STATUS NOT IN(10200005,10200006)
      AND TLON_RECORD_STATUS NOT IN(10200005,10200006) order by REPS_INSTALLMENT_DATE;
    GOTO PROCESS_END;
  END IF;
  
  if varreportid='HEDGECOSTCONSOLIDATE' then
    prcHedgingCost(frmdate,varUserID);
    open gencursor for  
      SELECT hgct_main_description MainDescription,
        hgct_sub_description SubDescription,
        hgct_sub_description1 Subsubdescription,
        HGTC_INSTRUMENT_DESCRIPTION InstrumentDescription,
        Round(SUM(hgtc_amount_fcy/1000000),2) AmountFcy,
        Round(SUM(HGTC_AMOUNT_INR/10000000),2) AmountInr,
        HGTC_PREMIUM Rate,
        HGCT_MAIN_ORDER MainOrder,
        hgtc_instrument_order InstrumentOrder,
        hgct_sub_order1 Suborder,
        frmdate FromDate,
        pkgreturnreport.getCompanyName(varUserID)CompanyName
      FROM TRSYSTEM983A_HEDGECOST WHERE HGTC_INSTRUMENT_DESCRIPTION NOT IN('ForwardMTM')
      AND HGCT_ASON_MONTH = TO_CHAR(frmdate,'MON-YY')
      GROUP BY hgct_main_description, hgct_sub_description, hgct_sub_description1,
        HGCT_MAIN_ORDER,hgtc_instrument_order,hgct_sub_order1,HGTC_INSTRUMENT_DESCRIPTION,HGTC_PREMIUM
      ORDER BY HGCT_MAIN_ORDER,hgtc_instrument_order,hgct_sub_order1;  
    GOTO PROCESS_END;
  END IF; 

  if varreportid='HEDGENOHEDGE' then
    prcHedgingCost(frmdate,varUserID);
    if (to_char(frmDate,'MM') <=4) then
      tempDate:= '01-apr-' || to_char(to_number(to_char(frmDate,'YYYY'))-1);
      dattemp1:= '31-MAR-' ||to_char(frmDate,'YYYY');
      temp:= 'FY'|| to_char(to_number(to_char(frmDate,'YY'))-1) || '-' || to_char(frmDate,'YY');
    else
      tempDate:= '01-apr-' || to_char(frmDate,'YYYY');
      dattemp1:= '31-MAR-' || to_char(to_number(to_char(frmDate,'YYYY'))+1);
      temp:= 'FY'|| to_char(frmDate,'YY') || '-' || to_char(to_number(to_char(frmDate,'YY'))+1);
    end if;    
    open gencursor for   
      select round(sum(hgtc_amount_inr/10000000),2)HedingCost,
      hgct_ason_month Month1,
      round(B.Ralisation/10000000,2)Ralisation,
      ROUND(D.ExportMTM/10000000,2) ExportMTM,ROUND(C.NoHedge/10000000,2)NoHedge,frmdate FromDate,
      pkgreturnreport.getCompanyName(varUserID)CompanyName,
      case when substr(hgct_ason_month,1,3) in('APR','MAY','JUN') THEN 'Q1 - '||HGCT_FINACIAL_YEAR
           when substr(hgct_ason_month,1,3) in('JUL','AUG','SEP') THEN 'Q2 - '||HGCT_FINACIAL_YEAR
           when substr(hgct_ason_month,1,3) in('OCT','NOV','DEC') THEN 'Q3 - '||HGCT_FINACIAL_YEAR
           when substr(hgct_ason_month,1,3) in('JAN','FEB','MAR') THEN 'Q4 - '||HGCT_FINACIAL_YEAR  END QtrDescription,
           HGCT_MONTH_ORDER MonthOrder
      from trsystem983A_hedgecost
      left outer join
           (SELECT TO_CHAR(CDEL_CANCEL_DATE,'MON-YY') MaturityDate,
                  sum(CDEL_CANCEL_AMOUNT *(fncgetBLRate(frmDate,trad_trade_currency) - CDEL_CANCEL_RATE))Ralisation --Need to change BL date logic
            FROM trtran006
            INNER JOIN trtran002
            ON cdel_trade_reference       = trad_trade_reference
            WHERE cdel_record_Status NOT IN (10200005,10200006)
            AND trad_record_Status NOT   IN (10200005,10200006)
            AND CDEL_CANCEL_DATE BETWEEN tempDate and frmDate
            AND CDEL_CANCEL_DATE <= frmDate
            AND TRAD_IMPORT_EXPORT < 25900050
            GROUP BY TO_CHAR(CDEL_CANCEL_DATE,'MON-YY')) B
            on hgct_ason_month = MaturityDate
       left outer join 
          (SELECT hgct_ason_month MaturityDate,
            SUM(HGTC_AMOUNT_INR) NoHedge
            from trsystem983A_hedgecost WHERE HGCT_PICKKEY_CODE IS NOT NULL
            GROUP BY hgct_ason_month)C
            ON C.MaturityDate = hgct_ason_month
       left outer join 
          (SELECT hgct_ason_month MaturityDate,
            SUM(HGTC_AMOUNT_INR) ExportMTM
            from trsystem983A_hedgecost WHERE HGCT_SUB_DESCRIPTION1 = 'ForwardMTM'
            GROUP BY hgct_ason_month)D
            ON D.MaturityDate = hgct_ason_month
            WHERE HGCT_ASON_MONTH =  TO_CHAR(frmDate,'MON-YY')
            AND HGCT_SUB_DESCRIPTION1 != 'ForwardMTM'
      group by hgct_ason_month,HGCT_FINACIAL_YEAR,HGCT_MONTH_ORDER,B.Ralisation,C.NoHedge,D.ExportMTM;
      GOTO PROCESS_END;
  END IF;   
   if varreportid='HEDGECOSTREPORT' then
    prcHedgingCost(frmdate,varUserID); 
    open gencursor for 
        SELECT  HGTC_INSTRUMENT_DESCRIPTION InstrumentDescription,
        Round(SUM(hgtc_amount_fcy/1000000),2) AmountFcy,
        Round(SUM(HGTC_AMOUNT_INR/10000000),2) AmountInr,
        0 Rate,
        hgtc_instrument_order InstrumentOrder,
        frmdate FromDate,
        pkgreturnreport.getCompanyName(varUserID)CompanyName,
        1 ReportOrder
      FROM TRSYSTEM983A_HEDGECOST
      WHERE HGTC_INSTRUMENT_DESCRIPTION NOT IN('ForwardMTM')
      AND HGCT_ASON_MONTH = TO_CHAR(frmdate,'MON-YY')
      GROUP BY 
        hgtc_instrument_order,
        HGTC_INSTRUMENT_DESCRIPTION
      ORDER BY 
      hgtc_instrument_order; 
    GOTO PROCESS_END;
  END IF; 
if varreportid='SHIPPINGDETAILSREPORT' then
    open gencursor for 
       SELECT pkgreturncursor.fncgetdescription(TRAD_COMPANY_CODE,1)CompanyName,
              pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1)IntrumentType,
              TRAD_REFERENCE_DATE ReferenceDate,
              TRAD_VESSEL_NAME VesselName,
              TRAD_VOYAGE BuyerName,
              TRAD_USER_REFERENCE UserReference,
              TRAD_CONTRACT_NO LCRVCADRVNo,
              TRAD_PRODUCT_QUANTITY ProductQuantity,
              TRAD_PRODUCT_RATE ProductRate,
              pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) Currency,
              TRAD_TRADE_FCY AmountFcy,
              TRAD_TRADE_RATE ExchangeRate,
              TRAD_MATURITY_DATE MaturityDate,
              pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2)Bank,
              TRAD_LC_BENEFICIARY LCNo,
              --TRAD_LC_VALUE LCValue,
              frmdate FromDate,
              todate ToDate,
              --TRAD_TOTAL_LCVALUE FinalLCValue,
              (SELECT PRMC_COMPANY_NAME FROM TRSYSTEM051)Company,
              TRAD_ENTRY_DATE EntryDate ,
              TRAD_BILL_DATE BillDate,
              TRAD_PRODUCT_DESCRIPTION ProductDescription               
        FROM trtran002 WHERE trad_import_export IN (25900053,25900059)
        AND TRAD_RECORD_STATUS NOT IN(10200005,10200006)
        AND trad_entry_date between FrmDate and todate;
     GOTO PROCESS_END;
  END IF;  
  
  
  
  
  
<<Process_End>>

  numError := 0;
  varError := ' : Successful Operation' ;
    begin
        select repm_cursor_count
          into numRecordSets
          from trsystem003
          where repm_report_id=varReportID
          and repm_record_status not in (10200005,10200006);
       exception
        when no_data_found then 
            Numrecordsets:=1;
        end;
--  if  varReportID= 'DEALCONSOLIDATION'   then
--      ErrorData := GConst.fncReturnError('ExtReport',varMessage,2, numError,varOperation,varError);
--    else
    ErrorData := GConst.fncReturnError('ExtReport',varMessage,numRecordSets, numError,varOperation,varError);
--    end if;

  --ErrorData := GConst.fncReturnError('ExtReport',varMessage,1, numError,varOperation,varError);
Exception
when Error_Occurred then
  numRecordSets := 0;
  ErrorData := GConst.fncReturnError('ExtReport',varMessage,0,numError,varOperation,varError);
  insert into errorlog(ERRO_ERROR_NO,ERRO_ERROR_MSG,ERRO_INPUT_XML,
              ERRO_OUTPUT_XML,ERRO_USER_ID,ERRO_EXEC_DATE,ERRO_ERROR_MODULE,ERRO_QUERY,ERRO_QUERY1)
     values  (numError,varError,xmltype(ParamData),
     xmltype(ErrorData),varUserID,to_char(systimestamp, 'DD-MON-YYYY HH24:MI:SS:FF3'),'REPORT ::ID ' || varReportID ,QUERY_STR,QUERY_STR1);

when others then
  numRecordSets := 0;
  varError := sqlerrm || ' - ' || varError;
  ErrorData := GConst.fncReturnError('ExtReport',varMessage,0, numError,varOperation,varError);
END prcExtractReport;
--------------------------------------------------------------------------------

---function to get the server date in reports
Function GetSystemDate return date is
begin
  return trunc(sysdate, 'DD');
end;

-- Function to get the Company Name - 31-jul-08
Function getCompanyName(userid varchar) return varchar2 is
    CompanyName varchar2(50);
    --varTemp
begin
   select distinct pkgreturncursor.fncgetdescription(usco_report_displaycom,1)
     into CompanyName
     from trsystem022a
     where usco_user_id =userid;
   if CompanyName is null then
     select prmc_company_name into CompanyName
      from trsystem051
      where prmc_effective_date = (select max(prmc_effective_date)  from trsystem051);
   end if;
    return CompanyName;
end;

-- Function user to Convert Amount into Rupee
function fncConvRs
             (num in number,
              numofDec in number default 2,
              currency in number default 30400003) return varchar is
  strtemp varchar(25);
  strNoDec varchar(20);
  lo number(5);
  begin
      for lo in 1..numofDec
      loop
        strNoDec:=strNoDec || '9';
      end loop;
      if currency = 30400003 then
        strtemp:=to_char(num,'99G99G99G99G99G99G99G990D'||  strNoDec ,'NLS_NUMERIC_CHARACTERS=.,');
      else
        strtemp := to_char(num,'999G999G999G999G999G990D'||strNoDec,'NLS_NUMERIC_CHARACTERS=.,');
      end if;
  return strtemp;
end fncConvRs;

-- Function used in Stop Loss Report To get the condition according to the Stop Loss Type
Function getCondition(periodType  number,refDate date,flag number)  return date is
 i number;
 startDate date;
 begin
    if flag = 1 then --start date
        case
            when periodType = 21000012  then --monthly
                  startDate := trunc(to_date(refDate,'dd-mon-yy'),'mon') ;
            when  periodType = 21000013  then --quaterly
                  startDate := trunc(to_date(refDate,'dd-mon-yy'),'Q');
            when periodType  = 21000014   then -- yearly
                   startDate := to_date('01-APR-'||(TO_CHAR(TO_DATE(refDate,'DD-MON-RR'),'RR')),'dd-mon-yy') ;
            -- when periodType = 21000024 then --halfyearly
            --       startDate := last_day(add_months( decode( to_char(refDate,'Q'),1,'01-apr-'||to_char(refDate,'yy'),2, '01-apr-'||to_char(refDate,'yy'),'01-oct-'||to_char(refDate,'yy')),6));
          end case;
    elsif flag=2 then --END DATE
       case
            when periodType = 21000012  then --monthly
                  startDate := last_day(to_date(refDate,'dd-mon-yy')) ;
            when  periodType = 21000013  then --quaterly
                  startDate := add_months(trunc(to_date(refDate,'dd-mon-yy'),'Q'),3)-1;
            when periodType  = 21000014   then -- yearly
                  startDate :=  ADD_MONTHS(('31-MAR-'||(TO_CHAR(TO_DATE(refDate,'DD-MON-RR'),'RR'))),12);
            --when periodType = 21000024 then --halfyearly
            --  startDate := ( decode( to_char(refDate,'Q'),1,'01-apr-'||to_char(refDate,'yy'),2, '01-apr-'||to_char(refDate,'yy'),'01-oct-'||to_char(refDate,'yy')));
          end case;
     end if;
  return (startDate);
end;

-- Function to Get the Profit and Loss for Money Module
function  fncgetprofitloss(
     baseamount in  number,
     m2mrate     in number,
     exchangerate in number,
     buysell in number
     )return number is

     numproloss  number;
begin
     select  decode(buysell, 25300001,(m2mrate*baseamount)-(baseamount *exchangerate), (baseamount *exchangerate )-(m2mrate*baseamount)) into numproloss
     from dual ;

     return numproloss;

end fncgetprofitloss ;

-- Function to values for Dealconsolidation Report into DealTemp Table
Function fungetdealconsolidation(frmdate in date) Return number is
        PRAGMA AUTONOMOUS_TRANSACTION;
        numerror        number :=0;
        numdefault      number :=0;
        datedefault     date:=sysdate;
        vardefault      varchar2(10):='';
        finstart        date;
        finend          date;
        PREVFINPROFIT   number(15,2);
 Begin

    --operation := 'getting the financial year starting and Ending from the givendate'
    --if the quarter is jan-mar
    if to_char(frmdate,'Q')=1 then
       select add_months(to_date('01-apr-'||to_char(frmdate,'YY')),-12) ,
              to_date('31-mar-'||to_char(frmdate,'YY'))
              into finstart ,finend
       from dual;
    else
    -- other quarters
       select to_date('01-apr-'||to_char(frmdate,'YY')),
              add_months(to_date('31-mar-'||to_char(frmdate,'YY')),12)
              into finstart ,finend
       from dual;
    end if;

    --operation := 'deleting all the details from the dealtemp table '
    delete from dealtemp; commit;

    -- operation := 'Inserting values'
    -- trade deals and hedge deals cancellation
    Insert Into Dealtemp
                (companycode,DEALNUMBER,EXECUTEDATE, BUYSELL,
                STATUS,BASEAMOUNT,MATURITYDATE,CANCELDATE,
                CBUYSELL,CANCELRATE,
                CANCELAMOUNT,PROFITLOSS,WASHRATE,NETAMOUNT,
                MTMRATE ,BASECURRENCY, OTHERCURRENCY,
                EXCHANGERATE,VALUEDATE,BANK,ENHANCEDDATE,ENHANCEDRATE,ENHANCEDFCY,
                FIRSTQUARTER,SECONDQUARTER,THIRDQUARTER,FOURQUARTER,
                Yesterdayamt,Todayamt,Todayshedgedeal, Statusorder)
         select DEAL_COMPANY_CODE,CDEL_DEAL_NUMBER , DEAL_EXECUTE_DATE , pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),
                --'TC' , deal_base_amount, DEAL_MATURITY_DATE, CDEL_CANCEL_DATE,
                'TC' , pkgreturnreport.getTradeOutstanding(deal_deal_number,frmDate,frmDate,cdel_cancel_date,cdel_reverse_serial), DEAL_MATURITY_DATE, CDEL_CANCEL_DATE,
                decode(pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),'Buy','Sale','Buy'), CDEL_CANCEL_RATE,
                CDEL_CANCEL_AMOUNT , (cdel_profit_loss/Cdel_local_rate) , Cdel_local_rate, cdel_profit_loss,
                numdefault , pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) , pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2),
                deal_exchange_rate, datedefault, vardefault, datedefault, numdefault, numdefault,
                numdefault,numdefault,numdefault,numdefault,
                numdefault,numdefault,numdefault,1
         from   trtran001,trtran006 a
         where  cdel_deal_number  = deal_deal_number
                and cdel_deal_serial  = deal_serial_number
                and CDEL_CANCEL_DATE = frmDate
                and cdel_record_status not in(10200005,10200006)
                --and cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                and cdel_cancel_type!=27000002
                and (cdel_deal_type = 26000002  or
                      a.cdel_deal_number not in
                      ( select nvl(LMOD_REFERENCE_NUMBER,1)
                                                                   from trtran009, trtran006
                                                                  where LMOD_RECORD_STATUS not in (10200005,10200006)
                                                                        and cdel_record_status not in(10200005,10200006)
                                                                        and cdel_deal_number = lmod_reference_number
                                                                        and cdel_cancel_date = lmod_change_date
                                                                        and LMOD_REFERENCE_NUMBER = a.cdel_deal_number
                                                                        and cdel_deal_number =   a.cdel_deal_number
                                                                        and lmod_change_date = a.cdel_cancel_date
                                                                        and lmod_enhanced_fcy = a.cdel_cancel_amount
                       )     )
         order by CDEL_CANCEL_DATE,cdel_deal_number,cdel_reverse_serial;
         commit;
-----trade outstanding
    Insert Into Dealtemp
                (companycode,DEALNUMBER,EXECUTEDATE, BUYSELL,STATUS,
                 BASEAMOUNT,MATURITYDATE,CANCELDATE ,CBUYSELL ,CANCELRATE , CANCELAMOUNT,
                 PROFITLOSS,
                 WASHRATE,
                 NETAMOUNT,
                 MTMRATE ,
                 BASECURRENCY, OTHERCURRENCY,
                 EXCHANGERATE,VALUEDATE,BANK,ENHANCEDDATE,ENHANCEDRATE,ENHANCEDFCY,
                 FIRSTQUARTER,SECONDQUARTER,THIRDQUARTER,FOURQUARTER,
                 YESTERDAYAMT,TODAYAMT,TODAYSHEDGEDEAL, STATUSORDER)
         select  DEAL_COMPANY_CODE,deal_deal_number , deal_execute_date , pkgreturncursor.fncgetdescription(deal_buy_sell,1),'TO',
                 --deal_base_amount , deal_maturity_date,  datedefault, vardefault,   numdefault ,  numdefault,
                 -- CHANGES applied to baseamount,profitloss field ON 09-MAR-09 TO DISPLAY THE ACTUAL OS AMOUNT BY RAMYA
                 pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, frmDate) , deal_maturity_date,  datedefault, vardefault,   numdefault ,  numdefault,
                 pkgreturnreport.fncgetprofitloss((pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, frmDate)), pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,frmDate,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,frmDate,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,DEAL_BUY_SELL),
                 decode(deal_other_currency,30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003, frmDate, deal_buy_sell,0,deal_maturity_date,0)),
                 pkgreturnreport.fncgetprofitloss((pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, frmDate)), pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,frmDate,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,frmDate,deal_maturity_date)),deal_maturity_date),DEAL_EXCHANGE_RATE,DEAL_BUY_SELL) *  decode(deal_other_currency,30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003, frmDate, deal_buy_sell,0,deal_maturity_date,0)),
                 pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,frmDate,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,frmDate,deal_maturity_date)),deal_maturity_date),
                 --, FUNCTION2(deal_execute_date+2,deal_maturity_date,deal_base_currency,deal_other_currency),
                 pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) , pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2),
                 deal_exchange_rate, datedefault, vardefault, datedefault,  numdefault,  numdefault,
                 numdefault,numdefault,numdefault,numdefault,
                 numdefault,numdefault,numdefault,2
         from    trtran001
         where   deal_hedge_trade = 26000002
                 and ((deal_process_complete = 12400001   and deal_complete_date > frmDate) or  deal_process_complete = 12400002)
                 and deal_execute_date <= frmDate
                 and deal_record_status not in(gconst.statusdeleted,gconst.statusinactive)
         order by deal_execute_date;
         commit;
    --- hedge outstanding
        insert into dealtemp
                   (companycode,DEALNUMBER,EXECUTEDATE, BUYSELL,
                    STATUS ,BASEAMOUNT,
                    MATURITYDATE,
                    CANCELDATE ,CBUYSELL ,CANCELRATE,
                    CANCELAMOUNT, PROFITLOSS ,WASHRATE ,NETAMOUNT,MTMRATE,
                    BASECURRENCY, OTHERCURRENCY,
                    EXCHANGERATE,
                    VALUEDATE,BANK,ENHANCEDDATE,ENHANCEDRATE,ENHANCEDFCY,
                    FIRSTQUARTER,SECONDQUARTER,THIRDQUARTER,FOURQUARTER,
                    YESTERDAYAMT,TODAYAMT,TODAYSHEDGEDEAL, STATUSORDER)
            select DEAL_COMPANY_CODE, DEAL_DEAL_NUMBER ,  DEAL_EXECUTE_DATE , pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),
                    'HO',deal_base_amount,
                    PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) ,
                    datedefault,  pkgreturnreport.getRolloverStatus(DEAL_DEAL_NUMBER,frmDate) , numdefault,
                    -- updates by ramya on 16-jun-09 , to display all the hedge deals even it is not linked.
                    --pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,GConst.AMOUNTFCY,frmDate,HEDG_TRADE_REFERENCE),  numdefault,  numdefault,  numdefault,  numdefault,
                    pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate),  numdefault,  numdefault,  numdefault,  numdefault,
                    pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) , pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2),
                    PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2),
                    datedefault  , pkgReturnCursor.fncGetDescription(deal_counter_Party,2),  datedefault,  numdefault, numdefault,
                    numdefault,numdefault,numdefault,numdefault,
                    numdefault,numdefault,numdefault,6
               FROM TRTRAN001 --,TRTRAN004
              Where Deal_Hedge_Trade = 26000001
                --and HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER
               -- and hedg_deal_serial = deal_serial_number
                and ((deal_process_complete = 12400001 and deal_complete_date > frmDate)
                       or
                       deal_process_complete = 12400002)
 -- Changed For Viraj BcZ here we required only That days deals
                and deal_execute_date <= frmDate
               -- and deal_execute_date = frmDate
                and deal_record_status not in(gconst.statusdeleted,gconst.statusinactive)
           order by DEAL_EXECUTE_DATE;
         -- insert into temp values('hedge-os','ss');commit;
         commit;
    --hedgeRollover
    insert into dealtemp
                 (companycode,DEALNUMBER,EXECUTEDATE, BUYSELL,
                 STATUS ,BASEAMOUNT ,MATURITYDATE ,CANCELDATE,
                 CBUYSELL ,
                 Cancelrate , Cancelamount, Profitloss,
                 WASHRATE ,NETAMOUNT,MTMRATE ,
                 Basecurrency, Othercurrency,
                 Exchangerate,Valuedate,Bank,
                 ENHANCEDDATE,ENHANCEDRATE,ENHANCEDFCY,
                 FIRSTQUARTER,SECONDQUARTER,THIRDQUARTER,FOURQUARTER,
                 YESTERDAYAMT,TODAYAMT,TODAYSHEDGEDEAL, STATUSORDER)
         select  DEAL_COMPANY_CODE,deal_deal_number , deal_execute_date , pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),
                 'HR' status, deal_base_amount , deal_maturity_date, datedefault,
                 decode(pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),'Buy','Sale','Buy'),
                 numdefault,  numdefault, round((LMOD_PROFIT_LOSS /(decode(deal_other_currency,30400003,1,lmod_local_rate))),4),
                 LMOD_LOCAL_RATE,LMOD_PROFIT_LOSS, numdefault,
                 pkgReturnCursor.fncGetDescription(deal_base_currency,2) , pkgReturnCursor.fncGetDescription(deal_other_currency,2),
                 deal_exchange_rate ,  deal_maturity_date , pkgReturnCursor.fncGetDescription(deal_counter_Party,2),
                 LMOD_MATURITY_DATE ,lmod_enhanced_rate, lmod_enhanced_fcy ,
                 numdefault,numdefault,numdefault,numdefault,
                 numdefault,numdefault,numdefault,5
         from    trtran001,trtran009
         where   lmod_reference_number = deal_deal_number
                 and lmod_reference_serial = deal_serial_number
                 and deal_hedge_trade = 26000001
                 and LMOD_CHANGE_DATE = frmDate
                 --and   lmod_reference_number not in(select cdel_deal_number from trtran006)
                 and deal_record_status not in(gconst.statusdeleted,gconst.statusinactive)
         order by LMOD_MATURITY_DATE ;
         commit;

    --hedgeDeliverd
    insert into dealtemp
                (companycode,DEALNUMBER,EXECUTEDATE, BUYSELL,
                STATUS ,BASEAMOUNT ,MATURITYDATE ,CANCELDATE,
                CBUYSELL ,
                CANCELRATE , CANCELAMOUNT, PROFITLOSS,
                WASHRATE ,NETAMOUNT,MTMRATE ,
                BASECURRENCY, OTHERCURRENCY,
                EXCHANGERATE,VALUEDATE,BANK,
                ENHANCEDDATE,ENHANCEDRATE,ENHANCEDFCY,
                FIRSTQUARTER,SECONDQUARTER,THIRDQUARTER,FOURQUARTER,
                Yesterdayamt,Todayamt,Todayshedgedeal, Statusorder)
         select DEAL_COMPANY_CODE,deal_deal_number ,   deal_execute_date,  pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),
                'HD' status, deal_base_amount ,  deal_maturity_date,CDEL_CANCEL_DATE,
                decode(pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1),'Buy','Sale','Buy'),
                CDEL_CANCEL_RATE,  CDEL_CANCEL_AMOUNT, 0,
                --round((CDEL_PROFIT_LOSS/(decode(deal_other_currency,30400003,1,CDEL_LOCAL_RATE))),4),
                CDEL_LOCAL_RATE,   CDEL_PROFIT_LOSS, numdefault ,
                pkgReturnCursor.fncGetDescription(deal_base_currency,2) , pkgReturnCursor.fncGetDescription(deal_other_currency,2),
                deal_exchange_rate , nvl((SELECT max(brel_reference_date) --Updated by Nataraj on 19-oct-10
                                          FROM   trtran003
                                          WHERE  brel_trade_reference =
                                                              (SELECT trad_trade_reference
                                                               FROM   trtran002
                                                               WHERE  trad_reverse_serial = cdel_reverse_serial
                                                                      AND trad_reverse_reference = cdel_trade_reference)
                                                                      and brel_record_status not in(10200005,10200006) ),cdel_cancel_date),
                pkgReturnCursor.fncGetDescription(deal_counter_Party,2),
                datedefault ,numdefault ,(pkgreturnreport.getTradeOutstanding(deal_deal_number,frmDate,frmDate,cdel_cancel_date,cdel_reverse_serial) - cdel_cancel_amount),
                numdefault,numdefault,numdefault,numdefault,
                numdefault,numdefault,numdefault,7
         from   trtran001,trtran006
         where  cdel_deal_number = deal_deal_number
                and cdel_deal_serial = deal_serial_number
                and cdel_cancel_type=27000002
                and cdel_record_status not in(10200005,10200006)
                and CDEL_CANCEL_DATE = frmDate
         order by CDEL_CANCEL_DATE;
         Commit;
    --hedge completes here
    --summary
    insert into  dealtemp
                 (DEALNUMBER,EXECUTEDATE, BUYSELL ,STATUS ,BASEAMOUNT ,MATURITYDATE,
                 CANCELDATE ,CBUYSELL ,CANCELRATE , CANCELAMOUNT, PROFITLOSS ,WASHRATE,
                 NETAMOUNT,MTMRATE  ,BASECURRENCY, OTHERCURRENCY,
                 EXCHANGERATE,VALUEDATE,BANK,ENHANCEDDATE,ENHANCEDRATE,ENHANCEDFCY,
                 FIRSTQUARTER,SECONDQUARTER,THIRDQUARTER,FOURQUARTER,
                 YESTERDAYAMT,TODAYAMT,TODAYSHEDGEDEAL, STATUSORDER)
         select  vardefault,    datedefault,   vardefault ,   'TS',   numdefault, datedefault,
                 datedefault,  vardefault,   numdefault,   numdefault,  numdefault,  numdefault,
                 numdefault   , numdefault, numdefault, numdefault,
                 numdefault,   datedefault,  vardefault,  datedefault, numdefault,  numdefault,
                 round(sum(first),2)  ,  round(sum(second),2) , round(sum(third),2) , round(sum(four),2),
                 round(sum(yesterday),2) , round(sum(today),2), round(sum(todayshedgedeal),2),3
         from
                 (select  sum(first) first,sum(second) second ,sum(third) third,sum(four) four, numdefault  yesterday ,numdefault today,
                          numdefault  todayshedgedeal
                  from
                  --- for Quarters Information
                            (select nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),1,CDEL_PROFIT_LOSS)),0) four,
                                    nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),2,CDEL_PROFIT_LOSS)),0) first,
                                    nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),3,CDEL_PROFIT_LOSS)),0) second,
                                    nvl(sum(decode(to_char(CDEL_CANCEL_DATE ,'Q'),4,CDEL_PROFIT_LOSS)),0) third
                             from   trtran006
                             where  cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                                    -- and to_char(CDEL_CANCEL_DATE,'Q') < to_char(frmDate,'Q')
                                    --gouri on 040111
                                   --  and to_char(CDEL_CANCEL_DATE,'Q') < decode(to_char(to_date(frmDate),'Q'),'1','5',to_char(to_date(frmDate),'Q'))
                                    and decode(to_char(to_date(CDEL_CANCEL_DATE),'Q'),2,1,3,2,4,3,1,4) < decode(to_char(to_date(frmDate),'Q'),2,1,3,2,4,3,1,4)
                                    and cdel_record_status not in(10200005,10200006)
                                    and cdel_cancel_type!=27000002
                                    and CDEL_CANCEL_DATE between finstart and finend
                             group by to_char(CDEL_CANCEL_DATE ,'Q'))

                             union
                  -- todays tradedeal
                             select numdefault  first,numdefault second, numdefault third, numdefault four,numdefault  yesterday,
                                    nvl(sum(CDEL_PROFIT_LOSS),0) todaystradedeal,
                                    numdefault todayshedgedeal
                             from   trtran006
                             where  CDEL_CANCEL_DATE = frmDate
                                    and cdel_cancel_type!=27000002
                                    and cdel_record_status not in(10200005,10200006)
                                    and cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                             union
                  --- upto today
                             select numdefault  first,numdefault second, numdefault third, numdefault four,nvl(sum( CDEL_PROFIT_LOSS),0) as yesterday, numdefault as  today,
                                    numdefault as todayshedgedeal
                             from   trtran006
                             where  cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                                    and CDEL_CANCEL_DATE >= trunc(frmDate,'Q')
                                    and cdel_cancel_type!=27000002
                                    and cdel_record_status not in(10200005,10200006)
                                    and CDEL_CANCEL_DATE <frmDate);
         commit;
         --for upto prev finyear
         update dealtemp set PREVFINYEAR =0;
         commit;

         select nvl(sum( CDEL_PROFIT_LOSS),0) into PREVFINPROFIT
         from   trtran006
         where  cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                and CDEL_CANCEL_DATE <= finstart-1
                and cdel_cancel_type!=27000002
                and cdel_record_status not in(10200005,10200006);

         update dealtemp set PREVFINYEAR =PREVFINPROFIT
         where status='TS';

         commit;
         return numerror;
-- status order
--========================
-- 1. Trade,Hedge cancellation
-- 2. Trade Outstanding
-- 3. Status (Quaters)
-- 4. Hedge Canellation (not using)
-- 5. Hedge roll Over
-- 6. Hedge Outstanding
-- 7. Hedge Delivered
--==========================
end Fungetdealconsolidation;

-- Function return whether the given deal is RolledOver or Not.
Function getRolloverStatus (dealnumber in varchar2,asonDate date) return varchar2 is
    rolledOverDeal varchar2(25);
    numTemp number(5);
begin

    select referenceno into rolledOverDeal
    from (select rownum rownumber, lmod_reference_number  referenceno
          from trtran009
          where lmod_reference_number in (select HEDG_DEAL_NUMBER
                                          from   trtran004
                                          where  hedg_trade_reference in
                                                    (select HEDG_TRADE_REFERENCE
                                                     from   trtran004,trtran001
                                                     where  hedg_deal_number  = deal_deal_number and
                                                            hedg_deal_serial = deal_serial_number and
                                                            deal_execute_date <= asonDate and
                                                            HEDG_DEAL_NUMBER = dealnumber)
                                          and hedg_deal_number != dealnumber))
    where rownumber =1;

    return 'Yes';
exception
    WHEN NO_DATA_FOUND THEN
    return 'No';
end;

-- Function Which return up to yesterdays outstanding amount for the given date.
function getTradeOutstanding(dealnumber in varchar2,frmDate date,todate date,canceldate date,serialno number) return number is
    osamount number(15,2);
--    updated by ramya on 10-mar-09 condition given to avoid cancelled deals during rollover
begin
--    select (deal_base_amount - (nvl((select sum(cdel_cancel_amount)
--                                     from   trtran006
--                                     where  CDEL_CANCEL_DATE  between frmDate and canceldate
--                                            and cdel_deal_number = dealnumber
--                                            -- and CDEL_REVERSE_SERIAL  < m.cdel_reverse_serial
--                                            and cdel_record_status not in(10200005,10200006)
--                                            and cdel_cancel_type  = 27000001),0))
--                             - (nvl((select sum(cdel_cancel_amount)
--                                     from   trtran006
--                                     where  CDEL_CANCEL_DATE  between frmDate and toDate
--                                            and cdel_deal_number =dealnumber
--                                            and CDEL_REVERSE_SERIAL < serialno
--                                            and cdel_record_status not in(10200005,10200006)
--                                            and cdel_cancel_type  = 27000002),0)))     into osamount
--    from trtran001 a
--    where a.deal_deal_number = dealnumber
--          and a.deal_record_status not in(10200005,10200006) ;

    select (deal_base_amount - (nvl((select sum(cdel_cancel_amount)
                                     from   trtran006
                                     where  CDEL_CANCEL_DATE  <= canceldate
                                            and cdel_deal_number = dealnumber
                                            and CDEL_REVERSE_SERIAL  < serialno
                                            and cdel_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
                                            and cdel_cancel_type  = gconst.DEALCANCEL
                                            and cdel_deal_number not in(
                                                    select LMOD_REFERENCE_NUMBER
                                                    from   trtran009
                                                    where  LMOD_CHANGE_DATE = toDate)),0)

                                )
                              - (nvl((select sum(cdel_cancel_amount)
                                      from   trtran006
                                      where  CDEL_CANCEL_DATE  <= toDate
                                             and cdel_deal_number = dealnumber
                                             and CDEL_REVERSE_SERIAL < serialno
                                             and cdel_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
                                             and cdel_cancel_type  = gconst.DEALDELIVERY),0)))     into osamount
    from trtran001 a
    where a.deal_deal_number = dealnumber
          and a.deal_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED) ;

    return osamount;
end;


--function  fnc_frwcontract
--    (frmDate date,ToDate date) return number
--as
--intRowNum number(5);
--begin
--  intRowNum:=1;
--  delete from trsystem986;
--
--  insert into temp values ('125', 'CALLED'); commit;
--   For frw in
--          (select   DEAL_COMPANY_CODE,DEAL_DEAL_NUMBER,DEAL_COUNTER_PARTY,
--                    deal_execute_date,deal_base_currency,deal_other_currency,
--                    deal_exchange_rate,deal_base_amount,deal_maturity_from,
--                    deal_maturity_date,deal_user_reference
--                    from trtran001
--           where DEAL_RECORD_STATUS not in (10200005,10200006)
--                 -- and deal_execute_date between frmDate and ToDate
--          )
--          Loop
--            insert into temp values ('125', frw.DEAL_DEAL_NUMBER);
--
--             insert into trsystem986
--                    (FRWC_ROW_NUMBER,FRWC_SUB_ROW,
--                     FRWD_DEAL_NUMBER,FRWD_COMPANY_CODE,FRWD_EXECUTE_DATE,
--                     FRWD_COUNTER_PARTY,FRWD_BASE_CURRENCY,FRWD_OTHER_CURRENCY,
--                     FRWD_EXCHANGE_RATE ,FRWD_BASE_AMOUNT,FRWD_MATURITY_FROM,
--                     FRWD_MATURITY_DATE,FRWD_USER_REFERENCE  )
--
--            VALUES (intRowNum,1,FRW.DEAL_DEAL_NUMBER,
--                     FRW.DEAL_COMPANY_CODE,
--                    FRW.deal_execute_date,FRW.DEAL_COUNTER_PARTY,
--                    FRW.deal_base_currency,FRW.deal_other_currency,
--                    FRW.deal_exchange_rate,FRW.deal_base_amount,FRW.deal_maturity_from,
--                    FRW.deal_maturity_date,FRW.deal_user_reference);
--        commit;
--
--         MERGE INTO trsystem986 D
--         USING (select rownum rn, Trad_Reference_Date,trad_buyer_seller,HEDG_TRADE_REFERENCE,
--                 HEDG_HEDGED_FCY,trad_maturity_from,trad_maturity_date,trad_product_code
--        from trtran002,trtran004
--        where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE(+)
--
--        and HEDG_DEAL_NUMBER = frw.DEAL_DEAL_NUMBER) Ord
--        ON (d.FRWC_SUB_ROW=Ord.rn
--            and D.FRWC_ROW_NUMBER=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET
--                 D.FRWO_REFERENCE_DATE = Ord.trad_reference_date,
--                 D.FRWO_BUYER_SELLER  = Ord.TRAD_BUYER_SELLER,
--                 D.FRWO_TRADE_REFERENCE = Ord.HEDG_TRADE_REFERENCE,
--                 D.FRWO_HEDGED_FCY   = Ord.HEDG_HEDGED_FCY,
--                 D.FRWO_TRADMATURITY_FROM = Ord.trad_maturity_from,
--                 D.FRWO_TRADMATURITY_DATE =ord.trad_maturity_date,
--                 D.FRWO_PRODUCT_CODE =ord.trad_product_code ,
--                 D.FRWD_ORDE_EXIST=1
--
--       WHEN NOT MATCHED THEN
--            INSERT (FRWC_ROW_NUMBER,FRWC_SUB_ROW,D.FRWO_REFERENCE_DATE,D.FRWO_BUYER_SELLER,
--                    D.FRWO_TRADE_REFERENCE, D.FRWO_HEDGED_FCY ,D.FRWO_TRADMATURITY_FROM,
--                    D.FRWO_TRADMATURITY_DATE, D.FRWO_PRODUCT_CODE,D.FRWD_DEAL_NUMBER,
--                    D.FRWD_COMPANY_CODE,D.FRWD_EXECUTE_DATE,D.FRWD_COUNTER_PARTY,D.FRWD_ORDE_EXIST)
--
--            VALUES (intRowNum,Ord.rn,trad_reference_date,TRAD_BUYER_SELLER,HEDG_TRADE_REFERENCE,
--                    HEDG_HEDGED_FCY,trad_maturity_from,trad_maturity_date,trad_product_code,
--                    frw.DEAL_DEAL_NUMBER,frw.DEAL_COMPANY_CODE,frw.deal_execute_date,frw.DEAL_COUNTER_PARTY,1);
----
--         -- cancelllation mergre statement
--      MERGE INTO trsystem986 D
--         USING (select rownum rn, CDEL_DEAL_NUMBER,cdel_cancel_date ,cdel_cancel_amount ,cdel_cancel_rate ,
--                cdel_other_amount,cdel_profit_loss
--     from trtran006
--    where CDEL_DEAL_NUMBER = frw.DEAL_DEAL_NUMBER) canl
--        ON (d.FRWC_SUB_ROW=canl.rn
--            and D.FRWC_ROW_NUMBER=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.FRWC_CANCEL_DATE = canl.cdel_cancel_date,
--                       D.FRWC_CANCLE_AMOUNT = canl.cdel_cancel_amount,
--                       D.FRWC_CANCLE_RATE = canl.cdel_cancel_rate,
--                       D.FRWC_PROFIT_LOSS = canl.cdel_profit_loss,
--                       D.FRWC_OTHER_AMOUNT = canl.cdel_other_amount,
--                       D.FRWD_ORDE_EXIST =1
--
--       WHEN NOT MATCHED THEN
--            INSERT (FRWC_ROW_NUMBER,FRWC_SUB_ROW,D.FRWC_CANCEL_DATE, D.FRWC_CANCLE_AMOUNT, D.FRWC_CANCLE_RATE,
--                    D.FRWC_PROFIT_LOSS,D.FRWC_OTHER_AMOUNT,D.FRWD_DEAL_NUMBER,D.FRWD_COMPANY_CODE,D.FRWD_EXECUTE_DATE,
--                    D.FRWD_COUNTER_PARTY, D.FRWD_ORDE_EXIST )
--            VALUES (intRowNum,canl.rn,cdel_cancel_date,cdel_cancel_amount,cdel_cancel_rate,cdel_profit_loss,cdel_other_amount,
--                   frw.DEAL_DEAL_NUMBER,frw.DEAL_COMPANY_CODE,frw.deal_execute_date,frw.DEAL_COUNTER_PARTY,1);
--
--     intRowNum:=intRowNum+1;
--  end loop;
--
--
-- return 0;
--
----exception
----when others then
----  return 1;
--end fnc_frwcontract;
--
--function  fnc_optioncontract
--          (frmDate date,ToDate date) return number
--as
--intRowNum number(5);
--begin
--  intRowNum:=1;
--  delete from trsystem987;
--
--  insert into temp values ('125', 'CALLED'); commit;
--   For cur in
--          (select COPT_DEAL_NUMBER,COPT_COMPANY_CODE,
--                  COPT_EXECUTE_DATE,COPT_COUNTER_PARTY,copt_base_amount,
--                  copt_maturity_date,copt_delivery_date, COPT_PREMIUM_AMOUNT,
--                  COPT_PREMIUM_LOCAL,COPT_USER_REFERENCE,COPT_EXPIRY_DATE
--           from  trtran071
--           where  COPT_RECORD_STATUS not in (10200005,10200006)
--                  and COPT_EXECUTE_DATE between frmDate and ToDate
--                 --and copt_deal_number in('CO/H/SDJL/0317/11-12')
--
--          )
--          Loop
--            insert into temp values ('125', cur. COPT_DEAL_NUMBER);
--
--             insert into trsystem987
--                    (repc_row_number,repc_sub_row,REPD_DEAL_NUMBER,REPD_COMPANY_CODE,REPD_EXECUTE_DATE,
--                     REPD_COUNTER_PARTY,REPD_BASE_AMOUNT,REPD_MATURITY_DATE,
--                     REPD_DELIVERY_DATE,REPD_PREMIUM_AMOUNT,REPD_PREMIUM_LOCAL,
--                     REPD_USER_REFERENCE,REPD_EXPIRY_DATE)
--            VALUES (intRowNum,1,cur.COPT_DEAL_NUMBER,cur.COPT_COMPANY_CODE,
--                    cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.copt_base_amount,
--                    cur.copt_maturity_date,cur.copt_delivery_date,cur.COPT_PREMIUM_AMOUNT,
--                    cur.COPT_PREMIUM_LOCAL,cur.COPT_USER_REFERENCE,cur.COPT_EXPIRY_DATE);
--        commit;
--      --export details
--         MERGE INTO trsystem987 D
--         USING (select rownum rn, trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
--                HEDG_DEAL_NUMBER
--        from  trtran002,trtran004
--        where hedg_trade_reference=trad_trade_reference(+)
--              and HEDG_DEAL_NUMBER = cur.COPT_DEAL_NUMBER
--              and TRAD_IMPORT_EXPORT <= 25300050
--
--              ) exp
--        ON (d.repc_sub_row=exp.rn
--            and D.repc_row_number=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.REPE_REFERENCE_DATE = exp.trad_reference_date,
--                      D.REPE_TRADE_REFERENCE = exp.HEDG_TRADE_REFERENCE,
--                      D.REPE_HEDGED_FCY = exp.HEDG_HEDGED_FCY,
--                      D.REPE_BUYER_SELLER = exp.TRAD_BUYER_SELLER,
--                      D.REPE_MATURITY_FROM = exp.trad_maturity_from,
--                      D.REPE_PRODUCT_CODE = exp.trad_product_code,
--                      D.REPE_IMPORT_EXPORT = exp.TRAD_IMPORT_EXPORT,
--                      D.REPI_ORDER_EXIST=1
--       WHEN NOT MATCHED THEN
--            INSERT (repc_row_number,repc_sub_row,D.REPE_REFERENCE_DATE,
--                    D.REPE_TRADE_REFERENCE,D.REPE_HEDGED_FCY,D.REPE_BUYER_SELLER,
--                    D.REPE_MATURITY_FROM,D.REPE_PRODUCT_CODE,D.REPE_IMPORT_EXPORT,d.REPD_DEAL_NUMBER,
--                    d.REPD_EXECUTE_DATE,d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.REPI_ORDER_EXIST)
--            VALUES (intRowNum,exp.rn,trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                     TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT, cur.COPT_DEAL_NUMBER,
--                     cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.COPT_COMPANY_CODE,1);
--
---- Import details
--      MERGE INTO trsystem987 D
--         USING (select rownum rn, trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
--                HEDG_DEAL_NUMBER
--        from  trtran002,trtran004
--        where hedg_trade_reference=trad_trade_reference(+)
--              and HEDG_DEAL_NUMBER = cur.COPT_DEAL_NUMBER
--             and TRAD_IMPORT_EXPORT > 25300050
--
--              ) imp
--        ON (d.repc_sub_row=imp.rn
--            and D.repc_row_number=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.REPI_REFERENCE_DATE = imp.trad_reference_date,
--                      D.REPI_TRADE_REFERENCE = imp.HEDG_TRADE_REFERENCE,
--                      D.REPI_HEDGED_FCY = imp.HEDG_HEDGED_FCY,
--                      D.REPI_BUYER_SELLER = imp.TRAD_BUYER_SELLER,
--                      D.REPI_MATURITY_FROM = imp.trad_maturity_from,
--                      D.REPI_PRODUCT_CODE = imp.trad_product_code,
--                      D.REPI_IMPORT_EXPORT = imp.TRAD_IMPORT_EXPORT,
--                      D.REPI_ORDER_EXIST=1
--       WHEN NOT MATCHED THEN
--            INSERT (repc_row_number,repc_sub_row,D.REPE_REFERENCE_DATE,D.REPI_TRADE_REFERENCE,
--                    D.REPI_HEDGED_FCY,D.REPI_BUYER_SELLER,D.REPI_MATURITY_FROM,
--                    D.REPI_PRODUCT_CODE, D.REPI_IMPORT_EXPORT,d.REPD_DEAL_NUMBER,
--                    d.REPD_EXECUTE_DATE,d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.REPI_ORDER_EXIST)
--            VALUES (intRowNum,imp.rn,trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                    TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
--                    cur.COPT_DEAL_NUMBER, cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.COPT_COMPANY_CODE,1);
--
--         -- cancelllation mergre statement
--      MERGE INTO trsystem987 D
--         USING (select rownum rn, CORV_DEAL_NUMBER,corv_exercise_date,corv_base_amount,
--                corv_rbi_refrate,corv_profit_loss
--
--     from trtran073
--    where CORV_DEAL_NUMBER = cur.COPT_DEAL_NUMBER) canl
--        ON (d.repc_sub_row=canl.rn
--            and D.repc_row_number=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.REPC_EXERCISE_DATE=canl.corv_exercise_date,
--                       D.REPC_CANCLE_AMOUNT=canl.corv_base_amount,
--                       D.REPC_RBI_REFRATE=canl.corv_rbi_refrate,
--                       D.REPC_PROFIT_LOSS=canl.corv_profit_loss,
--                       D.REPI_ORDER_EXIST=1
--       WHEN NOT MATCHED THEN
--            INSERT (repc_row_number,repc_sub_row,D.REPC_EXERCISE_DATE, D.REPC_CANCLE_AMOUNT,
--                    D.REPC_RBI_REFRATE,D.REPC_PROFIT_LOSS, D.REPD_DEAL_NUMBER, d.REPD_EXECUTE_DATE,
--                    d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.REPI_ORDER_EXIST)
--            VALUES (intRowNum,canl.rn,corv_exercise_date,corv_base_amount,corv_rbi_refrate,
--                    corv_profit_loss, cur.COPT_DEAL_NUMBER, cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,
--                    cur.COPT_COMPANY_CODE,1);
--
--     intRowNum:=intRowNum+1;
--  end loop;
--
--
-- return 0;
--
----exception
----when others then
----  return 1;
--end fnc_optioncontract;

--function to generate option report

function  fnc_optioncontract
          (frmDate date default to_date('01/03/1900', 'dd/mm/yyyy'), ToDate date default sysdate) return number
as
intRowNum number(5);
begin
  intRowNum:=1;
  --delete from trsystem987;

  --insert into temp values ('125', 'CALLED'); commit;
  delete from trsystem987;
            commit;
   For cur in
          (select COPT_DEAL_NUMBER,COPT_COMPANY_CODE,
                  COPT_EXECUTE_DATE,COPT_COUNTER_PARTY,copt_base_amount,
                  copt_maturity_date,copt_delivery_date, COPT_PREMIUM_AMOUNT,
                  COPT_PREMIUM_LOCAL,COPT_USER_REFERENCE,COPT_EXPIRY_DATE
           from  trtran071
           where  COPT_RECORD_STATUS not in (10200005,10200006)
                  and COPT_EXECUTE_DATE between frmDate and ToDate
                  --order by COPT_EXECUTE_DATE
                 --and copt_deal_number in('CO/H/SDJL/0317/11-12')

          )

          Loop
            insert into temp values ('125', cur. COPT_DEAL_NUMBER);

             insert into trsystem987
                    (repc_row_number,repc_sub_row,REPD_DEAL_NUMBER,REPD_COMPANY_CODE,REPD_EXECUTE_DATE,
                     REPD_COUNTER_PARTY,REPD_BASE_AMOUNT,REPD_MATURITY_DATE,
                     REPD_DELIVERY_DATE,REPD_PREMIUM_AMOUNT,REPD_PREMIUM_LOCAL,
                     REPD_USER_REFERENCE,REPD_EXPIRY_DATE)
            VALUES (intRowNum,1,cur.COPT_DEAL_NUMBER,cur.COPT_COMPANY_CODE,
                    cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.copt_base_amount,
                    cur.copt_maturity_date,cur.copt_delivery_date,cur.COPT_PREMIUM_AMOUNT,
                    cur.COPT_PREMIUM_LOCAL,cur.COPT_USER_REFERENCE,cur.COPT_EXPIRY_DATE);
       -- commit;
      --export details
         MERGE INTO trsystem987 D
         USING (select rownum rn, trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
                TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
                HEDG_DEAL_NUMBER,trad_trade_fcy
        from  trtran002,trtran004
        where hedg_trade_reference=trad_trade_reference(+)
              and HEDG_DEAL_NUMBER = cur.COPT_DEAL_NUMBER
              and TRAD_IMPORT_EXPORT <= 25900050

              ) exp
        ON (d.repc_sub_row=exp.rn
            and D.repc_row_number=INTROWNUM)
       WHEN MATCHED THEN
            UPDATE SET D.REPE_REFERENCE_DATE = exp.trad_reference_date,
                      D.REPE_TRADE_REFERENCE = exp.HEDG_TRADE_REFERENCE,
                      D.REPE_HEDGED_FCY = exp.HEDG_HEDGED_FCY,
                      D.REPE_BUYER_SELLER = exp.TRAD_BUYER_SELLER,
                      D.REPE_MATURITY_FROM = exp.trad_maturity_from,
                      D.REPE_PRODUCT_CODE = exp.trad_product_code,
                      D.REPE_IMPORT_EXPORT = exp.TRAD_IMPORT_EXPORT,
                      D.REPE_TRADE_FCY = exp.trad_trade_fcy,
                      D.REPI_ORDER_EXIST=1
       WHEN NOT MATCHED THEN
            INSERT (repc_row_number,repc_sub_row,D.REPE_REFERENCE_DATE,
                    D.REPE_TRADE_REFERENCE,D.REPE_HEDGED_FCY,D.REPE_BUYER_SELLER,
                    D.REPE_MATURITY_FROM,D.REPE_PRODUCT_CODE,D.REPE_IMPORT_EXPORT,d.REPD_DEAL_NUMBER,
                    d.REPD_EXECUTE_DATE,d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.repE_trade_fcy, D.REPI_ORDER_EXIST)
            VALUES (intRowNum,exp.rn,trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
                     TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT, cur.COPT_DEAL_NUMBER,
                     cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.COPT_COMPANY_CODE,nvl(trad_trade_fcy,0),1);

-- Import details
      MERGE INTO trsystem987 D
         USING (select rownum rn, trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
                TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
                HEDG_DEAL_NUMBER,trad_trade_fcy
        from  trtran002,trtran004
        where hedg_trade_reference=trad_trade_reference(+)
              and HEDG_DEAL_NUMBER = cur.COPT_DEAL_NUMBER
             and TRAD_IMPORT_EXPORT > 25900050

              ) imp
        ON (d.repc_sub_row=imp.rn
            and D.repc_row_number=INTROWNUM)
       WHEN MATCHED THEN
            UPDATE SET D.REPI_REFERENCE_DATE = imp.trad_reference_date,
                      D.REPE_TRADE_REFERENCE = imp.HEDG_TRADE_REFERENCE,
                      D.REPI_HEDGED_FCY = imp.HEDG_HEDGED_FCY,
                      D.REPI_BUYER_SELLER = imp.TRAD_BUYER_SELLER,
                      D.REPI_MATURITY_FROM = imp.trad_maturity_from,
                      D.REPI_PRODUCT_CODE = imp.trad_product_code,
                      D.REPE_IMPORT_EXPORT = imp.TRAD_IMPORT_EXPORT,
                      D.REPI_TRADE_FCY = imp.trad_trade_fcy,
                      D.REPI_ORDER_EXIST=1
       WHEN NOT MATCHED THEN
            INSERT (repc_row_number,repc_sub_row,D.REPE_REFERENCE_DATE,D.REPE_TRADE_REFERENCE,
                    D.REPI_HEDGED_FCY,D.REPI_BUYER_SELLER,D.REPI_MATURITY_FROM,
                    D.REPI_PRODUCT_CODE, D.REPE_IMPORT_EXPORT,d.REPD_DEAL_NUMBER,
                    d.REPD_EXECUTE_DATE,d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,d.repI_trade_fcy,D.REPI_ORDER_EXIST)
            VALUES (intRowNum,imp.rn,trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
                    TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
                    cur.COPT_DEAL_NUMBER, cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.COPT_COMPANY_CODE,nvl(trad_trade_fcy,0),1);

         -- cancelllation mergre statement
      MERGE INTO trsystem987 D
         USING (select rownum rn, CORV_DEAL_NUMBER,corv_exercise_date,corv_base_amount,
                corv_rbi_refrate,corv_profit_loss

     from trtran073
    where CORV_DEAL_NUMBER = cur.COPT_DEAL_NUMBER) canl
        ON (d.repc_sub_row=canl.rn
            and D.repc_row_number=INTROWNUM)
       WHEN MATCHED THEN
            UPDATE SET D.REPC_EXERCISE_DATE=canl.corv_exercise_date,
                       D.REPC_CANCLE_AMOUNT=canl.corv_base_amount,
                       D.REPC_RBI_REFRATE=canl.corv_rbi_refrate,
                       D.REPC_PROFIT_LOSS=canl.corv_profit_loss,
                       D.REPI_ORDER_EXIST=1
       WHEN NOT MATCHED THEN
            INSERT (repc_row_number,repc_sub_row,D.REPC_EXERCISE_DATE, D.REPC_CANCLE_AMOUNT,
                    D.REPC_RBI_REFRATE,D.REPC_PROFIT_LOSS, D.REPD_DEAL_NUMBER, d.REPD_EXECUTE_DATE,
                    d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.REPI_ORDER_EXIST)
            VALUES (intRowNum,canl.rn,corv_exercise_date,corv_base_amount,corv_rbi_refrate,
                    corv_profit_loss, cur.COPT_DEAL_NUMBER, cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,
                    cur.COPT_COMPANY_CODE,1);

     intRowNum:=intRowNum+1;
  end loop;
         commit;

 return 0;

--exception
--when others then
--  return 1;
end fnc_optioncontract;



--function  fnc_optioncontractnew
--          (frmDate date default to_date('01/03/1900', 'dd/mm/yyyy'), ToDate date default sysdate) return number
--as
--intRowNum number(5);
--begin
--  intRowNum:=1;
--  --delete from trsystem987;
--
--  --insert into temp values ('125', 'CALLED'); commit;
--  delete from trsystem987;
--            commit;
--   For cur in
--          (select COPT_DEAL_NUMBER,COPT_COMPANY_CODE,
--                  COPT_EXECUTE_DATE,COPT_COUNTER_PARTY,copt_base_amount,
--                  copt_maturity_date,copt_delivery_date, COPT_PREMIUM_AMOUNT,
--                  COPT_PREMIUM_LOCAL,COPT_MULTIPLE_DEALS,COPT_USER_REFERENCE,COPT_EXPIRY_DATE
--           from  trtran071
--           where  COPT_RECORD_STATUS not in (10200005,10200006)
--                  and COPT_EXECUTE_DATE between frmDate and ToDate
--                  and COPT_DEAL_NUMBER in (select HEDG_DEAL_NUMBER from trtran004)
--                  --order by COPT_EXECUTE_DATE
--                 --and copt_deal_number in('CO/H/SDJL/0317/11-12')
--
--          )
--
--          Loop
----            insert into temp values ('125', cur. COPT_DEAL_NUMBER);
--
--             insert into trsystem987
--                    (repc_row_number,repc_sub_row,REPD_DEAL_NUMBER,REPD_COMPANY_CODE,REPD_EXECUTE_DATE,
--                     REPD_COUNTER_PARTY,REPD_BASE_AMOUNT,REPD_MATURITY_DATE,
--                     REPD_DELIVERY_DATE,REPD_PREMIUM_AMOUNT,REPD_PREMIUM_LOCAL,
--                     REPD_USER_REFERENCE,REPD_EXPIRY_DATE)
--            VALUES (intRowNum,1,cur.COPT_DEAL_NUMBER,cur.COPT_COMPANY_CODE,
--                    cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.copt_base_amount,
--                    cur.copt_maturity_date,cur.copt_delivery_date,cur.COPT_PREMIUM_AMOUNT,
--                    cur.COPT_PREMIUM_LOCAL,cur.COPT_USER_REFERENCE,cur.COPT_EXPIRY_DATE);
--       -- commit;
--
---- Import details
--      MERGE INTO trsystem987 D
--         USING (select rownum rn, trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                TRAD_BUYER_SELLER,TRAD_MATURITY_FROM,trad_product_code,TRAD_IMPORT_EXPORT,
--                HEDG_DEAL_NUMBER,trad_trade_fcy,TRAD_MATURITY_DATE,
--                --TRAD_MATURITY_MONTH,
--                TRAD_USER_REFERENCE
--        from  trtran002,trtran004
--        where hedg_trade_reference=trad_trade_reference(+)
--              and HEDG_DEAL_NUMBER = cur.COPT_DEAL_NUMBER
--             and TRAD_IMPORT_EXPORT > 25900050
--
--              ) imp
--        ON (d.repc_sub_row=imp.rn
--            and D.repc_row_number=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.REPI_REFERENCE_DATE = imp.trad_reference_date,
--                      D.REPE_TRADE_REFERENCE = imp.HEDG_TRADE_REFERENCE,
--                      D.REPI_HEDGED_FCY = imp.HEDG_HEDGED_FCY,
--                      D.REPI_BUYER_SELLER = imp.TRAD_BUYER_SELLER,
--                      D.REPE_MATURITY_FROM = imp.trad_maturity_from,
--                      D.REPE_MATURITY_DATE = imp.TRAD_MATURITY_DATE,
--                      D.REPE_MATURITY_MONTH = imp.TRAD_MATURITY_MONTH,
--                      D.REPE_PRODUCT_CODE = imp.trad_product_code,
--                      D.REPE_IMPORT_EXPORT = imp.TRAD_IMPORT_EXPORT,
--                      D.REPE_USER_REFERENCE=imp.TRAD_USER_REFERENCE,
--                      D.REPI_TRADE_FCY = imp.trad_trade_fcy,
--                      D.REPI_ORDER_EXIST=1
--       WHEN NOT MATCHED THEN
--            INSERT (repc_row_number,repc_sub_row,D.REPE_REFERENCE_DATE,D.REPE_TRADE_REFERENCE,
--                    D.REPI_HEDGED_FCY,D.REPI_BUYER_SELLER,D.REPE_MATURITY_FROM,
--                    D.REPE_PRODUCT_CODE, D.REPE_IMPORT_EXPORT,d.REPD_DEAL_NUMBER,
--                    d.REPD_EXECUTE_DATE,d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,d.repI_trade_fcy,D.REPE_MATURITY_DATE,D.REPE_MATURITY_MONTH,
--                    D.REPE_USER_REFERENCE,D.REPI_ORDER_EXIST)
--            VALUES (intRowNum,imp.rn,trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                    TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT,
--                    cur.COPT_DEAL_NUMBER, cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.COPT_COMPANY_CODE,nvl(trad_trade_fcy,0),TRAD_MATURITY_DATE,
--                    --TRAD_MATURITY_MONTH,
--                    TRAD_USER_REFERENCE,1);
--         insert into temp values (CUR.COPT_DEAL_NUMBER,'1');
--    --export details
--         MERGE INTO trsystem987 D
--         USING (select (case when cur.COPT_MULTIPLE_DEALS =12400001 then 2 else rownum end) rn, trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                TRAD_BUYER_SELLER,TRAD_MATURITY_FROM,TRAD_PRODUCT_CODE,TRAD_IMPORT_EXPORT,
--                HEDG_DEAL_NUMBER,trad_trade_fcy,TRAD_MATURITY_DATE,
--               -- TRAD_MATURITY_MONTH,
--                TRAD_USER_REFERENCE
--        from  trtran002,trtran004
--        where hedg_trade_reference=trad_trade_reference(+)
--              and HEDG_DEAL_NUMBER = cur.COPT_DEAL_NUMBER
--              and TRAD_IMPORT_EXPORT <= 25900050
--
--              ) exp
--        ON (d.repc_sub_row=exp.rn
--            and D.repc_row_number=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.REPE_REFERENCE_DATE = exp.trad_reference_date,
--                      D.REPE_TRADE_REFERENCE = exp.HEDG_TRADE_REFERENCE,
--                      D.REPE_HEDGED_FCY = exp.HEDG_HEDGED_FCY,
--                      D.REPE_BUYER_SELLER = exp.TRAD_BUYER_SELLER,
--                      D.REPE_MATURITY_FROM = exp.TRAD_MATURITY_FROM,
--                      D.REPE_MATURITY_DATE = exp.TRAD_MATURITY_DATE,
--                      D.REPE_MATURITY_MONTH=exp.TRAD_MATURITY_MONTH,
--                      D.REPE_PRODUCT_CODE = exp.trad_product_code,
--                      D.REPE_IMPORT_EXPORT = exp.TRAD_IMPORT_EXPORT,
--                      D.REPE_USER_REFERENCE=exp.TRAD_USER_REFERENCE,
--                      D.REPE_TRADE_FCY = exp.trad_trade_fcy,
--                      D.REPI_ORDER_EXIST=1
--       WHEN NOT MATCHED THEN
--            INSERT (repc_row_number,repc_sub_row,D.REPE_REFERENCE_DATE,
--                    D.REPE_TRADE_REFERENCE,D.REPE_HEDGED_FCY,D.REPE_BUYER_SELLER,
--                    D.REPE_MATURITY_FROM,D.REPE_PRODUCT_CODE,D.REPE_IMPORT_EXPORT,d.REPD_DEAL_NUMBER,
--                    d.REPD_EXECUTE_DATE,d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.repE_trade_fcy, D.REPE_MATURITY_DATE,D.REPE_MATURITY_MONTH,
--                    D.REPE_USER_REFERENCE,D.REPI_ORDER_EXIST)
--            VALUES (intRowNum,exp.rn,trad_reference_date,HEDG_TRADE_REFERENCE,HEDG_HEDGED_FCY,
--                     TRAD_BUYER_SELLER,trad_maturity_from,trad_product_code,TRAD_IMPORT_EXPORT, cur.COPT_DEAL_NUMBER,
--                     cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,cur.COPT_COMPANY_CODE,nvl(trad_trade_fcy,0),TRAD_MATURITY_DATE,TRAD_MATURITY_MONTH,
--                     TRAD_USER_REFERENCE,1);
--      insert into temp values (CUR.COPT_DEAL_NUMBER,'2');
--         -- cancelllation mergre statement
--      MERGE INTO trsystem987 D
--         USING (select rownum rn, CORV_DEAL_NUMBER,corv_exercise_date,corv_base_amount,
--                corv_rbi_refrate,corv_profit_loss
--
--     from trtran073
--    where CORV_DEAL_NUMBER = cur.COPT_DEAL_NUMBER) canl
--        ON (d.repc_sub_row=canl.rn
--            and D.repc_row_number=INTROWNUM)
--       WHEN MATCHED THEN
--            UPDATE SET D.REPC_EXERCISE_DATE=canl.corv_exercise_date,
--                       D.REPC_CANCLE_AMOUNT=canl.corv_base_amount,
--                       D.REPC_RBI_REFRATE=canl.corv_rbi_refrate,
--                       D.REPC_PROFIT_LOSS=canl.corv_profit_loss,
--                       D.REPI_ORDER_EXIST=1
--       WHEN NOT MATCHED THEN
--            INSERT (repc_row_number,repc_sub_row,D.REPC_EXERCISE_DATE, D.REPC_CANCLE_AMOUNT,
--                    D.REPC_RBI_REFRATE,D.REPC_PROFIT_LOSS, D.REPD_DEAL_NUMBER, d.REPD_EXECUTE_DATE,
--                    d.REPD_COUNTER_PARTY,d.REPD_COMPANY_CODE,D.REPI_ORDER_EXIST)
--            VALUES (intRowNum,canl.rn,corv_exercise_date,corv_base_amount,corv_rbi_refrate,
--                    corv_profit_loss, cur.COPT_DEAL_NUMBER, cur.COPT_EXECUTE_DATE,cur.COPT_COUNTER_PARTY,
--                    cur.COPT_COMPANY_CODE,1);
--
--     intRowNum:=intRowNum+1;
--  end loop;
--         commit;
--
-- return 0;
--
----exception
----when others then
----  return 1;
--end fnc_optioncontractnew;
-----------------------------------------------------------------------
--function to generate Forwadr report

function  fnc_frwcontract
    (frmDate date default to_date('01/03/1900', 'dd/mm/yyyy'), ToDate date default sysdate) return number
as
intRowNum number(5);
begin
  intRowNum:=1;
  delete from trsystem986;

  --insert into temp values ('125', 'CALLED'); commit;
   For frw in
          (select   deal_company_code,deal_deal_number,deal_counter_party,
                    deal_execute_date,deal_base_currency,deal_other_currency,
                    deal_exchange_rate,deal_base_amount,deal_maturity_from,
                    deal_maturity_date,deal_user_reference ,
                    pkgforexprocess.fncgetoutstanding(deal_deal_number,1,gconst.utiltradedeal,gconst.amountfcy,frmdate) ploss -- added by sivadas
                    from trtran001
           where deal_record_status not in (10200005,10200006)
           --order by deal_execute_date
                  and deal_execute_date between frmDate and ToDate
          )
          Loop
            --insert into temp values ('125', frw.DEAL_DEAL_NUMBER);

             insert into trsystem986
                    (FRWC_ROW_NUMBER,FRWC_SUB_ROW,
                     FRWD_DEAL_NUMBER,FRWD_COMPANY_CODE,FRWD_EXECUTE_DATE,
                     FRWD_COUNTER_PARTY,FRWD_BASE_CURRENCY,FRWD_OTHER_CURRENCY,
                     FRWD_EXCHANGE_RATE ,FRWD_BASE_AMOUNT,FRWD_MATURITY_FROM,
                     FRWD_MATURITY_DATE,FRWD_USER_REFERENCE, FRWS_PROFIT_LOSS)

            VALUES (intRowNum,1,FRW.DEAL_DEAL_NUMBER,
                    FRW.DEAL_COMPANY_CODE,
                    FRW.deal_execute_date,FRW.DEAL_COUNTER_PARTY,
                    FRW.deal_base_currency,FRW.deal_other_currency,
                    FRW.deal_exchange_rate,FRW.deal_base_amount,FRW.deal_maturity_from,
                    FRW.deal_maturity_date,FRW.deal_user_reference,
                    frw.ploss);
        commit;

         MERGE INTO trsystem986 D
         USING (select rownum rn, Trad_Reference_Date,trad_buyer_seller,HEDG_TRADE_REFERENCE,
                       HEDG_HEDGED_FCY,trad_maturity_from,trad_maturity_date,trad_product_code,
                       trad_local_bank, trad_trade_rate, trad_trade_fcy, -- added by sivadas on 05/04/12
                       (select sum(BREL_REVERSAL_FCY)
                          from trtran003
                         where brel_trade_reference = TRAD_TRADE_REFERENCE
                           and brel_record_status not in (10200006,10200053)
                       ) DeliverdAmt,
                       (select (brel_reversal_fcy * brel_reversal_rate +
                                          cdel_cancel_amount * cdel_cancel_rate) / trad_trade_fcy
                         from trtran006,
                              trtran003
                        where cdel_trade_reference = brel_trade_reference
                          and cdel_trade_reference = TRAD_TRADE_REFERENCE
                       ) Avgdelrate
                from trtran002,trtran004
                where TRAD_TRADE_REFERENCE = HEDG_TRADE_REFERENCE(+)
                and HEDG_DEAL_NUMBER = frw.DEAL_DEAL_NUMBER) Ord
        ON (d.FRWC_SUB_ROW=Ord.rn
            and D.FRWC_ROW_NUMBER=INTROWNUM)
       WHEN MATCHED THEN
            UPDATE SET
                 D.FRWO_REFERENCE_DATE = Ord.trad_reference_date,
                 D.FRWO_BUYER_SELLER  = Ord.TRAD_BUYER_SELLER,
                 D.FRWO_TRADE_REFERENCE = Ord.HEDG_TRADE_REFERENCE,
                 D.FRWO_HEDGED_FCY   = Ord.HEDG_HEDGED_FCY,                  -- hedge amt
                 D.FRWO_TRADMATURITY_FROM = Ord.trad_maturity_from,
                 D.FRWO_TRADMATURITY_DATE =ord.trad_maturity_date,
                 D.FRWO_PRODUCT_CODE =ord.trad_product_code ,
                 D.FRWD_ORDE_EXIST = 1,
                 D.FRWO_LOCAL_BANK = Ord.TRAD_LOCAL_BANK,
                 D.FRWO_TRADE_RATE = Ord.TRAD_TRADE_RATE,
                 D.FRWO_TRADE_FCY = Ord.trad_trade_fcy,
                 D.FRWS_DELIVERED_TOTAL = Ord.DeliverdAmt,
                 D.FRWS_AVGDEL_RATE = Ord.Avgdelrate
       WHEN NOT MATCHED THEN
            INSERT (FRWC_ROW_NUMBER,FRWC_SUB_ROW,D.FRWO_REFERENCE_DATE,D.FRWO_BUYER_SELLER,
                    D.FRWO_TRADE_REFERENCE, D.FRWO_HEDGED_FCY ,D.FRWO_TRADMATURITY_FROM,
                    D.FRWO_TRADMATURITY_DATE, D.FRWO_PRODUCT_CODE,D.FRWD_DEAL_NUMBER,
                    D.FRWD_COMPANY_CODE,D.FRWD_EXECUTE_DATE,D.FRWD_COUNTER_PARTY,D.FRWD_ORDE_EXIST,
                    D.FRWO_LOCAL_BANK, D.FRWO_TRADE_RATE, D.FRWO_TRADE_FCY,  -- added by Sivadas
                    D.FRWS_DELIVERED_TOTAL, D.FRWS_AVGDEL_RATE)

            VALUES (intRowNum,Ord.rn,trad_reference_date,TRAD_BUYER_SELLER,HEDG_TRADE_REFERENCE,
                    HEDG_HEDGED_FCY,trad_maturity_from,trad_maturity_date,trad_product_code,
                    frw.DEAL_DEAL_NUMBER,frw.DEAL_COMPANY_CODE,frw.deal_execute_date,frw.DEAL_COUNTER_PARTY,1,
                    trad_local_bank, trad_trade_rate, trad_trade_fcy, DeliverdAmt,  -- added by Sivadas
                    Avgdelrate);
--
         -- cancelllation mergre statement
      MERGE INTO trsystem986 D
         USING (select rownum rn, CDEL_DEAL_NUMBER,cdel_cancel_date ,cdel_cancel_amount ,cdel_cancel_rate ,
                cdel_other_amount,cdel_profit_loss
     from trtran006
    where CDEL_DEAL_NUMBER = frw.DEAL_DEAL_NUMBER) canl
        ON (d.FRWC_SUB_ROW=canl.rn
            and D.FRWC_ROW_NUMBER=INTROWNUM)
       WHEN MATCHED THEN
            UPDATE SET D.FRWC_CANCEL_DATE = canl.cdel_cancel_date,
                       D.FRWC_CANCLE_AMOUNT = canl.cdel_cancel_amount,
                       D.FRWC_CANCLE_RATE = canl.cdel_cancel_rate,
                       D.FRWC_PROFIT_LOSS = canl.cdel_profit_loss,
                       D.FRWC_OTHER_AMOUNT = canl.cdel_other_amount,
                       D.FRWD_ORDE_EXIST =1

       WHEN NOT MATCHED THEN
            INSERT (FRWC_ROW_NUMBER,FRWC_SUB_ROW,D.FRWC_CANCEL_DATE, D.FRWC_CANCLE_AMOUNT, D.FRWC_CANCLE_RATE,
                    D.FRWC_PROFIT_LOSS,D.FRWC_OTHER_AMOUNT,D.FRWD_DEAL_NUMBER,D.FRWD_COMPANY_CODE,D.FRWD_EXECUTE_DATE,
                    D.FRWD_COUNTER_PARTY, D.FRWD_ORDE_EXIST )
            VALUES (intRowNum,canl.rn,cdel_cancel_date,cdel_cancel_amount,cdel_cancel_rate,cdel_profit_loss,cdel_other_amount,
                   frw.DEAL_DEAL_NUMBER,frw.DEAL_COMPANY_CODE,frw.deal_execute_date,frw.DEAL_COUNTER_PARTY,1);

      -- update covered total and uncovered total --
      update trsystem986 a
         set (frws_uncovered_total,
              frws_covered_total) = (select nvl(sum(frwo_hedged_fcy), 0),
                                            nvl(sum(frwo_trade_fcy), 0) - nvl(sum(frwo_hedged_fcy), 0)
                                       from trsystem986
                                      where frwd_deal_number = a. frwd_deal_number)
        where frwd_deal_number = frw.deal_deal_number
          and frwc_sub_row = 1;

     intRowNum:=intRowNum+1;
  end loop;


 return 0;

--exception
--when others then
--  return 1;
end fnc_frwcontract;
------------------------------------------------------------------------------------------
function  fncOrderHedgeDetails
            (companyCode    number,
             buySell        number,
             currencyCode   number,
             counterParty   number)
  return number
  is
     numRowCnt number(4) := 1;
  begin

    --delete from tmprep_ordinv;

    for cur in (select trad_trade_reference ord_trade_ref,
                       trad_company_code ord_comp_code,
                       TRAD_LOCAL_BANK ord_local_bank,
                       trad_trade_fcy ord_trade_fcy,
                       trad_trade_rate ord_trade_rate,
                       trad_trade_currency ord_trade_currency,
                       trad_reference_date ord_ref_date,
                       trad_user_reference ord_user_reference,
                       --trad_Maturity_month ord_mat_month,
                       trad_buyer_seller ord_buyer_seller,
                       trad_import_export ord_import_export,
                       trad_product_code ord_product_code,
                       pkgforexprocess.fncGetOutstanding(trad_trade_reference, 1, 20,
                                        GConst.AMOUNTFCY, sysdate, null) ord_outstanding_amount
                  from trtran002
                 where trad_record_status in (10200001, 10200003, 10200004)
                   and trad_process_complete = 12400002)
                   --and trad_reverse_reference is not null
                   --and trad_trade_reference = 'PURCHOR/SDJL/00002/12-13')
    loop
       -- Insert order details
--       insert
--         into tmprep_ordinv
--              (tord_row_num,
--               tord_sub_row,
--               tord__trade_reference,
--               tord_company_code,
--               tord_local_bank,
--               tord_trade_fcy,
--               tord_exchange_rate,
--               tord_currency_code,
--               tord_outstanding_amount,
--               tord_reference_date,
--               tord_user_reference,
--               tord_maturity_month,
--               tord_buyer_seller,
--               tord_import_export,
--               tord_product_code)
--       values (numRowCnt,
--               1,
--               cur.ord_trade_ref,
--               cur.ord_comp_code,
--               cur.ord_local_bank,
--               cur.ord_trade_fcy,
--               cur.ord_trade_rate,
--               cur.ord_trade_currency,
--               cur.ord_outstanding_amount, -- outstanding amount
--               cur.ord_ref_date,
--               cur.ord_user_reference, -- user ref
--               cur.ord_mat_month,
--               cur.ord_buyer_seller,
--               cur.ord_import_export,
--               cur.ord_product_code);
--
--       -- Insert Invoice details --
--       merge
--        into tmprep_ordinv r
--       using (select rownum rn,
--                     trad_trade_reference inv_trade_ref,
--                     TRAD_LOCAL_BANK inv_local_bank,
--                     trad_trade_fcy inv_trade_fcy,
--                     (select NVL(sum(BREL_REVERSAL_FCY),0)
--                        from trtran003
--                       where brel_trade_reference = trad_trade_reference
--                         and BREL_RECORD_STATUS not in (10200005, 10200006, 10200012)) inv_link_amount,
--                     trad_trade_rate inv_trade_rate,
--                     trad_trade_currency inv_trade_currency,
--                     trad_reference_date inv_ref_date,
--                     trad_user_reference inv_user_reference,
--                     trad_Maturity_month inv_mat_month,
--                     trad_buyer_seller inv_buyer_seller,
--                     trad_import_export inv_import_export
--                from trtran002
--               where trad_reverse_reference = cur.ord_trade_ref
--                 and trad_record_status in (10200001, 10200003, 10200004)
--                 and trad_process_complete = 12400002) i
--          on (r.tord_sub_row = i.rn
--              and r.tord_row_num = numRowCnt)
--        when matched then
--              update
--                 set tinv_trade_reference = i.inv_trade_ref,
--                     tinv_local_bank = i.inv_local_bank,
--                     tinv_trade_fcy = i.inv_trade_fcy,
--                     tinv_exchange_rate = i.inv_trade_rate,
--                     tinv_currency_code = i.inv_trade_currency,
--                     tinv_linked_amount = i.inv_link_amount,
--                     tinv_reference_date = i.inv_ref_date,
--                     tinv_user_reference = i.inv_user_reference,
--                     tinv_maturity_month = i.inv_mat_month,
--                     tinv_buyer_seller = i.inv_buyer_seller,
--                     tinv_import_export = i.inv_import_export
--        when not matched then
--             insert (tord_row_num,
--                     tord_sub_row,
--                     tinv_trade_reference,
--                     tinv_local_bank,
--                     tinv_trade_fcy,
--                     tinv_exchange_rate,
--                     tinv_currency_code,
--                     tinv_linked_amount,
--                     tinv_reference_date,
--                     tinv_user_reference,
--                     tinv_maturity_month,
--                     tinv_buyer_seller,
--                     tinv_import_export,
--                     tord__trade_reference,
--                     tord_company_code,
--                     tord_local_bank,
--                     tord_reference_date)
--             values (numRowCnt,
--                     i.rn,
--                     i.inv_trade_ref,
--                     i.inv_local_bank,
--                     i.inv_trade_fcy,
--                     i.inv_trade_rate,
--                     i.inv_trade_currency,
--                     i.inv_link_amount,
--                     i.inv_ref_date,
--                     i.inv_user_reference,
--                     i.inv_mat_month,
--                     i.inv_buyer_seller,
--                     i.inv_import_export,
--                     cur.ord_trade_ref,
--                     cur.ord_comp_code,
--                     cur.ord_local_bank,
--                     cur.ord_ref_date);
--
--       -- Insert Deal details --
--       merge
--        into tmprep_ordinv r
--       using (select rownum rn,
--                     deal_deal_number,
--                     --deal_execute_date,
--                     deal_counter_party,
--                     deal_exchange_rate,
--                     deal_maturity_from,
--                     deal_maturity_date,
--                     hedg_hedged_fcy,
--                     hedg_create_date
--                from trtran001,
--                     trtran004
--               where DEAL_DEAL_NUMBER = HEDG_DEAL_number
--                 and HEDG_TRADE_REFERENCE = cur.ord_trade_ref) d
--          on (r.tord_sub_row = d.rn
--              and r.tord_row_num = numRowCnt)
--        when matched then
--              update
--                 set tdel_deal_number = d.deal_deal_number,
--                     tdel_execute_date = d.hedg_create_date,
--                     tdel_counter_party = d.deal_counter_party,
--                     tdel_exchange_rate = d.deal_exchange_rate,
--                     tdel_maturity_from = d.deal_maturity_from,
--                     tdel_maturity_date = d.deal_maturity_date,
--                     tdel_hedged_fcy = d.hedg_hedged_fcy
--        when not matched then
--             insert (tord_row_num,
--                     tord_sub_row,
--                     tdel_deal_number,
--                     tdel_execute_date,
--                     tdel_counter_party,
--                     tdel_exchange_rate,
--                     tdel_maturity_from,
--                     tdel_maturity_date,
--                     tdel_hedged_fcy,
--                     tord__trade_reference,
--                     tord_company_code,
--                     tord_local_bank,
--                     tord_reference_date)
--             values (numRowCnt,
--                     d.rn,
--                     d.deal_deal_number,
--                     d.hedg_create_date,
--                     d.deal_counter_party,
--                     d.deal_exchange_rate,
--                     d.deal_maturity_from,
--                     d.deal_maturity_date,
--                     d.hedg_hedged_fcy,
--                     cur.ord_trade_ref,
--                     cur.ord_comp_code,
--                     cur.ord_local_bank,
--                     cur.ord_ref_date);

       numRowCnt := numRowCnt + 1;

    end loop;
    commit;
    return 0;

  exception
     when others then
        rollback;
        return 1;

  end fncOrderHedgeDetails;

function  fnc_totlinkagerep
          (frmDate date default to_date('01/03/1900', 'dd/mm/yyyy'),
           ToDate date default sysdate)
   return number
is
   intGrpNum   number(5);
   intRowNum   number(5);
   orderCnt    number;
   dealCnt     number;
begin

   set transaction isolation level serializable;

   intGrpNum := 1;
   intRowNum := 1;
   delete from trsystem985;
   commit;

   for curMain
    in (
    select * from (
        select copt_execute_date dealdate, copt_company_code companycode, copt_counter_party bank,
               --nvl(pkgforexprocess.fncGetOutstanding(copt_deal_number, copt_serial_number,
               --      GConst.UTILOPTIONHEDGEDEAL, GConst.AMOUNTFCY, frmDate), 0) amount,
               copt_base_amount amount, nvl(COPT_MULTIPLE_DEALS,12400001) multi,
               copt_maturity_date matdate, copt_complete_date settledate, -- check this field
               (select round( avg(cosu_strike_rate),2) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300001 and cosu_option_type=32400001) "BC",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300001 and cosu_option_type=32400002) "BP",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300002 and cosu_option_type=32400002) "SP",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300002 and cosu_option_type=32400001) "SC",
               copt_premium_amount premcross, copt_premium_local preminr,
               copt_user_reference bankref, copt_deal_number dealnumber,
               hedg_trade_reference hedgeno, hedg_hedging_with dealtype
          from trtran004,
               trtran071
         where hedg_deal_number = copt_deal_number
           and hedg_record_status not in (10200005,10200006) and hedg_hedging_with = 32200003
           and copt_record_status not in (10200005,10200006)
--           and ((copt_process_complete = 12400001 and copt_delivery_date >= frmDate)
--                  or copt_process_complete = 12400002)
         union
        select deal_execute_date dealdate, deal_company_code companycode, deal_counter_party bank,
               --nvl(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,
               --      GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, frmDate), 0) amount,
               deal_base_amount amount,12400002 multi,
               deal_maturity_date matdate, deal_confirm_date settledate,
               0 bp, 0 sp, 0 bc, 0 sc,0 premcross, 0 preminr, deal_user_reference bankref,
               deal_deal_number dealnumber, hedg_trade_reference hedgeno, hedg_hedging_with dealtype
          from trtran004,
               trtran001
         where hedg_deal_number = deal_deal_number
           and hedg_record_status not in (10200005,10200006) and hedg_hedging_with = 32200001
           and deal_record_status not in (10200005,10200006)
--           and ((deal_process_complete = 12400001 and deal_complete_date >= frmDate)
--                  or deal_process_complete = 12400002)

           --and HEDG_TRADE_REFERENCE in ('SALEOR/FPJDL/00083/12-13','EXLC/FPJDL/00066/12-13') -- ######################### REMOVE THIS CONDITION ######################
--         union
--        select cfut_execute_date dealdate, cfut_company_code companycode, cfut_counter_party bank,
--               nvl(pkgforexprocess.fncGetOutstanding(cfut_deal_number, 1,
--                     GConst.UTILFUTUREDEAL, GConst.AMOUNTFCY, frmDate), 0) amount,
--               --cfut_base_amount amount,
--               cfut_maturity_date matdate, cfut_complete_date settledate, -- check this field
--               0 bp, 0 sp, 0 bc, 0 sc, 0 premcross, 0 preminr, cfut_user_reference bankref,
--               cfut_deal_number dealnumber, hedg_trade_reference hedgeno, hedg_hedging_with dealtype
--          from trtran004,
--               trtran061
--         where hedg_deal_number = cfut_deal_number
--           and hedg_record_status not in (10200005,10200006) and hedg_hedging_with = 32200002
--           and cfut_record_status not in (10200005,10200006)
--           and cfut_process_complete = 12400002
         --and hedg_deal_number = 'CO/H/SDIL/0419/11-12'    --######### TESTING PURPOSE ONLY #############-- UNDONE ..
            )
     order by hedgeno)
   loop

      select count(*)
        into orderCnt
        from trsystem985
       where trpt_hedge_no = curMain.hedgeno;

      select count(*)
        into dealCnt
        from trsystem985
       where (trpt_deal_number = curMain.dealnumber);  --and trpt_hedge_no = curMain.hedgeno);
          --or (trpt_deal_number = curMain.dealnumber and trpt_group_no = intGrpNum-1);

      if dealCnt = 0 then
         if orderCnt > 0 then
            intGrpNum := intGrpNum - 1;
         else
            intRowNum := 1;
         end if;

         -- Insert deal details --
         insert
           into trsystem985
                (trpt_group_no, trpt_row_no, trpt_deal_date, trpt_deal_company, trpt_deal_bank,
                 trpt_deal_amount, trpt_deal_matdate, trpt_deal_setl_date, trpt_deal_bp, trpt_deal_sp,
                 trpt_deal_bc, trpt_deal_sc, trpt_deal_premcross, trpt_deal_preminr, trpt_deal_bankref,
                 trpt_deal_number, trpt_hedge_no, trpt_deal_type)
         values (intGrpNum, intRowNum, curMain.dealdate, curMain.companycode, curMain.bank, curMain.amount,
                 curMain.matdate, curMain.settledate, curMain.bp, curMain.sp, curMain.bc, curMain.sc,
                 curMain.premcross, curMain.preminr, curMain.bankref, curMain.dealnumber,
                 curMain.hedgeno, curMain.dealtype);
         intRowNum := intRowNum + 1;

         if orderCnt = 0 then
         -- Insert order details linked --
         merge
          into trsystem985 rpt
         using (select rownum rn, trad_company_code, trad_trade_reference, trad_entry_date, trad_user_reference,
                       trad_buyer_seller, trad_product_code, trad_trade_fcy, trad_maturity_from,
                       trad_maturity_date
                       --, 
                       --trad_maturity_month
                  from trtran002,
                       trtran004
                 where trad_trade_reference = hedg_trade_reference
                   and hedg_deal_number = curMain.dealnumber
                   and trad_record_status not in (10200005,10200006)
                   and trad_import_export in (25900017, 25900077)  --25900001, 25900053(exp/imp ord)
                   --and trad_maturity_date >= frmDate
                   ) ord
            on (rpt.trpt_group_no = intGrpNum
                and rpt.trpt_row_no = ord.rn)
                --and rpt.trpt_hedge_no = ord.trad_trade_reference)
          when matched then
               update
                  set rpt.trpt_ord_company = ord.trad_company_code,
                      rpt.trpt_ord_date = ord.trad_entry_date,
                      rpt.trpt_ord_reference = ord.trad_user_reference,
                      rpt.trpt_ord_supplier = ord.trad_buyer_seller,
                      rpt.trpt_ord_notional = ord.trad_trade_fcy,
                      rpt.trpt_ord_matfrom = ord.trad_maturity_from,
                      rpt.trpt_ord_matdate = ord.trad_maturity_date,
                     -- rpt.trpt_ord_payterm = ord.trad_maturity_month,
                      rpt.trpt_ord_product = ord.trad_product_code,
                      rpt.trpt_ord_number = ord.trad_trade_reference
          when not matched then
               insert (trpt_group_no, trpt_row_no, trpt_ord_company,trpt_ord_date, trpt_ord_reference,
                       trpt_ord_supplier, trpt_ord_notional, trpt_ord_uncovered, trpt_ord_matfrom,
                       trpt_ord_matdate,  trpt_ord_product, trpt_ord_number)
               values (intGrpNum, ord.rn, trad_company_code, trad_entry_date, trad_user_reference,
                       trad_buyer_seller, trad_trade_fcy, 0, trad_maturity_from,
                       trad_maturity_date,  trad_product_code, trad_trade_reference);

         end if;

         -- Insert details of deal linked invoices --
         merge
          into trsystem985 rpt
         using (select rownum rn, trad_trade_reference, trad_local_bank, trad_entry_date, trad_buyer_seller,
                       trad_product_code, trad_trade_fcy, trad_maturity_date, trad_complete_date,
                       trad_import_export
                  from trtran002,
                       trtran004
                 where trad_trade_reference = hedg_trade_reference
                   and hedg_deal_number = curMain.dealnumber
                   and trad_record_status not in (10200005,10200006)
                   and trad_import_export in (25900024, 25900086, 25900001, 25900053)
                   --and trad_maturity_date >= frmDate
                   ) inv
            on (rpt.trpt_group_no = intGrpNum
                and rpt.trpt_row_no = inv.rn)
          when matched then
               update
                  set rpt.trpt_inv_date = inv.trad_entry_date,
                      rpt.trpt_inv_no = inv.trad_trade_reference,
                      rpt.trpt_inv_supplier = inv.trad_buyer_seller,
                      rpt.trpt_inv_duedate = inv.trad_maturity_date,
                      --rpt.trpt_inv_spotdate = inv.                    check this field
                      rpt.trpt_inv_bank = inv.trad_local_bank,
                      rpt.trpt_inv_amount = inv.trad_trade_fcy,
                      rpt.trpt_inv_product = inv.trad_product_code,
                      rpt.trpt_import_export = inv.trad_import_export
          when not matched then
               insert (trpt_group_no, trpt_row_no, trpt_inv_date, trpt_inv_no, trpt_inv_supplier,
                       trpt_inv_duedate, trpt_inv_spotdate, trpt_inv_bank, trpt_inv_amount,
                       trpt_inv_product, trpt_import_export)
               values (intGrpNum, inv.rn, inv.trad_entry_date, inv.trad_trade_reference, inv.trad_buyer_seller,
                       inv.trad_maturity_date, null, inv.trad_local_bank, inv.trad_trade_fcy, -- insert spot date here
                       inv.trad_product_code, inv.trad_import_export);

         -- Insert invocie details which ar linked to orders
         merge
          into trsystem985 rpt
         using (select rownum rn, trad_trade_reference, trad_local_bank, trad_entry_date, trad_buyer_seller,
                       trad_product_code, trad_trade_fcy, trad_maturity_date, trad_complete_date,
                       trad_import_export
                  from trtran002
                 where trad_reverse_reference = curMain.hedgeno
                   and trad_record_status not in (10200005,10200006)
                   and trad_import_export in (25900024, 25900086)
                   --and trad_maturity_date >= frmDate
                   ) inv
            on (rpt.trpt_group_no = intGrpNum
                and rpt.trpt_row_no = inv.rn
                and rpt.trpt_hedge_no = inv.trad_trade_reference) -- or trpt_inv_no ??
          when matched then
               update
                  set rpt.trpt_inv_date = inv.trad_entry_date,
                      rpt.trpt_inv_no = inv.trad_trade_reference,
                      rpt.trpt_inv_supplier = inv.trad_buyer_seller,
                      rpt.trpt_inv_duedate = inv.trad_maturity_date,
                      --rpt.trpt_inv_spotdate = inv.                    check this field
                      rpt.trpt_inv_bank = inv.trad_local_bank,
                      rpt.trpt_inv_amount = inv.trad_trade_fcy,
                      rpt.trpt_inv_product = inv.trad_product_code,
                      rpt.trpt_import_export = inv.trad_import_export
          when not matched then
               insert (trpt_group_no, trpt_row_no, trpt_inv_date, trpt_inv_no, trpt_inv_supplier,
                       trpt_inv_duedate, trpt_inv_spotdate, trpt_inv_bank, trpt_inv_amount,
                       trpt_inv_product, trpt_import_export)
               values (intGrpNum, inv.rn, inv.trad_entry_date, inv.trad_trade_reference, inv.trad_buyer_seller,
                       inv.trad_maturity_date, null, inv.trad_local_bank, inv.trad_trade_fcy, -- insert spot date here
                       inv.trad_product_code, inv.trad_import_export);

         -- Insert cancellation details of Forwards --
         merge
          into trsystem985 rpt
         using (select rownum rn, cdel_deal_number, cdel_cancel_date, cdel_cancel_amount,
                       cdel_cancel_rate, cdel_profit_loss                                                      -- add rbi ref rate
                  from trtran006
                 where cdel_deal_number = curMain.dealnumber) cancl
            on (rpt.trpt_group_no = intGrpNum
                and rpt.trpt_row_no = cancl.rn)
          when matched then
               update set rpt.trpt_cancel_date = cancl.cdel_cancel_date,
                          rpt.trpt_cancel_amount = cancl.cdel_cancel_amount,
                          rpt.trpt_rbi_refrate = cancl.cdel_cancel_rate,                      -- add rbi ref rate
                          rpt.trpt_gain_loss = cancl.cdel_profit_loss
          when not matched then
               insert (trpt_group_no, trpt_row_no, trpt_cancel_date, trpt_cancel_amount,
                       trpt_rbi_refrate, trpt_gain_loss)
               values (intGrpNum, cancl.rn, cdel_cancel_date, cdel_cancel_amount, cdel_cancel_rate,  -- add rbi ref rate
                       cdel_profit_loss);

         -- insert cancellation details of options --
         merge
          into trsystem985 rpt
         using (select rownum rn, corv_deal_number,corv_exercise_date,corv_base_amount,
                       corv_rbi_refrate,corv_profit_loss
                  from trtran073
                 where corv_deal_number = curMain.dealnumber) cancl
            on (rpt.trpt_group_no = intGrpNum
                and rpt.trpt_row_no = cancl.rn)
          when matched then
               update set rpt.trpt_cancel_date = cancl.corv_exercise_date,
                          rpt.trpt_cancel_amount = cancl.corv_base_amount,
                          rpt.trpt_rbi_refrate = cancl.corv_rbi_refrate,
                          rpt.trpt_gain_loss = cancl.corv_profit_loss
          when not matched then
               insert (trpt_group_no, trpt_row_no, trpt_cancel_date, trpt_cancel_amount,
                       trpt_rbi_refrate, trpt_gain_loss)
               values (intGrpNum, cancl.rn, corv_exercise_date, corv_base_amount, corv_rbi_refrate,
                       corv_profit_loss);

         intGrpNum := intGrpNum + 1;
      end if;

   end loop;

   for cursum in (select trpt_group_no grpno, max(trpt_row_no) rowno
                           from trsystem985
                          group by trpt_group_no)
   loop
      insert
           into trsystem985
                (trpt_group_no,
                 trpt_row_no,
                 trpt_deal_amount,
                 trpt_ord_uncovered,
                 trpt_ord_reference,
                 trpt_ord_number)
         values (cursum.grpno,
                 cursum.rowno+1,
                 (select nvl(sum(trpt_deal_amount), 0) from trsystem985
                   where trpt_group_no = cursum.grpno
                     and trpt_deal_matdate >= frmdate),
                 (select nvl(sum(trpt_ord_notional), 0) from trsystem985
                   where trpt_group_no = cursum.grpno
                     and trpt_ord_payterm >= frmdate) -
                  (select nvl(sum(trpt_deal_amount), 0) from trsystem985
                   where trpt_group_no = cursum.grpno
                     and trpt_deal_matdate >= frmdate),
                   'Total',
                   'Total covered');

         update trsystem985
            set (trpt_ord_notional,
                trpt_deal_premcross,
                trpt_deal_preminr,
                trpt_inv_amount) =
                (select nvl(sum(trpt_ord_notional), 0),
                        nvl(sum(trpt_deal_premcross), 0),
                        nvl(sum(trpt_deal_preminr), 0),
                        nvl(sum(trpt_inv_amount),0)
                  from trsystem985
                 where trpt_group_no = cursum.grpno)
          where trpt_group_no = cursum.grpno
            and trpt_row_no = cursum.rowno+1;
   end loop;

   -- Insert deals which are not linked --
   for curDeal
    in (select copt_execute_date dealdate, copt_company_code companycode, copt_counter_party bank,
               nvl(pkgforexprocess.fncGetOutstanding(copt_deal_number, copt_serial_number,
                     GConst.UTILOPTIONHEDGEDEAL, GConst.AMOUNTFCY, frmDate), 0) amount,
               --copt_base_amount amount,
               copt_maturity_date matdate, copt_complete_date settledate, -- check this field
               (select round( avg(cosu_strike_rate),2) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300001 and cosu_option_type=32400001) "BC",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300001 and cosu_option_type=32400002) "BP",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300002 and cosu_option_type=32400002) "SP",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=25300002 and cosu_option_type=32400001) "SC",
               copt_premium_amount premcross, copt_premium_local preminr,
               copt_user_reference bankref, copt_deal_number dealnumber
          from trtran071
         where copt_record_status not in (10200005,10200006)
           and copt_deal_number not in (select trpt_deal_number from trsystem985)
           and ((copt_process_complete = 12400001 and copt_delivery_date >= frmDate)
                  or copt_process_complete = 12400002)
         union
         select deal_execute_date dealdate, deal_company_code companycode, deal_counter_party bank,
               nvl(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,
                     GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, frmDate), 0) amount,
               --deal_base_amount amount,
               deal_maturity_date matdate, deal_confirm_date settledate, -- check this field
               0 bp, 0 sp, 0 bc, 0 sc,0 premcross, 0 preminr, deal_user_reference bankref,
               deal_deal_number dealnumber
          from trtran001
         where deal_record_status not in (10200005,10200006)
           and deal_deal_number not in (select trpt_deal_number from trsystem985)
           and ((deal_process_complete = 12400001 and deal_complete_date >= frmDate)
                  or deal_process_complete = 12400002)
        )
   loop
      insert
        into trsystem985
             (trpt_group_no, trpt_row_no, trpt_deal_date, trpt_deal_company, trpt_deal_bank,
              trpt_deal_amount, trpt_deal_matdate, trpt_deal_setl_date, trpt_deal_bp, trpt_deal_sp,
              trpt_deal_bc, trpt_deal_sc, trpt_deal_premcross, trpt_deal_preminr, trpt_deal_bankref,
              trpt_deal_number)
      values (intGrpNum, 1, curDeal.dealdate, curDeal.companycode, curDeal.bank, curDeal.amount,
              curDeal.matdate, curDeal.settledate, curDeal.bp, curDeal.sp, curDeal.bc, curDeal.sc,
              curDeal.premcross, curDeal.preminr, curDeal.bankref, curDeal.dealnumber);

      intGrpNum := intGrpNum + 1;
   end loop;

   -- Insert order details which are not deal linked --
   for curOrd in (select rownum rn, trad_company_code, trad_trade_reference, trad_entry_date, trad_user_reference,
                         trad_buyer_seller, trad_product_code, trad_trade_fcy, trad_maturity_from,
                         trad_maturity_date
                         --,trad_maturity_month
                    from trtran002
                   where trad_trade_reference not in (select trpt_hedge_no
                                                        from trsystem985)
                     and trad_import_export in (25900017, 25900077, 25900001, 25900053) --)
                     and trad_record_status not in (10200005,10200006)
                     and trad_maturity_date >= frmDate)
   loop
      insert
        into trsystem985
             (trpt_group_no, trpt_row_no, trpt_ord_company,trpt_ord_date, trpt_ord_reference,
              trpt_ord_supplier, trpt_ord_notional, trpt_ord_uncovered, trpt_ord_matfrom,
              trpt_ord_matdate,  trpt_ord_product, trpt_ord_number)
      values (intGrpNum, 1, curOrd.trad_company_code, curOrd.trad_entry_date, curOrd.trad_user_reference,
              curOrd.trad_buyer_seller, curOrd.trad_trade_fcy, 0, curOrd.trad_maturity_from,
              curOrd.trad_maturity_date,  curOrd.trad_product_code, curOrd.trad_trade_reference);

      intGrpNum := intGrpNum + 1;
   end loop;

   -- Insert invoice details which are not deal linked --
   for curInv in (select rownum rn, trad_trade_reference, trad_local_bank, trad_entry_date, trad_buyer_seller,
                         trad_product_code, trad_trade_fcy, trad_maturity_date, trad_complete_date,
                         trad_import_export
                    from trtran002
                   where trad_trade_reference not in (select trpt_hedge_no
                                                        from trsystem985)
                     and trad_import_export in (25900024, 25900086)
                     and trad_record_status not in (10200005,10200006)
                     and trad_maturity_date >= frmDate)
   loop
      insert
        into trsystem985
             (trpt_group_no, trpt_row_no, trpt_inv_date, trpt_inv_no, trpt_inv_supplier,
              trpt_inv_duedate, trpt_inv_spotdate, trpt_inv_bank, trpt_inv_amount,
              trpt_inv_product, trpt_import_export)
      values (intGrpNum, 1, curInv.trad_entry_date, curInv.trad_trade_reference, curInv.trad_buyer_seller,
              curInv.trad_maturity_date, null, curInv.trad_local_bank, curInv.trad_trade_fcy, -- insert spot date here
              curInv.trad_product_code, curInv.trad_import_export);

      intGrpNum := intGrpNum + 1;
   end loop;

   -- TODO: Insert orders which are not linked to invoices -



   -- insert
   insert
     into trsystem985
     (trpt_group_no, trpt_row_no)
   select trpt_group_no, max(trpt_row_no) + 1
     from trsystem985
    group by trpt_group_no;

   commit;
   return 0;

exception
   when others then
      rollback;
      dbms_output.put_line(sqlerrm);
      return -1;
end fnc_totlinkagerep;

-- Function which returns product details for the given product code. - to avoid sub query in the Commodity report Queries.
function fncGetProductDetails(productCode in number,maturityDate in date,exchCode in number,pickValue in number ) return varchar is
    tickerSymbol varchar2(500);
    tradeunit varchar2(500);
    tradeUom varchar2(500);
    quoteValue varchar2(500);
    quoteUom varchar2(500);
    retValue varchar2(500);
begin
    select CPRO_TICKER_SYMBOL  ,
           CPRO_TRADE_UNIT  ,
           pkgreturncursor.fncgetdescription(CPRO_TRADE_UOM,2),
           CPRO_QUOTE_VALUE  ,
           pkgreturncursor.fncgetdescription(CPRO_QUOTE_UOM,2)
    into   tickerSymbol,tradeunit,tradeUom,quoteValue,quoteUom
    from   trmaster503
    where  cpro_pick_code = productCode
           and CPRO_DUE_DATE = maturityDate
           and CPRO_EXCHANGE_CODE = exchCode ;

     if pickValue = 1 then
            retValue := tickerSymbol;
     elsif pickValue = 2 then
            retValue := tradeunit;
     elsif pickValue = 3 then
            retValue := tradeUom;
     elsif pickValue = 4 then
            retValue := quoteValue;
     elsif pickValue = 5 then
            retValue := quoteUom;
     else
            retValue := 0;
     end if;
    return retValue;
end;
-- Function to push the details of Market deal to generate cash flow report.
function fncFundFlow (frmDate in date )
         return number is
        PRAGMA AUTONOMOUS_TRANSACTION;
        varError  varchar2(2048);
	numError  number;
        vartemp  varchar2(2048);
        vartemp1  varchar2(2048);
        vartemp   varchar2(2048);
        numperiodtype   number := 1;
        varPeriodname   varchar2(100);
begin
	numError := 0;
--        update trtran031 set MDEL_MATURITY_MONTH =0;
--        update trtran005 set FCLN_MATURITY_MONTH =0;
--
--   ---market deal
--     --for days
--	update trtran031
--  		set MDEL_MATURITY_MONTH = (MDEL_DUE_DATE- frmdate)
--		where (MDEL_DUE_DATE- frmdate) <=7;
--     --for months
--  	update trtran031
--  		set MDEL_MATURITY_MONTH = round(months_between(MDEL_DUE_DATE,frmdate)) + 7
--		where round(months_between(MDEL_DUE_DATE,frmdate)) > 0;

 ---loan
     --for days
	update trtran005
  		set FCLN_MATURITY_MONTH = (FCLN_MATURITY_TO- frmdate)
              where (FCLN_MATURITY_TO- frmdate) <=7;
     --for months
   	update trtran005
  		set FCLN_MATURITY_MONTH= round(months_between(FCLN_MATURITY_TO,frmdate)) + 7
		where round(months_between(FCLN_MATURITY_TO,frmdate)) > 0;

--	update trsystem992
--		set flow_receipt_amount = 0.00,
--		flow_payment_amount = 0,
--		flow_nett_amount = 0;

      delete from trsystem992 ;
      commit;
        for curflow in
               (select distinct FCLN_CURRENCY_CODE
                  from trtran005
                 where FCLN_CURRENCY_CODE not in (select  distinct  MDEL_CURRENCY_CODE
                                                 from  trtran031 )
                 union
                 select  distinct  MDEL_CURRENCY_CODE
                   from  trtran031)
             loop
                   for numperiodtype in 1 .. 19
                   loop
                     if numperiodtype > 7 then
                         varPeriodname := 'Month' || (numperiodtype - 7);
                     else
                         varPeriodname := 'Day' ||numperiodtype ;
                     end if;

                       insert into  trsystem992 (FLOW_PERIOD_TYPE,FLOW_RECEIPT_AMOUNT, FLOW_PAYMENT_AMOUNT,
                                                  FLOW_NETT_AMOUNT,FLOW_PERIOD_NAME,FLOW_CURRENCY_CODE,
                                                  FLOW_FCY_RECIEPT,FLOW_FCY_PAYMENT)
                                           values(numperiodtype,0,0,
                                                   0,varPeriodname,curflow.FCLN_CURRENCY_CODE,
                                                   0.00,0.00);
                    end loop;
                end loop;
           commit;

--    for curFlow in
--	(select mdel_borrow_invest, mdel_amount_local, mdel_maturity_month,
--                MDEL_CURRENCY_CODE ,MDEL_DEAL_AMOUNT
--             from trtran031)
--	loop
--        	if curFlow.mdel_borrow_invest = 27700001 then     ---borrowing
--			update trsystem992
--				set flow_payment_amount =
--					flow_payment_amount + curFlow.mdel_amount_local,
--                                        FLOW_FCY_PAYMENT =
--                                        FLOW_FCY_PAYMENT + curFlow.MDEL_DEAL_AMOUNT
--
--				where flow_period_type = curFlow.mdel_maturity_month
--                                  and flow_currency_code =  curFlow.MDEL_CURRENCY_CODE;
--		else
--			update trsystem992
--				set flow_receipt_amount =
--					flow_receipt_amount + curFlow.mdel_amount_local,
--                                        FLOW_FCY_RECIEPT =
--                                        FLOW_FCY_RECIEPT + curFlow.MDEL_DEAL_AMOUNT
--				where flow_period_type = curFlow.mdel_maturity_month
--                                  and flow_currency_code =  curFlow.MDEL_CURRENCY_CODE;
--		end if;
--         end loop;
       for curFlow in
	(select FCLN_SANCTIONED_INR,FCLN_MATURITY_MONTH,FCLN_CURRENCY_CODE,
                FCLN_SANCTIONED_FCY
           from trtran005)
	loop
			update trsystem992
				set flow_payment_amount =
					flow_payment_amount + curFlow.FCLN_SANCTIONED_INR,
                                         FLOW_FCY_PAYMENT =
                                         FLOW_FCY_PAYMENT + curflow.FCLN_SANCTIONED_FCY
				where flow_period_type = curFlow.FCLN_MATURITY_MONTH
                                and  flow_currency_code =  curFlow.FCLN_CURRENCY_CODE;
	end loop;
        update trsystem992
        set flow_nett_amount = flow_receipt_amount - flow_payment_amount;

        update trsystem992 set FLOW_CURRENCT_DATE = frmDate;

      commit;
      return numError;
exception
    when others then
       varError := SQLERRM;
       numError := SQLCODE;
       rollback;
       return numError;
end;
--------------------------------------------------------------------------------
FUNCTION fnc_updateoptionrownum
return number
AS
intRowNum NUMBER(5);
BEGIN
  intRowNum:=1;


   FOR cur IN
          (SELECT repe_trade_reference traderef, repc_row_number
           FROM  trsystem987
           WHERE  repe_trade_reference IS NOT NULL
           group by repe_trade_reference, repc_row_number
           ORDER BY repe_trade_reference
                  )

          LOOP
             UPDATE trsystem987 SET repc_row_number = intrownum where repe_trade_reference in (cur.traderef);

     intRowNum:=intRowNum+1;
  END LOOP;
         COMMIT;

 RETURN 0;

 END fnc_updateoptionrownum;
function fncGetOustanding
(frmDate date,
finalCondition varchar)
return number
is
PRAGMA AUTONOMOUS_TRANSACTION;
begin
   delete from trsystem989; commit;

    insert into trsystem989 ( COMPANYCODE,  TRADREFERENCENO,  DEALNO,
      HDGUSERREF,  COMPANYDESC,  BASECRNCY,  OTHERCRNCY,
      COUNTERPRTY,  BUYSELL,  SWAPOUTRIGHT,  FCY,
      EXCHANGERATE,  EXECUTEDDATE,  USERID,  HEDGELCLAMT,
      LOCALRATE,  BASEAMT,MATURITYFROM  ,MATURITYDATE  ,
      OTHERAMOUNT,DEALBANKREFE,DEAL_BUY_SELL,DEAL_EXECUTE_DATE,DEAL_COUNTER_PARTY)
      (select deal_COMPANY_CODE ,HEDG_TRADE_REFERENCE, deal_deal_number,
         deal_user_reference,pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) ,
         pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2),
         pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2),
         pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2),
         pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2),
         pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,2) ,
         --updated by Gouri on 081210 from  UTILTRADEDEAL to UTILHEDGEDEAL
         --function getTradeOutstanding(dealnumber in varchar2,frmDate date,todate date,canceldate date,serialno number)
         PKGFOREXPROCESS.FNCGETOUTSTANDING(deal_DEAL_NUMBER,1,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate),
         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2),
         DEAL_EXECUTE_DATE,DEAL_USER_ID ,
         nvl(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),
         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,5)),0),
         nvl(decode(DEAL_OTHER_CURRENCY,30400003,PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2),PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4)),0),
         pkgRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1),
         DEAL_MATURITY_FROM ,
         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER),
         PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3),DEAL_DEALER_REMARKS,
         deal_buy_sell,deal_execute_date,DEAL_COUNTER_PARTY
         from    TRTRAN004,TRTRAN001
         where   deal_RECORD_STATUS not in(10200006,10200005) and
         HEDG_RECORD_STATUS not in(10200006,10200005) and
         deal_hedge_trade = 26000001 and
         DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER (+)  and
         deal_serial_number = hedg_deal_serial (+) and
         ((deal_process_complete = 12400001  and deal_complete_date > frmDate) or deal_process_complete = 12400002) and
         deal_execute_date <= frmDate );

         commit;

       for Fval in (select pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE,2) AS TRADECRNCY,
                               pkgreturncursor.fncgetdescription(FCLN_LOAN_TYPE,1) AS IMPORTEXPORT,
                               pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK,2) as LOCALBANK,
                               FCLN_LOAN_NUMBER as TradeReference,
                               FCLN_SANCTION_DATE as RefDate,
                                 --PKGFOREXPROCESS.FNCGETOUTSTANDING(FCLN_LOAN_NUMBER, 0,0,gconst.AMOUNTFCY,frmDate) AS TRADFCY,
                               FCLN_SANCTIONED_FCY AS TRADFCY,
                               FCLN_SANCTIONED_INR AS TRADEINR,
                               FCLN_CONVERSION_RATE AS TRADERATE,' ' as ProductDescription,FCLN_BANK_REFERENCE as UserReference,
                               FCLN_MATURITY_FROM as TradeMaturityFrm ,FCLN_MATURITY_TO as TradeMaturity,fcln_loan_number as Loannumber
                        from   trtran005, trsystem989
                        where  fcln_RECORD_STATUS not in(10200006,10200005)
                        and fcln_loan_number=TRADREFERENCENO
                        and ((fcln_process_complete = 12400001  and fcln_complete_date > frmDate) or fcln_process_complete = 12400002)
                        and fcln_sanction_date <= frmDate
                        )
         loop
        update trsystem989 set TTRADECRNCY=fval.TRADECRNCY, TIMPORTEXPORT=fval.IMPORTEXPORT,
          TLOCALBANK=fval.LOCALBANK,TTRADEREFERENCE=fval.TRADEREFERENCE,TTRADFCY=fval.TRADFCY,
          TTRADEINR=fval.TRADEINR,TTRADERATE=nvl(fval.TRADERATE,0),TPRODUCTDESCRIPTION=fval.PRODUCTDESCRIPTION,
          TUSERREFERENCE=fval.USERREFERENCE,TTRADEMATURITY=fval.TRADEMATURITY,
          TTRADEMATURITYFRM=fval.TRADEMATURITYFRM, TTRADEDATE=fval.RefDate
          where TRADREFERENCENO=fval.Loannumber;

    end loop;
    for Tval in (select pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) AS TRADECRNCY,
                               pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) AS IMPORTEXPORT,
                               pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) as LOCALBANK,
                               TRAD_TRADE_REFERENCE as TradeReference,
                               TRAD_REFERENCE_DATE as refDate,
                               PKGFOREXPROCESS.FNCGETOUTSTANDING(trad_trade_reference, 0,0,gconst.AMOUNTFCY,frmDate) AS TRADFCY,
                               TRAD_TRADE_INR AS TRADEINR,
                               TRAD_TRADE_RATE AS TRADERATE,TRAD_PRODUCT_DESCRIPTION as ProductDescription,TRAD_USER_REFERENCE as UserReference,
                               TRAD_MATURITY_FROM as TradeMaturityFrm ,TRAD_MATURITY_DATE as TradeMaturity,TRAD_TRADE_REFERENCE as Traderef
                        from   trtran002,trsystem989
                        where  TRAD_TRADE_REFERENCE=TRADREFERENCENO
                        and ((trad_process_complete = 12400001  and trad_complete_date > frmDate) or trad_process_complete = 12400002)
                        and trad_reference_date <= frmDate
                        and TRAD_RECORD_STATUS not in(10200006,10200005))
      loop
       update trsystem989 set TTRADECRNCY=Tval.TRADECRNCY, TIMPORTEXPORT=Tval.IMPORTEXPORT,
          TLOCALBANK=Tval.LOCALBANK,TTRADEREFERENCE=Tval.TRADEREFERENCE,TTRADFCY=Tval.TRADFCY,
          TTRADEINR=Tval.TRADEINR,TTRADERATE=nvl(Tval.TRADERATE,0),TPRODUCTDESCRIPTION=Tval.PRODUCTDESCRIPTION,
          TUSERREFERENCE=Tval.USERREFERENCE,TTRADEMATURITY=Tval.TRADEMATURITY,
          TTRADEMATURITYFRM=Tval.TRADEMATURITYFRM,TTRADEDATE=Tval.RefDate
          where TRADREFERENCENO=Tval.Traderef;
     end loop;

     commit;
    return 0;

end ;

Function getCompanyNameFooter return varchar2 is
    CompanyName varchar2(50);
    --varTemp
begin
    select prmc_company_name into CompanyName
      from trsystem051
      where prmc_effective_date = (select max(prmc_effective_date)  from trsystem051);
     return CompanyName;
end;

END PKGRETURNREPORT;
/