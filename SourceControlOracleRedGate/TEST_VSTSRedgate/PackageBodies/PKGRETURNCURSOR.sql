CREATE OR REPLACE PACKAGE BODY "TEST_VSTSRedgate"."PKGRETURNCURSOR" is
--  created on 10/07/2007
--  last modified on 19/07/2007
function FncReturnACL
    (acllist in varchar2)
    return varchar2 is
--  created on 23/03/2007
--  last modified on 19/03/2007
    numerror number;
    numsub number;
    varacllist varchar2(200);
    vartemp varchar2(15);
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    curpickup gconst.datacursor;
    begin
      varmessage := 'extracting acl list';
      numerror := 1;

      for numsub in 1 .. length(acllist)
      loop

        if substr(acllist,   numsub,   1) = 'y' then

          if numsub > 1 then
            varacllist := varacllist || ',';
          end if;

            select pick_short_description
            into vartemp
            from pickupmaster
            where pick_key_group = 105
            and pick_key_number = numsub;

            varacllist := varacllist || vartemp;
          end if;
      end loop;

      return varacllist;

      exception
      when others then
        varerror := 'retacl: ' || varmessage || varoperation || varerror;
        raise_application_error(-20101,   varerror);
      return null;
end;

function fncGenerateMenu
    (userid in varchar2)
    return number is
--  created on 27/06/2007
-- this program generates menu dynamically. this checks the acl of each
-- program unit and searches for its parents in the hirearchy and adds
-- them to the menu list
   PRAGMA AUTONOMOUS_TRANSACTION;

    numerror number;
    numrecords number;
    nummenulevel number(5);
    numparentid number(5);
    nummenuid number(5);
    numgroupcode number(8);

    numShortCut  number(8);
    numShortCutNo number(8);
    numrunsprogram number(8);

    varmenuid varchar2(15);
    varuserid varchar2(30);
    varprogramunit varchar2(30);
    vardescription varchar2(50);
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;

    cursor curmenu is
    select actl_program_unit programunit,
      decode(actl_access_insert, 12400001,'Add,','') ||
        decode(actl_access_edit, 12400001,'Edit,','') ||
        decode(actl_access_delete,12400001,'Delete,','') ||
        decode(actl_access_confirm,12400001,'Confirm,','') ||
        decode(actl_access_view, 12400001, 'View,','') ||
        decode(actl_access_print,12400001,'Print,','') ||
        decode(actl_access_save, 12400001,  'Save', '') ProgramACL
      from accessfile, menufile
      where actl_program_unit = menu_program_unit
      and actl_group_code = numgroupcode
      and actl_user_id = varuserid
      and menu_child_level<5
      and actl_record_status not in(gconst.statusinactive,   gconst.statusdeleted);

      currec curmenu % rowtype;

    begin
      numerror := 0;
      numerror := 1;
      varoperation := 'extracting user / group information';

      select user_group_code
        into numgroupcode
        from usermaster
        where user_user_id = userid
        and user_record_status not in(gconst.statusinactive,   gconst.statusdeleted);

      numerror := 2;
      varoperation := 'checking user access control rights';
      select count(*)
        into numrecords
        from accessfile
        where actl_user_id = userid;

      if numrecords > 0 then
        varuserid := userid;
      else
        varuserid := '.';
      end if;

      numerror := 3;
      varoperation := 'deleting old records for user: ' || userid;

      delete from trsystem998
      where tmnu_user_id = userid;

      numerror := 4;
      varoperation := 'processing menu items for user: ' || userid;

      open curmenu;
      loop
        fetch curmenu into currec;
        exit when curmenu % notfound;

        varprogramunit := currec.programunit;
        varmessage := 'menu for user: ' || userid || ' item: ' || varprogramunit;
      --modified by reddy on 03-apr-2008
        select menu_menu_id, menu_description, menu_child_level, menu_parent_id,
          menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
          into nummenuid,vardescription,nummenulevel, numparentid,
          numrunsprogram,numShortCut,numShortCutNo
          from menufile
          where menu_program_unit = varprogramunit
          and menu_record_status not in(gconst.statusinactive,gconst.statusdeleted);

        insert
          into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
            tmnu_program_unit,tmnu_program_acl,tmnu_child_level,tmnu_parent_id,
            tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
            values(userid,nummenuid,vardescription,varprogramunit,
            currec.programacl,nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo);

        if nummenulevel > 1 then
          select menu_menu_id, menu_description, menu_child_level, menu_parent_id,
            menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
            into nummenuid, vardescription, nummenulevel, numparentid,
            numrunsprogram,numShortCut,numShortCutNo
            from menufile
            where menu_menu_id = numparentid
            and menu_record_status not in(gconst.statusinactive,gconst.statusdeleted);

            insert
              into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
                tmnu_program_unit, tmnu_program_acl, tmnu_child_level,tmnu_parent_id,
                tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
                values(userid,nummenuid,vardescription,null,null,nummenulevel,numparentid,
                numrunsprogram,numShortCut,numShortCutNo);

          if nummenulevel = 1 then
              nummenulevel := 0;
          end if;

        end if;

        if nummenulevel > 1 then
          select menu_menu_id, menu_description, menu_child_level,menu_parent_id,
            menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
            into nummenuid,vardescription, nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo
            from menufile
            where menu_menu_id = numparentid
            and menu_record_status not in(gconst.statusinactive,   gconst.statusdeleted);

          insert into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
            tmnu_program_unit, tmnu_program_acl, tmnu_child_level, tmnu_parent_id,
            tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
            values(userid, nummenuid,vardescription,null,null,nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo);

          if nummenulevel = 1 then
            nummenulevel := 0;
          end if;

        end if;

        if nummenulevel > 1 then
          select menu_menu_id, menu_description, menu_child_level, menu_parent_id,
          menu_runs_program,fncgetShortcutNumber(menu_short_cut,menu_short_key),menu_short_number
          into nummenuid,vardescription,nummenulevel,numparentid,
          numrunsprogram,numShortCut,numShortCutNo
          from menufile
          where menu_menu_id = numparentid and menu_record_status
          not in(gconst.statusinactive, gconst.statusdeleted);

          insert into trsystem998(tmnu_user_id,tmnu_menu_id,tmnu_menu_description,
            tmnu_program_unit,tmnu_program_acl,tmnu_child_level,tmnu_parent_id,
            tmnu_runs_program,tmnu_short_cut,tmnu_short_number)
            values(userid,nummenuid,vardescription,null,null,nummenulevel,numparentid,
            numrunsprogram,numShortCut,numShortCutNo);

        end if;

    end loop;

    commit;
    numerror := 0;
    return numerror;

    exception
    when others then
      rollback;
      numerror := sqlcode;
      varerror := sqlerrm;
      varerror := gconst.fncreturnerror('genmenu',   numerror,   varmessage,   varoperation,   varerror);
      raise_application_error(-20101,   varerror);
      return numerror;
end fncgeneratemenu;

function fncgetShortcutNumber
     (ShortCut in number,
      ShortCutKey in number)
      return number is

      numTemp number(8);
      numTemp1 number(8);
      vartemp varchar(15);

      begin

      --29300001	Control
      --29300002	Alter
      --29400001 to 294000026   From A to Z
      vartemp := substr (to_char(ShortCutKey),7,2);
      if (ShortCut=29300001) then  --Control Key
          numTemp:=131136+to_number(vartemp); --Here I am Convert the Select ShortCut to Number
      elsif (ShortCut=29300002) then  --Alter Key
          numTemp:=262208+to_number(vartemp); --Here I am Convert the Select ShortCut to Number
      end if;
   return numtemp;

end fncgetShortcutNumber;

function fncGetDescription
    ( pickkeyvalue in number,
      descriptiontype in number)
      return varchar2 is
--  created on 22/03/2007
      numerror number;
      vardescription varchar2(50);
      varoperation gconst.gvaroperation%type;
      varmessage gconst.gvarmessage%type;
      varerror gconst.gvarerror%type;
      begin
        varmessage := 'getting pickup description for: ' || pickkeyvalue;
        varoperation := 'extracting description';

        begin
          select decode(descriptiontype,   gconst.pickuplong,   pick_long_description,   gconst.pickupshort,   pick_short_description,   'unknowvalue')
            into vardescription
            from pickupmaster
            where pick_key_value = pickkeyvalue
            and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted);
         exception
          when no_data_found then
            vardescription := '';
        end;

       return vardescription;

      exception
      when others then
        numerror := sqlcode;
        varerror := sqlerrm;
        varerror := gconst.fncreturnerror('getdesc',   numerror,   varmessage,   varoperation,   varerror);
        raise_application_error(-20101,   varerror);
        return vardescription;

end fncgetdescription;


FUNCTION fncgethumanreadablefilesize (p_size IN NUMBER) 
RETURN VARCHAR2
AS
  v_i NUMBER;
  TYPE array_t IS VARRAY(5) OF VARCHAR2(20);
  v_array array_t := array_t(' Bytes', ' KB', ' MB',' GB',' TB');
  varoperation gconst.gvaroperation%type;
BEGIN
  varoperation := 'Coverting File Size';
  v_i := floor(LOG(1024, p_size));
  RETURN to_char(round(p_size/POWER(1024, v_i), 2))||v_array(v_i+1);
END fncgethumanreadablefilesize;




FUNCTION   fncGetSettlementRate (TradeReference Varchar2 ,SerialNumber Number) return number 
  AS 
  numRate Number(15,4);
  BEGIN 
    SELECT SUM(CDEL_CANCEL_AMOUNT * CDEL_CANCEL_RATE) / SUM(CDEL_CANCEL_AMOUNT)
    INTO numRate
    FROM TRTRAN006,
      TRTRAN001
    WHERE CDEL_DEAL_NUMBER      = DEAL_DEAL_NUMBER
    AND CDEL_RECORD_STATUS NOT IN(10200005,10200006)
    AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
    AND CDEL_CANCEL_TYPE        = 27000002
    AND CDEL_TRADE_REFERENCE    = TradeReference;
 RETURN NUMRATE;
end  fncGetSettlementRate;
 

 function fncReturnCursor(xmlparam in gconst.gxmltype%type) return gconst.datacursor is --  created on 18/08/2006
     --  last modified on 29/08/2006
     --  this function is a wrapper for prcreturncursor
     numerror number;
     numinfotype number(4);
     varoperation gconst.gvaroperation%type;
     varmessage gconst.gvarmessage%type;
     varerror gconst.gvarerror%type;
     clbparam gconst.gclobtype%type;
     clberror gconst.gclobtype%type;
     clbprocess gconst.gclobtype%type;
     curprocess gconst.datacursor;
     error_occurred

     exception;
     begin
        varoperation := 'getting query type';
        numinfotype := gconst.fncxmlextract(xmlparam,   'query',   numinfotype);

        varmessage := 'extracting cursor for ' || numinfotype;

        varoperation := 'assigning parameters';
        clbparam := xmlparam.getclobval();

        varoperation := 'getting cursor';
        prcreturncursor(clbparam,   clberror,   clbprocess,   curprocess);

        numerror := gconst.fncreturnparam(clberror,   'error');
        varerror := gconst.fncreturnparam(clberror,   'message');

        if numerror <> 0 then
          raise error_occurred;
        end if;

        return curprocess;

    exception
    when error_occurred then
      varerror := 'retcursor(f): ' || varmessage || varoperation || varerror;
      raise_application_error(-20101,   varerror);
      return null;
    when others then
      varerror := 'retcursor(f): ' || varmessage || varoperation || varerror;
      raise_application_error(-20101,   varerror);
      return null;
end;

--
--procedure prcGetDictionary
--    ( paramdata in gconst.gclobtype%type,
--      errordata out nocopy gconst.gclobtype%type,
--      processdata out nocopy gconst.gclobtype%type,
--      gencursor out gconst.datacursor,
--      nextcursor out gconst.datacursor) is
----  created on 08/05/2007
--    numerror number;
--    numrecords number;
--    numrecordsets number;
--    varoperation gconst.gvaroperation%type;
--    varmessage gconst.gvarmessage%type;
--    varerror gconst.gvarerror%type;
--
--    begin
--      numerror := 0;
--      varmessage := 'getting cursors for dictionary';
--
--      numerror := 1;
--      varoperation := 'extracting pick group for dictionary';
--
--    open gencursor for
--    select pick_key_value keyvalue,
--        to_char(pick_key_value) keystring,
--        pick_short_description shortdescription,
--        pick_long_description longdescription,
--        pick_key_group keytype
--      from pickupmaster
--      where pick_key_number > 0
--      and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
--      order by pick_key_value;
--
--    numerror := 2;
--    varoperation := 'extracting relations for dictionary';
--
--    open nextcursor for
--    select erel_main_entity mainentity,
--      to_char(pick_key_value) keystring,
--      erel_entity_relation keyvalue,
--      pick_short_description shortdescription,
--      pick_long_description longdescription,
--      pick_key_group keytype
--      from relationtable,
--      pickupmaster
--      where erel_entity_relation = pick_key_value
--      order by erel_main_entity,
--      erel_entity_relation;
--
--    processdata := paramdata;
--    numerror := 0;
--    varerror := ' : successful operation';
--    errordata := gconst.fncreturnerror('retcursor',   varmessage,   2,   numerror,   varoperation,   varerror);
--
--  exception
--  when others then
--    numrecordsets := 0;
--    numerror := sqlcode;
--    varerror := sqlerrm || ' - ' || varerror;
--    errordata := gconst.fncreturnerror('getdictionary',   varmessage,   0,   numerror,   varoperation,   varerror);
--end prcGetDictionary;

procedure prcGetDictionary
    ( paramdata in gconst.gclobtype%type,
      errordata out nocopy gconst.gclobtype%type,
      processdata out nocopy gconst.gclobtype%type,
      gencursor out gconst.datacursor,
      nextcursor out gconst.datacursor) is
--  created on 08/05/2007
    numerror number;
    numrecords number;
    numrecordsets number;
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    xmldoc xmltype;
    varUserID varchar(50);
    begin
      numerror := 0;
      varmessage := 'getting cursors for dictionary';
      xmldoc:= xmltype(ParamData);
      varUserID:=Gconst.fncxmlextract(xmldoc,'UserCode',VarUserID);

      numerror := 1;
      varoperation := 'extracting pick group for dictionary';

    open gencursor for
    select pick_key_value keyvalue,
        to_char(pick_key_value) keystring,
        pick_short_description shortdescription,
        pick_long_description longdescription,
        pick_key_group keytype
      from pickupmaster
      where pick_key_number > 0
      and pick_key_group !=301
      and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
      and pick_company_code in(select usco_company_code from trsystem022a
                                   where usco_user_id =varUserId
                               union
                               select 30199999 from dual)
      --order by pick_key_value
   union all
    select pick_key_value keyvalue,
        to_char(pick_key_value) keystring,
        pick_short_description shortdescription,
        pick_long_description longdescription,
        pick_key_group keytype
      from pickupmaster
      where pick_key_number > 0
      and pick_key_group =301
      and pick_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
      and pick_key_value  in( select usco_company_code from trsystem022a
                                   where usco_user_id =varUserId);
      --order by pick_key_value


    numerror := 2;
    varoperation := 'extracting relations for dictionary';


    open nextcursor for
    select erel_main_entity mainentity,
      to_char(pick_key_value) keystring,
      erel_entity_relation keyvalue,
      pick_short_description shortdescription,
      pick_long_description longdescription,
      pick_key_group keytype
      from relationtable,
      pickupmaster
      where erel_entity_relation = pick_key_value
      order by erel_main_entity,
      erel_entity_relation;

    processdata := paramdata;
    numerror := 0;
    varerror := ' : successful operation';
    errordata := gconst.fncreturnerror('retcursor',   varmessage,   2,   numerror,   varoperation,   varerror);

  exception
  when others then
    numrecordsets := 0;
    numerror := sqlcode;
    varerror := sqlerrm || ' - ' || varerror;
    errordata := gconst.fncreturnerror('getdictionary',   varmessage,   0,   numerror,   varoperation,   varerror);
end prcGetDictionary;

Function fncRollover
        (dealnumber in varchar2)
        return date
        is
-- Created on 12/05/08
    numError            number;
    datDueDate          date;
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
Begin
    numError := 0;
    varMessage := 'Sending rollover Details';

    Begin
      select lmod_maturity_date
        into datDueDate
        from extensionhedgedeal
        where lmod_reference_number = DealNumber
        and lmod_serial_number =
        (select max(lmod_serial_number) from  extensionhedgedeal
          where lmod_reference_number = dealnumber
          and lmod_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
        and lmod_record_status in
        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
    Exception
      when no_data_found then
        select deal_maturity_date
          into datDueDate
          from hedgedealregister
          where deal_deal_number = dealnumber
          and deal_serial_number= (select max(deal_serial_number)
                                     from hedgedealregister
                                    where deal_deal_number=dealnumber
                                   and deal_record_status not in (10200005,10200006))
          and deal_record_status not in(10200005,10200006);
    End;


    Return datDueDate;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Rollover(1)', numError, varMessage,
                      varOperation, varError);
      raise_application_error(-20101, varError);
      return datDueDate;
End fncRollOver;

function fncDealProfile(DealNumber varchar2)
         return number
   is
   PRAGMA AUTONOMOUS_TRANSACTION;
   vardealnumber  varchar2(25 byte);
   numbuysell     number;
   numhedtrad     number;
   numswapout     number;
   numdealtype    number;
   numcounter     number;
   numbasecur     number;
   numothrcur     number;
   numMcode       number;
   numPcomplt     number;
   varTref        varchar2(25 byte);
   datComplete    date;
   datdefault     date:='' ;
   vardefault     varchar2(25 byte):='';
   numdefault     number:=0;
   numError       number:=0;
   varOperation   GConst.gvarOperation%Type;
   varMessage     GConst.gvarMessage%Type;
   varError       GConst.gvarError%Type;
  begin

     delete  from trsystem991;
     commit;

        --step 1
          select DEAL_DEAL_NUMBER,DEAL_HEDGE_TRADE ,DEAL_BUY_SELL,DEAL_SWAP_OUTRIGHT,DEAL_DEAL_TYPE,
                 DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,
                 DEAL_MATURITY_CODE,DEAL_PROCESS_COMPLETE,DEAL_COMPLETE_DATE,HEDG_TRADE_REFERENCE into
                 vardealnumber,numhedtrad,numbuysell,numswapout,numdealtype,
                 numcounter,numbasecur,numothrcur,
                 numMcode,numPcomplt,datComplete,varTref
            from trtran001,trtran004
            where DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER(+)
              and DEAL_SERIAL_NUMBER =HEDG_DEAL_SERIAL(+)
              and DEAL_DEAL_NUMBER = DealNumber;

        --entered
         insert into trsystem991
                (DP_DEAL_NUMBER,DP_ECR_DATE,DP_BUY_SELL,DP_SWAP_OUTRIGHT,
                 DP_DEAL_TYPE,DP_COUNTER_PARTY,DP_BASE_CURRENCY,DP_OTHER_CURRENCY,
                 DP_ECR_RATE,DP_ECRLOCAL_RATE,DP_ECRBASE_AMOUNT,DP_ECROTHER_AMOUNT,
                 DP_ECRAMOUNT_LOCAL,DP_MATURITY_CODE,DP_ERMATURITY_FROM,DP_ERMATURITY_DATE,
                 DP_ERMATURITY_MONTH,DP_ECRUSER_ID,DP_CONFIRM_DATE,DP_ECREXECUTE_TIME,
                 DP_PROCESS_COMPLETE,DP_COMPLETE_DATE,DP_TRADE_REFERENCE,DP_CANCEL_TYPE,
                 DP_CRPROFIT_LOSS,DP_CRPL_VOUCHER,DP_STATUS,DP_STATUS_NO,DP_DELIVERED_STATUS)
          select DEAL_DEAL_NUMBER,DEAL_EXECUTE_DATE,DEAL_BUY_SELL,DEAL_SWAP_OUTRIGHT,
                 DEAL_DEAL_TYPE,DEAL_COUNTER_PARTY,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,
                 DEAL_EXCHANGE_RATE,DEAL_LOCAL_RATE,DEAL_BASE_AMOUNT,DEAL_OTHER_AMOUNT,
                 DEAL_AMOUNT_LOCAL,DEAL_MATURITY_CODE,DEAL_MATURITY_FROM,DEAL_MATURITY_DATE,
                 DEAL_MATURITY_MONTH,DEAL_USER_ID,datdefault ,DEAL_EXECUTE_TIME ,
                 DEAL_PROCESS_COMPLETE,datdefault ,HEDG_TRADE_REFERENCE,0,
                 numdefault ,vardefault,'Entered',numdefault,numdefault
            from trtran001,trtran004
           where DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER(+)
             and DEAL_SERIAL_NUMBER =HEDG_DEAL_SERIAL(+)
             and DEAL_DEAL_NUMBER =DealNumber
             and DEAL_RECORD_STATUS not in (10200005,10200006) ;
              --another condition to be added to check the record status
             commit;
        --cancelled
           insert into trsystem991
                 (DP_DEAL_NUMBER,DP_ECR_DATE,DP_BUY_SELL,DP_SWAP_OUTRIGHT,
                  DP_DEAL_TYPE,DP_COUNTER_PARTY,DP_BASE_CURRENCY,DP_OTHER_CURRENCY,
                  DP_ECR_RATE,DP_ECRLOCAL_RATE,DP_ECRBASE_AMOUNT,DP_ECROTHER_AMOUNT,
                  DP_ECRAMOUNT_LOCAL,DP_MATURITY_CODE,DP_ERMATURITY_FROM,DP_ERMATURITY_DATE,
                  DP_ERMATURITY_MONTH,DP_ECRUSER_ID,DP_CONFIRM_DATE,DP_ECREXECUTE_TIME,
                  DP_PROCESS_COMPLETE,DP_COMPLETE_DATE,DP_TRADE_REFERENCE,DP_CANCEL_TYPE,
                  DP_CRPROFIT_LOSS,DP_CRPL_VOUCHER,
                  DP_STATUS,
                  DP_STATUS_NO,DP_DELIVERED_STATUS)
          select  vardealnumber, CDEL_CANCEL_DATE,decode(numbuysell,25300001,25300002,25300002,25300001),numswapout,
                  numdealtype,numcounter,numbasecur,numothrcur,
                  CDEL_CANCEL_RATE,CDEL_LOCAL_RATE,CDEL_CANCEL_AMOUNT,CDEL_OTHER_AMOUNT,
                  CDEL_CANCEL_INR,numMcode,datdefault,datdefault,
                  0,CDEL_USER_ID,datdefault,vardefault,
                  numPcomplt,datcomplete,varTref,CDEL_CANCEL_TYPE,
                  decode(CDEL_CANCEL_TYPE,27000002,0,CDEL_PROFIT_LOSS),CDEL_PL_VOUCHER,
                  decode(CDEL_CANCEL_TYPE,27000002,'Delivered','Cancelled'),
                  (select max(CDEL_REVERSE_SERIAL)
                     from  trtran006 B
                    where B.CDEL_DEAL_NUMBER=DealNumber), numdefault
           from  trtran006
          where  CDEL_DEAL_NUMBER = DealNumber
           -- and  CDEL_DEAL_NUMBER not in (select LMOD_REFERENCE_NUMBER from trtran009)
            and  CDEL_RECORD_STATUS not in (10200005,10200006)
        order by CDEL_REVERSE_SERIAL ;
          --another condition to be added to check the record status
         commit;
        if numhedtrad in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
        ---rolledover
           insert into trsystem991
                 (DP_DEAL_NUMBER,DP_ECR_DATE,DP_BUY_SELL,DP_SWAP_OUTRIGHT,
                  DP_DEAL_TYPE,DP_COUNTER_PARTY,DP_BASE_CURRENCY,DP_OTHER_CURRENCY,
                  DP_ECR_RATE,DP_ECRLOCAL_RATE,DP_ECRBASE_AMOUNT,DP_ECROTHER_AMOUNT,
                  DP_ECRAMOUNT_LOCAL,DP_MATURITY_CODE,DP_ERMATURITY_FROM,DP_ERMATURITY_DATE,
                  DP_ERMATURITY_MONTH,DP_ECRUSER_ID,DP_CONFIRM_DATE,DP_ECREXECUTE_TIME,
                  DP_PROCESS_COMPLETE,DP_COMPLETE_DATE,DP_TRADE_REFERENCE,DP_CANCEL_TYPE,
                  DP_CRPROFIT_LOSS,DP_CRPL_VOUCHER,DP_STATUS,
                  DP_STATUS_NO,DP_DELIVERED_STATUS)
           select vardealnumber, LMOD_CHANGE_DATE , numbuysell,numswapout,
                  numdealtype,numcounter,numbasecur,numothrcur,
                  LMOD_ENHANCED_RATE,LMOD_LOCAL_RATE,LMOD_ENHANCED_FCY,LMOD_OTHER_AMOUNT,
                  LMOD_LOCAL_AMOUNT,numMcode,LMOD_MATURITY_FROM,LMOD_MATURITY_DATE,
                  numdefault,vardefault,datdefault,vardefault,
                  numPcomplt,datcomplete,varTref,numdefault,
                  LMOD_PROFIT_LOSS,LMOD_PL_VOUCHER,'Rolledover',
                  (select max(LMOD_REFERENCE_SERIAL)
                   from  trtran009 B
                   where B.LMOD_REFERENCE_NUMBER=DealNumber), 0
              from trtran009
             where LMOD_REFERENCE_NUMBER = DealNumber
               and LMOD_RECORD_STATUS not in (10200005,10200006)
          order by LMOD_REFERENCE_SERIAL ;
             --another condition to be added to check the record status
         end if ;
             commit;
      return  numError;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Rollover(1)', numError, varMessage,
                      varOperation, varError);
      raise_application_error(-20101, varError);
      return  numError;
end ;




----Changed the Declaration to get current a/c Voucher Date according to the bank
--Function fncRollover
--        (dealnumber in varchar2,
--         CurrentACDate in number:=0 )
--        return date
--        is
---- Created on 12/05/08
--    numError            number;
--    datDueDate          date;
--    VoucherPass         number;
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Sending rollover Details';
--
--    Begin
--      select lmod_maturity_date
--        into datDueDate
--        from extensionhedgedeal
--        where lmod_reference_number = DealNumber
--        and lmod_serial_number =
--        (select max(lmod_serial_number) from  extensionhedgedeal
--          where lmod_reference_number = dealnumber
--          and lmod_record_status in
--          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
--    Exception
--      when no_data_found then
--        if CurrentACDate =0 then
--          select deal_maturity_date
--            into datDueDate
--            from hedgedealregister
--            where deal_deal_number = dealnumber;
--        else
--             select lbnk_voucher_pass
--              into VoucherPass
--              from bankmaster
--              where lbnk_pick_code=(select deal_counter_party
--                                     from hedgedealregister
--                                    where deal_deal_number =dealnumber);
--
--
--        end if;
--    End;
--
--
--    Return datDueDate;
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Rollover(1)', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return datDueDate;
--End fncRollOver;


--Function fncRollover
--        (   dealnumber in varchar2,
--            ReturnType in number)
--        Return number
--        is
---- Created on 09/05/2008
--
--    numError            number;
--    numenhancedFcy      number(15,4);
--    numenhancedrate     number(15,6);
--    numotheramount      number(15,6);
--    numlocalrate        number(15,6);
--    numlocalamount      number(15,6);
--    numAmount           number(15,6);
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Sending rollover Details';
--
--    Begin
--      select lmod_enhanced_fcy,lmod_enhanced_rate,lmod_other_amount,
--             lmod_local_rate, lmod_local_amount
--        into numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--        from extensionhedgedeal
--        where lmod_reference_number = dealnumber
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
--    Exception
--      when no_data_found then
--        select deal_base_amount, deal_exchange_rate, deal_other_amount,
--              deal_local_rate,deal_amount_local
--          into  numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--          from hedgedealregister
--          where deal_deal_number = dealnumber;
--    End;
--
--    if ReturnType = BASEAMOUNT then
--      numAmount := numenhancedFcy;
--    elsif ReturnType = EXCHANGERATE then
--      numAmount := numenhancedrate;
--    elsif  ReturnType =  OTHERAMOUNT then
--      numAmount := numotheramount;
--    elsif ReturnType = LOCALRATE then
--      numAmount := numlocalrate;
--    elsif  ReturnType =  AMOUNTLOCAL then
--      numAmount := numlocalamount;
--    end if;
--
--    Return numAmount;
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Rollover', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return numError;
--End fncRollOver;

--Function fncRollover
--        (   dealnumber in varchar2,
--            ReturnType in number)
--        Return number
--        is
---- Created on 09/05/2008
--
--    numError            number;
--    numenhancedFcy      number(15,6);
--    numenhancedrate     number(15,6);
--    numotheramount      number(15,6);
--    numlocalrate        number(15,6);
--    numlocalamount      number(15,6);
--    numAmount           number(15,6);
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--Begin
--    numError := 0;
--    varMessage := 'Sending rollover Details';
--
--    Begin
--      select lmod_enhanced_fcy,lmod_enhanced_rate,lmod_other_amount,
--             lmod_local_rate, lmod_local_amount
--        into numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--        from extensionhedgedeal
--        where lmod_reference_number = dealnumber
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
--    Exception
--      when no_data_found then
--        select deal_base_amount, deal_exchange_rate, deal_other_amount,
--              deal_local_rate,deal_amount_local
--          into  numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--          from hedgedealregister
--          where deal_deal_number = dealnumber;
--    End;
--
--    if ReturnType = BASEAMOUNT then
--      numAmount := numenhancedFcy;
--    elsif ReturnType = EXCHANGERATE then
--      numAmount := numenhancedrate;
--    elsif  ReturnType =  OTHERAMOUNT then
--      numAmount := numotheramount;
--    elsif ReturnType = LOCALRATE then
--      numAmount := numlocalrate;
--    elsif  ReturnType =  AMOUNTLOCAL then
--      numAmount := numlocalamount;
--    end if;
--
--    Return numAmount;
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Rollover', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return numError;
--End fncRollOver;
Function fncRollover
        (   DealNumber in varchar2,
            ReturnType in number)
        Return number
        is
-- Created on 09/05/2008

    numError            number;
    numEnhancedFcy      number(15,2);
    numEnhancedRate     number(15,6);
    numOtherAmount      number(15,2);
    numlocalrate        number(15,6);
    numlocalamount      number(15,2);
    numAmount           number(20,6);
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
Begin
    numError := 0;
    varMessage := 'Sending rollover Details' || DealNumber;

    Begin
      select lmod_enhanced_fcy,lmod_enhanced_rate,lmod_other_amount,
        lmod_local_rate, lmod_local_amount
        into numEnhancedFcy, numEnhancedRate, numOtherAmount,
             numlocalrate,numlocalamount
        from ExtensionHedgedeal
        where lmod_reference_number = DealNumber
        and lmod_serial_number =
        (select max(lmod_serial_number)
          from  ExtensionHedgedeal
          where lmod_reference_number = DealNumber
          and lmod_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
        and lmod_record_status in
        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);

--      select (lmod_enhanced_fcy-b.reversedamount),lmod_enhanced_rate,lmod_other_amount,
--             lmod_local_rate, lmod_local_amount
--        into numenhancedFcy, numenhancedrate, numotheramount,
--             numlocalrate,numlocalamount
--        from extensionhedgedeal,(select nvl(sum
--        (cdel_cancel_amount),0) as reversedAmount from trtran006 where cdel_deal_number =dealnumber )b
--        where lmod_reference_number = dealnumber
--          and lmod_serial_number =(select max(lmod_serial_number) from  extensionhedgedeal
--                                  where lmod_reference_number = dealnumber
--                                  and lmod_record_status in
--                                (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))
--        and lmod_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
    Exception
      when no_data_found then
         select deal_base_amount, deal_exchange_rate, deal_other_amount,
                deal_local_rate,deal_amount_local
           into numEnhancedFcy, numEnhancedRate, numOtherAmount,
                numLocalRate,numlocalAmount
           from HedgeDealregister
          where deal_deal_number = DealNumber
            and deal_serial_number= (select max(deal_serial_number)
                                       from hedgedealregister
                                       where deal_deal_number=dealnumber
                                         and deal_record_status not in (10200005,10200006))
            and deal_record_status not in(10200005,10200006);
     End;

    if ReturnType = BASEAMOUNT then
      numAmount := numenhancedFcy;
    elsif ReturnType = EXCHANGERATE then
      numAmount := numenhancedrate;
    elsif  ReturnType =  OTHERAMOUNT then
      numAmount := numotheramount;
    elsif ReturnType = LOCALRATE then
      numAmount := numlocalrate;
    elsif  ReturnType =  AMOUNTLOCAL then
      numAmount := numlocalamount;
    end if;

    Return numAmount;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Rollover', numError, varMessage,
                      varOperation, varError);
      raise_application_error(-20101, varError);
      return numError;
End fncRollOver;

--Function fncGraphCursor
--    (   UserIDs in Varchar2,
--        CurrencyCode in number,
--        AsonDate in Date)
--    Return number
--    is
--    table_not_exists    Exception;
--    PRAGMA EXCEPTION_INIT(table_not_exists, -942);
--    numError            number;
--    numSub              number(2);
--    numTemp             number(3);
--    numTemp1            number(3);
--    numTemp2            number(3);
--    numExchange         number(15,6);
--    numHolding          number(15,6);
--    varTemp             varchar2(50);
--    varQuery            varchar2(4000);
--    varOperation        GConst.gvarOperation%Type;
--    varMessage          GConst.gvarMessage%Type;
--    varError            GConst.gvarError%Type;
--    Type TypeUsers      is table of varchar2(50);
--    typUser             TypeUsers;
--
--    cursor dealRate (DealerName varchar2)
--    is
--    select deal_exchange_rate, deal_dealer_holding
--      from trtran001
--      where deal_user_id = DealerName
--      and deal_base_currency = CurrencyCode
--      and deal_dealer_holding != 0;
--
--Begin
--    varMessage := 'Generating Graphs for Users: ' || UserIDs;
--    numError := 0;
--    numTemp := 0;
--    numTemp := 1;
--    numTemp1 := 0;
--    numTemp2 := 1;
--    typUser := TypeUsers();
--
--      varOperation := 'Checking table exists to drop';
--      Begin
--        varQuery := 'Select count(*) from trtemp';
--        execute immediate varQuery;
--         varQuery := 'truncate table trtemp';
--         execute immediate varQuery;
--         varQuery := 'Drop table trtemp';
--         execute immediate varQuery;
--       Exception
--       When table_not_exists then
--          NULL;
--      End;
--
--    varOperation := 'Creating table dynamically';
--    varQuery := 'Create global temporary table trtemp(';
--
--    while numTemp > 0
--    Loop
--      numTemp1 := numTemp1 + 1;
--      numTemp := instr(UserIDs, ',', 1, numTemp1);
--
--      if numTemp = 0 then
--        varTemp := substr(UserIds, numTemp2);
--      else
--        varTemp := substr(UserIds, numTemp2, numTemp - numTemp2);
--      end if;
--
--      varQuery := varQuery || varTemp || '_er' || ' number(15,6),';
--      varQuery := varQuery || varTemp || '_hr' || ' number(15,6),';
--      typUser.Extend(1);
--      typUser(numTemp1) := varTemp;
--      numTemp2 := numTemp + 1;
--    End Loop;
--
--    varQuery := varQuery || ' srlno number(3,0))';
--    varQuery := varQuery || ' on commit preserve rows';
--    execute immediate varQuery;
--
--    varOperation := 'Inserting / Updating Exchange Rates';
--   	for numSub in 1..numTemp1
--    loop
--      numTemp := 0;
--
--      open DealRate(typUser(numSub));
--      Loop
--        fetch DealRate into numExchange, numHolding;
--        exit when DealRate%NOTFOUND;
--
--        numTemp := numTemp + 1;
--        varQuery := 'select nvl(srlno,0) from trtemp where srlno = ' || numTemp;
--
--        begin
--          execute immediate varQuery into numTemp2;
--        Exception
--          when no_data_found then
--          numTemp2 := 0;
--        end;
--
--        if numTemp2 > 0 then
--          varQuery := 'update trtemp set ' || typUser(numSub) || '_er' || ' = ' || numExchange;
--          varQuery := varQuery || ',' || typUser(numSub) || '_hr' || ' = ' || numHolding;
--          varQuery := varQuery || ' where srlno = ' || numTemp;
--        else
--          varQuery := 'insert into trtemp (' || typUser(numSub) || '_er,';
--          varQuery := varQuery || typUser(numSub) || '_hr ,srlno) values(';
--          varQuery := varQuery || numExchange || ',' || numHolding || ',' || numTemp || ')';
--        End if;
--
--        execute immediate varQuery;
--      End Loop;
--
--      Close DealRate;
--
--    End loop;
--
--    commit;
--    return numError;
--
--Exception
--    When others then
--      numError := SQLCODE;
--      varError := SQLERRM || varQuery;
--      varError := GConst.fncReturnError('Graphc', numError, varMessage,
--                      varOperation, varError);
--      raise_application_error(-20101, varError);
--      return numError;
--End fncGraphCursor;

Function fncMTMRate
    (   DealNumber  in varchar2,
        DealType in number,
        MTMType in number,
        AskRate in number := 0,
        BidRate in number := 0,
        WashRate in number := 0)
    return number
    is
--  Created by T M Manjunath on 18/11/11
    numError            number;
    numBuySale          number(8);
    numBaseCurrency     number(8);
    numOtherCurrency    number(8);
    numCounterParty     number(8);
    numAsk              number(15,4);
    numBid              number(15,4);
    numRate             number(15,4);
    numRate1            number(15,4);
    numRate2            number(15,4);
    datMaturity         date;
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
Begin
    numError := 0;
    varMessage := 'Getting MTM Rate of ' || DealNumber;

    select max(hday_calendar_date)
      into GConst.gdatToday
      from trsystem001
      where hday_location_code = 30299999
      and  hday_day_status = 26400002;

    varOperation := 'Getting Deal Details';
    if  DealType = 32200003 then
      select copt_expiry_date, cosu_buy_sell, copt_base_currency, copt_other_currency,
        copt_counter_party
        into datMaturity, numBuySale, numBaseCurrency, numOtherCurrency,  numCounterParty
        from trtran071, trtran072
        where copt_deal_number = cosu_deal_number
        and cosu_buy_sell in (25300001,25300002)
        and rownum = 1
        and copt_deal_number = DealNumber;
    elsif DealType = 32200002 then
      select cfut_maturity_date, cfut_buy_sell, cfut_base_currency, cfut_other_currency,
        cfut_counter_party
        into datMaturity, numBuySale, numBaseCurrency, numOtherCurrency, numCounterParty
        from trtran061
        where cfut_deal_number = DealNumber;
    else
      select deal_maturity_date, deal_buy_sell, deal_base_currency, deal_other_currency,
        deal_counter_party
        into datMaturity, numBuySale, numBaseCurrency, numOtherCurrency, numCounterParty
        from trtran001
        where deal_deal_number = DealNumber;
    end if;

    if WashRate > 0 then

      if numOtherCurrency = 30400003 then
        numRate := 1;
      else
        numRate := pkgforexprocess.fncgetrate(numOtherCurrency, 30400003,
          GConst.gdatToday,numBuySale,pkgforexprocess.fncAllotMonth(numCounterParty,
          GConst.gdatToday, datMaturity),null, 1);
      End if;

      return numRate;
    End if;

--  User Defined Rates
    if MTMType = 62400003 then
      if numBuySale = GConst.PURCHASEDEAL then
        numRate := BidRate;
      else
        numRate := AskRate;
      end if;
    End if;

--  Spot Rates
    if MTMType = 62400001 then
      varOperation := 'Getting Spot Rates for ' || GConst.gdatToday;
      numRate := pkgforexprocess.fncgetrate(numBaseCurrency, numOtherCurrency,
          GConst.gdatToday,  numBuySale, 0, datMaturity, 1);
    End if;

--  MTM Rates
    if MTMType = 62400002 then
      varOperation := 'Getting MTM Rates';
      numRate := pkgforexprocess.fncgetrate(numBaseCurrency, numOtherCurrency,
        GConst.gdatToday, numBuySale, pkgforexprocess.fncAllotMonth(numCounterParty,
        GConst.gdatToday, datMaturity),datMaturity, 1);
    End if;

    return numRate;
Exception
    When others then
        numError := SQLCODE;
        varError := SQLERRM;
        varError := 'MTMRate: ' || varMessage || varOperation || varError;
        return 0;
--        raise_application_error(-20101, varError);
        rollback;
        Return numError;
End fncMTMRate;

Function fncSendPassword
    (userId in varchar2,
     PasswordKey in varchar2,
     PasswordCode in varchar2,
     PasswordView in varchar2)
      Return Number
      is
      mail_Id  varchar2(200 byte);
      frmMailId varchar2(30 byte);
      numError number ;
--  Created on 23/04/08

Begin 

  SELECT USER_EMAIL_ID INTO mail_Id FROM trsystem022 WHERE USER_USER_ID = userId
                                                      AND User_Record_Status NOT IN(10200005,10200006);
                                                      
 SELECT PRMC_MAIL_USERID INTO frmMailId FROM TRSYSTEM051;                                                      

  UPDATE trsystem023
  SET --PSWD_PASSWORD_KEY       = PasswordKey,
  PSWD_PASSWORD_CODE        = PasswordCode
  WHERE PSWD_USER_ID          = userId
  AND PSWD_RECORD_STATUS NOT IN(10200005,10200006);

  
  
--   UTL_MAIL.SEND(SENDER    => frmMailId ,
--                RECIPIENTS => mail_Id,
--                CC         => '',
--                BCC        => '',
--                SUBJECT    => 'New Password' ,
--                MESSAGE    => 'New Password :-  ' || PasswordView ) ; 

    return numError;
--Exception
--    When others then
--      raise         
--      return numError;
End fncSendPassword; 

Function fncGenerateStatement
    (   WorkDate in date,
        CompanyCode in number,
        BankCode in number,
        FromDate in date,
        ToDate in date,
        Consolidate in number := 12400002)
    Return number
    is
--  Created on 16/04/08
    PRAGMA AUTONOMOUS_TRANSACTION;

    numError            number;
    numSerial           number(5);
    numCredit           number(15,2) := 0.00;
    numDebit            number(15,2) := 0.00;
    numBalance          number(15,2) := 0.00;
    varAccount          varchar2(25);
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
Begin
    numError := 0;
    numSerial := 1;
    varMessage := 'Generating Statement for ' ||BankCode;

    varOperation := 'Deleting Old Records';
    delete from trsystem993;
--      where csmt_statement_date = WorkDate
--      and csmt_local_bank = BankCode;
--

    varOperation := 'Getting Opening Balance of the Account';
    Begin
      select NVL(bank_opening_balance,0), bank_reference_number
        into numBalance, varAccount
        from trtran015
        where bank_company_code = CompanyCode
        and bank_local_bank = BankCode
        and bank_record_type = GConst.BANKCURRENT;
    Exception
      When No_data_found then
        numBalance := 0.00;
    End;

    varOperation := 'Calculating Opening Balance';
    select NVL(sum(decode(bcac_crdr_code, GConst.ENTRYDEBIT, bcac_voucher_inr,0)),0),
      NVL(sum(decode(bcac_crdr_code, GConst.ENTRYCREDIT, bcac_voucher_inr,0)),0)
      into numDebit, numCredit
      from trtran008
      where bcac_company_code = CompanyCode
      and bcac_local_bank = BankCode
      and bcac_record_type = GConst.RECCURRENT
      and bcac_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
      and bcac_voucher_date < FromDate;

    numBalance := (numBalance + numCredit) - numDebit;

    varOperation := 'Inserting Opening Balance';
    insert into trsystem993(csmt_statement_date, csmt_company_code,
    csmt_local_bank, csmt_serial_number, csmt_account_number,
    csmt_transaction_date,  csmt_debit_amount, csmt_credit_amount,
    csmt_balance_amount, csmt_voucher_detail)
    values(WorkDate, CompanyCode, BankCode, numSerial,
    varAccount, FromDate, 0,0, numBalance, 'Opening Balance');

    if Consolidate = GConst.OPTIONNO then
      for curCurrent in
      (select bcac_voucher_date VoucherDate, bcac_cheque_number ChequeNo,
        decode(bcac_crdr_code, GConst.ENTRYDEBIT, bcac_voucher_inr,0) Debit,
        decode(bcac_crdr_code, GConst.ENTRYCREDIT, bcac_voucher_inr,0) Credit,
        0, bcac_voucher_detail Detail, bcac_account_number AcNumber,
        bcac_recon_flag ReconFlag,bcac_recon_inr ReconInr,bcac_recon_date ReconDate,
        bcac_recon_remarks ReconRemarks
        from trtran008
        where
        --bcac_company_code = CompanyCode
        bcac_local_bank = BankCode
      --  and bcac_record_type = GConst.RECCURRENT
        and bcac_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
        and bcac_voucher_date
        between FromDate and ToDate
        order by bcac_voucher_date, bcac_crdr_code)
      Loop
        numBalance := (numBalance + curCurrent.Credit) - curCurrent.Debit;
        numSerial := numSerial + 1;
        varOperation := 'Inserting Transactions';
        insert into trsystem993(csmt_statement_date, csmt_company_code,
          csmt_local_bank, csmt_account_number, csmt_transaction_date,
          csmt_cheque_number, csmt_debit_amount, csmt_credit_amount,
          csmt_balance_amount, csmt_voucher_detail, csmt_serial_number,
          csmt_recon_inr,csmt_recon_date,bcac_recon_flag,csmt_recon_remarks)
        values(WorkDate, CompanyCode, BankCode, curCurrent.AcNumber,
        curCurrent.VoucherDate, curCurrent.ChequeNo, curCurrent.Debit,
        curCurrent.Credit, numBalance, curCurrent.Detail, numSerial,
        curCurrent.ReconInr,curCurrent.ReconDate,curCurrent.ReconFlag,
        curcurrent.ReconRemarks);
      End Loop;
    elsif Consolidate = GConst.OPTIONYES then

      for curCurrent in
      (select bcac_voucher_date VoucherDate, bcac_cheque_number ChequeNo,
        sum(decode(bcac_crdr_code, GConst.ENTRYDEBIT, bcac_voucher_inr,0)) Debit,
        sum(decode(bcac_crdr_code, GConst.ENTRYCREDIT, bcac_voucher_inr,0)) Credit,
        0, 'Exchange Profit /Loss' Detail, bcac_account_number AcNumber, bcac_crdr_code,
        12400002 ReconFlag,0 ReconInr, sysdate ReconDate, 'a' ReconRemarks
        from trtran008
        where bcac_company_code = CompanyCode
        and bcac_local_bank = BankCode
        and bcac_account_head = GConst.ACEXCHANGE
       -- and bcac_record_type = GConst.RECCURRENT
        and bcac_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
        and bcac_voucher_date
        between FromDate and ToDate
        group by  bcac_voucher_date, bcac_cheque_number,
        0, 'Exchange Profit /Loss', bcac_account_number, bcac_crdr_code,
        12400002,0,sysdate,'a'
        union
        select bcac_voucher_date VoucherDate, bcac_cheque_number ChequeNo,
        decode(bcac_crdr_code, GConst.ENTRYDEBIT, bcac_voucher_inr,0) Debit,
        decode(bcac_crdr_code, GConst.ENTRYCREDIT, bcac_voucher_inr,0) Credit,
        0, bcac_voucher_detail Detail, bcac_account_number AcNumber, bcac_crdr_code,
        bcac_recon_flag ReconFlag,bcac_recon_inr ReconInr,bcac_recon_date ReconDate,
        bcac_recon_remarks ReconRemarks
        from trtran008
        where bcac_company_code = CompanyCode
        and bcac_local_bank = BankCode
        and bcac_account_head != GConst.ACEXCHANGE
        and bcac_record_type = GConst.RECCURRENT
        and bcac_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
        and bcac_voucher_date
        between FromDate and ToDate
        order by 1,8)
      Loop
        numBalance := (numBalance + curCurrent.Credit) - curCurrent.Debit;
        numSerial := numSerial + 1;
        varOperation := 'Inserting Transactions';
        insert into trsystem993(csmt_statement_date, csmt_company_code,
          csmt_local_bank, csmt_account_number, csmt_transaction_date,
          csmt_cheque_number, csmt_debit_amount, csmt_credit_amount,
          csmt_balance_amount, csmt_voucher_detail, csmt_serial_number,
          csmt_recon_inr,csmt_recon_date,bcac_recon_flag,csmt_recon_remarks)
        values(WorkDate, CompanyCode, BankCode, curCurrent.AcNumber,
        curCurrent.VoucherDate, curCurrent.ChequeNo, curCurrent.Debit,
        curCurrent.Credit, numBalance, curCurrent.Detail, numSerial,
        curCurrent.ReconInr,curCurrent.ReconDate,curCurrent.ReconFlag,
        curcurrent.ReconRemarks);
      End Loop;

    End if;

    COMMIT;
    Return numError;
Exception
    When others then
        numError := SQLCODE;
        varError := SQLERRM;
        varError := 'GenStatement: ' || varMessage || varOperation || varError;
        raise_application_error(-20101, varError);
        rollback;
        Return numError;
End fncGenerateStatement;

procedure prcReturnCursor
    ( ParamData in gconst.gclobtype%type,
      ErrorData out nocopy gconst.gclobtype%type,
      ProcessData out nocopy gconst.gclobtype%type,
      GenCursor out gconst.datacursor)
      is

    --|--------------------------------------------------------------|
    --|name of function   prcreturncursor                            |
    --|author             t m manjunath                              |
    --|package            pkgreturncursor                            |
    --|type               procedure                                  |
    --|date of creation   11-mar-2007                                |
    --|last modified on   13-mar-2007                                |
    --|exception number   -20707                                     |
    --|input parameters   1.input details in clob                    |
    --|output parameters  1.error message in clob                    |
    --|output parameters  2.process output in clob                   |
    --|return, if any     none                                       |
    --|brief discription                                             |
    --| the function                                                 |
    --|--------------------------------------------------------------|

    numrecords number(5);
    numflag number(1);
    numFlag1 number(1);
    numrecordsets number(1);
    numInfoType number(4);
    numerror number(5);
    numaction number(4);
    numtemp number(6);
    numcode number(8);
    numcode1 number(8);
    numcode2 number(8);
    numcode3 number(8);
    numcode4 number(8);
    numCode5 number(8);
    numCode6 number(8);
    numCode7 number(8);
    numCode8 number(8);
    numCode9 number(8);
    numdetail number(12);
    numrate number(15,6);
    numRate1            number(15,4);
    numcustom number(15,6);
    numspot number(15,6);
    numfcy number(15,2);
    numfcy1 number(15,2);
    numinr number(15,2);
    numinr1 number(15,2);
    numtemp1 number(15,6);
    varaction varchar2(30);
    varentity varchar2(30);
    vartemp varchar2(1000);
    vartemp1 varchar2(1000);
    varReference varchar(25);

    ExecutionDate  date;
    BaseCurrency number(8);
    OtherCurrency number(8);
    DelivaryType number(8);
    DelivaryOption number(8);
    DelivaryDays number(8);
    DelivaryDate date;



    vartemp2 varchar2(3000);
    varTemp3 varchar2(4000);
    vartemp4 varchar2(4000);
    vartemp5 VarChar(4000);
    vartemp6 VarChar(4000);
    vartemp7 VarChar(4000);
    vartemp8 VarChar(4000);
    
    sqlQuery varchar(4000);
    datworkdate date;
    dattemp date;
    dattemp1 date;
    dattemp2 date;
    dattemp3 date;
    varuserid varchar2(30);
    varoperation gconst.gvaroperation%type;
    varmessage gconst.gvarmessage%type;
    varerror gconst.gvarerror%type;
    varquery varchar2(4000);
    varkey varchar2(1000);
    varvalue varchar2(200);
    vardummy varchar2(2048);
    xmldoc gconst.gxmltype%type;
    elmtemp xmldom.domelement;
    doctemp xmldom.domdocument;
    noltemp xmldom.domnodelist;
    nodtemp xmldom.domnode;
    error_occurred exception;
    recEntity           EntityInfo%ROWTYPE;
    varCompany          varchar2(30);
    varStatus           varchar2(30);
    varLocation         varchar2(30);
    varCondition        varchar2(1000);
    numUserActionType   number(5);
    numCompanyCode	number(8);
    numLocationCode     number(8);
    clbTemp             clob;   -- siva modifn
    sqlQuery2           varchar(4000);
    varweblogin    varchar2(1);
    varusergroup   number(8);
    
    tempDate       Date;
    tempvar        varchar(50);
    varcom varchar2(200) := '';
    varloc varchar2(200) := '';
    varbank varchar2(200) := '';
    vardoctype varchar2(200) := '';
     vardocentity varchar2(200) := '';
  begin
    numerror := 0;
    numrecords := 0;
    xmldoc := xmltype(paramdata);
    --delete from testhari;commit;
    --insert into testhari values('after xmldoc','inside cursor');commit;
    numerror := 1;
    varoperation := 'extracting parameters';
    numInfoType := gconst.fncxmlextract(xmldoc,'Type',numinfotype);
    datworkdate := gconst.fncxmlextract(xmldoc,'WorkDate',datworkdate);
    varUserID := gconst.fncxmlextract(xmldoc,'UserCode',varuserid);
    numaction := nvl(gconst.fncxmlextract(xmldoc,'Action',numaction),0);
    varEntity := gconst.fncxmlextract(xmldoc,'Entity',varentity);
    -- added by manjunath Reddy on 24/09/2019-- to get the User Selected while fetching the Records
    begin
        numUserActionType:= nvl(gconst.fncxmlextract(xmldoc,'UserActionType',numUserActionType),0);
    exception 
      when others then
        numUserActionType:=101;
    end;
    
    numCompanyCode:= gconst.fncxmlextract(xmldoc,'CompanyID',numCompanyCode);
    numLocationCode:=gconst.fncxmlextract(xmldoc,'LocationID',numLocationCode);
    --added by shrihari on 21/06/19 to identify login from web or windows
    --  varweblogin:=gconst.fncxmlextract(xmldoc,'WEBLogin',numLocationCode);
      
    varmessage := 'cursor requested: ' || numinfotype;
   --  insert into testhari values(varmessage,'varmessage');commit;
    numerror := numinfotype;

    if numinfotype is null then
      varerror := 'information type is not furnished';
      raise error_occurred;
    end if;

    if numinfotype = gconst.REFPICKUPLIST then
      numrecords := 0;
      

      varoperation := 'Checking the Add load if yes return by not selecting any data ';
      begin 
      insert into temp values ('1','REFPICKUPLIST NXT');
            -- THis Should not Change in Windows 
        numCode7 := gconst.fncxmlextract(xmldoc,'Param/UserAction',numCode7);
         insert into temp values ('2',numCode7);
      exception 
        when others then
         insert into temp values ('3','REFPICKUPLIST Exception');
         numCode7 := numaction;
          insert into temp values ('4',numCode7);
      end;
      
      if ((numCode7 =Gconst.ADDLOAD) or (numCode7 =Gconst.BROWSERLOAD)) then 
      insert into temp values ('5',numCode7);
            goto dummy_cursor;
      end if;
      
      if varEntity = 'ACCESSFILE' then
        varoperation := 'extracting browser fields for access control';
        
         
        select count(*)
          into numrecords
          from accessfile
          where actl_record_status 
          not in(gconst.statusinactive,  gconst.statusdeleted);
  
        if numrecords = 0 then
          goto dummy_cursor;
        end if;
  
        open gencursor for
        select distinct actl_company_code as "CompanyCode",
          actl_group_code as "GroupCode", actl_user_id as "UserId",
          fncgetdescription(actl_company_code,1) CompanyName,
          fncgetdescription(actl_group_code,1) GroupName
          --actl_record_status RecordStatus
          from accessfile
          where actl_record_status not in(gconst.statusinactive,   gconst.statusdeleted);
  
         goto process_end;
         
      end if;
    -- Changed by Manjunath Reddy 31-03-2008
      if varEntity = 'HOLIDAYTABLE' then
        varOperation := 'Extracting browser fields for HOLIDAY TABLE';
      
        select count(*) into numRecords
          from trsystem001
          where hday_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        
        Open GenCursor for
        select distinct hday_location_code as "LocationCode", 
          fncGetDescription(hday_location_code, 1) LocationName,
          to_char(HDAY_CALENDAR_DATE,'yyyy') as CalendarDate
          --to_char(sysdate,'yyyy') as CalendarDate
      --    hday_record_status RecordStatus
          from holidaytable
          where hday_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        
        Goto Process_End;
      end if;
      
      if varEntity = 'EXPOSUREUPLOAD' then
        varOperation := 'Extracting browser fields for Exposure Edit';
        select count(*) into numRecords
          from TRTRAN002
          where TRAD_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        
        Open GenCursor for
          SELECT DISTINCT  TRAD_ENTRY_DATE "Entry Date",
            fncGetDescription(TRAD_COMPANY_CODE,2)Company,
            fncGetDescription(TRAD_LOCATION_CODE,2)Location,
            fncGetDescription(TRAD_PRODUCT_CATEGORY,2) "PortFolio",
            fncGetDescription(TRAD_SUBPRODUCT_CODE,2)SubPortfolio,
            TRAD_COMPANY_CODE "Company Code",
            TRAD_LOCATION_CODE "Location Code",
            TRAD_PRODUCT_CATEGORY ProductCode,
            TRAD_SUBPRODUCT_CODE SubproductCode
          FROM TRTRAN002
          WHERE TRAD_RECORD_STATUS NOT IN(10200005,10200006);
        Goto Process_End;
      end if;

--      if varEntity = 'EXPOSURESETTLEMENTNEW' then
--        varOperation := 'Extracting browser fields for Exposure Edit';
--        select count(*) into numRecords
--          from TRTRAN004
--          where HEDG_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
--          AND HEDG_BATCH_NUMBER IS NOT NULL;
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        
--        Open GenCursor for
--         SELECT DISTINCT  BREL_ENTRY_DATE "EntryDate",
--              BREL_BATCH_NUMBER "BatchNumber",
--              SUM(BREL_REVERSAL_FCY)"Hedge Fcy",
--              fncGetDescription(BREL_COMPANY_CODE,2)Company,
--              BREL_COMPANY_CODE "CompanyCode",
--              1 as "ReverseSerial"
--            FROM TRTRAN003
--            where BREL_BATCH_NUMBER IS NOT NULL
--            AND BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
--            GROUP BY BREL_ENTRY_DATE,BREL_BATCH_NUMBER,BREL_COMPANY_CODE;
--        Goto Process_End;
--      end if;      
--      
--      if varEntity = 'BANKBALANCEENTRY' then
--        varOperation := 'Extracting browser fields for BANKBALANCEENTRY';
--      
--        select count(*) into numRecords
--          from trmaster306a
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        
--        
--        -- 
--        
--      --if ((numCode7 !=108) and (recEntity.einf_sql_condition is not null)) then
--      
--        Open GenCursor for
--        select distinct lbbl_effective_date as "EffectiveDate", 
--          fncGetDescription(lbbl_Company_code, 1) "Company"
--          from BANKBALANCEENTRY
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--        
--        Goto Process_End;
--      end if;
      
     ---//added by kumar.h on 06-06-09
   ---//purpose:- to show the relation table details in mode other than add mode/it's not possible to show
   --//           this in usualway
     if varEntity = 'RELATIONTABLE' then
        varOperation := 'Extracting browser fields for RELATION TABLE';
      
        select count(*) into numRecords
          from trsystem008
          where erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        
       Open GenCursor for
        select distinct pkgreturncursor.fncgetdescription(a.erel_company_code,2) "CompanyName",
               pkgreturncursor.fncgetdescription(to_number(to_char(a.erel_entity_type)||'00000'),2) "EntityName",
               pkgreturncursor.fncgetdescription(erel_main_entity,2) "MainEntityName",
               pkgreturncursor.fncgetdescription(to_number(to_char(erel_relation_type)||'00000'),2) "RelationTypeName",
               erel_main_entity as "MainEntity",
               erel_company_code as "CompanyCode",erel_entity_type as "EntityType",erel_relation_type as "EntityRelation"
          from trsystem008 a, trmaster001
         where a.erel_main_entity = pick_key_value
           and a.erel_entity_type = pick_key_group
            and pick_key_type in (10100002,10100003)
           and a.erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        Goto Process_End;
      end if;
      
--      if ((varEntity='OPTIONHEDGEDEAL') or(  varEntity='OPTIONTRADEDEAL')) then
--      
--        varOperation := 'Extracting browser fields for Option Trades';
--      
--        select count(*) into numRecords
--          from trtran071
--          where copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--
--
--        Open GenCursor for
--            select  copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
--                 fncgetdescription(copt_counter_party,2) "CounterParty", 
--                 copt_base_amount "BaseAmount",fncgetdescription(copt_contract_type,2) "DealType", 
--                round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),4) "BC",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),4) "BP",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),4) "SP",
--               round((select avg(cosu_strike_rate) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),4) "SC",
--                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
--                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
--                 copt_other_amount "OtherAmount",
--                 copt_maturity_date "MaturityDate",
--                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
--                 copt_time_stamp "DealTimeStamp",
--                 (select user_user_name 
--                   from usermaster 
--                  where user_user_id=copt_user_id) "UserName",
--                  copt_lot_numbers "Lot Numbers",copt_lot_price "Lot Price",
--                  copt_dealer_remark "Remarks",
--                  COPT_COMPANY_CODE "CompanyCode",cOPT_SERIAL_NUMBER "SerialNumber"
--             from trtran071 
--              where copt_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);
--              
--      Goto Process_End;
--      
--      end if;
      
   --//kumar.h ends here    
      
--    if ((varEntity = 'DEALCANCELLATION') and (numaction=gconst.ADDLOAD))  then
--        varOperation := 'Extracting browser fields for deal Cancelation';
--      
--        select count(*) into numRecords
--          from trtran001
--          where deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL,gconst.STATUSAUTHORIZED);
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        insert into temp values (numRecords,varEntity);
--        commit;
--        Open GenCursor for
--        select deal_deal_number dealnumber,deal_execute_date executedate,deal_hedge_trade hedgetrade,
--               deal_buy_sell buysell,deal_swap_outright swapoutright,deal_counter_party counterparty,
--               deal_base_currency basecurrency,deal_other_currency othercurrency,deal_exchange_rate exchangerate,deal_base_amount baseamount,deal_maturity_date maturitydate
--          from trtran001
--          where deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL,gconst.STATUSAUTHORIZED);
--        
--        Goto Process_End;
--     end if;
    varOperation := 'Checking whether user have any specific access ';
    
--     begin 
--        select * 
--        into recEntity
--        from EntityInfo
--        where einf_entity_name = varEntity
--         and einf_user_group in (select user_group_code 
--                                  from trsystem022
--                                 where user_user_id= varuserid
--                                 and user_record_status not in (10200005,10200006));
--      exception
--       when no_data_found then 
--          select * 
--          into recEntity
--          from EntityInfo
--          where einf_entity_name = varEntity
--          and einf_user_group=14299999;
--      end;
      begin        
            select user_group_code  into varusergroup
                  from trsystem022
                 where user_user_id= varuserid
                 and user_record_status not in (10200005,10200006);
       
        select * 
        into recEntity
        from EntityInfo
        where einf_entity_name = varEntity
         and einf_user_group =(case when (select count(*) from entityinfo 
                                            where einf_entity_name=varEntity
                                            and einf_user_group=varusergroup)>0 then varusergroup
                                            else 14299999 end)
         AND EINF_USER_ID = (case when(select count(*) from entityinfo 
                                  where einf_entity_name=varEntity
                                  and EINF_USER_ID=varuserid)>0 then varuserid
                                  else '.' end)  ;   
                                  
      exception
       when no_data_found then 
          select * 
          into recEntity
          from EntityInfo
          where einf_entity_name = varEntity
          and einf_user_group=14299999
          and EINF_USER_ID='.';
      end;

      varOperation := 'Checking whether records exists';
      numFlag := 0;
      varDummy := 'select count(*) ';
      varDummy := varDummy || ' from ' || varEntity || ' where ';
      
      
      if recEntity.einf_company_field is not null then
        varCondition := varCondition || recEntity.einf_company_field ||' in (select usco_company_code
                          from trsystem022a where usco_user_id =' || '''' ||  varUserID ||'''' || ')';
        numFlag := 1;
      end if;        
      
      varTemp := '';
      if recEntity.einf_location_field is not null then
        if numFlag = 1 then
          varTemp := ' and ';
        end if;          
        varCondition := varCondition || varTemp;
        varCondition := varCondition || recEntity.einf_location_field || ' = ' || numLocationCode;
        numFlag := 1;
      end if;        
      
      varTemp := '';
      if numFlag = 1 then
        varTemp := ' and ';
      end if;      
      
      varCondition := varCondition || varTemp;
      varCondition := varCondition || recEntity.einf_status_field || ' not in (';
      varCondition := varCondition || GConst.STATUSINACTIVE || ',' || GConst.STATUSDELETED || ')';
     
      VarOperation:= 'Checking the whether action is View';
      
      
     -- numCode7 := gconst.fncxmlextract(xmldoc,'KeyValues/Action',numCode7);
      
      if ((numCode7 =Gconst.EDITLOAD) and (recEntity.einf_editsql_condition is not null)) then
        varCondition := varCondition || ' ' || recEntity.einf_editsql_condition;  
      elsif ((numCode7 =Gconst.CONFIRMLOAD) and (recEntity.einf_confirmsql_condition is not null)) then
        varCondition := varCondition || ' ' || recEntity.einf_confirmsql_condition;  
      elsif ((numCode7 =Gconst.DELETELOAD) and (recEntity.einf_deletesql_condition is not null)) then
        varCondition := varCondition || ' ' || recEntity.einf_deletesql_condition;
      elsif ((numCode7 =Gconst.VIEWLOAD) and (recEntity.einf_viewsql_condition is not null)) then
        varCondition := varCondition || ' ' || recEntity.einf_viewsql_condition;  
      elsif (recEntity.einf_sql_condition is not null) then
         varCondition := varCondition || ' ' || recEntity.einf_sql_condition;
      end if;        
      
      
      varDummy := varDummy || varCondition;
    delete from temp;
    insert into temp values (varDummy,varDummy);
    commit;
    
    execute immediate varDummy
        into numrecords;

    if numrecords = 0 then
       goto dummy_cursor;
    end if;
        
        if ((varEntity='OPTIONHEDGEDEAL') or(  varEntity='OPTIONTRADEDEAL') or (varEntity='OPTIONDEALCONFIRMATION') or (varEntity='OPTIONDEALSFOREDIT')) then
      
        varOperation := 'Extracting browser fields for Option Trades';
      
        sqlQuery:= 'select copt_deal_number "DealNumber",copt_execute_date "ExecuteDate",
                 copt_counter_party "CounterParty", 
                 pkgReturnCursor.fncgetdescription(copt_counter_party,2) "CounterPartyDes", 
                 copt_base_amount "BaseAmount",pkgReturnCursor.fncgetdescription(copt_contract_type,2) "DealTypeDes", copt_contract_type "DealType",
                round((select avg(cosu_strike_rate) from trtran072 
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell='||Gconst.PURCHASEDEAL||'
                   and cosu_option_type='||GCONST.OptionCall||'),4) "BuyCall",
               round((select avg(cosu_strike_rate) from trtran072 
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell='||Gconst.PURCHASEDEAL||'
                   and cosu_option_type='||GCONST.OptionPut||'),4) "BuyPut",
               round((select avg(cosu_strike_rate) from trtran072 
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell='||Gconst.SALEDEAL||'
                   and cosu_option_type='||GCONST.OptionPut||'),4) "SellPut",
               round((select avg(cosu_strike_rate) from trtran072 
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell='||Gconst.SALEDEAL||'
                   and cosu_option_type='||GCONST.OptionCall||'),4) "SellCall",
                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
                 copt_base_currency "BaseCurrency",
                 pkgReturnCursor.fncgetdescription(copt_base_currency,2) "BaseCurrencyDes",
                 copt_other_currency "OtherCurrency",
                 pkgReturnCursor.fncgetdescription(copt_other_currency,2) "OtherCurrencyDes",
                 copt_other_amount "OtherAmount",
                 copt_maturity_date "MaturityDate",
                 copt_hedge_trade "HedgeTrade",
                 pkgReturnCursor.fncgetdescription(copt_hedge_trade,2) "HedgeTradeDes",
                 copt_Backup_deal "Initiator",
                 pkgReturnCursor.fncgetdescription(copt_Backup_deal,2) "InitiatorDes",
                 copt_init_code "Trader",
                 pkgReturnCursor.fncgetdescription(copt_init_code,2) "TraderDes",
                 copt_lot_numbers "LotNumbers",copt_lot_price "LotPrice",
                 copt_dealer_remark "Remarks",
                 COPT_COMPANY_CODE "CompanyCode",cOPT_SERIAL_NUMBER "SerialNumber"
             from trtran071 where copt_record_status not in(10200005,10200006)
                              and  COPT_COMPANY_CODE in (select usco_company_code
                          from trsystem022a where usco_user_id =' || '''' ||  varUserID ||'''' || ')'; 
    
             Open GenCursor for sqlQuery || ' and ' ||  varCondition;
              
      Goto Process_End;
      end if;
     
      if varEntity = 'EXPOSURESETTLEMENTNEW' then
        varOperation := 'Extracting browser fields for Exposure Edit';
        select count(*) into numRecords
          from TRTRAN003
          where BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
          AND BREL_DELIVERY_BATCH IS NOT NULL;
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        
        --Open GenCursor for
         sqlQuery :='SELECT DISTINCT  BREL_ENTRY_DATE "EntryDate",
              BREL_DELIVERY_BATCH "DeliveryBatch",
               BREL_DELIVERY_BATCH "TradeReference",
              SUM(BREL_REVERSAL_FCY)"ReversalFcy",
              pkgReturnCursor.fncGetDescription(BREL_COMPANY_CODE,2)"CompanyCode",
              BREL_COMPANY_CODE "CompanyCode1"
            FROM TRTRAN003
            where BREL_DELIVERY_BATCH IS NOT NULL
            AND BREL_RECORD_STATUS not in (10200005,10200006)';
            
            
           Open GenCursor for sqlQuery || ' and ' ||  varCondition || 
            ' GROUP BY BREL_ENTRY_DATE,BREL_DELIVERY_BATCH,BREL_COMPANY_CODE';
            insert into temp values (sqlQuery || ' and ' ||  varCondition || 
            ' GROUP BY BREL_ENTRY_DATE,BREL_BATCH_NUMBER,BREL_COMPANY_CODE','a');
            commit;
        Goto Process_End;
      end if;
      
      if varEntity = 'INFLOWOUTFLOWPAYMENTS' then
        varOperation := 'Extracting browser fields for INFLOWOUTFLOWPAYMENTS';
        select count(*) into numRecords
          from TRTRAN003
          where BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
          AND BREL_BATCH_NUMBER IS NOT NULL;
        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        
        --Open GenCursor for
          sqlQuery:='SELECT DISTINCT  BREL_ENTRY_DATE "EntryDate",
              BREL_BATCH_NUMBER "BatchNumber",
              SUM(BREL_REVERSAL_FCY)"ReversalFcy",
              pkgReturnCursor.fncGetDescription(BREL_COMPANY_CODE,2)"CompanyCode",
              BREL_COMPANY_CODE "CompanyCode1"
            FROM TRTRAN003
            where BREL_BATCH_NUMBER IS NOT NULL
            AND BREL_RECORD_STATUS not in (10200005,10200006)
            and not exists 
             (select * from trtran006
               where CDEL_TRADE_REFERENCE=BREL_TRADE_REFERENCE
                 and CDEL_REVERSE_SERIAL=BREL_REVERSE_SERIAL
                 and Cdel_record_status not in (10200005,10200006))' ;
            
            Open GenCursor for sqlQuery || ' and ' ||  varCondition ||
            ' GROUP BY BREL_ENTRY_DATE,BREL_BATCH_NUMBER,BREL_COMPANY_CODE';
            
        Goto Process_End;
      end if;      

       if varEntity = 'DISTINCTSYNONYMS' then
              varOperation := 'Extracting browser fields for DISTINCTSYNONYMS';
              select count(*) into numRecords
                from trsystem999
                where FLDP_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
              if numRecords = 0 then
                Goto Dummy_Cursor;
              end if;            
                  Open GenCursor for 
                  Select distinct(FLDP_TABLE_SYNONYM) "Synonym", MENU_DESCRIPTION "DescriptionType"
                  FROM TRSYSTEM999 inner join TRSYSTEM002
                  on FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT
                  WHERE FLDP_RECORD_STATUS not in (10200005,10200006) 
                  and FLDP_TABLE_SYNONYM in (select actl_program_unit 
                                      from trsystem006
                                      where actl_record_status not in (10200005,10200006)
                                      and (case when actl_user_id = '.' then varUserid else actl_user_id end) = varUserid
                                      and actl_group_code =(select user_group_code from trsystem022
                                                              where user_user_id = varUserid
                                                              and USER_RECORD_STATUS not in  (10200005,10200006)))                  
                  GROUP BY FLDP_TABLE_SYNONYM,MENU_DESCRIPTION
                  order by MENU_DESCRIPTION;       
                  
              Goto Process_End;
            end if;      
--      if varEntity = 'BANKBALANCEENTRY' then
--        varOperation := 'Extracting browser fields for BANKBALANCEENTRY';
--      
--        select count(*) into numRecords
--          from trmaster306a
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--
--        if numRecords = 0 then
--          Goto Dummy_Cursor;
--        end if;
--        
--        
--        -- 
--        
--      --if ((numCode7 !=108) and (recEntity.einf_sql_condition is not null)) then
--      
--        Open GenCursor for
--        select distinct lbbl_effective_date as "EffectiveDate", 
--          fncGetDescription(lbbl_Company_code, 1) "Company"
--          from BANKBALANCEENTRY
--          where (((( numCode7 =Gconst.VIEWLOAD) or ( numCode7 =Gconst.EDITLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)))
--                 or ((( numCode7 =Gconst.ADDLOAD) or ( numCode7 =Gconst.CONFIRMLOAD)) and 
--                 (lbbl_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,Gconst.STATUSAUTHORIZED))));
--        
--        Goto Process_End;
--      end if;
--      
     ---//added by kumar.h on 06-06-09
   ---//purpose:- to show the relation table details in mode other than add mode/it's not possible to show
   --//           this in usualway
     if varEntity = 'RELATIONTABLE' then
        varOperation := 'Extracting browser fields for RELATION TABLE';
      
        select count(*) into numRecords
          from trsystem008
          where erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);

        if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        
       Open GenCursor for
        select distinct pkgreturncursor.fncgetdescription(a.erel_company_code,2) "CompanyName",
               pkgreturncursor.fncgetdescription(to_number(to_char(a.erel_entity_type)||'00000'),2) "EntityName",
               pkgreturncursor.fncgetdescription(erel_main_entity,2) "MainEntityName",
               pkgreturncursor.fncgetdescription(to_number(to_char(erel_relation_type)||'00000'),2) "RelationTypeName",
               erel_main_entity as "MainEntity",
               erel_company_code as "CompanyCode",erel_entity_type as "EntityType",erel_relation_type as "EntityRelation"
          from trsystem008 a, trmaster001
         where a.erel_main_entity = pick_key_value
           and a.erel_entity_type = pick_key_group
            and pick_key_type in (10100002,10100003)
           and a.erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        Goto Process_End;
      end if;
    numrecords := 0;
    varquery := 'select ';
    varoperation := 'extracting browser fields for : ' || varentity;
    -- we have changed from FLDP_SELECT_YN to Fldp_Display_YN
    for curfields in
    (select fldp_column_name, fldp_xml_field, nvl(fldp_pick_group,0) 
      fldp_pick_group, nvl(fldp_key_no,    0) fldp_key_no,
      nvl(Fldp_Column_Displayname,fldp_xml_field) Fldp_Column_Displayname,
      nvl(fldp_dropdown_selector,90999999) fldp_dropdown_selector
      from trsystem999
      where fldp_table_synonym = varentity
      and FLDP_DISPLAY_YN=12400001
      order by nvl(FLDP_TAB_NUMBER,1),nvl(FLDP_FIELD_SORT,1))
    
       Loop
          if numRecords > 0 then
            varQuery := varQuery || ',';
          end if;

          numFlag1 := 0;
          
          if curFields.fldp_pick_group = 0 or 
              curFields.fldp_xml_field = 'RecordStatus' or
              curFields.fldP_key_no > 0 or
              curFields.fldp_dropdown_selector !=90900005
              then
            varQuery := varQuery || curFields.fldp_Column_name || ' as ';
--  The Following logic added on 16/05/08 to display description instead of codes

            if curFields.fldp_pick_group > 0 then
              varQuery := varQuery || '"' || curFields.fldp_xml_field || '",';
              varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
              varQuery := varQuery || ', 2) as ';
              numFlag1 := 1;
            End if;
--            
          else            
            varQuery := varQuery || 'pkgReturnCursor.fncGetDescription(' ||  curFields.fldp_column_name;
            varQuery := varQuery || ', 2) as ';
            numFlag1 := 1;        
          end if;
          
          varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || '" ';
          
--          if numFlag1 = 1 then
--            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || 'Desc' || '"';
--          else            
--            varQuery := varQuery || '"' || curFields.FLDP_XML_FIELD || '" ';
--          end if;
          
          numRecords := numRecords + 1;
        End Loop;
       --  varQuery := varQuery || ''' Actioncommand ''' || ' as "' ||  'command' || '"' ;
        
      varQuery := varQuery || ' from ' || varEntity || ' where ' || varCondition;
insert into temp values (varQuery,'FINAL'); commit;
      open gencursor for varquery;
      goto process_end;

    end if;

    if numinfotype = gconst.refpickupform then
        numerror := 1;
        varoperation := 'extracting pick group for the form';

        open gencursor for
        select pick_key_value KeyValue,
               pick_Short_description ShortDescription,
               pick_long_description LongDescription,
               pick_key_group KeyGroup
          from pickupmaster
          where pick_key_number > 0
          and ((pick_key_group in
          (select fldp_pick_group
            from trsystem999
            where fldp_table_synonym = varentity
            and fldp_pick_group > 0))
            or (pick_key_group in (901)))
          and pick_record_status not in (10200005,10200006)
            order by pick_key_value;

        goto process_end;
    end if;
if numinfotype = gconst.refGENPICKUP then
        numerror := 1;
        varoperation := 'extracting pick group for the form';

        open gencursor for
              select pick_key_value KeyValue,
                     DECODE(GPIC_DESC_TYPE,1,pick_Short_description ,2,pick_long_description)Description,  
                     pick_key_group KeyGroup,
                      decode(pick_key_number,0,GPIC_DISPLAY_NAME,'')DisplayName
          from pickupmaster LEFT OUTER JOIN trsystem999B 
          ON pick_key_group=GPIC_PICK_GROUP
          --AND pick_key_number > 0          
          AND GPIC_SYNONYM_NAME=varentity
          and GPIC_PICK_GROUP > 0
          WHERE GPIC_RECORD_STATUS NOT IN(10200005,10200006)
          order by pick_key_value;
        goto process_end;
    end if;
    if numinfotype = gconst.refxmlfields then
        numerror := 2;
        varoperation := 'extracting table fields for the form';

--        open gencursor for
--        select fldp_xml_field xmlfield,
--               fldp_column_name columnname,
--               fldp_table_synonym tablesynonym,
--               fldp_data_type datatype,
--               -- following 3 lines added on 09/12/2007
--               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
--               to_char(nvl(fldp_pick_group,   99999)) pickgroup,
--               nvl(fldp_text_case,   '99999') textcase,
--               nvl(fldp_text_length,   '99999') textlength,
--               nvl(FORMAT_FORMAT_STRING,fldp_text_format) textformat,
--               --nvl(fldp_text_format,) textformat,
--               nvl(fldp_tooltip_text,   '99999') tooltiptext,
--               nvl(fldp_default_value,   '99999') defaultvalue,
--               nvl(fldp_date_range,   '99999') daterange,
--               nvl(fldp_description_type, '0') descriptionType,
--               nvl(fldp_display_yn, 'N') "DisplayYn",
--               nvl(fldp_select_yn, 'N') "SelectYn",
--               nvl(fldp_Show_yn,'Y') ShowYN,
--               nvl(fldp_label_text,fldp_xml_field) LabelText,
--               to_char(nvl(fldp_enable_disable,'12400002')) EnableDisable,
--               nvl(FLDP_MANDATORY_FIELD,'N') MandatoryField,
--               FLDP_TAB_NUMBER "TabNumber" , 
--               FLDP_FIELD_SORT "FieldSort", FLDP_DISPLAY_NAME "DisplayName",
--               fldp_tab_number "TabNumber",
--               FLDP_CASCADE_FROM "CascadeFromField", FLDP_CASCADE_TYPE "CascadeType",
--               FLDP_DROPDOWN_SELECTOR "DropdownSelectorType", 
--               FLDP_DROPDOWN_CURSOR "DropdownCursorNumber",
--               FLDP_BIND_TIME "BindTime",
--               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
--               nvl(FLDP_DROPDOWN_RELATIONKEY,0) "DropDownRelationKey",
--               nvl(FLDP_HOLIDAY_CHECK,to_number(12400002)) "HolidayCheck",
--               FORMAT_DECIMAL_SCALE "DecimalScale"
--        from trsystem999 left outer join TRGLOBALMAS914
--          on FORMAT_DATA_TYPE =fldp_text_format
--          and FORMAT_record_status not in (10200005,10200006)
--        where fldp_table_synonym = varentity
--        order by nvl(FLDP_FIELD_SORT,999);
      open gencursor for
           select fldp_xml_field xmlfield,
               fldp_column_name columnname,
               fldp_table_synonym tablesynonym,
               fldp_data_type datatype,
               -- following 3 lines added on 09/12/2007
               to_char(nvl(fldp_key_no,   '-1')) KeyNo, 
               to_char(nvl(fldp_pick_group,   0)) pickgroup,
               nvl(pkgreturncursor.fncgetdescription(fldp_text_case,2),   'L') textcase,
               nvl(fldp_text_length,   '99999') textlength,
               nvl(FORMAT_FORMAT_STRING,FLDP_TEXT_FORMAT_CODE) textformat,
               --nvl(fldp_text_format,) textformat,
               nvl(fldp_tooltip_text,   '99999') tooltiptext,
               nvl(fldp_default_value,   '99999') defaultvalue,
               nvl(fldp_date_range,   '99999') daterange,
               nvl(pkgreturncursor.fncgetdescription(fldp_description_type,2),2) descriptionType,
               nvl(pkgreturncursor.fncgetdescription(FLDP_SHOW_YN,2), 'Y') ShowYN,
               nvl(pkgreturncursor.fncgetdescription(FLDP_DISPLAY_YN,2),'Y') DisplayYN,
               nvl(fldp_label_text,fldp_xml_field) LabelText,
               to_char(nvl(pkgreturncursor.fncgetdescription(fldp_enable_disable,2),'N')) EnableDisable,
               to_char(nvl(pkgreturncursor.fncgetdescription(FLDP_ENABLE_DISABLE_EDIT,2),'N')) "EditableInEditMode",
               nvl(pkgreturncursor.fncgetdescription(FLDP_MANDATORY_FIELD,2),'N') MandatoryField,
               FLDP_TAB_NUMBER "TabNumber" , 
               FLDP_FIELD_SORT "FieldSort",  fldp_tab_number "TabNumber",
               FLDP_CASCADE_FROM "CascadeFromField", FLDP_CASCADE_TYPE "CascadeType",
               FLDP_DROPDOWN_SELECTOR "DropdownSelectorType", 
               FLDP_DROPDOWN_CURSOR "DropdownCursorNumber",
               FLDP_BIND_TIME "BindTime",
               nvl(FLDP_COLUMN_DISPLAYNAME,FLDP_XML_FIELD)ColumnDisplayName,
               nvl(FLDP_DROPDOWN_RELATIONKEY,0) "DropDownRelationKey",
               pkgreturncursor.fncgetdescription(nvl(FLDP_HOLIDAY_CHECK,12400002),2) "HolidayCheck",
               FORMAT_DECIMAL_SCALE "DecimalScale"
        from trsystem999 left outer join TRGLOBALMAS914
          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
          and FORMAT_record_status not in (10200005,10200006)
        where fldp_table_synonym = varentity
        order by nvl(FLDP_FIELD_SORT,999);
        

        goto process_end;

    end if;
--Commented below lines
--    if numinfotype = gconst.refmenuitems then
--        numerror := 3;
--        varoperation := 'extracting menu items';
--        numerror := fncgeneratemenu(varuserid);

 --       open gencursor for
 --       select distinct tmnu_menu_id "menu id",
 --         tmnu_menu_description "menu description",
 --         tmnu_program_unit "program unit",
 --         tmnu_program_acl "program acl",
 --         tmnu_child_level "child level",
 --         tmnu_parent_id "parent id",
 --         tmnu_runs_program "Runs Program",
 --         punt_control_name "control name",
 --         nvl(tmnu_short_cut,0) Shortcut,
 --         nvl(tmnu_short_number,0) ShortCutNo
 --         from trsystem998,
 --         programfile
 --         where tmnu_program_unit = punt_program_unit(+)
 --         and tmnu_user_id = varuserid
 --         order by tmnu_menu_id,tmnu_child_level;
 --
 --       goto process_end;
 --   end if;
 --upto here new added for web appalication

  if numinfotype = gconst.refmenuitems then
        numerror := 3;
        varoperation := 'extracting menu items';
        numerror := fncgeneratemenu(varuserid);
        open gencursor for
        select distinct tmnu_menu_id "menuid",
          tmnu_menu_description "menudescription",
          tmnu_menu_description "ScreenHeader",
          tmnu_program_unit "programunit",
          tmnu_program_acl "programacl",
          tmnu_child_level "child level",
          tmnu_parent_id "parentid",
          tmnu_runs_program "RunsProgram",
          PUNT_WEBCONTROL_NAME "Webcontrolname",
          PUNT_CONTROL_NAME "controlname",
          nvl(PUNT_VIEW_INWEB,12400001) "ViewInWeb",
          nvl(tmnu_short_cut,0) Shortcut,
          nvl(tmnu_short_number,0) ShortCutNo,
         MENU_MENU_ICON "MenuIcon"
          from trsystem998,
          PROGRAMFILE,MENUFILE
          where tmnu_program_unit = punt_program_unit(+)
          and TMNU_MENU_DESCRIPTION=MENU_DESCRIPTION(+)
          and tmnu_user_id = varuserid         
          order by tmnu_menu_id,tmnu_child_level;
           goto process_end;
    end if;

    if numinfotype = gconst.refpickupentity then
        numerror := 4;
        varoperation := 'returning cursor for the pre-built query';
        varquery := pkgmastermaintenance.fncbuildquery(paramdata);

        open gencursor for varquery;
        goto process_end;

    end if;

    if numinfotype = gconst.refDictionary then
        numerror := 5;
        varoperation := 'extracting pick group for dictionary';

        open gencursor for
        select pick_key_value keyvalue,
          pick_short_description shortdescription,
          pick_long_description longdescription,
          pick_key_group keytype
          from pickupmaster
          where pick_key_number > 0
          and pick_record_status = gconst.statusauthorized
          order by pick_key_value;
          goto process_end;
    end if;

    if numinfotype = gconst.refrelation then
        --numerror := 7;k
        varoperation := 'extracting relation for entities';

        
          
        open gencursor for
        select erel_main_entity MainEntity,
          pick_key_group KeyGroup,
          erel_entity_relation KeyValue ,
          pick_short_description ShortDescription,
          pick_long_description LongDescription,
          EREL_RELATION_TYPE  RelationType
          from relationtable, pickupmaster
          where erel_entity_relation = pick_key_value
          and erel_record_Status not in (10200005,10200006)
          and pick_record_status not in (10200005,10200006)
          order by erel_main_entity, erel_entity_relation;

        goto process_end;
    end if;

    if numinfotype = gconst.refaccesscontrol then
        numerror := 11;
        varoperation := 'extracting access control list';

        select decode(prmc_treasury_module,gconst.optionyes,gconst.CurrencyModule,Gconst.OptionNo,0),
          Decode(prmc_money_module,Gconst.Optionyes,gconst.MoneyModule,Gconst.OptionNo,0),
          Decode(prmc_Commodity_Currency,Gconst.Optionyes,gconst.CommdityModule,Gconst.OptionNo,0),
          Decode(prmc_currency_futures,Gconst.Optionyes,gconst.CurrencyFuturesModule,Gconst.OptionNo,0),
          Decode(prmc_derivatives_Module,Gconst.Optionyes,gconst.DerivativesModule,Gconst.OptionNo,0)
          into numcode,numcode1,numcode2,numcode3,numcode4
          from trsystem051 ;

        OPEN gencursor FOR
        select to_char(ROWNUM) rownumber, menu_description "MenuDescription", punt_program_unit programunit,
          punt_access_insert insertaccess,
          punt_access_edit editaccess,
          punt_access_delete deleteaccess,
          punt_access_confirm confirmaccess,
          punt_access_view viewaccess,
          punt_access_print printaccess,
          punt_access_save saveaccess
          from programfile,menufile
          where punt_program_unit=menu_program_unit
          and menu_module_id in(numcode,numcode1,numcode2,numcode3,numcode4)
          and punt_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
          and menu_record_status not in(gconst.statusinactive,   gconst.statusdeleted)
          order by menu_description;

        goto process_end;

     end if;

    if numinfotype = gconst.refaccessgroup then
        numerror := 12;

        numcode := gconst.fncxmlextract(xmldoc,   'Params/CompanyCode',   numcode);
        numcode1 := gconst.fncxmlextract(xmldoc,   'Params/GroupCode',   numcode1);
        vartemp  := gconst.fncxmlextract(xmldoc,   'Params/UserCode',   vartemp);
        varoperation := 'extracting access control list for ' || numcode1;
        if vartemp='All' then
           vartemp:='.';
        end if;
        open gencursor for
        select actl_program_unit ProgramUnit,
        (select menu_description
           from trsystem002
           where menu_program_unit=actl_program_unit) "Menu Description",
          actl_access_insert insertaccess,
          actl_access_edit editaccess,
          actl_access_delete deleteaccess,
          actl_access_confirm confirmaccess,
          actl_access_view viewaccess,
          actl_access_print printaccess,
          actl_access_save saveaccess,
          actl_create_date createdate,
          actl_add_date adddate,
          a.actl_entry_detail.getstringval() entrydetail,
          actl_record_status recordstatus,
          actl_serial_number serialnumber,
          (select menu_description
           from trsystem002
           where menu_program_unit=actl_program_unit) "Menu Description"
          from accessfile a
          where actl_company_code = numcode
          and actl_group_code = numcode1
          and ACTL_USER_ID  =vartemp
 --         and actl_record_status not in(gconst.statusinactive, gconst.statusdeleted)
          order by actl_program_unit;

        goto process_end;
    end if;

--COMMENTED BY AAKASH 22-May-13 11:43 am
--    if numinfotype = gconst.reflogininfo then
--        varoperation := 'extracting login information for: ' || varuserid;
--
--        open gencursor for
--        select user_user_name, user_terminal_id, user_status_code,
--          to_char(user_last_login, 'dd/mm/yyyy hh:mm:ss') user_last_login,
--          user_login_attempts, user_record_status, pswd_password_code,
--          pswd_password_hint,  pswd_password_status, pswd_record_status,
--          user_company_code, user_group_code,PSWD_SERIAL_NUMBER,user_deal_yn,
--         (select PRMC_ProgramUpdate_Folder from trsystem051 ) ProgramUpdateFolder
--          from usermaster, dummyfile
--          where user_user_id = pswd_user_id
--          and pswd_serial_number =
--          (select max(pswd_serial_number)
--            from dummyfile
--            where pswd_user_id = varuserid)
--            and user_user_id = varuserid
--            and user_serial_number =
--            (select max(user_serial_number)
--              from usermaster
--              where user_user_id = varuserid);
--
--        goto process_end;
--    end if;
    --end

    --added by Aakash/Ishwar 22-May-13 11:44 am
--        if numinfotype = gconst.reflogininfo then
--        varoperation := 'extracting login information for: ' || varuserid;
--
--        open gencursor for
--        select user_user_name, user_terminal_id, user_status_code,
--          to_char(user_last_login, 'dd/mm/yyyy hh:mm:ss') user_last_login,
--          user_login_attempts, user_record_status, pswd_password_code,
--          pswd_password_hint,  pswd_password_status, pswd_record_status,
--          user_company_code, user_group_code,PSWD_SERIAL_NUMBER,user_deal_yn,
--         (select PRMC_ProgramUpdate_Folder from trsystem051 ) ProgramUpdateFolder
--          from usermaster, dummyfile
--          where user_user_id = pswd_user_id
--          and pswd_serial_number =
--          (select max(pswd_serial_number)
--            from dummyfile
--            where pswd_user_id = varuserid)
--            and user_user_id = varuserid
--            and user_serial_number =
--            (select max(user_serial_number)
--              from usermaster
--              where user_user_id = varuserid);
--
--        goto process_end;
--    end if;

  if numInfoType = GConst.REFLOGININFO then
    varOperation := 'Extracting Login Information for: ' || varUserID;
        
    open GenCursor for
    select
        USER_COMPANY_CODE CompanyId, '30299999' LocationId, '32699999' LobId,
        sysdate  WorkDate , '19-20' FinancialYear, sysdate YearStart,
        sysdate YearEnd,  user_user_id "UserId", user_user_name "UserName", 
        user_terminal_id "TerminalId", 
        user_status_code "UserStatus", trunc(user_last_login)  "LastLogin",
        --to_char(user_last_login, 'dd/mm/yyyy HH:MM:SS') "LastLogin",
        user_login_attempts "LoginAttempts", user_email_id "EmailId",
        user_mobile_phone "MobilePhone", '0' "UserNumber", 
        user_user_designation "UserDesignation", user_group_code "GroupCode",
        pswd_password_key "PasswordKey", pswd_password_code "PasswordCode", 
        pswd_password_hint "PasswordHint",pswd_password_status "PasswordStatus",
        User_company_code "CompanyCode",PSWD_SERIAL_NUMBER "PasswordSerialNumber"
      from UserMaster, DummyFile
      where user_user_id = pswd_user_id
      and pswd_serial_number =
      (select max(pswd_serial_number)
        from DummyFile
        where pswd_user_id = varUserID
        and pswd_record_status between 10200001 and 10200004)
      and user_user_id = varUserID
      and user_serial_number = 
      (select max(user_serial_number)
        from UserMaster
        where user_user_id = varUserID
        and user_record_status between 10200001 and 10200004);

    Goto Process_End;
  end if;  
    --end aakash/ishwar
 if numInfoType = GConst.REFRATESTICKER then
    varOperation := 'Extraction of Currency Rates for the Ticker';
    	varQuery := '';
	numFlag := 0;


--	for curRates in
--	(select a.pick_short_description || '/' || b.pick_short_description || ':' || drad_bid_rate CurrencyPair
--		from trtran013A, trmaster001 a, trmaster001 b
--		where drad_forward_monthno = 0
--		and drad_ratesr_number = '4102018003'
--		and a.pick_key_value = drad_currency_code 
--		and b.pick_key_value = drad_for_currency)
--	loop
--		if numFlag = 0 then
--			varQuery := 'Spot Rates, courtesy Thomson Reuters: ' || curRates.CurrencyPair;
--			numFlag := 1;
--		else
--			varQuery := varQuery || ';' || curRates.CurrencyPair;
--		End if;
--
--	End Loop;

--for curRates in
--	(select a.pick_short_description || '/' || b.pick_short_description || 
--         ' Bid : ' || DRAT_SPOT_BID || ' Ask : ' || DRAT_SPOT_ASK CurrencyPair,
--         DRAT_RATE_TIME RateTime
--		from trtran012, trmaster001 a, trmaster001 b
--		where DRAT_EFFECTIVE_DATE = trunc(datWorkDate)
--		and a.pick_key_value = DRAT_CURRENCY_CODE 
--		and b.pick_key_value = DRAT_FOR_CURRENCY
--        and drat_Record_status not in (10200005,10200006)
--        and DRAT_SERIAL_NUMBER= (select max(DRAT_SERIAL_NUMBER) from trtran012
--                                 where DRAT_EFFECTIVE_DATE = trunc(datWorkDate)
--                                 and drat_Record_status not in (10200005,10200006)))
--        
--
--	loop
--		if numFlag = 0 then
--			varQuery := 'Spot Rates, courtesy Thomson Reuters.  Latest Updated on ' || curRates.RateTime  || ' ' || curRates.CurrencyPair;
--			numFlag := 1;
--		else
--			varQuery := varQuery || ';' || curRates.CurrencyPair;
--		End if;
--
--	End Loop;
--    Open GenCursor for
--        select varQuery from dual;

 Open GenCursor for
    select CurrentRate.CurrencyPair, CurrentRate.Bid CurrentBid,CurrentRate.Ask CurrentAsk,CurrentRate.RateTime,
           CurrentRate.EffectiveDate EffectiveDate, 
           Previous.Bid PreviousBid,Previous.Ask PreviousAsk
      from (select a.pick_short_description || '/' || b.pick_short_description CurrencyPair , DRAT_SPOT_BID  Bid,
              DRAT_SPOT_ASK Ask ,
             DRAT_RATE_TIME RateTime,
             drat_effective_date EffectiveDate
            from trtran012, trmaster001 a, trmaster001 b
            where DRAT_EFFECTIVE_DATE =trunc(datWorkDate)
            and a.pick_key_value = DRAT_CURRENCY_CODE 
            and b.pick_key_value = DRAT_FOR_CURRENCY
            and drat_Record_status not in (10200005,10200006)
            and DRAT_SERIAL_NUMBER= (select max(DRAT_SERIAL_NUMBER) from trtran012
                                     where DRAT_EFFECTIVE_DATE = trunc(datWorkDate)
                                     and drat_Record_status not in (10200005,10200006))) CurrentRate
      left outer join
      (select a.pick_short_description || '/' || b.pick_short_description CurrencyPair , DRAT_SPOT_BID  Bid,
              DRAT_SPOT_ASK Ask ,
             DRAT_RATE_TIME RateTime
            from trtran012, trmaster001 a, trmaster001 b
            where DRAT_EFFECTIVE_DATE =trunc(datWorkDate)
            and a.pick_key_value = DRAT_CURRENCY_CODE 
            and b.pick_key_value = DRAT_FOR_CURRENCY
            and drat_Record_status not in (10200005,10200006)
            and DRAT_SERIAL_NUMBER= (select max(DRAT_SERIAL_NUMBER) -1 from trtran012
                                     where DRAT_EFFECTIVE_DATE = trunc(datWorkDate)
                                     and drat_Record_status not in (10200005,10200006))) Previous
       on CurrentRate.CurrencyPair= Previous.CurrencyPair
       order by CurrentRate.CurrencyPair;


    Goto Process_End;
  End if;  

if numInfoType = GConst.REFDEALCURRENCYRATE then
    varOperation := 'Extracting Currency Rates for Deals';
    datWorkDate:= '01-OCT-18';

    Begin
     varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
     vartemp  := varQuery ||'BaseCurrency';

     numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
     varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
     vartemp  := varQuery ||'OtherCurrency';    
     numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode1,Gconst.TYPENODEPATH);
     Exception
      when others then
       numCode := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode);
       numCode1 := GConst.fncXMLExtract(xmldoc, 'OtherCurrency', numCode);
    End;
    select count(*)
      into numRecords
      from trtran012
      where drat_currency_code = numCode
      and drat_for_currency = numCode1
      and drat_effective_date = datWorkDate;

    if numRecords = 0 then
      select cncy_principal_yn
        into numCode2
        from trmaster304
        where cncy_pick_code = numCode1;

      if numCode2 = GConst.OPTIONYES then

        Open GenCursor for
        select 'Bid' "AskBid",
          round(a.drat_spot_bid / b.drat_spot_bid,4) "SpotRate",
          round(a.drat_month1_bid / b.drat_month1_bid,4) "Month_01",
          round(a.drat_month2_bid / b.drat_month2_bid,4) "Month_02",
          round(a.drat_month3_bid / b.drat_month3_bid,4) "Month_03",
          round(a.drat_month4_bid / b.drat_month4_bid,4) "Month_04",
          round(a.drat_month5_bid / b.drat_month5_bid,4) "Month_05",
          round(a.drat_month6_bid / b.drat_month6_bid,4) "Month_06",
          round(a.drat_month7_bid / b.drat_month7_bid,4) "Month_07",
          round(a.drat_month8_bid / b.drat_month8_bid,4) "Month_08",
          round(a.drat_month9_bid / b.drat_month9_bid,4) "Month_09",
          round(a.drat_month10_bid / b.drat_month10_bid,4) "Month_10",
          round(a.drat_month11_bid / b.drat_month11_bid,4) "Month_11",
          round(a.drat_month12_bid / b.drat_month12_bid,4) "Month_12"
         from trtran012 a, trtran012 b
         where a.drat_effective_date = b.drat_effective_date
           and a.drat_serial_number = b.drat_serial_number
           and a.drat_currency_code = numCode
           and a.drat_for_currency = GConst.USDOLLAR
           and b.drat_currency_code = numCode1
--           decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
           and b.drat_for_currency = GConst.USDOLLAR
--           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
           and a.drat_effective_date = datWorkDate
           and a.drat_serial_number=
           (select max(drat_serial_number)
              from trtran012
              where drat_currency_code = numCode
              and drat_for_currency = GConst.USDOLLAR
              and drat_effective_date = datWorkDate
              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
        union
        select 'Ask' "AskBid",
          round(a.drat_spot_ask / b.drat_spot_ask,4) "SpotRate",
          round(a.drat_month1_ask / b.drat_month1_ask,4) "Month_01",
          round(a.drat_month2_ask / b.drat_month2_ask,4) "Month_02",
          round(a.drat_month3_ask / b.drat_month3_ask,4) "Month_03",
          round(a.drat_month4_ask / b.drat_month4_ask,4) "Month_04",
          round(a.drat_month5_ask / b.drat_month5_ask,4) "Month_05",
          round(a.drat_month6_ask / b.drat_month6_ask,4) "Month_06",
          round(a.drat_month7_ask / b.drat_month7_ask,4) "Month_07",
          round(a.drat_month8_ask / b.drat_month8_ask,4) "Month_08",
          round(a.drat_month9_ask / b.drat_month9_ask,4) "Month_09",
          round(a.drat_month10_ask / b.drat_month10_ask,4) "Month_10",
          round(a.drat_month11_ask / b.drat_month11_ask,4) "Month_11",
          round(a.drat_month12_ask / b.drat_month12_ask,4) "Month_12"
         from trtran012 a, trtran012 b
         where a.drat_effective_date = b.drat_effective_date
           and a.drat_serial_number = b.drat_serial_number
           and a.drat_currency_code = numCode
           and a.drat_for_currency = GConst.USDOLLAR
           and b.drat_currency_code = numCode1
--           decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
           and b.drat_for_currency = GConst.USDOLLAR
--           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
           and a.drat_effective_date = datWorkDate
           and a.drat_serial_number=
           (select max(drat_serial_number)
              from trtran012
              where drat_currency_code = numCode
              and drat_for_currency = GConst.USDOLLAR
              and drat_effective_date = datWorkDate
              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
          order by 1 desc;

      else
        Open GenCursor for
        select 'Bid' "AskBid",
          round(a.drat_spot_bid * b.drat_spot_bid,4) "SpotRate",
          round(a.drat_month1_bid * b.drat_month1_bid,4) "Month_01",
          round(a.drat_month2_bid * b.drat_month2_bid,4) "Month_02",
          round(a.drat_month3_bid * b.drat_month3_bid,4) "Month_03",
          round(a.drat_month4_bid * b.drat_month4_bid,4) "Month_04",
          round(a.drat_month5_bid * b.drat_month5_bid,4) "Month_05",
          round(a.drat_month6_bid * b.drat_month6_bid,4) "Month_06",
          round(a.drat_month7_bid * b.drat_month7_bid,4) "Month_07",
          round(a.drat_month8_bid * b.drat_month8_bid,4) "Month_08",
          round(a.drat_month9_bid * b.drat_month9_bid,4) "Month_09",
          round(a.drat_month10_bid * b.drat_month10_bid,4) "Month_10",
          round(a.drat_month11_bid * b.drat_month11_bid,4) "Month_11",
          round(a.drat_month12_bid * b.drat_month12_bid,4) "Month_12"
         from trtran012 a, trtran012 b
         where a.drat_effective_date = b.drat_effective_date
           and a.drat_serial_number = b.drat_serial_number
           and a.drat_currency_code = numCode
           and a.drat_for_currency = GConst.USDOLLAR
           and b.drat_currency_code = GConst.USDOLLAR
 --          decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
           and b.drat_for_currency = numCode1
--           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
           and a.drat_effective_date = datWorkDate
           and a.drat_serial_number =
           (select max(drat_serial_number)
              from trtran012
              where drat_currency_code = numCode
              and drat_for_currency = GConst.USDOLLAR
              and drat_effective_date = datWorkDate
              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
        union
        select 'Ask' "AskBid",
          round(a.drat_spot_ask * b.drat_spot_ask,4) "SpotRate",
          round(a.drat_month1_ask * b.drat_month1_ask,4) "Month_01",
          round(a.drat_month2_ask * b.drat_month2_ask,4) "Month_02",
          round(a.drat_month3_ask * b.drat_month3_ask,4) "Month_03",
          round(a.drat_month4_ask * b.drat_month4_ask,4) "Month_04",
          round(a.drat_month5_ask * b.drat_month5_ask,4) "Month_05",
          round(a.drat_month6_ask * b.drat_month6_ask,4) "Month_06",
          round(a.drat_month7_ask * b.drat_month7_ask,4) "Month_07",
          round(a.drat_month8_ask * b.drat_month8_ask,4) "Month_08",
          round(a.drat_month9_ask * b.drat_month9_ask,4) "Month_09",
          round(a.drat_month10_ask * b.drat_month10_ask,4) "Month_10",
          round(a.drat_month11_ask * b.drat_month11_ask,4) "Month_11",
          round(a.drat_month12_ask * b.drat_month12_ask,4) "Month_12"
         from trtran012 a, trtran012 b
         where a.drat_effective_date = b.drat_effective_date
           and a.drat_serial_number = b.drat_serial_number
           and a.drat_currency_code = numCode
           and a.drat_for_currency = GConst.USDOLLAR
           and b.drat_currency_code = GConst.USDOLLAR
 --          decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
           and b.drat_for_currency = numCode1
--           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
           and a.drat_effective_date = datWorkDate
           and a.drat_serial_number=
           (select max(drat_serial_number)
              from trtran012
              where drat_currency_code = numCode
              and drat_for_currency = GConst.USDOLLAR
              and drat_effective_date = datWorkDate
              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
          order by 1 desc;

      end if;

    else

      Open GenCursor for
      select 'Bid' "AskBid", drat_spot_bid "SpotRate", drat_month1_bid "Month_01",
             drat_month2_bid "Month_02", drat_month3_bid "Month_03",drat_month4_bid "Month_04",
             drat_month5_bid "Month_05",drat_month6_bid "Month_06",drat_month7_bid "Month_07",
             drat_month8_bid "Month_08",drat_month9_bid "Month_09",drat_month10_bid "Month_10",
             drat_month11_bid "Month_11",drat_month12_bid "Month_12"
        from trtran012
       where drat_currency_code = numCode
         and drat_for_currency = numCode1
         and drat_effective_date = datWorkDate
         and drat_serial_number= (select max(drat_serial_number)
                                   from trtran012
                                  where drat_currency_code = numCode
                                    and drat_for_currency = numCode1
                                    and drat_effective_date = datWorkDate
                                    and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
                                    and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
      union
      select 'Ask' "AskBid", drat_spot_ask SpotRate, drat_month1_ask "Month_01",
             drat_month2_ask "Month_02", drat_month3_ask "Month_03", drat_month4_ask "Month_04",
             drat_month5_ask "Month_05",drat_month6_ask "Month_06", drat_month7_ask "Month_07",
             drat_month8_ask "Month_08",drat_month9_ask "Month_09", drat_month10_ask "Month_10",
             drat_month11_ask "Month_11",drat_month12_ask "Month_12"
        from trtran012
       where drat_currency_code = numCode
         and drat_for_currency = numCode1
         and drat_effective_date = datWorkDate
         and drat_serial_number= (select max(drat_serial_number)
                                    from trtran012
                                   where drat_currency_code = numCode
                                     and drat_for_currency = numCode1
                                     and drat_effective_date = datWorkDate
                                     and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
        and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
        order by 1 desc;
    End if;

    Goto Process_End;
   End if;
    --modified by manjunath reddy on 07/01/2008 to get all users names,
    if numinfotype = gconst.refallusers then
        varoperation := 'extracting all users:';

        open gencursor for
        select user_user_name,
          user_user_id,user_email_id,user_mobile_phone,user_group_code
        from usermaster;
        goto process_end;
     end if;

if numInfoType = GConst.REFREMAINDERLIST then
    varOperation := 'Extracting Remainders';    
    numCode      := GConst.fncxmlextract(xmldoc, 'AccountCode', numCode); 
    numCode1     := GConst.fncxmlextract(xmldoc, 'RemainderDays', numCode1); 
    numerror     := pkgforexprocess.fncpositiongenerate(varuserid,datworkdate);
        Open GenCursor for
        select 
                pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
                pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "Account Type",
                POSN_REFERENCE_DATE as "Reference Date",
                pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "Counter Party",
                pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "Currency Pair",
                POSN_TRANSACTION_AMOUNT as "Base Amount",
                POSN_FCY_RATE as "Exchange Rate",
                POSN_DUE_DATE as "Maturity Date",
                POSN_USER_ID as "User ID",
                pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
                pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
                POSN_POSITION_INR as "PandL",
                POSN_REFERENCE_NUMBER as "Reference No"
                from trsystem997
                where POSN_ACCOUNT_CODE= decode(numCode,25999999,POSN_ACCOUNT_CODE,numCode)  
                and POSN_DUE_DATE <= (select min(hday_calendar_date) from trsystem001 
                                       where hday_calendar_date >= datworkdate+ numCode1
                                        and hday_day_status not in (26400007,26400008,26400009));
    
 Goto Process_End;
  End if;
--------------------------Shrihari V Ends Here-------------------------------------------------------------------


--------------------------Added By Shrihari V--------------------------------------------------------------------
  
-- if numInfoType = GConst.REFVARIATIONMTM then
--  varOperation := 'Extracting Variation Of MTM Against BenchMark Rate';    
--  vartemp5      := GConst.fncxmlextract(xmldoc, 'AccountCode', vartemp5);
--  numCode1     := GConst.fncxmlextract(xmldoc, 'MTMVariation', numCode1); 
--  vartemp1     := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--  vartemp      := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--  vartemp3     := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--  vartemp4     := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--  numerror     := pkgforexprocess.fncpositiongenerate(varuserid,datworkdate,vartemp,vartemp1,vartemp3,vartemp4);   
--    Open GenCursor for
--        select 
--            pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
--            pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "AccountType",
--            POSN_REFERENCE_DATE as "ReferenceDate",
--            POSN_REFERENCE_NUMBER as "Reference NO",
--            pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
--            pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
--            pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "CounterParty",
--            pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "CurrencyPair",
--            round( POSN_TRANSACTION_AMOUNT,2) as "BaseAmount",
--            round(POSN_FCY_RATE,6) as "BenchMark Rate",
--            round(POSN_INR_VALUE,2) as "AmountInINR",
--            POSN_DUE_DATE as "MaturityDate",
--            round(POSN_M2M_INRRATE,6) as "MTMRate",            
--            round(POSN_POSITION_INR,2) as "PandL",
--            round(((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100),2) as "%Variation"
--            from trsystem997
--            where posn_due_date > datworkdaTE
--            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
--               instr(vartemp5,POSN_ACCOUNT_CODE)>0)
--            and ((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100)>numCode1 
--            and POSN_ACCOUNT_CODE > 25900050    
--      union
--        select 
--            pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
--            pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "AccountType",
--            POSN_REFERENCE_DATE as "ReferenceDate",
--            POSN_REFERENCE_NUMBER as "Reference NO",
--            pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
--            pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
--            pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "CounterParty",
--            pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "CurrencyPair",
--            round( POSN_TRANSACTION_AMOUNT,2) as "BaseAmount",
--            round(POSN_FCY_RATE,6) as "BenchMark Rate",
--            round(POSN_INR_VALUE,2) as "AmountInINR",
--            POSN_DUE_DATE as "MaturityDate",
--            round(POSN_M2M_INRRATE,6) as "MTMRate",            
--            round(POSN_POSITION_INR,2) as "PandL",
--            round(((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100),2) as "%Variation"
--            from trsystem997
--            where posn_due_date > datworkdaTE
--            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
--               instr(vartemp5,POSN_ACCOUNT_CODE)>0) 
--            and ((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100)>numCode1 
--            and POSN_ACCOUNT_CODE < 25900050 ;   
--            
--     Goto Process_End;
--  End if; 
---------------------------Shrihari V Ends Here---------------------------------------------------------------------------

----------------------------updated by shrihari on 11/09/14 -------------------
--if numInfoType = GConst.REFVARIATIONMTM then
--  varOperation := 'Extracting Variation Of MTM Against BenchMark Rate';    
--  vartemp5      := GConst.fncxmlextract(xmldoc, 'AccountCode', vartemp5);
--  numCode1     := GConst.fncxmlextract(xmldoc, 'MTMVariation', numCode1); 
--  vartemp1     := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--  vartemp      := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--  vartemp3     := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--  vartemp4     := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--  numerror     := pkgforexprocess.fncpositiongenerate(varuserid,datworkdate,vartemp,vartemp1,vartemp3,vartemp4);   
--    Open GenCursor for
--        select 
--            pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
--            pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "AccountType",
--            trad_contract_no as "Contract NO",
--            POSN_REFERENCE_DATE as "ReferenceDate",
--            POSN_REFERENCE_NUMBER as "Reference NO",
--            pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
--            pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
--            pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "CounterParty",
--            pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "CurrencyPair",
--            round( POSN_TRANSACTION_AMOUNT,2) as "BaseAmount",
--            round( POSN_TRANSACTION_AMOUNT -(select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
--               and HEDG_RECORD_STATUS not in(10200005,10200006)),2)  as "Covered Amt",
--            round(POSN_FCY_RATE,6) as "BenchMark Rate",
--            round(POSN_INR_VALUE,2) as "AmountInINR",
--            POSN_DUE_DATE as "MaturityDate",
--            round(POSN_M2M_INRRATE,6) as "MTMRate",            
--            round(POSN_POSITION_INR,2) as "PandL",
--            round(((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100),2) as "%Variation",
--            decode(nvl(trad_app,0),77777,'YES','NO') AS "color"
--            from trsystem997,trtran002
--            where posn_reference_number=trad_trade_reference(+)
--            and posn_due_date > datworkdaTE
--            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
--               instr(vartemp5,POSN_ACCOUNT_CODE)>0)
--            and ((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100)>numCode1 
--            and POSN_ACCOUNT_CODE > 25900050   
--             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
--               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0
--      union
--        select 
--            pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
--            pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "AccountType",
--            trad_contract_no as "Contract NO",
--            POSN_REFERENCE_DATE as "ReferenceDate",
--            POSN_REFERENCE_NUMBER as "Reference NO",
--            pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
--            pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
--            pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "CounterParty",
--            pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "CurrencyPair",
--            round( POSN_TRANSACTION_AMOUNT,2) as "BaseAmount",
--            round( POSN_TRANSACTION_AMOUNT -(select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
--               and HEDG_RECORD_STATUS not in(10200005,10200006)),2)  as "Covered Amt",
--            round(POSN_FCY_RATE,6) as "BenchMark Rate",
--            round(POSN_INR_VALUE,2) as "AmountInINR",
--            POSN_DUE_DATE as "MaturityDate",
--            round(POSN_M2M_INRRATE,6) as "MTMRate",            
--            round(POSN_POSITION_INR,2) as "PandL",
--            round(((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100),2) as "%Variation",
--            decode(nvl(trad_app,0),77777,'YES','NO') AS "color"
--            from trsystem997,trtran002
--            where posn_reference_number=trad_trade_reference(+) 
--            and posn_due_date > datworkdaTE
--            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
--               instr(vartemp5,POSN_ACCOUNT_CODE)>0) 
--            and ((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100)>numCode1 
--            and POSN_ACCOUNT_CODE < 25900050 
--             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
--               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0;  
--               
--  ---COLOR CHANGE
--  
--      update trtran002 set trad_app=77777 WHERE TRAD_TRADE_REFERENCE IN
--      ( SELECT posn_reference_number
--            from trsystem997,trtran002
--            where posn_reference_number=trad_trade_reference(+)
--            and posn_due_date > datworkdaTE
--            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
--               instr(vartemp5,POSN_ACCOUNT_CODE)>0)
--            and ((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100)>numCode1 
--            and POSN_ACCOUNT_CODE > 25900050   
--             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
--               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0
--      union
--        select posn_reference_number
--           from trsystem997,trtran002
--            where posn_reference_number=trad_trade_reference(+) 
--            and posn_due_date > datworkdaTE
--            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
--               instr(vartemp5,POSN_ACCOUNT_CODE)>0) 
--            and ((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100)>numCode1 
--            and POSN_ACCOUNT_CODE < 25900050 
--             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
--               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0); 
--      
--     Goto Process_End;
--  End if; 
  
if numInfoType = GConst.REFVARIATIONMTM then
  varOperation := 'Extracting Variation Of MTM Against BenchMark Rate';    
  vartemp5      := GConst.fncxmlextract(xmldoc, 'AccountCode', vartemp5);
  numCode1     := GConst.fncxmlextract(xmldoc, 'MTMVariation', numCode1); 
  vartemp1     := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
  vartemp      := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
  vartemp3     := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
  vartemp4     := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
  numerror     := pkgforexprocess.fncpositiongenerate(varuserid,datworkdate,vartemp,vartemp1,vartemp3,vartemp4);   
    Open GenCursor for
        select 
            pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
            pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "AccountType",
            trad_contract_no as "Contract NO",
            POSN_REFERENCE_DATE as "ReferenceDate",
            POSN_REFERENCE_NUMBER as "Reference NO",
            pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
            pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
            pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "CounterParty",
            pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "CurrencyPair",
            round( POSN_TRANSACTION_AMOUNT,2) as "BaseAmount",
            round( POSN_TRANSACTION_AMOUNT -(select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004
               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
               and HEDG_RECORD_STATUS not in(10200005,10200006)),2)  as "UnCover Amt",
            round(POSN_FCY_RATE,6) as "BenchMark Rate",
            round(POSN_INR_VALUE,2) as "AmountInINR",
            POSN_DUE_DATE as "MaturityDate",
            round(POSN_M2M_INRRATE,6) as "MTMRate",            
            round(POSN_POSITION_INR,2) as "PandL",
            round(((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100),2) as "%Variation",
            decode(nvl(trad_app,0),77777,'YES','NO') AS "color"
            from trsystem997,trtran002
            where posn_reference_number=trad_trade_reference(+)
            and posn_due_date > datworkdaTE
            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
               instr(vartemp5,POSN_ACCOUNT_CODE)>0)
            and ((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100)>numCode1 
            and POSN_ACCOUNT_CODE > 25900050   
             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0
      union
        select 
            pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) as "Company",
            pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) as "AccountType",
            trad_contract_no as "Contract NO",
            POSN_REFERENCE_DATE as "ReferenceDate",
            POSN_REFERENCE_NUMBER as "Reference NO",
            pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) as "Product Category",
            pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) as "Sub Category",
            pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) as "CounterParty",
            pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2)||'/'||pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) as "CurrencyPair",
            round( POSN_TRANSACTION_AMOUNT,2) as "BaseAmount",
            round( POSN_TRANSACTION_AMOUNT -(select nvl(sum(HEDG_HEDGED_FCY),0) from trtran004
               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
               and HEDG_RECORD_STATUS not in(10200005,10200006)),2)  as "UnCover Amt",
            round(POSN_FCY_RATE,6) as "BenchMark Rate",
            round(POSN_INR_VALUE,2) as "AmountInINR",
            POSN_DUE_DATE as "MaturityDate",
            round(POSN_M2M_INRRATE,6) as "MTMRate",            
            round(POSN_POSITION_INR,2) as "PandL",
            round(((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100),2) as "%Variation",
            decode(nvl(trad_app,0),77777,'YES','NO') AS "color"
            from trsystem997,trtran002
            where posn_reference_number=trad_trade_reference(+) 
            and posn_due_date > datworkdaTE
            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
               instr(vartemp5,POSN_ACCOUNT_CODE)>0) 
            and ((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100)>numCode1 
            and POSN_ACCOUNT_CODE < 25900050 
             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0;  
               
  ---COLOR CHANGE
  
      update trtran002 set trad_app=77777 WHERE TRAD_TRADE_REFERENCE IN
      ( SELECT posn_reference_number
            from trsystem997,trtran002
            where posn_reference_number=trad_trade_reference(+)
            and posn_due_date > datworkdaTE
            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
               instr(vartemp5,POSN_ACCOUNT_CODE)>0)
            and ((nvl(POSN_M2M_INRRATE,0)- POSN_FCY_RATE) /POSN_FCY_RATE*100)>numCode1 
            and POSN_ACCOUNT_CODE > 25900050   
             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0
      union
        select posn_reference_number
           from trsystem997,trtran002
            where posn_reference_number=trad_trade_reference(+) 
            and posn_due_date > datworkdaTE
            and (POSN_ACCOUNT_CODE= decode(vartemp5,'25999999',POSN_ACCOUNT_CODE)  or
               instr(vartemp5,POSN_ACCOUNT_CODE)>0) 
            and ((nvl(POSN_FCY_RATE,0)- POSN_M2M_INRRATE) /POSN_FCY_RATE*100)>numCode1 
            and POSN_ACCOUNT_CODE < 25900050 
             and ( POSN_TRANSACTION_AMOUNT -nvl((select sum(HEDG_HEDGED_FCY) from trtran004
               where heDG_TRADE_REFERENCE=POSN_REFERENCE_NUMBER 
               and HEDG_RECORD_STATUS not in(10200005,10200006)),0))  >0); 
      
     Goto Process_End;
  End if;   --------------------------------

    --modified by manjunath reddy on 07/01/2008 to get security policy,

    if numinfotype = gconst.refsecuritypolicy then
--        numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode', numcode);
--        numcode1 := gconst.fncxmlextract(xmldoc,'KeyValues/GroupCode',   numcode1);
    numcode := gconst.fncxmlextract(xmldoc,'Param/CompanyCode', numcode);
        numcode1 := gconst.fncxmlextract(xmldoc,'Param/GroupCode',   numcode1);


        varoperation := 'Extracting access control list for ' || numcode1;

        open gencursor for
        select splc_userid_type useridtype,
          splc_userid_minimum useridminimum,
          splc_userid_maximum useridmaximum,
          splc_userid_content useridcontent,
          splc_access_terminal accessterminal,
          splc_access_time accesstime,
          splc_access_timefrom accesstimefrom,
          splc_access_timeto accesstimeto,
          splc_access_dayyn accessdayyn,
          splc_access_days accessdays,
          splc_access_weeklyoff accessweeklyoff,
          splc_access_holiday accessholiday,
          splc_suspend_type suspendtype,
          splc_suspend_self suspendself,
          splc_login_logoffperiod loginlogoffperiod,
          splc_login_attempts loginattempts,
          splc_login_timedelay logintimedelay,
          splc_login_allowtime loginallowtime,
          splc_password_type passwordtype,
          splc_password_change passwordchange,
          splc_password_frequency passwordfrequency,
          splc_password_minimum passwordminimum,
          splc_password_maximum passwordmaximum,
          splc_password_content passwordcontent,
          splc_password_alpha passwordalpha,
          splc_password_numeric passwordnumeric,
          splc_password_others passwordothers,
          splc_password_dictionary passworddictionary,
          splc_password_reuse passwordreuse
          from securitypolicymaster
          where splc_company_code = numcode
          and splc_policy_group = numcode1;

        goto process_end;
    end if;
    --modified by manjunath reddy on 07/01/2008 to get all users names,
    if numinfotype = gconst.refmaxmenuid then
        varoperation := 'extracting max menu id';

        open gencursor for
        select max(menu_menu_id)
        from menufile;

        goto process_end;

    end if;

    --modified by manjunath reddy on 30/12/2007 to get all users names,
   if numinfotype = gconst.reftrnuserdetails then
        vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
        dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
        numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyDealer',numcode);
        varoperation := 'Extracting particular user details';

        delete from temp;
        insert into temp values (numcode,vartemp);
        commit;

--     open gencursor for
--        SELECT deal_deal_number as "DealNumber",
--               pkgreturncursor.fncgetdescription(deal_swap_outright,1) "ContractType",
--               pkgreturncursor.fncgetdescription(deal_buy_sell,1) "BuySell",
--               pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
--               pkgreturncursor.fncgetdescription(deal_maturity_code,1) "MaturityType",
--               pkgreturncursor.fncgetdescription(deal_base_currency,1) "BaseCurrency",
--               pkgreturncursor.fncgetdescription(deal_other_currency,1) "OtherCurrency",
--               deal_company_code as "CompanyCode", deal_execute_date as "ExecutionDate",
--               deal_hedge_trade "Trade", deal_buy_sell BuySellCode,
--               deal_swap_outright SwapOutRightCode,deal_deal_type DealTypeCode,
--               deal_base_currency BaseCurrencyCode, deal_other_currency OtherCurrencyCode,
--               deal_exchange_rate "ExchangeRate", deal_local_rate "LocalRate",
--               pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "BaseAmount",
--               deal_other_amount "OtherAmount",
--              -- deal_base_amount "BaseAmount",
--               deal_amount_local  "AmountLocal", deal_maturity_code "MaturityCode" ,
--               deal_maturity_from "MaturityFrom",deal_maturity_date "MaturityDate",deal_user_id "UserId",
--               deal_time_stamp TimeStamp
--          FROM tradedealregister
--         where deal_user_id = vartemp
--           and deal_hedge_trade= gconst.TRADEDEAL
--           and deal_execute_date <= dattemp
--           and deal_complete_date is null
--           and deal_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED,10200012)
--        union
--        SELECT cfut_deal_number as "DealNumber",
--               pkgreturncursor.fncgetdescription(cfut_contract_type,1) "ContractType",
--               pkgreturncursor.fncgetdescription(cfut_buy_sell,1) "BuySell",
--               pkgreturncursor.fncgetdescription(Cfut_counter_party,1) "CounterParty",
--               '0' "MaturityType",
--               pkgreturncursor.fncgetdescription(cfut_base_currency,1) "BaseCurrency",
--               pkgreturncursor.fncgetdescription(cfut_other_currency,1) "OtherCurrency",
--               cfut_company_code as "CompanyCode", cfut_execute_date as "ExecutionDate",
--               cfut_hedge_trade "Trade", cfut_buy_sell BuySellCode,
--               cfut_contract_type SwapOutRightCode,cfut_contract_type DealTypeCode,
--               cfut_base_currency BaseCurrencyCode, cfut_other_currency OtherCurrencyCode,
--               cfut_exchange_rate "ExchangeRate", cfut_local_rate "LocalRate",
--               cfut_base_amount "BaseAmount",cfut_other_amount "OtherAmount",
--               cfut_amount_local  "AmountLocal", cfut_maturity_month "MaturityCode" ,
--               cfut_maturity_date "MaturityFrom",cfut_maturity_date "MaturityDate",cfut_user_id "UserId",
--               cfut_time_stamp TimeStamp
--          FROM trtran061
--         where cfut_user_id = vartemp
--           and cfut_hedge_trade= gconst.TRADEDEAL
--           and cfut_execute_date <= dattemp
--           and cfut_complete_date is null
--           and cfut_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED,10200012);
     open gencursor for
          SELECT Dealnumber as "DealNumber", decode(DealType,'F','Forward','U','Future') DealType,
--               pkgreturncursor.fncgetdescription(deal_swap_outright,1) "ContractType",
               pkgreturncursor.fncgetdescription(buycode,1) "BuySell",
               pkgreturncursor.fncgetdescription(bankcode,2) "CounterParty",
               --pkgreturncursor.fncgetdescription(dealMaturity,1) "MaturityType",
               pkgreturncursor.fncgetdescription(CurrencyCode,2) "BaseCurrency",
               pkgreturncursor.fncgetdescription(Othercode,2) "OtherCurrency",
               pkgreturncursor.fncgetdescription(CompanyCode,2) "Company",
                executedate as "ExecutionDate",

               exchangerate "ExchangeRate", inrRate "LocalRate",
               BaseAmount "BaseAmount", OtherAmount "OtherAmount",
               Balancefcy "Balancefcy",
               BalanceInr "BalanceOtherAmount",
              -- deal_base_amount "BaseAmount",
              -- deal_amount_local  "AmountLocal", deal_maturity_code "MaturityCode" ,
               dealMaturity "MaturityFrom",
               --deal_maturity_date "MaturityDate",

               MTMRATE "MTMRate",WashRate "WashRate",PROFITLOSS "ProfitLoss",
               CROSSDEAL ,
                Userid "UserId",CompanyCode as "CompanyCode",
                Crossdeal,hedgecode "Trade",buycode BuySellCode,

               --deal_swap_outright SwapOutRightCode,
               --deal_deal_type DealTypeCode,
               CurrencyCode BaseCurrencyCode, Othercode OtherCurrencyCode

              -- deal_time_stamp TimeStamp
          FROM mvewriskdeals
          where Userid= (case when (select user_group_code from usermaster
                                   where user_user_id=vartemp
                                    and user_group_code in(14200001,14200006,14200003) -- Admin,Cheif Dealer,Risk manager
                                    and user_record_status not in(10200005,10200006)) is null then
                                    vartemp else Userid end)
          and CompanyCode =  decode(numcode,0,Companycode,numcode)
          and CompanyCode in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid);


        goto process_end;

    end if;     --modified by manjunath reddy on 02/012008 to get all users names,

--   if numInfoType = gconst.reftrnalluserdetails then
--        vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
--        dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
--        varoperation := 'Extracting particular user details';
--      Open GenCursor for
--        SELECT deal_deal_number as "DealNumber",pkgreturncursor.fncgetdescription(deal_swap_outright,1) "SwapOutRight", pkgreturncursor.fncgetdescription(deal_buy_sell,1) "BuySell",pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
--               pkgreturncursor.fncgetdescription(deal_maturity_code,1) "MaturityType", pkgreturncursor.fncgetdescription(deal_base_currency,1) "BaseCurrency",pkgreturncursor.fncgetdescription(deal_other_currency,1) "OtherCurrency",
--               deal_company_code as CompanyCode, deal_execute_date as "ExecutionDate", deal_hedge_trade "Trade", deal_buy_sell BuySellCode, deal_swap_outright SwapOutRightCode,
--               deal_deal_type DealTypeCode, deal_base_currency BaseCurrencyCode, deal_other_currency OtherCurrencyCode, deal_exchange_rate "ExchangeRate", deal_local_rate "LocalRate",
--               pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)  "BaseAmount",
--               deal_other_amount "OtherAmount", deal_amount_local  "AmountLocal", deal_maturity_code "MaturityCode" , deal_maturity_from "MaturityFrom",deal_maturity_date "MaturityDate",deal_user_id "UserId",
--               deal_time_stamp TimeStamp,'0' "OptionType", '0' "OptionStyle"
--          FROM hedgedealregister
--         where deal_execute_date <= dattemp
--           and deal_hedge_trade= gconst.TRADEDEAL
--           and deal_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED,10200012)
--           and deal_complete_date is null
--         union
--        SELECT cfut_deal_number as "DealNumber",
--               pkgreturncursor.fncgetdescription(cfut_contract_type,1) "ContractType",
--               pkgreturncursor.fncgetdescription(cfut_buy_sell,1) "BuySell",
--               pkgreturncursor.fncgetdescription(Cfut_counter_party,1) "CounterParty",
--               '0' "MaturityType",
--               pkgreturncursor.fncgetdescription(cfut_base_currency,1) "BaseCurrency",
--               pkgreturncursor.fncgetdescription(cfut_other_currency,1) "OtherCurrency",
--               cfut_company_code as "CompanyCode", cfut_execute_date as "ExecutionDate",
--               cfut_hedge_trade "Trade", cfut_buy_sell BuySellCode,
--               cfut_contract_type SwapOutRightCode,cfut_contract_type DealTypeCode,
--               cfut_base_currency BaseCurrencyCode, cfut_other_currency OtherCurrencyCode,
--               cfut_exchange_rate "ExchangeRate", cfut_local_rate "LocalRate",
--               cfut_base_amount "BaseAmount",cfut_other_amount "OtherAmount",
--               cfut_amount_local  "AmountLocal", cfut_maturity_month "MaturityCode" ,
--               cfut_maturity_date "MaturityFrom",cfut_maturity_date "MaturityDate",cfut_user_id "UserId",
--               cfut_time_stamp TimeStamp,'0' "OptionType", '0' "OptionStyle"
--          FROM trtran061
--         where cfut_hedge_trade= gconst.TRADEDEAL
--           and cfut_execute_date <= dattemp
--           and cfut_complete_date is null
--           and cfut_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED,10200012)
--         union
--        SELECT copt_deal_number as "DealNumber",
--               pkgreturncursor.fncgetdescription(copt_contract_type,1) "ContractType",
--               pkgreturncursor.fncgetdescription(cosu_buy_sell,1) "BuySell",
--               pkgreturncursor.fncgetdescription(copt_exchange_code,1) "CounterParty",
--               '0' "MaturityType",
--               pkgreturncursor.fncgetdescription(copt_base_currency,1) "BaseCurrency",
--               pkgreturncursor.fncgetdescription(copt_other_currency,1) "OtherCurrency",
--               copt_company_code as "CompanyCode", copt_execute_date as "ExecutionDate",
--               copt_hedge_trade "Trade", cosu_buy_sell BuySellCode,
--               copt_contract_type SwapOutRightCode,copt_contract_type DealTypeCode,
--               copt_base_currency BaseCurrencyCode, copt_other_currency OtherCurrencyCode,
--               cosu_strike_rate "ExchangeRate", cosu_local_rate "LocalRate",
--               copt_base_amount "BaseAmount",copt_other_amount "OtherAmount",
--               0  "AmountLocal", 0 "MaturityCode" ,
--               copt_expiry_date "MaturityFrom",copt_maturity_date "MaturityDate",copt_user_id "UserId",
--               copt_time_stamp TimeStamp,
--               pkgreturncursor.fncgetdescription(cosu_Option_type,1) "OptionType",
--               pkgreturncursor.fncgetdescription(copt_option_style,1) "OptionStyle"
--          FROM trtran071 right outer join trtran072
--           on copt_deal_number=cosu_deal_number
--         where copt_hedge_trade= gconst.TRADEDEAL
--           and copt_execute_date <= dattemp
--           and copt_complete_date is null
--           and copt_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED,10200012);
--
--
--        goto process_end;
--    end if;
--


--  if numInfoType = gconst.reftrnalluserdetails then
--    vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
--    dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
--    numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyDealer',numcode);
--
--    varoperation := 'Extracting particular user details';
--    select pick_short_description, user_group_code, pick_key_value
--      into varValue, numCode1, numCode2
--      from trmaster001, trsystem022
--      where pick_key_group = 338
--      and user_user_id = varTemp
--      and instr(user_user_id,pick_short_description) > 0;
--
--      open GenCursor for
--      SELECT dealnumber as "DealNumber", BuySell "BuySell",BankName, Currency, CompanyName,
--             dealdate as "ExecutionDate",  DealAmount "BaseAmount" ,
--             exrate "ExchangeRate" , BalanceFcy "BalanceFcy",Maturity "Maturity",
--             M2mRate "MTMRate",MTMPANDL , WASHRATE,MTMPANDLINR,
--             userid "UserId",pkgReturnCursor.fncGetDescription(InitCode,2) "Init",buysellCode,
--             companycode,CurrencyCode BaseCurrencyCode, Othercode OtherCurrencyCode,INITCODE
--       from vewforwardfuture
--       where status =12400002
--       and CompanyCode= decode(numcode,30199999,companycode,numcode)
--       and CompanyCode in( select usco_company_code from trsystem022a
--                                        where usco_user_id =VarTemp)
--       And Balancefcy>0
--       and HedgeCode=26000002
--       and pkgReturnCursor.fncGetDescription(InitCode,2) like decode(numCode1, GConst.SUBDEALER, varValue, '%')
--   Union all
--    Select Copt_Deal_Number "DealNumber",
--        case
--          when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Buy'
--          when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Sell'
--        End "BuySell",
----      Pkgreturncursor.Fncgetdescription(Cosu_Buy_Sell,2) "BuySell",
--        pkgreturncursor.fncgetdescription(Copt_Counter_Party,2) "BankName",
--        Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) ||'/'||
--        Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) "Currency",
--        Pkgreturncursor.Fncgetdescription(Copt_Company_Code,2) As Companyname,
--        Copt_Execute_Date "ExecutionDate",Copt_Base_Amount "BaseAmount",
--        Cosu_Strike_Rate "ExchangeRate",
--        pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,datWorkDate) AS  "BalanceFcy",
--        Copt_Maturity_Date "Maturity", 0 "MTMRate", 0 "MTMPANDL" , 0 "WASHRATE",0 "MTMPANDLINR",
--        Copt_User_Id "UserId",pkgReturnCursor.fncGetDescription(copt_init_code,2) "Init",
--        case
--          when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 25300001
--          when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 25300002
--        End "Buysellcode", Copt_Company_Code As Companycode,
--        Copt_Base_Currency As Basecurrencycode,Copt_Other_Currency As Othercurrencycode,
--        Copt_Init_Code As Initcode
--     From Trtran071,Trtran072
--     Where Copt_Deal_Number=Cosu_Deal_Number
--         And  Copt_Process_Complete =12400002
--         And Copt_Record_Status Not In (10200005,10200006)
--         And Cosu_Record_Status Not In (10200005,10200006)
--         and cosu_buy_sell=25300002
--         and copt_company_code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varTemp)
--         And Copt_Company_Code =Decode(Numcode,30199999,Copt_Company_Code,Numcode)
--         and COPT_HEDGE_TRADE=26000002
--         and pkgReturnCursor.fncGetDescription(copt_Init_Code,2)
--          like decode(numCode1, GConst.SUBDEALER, varValue, '%');
--     Goto Process_End;
--    End If;
if numInfoType = gconst.reftrnalluserdetails then
    vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
    dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
    numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyDealer',numcode);
        
    varoperation := 'Extracting particular user details';
     select (case when user_group_code in(14200001,14200003,14200006) then null
            else vartemp end)
       into vartemp1
       from trsystem022
       where user_user_id =vartemp
       and user_record_status not in(10200005,10200006);

      open GenCursor for
      SELECT dealnumber as "DealNumber", BuySell "BuySell",BankName, Currency, CompanyName,
             dealdate as "ExecutionDate",  DealAmount "BaseAmount" ,
             exrate "ExchangeRate" , BalanceFcy "BalanceFcy",Maturity "Maturity",
             M2mRate "MTMRate",MTMPANDL , WASHRATE,MTMPANDLINR,
             userid "UserId",pkgReturnCursor.fncGetDescription(InitCode,2) "Init",buysellCode,
             companycode,CurrencyCode BaseCurrencyCode, Othercode OtherCurrencyCode,INITCODE,Userid
       from vewforwardfuture 
       where status =12400002   
       and CompanyCode= decode(numcode,30199999,companycode,numcode)
       and CompanyCode in( select usco_company_code from trsystem022a
                                        where usco_user_id =VarTemp)
       And Balancefcy>0
     --  and HedgeCode=26000002
       --and userid= decode(Vartemp1,null,userid,VarTemp1)
       --and pkgReturnCursor.fncGetDescription(InitCode,2) like decode(numCode1, GConst.SUBDEALER, varValue, '%')  
   Union all
    Select Copt_Deal_Number "DealNumber",
        case
          when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Buy'
          when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Sell'
        End "BuySell", 
--      Pkgreturncursor.Fncgetdescription(Cosu_Buy_Sell,2) "BuySell",
        pkgreturncursor.fncgetdescription(Copt_Counter_Party,2) "BankName",
        Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) ||'/'|| 
        Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) "Currency",  
        Pkgreturncursor.Fncgetdescription(Copt_Company_Code,2) As Companyname,
        Copt_Execute_Date "ExecutionDate",Copt_Base_Amount "BaseAmount",
        Cosu_Strike_Rate "ExchangeRate", 
        pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,datWorkDate) AS  "BalanceFcy", 
        Copt_Maturity_Date "Maturity", 0 "MTMRate", 0 "MTMPANDL" , 0 "WASHRATE",0 "MTMPANDLINR",
        Copt_User_Id "UserId",pkgReturnCursor.fncGetDescription(copt_init_code,2) "Init",
        case
          when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 25300001
          when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 25300002
        End "Buysellcode", Copt_Company_Code As Companycode,
        Copt_Base_Currency As Basecurrencycode,Copt_Other_Currency As Othercurrencycode,
        Copt_Init_Code As Initcode,copt_user_id userid
     From Trtran071,Trtran072
     Where Copt_Deal_Number=Cosu_Deal_Number
         And  Copt_Process_Complete =12400002
         And Copt_Record_Status Not In (10200005,10200006)
         And Cosu_Record_Status Not In (10200005,10200006)
         and cosu_buy_sell=25300002
         and copt_company_code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varTemp)
         And Copt_Company_Code =Decode(Numcode,30199999,Copt_Company_Code,Numcode);
       --  and COPT_HEDGE_TRADE=26000002 ;
        -- and copt_user_id = decode(vartemp1,null,copt_user_id,vartemp1);
--         and pkgReturnCursor.fncGetDescription(copt_Init_Code,2) 
--          like decode(numCode1, GConst.SUBDEALER, varValue, '%')
          
     Goto Process_End;
    End If;
    ---commented on 05-Aug-13 12:16 pm
--    if numInfoType = GConst.REFPOSITIONGROUP then
--        varoperation := 'Generating Position Sheet Entires';
--        numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);
--        varOperation := 'Opening cursor for the position group';
--        numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode', numcode);
--        numCode1 := gconst.fncxmlextract(xmldoc,'KeyValues/CurrencyCode', numcode);
--     --   varQuery := 'select pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",';
--        if numCode1 = 30400003 then
--           varQuery := 'select decode(POSN_ACCOUNT_CODE,25900075,'||'''Futures-Sale-'''||',25900015,'||'''Futures-Buy-'''||')'||'||'||'pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",';
--        else
--           varQuery := 'select pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",';
--        end if;
--
--                      if numCode1 = 30400003 then
--                           varQuery := varQuery || 'sum(posn_transaction_amount)  as "No Of Lots",';
--                      end if;
--                            varQuery := varQuery ||'decode('|| numCode1 ||',30400003,
--                            pkgreturnreport.FNCCONVRS(sum(posn_inr_value),2,30400004),
--                            pkgreturnreport.FNCCONVRS(sum(posn_transaction_amount),2,30400004)) "TransAmount",
--                            pkgreturnreport.FNCCONVRS(sum(POSN_REVALUE_USD),2,30400004) "RevaluedUsd",
--                            pkgreturnreport.FNCCONVRS(sum (posn_position_inr)) "ProfitLoss",
--                            posn_account_code "AccountCode" ,posn_product_code "productCode"
--                       from trsystem997, trmaster001
--                      where posn_account_code = pick_key_value';
--
--       if numCode > 0 then
--          varQuery := varQuery || ' and posn_company_code = ' || numCode;
--       end if;
--
--       if numCode1 > 0 then
--          varQuery := varQuery || ' and posn_currency_code = ' || numCode1;
--       end if;
--          varQuery := varQuery || ' group by  posn_account_code,posn_product_code';
--
--       delete from temp;
--       insert into temp values (varQuery,varQuery);
--       commit;
--
--       open GenCursor for varQuery;
--
--
--
--      GoTo Process_End;
--    End if;
             -------------modified by Ishwar/Aakash 05-Aug-13 12:17 pm
--if numInfoType = GConst.REFPOSITIONGROUP then
--        varoperation := 'Generating Position Sheet Entires';
--        numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);
--        varOperation := 'Opening cursor for the position group';
--        numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode', numcode);
--        numCode1 := gconst.fncxmlextract(xmldoc,'KeyValues/CurrencyCode', numcode);
--     --   varQuery := 'select pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",';
--        if numCode1 = 30400003 then
--           varQuery := 'select decode(POSN_ACCOUNT_CODE,25900075,'||'''Futures-Sale-'''||',25900015,'||'''Futures-Buy-'''||')'||'||'||'pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",';
--        else
--           varQuery := 'select pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",';
--        end if;
--
--                      if numCode1 = 30400003 then
--                           varQuery := varQuery || 'sum(posn_transaction_amount)  as "No Of Lots",';
--                      end if;
--                            varQuery := varQuery ||'decode('|| numCode1 ||',30400003,
--                            pkgreturnreport.FNCCONVRS(sum(posn_inr_value),2,30400004),
--                            pkgreturnreport.FNCCONVRS(sum(posn_transaction_amount),2,30400004)) "TransAmount",
--                            pkgreturnreport.FNCCONVRS(sum(POSN_REVALUE_USD),2,30400004) "RevaluedUsd",
--                            pkgreturnreport.FNCCONVRS(sum (posn_position_inr)) "ProfitLoss",
--                            posn_account_code "AccountCode" ,posn_product_code "productCode"
--                       from trsystem997, trmaster001
--                      where posn_account_code = pick_key_value
--                       ';
--
--       if ((numCode != 0) and (numCode != 30199999))  then
--          varQuery := varQuery || ' and posn_company_code = ' || numCode;
--       end if;
--
--       if ((numCode1 != 0) and (numCode1 != 30499999)) then
--          varQuery := varQuery || ' and posn_currency_code = ' || numCode1;
--       end if;
--          varQuery := varQuery || ' group by  posn_account_code,posn_product_code';
--
--       delete from temp;
--       insert into temp values (varQuery,varQuery);
--       commit;
--
--       open GenCursor for varQuery;
--
--
--
--      GoTo Process_End;
--    End if;
----taken frombradesh as per Manju
   if numInfoType = GConst.REFPOSITIONGROUP then
--        varoperation := 'Generating Position Sheet Entires';
--        numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);
--        varOperation := 'Opening cursor for the position group';
--        numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode', numcode);
--        numCode1 := gconst.fncxmlextract(xmldoc,'KeyValues/CurrencyCode', numcode);
     --   varQuery := 'select pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",'; 
     
    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
    vartemp := GConst.fncxmlextract(xmldoc,  'CompanyCode', vartemp);  
   -- vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
    --vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
    --numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);  
   -- insert into temp values(numCode1,numCode2); commit;
    
    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);


--        if instr(vartemp1,'30400003')>0  then 
--           varQuery := 'select decode(POSN_ACCOUNT_CODE,25900075,'||'''Futures-Sale-'''||',25900015,'||'''Futures-Buy-'''||')'||'||'||'pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",'; 
--        else
--           varQuery := 'select pkgreturncursor.fncgetdescription(posn_product_code,1)  "ACHead",'; 
--        end if;
          
--                      if instr(vartemp1,'30400003')>0  then
--                           varQuery := varQuery || 'sum(posn_transaction_amount)  as "No Of Lots",';
--                      end if;            
--                            varQuery := varQuery ||' (case when instr(' ||''' || vartemp1 ||''' ||','||'''30400003'''||')>0 then
--                            pkgreturnreport.FNCCONVRS(sum(posn_inr_value),2,30400004)
--                            else
--  pkgreturnreport.FNCCONVRS(sum(posn_transaction_amount),2,30400004)  "TransAmount", 
           varQuery := 'select pkgreturncursor.fncgetdescription(posn_account_code,1)  "AC Head",
                                null "Portfolio",' ;
           if length(vartemp1)>8  then
              varQuery := varQuery || ' pkgreturnreport.FNCCONVRS(sum(POSN_REVALUE_USD),2,30400004) "Revalued Usd", ';
            else
              varQuery := varQuery || ' pkgreturnreport.FNCCONVRS(sum(posn_transaction_amount),2,30400004) "TransAmount", ';
            end if;  
               varQuery := varQuery ||' pkgreturnreport.FNCCONVRS(sum (posn_position_inr)) "Profit Loss",
                            33300001 "ProductCode", posn_account_code "AccountCode" 
                       from trsystem997, trmaster001
                      where posn_account_code = pick_key_value
                        and posn_company_code in ( ' || vartemp || ')
                        and posn_currency_code in ( ' || vartemp1 || ')
                        group by  posn_account_code';
--
--       if instr(vartemp1  then
--          varQuery := varQuery || ' and posn_company_code = ' || numCode;
--       end if;        
--       
--       if ((numCode1 != 0) and (numCode1 != 30499999)) then
--          varQuery := varQuery || ' and posn_currency_code = ' || numCode1;
--       end if;
--          varQuery := varQuery || ' group by  posn_account_code,posn_product_code';
--       
       delete from temp;
       insert into temp values (varQuery,varQuery);
       commit;
       
       open GenCursor for varQuery;
       


      GoTo Process_End;        
    End if;
    ---end

    if numInfoType = GConst.refPositionSheet then
        varOperation := 'Generating the cursor for position sheet';
        --numcode :=gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode',numcode);
        vartemp :=gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode',vartemp);
        vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
        vartemp5 := GConst.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
        numCode1 := GConst.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
        numCode2 := GConst.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);
  --      numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);

--            sum(case when length(vartemp1)>8 then posn_revalue_usd else posn_transaction_amount end) AmountFCY,
--        sum((case when length(vartemp1)>8 then posn_revalue_inr else posn_inr_value end)) AmountLocal,
--       nvl(sum((case when length(vartemp1)>8 then posn_revalue_usd*posn_M2M_USDRATE else posn_transaction_amount*posn_M2M_INRRATE end)),0) AmountMTMLocal,
    
    --numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);  
    insert into temp values(numCode1,numCode2); commit;
    
    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate,
                 vartemp,vartemp1,'33399999','33899999',vartemp5,
                 numCode1,numCode2);
             
        insert into temp values('Chandra',vartemp);
        Open GenCursor for
        select pkgreturncursor.fncgetdescription(posn_company_code,1)  "CompanyName",
               pkgreturncursor.fncgetdescription(posn_currency_code,1) "Currency",
               pkgreturncursor.fncgetdescription(posn_product_code,1) "AccountDesc",
               posn_reference_number "ReferenceNumber",posn_reference_date "ReferenceDate",
               pkgreturnreport.FNCCONVRS((case when length(vartemp1)>8 then posn_revalue_usd else posn_transaction_amount end),2,30400004) "TransAmount",
               (case when length(vartemp1)>8 then posn_revalue_usd else posn_transaction_amount end) "Lot Size",
               posn_fcy_rate "Lot Rate",
               pkgreturnreport.FNCCONVRS(posn_fcy_rate,4) "ExchangeRate",
               pkgreturnreport.FNCCONVRS((case when length(vartemp1)>8 then posn_revalue_inr else posn_inr_value end)) "INRValue",
               posn_dealer_id "DealerID", pkgreturncursor.fncgetdescription(posn_counter_party,2) "CounterParty",
               posn_company_code "CompanyCode", posn_currency_code "CurrencyCode",posn_account_code "AccountCode",
               posn_counter_party "CounterPartyCode",pkgreturnreport.FNCCONVRS(posn_m2m_inrrate,4,30400004) "M2MRate",
               pkgreturnreport.FNCCONVRS((case when length(vartemp1)>8 then posn_revalue_usd*posn_M2M_USDRATE else posn_transaction_amount*posn_M2M_INRRATE end)) "RevaluedINR",
               pkgreturnreport.FNCCONVRS(posn_position_inr) "ProfitLoss",posn_due_date "MaturityDate",
               posn_product_code ProductCode
          from trsystem997
          where posn_company_code  in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid);
          --and posn_company_code = vartemp;                                        
        goto process_end;
    end if;
        --modified by manjunath reddy on 05/02/2008 to get all users names,

    if numinfotype = gconst.refRiskDetails then
        numcode :=gconst.fncxmlextract(xmldoc,'Param/RiskType',numcode);
        varoperation := 'extracting particular risk details';
        open gencursor for
           select 
           pkgreturncursor.fncgetdescription(RISK_COMPANY_CODE,1)  "Company", pkgreturncursor.fncgetdescription(RISK_LOCATION_CODE,1)  "Location",
           pkgreturncursor.fncgetdescription(RISK_MODULE_CODE,1)  "Module", pkgreturncursor.fncgetdescription(RISK_RISK_TYPE,1)  "RiskTypeDesc",
           RISK_RISK_REFERENCE "RiskReference", RISK_EFFECTIVE_DATE "EffectiveDate",
           pkgreturncursor.fncgetdescription(RISK_PRODUCT_CODE,1)  "Portfolio", pkgreturncursor.fncgetdescription(RISK_SUBPRODUCT_CODE,1) "SubPortfolio",
           pkgreturncursor.fncgetdescription(RISK_COUNTER_PARTY,1)  "CounterPartyDesc", pkgreturncursor.fncgetdescription(RISK_CURRENCY_CODE,1)  "Currency",
           pkgreturncursor.fncgetdescription(RISK_CURRENCY_PRODUCT,1)  "CurrencyProductDesc", pkgreturncursor.fncgetdescription(RISK_HEDGE_TRADE,1)  "HedgeTradeDesc",
           pkgreturncursor.fncgetdescription(RISK_SWAP_OUTRIGHT,1)  "SwapOutrightDesc", pkgreturncursor.fncgetdescription(RISK_BUY_SELL,1)  "BuySellDesc",
           pkgreturncursor.fncgetdescription(RISK_DEAL_TYPE,1)  "DealTypeDesc", pkgreturncursor.fncgetdescription(RISK_CROSS_CURRENCY,1)  "CrossCurrencyDesc",
           pkgreturncursor.fncgetdescription(RISK_GAP_FREQUENCY,1)  "GAPFrequencyDesc", pkgreturncursor.fncgetdescription(RISK_LOCKIN_RATETYPE,1)  "LockinRatetypeDesc",
           pkgreturncursor.fncgetdescription(RISK_LOCKINRATE,1)  "LockinrateDesc", pkgreturncursor.fncgetdescription(RISK_ACTION_TAKEN,1)  "ActionTakenDesc",
           pkgreturncursor.fncgetdescription(RISK_SCHEME_CODE,1)  "SchemeCodeDesc", pkgreturncursor.fncgetdescription(RISK_INVESTMENT_CODE,1)  "InvestmentCodeDesc",
           pkgreturncursor.fncgetdescription(RISK_AMC_CODE,1)  "AmcCodeDesc", pkgreturncursor.fncgetdescription(RISK_PLAN_CODE,1)  "PlanCodeDesc",
           pkgreturncursor.fncgetdescription(RISK_OPTION_CODE,1)  "OptionCodeDesc", pkgreturncursor.fncgetdescription(RISK_BROKER_CODE,1)  "BrokerCodeDesc",
           pkgreturncursor.fncgetdescription(RISK_SCHEME_CATEGORY,1)  "SchemeCategoryDesc",
           RISK_COMPANY_CODE "Companycode", RISK_LOCATION_CODE "LocationCode", RISK_MODULE_CODE "ModuleCode",
            RISK_RISK_TYPE "RiskType", RISK_HEDGE_TRADE "HedgeTrade", RISK_BUY_SELL "BuySell", RISK_SWAP_OUTRIGHT "SwapOutright",
            RISK_DEAL_TYPE "DealType", RISK_COUNTER_PARTY "CounterParty", RISK_CURRENCY_CODE "CurrencyCode", RISK_DEALER_ID "DealerId",
            RISK_CROSS_CURRENCY "CrossCurrency", RISK_LIMIT_USD "LimitUSD", RISK_LIMIT_LOCAL "LimitLocal", RISK_LIMIT_PERCENT "LimitPercent",
            RISK_ACTION_TAKEN " ActionTaken", RISK_STAKE_HOLDER "StakeHolder", RISK_FLUCT_ALLOWED "FluctAllowed",
            RISK_FLUCT_CEO " FluctCEO", RISK_NOOF_DAYS "NoOfDays", RISK_PRODUCT_CODE "ProductCode", RISK_SUBPRODUCT_CODE "SubproductCode",
            RISK_AMC_CODE "AMCCode", RISK_SCHEME_CODE "SchemeCode", RISK_INVESTMENT_CODE "InvestmentCode", RISK_PLAN_CODE "PlanCode",
            RISK_OPTION_CODE "OptionCode", RISK_BROKER_CODE "BrokerCode", RISK_SCHEME_CATEGORY "SchemeCategory", RISK_LIMIT_FCY "LimitFCY",
            RISK_GAP_FREQUENCY "GAPFrequency", RISK_CURRENCY_PRODUCT "CurrencyProduct", RISK_LOCKIN_BENTCHMARK "LockInBenchmark",
            RISK_LOCKIN_RATETYPE "LockInRateType", RISK_LOCKINRATE "LockInRate"
            from riskmaster
            where risk_risk_type=numcode;
         goto process_end;
       end if;

       --modified by ramya on 08/02/2008 to report
    if numinfotype = gconst.refReportMenu then
        varoperation := 'extracting report menu:';

        open gencursor for
        select * from reporttable;
        goto process_end;
     end if;

  -- modified by by manjunath reddy on 05/03/2008 for geting risk params
    if numinfotype= gconst.refRiskParam then

       varoperation := 'extracting Risk Parameters';
       numcode :=gconst.fncxmlextract(xmldoc,'KeyValues/RiskType',numcode);
       vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/DelarId',vartemp);
       if vartemp !='0' then
          vartemp1:='and rprm_dealer_id' || vartemp;
       end if;

       sqlQuery :='select rprm_company_code as companycode,rprm_risk_type as risktype,
                          rprm_hedge_trade as hedgetrade, rprm_buy_sell as buysell,
                          rprm_swap_outright as swapoutright,rprm_deal_type as dealtype,
                          rprm_counter_party as counterparty,rprm_currency_code as currencycode,
                          rprm_dealer_id as dealerid , rprm_cross_currency CrossCurrency,
                          rprm_gross_net grossnet,rprm_fluct_allowed as fluctallowed,
                          rprm_fluct_ceo as fluctceo,
                           RPRM_LIMIT_IN_USD as limitinusd,
                            RPRM_LIMIT_IN_LOCAL as limitinlocal,
                             RPRM_LIMIT_IN_PERCENT as limitinpercent,
                             RPRM_LIMIT_INFCY as limitinFCY

                     from riskparameter
                    where rprm_risk_type =' || numcode || vartemp1;

       open gencursor for sqlquery;
       goto process_end;
    end if;
  -- modified by by manjunath reddy on 05/03/2008 for geting risk params
if numInfotype = GConst.REFREVERSEDTLS then
      
        varoperation := 'extracting trade details'; 
        numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
        ---numCode1 := GConst.fncXMLExtract(xmldoc,'CategoryType', numCode1);                    
        varQuery := '//' || varEntity || '/ROW/';
        Begin
          varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference', 
                      varTemp, GConst.TYPENODEPATH);
          numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial', 
                      numTemp, GConst.TYPENODEPATH);
        Exception 
          when others then
            varTemp := '';
        End;
        Open GenCursor for
            SELECT TRAD_PRODUCT_CATEGORY "ProductCategory",
            NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 WHERE CDEL_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
            AND CDEL_DEAL_NUMBER = DEAL_DEAL_NUMBER AND DEAL_DEAL_TYPE NOT IN(25400001)),0)AS "DealAmount"
            FROM TRTRAN002 WHERE trad_trade_reference = varTemp
            UNION ALL
            SELECT 33300003 "ProductCategory",
            NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 WHERE CDEL_TRADE_REFERENCE = BCRD_BUYERS_CREDIT
            AND CDEL_DEAL_NUMBER = DEAL_DEAL_NUMBER AND DEAL_DEAL_TYPE NOT IN(25400001)),0)AS "DealAmount"
            FROM TRTRAN045 WHERE BCRD_BUYERS_CREDIT = varTemp;
        goto process_end;
      
      END IF;

  ----modified by manjunath sir on 15/04/2014

--  if numInfoType = GConst.REFTRADEDEALS then
--        varOperation := 'Extracting Trade Register for Hedging';
--         insert into temp values ('Here','hERE');
--         COMMIT;
--        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--         insert into temp values ('Here' || numCode ||numcode2,numcode3);
--         COMMIT;
--
--   --modified by kumar.h on 13/05/09
--      if varentity in ('HEDGEREGISTER') then
--
--             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--
--      end if;
--
--          begin
--             numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
--           exception
--            when others then
--              numcode2:=33300000;
--            end;
--           begin
--             numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
--           exception
--            when others then
--              numcode3:=33800000;
--           end;
--    --modified by kumar.h on 13/05/09
--    insert into temp values ('Here' || numCode ||numcode2,numcode3);
--    commit;
--
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
----  if numCode=GConst.PURCHASEDEAL then
--       vartemp1 := Gconst.LOANBUYERSCREDIT ;--|| ',' ||Gconst.LOANTERMLOAN ;
-- --    insert into temp values (vartemp1,numCode);commit;
--    Open GenCursor for
--     select  *
--       from
--       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription",
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          NVL((select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GConst.UTILCONTRACTOS,1,datworkdate) "OutStanding",
-- 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) -
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference)) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp) "HedgingAmount",
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount",
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate",
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus
--          from TradeRegister a
--          where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
--          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
--        union
--        select 'BuyersCredit' "ProductDescription",bcrd_sanction_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "BankName",
--          bcrd_due_date "ContractMaturity", bcrd_due_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CurrencyName",
--          bcrd_sanctioned_fcy "BillAmount",
--          pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) -
--             (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit))"UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit
--             and hedg_deal_number = varTemp) "HedgingAmount",
--          bcrd_conversion_rate "ExchangeRate",bcrd_sanctioned_inr "RupeeAmount",
--          bcrd_buyers_credit "TradeReference", bcrd_sanction_date as "ReferenceDate",
--          bcrd_loan_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(bcrd_company_code, 2) as "CompanyName",
--          bcrd_local_bank BankCode,bcrd_company_code CompanyCode,
--          bcrd_currency_code currencyCode ,0 RecordStatus
--          from trtran045 a
--          where bcrd_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--          and bcrd_process_complete = GConst.OPTIONNO
--          and bcrd_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and numcode2 = 33300003
--          and numcode3 = 33800003
--          order by 1
--         )a;
----        where a."BillAmount" > a."CoveredAmount";
----    elsif (numCode=GConst.SALEDEAL) then
----       vartemp1 := Gconst.LOANPCFC || ',' || GConst.LOANPSCFC ;
----    Open GenCursor for
----     select  *
----       from
----        (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",
----          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
----          GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp) "HedgingAmount",
----          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
----          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
----          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
----          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        union
----        select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",0  "CoveredAmount",
------          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
------          GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = fcln_loan_number
----             and hedg_deal_number = varTemp) "HedgingAmount",
----          fcln_sanction_date as "ReferenceDate", '' "ProductDescription",
----          fcln_bank_reference as "BillReference",fcln_maturity_to "Maturity",
----          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,
----          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus
----          from trtran005 a
----          where fcln_loan_type in (Gconst.LOANPCFC , GConst.LOANPSCFC  )
----          and fcln_process_complete = GConst.OPTIONNO
----          --Yet to define the product Codes export loans
---- --         and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
---- ---         and trad_subproduct_Code = decode(number3,33800000,trad_subproduct_code,numbercode3)
----
----          and fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         )a
----        where a."BillAmount" > a."CoveredAmount";
----    end if;
--        Goto Process_End;
--   End if;
if numinfoType = Gconst.REFPHYSICALTRADES then 
 varOperation := 'Extracting Commodity physical trade details for Hedging';
   numcode := GConst.fncXMLExtract(xmldoc,'BuySell',numcode);
   
     Open GenCursor for
     select  trad_trade_reference as "BillReference",
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
          trad_maturity_date "BillMaturity",
          trad_product_description as "ProductName",
          --TRAD_PRODUCT_QUANTITY "Quantity" ,
          trad_reference_date  "DealDate" ,
          TRAD_spot_RATE + trad_forward_rate "Rate",
          trad_trade_fcy  "BillAmount",
          TRAD_PRODUCT_QUANTITY "OutstaingQTY",
          (select NVL(sum(hedg_hedged_fcy),0)
             from HedgeRegister
             where hedg_trade_reference = trad_trade_reference
             and hedg_record_status between 10200001 and 10200004) "CoveredQTY",
         -- (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
          (TRAD_PRODUCT_QUANTITY-
          (select NVL(sum(hedg_hedged_fcy),0)
             from HedgeRegister
             where hedg_trade_reference = trad_trade_reference
             and hedg_record_status between 10200001 and 10200004)) "UncoveredQTY",
          (select NVL(sum(hedg_hedged_fcy),0)
             from HedgeRegister
             where hedg_trade_reference = trad_trade_reference
             and hedg_deal_number = varTemp
             and hedg_record_status between 10200001 and 10200004) "HedgingQTY",  
          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
          trad_trade_remarks "BankReference",
          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
          trad_local_bank BankCode,trad_company_code CompanyCode,
          trad_trade_currency currencyCode ,0 RecordStatus
          from TradeRegister a
          where trad_import_export = decode(numCode, 25300001,25300002,25300002,25300001)
          and trad_process_complete = GConst.OPTIONNO
          and trad_Company_Code in
          (select usco_company_code from trsystem022a
           where usco_user_id = varUserid)
          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
   Goto Process_End;
end if;

-- if numInfoType = GConst.REFTRADEDEALS then
--        varOperation := 'Extracting Trade Register for Hedging';
----        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
----         insert into temp values ('Here' || numCode ||numcode2,numcode3);
----         COMMIT;
----         
----   --modified by kumar.h on 13/05/09 
----      if varentity in ('HEDGEREGISTER') then
----      
----             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
----
----      end if;
----      
----          begin   
----             numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
----           exception
----            when others then
----              numcode2:=33300000;
----            end;
----           begin 
----             numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
----           exception
----            when others then
----              numcode3:=33800000;
----           end;  
----    --modified by kumar.h on 13/05/09 
----    insert into temp values ('Here' || numCode ||numcode2,numcode3);
----    commit;
--    Begin
--      varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--      vartemp  := varQuery ||'BuySell';
--      numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
--      if varentity in ('HEDGEREGISTER') then
--       	varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--       	vartemp  := varQuery ||'BaseCurrency';
--        numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode1,Gconst.TYPENODEPATH);
--      end if;
--      begin   
--        varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--        vartemp  := varQuery ||'BackupDeal';    
--        numcode2 := GConst.fncXMLExtract(xmldoc,vartemp,numcode2,Gconst.TYPENODEPATH);
--      exception
--         when others then
--          numcode2:=33300000;
--      end;
--
--      begin 
--        varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--        vartemp  := varQuery ||'InitCode';    
--        numcode3 := GConst.fncXMLExtract(xmldoc,vartemp,numcode3,Gconst.TYPENODEPATH);
--      exception
--        when others then
--          numcode3:=33800000;
--      end; 
--      Exception
--        when others then
--          numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--          insert into temp values ('Here' || numCode ||numcode2,numcode3);
--          COMMIT;
--         
--   --modified by kumar.h on 13/05/09 
--        if varentity in ('HEDGEREGISTER') then
--             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        end if;
--        begin   
--          numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
--        exception
--          when others then
--       	 numcode2:=33300000;
--        End;
--        begin 
--          numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
--        exception
--          when others then
--            numcode3:=33800000;
--        end;  
--    --modified by kumar.h on 13/05/09 
--        insert into temp values ('Here' || numCode ||numcode2,numcode3);
--        commit;
--      End;
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
----  if numCode=GConst.PURCHASEDEAL then
--       vartemp1 := Gconst.LOANBUYERSCREDIT ;--|| ',' ||Gconst.LOANTERMLOAN ;
-- --    insert into temp values (vartemp1,numCode);commit;
--    Open GenCursor for
--     select  *
--       from
--       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          NVL((select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp
--             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus
--          from TradeRegister a
--          where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--        -- and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
--        --  and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
--        union
--        select 'BuyersCredit' "ProductDescription",bcrd_sanction_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "BankName",
--          bcrd_due_date "ContractMaturity", bcrd_due_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CurrencyName",
--          bcrd_sanctioned_fcy "BillAmount",
--          pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit
--             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) - 
--             (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit
--             and hedg_record_status between 10200001 and 10200004))"UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit
--             and hedg_deal_number = varTemp
--             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
--          bcrd_conversion_rate "ExchangeRate",bcrd_sanctioned_inr "RupeeAmount",
--          bcrd_buyers_credit "TradeReference", bcrd_sanction_date as "ReferenceDate",
--          bcrd_loan_remarks "BankReference", 
--          pkgreturncursor.fncgetdescription(bcrd_company_code, 2) as "CompanyName",
--          bcrd_local_bank BankCode,bcrd_company_code CompanyCode,
--          bcrd_currency_code currencyCode ,0 RecordStatus
--          from trtran045 a
--          where bcrd_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--          and bcrd_process_complete = GConst.OPTIONNO
--          and bcrd_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--         -- and numcode2 = 33300003
--         -- and numcode3 = 33800003
--          order by 1
--         )a;
----        where a."BillAmount" > a."CoveredAmount";
----    elsif (numCode=GConst.SALEDEAL) then
----       vartemp1 := Gconst.LOANPCFC || ',' || GConst.LOANPSCFC ;
----    Open GenCursor for
----     select  *
----       from
----        (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",
----          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
----          GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp) "HedgingAmount",  
----          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription", 
----          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
----          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,  
----          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus                           
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)   
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        union
----        select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",0  "CoveredAmount",
------          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
------          GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = fcln_loan_number
----             and hedg_deal_number = varTemp) "HedgingAmount",  
----          fcln_sanction_date as "ReferenceDate", '' "ProductDescription", 
----          fcln_bank_reference as "BillReference",fcln_maturity_to "Maturity",
----          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,  
----          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus                           
----          from trtran005 a
----          where fcln_loan_type in (Gconst.LOANPCFC , GConst.LOANPSCFC  )
----          and fcln_process_complete = GConst.OPTIONNO
----          --Yet to define the product Codes export loans
---- --         and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
---- ---         and trad_subproduct_Code = decode(number3,33800000,trad_subproduct_code,numbercode3)
----
----          and fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         )a
----        where a."BillAmount" > a."CoveredAmount";
----    end if;
--        Goto Process_End;
--   End if;
-- if numInfoType = GConst.REFTRADEDEALS then
--        varOperation := 'Extracting Trade Register for Hedging';
----        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
----         insert into temp values ('Here' || numCode ||numcode2,numcode3);
----         COMMIT;
----         
----   --modified by kumar.h on 13/05/09 
----      if varentity in ('HEDGEREGISTER') then
----      
----             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
----
----      end if;
----      
----          begin   
----             numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
----           exception
----            when others then
----              numcode2:=33300000;
----            end;
----           begin 
----             numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
----           exception
----            when others then
----              numcode3:=33800000;
----           end;  
----    --modified by kumar.h on 13/05/09 
----    insert into temp values ('Here' || numCode ||numcode2,numcode3);
----    commit;
--    Begin
--      varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--      vartemp  := varQuery ||'BuySell';
--      numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
--      if varentity in ('HEDGEREGISTER') then
--       	varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--       	vartemp  := varQuery ||'BaseCurrency';
--        numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode1,Gconst.TYPENODEPATH);
--      end if;
--      begin   
--        varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--        vartemp  := varQuery ||'BackupDeal';    
--        numcode2 := GConst.fncXMLExtract(xmldoc,vartemp,numcode2,Gconst.TYPENODEPATH);
--      exception
--         when others then
--          numcode2:=33300000;
--      end;
--
--      begin 
--        varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--        vartemp  := varQuery ||'InitCode';    
--        numcode3 := GConst.fncXMLExtract(xmldoc,vartemp,numcode3,Gconst.TYPENODEPATH);
--      exception
--        when others then
--          numcode3:=33800000;
--      end; 
--      Exception
--        when others then
--          numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--          insert into temp values ('Here' || numCode ||numcode2,numcode3);
--          COMMIT;
--         
--   --modified by kumar.h on 13/05/09 
--        if varentity in ('HEDGEREGISTER') then
--             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        end if;
--        begin   
--          numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
--        exception
--          when others then
--       	 numcode2:=33300000;
--        End;
--        begin 
--          numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
--        exception
--          when others then
--            numcode3:=33800000;
--        end;  
--    --modified by kumar.h on 13/05/09 
--        insert into temp values ('Here' || numCode ||numcode2,numcode3);
--        commit;
--      End;
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
----  if numCode=GConst.PURCHASEDEAL then
--       vartemp1 := Gconst.LOANBUYERSCREDIT ;--|| ',' ||Gconst.LOANTERMLOAN ;
-- --    insert into temp values (vartemp1,numCode);commit;
--    Open GenCursor for
----     select  *
----       from
----       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
----          trad_user_reference as "BillReference",
----          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
----          NVL((select b.trad_maturity_date
----            from TradeRegister b
----            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
----          trad_maturity_date "BillMaturity",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          trad_trade_fcy  "BillAmount",
----          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
----          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp
----             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
----          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
----          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
----          trad_trade_remarks "BankReference",
----          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
----          trad_local_bank BankCode,trad_company_code CompanyCode,
----          trad_trade_currency currencyCode ,0 RecordStatus
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_Company_Code in
----          (select usco_company_code from trsystem022a
----           where usco_user_id = varUserid)
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        -- and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----        --  and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----        union
----        select 'BuyersCredit' "ProductDescription",bcrd_sanction_reference as "BillReference",
----          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "BankName",
----          bcrd_due_date "ContractMaturity", bcrd_due_date "BillMaturity",
----          pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CurrencyName",
----          bcrd_sanctioned_fcy "BillAmount",
----          pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) "OutStanding",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = bcrd_buyers_credit
----             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
----          (pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) - 
----             (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = bcrd_buyers_credit
----             and hedg_record_status between 10200001 and 10200004))"UncoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = bcrd_buyers_credit
----             and hedg_deal_number = varTemp
----             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
----          bcrd_conversion_rate "ExchangeRate",bcrd_sanctioned_inr "RupeeAmount",
----          bcrd_buyers_credit "TradeReference", bcrd_sanction_date as "ReferenceDate",
----          bcrd_loan_remarks "BankReference", 
----          pkgreturncursor.fncgetdescription(bcrd_company_code, 2) as "CompanyName",
----          bcrd_local_bank BankCode,bcrd_company_code CompanyCode,
----          bcrd_currency_code currencyCode ,0 RecordStatus
----          from trtran045 a
----          where bcrd_Company_Code in
----            (select usco_company_code from trsystem022a
----              where usco_user_id =varUserid)
----          and bcrd_process_complete = GConst.OPTIONNO
----          and bcrd_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         -- and numcode2 = 33300003
----         -- and numcode3 = 33800003
----          order by 1
----         )a;
------For Indofil
--     select  *
--       From
--       (Select  Pkgreturncursor.Fncgetdescription(IMPORTEXPORTTYPE, 1) "ProductDescription", 
--          Referencenumber As "BillReference",
--          himatsingkatf_prod.Pkgreturncursor.Fncgetdescription(Bankcode,2) As "BankName",--himatsingkatf_prod.pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          Nvl(Maturityto,Referencedate)  "ContractMaturity",
--          NVL(Maturityto,Referencedate) "BillMaturity",
--          himatsingkatf_prod.pkgreturncursor.fncGetDescription(Currencycode,2) as "CurrencyName",
--          Amountfcy  "BillAmount",
--          Amountfcy "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = IBSREFERENCE
--             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
--          Amountfcy - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = IBSREFERENCE
--             and hedg_record_status between 10200001 and 10200004) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             Where Hedg_Trade_Reference = Ibsreference
--             and hedg_deal_number = varTemp
--             And Hedg_Record_Status Between 10200001 And 10200004) "HedgingAmount",  
--          Invoicerate "BenchMarkRate", Invoicerate * Amountfcy "RupeeAmount", 
--          IBSREFERENCE "TradeReference", Referencedate as "ReferenceDate", 
--          Bankreference "BankReference",
--          himatsingkatf_prod.Pkgreturncursor.Fncgetdescription(Companycode,2) As "CompanyName",
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Bankcode)Bankcode,
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Companycode) Companycode,
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Currencycode) Currencycode ,
--          remarks As "Remarks",0 Recordstatus
--          From (Select Contractnumber Referencenumber, Contractdate Referencedate, Referenecenumber Bankreference,
--                  Referencedate RefDate,Currencycode, AMOUNTFCY, Invoicerate, Maturityfrom, Maturityto,  Bankcode,COMPANYCODE,
--                  IMPORTEXPORTTYPE,  IBSREFERENCE,'' remarks
--                FROM himatsingkatf_prod.Vewimportexport
--                UNION ALL
--                SELECT Invoicenumber Referencenumber,  Referencedate,  Bankreference,  SANCTIONDATE RefDate,Currencycode,
--                   Amountfcy,  Rate,  Duedate,  Duedate,  Bankcode,  Companycode,
--                   Loantype, Ibsreference,remarks
--                From himatsingkatf_prod.Vewloans)
--               where   IMPORTEXPORTTYPE in(select erel_entity_relation
--            From Trsystem008
--             where erel_main_entity =
--             Decode(Numcode, Gconst.Purchasedeal, 2, Gconst.Saledeal, 1)
--             And Erel_Relation_Type = 259));
------Commented Below lines                
----                where IMPORTEXPORTTYPE in(select erel_entity_relation
----            from trsystem008
----             where erel_main_entity =
----             Decode(Numcode, Gconst.Purchasedeal, 2, Gconst.Saledeal, 1)
----             And Erel_Relation_Type = 259));
-- --------Upto Here------------
--
----        where a."BillAmount" > a."CoveredAmount";
----    elsif (numCode=GConst.SALEDEAL) then
----       vartemp1 := Gconst.LOANPCFC || ',' || GConst.LOANPSCFC ;
----    Open GenCursor for
----     select  *
----       from
----        (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",
----          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
----          GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp) "HedgingAmount",  
----          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription", 
----          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
----          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,  
----          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus                           
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)   
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        union
----        select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",0  "CoveredAmount",
------          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
------          GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = fcln_loan_number
----             and hedg_deal_number = varTemp) "HedgingAmount",  
----          fcln_sanction_date as "ReferenceDate", '' "ProductDescription", 
----          fcln_bank_reference as "BillReference",fcln_maturity_to "Maturity",
----          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,  
----          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus                           
----          from trtran005 a
----          where fcln_loan_type in (Gconst.LOANPCFC , GConst.LOANPSCFC  )
----          and fcln_process_complete = GConst.OPTIONNO
----          --Yet to define the product Codes export loans
---- --         and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
---- ---         and trad_subproduct_Code = decode(number3,33800000,trad_subproduct_code,numbercode3)
----
----          and fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         )a
----        where a."BillAmount" > a."CoveredAmount";
----    end if;
--        Goto Process_End;
--   End if;
-- if numInfoType = GConst.REFTRADEDEALS then
--        varOperation := 'Extracting Trade Register for Hedging';
----
----    Begin
----      varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
----      vartemp  := varQuery ||'BuySell';
----      numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
----      if varentity in ('HEDGEREGISTER') then
----       	varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
----       	vartemp  := varQuery ||'BaseCurrency';
----        numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode1,Gconst.TYPENODEPATH);
----      end if;
----      begin   
----        varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
----        vartemp  := varQuery ||'BackupDeal';    
----        numcode2 := GConst.fncXMLExtract(xmldoc,vartemp,numcode2,Gconst.TYPENODEPATH);
----      exception
----         when others then
----          numcode2:=33300000;
----      end;
----
----      begin 
----        varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
----        vartemp  := varQuery ||'InitCode';    
----        numcode3 := GConst.fncXMLExtract(xmldoc,vartemp,numcode3,Gconst.TYPENODEPATH);
----      exception
----        when others then
----          numcode3:=33800000;
----      end; 
----      Exception
----        when others then
----          numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
----          insert into temp values ('Here' || numCode ||numcode2,numcode3);
----          COMMIT;
----         
----   --modified by kumar.h on 13/05/09 
----        if varentity in ('HEDGEREGISTER') then
----             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
----        end if;
----        begin   
----          numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
----        exception
----          when others then
----       	 numcode2:=33300000;
----        End;
----        begin 
----          numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
----        exception
----          when others then
----            numcode3:=33800000;
----        end;  
----    --modified by kumar.h on 13/05/09 
----        insert into temp values ('Here' || numCode ||numcode2,numcode3);
----        commit;
----      End;
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//Param/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
----  if numCode=GConst.PURCHASEDEAL then
--       vartemp1 := Gconst.LOANBUYERSCREDIT ;--|| ',' ||Gconst.LOANTERMLOAN ;
-- --    insert into temp values (vartemp1,numCode);commit;
--  SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
--  if numCode7 = 12400002 then
--    Open GenCursor for
--     select  *
--       from
--       (select rownum "Rownum",  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          NVL((select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "Currency",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp
--             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "Company",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,trad_record_status "RecordStatus",1 "SerialNumber"
--          from TradeRegister a
--          where 
----          trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_Company_Code in
----          (select usco_company_code from trsystem022a
----           where usco_user_id = varUserid)
--           trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and trad_import_export not in (25900053,25900059)
----          union all
----        select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
----          trad_user_reference as "BillReference",
----          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
----          NVL((select b.trad_maturity_date
----            from TradeRegister b
----            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
----          trad_maturity_date "BillMaturity",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          trad_trade_fcy  "BillAmount",
----          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
----          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp
----             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
----          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
----          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
----          trad_trade_remarks "BankReference",
----          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
----          trad_local_bank BankCode,trad_company_code CompanyCode,
----          trad_trade_currency currencyCode ,0 RecordStatus,1 SerialNumber
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_Company_Code in
----          (select usco_company_code from trsystem022a
----           where usco_user_id = varUserid)
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----          and trad_import_export  in (25900053,25900059)
----          and trad_local_bank not in(30699999)
------          union all
------        select   himatsingkatf_prod.pkgreturncursor.fncgetdescription(polc_lob_code, 1) "ProductDescription", 
------          POLC_BANK_REFERENCE as "BillReference",
------          himatsingkatf_prod.pkgreturncursor.fncgetdescription(polc_local_bank,2) as "BankName",
------          polc_due_date "ContractMaturity",
------          polc_due_date "BillMaturity",
------          himatsingkatf_prod.pkgreturncursor.fncgetdescription(polc_currency_code, 2) as "CurrencyName",
------          POLC_SANCTIONED_FCY  "BillAmount",
------          himatsingkatf_prod.pkgmastermaintenance.fncReturnBalance(POLC_LC_NUMBER,1,23601005,datworkdate,1)"OutStanding",
------          (select NVL(sum(hedg_hedged_fcy),0)
------             from HedgeRegister
------             where hedg_trade_reference = polc_lc_number
------             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
------          (himatsingkatf_prod.pkgmastermaintenance.fncReturnBalance(POLC_LC_NUMBER,1,23601005,datworkdate,1) - 
------          (select NVL(sum(hedg_hedged_fcy),0)
------             from HedgeRegister
------             where hedg_trade_reference = polc_lc_number
------             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
------          (select NVL(sum(hedg_hedged_fcy),0)
------             from HedgeRegister
------             where hedg_trade_reference = polc_lc_number
------             and hedg_deal_number = varTemp
------             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
------          polc_conversion_rate "BenchMarkRate", polc_sanctioned_inr "RupeeAmount", 
------          polc_lc_number "TradeReference",POLC_reference_date as "ReferenceDate", 
------          polc_bank_reference "BankReference",
------          himatsingkatf_prod.pkgreturncursor.fncgetdescription(polc_company_code,2) as "CompanyName",
------          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(polc_local_bank) BankCode,
------          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(polc_company_code) CompanyCode,
------          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(polc_currency_code)
------          currencyCode ,0 RecordStatus,1 SerialNumber
------        FROM himatsingkatf_prod.TFTRAN039
------        WHERE POLC_DUE_DATE >= datworkdate 
------        and   polc_record_status not in (10200005,10200006)
------        and polc_currency_code not in(20500003)
------        and polc_process_complete = GConst.OPTIONNO
------        and 25900053 in
------          (select erel_entity_relation
------             from trsystem008
------             where erel_main_entity =
------             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
------             and erel_relation_type = 259)
------        AND POLC_LIMIT_REFERENCE IN(SELECT BANK_LIMIT_REFERENCE FROM himatsingkatf_prod.TFTRAN015 
------                                    WHERE BANK_RECORD_TYPE IN(25400112) 
------                                    AND BANK_RECORD_STATUS NOT IN(10200005,10200006))          
----        -- and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----        --  and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----        union
----        select 'BuyersCredit' "ProductDescription",nvl(bcrd_sanction_reference,bcrd_buyers_credit) as "BillReference",
----          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "BankName",
----          bcrd_due_date "ContractMaturity", bcrd_due_date "BillMaturity",
----          pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CurrencyName",
----          bcrd_sanctioned_fcy "BillAmount",
----          pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) "OutStanding",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = bcrd_buyers_credit
----             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
----          (pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) - 
----             (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = bcrd_buyers_credit
----             and hedg_record_status between 10200001 and 10200004))"UncoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = bcrd_buyers_credit
----             and hedg_deal_number = varTemp
----             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
----          bcrd_conversion_rate "ExchangeRate",bcrd_sanctioned_inr "RupeeAmount",
----          bcrd_buyers_credit "TradeReference", bcrd_sanction_date as "ReferenceDate",
----          bcrd_loan_remarks "BankReference", 
----          pkgreturncursor.fncgetdescription(bcrd_company_code, 2) as "CompanyName",
----          bcrd_local_bank BankCode,bcrd_company_code CompanyCode,
----          bcrd_currency_code currencyCode ,0 RecordStatus,1 SerialNumber
----          from trtran045 a
----          where bcrd_Company_Code in
----            (select usco_company_code from trsystem022a
----              where usco_user_id =varUserid)
----          and bcrd_process_complete = GConst.OPTIONNO
----          and numCode = 25300001
----          and bcrd_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         -- and numcode2 = 33300003
----         -- and numcode3 = 33800003
----          order by 1
--         )a;
--------For Indofil
----    else
----    Open GenCursor for
----     select  *
----       From
----       (Select  Pkgreturncursor.Fncgetdescription(IMPORTEXPORTTYPE, 1) "ProductDescription", 
----          Referencenumber As "BillReference",
----          himatsingkatf_prod.Pkgreturncursor.Fncgetdescription(Bankcode,2) As "BankName",--himatsingkatf_prod.pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
----          Nvl(Maturityto,Referencedate)  "ContractMaturity",
----          NVL(Maturityto,Referencedate) "BillMaturity",
----          himatsingkatf_prod.pkgreturncursor.fncGetDescription(Currencycode,2) as "CurrencyName",
----          Amountfcy  "BillAmount",
----          Amountfcy "OutStanding",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             WHERE hedg_trade_reference = IBSREFERENCE
----             and HEDG_TRADE_SERIAL = SerialNumber
----             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
----          Amountfcy - 
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             WHERE hedg_trade_reference = IBSREFERENCE
----             and HEDG_TRADE_SERIAL = SerialNumber
----             and hedg_record_status between 10200001 and 10200004) "UncoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             Where Hedg_Trade_Reference = Ibsreference
----             and hedg_deal_number = varTemp
----             And Hedg_Record_Status Between 10200001 And 10200004) "HedgingAmount",  
----          Invoicerate "BenchMarkRate", Invoicerate * Amountfcy "RupeeAmount", 
----          IBSREFERENCE "TradeReference", Referencedate as "ReferenceDate", 
----          Bankreference "BankReference",
----          himatsingkatf_prod.Pkgreturncursor.Fncgetdescription(Companycode,2) As "CompanyName",
----          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Bankcode)Bankcode,
----          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Companycode) Companycode,
----          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Currencycode) Currencycode ,
----          remarks As "Remarks",SerialNumber,0 Recordstatus
----          From (Select Contractnumber Referencenumber, Contractdate Referencedate, Referenecenumber Bankreference,
----                  Referencedate RefDate,Currencycode, AMOUNTFCY, Invoicerate, Maturityfrom, Maturityto,  Bankcode,COMPANYCODE,
----                  IMPORTEXPORTTYPE,  IBSREFERENCE,'' remarks, 1 SerialNumber
----                FROM himatsingkatf_prod.Vewimportexport
----                UNION ALL
----                SELECT Invoicenumber Referencenumber,  Referencedate,  Bankreference,  SANCTIONDATE RefDate,Currencycode,
----                   Amountfcy,  Rate,  Duedate,  Duedate,  Bankcode,  Companycode,
----                   Loantype, Ibsreference,remarks, SerialNumber
----                From himatsingkatf_prod.Vewloans)
----               where   IMPORTEXPORTTYPE in(select erel_entity_relation
----            From Trsystem008
----             where erel_main_entity =
----             Decode(Numcode, Gconst.Purchasedeal, 2, Gconst.Saledeal, 1)
----             And Erel_Relation_Type = 259));
------Commented Below lines                
----                where IMPORTEXPORTTYPE in(select erel_entity_relation
----            from trsystem008
----             where erel_main_entity =
----             Decode(Numcode, Gconst.Purchasedeal, 2, Gconst.Saledeal, 1)
----             And Erel_Relation_Type = 259));
-- --------Upto Here------------
--
----        where a."BillAmount" > a."CoveredAmount";
----    elsif (numCode=GConst.SALEDEAL) then
----       vartemp1 := Gconst.LOANPCFC || ',' || GConst.LOANPSCFC ;
----    Open GenCursor for
----     select  *
----       from
----        (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",
----          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
----          GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp) "HedgingAmount",  
----          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription", 
----          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
----          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,  
----          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus                           
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)   
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        union
----        select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",0  "CoveredAmount",
------          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
------          GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = fcln_loan_number
----             and hedg_deal_number = varTemp) "HedgingAmount",  
----          fcln_sanction_date as "ReferenceDate", '' "ProductDescription", 
----          fcln_bank_reference as "BillReference",fcln_maturity_to "Maturity",
----          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,  
----          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus                           
----          from trtran005 a
----          where fcln_loan_type in (Gconst.LOANPCFC , GConst.LOANPSCFC  )
----          and fcln_process_complete = GConst.OPTIONNO
----          --Yet to define the product Codes export loans
---- --         and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
---- ---         and trad_subproduct_Code = decode(number3,33800000,trad_subproduct_code,numbercode3)
----
----          and fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         )a
----        where a."BillAmount" > a."CoveredAmount";
----    end if;
--      end if;
--        Goto Process_End;
--   End if;


 if numInfoType = GConst.REFTRADEDEALS then
        varOperation := 'Extracting Trade Register for Hedging';
        
      vartemp  := varQuery ||'//Param/BuySell';
      numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
      vartemp  := varQuery ||'//Param/CompanyCode';
      numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/LocationCode';
      numcode2 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/Portfolio';
      numcode3 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/Subportfolio';
      numcode4 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);

      vartemp  := varQuery ||'//Param/Bank';
      numcode5 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
      
      vartemp  := varQuery ||'//Param/Currency';
      numcode6 := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
      
      for cur in (select  LINK_CONSIDER_COMPANY , 
                          LINK_CONSIDER_LOCATION , LINK_CONSIDER_PORTFOLIO, 
                          LINK_CONSIDER_SUBPORTOLIO , LINK_CONSIDER_BANK
                          from TRCONFIG001
                          where link_record_status not in (10200005,10200006))
      loop
         if cur.LINK_CONSIDER_COMPANY=12400002 then
            numcode1:=30199999;
         end if;
         if cur.LINK_CONSIDER_LOCATION=12400002 then
            numcode2:=30299999;
         end if;
         if cur.LINK_CONSIDER_PORTFOLIO=12400002 then
            numcode3:=33399999;
         end if;
         if cur.LINK_CONSIDER_SUBPORTOLIO=12400002 then
            numcode4:=33899999;
         end if;
         if cur.LINK_CONSIDER_BANK=12400002 then
            numcode5:=30699999;
         end if;
      end loop;

    Begin
      varTemp := GConst.fncXMLExtract(xmldoc, '//Param/DealNumber', varTemp,GConst.TYPENODEPATH);
    Exception
      when others then
        varTemp := '1';
    End;
    open gencursor for
    select rownum "Rownum",  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
          trad_user_reference as "BillReference",
          pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT, 1) "TransType", 
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
          NVL((select b.trad_maturity_date
            from TradeRegister b
            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
          trad_maturity_date "BillMaturity",
          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "Currency",
          trad_trade_fcy  "BillAmount",
          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
          (select NVL(sum(hedg_hedged_fcy),0)
             from HedgeRegister
             where hedg_trade_reference = trad_trade_reference
             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
          (select NVL(sum(hedg_hedged_fcy),0)
             from HedgeRegister
             where hedg_trade_reference = trad_trade_reference
             and hedg_record_status between 10200001 and 10200004)) "UncoveredAmount",
          (select NVL(sum(hedg_hedged_fcy),0)
             from HedgeRegister
             where hedg_trade_reference = trad_trade_reference
             and hedg_deal_number = varTemp
             and hedg_record_status between 10200001 and 10200004) "HedgingAmount",  
          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
          trad_trade_remarks "BankReference",
          pkgreturncursor.fncgetdescription(trad_company_code,2) as "Company",
          trad_local_bank BankCode,trad_company_code CompanyCode,
          trad_trade_currency currencyCode ,trad_record_status "RecordStatus",1 "SerialNumber"
          from TradeRegister a
          where trad_import_export in
          (select erel_entity_relation
             from trsystem008
             where erel_main_entity =
             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
             and erel_relation_type = 259)
          and trad_process_complete = GConst.OPTIONNO
          and trad_Company_Code in
          (select usco_company_code from trsystem022a
           where usco_user_id = varUserid)
          and trad_record_status not in (10200005,10200006)
          and trad_company_code = decode(numcode1,30199999,trad_company_code,numcode1)
          and trad_Location_code = decode(numcode2,30299999,trad_Location_code,numcode2)
          and TRAD_PRODUCT_CATEGORY = decode(numcode3,33399999,TRAD_PRODUCT_CATEGORY,numcode3)
          and TRAD_SUBPRODUCT_CODE = decode(numcode4,33899999,TRAD_SUBPRODUCT_CODE,numcode4)
          and TRAD_LOCAL_BANK = decode(numcode5,30699999,TRAD_LOCAL_BANK,numcode5)
          and trad_trade_currency=numcode6;
          --and trad_import_export not in (25900053,25900059)
        Goto Process_End;
   End if;         

  
   ---manjuanth sir ends
--- modifed  by manjunath sir on 19-Jun-2014 and update by Prateek --

--   if numInfotype = GConst.refTradeRegister then
----    varoperation := 'extracting trade details';
----      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
----      varQuery := '//' || varEntity || '/ROW/';
----      Begin
----        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
----                    varTemp, GConst.TYPENODEPATH);
----        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
----                    numTemp, GConst.TYPENODEPATH);
----      Exception
----        when others then
----          varTemp := '';
----      End;
----
----      if varEntity = 'EXPORTREALIZE' then
----        Open GenCursor for
----        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
----               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
----               trad_trade_rate "ExchangeRate",
----                 NVL((select sum(brel_reversal_fcy)
----                         from trtran003 a
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)
----                          and not exists
----                             (select 'x'
----                               from trtran003 b
----                              where b.brel_company_code = a.brel_company_code
----                                and b.brel_trade_reference = a.brel_trade_reference
----                                and b.brel_reverse_serial = a.brel_reverse_serial
----                                and b.brel_trade_reference = varTemp
----                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
----                  NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----               trad_product_description "ProductDescription",trad_trade_currency Currency,
----               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
----               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
----            from TradeRegister
----           where trad_company_code = numCode
----             and trad_import_export between 25900001 and 25900050
----             and trad_record_status in (10200001,10200003,10200004)
----             and trad_process_complete = GConst.OPTIONNO;
----      elsif varEntity = 'IMPORTREALIZE' then
----        Open GenCursor for
----           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
----              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
----              trad_trade_rate "ExchangeRate",
----              nvl((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
----              NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----              trad_product_description "ProductDescription",trad_trade_currency Currency,
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
----         from TradeRegister
----        where trad_company_code = numCode
----          and trad_import_export between 25900051 and 25900100
----          and trad_record_status in (10200001,10200003,10200004)
----          and trad_process_complete = GConst.OPTIONNO;
----      elsif varEntity = 'BUYERSCREDITCLOSER' then
----        Open GenCursor for
------          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
------             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
------             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
------             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
------             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
------             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
------             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
------             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
------             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
------             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
------             from BuyersCredit
------             where bcrd_record_status in (10200001,10200003,10200004)
------             and bcrd_process_complete = GConst.OPTIONNO;
----
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company"
----            from trtran005
----            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
----      end if;
----      goto process_end;
--      varoperation := 'extracting trade details';
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
----      numCode1 := GConst.fncXMLExtract(xmldoc,'CategoryType', numCode1);
--      varQuery := '//' || varEntity || '/ROW/';
--      Begin
--        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
--                    varTemp, GConst.TYPENODEPATH);
--        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
--                    numTemp, GConst.TYPENODEPATH);
--      Exception
--        when others then
--          varTemp := '';
--      End;
--
--
--if varEntity = 'EXPORTREALIZE' then
--
--        Open GenCursor for
----        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
----               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
----               trad_trade_rate "ExchangeRate",
----                 NVL((select sum(brel_reversal_fcy)
----                         from trtran003 a
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)
----                          and not exists
----                             (select 'x'
----                               from trtran003 b
----                              where b.brel_company_code = a.brel_company_code
----                                and b.brel_trade_reference = a.brel_trade_reference
----                                and b.brel_reverse_serial = a.brel_reverse_serial
----                                and b.brel_trade_reference = varTemp
----                                --addea by gouri
----                                 and b.brel_record_status in (10200001,10200003,10200004)
----                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
----                  NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----               trad_product_description "ProductDescription",trad_trade_currency Currency,
----               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
----               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank LocalBankCode,
----               trad_spot_rate "SpotRate",
----              trad_forward_rate "FrwRate",
----              trad_margin_rate "MarginRate",
----              trad_trade_rate "FinalRate",
----              pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from TradeRegister
----           where trad_company_code = numCode
----             and trad_import_export between 25900001 and 25900050
----             and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----             and trad_record_status in (10200001,10200003,10200004)
----             and trad_process_complete = GConst.OPTIONNO;
--
----abhijit modified on 29042014
--         select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--                  pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--                  trad_user_reference as "BillReference",
--                  trad_trade_reference "TradeReference",
--                  pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--                  trad_user_reference "BankReference", trad_maturity_date "DueDate",
--                  pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--                  trad_trade_fcy "BillAmount",
--                   NVL((select sum(brel_reversal_fcy)
--                               from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                --addea by gouri
--                                 and b.brel_record_status in (10200001,10200003,10200004)
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                                 pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
--
--
--                                  trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--            trad_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--          from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and trad_record_status between 10200001 and 10200004
--             and trad_subproduct_code = decode(numCode1, 33800059, trad_subproduct_code, numCode1)
--             and trad_process_complete = GConst.OPTIONNO;
----abhijit ends
--      elsif varEntity = 'IMPORTREALIZE' then
--        
--      --Changed by Manjunath Reddy to take care of TOI Contract cancel 
--        numCode2 := Gconst.fncXMLExtract(xmldoc,'FormActionType', numCode2); 
--        --1-- for bill realization
--        --2-- for Contract Cancel 
--        
--        if numCode2=1 then
--            Open GenCursor for
--              select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--                pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--                nvl(trad_contract_no,trad_user_reference) as "BillReference",trad_trade_reference "TradeReference",
--                pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--                trad_user_reference "BankReference", trad_maturity_date "DueDate",
--                pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--                trad_trade_fcy "BillAmount",
--                 --pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GConst.UTILCONTRACTOS,1,datworkdate)
--                 --+
--                 nvl((select sum(brel_reversal_fcy) 
--                  from trtran003
--                  where brel_company_code = trad_company_code
--                  and brel_trade_reference = trad_trade_reference
--                  and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--                pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",  
--                trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--                trad_local_bank as LocalBankCode,0 RecordStatus,
--                pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--                from TradeRegister
--              where trad_company_code = numCode
--                and trad_import_export between 25900051 and 25900100
--                and trad_Company_Code in
--                (select usco_company_code from trsystem022a
--                  where usco_user_id =varUserid)
--                and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
--                and trad_reverse_reference is null
--                and trad_subproduct_code = decode(numCode1, 33800058, trad_subproduct_code, numCode1)
--                and trad_process_complete = GConst.OPTIONNO;
--
--          elsif numCode2=2 then
--          Open GenCursor for
--              select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--                pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--                nvl(trad_contract_no,trad_user_reference) as "BillReference",trad_trade_reference "TradeReference",
--                pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--                trad_user_reference "BankReference", trad_maturity_date "DueDate",
--                pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--              --  trad_trade_fcy "BillAmount",
--               (trad_trade_fcy - (nvl((select sum(brel_reversal_fcy) 
--                  from trtran003
--                  where brel_company_code = trad_company_code
--                  and brel_trade_reference = trad_trade_reference
--                  and brel_record_status in (10200001,10200003,10200004)),0))) "BillAmount",
--                nvl((select sum(brel_reversal_fcy) 
--                  from trtran003
--                  where brel_company_code = trad_company_code
--                  and brel_trade_reference = trad_trade_reference
--                  and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--                pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",  
--                trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--                trad_local_bank as LocalBankCode,0 RecordStatus,
--                pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--                from TradeRegister
--              where trad_company_code = numCode
--                and trad_import_export =25900086
--                and trad_Company_Code in
--                (select usco_company_code from trsystem022a
--                  where usco_user_id =varUserid)
--                and trad_record_status in (10200001,10200002,10200003,10200004)
--                and trad_reverse_reference ='.'
--                and trad_subproduct_code = decode(numCode1, 33800058, trad_subproduct_code, numCode1)
--                and trad_process_complete = GConst.OPTIONNO;
--          end if;
--
----           select trad_trade_reference "TradeReference", trad_contract_no as "BillReference",
----              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
----              trad_trade_rate "ExchangeRate",
----              nvl((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
----              NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----              trad_product_description "ProductDescription",trad_trade_currency Currency,
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
----              trad_spot_rate "SpotRate",
----              trad_forward_rate "FrwRate",
----              trad_margin_rate "MarginRate",
----              trad_trade_rate "FinalRate"
----         from TradeRegister
----        where trad_company_code = numCode
----          and trad_import_export between 25900051 and 25900100
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
----          and trad_reverse_reference is null
----          and trad_subproduct_code = numCode1
----          and trad_process_complete = GConst.OPTIONNO;
--
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--
--        Open GenCursor for
----          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
----             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
----             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
----             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
----             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
----             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
----             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
----             from BuyersCredit
----             where bcrd_record_status in (10200001,10200003,10200004)
----             and bcrd_process_complete = GConst.OPTIONNO;
---- commented on 07-may-2010 to diplay the reversed details of loan amount in the screeen
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
----            from trtran005
----            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----                 FCLN_CONVERSION_RATE as "ExchangeRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
----            from trtran005 a
----           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--          select pkgReturnCursor.fncGetDescription(33300003,2) "Category",
--            pkgReturnCursor.fncGetDescription(33800003,2) "SubCategory",
--            bcrd_sanction_reference as "BillReference",bcrd_buyers_credit "TradeReference",
--            pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "Bank",
--            bcrd_sanction_reference "BankReference", bcrd_due_date "DueDate",
--            pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CRY",
--            bcrd_sanctioned_fcy "BillAmount",
--            nvl((select sum(brel_reversal_fcy)
--              from trtran003
--              where brel_company_code = bcrd_company_code
--              and brel_trade_reference = bcrd_buyers_credit
--              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--            pkgreturncursor.fncgetdescription(bcrd_foreign_bank, 2) as "Vendor",
--            bcrd_conversion_rate "BenchmarkRate", bcrd_sanctioned_inr "AmountInINR",
--            bcrd_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,'12-MAY-14',25300002,0,NULL) "TodaySpot"
--            from trtran045
--          where bcrd_company_code = numCode
--            and bcrd_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--            and bcrd_record_status between 10200001 and 10200004
--            and bcrd_process_complete = GConst.OPTIONNO;
--
----          select BCRD_BUYERS_CREDIT as "TradeReference", BCRD_SANCTION_REFERENCE as "BillReference",
----                 BCRD_SANCTION_DATE as "ReferenceDate",BCRD_SANCTIONED_FCY as "BillAmount",
----                 BCRD_CONVERSION_RATE as "BenchmarkRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (BCRD_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(BCRD_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 2) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK, 2) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 BCRD_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
----                 BCRD_DUE_DATE  "MaturityFrom", BCRD_DUE_DATE1 "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 2) as "Company",BCRD_LOCAL_BANK as LocalBankCode,
----                 pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from trtran045 a
----           where bcrd_RECORD_STATUS in (10200001,10200003,10200004)
----            and bcrd_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----             and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
----             Union -- Added by Ishwarachandra for PCFC Loan
----                     select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----                 FCLN_CONVERSION_RATE as "BenchmarkRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 2) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 2) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE, 2) as "CurrencyName",
----                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 2) as "Company",fcln_local_bank as LocalBankCode,
----                 pkgForexProcess.fncGetRate(fcln_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from trtran005 a
----           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--      end if;
--      goto process_end;
--  end if;

---Updated From Allmus--------- 
--       if numInfotype = GConst.refTradeRegister then
----    varoperation := 'extracting trade details'; 
----      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
----      varQuery := '//' || varEntity || '/ROW/';
----      Begin
----        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference', 
----                    varTemp, GConst.TYPENODEPATH);
----        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial', 
----                    numTemp, GConst.TYPENODEPATH);
----      Exception
----        when others then
----          varTemp := '';
----      End;
----        
----      if varEntity = 'EXPORTREALIZE' then
----        Open GenCursor for
----        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
----               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount", 
----               trad_trade_rate "ExchangeRate",
----                 NVL((select sum(brel_reversal_fcy) 
----                         from trtran003 a
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)
----                          and not exists
----                             (select 'x'
----                               from trtran003 b
----                              where b.brel_company_code = a.brel_company_code
----                                and b.brel_trade_reference = a.brel_trade_reference
----                                and b.brel_reverse_serial = a.brel_reverse_serial
----                                and b.brel_trade_reference = varTemp
----                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
----                  NVL((select sum(brel_reversal_fcy) 
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
----               trad_product_description "ProductDescription",trad_trade_currency Currency,
----               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
----               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
----            from TradeRegister
----           where trad_company_code = numCode
----             and trad_import_export between 25900001 and 25900050
----             and trad_record_status in (10200001,10200003,10200004)
----             and trad_process_complete = GConst.OPTIONNO;
----      elsif varEntity = 'IMPORTREALIZE' then
----        Open GenCursor for
----           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
----              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
----              trad_trade_rate "ExchangeRate",
----              nvl((select sum(brel_reversal_fcy) 
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
----              NVL((select sum(brel_reversal_fcy) 
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
----              trad_product_description "ProductDescription",trad_trade_currency Currency,
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
----         from TradeRegister
----        where trad_company_code = numCode
----          and trad_import_export between 25900051 and 25900100
----          and trad_record_status in (10200001,10200003,10200004)
----          and trad_process_complete = GConst.OPTIONNO;
----      elsif varEntity = 'BUYERSCREDITCLOSER' then
----        Open GenCursor for
------          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference", 
------             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
------             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
------             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
------             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
------             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
------             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
------             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
------             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
------             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
------             from BuyersCredit
------             where bcrd_record_status in (10200001,10200003,10200004)
------             and bcrd_process_complete = GConst.OPTIONNO;   
----
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference", 
----            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company"
----            from trtran005
----            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;   
----      end if;  
----      goto process_end;
--varoperation := 'extracting trade details'; 
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
--      varQuery := '//' || varEntity || '/ROW/';
--      Begin
--        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference', 
--                    varTemp, GConst.TYPENODEPATH);
--        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial', 
--                    numTemp, GConst.TYPENODEPATH);
--      Exception
--        when others then
--          varTemp := '';
--      End;
--        
--    
--      if varEntity = 'EXPORTREALIZE' then
--      
--          if Gconst.INTEGRATE_WITH_TF='N' then
--             Open GenCursor for
--              select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
--                     trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount", 
--                     trad_trade_rate "ExchangeRate",
--                       NVL((select sum(brel_reversal_fcy) 
--                               from trtran003 a
--                              where brel_company_code = trad_company_code
--                                and brel_trade_reference = trad_trade_reference
--                                and brel_record_status in (10200001,10200003,10200004)
--                                and not exists
--                                   (select 'x'
--                                     from trtran003 b
--                                    where b.brel_company_code = a.brel_company_code
--                                      and b.brel_trade_reference = a.brel_trade_reference
--                                      and b.brel_reverse_serial = a.brel_reverse_serial
--                                      and b.brel_trade_reference = varTemp
--                                      --addea by gouri
--                                       and b.brel_record_status in (10200001,10200003,10200004)
--                                      and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                        NVL((select sum(brel_reversal_fcy) 
--                               from trtran003
--                              where brel_company_code = trad_company_code
--                                and brel_trade_reference = trad_trade_reference
--                                and brel_trade_reference = varTemp
--                                and brel_reverse_serial = numTemp
--                                and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                     pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--                     pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--                     pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--                     pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--                     pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
--                     trad_product_description "ProductDescription",trad_trade_currency Currency,
--                     pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--                     trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
--                     pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank LocalBankCode,
--                     trad_spot_rate "SpotRate",
--                    trad_forward_rate "FrwRate",
--                    trad_margin_rate "MarginRate",
--                    trad_trade_rate "FinalRate",
--                    trad_import_export "ImportExport",
--                    trad_entry_date "EntryDate"
--                  from TradeRegister
--                 where trad_company_code = numCode
--                   and trad_import_export between 25900001 and 25900050
--                   and trad_Company_Code in( select usco_company_code from trsystem022a
--                                              where usco_user_id =varUserid)
--                   and trad_record_status in (10200001,10200003,10200004)
--                   and trad_process_complete = GConst.OPTIONNO;
--        else 
--          Open GenCursor for
--           select BNKC_INVOICE_NUMBER "TradeReference", BNKC_BANK_REFERENCE as "BillReference", 
--                        BNKC_REFERENCE_DATE as "ReferenceDate",    BNKC_INVOICE_FCY "BillAmount",
--                        BNKC_CARD_RATE "ExchangeRate",
--                        nvl((select sum(brel_reversal_fcy) 
--                                   from trtran003
--                                  where brel_trade_reference = BNKC_INVOICE_NUMBER
--                                    and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--                        NVL((select sum(brel_reversal_fcy) 
--                                   from trtran003
--                                  where brel_company_code = bnkc_company_code
--                                    and brel_trade_reference = BNKC_INVOICE_NUMBER
--                                    and brel_reverse_serial = bnkc_serial_number
--                                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                        bnkc_invoice_inr "LocalAmount",
--                        'Bills Collection' as "InstrumentType",  -- Bill Collection
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_local_bank, 1) as "LocalBank",
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_Buyer_Code, 1) as "BuyerSeller",
--                        ''  as "ProductCode",  
--                        '' "ProductDescription",
--                         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_currency_code) Currency,
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_currency_code, 1) as "CurrencyName",
--                        bnkc_due_Date "MaturityFrom", bnkc_due_Date "MaturityDate", 0 RecordStatus,
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_company_code, 1) as "Company",
--                        nvl(himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_local_bank),30699999) as LocalBankCode,
--                        bnkc_spot_rate "SpotRate",
--                        0 "FrwRate",
--                        0 "MarginRate",
--                        bnkc_card_Rate "FinalRate",
--                        25900002 "ImportExport",
--                        BNKC_REFERENCE_DATE "EntryDate"
--                      from himatsingkatf_prod.tftran021 
--                       where 
--          --             bnkc_Company_Code in( select usco_company_code from trsystem022a
--          --                                       where usco_user_id =varUserid)
--                       bnkc_record_Status not in (10200005,10200006)
--                      and BNKC_NEGOTIATION_TYPE= 20600001;
--
--                       
--        end if;     
--      elsif varEntity = 'IMPORTREALIZE' then
--       if Gconst.INTEGRATE_WITH_TF='N' then
--        Open GenCursor for
--           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
--              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
--              trad_trade_rate "ExchangeRate",
--              nvl((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
--              trad_product_description "ProductDescription",trad_trade_currency Currency,
--              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
--              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
--              trad_spot_rate "SpotRate",
--              trad_forward_rate "FrwRate",
--              trad_margin_rate "MarginRate",
--              trad_trade_rate "FinalRate",
--              TRAD_IMPORT_EXPORT "ImportExport",
--              trad_entry_date "EntryDate"
--         from TradeRegister
--        where trad_company_code = numCode
--          and trad_import_export between 25900051 and 25900100
--          and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--          and trad_record_status in (10200001,10200003,10200004)
--          and trad_process_complete = GConst.OPTIONNO;
--          
--     else
--        Open GenCursor for
--           select ISHP_SHIPMENT_NUMBER "TradeReference", ishp_bank_reference as "BillReference", 
--              ISHP_REFERENCE_DATE as "ReferenceDate",    ishp_shipment_fcy "BillAmount",
--              ISHP_CUSTOM_RATE "ExchangeRate",
--              nvl((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_trade_reference = ISHP_SHIPMENT_NUMBER
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_trade_reference = ISHP_SHIPMENT_NUMBER
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--              ishp_shipment_fcy *  ISHP_CUSTOM_RATE "RupeeAmount",
--              pkgreturncursor.fncgetdescription(25900086, 1) as "InstrumentType",
--              himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_local_bank, 1) as "LocalBank",
--              himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_supplier_code, 1) as "BuyerSeller",
--              null  as "ProductCode",  
--              null "ProductDescription",
--              himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(ishp_currency_code) Currency,
--              himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_currency_code, 1) as "CurrencyName",
--              ishp_value_date "MaturityFrom", ishp_value_date "MaturityDate", 0 recordstatus,
--              himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_company_code, 1) as "Company",
--              nvl(himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(ishp_local_bank),30699999) as LocalBankCode,
--              ISHP_CUSTOM_RATE "SpotRate",
--              0 "FrwRate",
--              0 "MarginRate",
--              ISHP_CUSTOM_RATE "FinalRate",
--              25900086 "ImportExport",
--              ishp_reference_date "EntryDate"
--          FROM himatsingkatf_prod.TFTRAN042
--          where ishp_process_complete = 12400002
--          AND Ishp_Record_Status BETWEEN 10200001 AND 10200004;
--      end if;
--
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--      
--      if Gconst.INTEGRATE_WITH_TF='Y' then
--            Open GenCursor for
--               SELECT Inln_Invoice_Number "TradeReference",Inln_Bank_Reference "BillReference",
--                  Inln_Reference_Date "ReferenceDate",
--                  himatsingkatf_prod.Pkgreturnreport.Fncreturnbalanceamnt(Inln_Invoice_Number,Inln_Psloan_Number,23600005,Sysdate,1) AS  "BillAmount", 
--                  Inln_Card_Rate "ExchangeRate",
--                  nvl((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where  brel_trade_reference = Inln_Invoice_Number
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where
--                        --brel_company_code = trad_company_code
--                         -- and brel_trade_reference = Inln_Invoice_Number
--                          --and 
--                          brel_trade_reference = Inln_Invoice_Number
--                          and brel_reverse_serial = 1
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                          
--                  
--                 -- 0.00 "Realised", 0.00 "ReversedNow",
--                  --himatsingkatf_prod.Pkgreturnreport.Fncreturnbalanceamnt(Inln_Invoice_Number,Inln_Psloan_Number,23600005,Sysdate,1)* Inln_Card_Rate
--                  0 "RupeeAmount",
--                  pkgreturncursor.fncgetdescription(Gconst.LOANPSCFC, 1) as "InstrumentType",
--                  himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_local_bank, 1) as "LocalBank",
--                  '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                  inln_Sanction_Date Sanctiondate,
--                  --bnkc_currency_code Currency,
--                   himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_currency_code, 1) as "CurrencyName",
--                   Inln_Due_Date  "MaturityFrom", Inln_Due_Date "MaturityDate", 0 RecordStatus,
--                   himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_currency_code) Currency,
--                   himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_local_bank) LocalBankCode,
--                    Inln_Libor_Rate Liborrate,Inln_Interest_Spread Spread,
--                  Inln_Interest_Rate Interestrate,
--                  --Inln_Due_Date Duedate,
--                  Inln_user_remarks remarks, Inln_Company_Code CompanyCode,
--                  25900072 "ImportExport"
--              FROM himatsingkatf_prod.tftran022 inner join himatsingkatf_prod.tftran021
--               on bnkc_invoice_number   =inln_invoice_number
--              WHERE inln_loan_type        IN (23600005,23600003)
--              AND (inln_process_complete   =12400002
--              OR (inln_process_complete    =12400001
--              AND inln_completion_date     >'01-jul-2014'))
--              AND inln_record_status NOT  IN(10200005,10200006)
--              AND inln_invoice_number NOT IN
--                (SELECT ICRY_INVOICE_NUMBER
--                FROM himatsingkatf_prod.Tftran022a
--                WHERE Icry_Record_Status NOT IN(10200005,10200006)
--                )
--      UNION ALL/*-------------PCFC-------------------------------------------*/
--      SELECT pkcr_pkgcredit_number "TradeReference",Pkcr_Bank_Reference "BillReference",
--        Pkcr_Sanction_Date "ReferenceDate",
--        himatsingkatf_prod.pkgReturnreport.fncReturnBalanceAmnt(pkcr_pkgcredit_number,0,23600002,Sysdate,1) AS  "BillAmount", --PCFC loan type
--        
--         Pkcr_Conversion_Rate "ExchangeRate",
--          nvl((select sum(brel_reversal_fcy) 
--                from trtran003
--                where  brel_trade_reference = pkcr_pkgcredit_number
--                 and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                   from trtran003
--                  where
--                  --brel_company_code = trad_company_code
--                   -- and brel_trade_reference = Inln_Invoice_Number
--                    --and 
--                    brel_trade_reference = pkcr_pkgcredit_number
--                    and brel_reverse_serial = 1
--                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--         --0.00 "Realised", 0.00 "ReversedNow",
--         himatsingkatf_prod.pkgReturnreport.fncReturnBalanceAmnt(pkcr_pkgcredit_number,0,23600002,Sysdate,1)* Pkcr_Conversion_Rate  "RupeeAmount",
--        
--        pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 1) as "InstrumentType",
--        
--          himatsingkatf_prod.pkgreturncursor.fncgetdescription(Pkcr_Local_Bank, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--         pkcr_Sanction_Date Sanctiondate,        
--         --Pkcr_Currency_Code Currency,
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(Pkcr_Currency_Code, 1) as "CurrencyName",
--         Pkcr_Due_Date  "MaturityFrom", Pkcr_Due_Date "MaturityDate", 0 RecordStatus,
--        -- pkcr_Sanction_Date Sanctiondate,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(PKCR_CURRENCY_CODE)  Currency,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(pkcr_Local_Bank) LocalBankCode,
--        Pkcr_Libor_Rate Liborrate,
--        Pkcr_Interest_Spread Spread,
--        pkcr_interest_rate interestrate,
--        --Pkcr_Due_Date Duedate,
--        pkcr_loan_remarks remarks,
--        Pkcr_Company_Code CompanyCode,
--        25900071 "ImportExport"
--      FROM himatsingkatf_prod.tftran025
--      WHERE pkcr_process_complete =12400002
--      AND pkcr_record_status NOT IN(10200005,10200006)
--      UNION ALL/*------------------------BuyersCredit------------------------------*/
--      SELECT BCRD_BUYERS_CREDIT "TradeReference",
--        Bcrd_Sanction_Reference "BillReference",
--        Bcrd_Request_Date "ReferenceDate",
--        himatsingkatf_prod.Pkgmastermaintenance.Fncreturnbalance(Bcrd_Buyers_Credit,0, 23600006,Sysdate,1) AS "BillAmount", -- BuyersCredit
--        Bcrd_Conversion_Rate "ExchangeRate",
--                  nvl((select sum(brel_reversal_fcy) 
--                from trtran003
--                where  brel_trade_reference = BCRD_BUYERS_CREDIT
--                 and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                   from trtran003
--                  where
--                  --brel_company_code = trad_company_code
--                   -- and brel_trade_reference = Inln_Invoice_Number
--                    --and 
--                    brel_trade_reference = BCRD_BUYERS_CREDIT
--                    and brel_reverse_serial = 1
--                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                    
--        --0.00 "Realised", 0.00 "ReversedNow",
--        himatsingkatf_prod.Pkgmastermaintenance.Fncreturnbalance(Bcrd_Buyers_Credit,0, 23600006,Sysdate,1)* Bcrd_Conversion_Rate  "RupeeAmount",
--        pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--        himatsingkatf_prod.pkgreturncursor.fncgetdescription(Bcrd_Local_Bank, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--          bcrd_Sanction_Date Sanctiondate,        
--         --Bcrd_Currency_Code Currency,
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
--         Bcrd_Due_Date  "MaturityFrom", Bcrd_Due_Date "MaturityDate", 0 RecordStatus,
--        -- Bcrd_Sanction_Date Sanctiondate,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(Bcrd_Currency_Code) Currency,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(Bcrd_Local_Bank) LocalBankCode, Bcrd_Libor_Rate Liborrate,
--        BCRD_INTEREST_SPREAD spread, BCRD_INTEREST_RATE interestrate,
--        Bcrd_Loan_Remarks Remarks,  Bcrd_Company_Code CompanyCode,
--        25900073 "ImportExport"
--        FROM himatsingkatf_prod.tftran046
--        WHERE Bcrd_Process_Complete =12400002
--        AND BCRD_RECORD_STATUS NOT IN(10200005,10200006)
--        UNION ALL
--      SELECT InvoiceNumber "TradeReference",
--        BankReference "BillReference",
--        SanctionDate "ReferenceDate",
--        AmountFcy AS "BillAmount", -- BuyersCredit
--        Rate "ExchangeRate",
--                  nvl((select sum(brel_reversal_fcy) 
--                FROM trtran003
--                where  brel_trade_reference = InvoiceNumber
--                 and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                   from trtran003
--                  where
--                  --brel_company_code = trad_company_code
--                   -- and brel_trade_reference = Inln_Invoice_Number
--                    --and 
--                    brel_trade_reference = InvoiceNumber
--                    and brel_reverse_serial = 1
--                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                    
--        --0.00 "Realised", 0.00 "ReversedNow",
--        Round(AmountFcy* Rate ,2) "RupeeAmount",
--        himatsingkatf_prod.pkgreturncursor.fncgetdescription(LoanType, 1)"InstrumentType",
--        --pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) AS "InstrumentType",
--        himatsingkatf_prod.pkgreturncursor.fncgetdescription(BankCode, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--          SanctionDate Sanctiondate,        
--         --Bcrd_Currency_Code Currency,
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(currencycode, 1) AS "CurrencyName",
--         DueDate as  "MaturityFrom", DueDate "MaturityDate", 0 RecordStatus,
--        -- Bcrd_Sanction_Date Sanctiondate,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(currencycode) Currency,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(Bankcode) LocalBankCode, LiborRate as Liborrate,
--        spread as spread, interestrate interestrate,
--        Remarks as Remarks,  companycode CompanyCode,
--        25900090 "ImportExport"
--        FROM himatsingkatf_prod.vewloans
--        where loantype between 23600006 and 23600013;
--        --WHERE Bcrd_Process_Complete =12400002
--        --AND BCRD_RECORD_STATUS NOT IN(10200005,10200006);
--
--   else 
--       Open GenCursor for
--            select BCRD_BUYERS_CREDIT as "TradeReference", BCRD_SANCTION_REFERENCE as "BillReference", 
--                 BCRD_SANCTION_DATE as "ReferenceDate",BCRD_SANCTIONED_FCY as "BillAmount",
--                 BCRD_CONVERSION_RATE as "ExchangeRate",
--                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT  and brel_record_status not in(10200005,10200006)) "Realised", 
--                 (BCRD_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT and brel_record_status not in(10200005,10200006))) "ReversedNow",
--                  pkgreturnreport.fncconvrs(BCRD_SANCTIONED_INR) "RupeeAmount",
--                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--                 pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                 BCRD_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 1) as "CurrencyName",
--                 BCRD_DUE_DATE  "MaturityFrom", BCRD_DUE_DATE1 "MaturityDate", 0 RecordStatus,
--                 pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 1) as "Company",BCRD_LOCAL_BANK as LocalBankCode,
--                 BCRD_SPOT_RATE "SpotRate",
--                 BCRD_FORWARD_RATE "FrwRate",
--                 BCRD_MARGIN_RATE "MarginRate",
--                 BCRD_CONVERSION_RATE "FinalRate",
--                               '' "ImportExport"
--                               
--            from trtran045 a
--           where bcrd_RECORD_STATUS in (10200001,10200003,10200004)
--            and bcrd_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
--             and bcrd_company_code = numcode
--             Union -- Added by Ishwarachandra for PCFC Loan
--                     select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference", 
--                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--                 FCLN_CONVERSION_RATE as "ExchangeRate",
--                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised", 
--                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
--                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--                 pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 1) as "InstrumentType",
--                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
--                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode,
--                 FCLN_CONVERSION_RATE "SpotRate",
--                 0 "FrwRate",
--                 0 "MarginRate",
--                 FCLN_CONVERSION_RATE "FinalRate",
--                                '' "ImportExport"
--            from trtran005 a
--           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--       end if;
--      end if;     
--      goto process_end;
--  end if;

       IF numInfotype = GConst.refTradeRegister THEN

--    varoperation := 'extracting trade details'; 
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
--      varQuery := '//' || varEntity || '/ROW/';
--      Begin
--        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference', 
--                    varTemp, GConst.TYPENODEPATH);
--        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial', 
--                    numTemp, GConst.TYPENODEPATH);
--      Exception
--        when others then
--          varTemp := '';
--      End;
--        
--      if varEntity = 'EXPORTREALIZE' then
--        Open GenCursor for
--        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
--               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount", 
--               trad_trade_rate "ExchangeRate",
--                 NVL((select sum(brel_reversal_fcy) 
--                         from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                  NVL((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
--               trad_product_description "ProductDescription",trad_trade_currency Currency,
--               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
--               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
--            from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;
--      elsif varEntity = 'IMPORTREALIZE' then
--        Open GenCursor for
--           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
--              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
--              trad_trade_rate "ExchangeRate",
--              nvl((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
--              trad_product_description "ProductDescription",trad_trade_currency Currency,
--              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
--              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
--         from TradeRegister
--        where trad_company_code = numCode
--          and trad_import_export between 25900051 and 25900100
--          and trad_record_status in (10200001,10200003,10200004)
--          and trad_process_complete = GConst.OPTIONNO;
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--        Open GenCursor for
----          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference", 
----             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
----             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
----             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
----             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
----             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
----             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
----             from BuyersCredit
----             where bcrd_record_status in (10200001,10200003,10200004)
----             and bcrd_process_complete = GConst.OPTIONNO;   
--
--          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference", 
--            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
--            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
--            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
--            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company"
--            from trtran005
--            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;   
--      end if;  
--      goto process_end;
      varoperation := 'extracting trade details'; 
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
      numCode2 := Gconst.fncXMLExtract(xmldoc,'FormActionType', numCode2);       
      varQuery := '//' || varEntity || '/ROW/';
      Begin
        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference', 
                    varTemp, GConst.TYPENODEPATH);
        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial', 
                    numTemp, GConst.TYPENODEPATH);
        numcode := GConst.fncXMLExtract(xmldoc, varQuery || 'CompanyCode', 
                    numcode, GConst.TYPENODEPATH);
                    
      Exception
        when others then
          varTemp := '';
          numTemp := 0;
          numcode := GConst.fncXMLExtract(xmldoc, varQuery || 'CompanyCode', 
                      numcode, GConst.TYPENODEPATH);
      End;
      delete from temp;
      
      insert into temp values(numCode2,'chandra');
      insert into temp values(varTemp,'chandra1');
      insert into temp values(numTemp,'chandra2');
      INSERT INTO temp VALUES(numcode,'chandra3');
      commit;
     SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
      if varEntity = 'EXPORTREALIZE' then
        if numCode2 = 1 then
          if numCode7 = 12400002 then
             Open GenCursor for
              select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
                     trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount", 
                     trad_trade_rate "ExchangeRate",
                       NVL((select sum(brel_reversal_fcy) 
                               from trtran003 a
                              where brel_company_code = trad_company_code
                                and brel_trade_reference = trad_trade_reference
                                and brel_record_status in (10200001,10200003,10200004)
                                and not exists
                                   (select 'x'
                                     from trtran003 b
                                    where b.brel_company_code = a.brel_company_code
                                      and b.brel_trade_reference = a.brel_trade_reference
                                      and b.brel_reverse_serial = a.brel_reverse_serial
                                      and b.brel_trade_reference = varTemp
                                      --addea by gouri
                                       and b.brel_record_status in (10200001,10200003,10200004)
                                      and b.brel_reverse_serial = numTemp)),0.00) "Realised",
                        NVL((select sum(brel_reversal_fcy) 
                               from trtran003
                              where brel_company_code = trad_company_code
                                and brel_trade_reference = trad_trade_reference
                                and brel_trade_reference = varTemp
                                and brel_reverse_serial = numTemp
                                and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
                     pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
                     pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
                     pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
                     pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
                     pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
                     trad_product_description "ProductDescription",trad_trade_currency Currency,
                     pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
                     trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
                     pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank LocalBankCode,
                     trad_spot_rate "SpotRate",
                    trad_forward_rate "FrwRate",
                    trad_margin_rate "MarginRate",
                    trad_trade_rate "FinalRate",
                    trad_import_export "ImportExport",
                    trad_entry_date "EntryDate",
                    1 "SerialNumber"
                  from TradeRegister
                 where trad_company_code = numCode
                   and trad_import_export between 25900001 and 25900050
                   and trad_Company_Code in( select usco_company_code from trsystem022a
                                              where usco_user_id =varUserid)
                   and trad_record_status in (10200001,10200003,10200004)
                   and trad_process_complete = GConst.OPTIONNO;
--          else 
--            Open GenCursor for
--              select BNKC_INVOICE_NUMBER "TradeReference", BNKC_BANK_REFERENCE as "BillReference", 
--                        BNKC_REFERENCE_DATE as "ReferenceDate",    BNKC_INVOICE_FCY "BillAmount",
--                        BNKC_CARD_RATE "ExchangeRate",
--                        nvl((select sum(brel_reversal_fcy) 
--                                   from trtran003
--                                  where brel_trade_reference = BNKC_INVOICE_NUMBER
--                                    and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--                        NVL((select sum(brel_reversal_fcy) 
--                                   from trtran003
--                                  where brel_company_code = bnkc_company_code
--                                    and brel_trade_reference = BNKC_INVOICE_NUMBER
--                                    and brel_reverse_serial = bnkc_serial_number
--                                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                        bnkc_invoice_inr "LocalAmount",
--                        'Bills Collection' as "InstrumentType",  -- Bill Collection
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_local_bank, 1) as "LocalBank",
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_Buyer_Code, 1) as "BuyerSeller",
--                        ''  as "ProductCode",  
--                        '' "ProductDescription",
--                         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_currency_code) Currency,
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_currency_code, 1) as "CurrencyName",
--                        bnkc_due_Date "MaturityFrom", bnkc_due_Date "MaturityDate", 0 RecordStatus,
--                        himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_company_code, 1) as "Company",
--                        nvl(himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_local_bank),30699999) as LocalBankCode,
--                        bnkc_spot_rate "SpotRate",
--                        0 "FrwRate",
--                        0 "MarginRate",
--                        bnkc_card_Rate "FinalRate",
--                        25900002 "ImportExport",
--                        BNKC_REFERENCE_DATE "EntryDate",
--                        1 "SerialNumber"
--                      from himatsingkatf_prod.tftran021 
--                       where 
--          --             bnkc_Company_Code in( select usco_company_code from trsystem022a
--          --                                       where usco_user_id =varUserid)
--                       bnkc_record_Status not in (10200005,10200006)
--                      AND BNKC_NEGOTIATION_TYPE= 20600001;
          END IF;     
        ELSE
           Open GenCursor for
             select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
                trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
                trad_trade_rate "ExchangeRate",
                nvl((select sum(brel_reversal_fcy) 
                           from trtran003
                          where brel_company_code = trad_company_code
                            and brel_trade_reference = trad_trade_reference
                            and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
                NVL((select sum(brel_reversal_fcy) 
                           from trtran003
                          where brel_company_code = trad_company_code
                            and brel_trade_reference = trad_trade_reference
                            and brel_trade_reference = varTemp
                            and brel_reverse_serial = numTemp
                            and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
                pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
                pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
                pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
                pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
                pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
                trad_product_description "ProductDescription",trad_trade_currency Currency,
                pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
                trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
                pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
                trad_spot_rate "SpotRate",
                trad_forward_rate "FrwRate",
                trad_margin_rate "MarginRate",
                trad_trade_rate "FinalRate",
                TRAD_IMPORT_EXPORT "ImportExport",
                trad_entry_date "EntryDate",
                1 "SerialNumber"
           FROM TradeRegister
          WHERE trad_company_code = numCode
            and trad_import_export = 25900026 --EXPORT Projection
            AND trad_Company_Code IN( SELECT usco_company_code FROM trsystem022a
                                          where usco_user_id =varUserid)
            AND trad_record_status IN (10200001,10200003,10200004)
            and trad_process_complete = GConst.OPTIONNO;        
        END IF;
      elsif varEntity = 'IMPORTREALIZE' THEN
        if numCode2 = 1 then
           if numCode7 = 12400002 then
            Open GenCursor for
               select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
                  trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
                  trad_trade_rate "ExchangeRate",
                  nvl((select sum(brel_reversal_fcy) 
                             from trtran003
                            where brel_company_code = trad_company_code
                              and brel_trade_reference = trad_trade_reference
                              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
                  NVL((select sum(brel_reversal_fcy) 
                             from trtran003
                            where brel_company_code = trad_company_code
                              and brel_trade_reference = trad_trade_reference
                              and brel_trade_reference = varTemp
                              and brel_reverse_serial = numTemp
                              and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
                  pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
                  pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
                  pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
                  pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
                  pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
                  trad_product_description "ProductDescription",trad_trade_currency Currency,
                  pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
                  trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
                  pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
                  trad_spot_rate "SpotRate",
                  trad_forward_rate "FrwRate",
                  trad_margin_rate "MarginRate",
                  trad_trade_rate "FinalRate",
                  TRAD_IMPORT_EXPORT "ImportExport",
                  trad_entry_date "EntryDate",
                  1 "SerialNumber"
             from TradeRegister
            where trad_company_code = numCode
              and trad_import_export between 25900051 and 25900100
              and trad_Company_Code in( select usco_company_code from trsystem022a
                                            where usco_user_id =varUserid)
              and trad_record_status in (10200001,10200003,10200004)
              and trad_process_complete = GConst.OPTIONNO;
--          else
--            Open GenCursor for
--               select ISHP_SHIPMENT_NUMBER "TradeReference", ishp_bank_reference as "BillReference", 
--                  ISHP_REFERENCE_DATE as "ReferenceDate",    ishp_shipment_fcy "BillAmount",
--                  ISHP_CUSTOM_RATE "ExchangeRate",
--                  nvl((select sum(brel_reversal_fcy) 
--                             from trtran003
--                            where brel_trade_reference = ISHP_SHIPMENT_NUMBER
--                              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--                  NVL((select sum(brel_reversal_fcy) 
--                             from trtran003
--                            where brel_trade_reference = ISHP_SHIPMENT_NUMBER
--                              and brel_trade_reference = varTemp
--                              and brel_reverse_serial = numTemp
--                              and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                  ishp_shipment_fcy *  ISHP_CUSTOM_RATE "RupeeAmount",
--                  pkgreturncursor.fncgetdescription(25900086, 1) as "InstrumentType",
--                  himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_local_bank, 1) as "LocalBank",
--                  himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_supplier_code, 1) as "BuyerSeller",
--                  NULL  AS "ProductCode",  
--                  null "ProductDescription",
--                  himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(ishp_currency_code) Currency,
--                  himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_currency_code, 1) AS "CurrencyName",
--                  ishp_value_date "MaturityFrom", ishp_value_date "MaturityDate", 0 Recordstatus,
--                  himatsingkatf_prod.pkgreturncursor.fncgetdescription(ishp_company_code, 1) as "Company",
--                  nvl(himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(ishp_local_bank),30699999) as LocalBankCode,
--                  ISHP_CUSTOM_RATE "SpotRate",
--                  0 "FrwRate",
--                  0 "MarginRate",
--                  ISHP_CUSTOM_RATE "FinalRate",
--                  --ISHP_user_remarks remarks, 
--                   nvl(himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(ISHP_Company_Code),30699999) CompanyCode,
--                  25900086 "ImportExport",
--                  1 "SerialNumber"
--                  --ishp_reference_date "EntryDate"
--              FROM himatsingkatf_prod.TFTRAN042
--              where ishp_process_complete = 12400002
--              AND Ishp_Record_Status BETWEEN 10200001 AND 10200004;
          END IF;
        ELSE
           Open GenCursor for
             select trad_trade_reference "TradeReference", trad_user_reference as "BillReference", 
                trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
                trad_trade_rate "ExchangeRate",
                nvl((select sum(brel_reversal_fcy) 
                           from trtran003
                          where brel_company_code = trad_company_code
                            and brel_trade_reference = trad_trade_reference
                            and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
                NVL((select sum(brel_reversal_fcy) 
                           from trtran003
                          where brel_company_code = trad_company_code
                            and brel_trade_reference = trad_trade_reference
                            and brel_trade_reference = varTemp
                            and brel_reverse_serial = numTemp
                            and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
                pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
                pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
                pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
                pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
                pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",  
                trad_product_description "ProductDescription",trad_trade_currency Currency,
                pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
                trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
                pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
                trad_spot_rate "SpotRate",
                trad_forward_rate "FrwRate",
                trad_margin_rate "MarginRate",
                trad_trade_rate "FinalRate",
                TRAD_IMPORT_EXPORT "ImportExport",
                trad_entry_date "EntryDate",
                1 "SerialNumber"
           FROM TradeRegister
          WHERE trad_company_code = numCode
            and trad_import_export = 25900091 --Import Projection
            AND trad_Company_Code IN( SELECT usco_company_code FROM trsystem022a
                                          where usco_user_id =varUserid)
            AND trad_record_status IN (10200001,10200003,10200004)
            and trad_process_complete = GConst.OPTIONNO;
        END IF;
      elsif varEntity = 'BUYERSCREDITCLOSER' then
--      if numCode7 = 12400001 then
--            Open GenCursor for
--               SELECT Inln_Invoice_Number "TradeReference",Inln_Bank_Reference "BillReference",
--                  Inln_Reference_Date "ReferenceDate",
--                  himatsingkatf_prod.Pkgreturnreport.Fncreturnbalanceamnt(Inln_Invoice_Number,Inln_Psloan_Number,23600005,Sysdate,1) AS  "BillAmount", 
--                  Inln_Card_Rate "ExchangeRate",
--                  nvl((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where  brel_trade_reference = Inln_Invoice_Number
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                         from trtran003
--                        where
--                        --brel_company_code = trad_company_code
--                         -- and brel_trade_reference = Inln_Invoice_Number
--                          --and 
--                          brel_trade_reference = Inln_Invoice_Number
--                          and brel_reverse_serial = 1
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                          
--                  
--                 -- 0.00 "Realised", 0.00 "ReversedNow",
--                  --himatsingkatf_prod.Pkgreturnreport.Fncreturnbalanceamnt(Inln_Invoice_Number,Inln_Psloan_Number,23600005,Sysdate,1)* Inln_Card_Rate
--                  0 "RupeeAmount",
--                  pkgreturncursor.fncgetdescription(Gconst.LOANPSCFC, 1) as "InstrumentType",
--                  himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_local_bank, 1) as "LocalBank",
--                  '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                  inln_Sanction_Date Sanctiondate,
--                  --bnkc_currency_code Currency,
--                   himatsingkatf_prod.pkgreturncursor.fncgetdescription(bnkc_currency_code, 1) as "CurrencyName",
--                   Inln_Due_Date  "MaturityFrom", Inln_Due_Date "MaturityDate", 0 RecordStatus,
--                   himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_currency_code) Currency,
--                   himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(bnkc_local_bank) LocalBankCode,
--                    Inln_Libor_Rate Liborrate,Inln_Interest_Spread Spread,
--                  Inln_Interest_Rate Interestrate,
--                  --Inln_Due_Date Duedate,
--                  Inln_user_remarks remarks, Inln_Company_Code CompanyCode,
--                  25900072 "ImportExport",
--                  1 "SerialNumber"
--              FROM himatsingkatf_prod.tftran022 inner join himatsingkatf_prod.tftran021
--               on bnkc_invoice_number   =inln_invoice_number
--              WHERE inln_loan_type        IN (23600005,23600003)
--              AND (inln_process_complete   =12400002
--              OR (inln_process_complete    =12400001
--              AND inln_completion_date     >'01-jul-2014'))
--              AND inln_record_status NOT  IN(10200005,10200006)
--              AND inln_invoice_number NOT IN
--                (SELECT ICRY_INVOICE_NUMBER
--                FROM himatsingkatf_prod.Tftran022a
--                WHERE Icry_Record_Status NOT IN(10200005,10200006)
--                )
--      UNION ALL/*-------------PCFC-------------------------------------------*/
--      SELECT pkcr_pkgcredit_number "TradeReference",Pkcr_Bank_Reference "BillReference",
--        Pkcr_Sanction_Date "ReferenceDate",
--        himatsingkatf_prod.pkgReturnreport.fncReturnBalanceAmnt(pkcr_pkgcredit_number,0,23600002,Sysdate,1) AS  "BillAmount", --PCFC loan type
--        
--         Pkcr_Conversion_Rate "ExchangeRate",
--          nvl((select sum(brel_reversal_fcy) 
--                from trtran003
--                where  brel_trade_reference = pkcr_pkgcredit_number
--                 and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                   from trtran003
--                  where
--                  --brel_company_code = trad_company_code
--                   -- and brel_trade_reference = Inln_Invoice_Number
--                    --and 
--                    brel_trade_reference = pkcr_pkgcredit_number
--                    and brel_reverse_serial = 1
--                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--         --0.00 "Realised", 0.00 "ReversedNow",
--         himatsingkatf_prod.pkgReturnreport.fncReturnBalanceAmnt(pkcr_pkgcredit_number,0,23600002,Sysdate,1)* Pkcr_Conversion_Rate  "RupeeAmount",
--        
--        pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 1) as "InstrumentType",
--        
--          himatsingkatf_prod.pkgreturncursor.fncgetdescription(Pkcr_Local_Bank, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--         pkcr_Sanction_Date Sanctiondate,        
--         --Pkcr_Currency_Code Currency,
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(Pkcr_Currency_Code, 1) as "CurrencyName",
--         Pkcr_Due_Date  "MaturityFrom", Pkcr_Due_Date "MaturityDate", 0 RecordStatus,
--        -- pkcr_Sanction_Date Sanctiondate,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(PKCR_CURRENCY_CODE)  Currency,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(pkcr_Local_Bank) LocalBankCode,
--        Pkcr_Libor_Rate Liborrate,
--        Pkcr_Interest_Spread Spread,
--        pkcr_interest_rate interestrate,
--        --Pkcr_Due_Date Duedate,
--        pkcr_loan_remarks remarks,
--        Pkcr_Company_Code CompanyCode,
--        25900071 "ImportExport",
--        1 "SerialNumber"
--      FROM himatsingkatf_prod.tftran025
--      WHERE pkcr_process_complete =12400002
--      AND pkcr_record_status NOT IN(10200005,10200006)
--      UNION ALL/*------------------------BuyersCredit------------------------------*/
--      SELECT BCRD_BUYERS_CREDIT "TradeReference",
--        Bcrd_Sanction_Reference "BillReference",
--        Bcrd_Request_Date "ReferenceDate",
--        himatsingkatf_prod.Pkgmastermaintenance.Fncreturnbalance(Bcrd_Buyers_Credit,0, 23600006,Sysdate,1) AS "BillAmount", -- BuyersCredit
--        Bcrd_Conversion_Rate "ExchangeRate",
--                  nvl((select sum(brel_reversal_fcy) 
--                from trtran003
--                where  brel_trade_reference = BCRD_BUYERS_CREDIT
--                 and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy) 
--                   from trtran003
--                  where
--                  --brel_company_code = trad_company_code
--                   -- and brel_trade_reference = Inln_Invoice_Number
--                    --and 
--                    brel_trade_reference = BCRD_BUYERS_CREDIT
--                    and brel_reverse_serial = 1
--                    and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                    
--        --0.00 "Realised", 0.00 "ReversedNow",
--        himatsingkatf_prod.Pkgmastermaintenance.Fncreturnbalance(Bcrd_Buyers_Credit,0, 23600006,Sysdate,1)* Bcrd_Conversion_Rate  "RupeeAmount",
--        pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--        himatsingkatf_prod.pkgreturncursor.fncgetdescription(Bcrd_Local_Bank, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--          bcrd_Sanction_Date Sanctiondate,        
--         --Bcrd_Currency_Code Currency,
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
--         Bcrd_Due_Date  "MaturityFrom", Bcrd_Due_Date "MaturityDate", 0 RecordStatus,
--        -- Bcrd_Sanction_Date Sanctiondate,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(Bcrd_Currency_Code) Currency,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(Bcrd_Local_Bank) LocalBankCode, Bcrd_Libor_Rate Liborrate,
--        BCRD_INTEREST_SPREAD spread, BCRD_INTEREST_RATE interestrate,
--        Bcrd_Loan_Remarks Remarks,  Bcrd_Company_Code CompanyCode,
--        25900073 "ImportExport",
--        1 "SerialNumber"
--        FROM himatsingkatf_prod.tftran046
--        WHERE Bcrd_Process_Complete =12400002
--        AND BCRD_RECORD_STATUS NOT IN(10200005,10200006)
--        UNION ALL
--      SELECT InvoiceNumber "TradeReference",
--        BankReference "BillReference",
--        SanctionDate "ReferenceDate",
--        AmountFcy AS "BillAmount", -- BuyersCredit
--        Rate "ExchangeRate",
--                  nvl((select sum(cdel_cancel_amount) 
--                FROM trtran006
--                WHERE  CDEL_TRADE_REFERENCE = InvoiceNumber
--                AND CDEL_TRADE_SERIAL = SERIALNUMBER
--                 and cdel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(cdel_cancel_amount) 
--                   from trtran006
--                  where
--                  --brel_company_code = trad_company_code
--                   -- and brel_trade_reference = Inln_Invoice_Number
--                    --and 
--                    CDEL_TRADE_REFERENCE = InvoiceNumber
--                    and CDEL_TRADE_SERIAL = SERIALNUMBER
--                    and cdel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--                    
--        --0.00 "Realised", 0.00 "ReversedNow",
--        Round(AmountFcy* Rate ,2) "RupeeAmount",
--        himatsingkatf_prod.pkgreturncursor.fncgetdescription(LoanType, 1)"InstrumentType",
--        --pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) AS "InstrumentType",
--        himatsingkatf_prod.pkgreturncursor.fncgetdescription(BankCode, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--          SanctionDate Sanctiondate,        
--         --Bcrd_Currency_Code Currency,
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(currencycode, 1) AS "CurrencyName",
--         DueDate as  "MaturityFrom", DueDate "MaturityDate", 0 RecordStatus,
--        -- Bcrd_Sanction_Date Sanctiondate,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(currencycode) Currency,
--         himatsingkatf_prod.pkgreturncursor.fncGetTreasuryCode(Bankcode) LocalBankCode, LiborRate as Liborrate,
--        spread as spread, interestrate interestrate,
--        Remarks AS Remarks,  companycode CompanyCode,
--        CASE WHEN Remarks =  'Term Loan Principal' THEN
--        25900090 
--        ELSE
--        25900089 END AS "ImportExport",
--        SERIALNUMBER "SerialNumber"
--        FROM himatsingkatf_prod.vewloans
--        where loantype between 23600006 and 23600013;
--        --WHERE Bcrd_Process_Complete =12400002
--        --AND BCRD_RECORD_STATUS NOT IN(10200005,10200006);
--
--   else 
       Open GenCursor for
            select BCRD_BUYERS_CREDIT as "TradeReference", BCRD_SANCTION_REFERENCE as "BillReference", 
                 BCRD_SANCTION_DATE as "ReferenceDate",BCRD_SANCTIONED_FCY as "BillAmount",
                 BCRD_CONVERSION_RATE as "ExchangeRate",
                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT  and brel_record_status not in(10200005,10200006)) "Realised", 
                 (BCRD_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT and brel_record_status not in(10200005,10200006))) "ReversedNow",
                  pkgreturnreport.fncconvrs(BCRD_SANCTIONED_INR) "RupeeAmount",
                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
                 pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK, 1) as "LocalBank",
                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
                 BCRD_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 1) as "CurrencyName",
                 BCRD_DUE_DATE  "MaturityFrom", BCRD_DUE_DATE1 "MaturityDate", 0 RecordStatus,
                 pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 1) as "Company",BCRD_LOCAL_BANK as LocalBankCode,
                 BCRD_SPOT_RATE "SpotRate",
                 BCRD_FORWARD_RATE "FrwRate",
                 BCRD_MARGIN_RATE "MarginRate",
                 BCRD_CONVERSION_RATE "FinalRate",
                               '' "ImportExport",
                             1 "SerialNumber"  
            from trtran045 a
           where bcrd_RECORD_STATUS in (10200001,10200003,10200004)
            and bcrd_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
             and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
             and bcrd_company_code = numcode
             Union -- Added by Ishwarachandra for PCFC Loan
                     select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference", 
                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
                 FCLN_CONVERSION_RATE as "ExchangeRate",
                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised", 
                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
                 pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 1) as "InstrumentType",
                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode,
                 FCLN_CONVERSION_RATE "SpotRate",
                 0 "FrwRate",
                 0 "MarginRate",
                 FCLN_CONVERSION_RATE "FinalRate",
                                '' "ImportExport",
                                1 "SerialNumber"
            from trtran005 a
           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
    --   end if;
      END IF;
      goto process_end;
  end if;
--manjunath sir modification ends

--   if numInfotype = GConst.refTradeRegister then
--    varoperation := 'extracting trade details';
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
--      varQuery := '//' || varEntity || '/ROW/';
--      Begin
--        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
--                    varTemp, GConst.TYPENODEPATH);
--        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
--                    numTemp, GConst.TYPENODEPATH);
--      Exception
--        when others then
--          varTemp := '';
--      End;
--
--      if varEntity = 'EXPORTREALIZE' then
--        Open GenCursor for
--        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
--               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
--               trad_trade_rate "ExchangeRate",
--                 NVL((select sum(brel_reversal_fcy)
--                         from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                  NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--               trad_product_description "ProductDescription",trad_trade_currency Currency,
--               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
--               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
--            from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;
--      elsif varEntity = 'IMPORTREALIZE' then
--        Open GenCursor for
--           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
--              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
--              trad_trade_rate "ExchangeRate",
--              nvl((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--              trad_product_description "ProductDescription",trad_trade_currency Currency,
--              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
--              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
--         from TradeRegister
--        where trad_company_code = numCode
--          and trad_import_export between 25900051 and 25900100
--          and trad_record_status in (10200001,10200003,10200004)
--          and trad_process_complete = GConst.OPTIONNO;
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--        Open GenCursor for
----          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
----             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
----             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
----             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
----             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
----             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
----             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
----             from BuyersCredit
----             where bcrd_record_status in (10200001,10200003,10200004)
----             and bcrd_process_complete = GConst.OPTIONNO;
--
--          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
--            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
--            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
--            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
--            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company"
--            from trtran005
--            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--      end if;
--      goto process_end;
  --    varoperation := 'extracting trade details';
  --    numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
  --    numCode1 := GConst.fncXMLExtract(xmldoc,'CategoryType', numCode1);
  --    varQuery := '//' || varEntity || '/ROW/';
  --    Begin
  --      varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
  --                  varTemp, GConst.TYPENODEPATH);
  --      numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
  --                  numTemp, GConst.TYPENODEPATH);
  --    Exception
  --      when others then
  --        varTemp := '';
  --    End;


--if varEntity = 'EXPORTREALIZE' then

  --      Open GenCursor for
--        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
--               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
--               trad_trade_rate "ExchangeRate",
--                 NVL((select sum(brel_reversal_fcy)
--                         from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                --addea by gouri
--                                 and b.brel_record_status in (10200001,10200003,10200004)
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                  NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--               trad_product_description "ProductDescription",trad_trade_currency Currency,
--               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
--               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank LocalBankCode,
--               trad_spot_rate "SpotRate",
--              trad_forward_rate "FrwRate",
--              trad_margin_rate "MarginRate",
--              trad_trade_rate "FinalRate",
--              pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--            from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;

--abhijit modified on 29042014
    --     select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
      --            pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
     --             trad_user_reference as "BillReference",
     --             trad_trade_reference "TradeReference",
     --             pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
     --             trad_user_reference "BankReference", trad_maturity_date "DueDate",
     --             pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
     --             trad_trade_fcy "BillAmount",
     --              NVL((select sum(brel_reversal_fcy)
     --                          from trtran003 a
     --                   where brel_company_code = trad_company_code
     --                     and brel_trade_reference = trad_trade_reference
     ---                     and brel_record_status in (10200001,10200003,10200004)
    --                      and not exists
     ---                        (select 'x'
     --                          from trtran003 b
     --                         where b.brel_company_code = a.brel_company_code
     --                           and b.brel_trade_reference = a.brel_trade_reference
       --                         and b.brel_reverse_serial = a.brel_reverse_serial
     --                           and b.brel_trade_reference = varTemp
                                --addea by gouri
     --                            and b.brel_record_status in (10200001,10200003,10200004)
     --                           and b.brel_reverse_serial = numTemp)),0.00) "Realised",
     --                            pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",


    --                              trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
    --        trad_local_bank as LocalBankCode,0 RecordStatus,
    --        pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
     --     from TradeRegister
     --      where trad_company_code = numCode
     --        and trad_import_export between 25900001 and 25900050
     --        and trad_Company_Code in( select usco_company_code from trsystem022a
     --                                   where usco_user_id =varUserid)
     --        and trad_record_status between 10200001 and 10200004
     --        and trad_subproduct_code = decode(numCode1, 33800059, trad_subproduct_code, numCode1)
     --        and trad_process_complete = GConst.OPTIONNO;
--abhijit ends
     -- elsif varEntity = 'IMPORTREALIZE' then
     --   Open GenCursor for
     --     select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
     --       pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
     --       nvl(trad_contract_no,trad_user_reference) as "BillReference",trad_trade_reference "TradeReference",
     --       pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
     --       trad_user_reference "BankReference", trad_maturity_date "DueDate",
     --       pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
     --       trad_trade_fcy "BillAmount",
     --       nvl((select sum(brel_reversal_fcy)
     --         from trtran003
     --         where brel_company_code = trad_company_code
     --         and brel_trade_reference = trad_trade_reference
     --         and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
     --       pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
     --       trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
     --       trad_local_bank as LocalBankCode,0 RecordStatus,
     --       pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
     --       from TradeRegister
     --     where trad_company_code = numCode
     --       and trad_import_export between 25900051 and 25900100
     --       and trad_Company_Code in
     --       (select usco_company_code from trsystem022a
     --         where usco_user_id =varUserid)
     --       and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
     --       and trad_reverse_reference is null
    --        and trad_subproduct_code = decode(numCode1, 33800058, trad_subproduct_code, numCode1)
    --        and trad_process_complete = GConst.OPTIONNO;

--           select trad_trade_reference "TradeReference", trad_contract_no as "BillReference",
--              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
--              trad_trade_rate "ExchangeRate",
--              nvl((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--              trad_product_description "ProductDescription",trad_trade_currency Currency,
--              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
--              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
--              trad_spot_rate "SpotRate",
--              trad_forward_rate "FrwRate",
--              trad_margin_rate "MarginRate",
--              trad_trade_rate "FinalRate"
--         from TradeRegister
--        where trad_company_code = numCode
--          and trad_import_export between 25900051 and 25900100
--          and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--          and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
--          and trad_reverse_reference is null
--          and trad_subproduct_code = numCode1
--          and trad_process_complete = GConst.OPTIONNO;

      --elsif varEntity = 'BUYERSCREDITCLOSER' then

    --    Open GenCursor for
--          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
--             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
--             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
--             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
--             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
--             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
--             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
--             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
--             from BuyersCredit
--             where bcrd_record_status in (10200001,10200003,10200004)
--             and bcrd_process_complete = GConst.OPTIONNO;
-- commented on 07-may-2010 to diplay the reversed details of loan amount in the screeen
--          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
--            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
--            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
--            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
--            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
--            from trtran005
--            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;

--          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
--                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--                 FCLN_CONVERSION_RATE as "ExchangeRate",
--                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
--                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
--                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
--                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
--            from trtran005 a
--           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
      --    select pkgReturnCursor.fncGetDescription(33300003,2) "Category",
    --        pkgReturnCursor.fncGetDescription(33800003,2) "SubCategory",
   --         bcrd_sanction_reference as "BillReference",bcrd_buyers_credit "TradeReference",
  --          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "Bank",
 --           bcrd_sanction_reference "BankReference", bcrd_due_date "DueDate",
 --           pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CRY",
 --           bcrd_sanctioned_fcy "BillAmount",
   --         nvl((select sum(brel_reversal_fcy)
   --           from trtran003
   --           where brel_company_code = bcrd_company_code
   --           and brel_trade_reference = bcrd_buyers_credit
   --           and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
  --          pkgreturncursor.fncgetdescription(bcrd_foreign_bank, 2) as "Vendor",
  --          bcrd_conversion_rate "BenchmarkRate", bcrd_sanctioned_inr "AmountInINR",
  --          bcrd_local_bank as LocalBankCode,0 RecordStatus,
  --          pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,'12-MAY-14',25300002,0,NULL) "TodaySpot"
  --          from trtran045
  --        where bcrd_company_code = numCode
  --          and bcrd_Company_Code in
  --          (select usco_company_code from trsystem022a
  --            where usco_user_id =varUserid)
  --          and bcrd_record_status between 10200001 and 10200004
  --          and bcrd_process_complete = GConst.OPTIONNO;

--          select BCRD_BUYERS_CREDIT as "TradeReference", BCRD_SANCTION_REFERENCE as "BillReference",
--                 BCRD_SANCTION_DATE as "ReferenceDate",BCRD_SANCTIONED_FCY as "BillAmount",
--                 BCRD_CONVERSION_RATE as "BenchmarkRate",
--                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT  and brel_record_status not in(10200005,10200006)) "Realised",
--                 (BCRD_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT and brel_record_status not in(10200005,10200006))) "ReversedNow",
--                  pkgreturnreport.fncconvrs(BCRD_SANCTIONED_INR) "RupeeAmount",
--                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 2) as "InstrumentType",
--                 pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK, 2) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                 BCRD_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
--                 BCRD_DUE_DATE  "MaturityFrom", BCRD_DUE_DATE1 "MaturityDate", 0 RecordStatus,
--                 pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 2) as "Company",BCRD_LOCAL_BANK as LocalBankCode,
--                 pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--            from trtran045 a
--           where bcrd_RECORD_STATUS in (10200001,10200003,10200004)
--            and bcrd_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
--             Union -- Added by Ishwarachandra for PCFC Loan
--                     select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
--                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--                 FCLN_CONVERSION_RATE as "BenchmarkRate",
--                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
--                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
--                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--                 pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 2) as "InstrumentType",
--                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 2) as "LocalBank",
--                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE, 2) as "CurrencyName",
--                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 2) as "Company",fcln_local_bank as LocalBankCode,
--                 pkgForexProcess.fncGetRate(fcln_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--            from trtran005 a
--           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
      --end if;
     -- goto process_end;
 -- end if;

--manjunath sir modification ends


--manjunath sir modification ends

--  if numinfotype = GConst.refTradeSpecific then
--    varoperation := 'extracting details of a specific trade';
--    vartemp := gconst.fncXMLExtract(xmldoc, '//ROW/TradeReference', vartemp, GConst.TYPENODEPATH);
--
--    if varEntity='BUYERSCREDITCLOSER' then
--       open gencursor for
--         select 25900073 importexport, bcrd_sanction_reference userreference,
--           bcrd_sanction_date referencedate, '0' buyerseller,
--           bcrd_currency_code tradecurrency, '0' productcode,
--           '' productdescription, bcrd_sanctioned_fcy tradefcy,
--           bcrd_conversion_rate traderate, bcrd_sanctioned_inr tradeinr,
--           bcrd_local_bank  localbank,
--           bcrd_due_date maturityfrom, bcrd_due_date maturitydate
--           from trtran045
--           where bcrd_buyers_credit = vartemp
--           and bcrd_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
----          select trad_import_export importexport, trad_user_reference userreference,
----                 trad_reference_date referencedate, trad_buyer_seller buyerseller,
----                 trad_trade_currency tradecurrency, nvl(trad_product_code,0) productcode,
----                 trad_product_description productdescription, trad_trade_fcy tradefcy,
----                 trad_trade_rate traderate, trad_trade_inr tradeinr,TRAD_LOCAL_BANK  localbank,
----                 trad_maturity_from maturityfrom, trad_maturity_date maturitydate
----            from traderegister
----           where trad_trade_reference = (select loln_trade_reference
----                                          from trtran010
----                                          where loln_loan_number= vartemp
----                                          and loln_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED))
----             and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----             and trad_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);
--    else
--         open gencursor for
--          select trad_import_export importexport, trad_contract_no userreference,
--          --trad_user_reference userreference, abhijit commented 10/04/2014
--                 trad_reference_date referencedate, trad_buyer_seller buyerseller,
--                 trad_trade_currency tradecurrency, nvl(trad_product_code,0) productcode,
--                 trad_product_description productdescription, trad_trade_fcy tradefcy,
--                 trad_trade_rate traderate, trad_trade_inr tradeinr,TRAD_LOCAL_BANK  localbank,
--                 trad_maturity_from maturityfrom, trad_maturity_date maturitydate,
--                 pkgreturncursor.fncgetdescription(Trad_Product_Category,2) CategoryName,
--                 pkgreturncursor.fncgetdescription(Trad_subProduct_Code,2) SubCategoryName,
--                 Trad_Product_Category CategoryCode,Trad_subProduct_Code SubProductCode
--            from traderegister
--           where trad_trade_reference = vartemp
--            and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid);
----             and trad_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);
--       end if;
--    goto process_end;
--   end if;
-----Updated From Almus-------
  if numinfotype = gconst.refTradeSpecific then
    varoperation := 'extracting details of a specific trade';
    vartemp := gconst.fncXMLExtract(xmldoc, '//ROW/TradeReference', vartemp, GConst.TYPENODEPATH);
    
    if varEntity='BUYERSCREDITCLOSER' then
       open gencursor for
--         select FCLN_LOAN_TYPE importexport, FCLN_BANK_REFERENCE userreference,
--           FCLN_SANCTION_DATE referencedate, '0' buyerseller,
--           FCLN_CURRENCY_CODE tradecurrency, '0' productcode,
--           '' productdescription, FCLN_SANCTIONED_FCY tradefcy,
--           FCLN_CONVERSION_RATE traderate, FCLN_SANCTIONED_INR tradeinr,
--           FCLN_LOCAL_BANK  localbank,
--           FCLN_MATURITY_FROM maturityfrom, FCLN_MATURITY_TO maturitydate
--           from trtran005
--           where FCLN_LOAN_NUMBER = vartemp
--           and FCLN_RECORD_STATUS not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);
          select trad_import_export importexport, trad_user_reference userreference,
                 trad_reference_date referencedate, trad_buyer_seller buyerseller,
                 trad_trade_currency tradecurrency, nvl(trad_product_code,0) productcode,
                 trad_product_description productdescription, trad_trade_fcy tradefcy,
                 trad_trade_rate traderate, trad_trade_inr tradeinr,TRAD_LOCAL_BANK  localbank,
                 trad_maturity_from maturityfrom, trad_maturity_date maturitydate
            from traderegister
           where trad_trade_reference in (select loln_trade_reference 
                                          from trtran010 
                                          where loln_loan_number= vartemp
                                          and loln_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED))
             and trad_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)                                         
             and trad_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);


    else
         open gencursor for
          select trad_import_export importexport, trad_user_reference userreference,
                 trad_reference_date referencedate, trad_buyer_seller buyerseller,
                 trad_trade_currency tradecurrency, nvl(trad_product_code,0) productcode,
                 trad_product_description productdescription, trad_trade_fcy tradefcy,
                 trad_trade_rate traderate, trad_trade_inr tradeinr,TRAD_LOCAL_BANK  localbank,
                 trad_maturity_from maturityfrom, trad_maturity_date maturitydate
            from traderegister
           where trad_trade_reference = vartemp
            and trad_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
             and trad_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);
       end if;
    goto process_end;
   end if;


--   if numInfoType = GConst.REFTRADEDEALS then
--    varOperation := 'Extracting Trade Register for Hedging';
--    numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
--    Open GenCursor for
--   select pkgreturncursor.fncgetdescription(trad_company_code, 1) as CompanyName,
--        pkgreturncursor.fncgetdescription(trad_import_export, 1) as Instrumentype,
--        trad_user_reference as billreference, trad_reference_date as referencedate,
--        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as currencyname,
--        trad_trade_fcy BillAmount, trad_maturity_date Maturity,
--        nvl((select NVL(sum(hedg_hedged_fcy),0) - sum(NVL((select sum(cdel_cancel_amount)
--          from trtran006
--          where cdel_deal_number = hedg_deal_number
--          and cdel_deal_serial = hedg_deal_serial
--          and cdel_trade_reference = hedg_trade_reference),0))
--          from HedgeRegister
--          where hedg_deal_number != varTemp
--          and hedg_trade_reference = trad_trade_reference
--          group by hedg_trade_reference),0) "CoveredAmount",
--        (select NVL(sum(hedg_hedged_fcy),0)
--          from HedgeRegister
--          where hedg_trade_reference = trad_trade_reference
--          and hedg_deal_number = varTemp) ReverseAmount,
--        trad_trade_rate ExchangeRate,
--         pkgreturnreport.FNCCONVRS(trad_trade_inr) rupeeamount , trad_trade_reference tradereference,
--        trad_product_description ProductDescription,
--        trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
--        from TradeRegister a
--        where trad_import_export in
--        (select erel_entity_relation
--          from trsystem008
--          where erel_main_entity =
--          decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--          and erel_relation_type = 259)
--        and trad_process_complete = GConst.OPTIONNO
--        and trad_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--        and trad_trade_fcy >
--         NVL((select sum(hedg_hedged_fcy)
--          from trtran004
--          where hedg_trade_reference = trad_trade_reference
--          and hedg_deal_number  in(select deal_deal_number from trtran001
--                                   where deal_deal_number= hedg_deal_number
--                                   and deal_process_complete = GConst.OPTIONNO )),0);
--
--    Goto Process_End;
--
--   End if;
-- commented on 22-apr-10 to update the updated cursor
--    if numInfoType = GConst.REFTRADEDEALS then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--   --modified by kumar.h on 13/05/09
--      if varentity in ('HEDGEREGISTER') then
--         numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--      end if;
--    --modified by kumar.h on 13/05/09
--
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
--    Open GenCursor for
----   select pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----        pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----        trad_user_reference as billreference, trad_reference_date as "ReferenceDate",
----        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----        trad_trade_fcy "BillAmount", trad_maturity_date "Maturity",
----        nvl((select NVL(sum(hedg_hedged_fcy),0) - sum(NVL((select sum(cdel_cancel_amount)
----          from trtran006
----          where cdel_deal_number = hedg_deal_number
----          and cdel_deal_serial = hedg_deal_serial
----          and cdel_trade_reference = hedg_trade_reference),0))
----          from HedgeRegister
----          where hedg_deal_number != varTemp
----          and hedg_trade_reference = trad_trade_reference
----          group by hedg_trade_reference),0) "CoveredAmount",
----        (select NVL(sum(hedg_hedged_fcy),0)
----          from HedgeRegister
----          where hedg_trade_reference = trad_trade_reference
----          and hedg_deal_number = varTemp) "HedgingAmount",
----        trad_trade_rate "ExchangeRate",
----         pkgreturnreport.FNCCONVRS(trad_trade_inr) "RupeeAmount" , trad_trade_reference "TradeReference",
----        trad_product_description "ProductDescription",
----        trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
----        from TradeRegister a
----        where trad_import_export in
----        (select erel_entity_relation
----          from trsystem008
----          where erel_main_entity =
----          decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----          and erel_relation_type = 259)
----        and trad_process_complete = GConst.OPTIONNO
----        and trad_record_status in
----        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        and trad_trade_fcy >
----         NVL((select sum(hedg_hedged_fcy)
----          from trtran004
----          where hedg_trade_reference = trad_trade_reference
----          and hedg_deal_number  in(select deal_deal_number from trtran001
----                                   where deal_deal_number= hedg_deal_number
----                                   and deal_process_complete = GConst.OPTIONNO )),0);
--
----     select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----            pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----            --trad_trade_fcy "BillAmount",
----            pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----            GConst.AMOUNTFCY, datworkdate) "BillAmount",
----            pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
----            GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
------            nvl((select NVL(sum(hedg_hedged_fcy),0) - sum(NVL((select sum(cdel_cancel_amount)
------                from trtran006
------                where cdel_deal_number = hedg_deal_number
------                and cdel_deal_serial = hedg_deal_serial
------                and cdel_trade_reference = hedg_trade_reference),0))
------                from HedgeRegister
------                where hedg_deal_number != varTemp
------                and hedg_trade_reference = trad_trade_reference
------                group by hedg_trade_reference),0) "CoveredAmount",
----             (select NVL(sum(hedg_hedged_fcy),0)
----              from HedgeRegister
----              where hedg_trade_reference = trad_trade_reference
----              and hedg_deal_number = varTemp) "HedgingAmount",
----              trad_reference_date as "ReferenceDate",
----              trad_product_description "ProductDescription",
----              trad_user_reference as billreference,
----              trad_maturity_date "Maturity",
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----            GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
----              trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
----         from TradeRegister a
----        where trad_import_export in
----                (select erel_entity_relation
----                  from trsystem008
----                  where erel_main_entity =
----                  decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----                  and erel_relation_type = 259)
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_record_status in
----              (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
------          and trad_trade_fcy >
------               NVL((select sum(hedg_hedged_fcy)
------                from trtran004
------                where hedg_trade_reference = trad_trade_reference
------                and hedg_deal_number  in(select deal_deal_number from trtran001
------                                         where deal_deal_number= hedg_deal_number
------                                         and deal_process_complete = GConst.OPTIONNO )),0)
------      --modified by kumar.h on 13/05/09
------          and trad_trade_currency = decode(varentity,'HEDGEREGISTER',numCode1,trad_trade_currency)
------          and trad_trade_fcy > (nvl((select NVL(sum(hedg_hedged_fcy),0) - sum(NVL((select sum(cdel_cancel_amount)
------                                    from trtran006
------                                    where cdel_deal_number = hedg_deal_number
------                                    and cdel_deal_serial = hedg_deal_serial
------                                    and cdel_trade_reference = hedg_trade_reference),0))
------                                    from HedgeRegister
------                                    where hedg_deal_number != varTemp
------                                    and hedg_trade_reference = trad_trade_reference
------                                    group by hedg_trade_reference),0));
--
--     select  *
--       from
--        (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--          pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--          GConst.AMOUNTFCY, datworkdate) "BillAmount",
--          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
--          GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp) "HedgingAmount",
--          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
--          trad_user_reference as billreference,trad_maturity_date "Maturity",
--          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
--          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
--          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
--          from TradeRegister a
--          where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--        union
--        select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
--          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
--          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) "BillAmount",
--          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
--          GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = fcln_loan_number
--             and hedg_deal_number = varTemp) "HedgingAmount",
--          fcln_sanction_date as "ReferenceDate", '' "ProductDescription",
--          fcln_bank_reference as billreference,fcln_maturity_to "Maturity",
--          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
--          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,
--          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus
--          from trtran005 a
--          where fcln_loan_type=decode(numCode,GConst.PURCHASEDEAL,
--          Gconst.LOANBUYERSCREDIT,GConst.SALEDEAL,Gconst.LOANPCFC,GConst.SALEDEAL,
--          GConst.LOANPSCFC)
--          and fcln_process_complete = GConst.OPTIONNO
--          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--
--
--      --modified by kumar.h on 13/05/09
--
--    Goto Process_End;
--
--   End if;

--manjunath sir added on 15/04/2014

--if numInfoType = GConst.REFTRADEDEALS then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--   --modified by kumar.h on 13/05/09
--      if varentity in ('HEDGEREGISTER') then
--
--             numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--
--      end if;
--
--          begin
--             numcode2 := GConst.fncXMLExtract(xmldoc, 'BackupDeal', numCode2);
--           exception
--            when others then
--              numcode2:=33300000;
--            end;
--           begin
--             numcode3 := GConst.fncXMLExtract(xmldoc, 'InitCode', numCode1);
--           exception
--            when others then
--              numcode3:=33800000;
--           end;
--    --modified by kumar.h on 13/05/09
--    insert into temp values ('Here' || numCode ||numcode2,numcode3);
--    commit;
--
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
----  if numCode=GConst.PURCHASEDEAL then
--       vartemp1 := Gconst.LOANBUYERSCREDIT ;--|| ',' ||Gconst.LOANTERMLOAN ;
-- --    insert into temp values (vartemp1,numCode);commit;
--    Open GenCursor for
--     select  *
--       from
--       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription",
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          NVL((select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference),trad_maturity_date) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) -
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference)) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp) "HedgingAmount",
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount",
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate",
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus
--          from TradeRegister a
--          where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
--          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
--        union
--        select 'BuyersCredit' "ProductDescription",bcrd_sanction_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "BankName",
--          bcrd_due_date "ContractMaturity", bcrd_due_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CurrencyName",
--          bcrd_sanctioned_fcy "BillAmount",
--          pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate) -
--             (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit))"UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = bcrd_buyers_credit
--             and hedg_deal_number = varTemp) "HedgingAmount",
--          bcrd_conversion_rate "ExchangeRate",bcrd_sanctioned_inr "RupeeAmount",
--          bcrd_buyers_credit "TradeReference", bcrd_sanction_date as "ReferenceDate",
--          bcrd_loan_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(bcrd_company_code, 2) as "CompanyName",
--          bcrd_local_bank BankCode,bcrd_company_code CompanyCode,
--          bcrd_currency_code currencyCode ,0 RecordStatus
--          from trtran045 a
--          where bcrd_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--          and bcrd_process_complete = GConst.OPTIONNO
--          and bcrd_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and numcode2 = 33300003
--          and numcode3 = 33800003
--          order by 1
--         )a;
----        where a."BillAmount" > a."CoveredAmount";
----    elsif (numCode=GConst.SALEDEAL) then
----       vartemp1 := Gconst.LOANPCFC || ',' || GConst.LOANPSCFC ;
----    Open GenCursor for
----     select  *
----       from
----        (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",
----          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
----          GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = trad_trade_reference
----             and hedg_deal_number = varTemp) "HedgingAmount",
----          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
----          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
----          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
----          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
----          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and trad_process_complete = GConst.OPTIONNO
----          and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
----          and trad_subproduct_Code = decode(numcode3,33800000,trad_subproduct_code,numcode3)
----
----          and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----        union
----        select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
----          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
----          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) "BillAmount",0  "CoveredAmount",
------          pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
------          GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
----          (select NVL(sum(hedg_hedged_fcy),0)
----             from HedgeRegister
----             where hedg_trade_reference = fcln_loan_number
----             and hedg_deal_number = varTemp) "HedgingAmount",
----          fcln_sanction_date as "ReferenceDate", '' "ProductDescription",
----          fcln_bank_reference as "BillReference",fcln_maturity_to "Maturity",
----          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
----          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
----          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
----          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,
----          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus
----          from trtran005 a
----          where fcln_loan_type in (Gconst.LOANPCFC , GConst.LOANPSCFC  )
----          and fcln_process_complete = GConst.OPTIONNO
----          --Yet to define the product Codes export loans
---- --         and trad_product_category  = decode(numcode2,33300000,trad_product_category,numcode2)
---- ---         and trad_subproduct_Code = decode(number3,33800000,trad_subproduct_code,numbercode3)
----
----          and fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
----         )a
----        where a."BillAmount" > a."CoveredAmount";
----    end if;
--        Goto Process_End;
--   End if;

   ---manjuanth sir ends

  --  if numInfotype = GConst.refTradeRegister then
--    varoperation := 'extracting trade details';
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
--      varQuery := '//' || varEntity || '/ROW/';
--      Begin
--        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
--                    varTemp, GConst.TYPENODEPATH);
--        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
--                    numTemp, GConst.TYPENODEPATH);
--      Exception
--        when others then
--          varTemp := '';
--      End;
--
--      if varEntity = 'EXPORTREALIZE' then
--        Open GenCursor for
--        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
--               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
--               trad_trade_rate "ExchangeRate",
--                 NVL((select sum(brel_reversal_fcy)
--                         from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                  NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--               trad_product_description "ProductDescription",trad_trade_currency Currency,
--               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
--               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
--            from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;
--      elsif varEntity = 'IMPORTREALIZE' then
--        Open GenCursor for
--           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
--              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
--              trad_trade_rate "ExchangeRate",
--              nvl((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--              NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--              trad_product_description "ProductDescription",trad_trade_currency Currency,
--              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
--              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
--         from TradeRegister
--        where trad_company_code = numCode
--          and trad_import_export between 25900051 and 25900100
--          and trad_record_status in (10200001,10200003,10200004)
--          and trad_process_complete = GConst.OPTIONNO;
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--        Open GenCursor for
----          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
----             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
----             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
----             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
----             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
----             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
----             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
----             from BuyersCredit
----             where bcrd_record_status in (10200001,10200003,10200004)
----             and bcrd_process_complete = GConst.OPTIONNO;
--
--          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
--            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
--            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
--            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
--            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
--            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
--            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
--            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
--            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
--            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company"
--            from trtran005
--            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--      end if;
--      goto process_end;
    --  varoperation := 'extracting trade details';
   --   numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
  --    numCode1 := GConst.fncXMLExtract(xmldoc,'CategoryType', numCode1);
  --    varQuery := '//' || varEntity || '/ROW/';
  --    Begin
  --      varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
  --                  varTemp, GConst.TYPENODEPATH);
  --      numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
  --                  numTemp, GConst.TYPENODEPATH);
  --    Exception
  --      when others then
  --        varTemp := '';
  --    End;


--if varEntity = 'EXPORTREALIZE' then

  --      Open GenCursor for
--        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
--               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
--               trad_trade_rate "ExchangeRate",
--                 NVL((select sum(brel_reversal_fcy)
--                         from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                --addea by gouri
--                                 and b.brel_record_status in (10200001,10200003,10200004)
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                  NVL((select sum(brel_reversal_fcy)
--                         from trtran003
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_trade_reference = varTemp
--                          and brel_reverse_serial = numTemp
--                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
--               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
--               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
--               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
--               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
--               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
--               trad_product_description "ProductDescription",trad_trade_currency Currency,
--               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
--               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
--               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank LocalBankCode,
--               trad_spot_rate "SpotRate",
--              trad_forward_rate "FrwRate",
--              trad_margin_rate "MarginRate",
--              trad_trade_rate "FinalRate",
--              pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--            from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;

--abhijit modified on 29042014
--         select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--                  pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--                  trad_user_reference as "BillReference",
--                  trad_trade_reference "TradeReference",
--                  pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--                  trad_user_reference "BankReference", trad_maturity_date "DueDate",
--                  pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--                  trad_trade_fcy "BillAmount",
--                   NVL((select sum(brel_reversal_fcy)
--                               from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                --addea by gouri
--                                 and b.brel_record_status in (10200001,10200003,10200004)
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                                 pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
--
--
--                                  trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--            trad_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--          from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;
----abhijit ends
--      elsif varEntity = 'IMPORTREALIZE' then
--        Open GenCursor for
--          select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--            pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--            nvl(trad_contract_no,trad_user_reference) as "BillReference",trad_trade_reference "TradeReference",
--            pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--            trad_user_reference "BankReference", trad_maturity_date "DueDate",
--            pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--            trad_trade_fcy "BillAmount",
--            nvl((select sum(brel_reversal_fcy)
--              from trtran003
--              where brel_company_code = trad_company_code
--              and brel_trade_reference = trad_trade_reference
--              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--            pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
--            trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--            trad_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--            from TradeRegister
--          where trad_company_code = numCode
--            and trad_import_export between 25900051 and 25900100
--            and trad_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--            and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
--            and trad_reverse_reference is null
--            and trad_subproduct_code = numCode1
--            and trad_process_complete = GConst.OPTIONNO;
--
----           select trad_trade_reference "TradeReference", trad_contract_no as "BillReference",
----              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
----              trad_trade_rate "ExchangeRate",
----              nvl((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
----              NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----              trad_product_description "ProductDescription",trad_trade_currency Currency,
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
----              trad_spot_rate "SpotRate",
----              trad_forward_rate "FrwRate",
----              trad_margin_rate "MarginRate",
----              trad_trade_rate "FinalRate"
----         from TradeRegister
----        where trad_company_code = numCode
----          and trad_import_export between 25900051 and 25900100
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
----          and trad_reverse_reference is null
----          and trad_subproduct_code = numCode1
----          and trad_process_complete = GConst.OPTIONNO;
--
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--
--        Open GenCursor for
----          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
----             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
----             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
----             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
----             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
----             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
----             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
----             from BuyersCredit
----             where bcrd_record_status in (10200001,10200003,10200004)
----             and bcrd_process_complete = GConst.OPTIONNO;
---- commented on 07-may-2010 to diplay the reversed details of loan amount in the screeen
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
----            from trtran005
----            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----                 FCLN_CONVERSION_RATE as "ExchangeRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
----            from trtran005 a
----           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--          select pkgReturnCursor.fncGetDescription(33300003,2) "Category",
--            pkgReturnCursor.fncGetDescription(33800003,2) "SubCategory",
--            bcrd_sanction_reference as "BillReference",bcrd_buyers_credit "TradeReference",
--            pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "Bank",
--            bcrd_sanction_reference "BankReference", bcrd_due_date "DueDate",
--            pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CRY",
--            bcrd_sanctioned_fcy "BillAmount",
--            nvl((select sum(brel_reversal_fcy)
--              from trtran003
--              where brel_company_code = bcrd_company_code
--              and brel_trade_reference = bcrd_buyers_credit
--              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--            pkgreturncursor.fncgetdescription(bcrd_foreign_bank, 2) as "Vendor",
--            bcrd_conversion_rate "BenchmarkRate", bcrd_sanctioned_inr "AmountInINR",
--            bcrd_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,'12-MAY-14',25300002,0,NULL) "TodaySpot"
--            from trtran045
--          where bcrd_company_code = numCode
--            and bcrd_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--            and bcrd_record_status between 10200001 and 10200004
--            and bcrd_process_complete = GConst.OPTIONNO;
--
----          select BCRD_BUYERS_CREDIT as "TradeReference", BCRD_SANCTION_REFERENCE as "BillReference",
----                 BCRD_SANCTION_DATE as "ReferenceDate",BCRD_SANCTIONED_FCY as "BillAmount",
----                 BCRD_CONVERSION_RATE as "BenchmarkRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (BCRD_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(BCRD_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 2) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK, 2) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 BCRD_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
----                 BCRD_DUE_DATE  "MaturityFrom", BCRD_DUE_DATE1 "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 2) as "Company",BCRD_LOCAL_BANK as LocalBankCode,
----                 pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from trtran045 a
----           where bcrd_RECORD_STATUS in (10200001,10200003,10200004)
----            and bcrd_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----             and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
----             Union -- Added by Ishwarachandra for PCFC Loan
----                     select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----                 FCLN_CONVERSION_RATE as "BenchmarkRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 2) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 2) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE, 2) as "CurrencyName",
----                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 2) as "Company",fcln_local_bank as LocalBankCode,
----                 pkgForexProcess.fncGetRate(fcln_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from trtran005 a
----           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--      end if;
--      goto process_end;
--  end if;

--manjunath sir modification ends

--    if numInfotype = GConst.refTradeRegister then
----    varoperation := 'extracting trade details';
----      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
----      varQuery := '//' || varEntity || '/ROW/';
----      Begin
----        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
----                    varTemp, GConst.TYPENODEPATH);
----        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
----                    numTemp, GConst.TYPENODEPATH);
----      Exception
----        when others then
----          varTemp := '';
----      End;
----
----      if varEntity = 'EXPORTREALIZE' then
----        Open GenCursor for
----        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
----               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
----               trad_trade_rate "ExchangeRate",
----                 NVL((select sum(brel_reversal_fcy)
----                         from trtran003 a
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)
----                          and not exists
----                             (select 'x'
----                               from trtran003 b
----                              where b.brel_company_code = a.brel_company_code
----                                and b.brel_trade_reference = a.brel_trade_reference
----                                and b.brel_reverse_serial = a.brel_reverse_serial
----                                and b.brel_trade_reference = varTemp
----                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
----                  NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----               trad_product_description "ProductDescription",trad_trade_currency Currency,
----               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
----               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
----            from TradeRegister
----           where trad_company_code = numCode
----             and trad_import_export between 25900001 and 25900050
----             and trad_record_status in (10200001,10200003,10200004)
----             and trad_process_complete = GConst.OPTIONNO;
----      elsif varEntity = 'IMPORTREALIZE' then
----        Open GenCursor for
----           select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
----              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
----              trad_trade_rate "ExchangeRate",
----              nvl((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
----              NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----              trad_product_description "ProductDescription",trad_trade_currency Currency,
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company"
----         from TradeRegister
----        where trad_company_code = numCode
----          and trad_import_export between 25900051 and 25900100
----          and trad_record_status in (10200001,10200003,10200004)
----          and trad_process_complete = GConst.OPTIONNO;
----      elsif varEntity = 'BUYERSCREDITCLOSER' then
----        Open GenCursor for
------          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
------             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
------             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
------             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
------             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
------             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
------             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
------             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
------             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
------             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
------             from BuyersCredit
------             where bcrd_record_status in (10200001,10200003,10200004)
------             and bcrd_process_complete = GConst.OPTIONNO;
----
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company"
----            from trtran005
----            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
----      end if;
----      goto process_end;
--      varoperation := 'extracting trade details';
--      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
--      numCode1 := GConst.fncXMLExtract(xmldoc,'CategoryType', numCode1);
--      varQuery := '//' || varEntity || '/ROW/';
--      Begin
--        varTemp := GConst.fncXMLExtract(xmldoc,varQuery || 'TradeReference',
--                    varTemp, GConst.TYPENODEPATH);
--        numTemp := GConst.fncXMLExtract(xmldoc, varQuery || 'ReverseSerial',
--                    numTemp, GConst.TYPENODEPATH);
--      Exception
--        when others then
--          varTemp := '';
--      End;
--
--
--if varEntity = 'EXPORTREALIZE' then
--
--        Open GenCursor for
----        select trad_trade_reference "TradeReference", trad_user_reference as "BillReference",
----               trad_reference_date as "ReferenceDate",trad_trade_fcy "BillAmount",
----               trad_trade_rate "ExchangeRate",
----                 NVL((select sum(brel_reversal_fcy)
----                         from trtran003 a
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)
----                          and not exists
----                             (select 'x'
----                               from trtran003 b
----                              where b.brel_company_code = a.brel_company_code
----                                and b.brel_trade_reference = a.brel_trade_reference
----                                and b.brel_reverse_serial = a.brel_reverse_serial
----                                and b.brel_trade_reference = varTemp
----                                --addea by gouri
----                                 and b.brel_record_status in (10200001,10200003,10200004)
----                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
----                  NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----               pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----               pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----               pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----               pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----               pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----               trad_product_description "ProductDescription",trad_trade_currency Currency,
----               pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----               trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate",0 RecordStatus,
----               pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank LocalBankCode,
----               trad_spot_rate "SpotRate",
----              trad_forward_rate "FrwRate",
----              trad_margin_rate "MarginRate",
----              trad_trade_rate "FinalRate",
----              pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from TradeRegister
----           where trad_company_code = numCode
----             and trad_import_export between 25900001 and 25900050
----             and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----             and trad_record_status in (10200001,10200003,10200004)
----             and trad_process_complete = GConst.OPTIONNO;
--
----abhijit modified on 29042014
--         select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--                  pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--                  trad_user_reference as "BillReference",
--                  trad_trade_reference "TradeReference",
--                  pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--                  trad_user_reference "BankReference", trad_maturity_date "DueDate",
--                  pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--                  trad_trade_fcy "BillAmount",
--                   NVL((select sum(brel_reversal_fcy)
--                               from trtran003 a
--                        where brel_company_code = trad_company_code
--                          and brel_trade_reference = trad_trade_reference
--                          and brel_record_status in (10200001,10200003,10200004)
--                          and not exists
--                             (select 'x'
--                               from trtran003 b
--                              where b.brel_company_code = a.brel_company_code
--                                and b.brel_trade_reference = a.brel_trade_reference
--                                and b.brel_reverse_serial = a.brel_reverse_serial
--                                and b.brel_trade_reference = varTemp
--                                --addea by gouri
--                                 and b.brel_record_status in (10200001,10200003,10200004)
--                                and b.brel_reverse_serial = numTemp)),0.00) "Realised",
--                                 pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
--
--
--                                  trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--            trad_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--          from TradeRegister
--           where trad_company_code = numCode
--             and trad_import_export between 25900001 and 25900050
--             and trad_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--             and trad_record_status in (10200001,10200003,10200004)
--             and trad_process_complete = GConst.OPTIONNO;
----abhijit ends
--      elsif varEntity = 'IMPORTREALIZE' then
--        Open GenCursor for
--          select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
--            pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
--            nvl(trad_contract_no,trad_user_reference) as "BillReference",trad_trade_reference "TradeReference",
--            pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
--            trad_user_reference "BankReference", trad_maturity_date "DueDate",
--            pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
--            trad_trade_fcy "BillAmount",
--            nvl((select sum(brel_reversal_fcy)
--              from trtran003
--              where brel_company_code = trad_company_code
--              and brel_trade_reference = trad_trade_reference
--              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--            pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
--            trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
--            trad_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
--            from TradeRegister
--          where trad_company_code = numCode
--            and trad_import_export between 25900051 and 25900100
--            and trad_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--            and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
--            and trad_reverse_reference is null
--            and trad_subproduct_code = numCode1
--            and trad_process_complete = GConst.OPTIONNO;
--
----           select trad_trade_reference "TradeReference", trad_contract_no as "BillReference",
----              trad_reference_date as "ReferenceDate",    trad_trade_fcy "BillAmount",
----              trad_trade_rate "ExchangeRate",
----              nvl((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
----              NVL((select sum(brel_reversal_fcy)
----                         from trtran003
----                        where brel_company_code = trad_company_code
----                          and brel_trade_reference = trad_trade_reference
----                          and brel_trade_reference = varTemp
----                          and brel_reverse_serial = numTemp
----                          and brel_record_status in (10200001,10200003,10200004)),0.00) "ReversedNow",
----              pkgreturnreport.fncconvrs(trad_trade_inr) "RupeeAmount",
----              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumentType",
----              pkgreturncursor.fncgetdescription(trad_local_bank, 1) as "LocalBank",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "BuyerSeller",
----              pkgreturncursor.fncgetdescription(trad_product_code, 1) as "ProductCode",
----              trad_product_description "ProductDescription",trad_trade_currency Currency,
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 1) as "CurrencyName",
----              trad_maturity_from "MaturityFrom", trad_maturity_date "MaturityDate", 0 RecordStatus,
----              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "Company",trad_local_bank as LocalBankCode,
----              trad_spot_rate "SpotRate",
----              trad_forward_rate "FrwRate",
----              trad_margin_rate "MarginRate",
----              trad_trade_rate "FinalRate"
----         from TradeRegister
----        where trad_company_code = numCode
----          and trad_import_export between 25900051 and 25900100
----          and trad_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----          and trad_record_status in (10200001,10200002,10200003,10200004,10200005)
----          and trad_reverse_reference is null
----          and trad_subproduct_code = numCode1
----          and trad_process_complete = GConst.OPTIONNO;
--
--      elsif varEntity = 'BUYERSCREDITCLOSER' then
--
--        Open GenCursor for
----          select bcrd_buyers_credit as "TradeReference", bcrd_sanction_reference as "BillReference",
----             bcrd_sanction_date as "ReferenceDate",bcrd_sanctioned_fcy as "BillAmount",
----             bcrd_conversion_rate as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----             pkgreturnreport.fncconvrs(bcrd_sanctioned_inr) "RupeeAmount",
----             pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----             pkgreturncursor.fncgetdescription(bcrd_local_bank, 1) as "LocalBank",
----             '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----             bcrd_currency_code Currency,pkgreturncursor.fncgetdescription(bcrd_currency_code, 1) as "CurrencyName",
----             bcrd_due_date  "MaturityFrom", bcrd_due_date1 "MaturityDate", 0 RecordStatus,
----             pkgreturncursor.fncgetdescription(bcrd_company_code, 1) as "Company"
----             from BuyersCredit
----             where bcrd_record_status in (10200001,10200003,10200004)
----             and bcrd_process_complete = GConst.OPTIONNO;
---- commented on 07-may-2010 to diplay the reversed details of loan amount in the screeen
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----            FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----            FCLN_CONVERSION_RATE as "ExchangeRate",0.00 "Realised", 0.00 "ReversedNow",
----            pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----            pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----            pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----            '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----            FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----            FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----            pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
----            from trtran005
----            where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----            and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--
----          select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----                 FCLN_CONVERSION_RATE as "ExchangeRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 1) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 1) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "CurrencyName",
----                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 1) as "Company",fcln_local_bank as LocalBankCode
----            from trtran005 a
----           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--          select pkgReturnCursor.fncGetDescription(33300003,2) "Category",
--            pkgReturnCursor.fncGetDescription(33800003,2) "SubCategory",
--            bcrd_sanction_reference as "BillReference",bcrd_buyers_credit "TradeReference",
--            pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "Bank",
--            bcrd_sanction_reference "BankReference", bcrd_due_date "DueDate",
--            pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CRY",
--            bcrd_sanctioned_fcy "BillAmount",
--            nvl((select sum(brel_reversal_fcy)
--              from trtran003
--              where brel_company_code = bcrd_company_code
--              and brel_trade_reference = bcrd_buyers_credit
--              and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
--            pkgreturncursor.fncgetdescription(bcrd_foreign_bank, 2) as "Vendor",
--            bcrd_conversion_rate "BenchmarkRate", bcrd_sanctioned_inr "AmountInINR",
--            bcrd_local_bank as LocalBankCode,0 RecordStatus,
--            pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,'12-MAY-14',25300002,0,NULL) "TodaySpot"
--            from trtran045
--          where bcrd_company_code = numCode
--            and bcrd_Company_Code in
--            (select usco_company_code from trsystem022a
--              where usco_user_id =varUserid)
--            and bcrd_record_status between 10200001 and 10200004
--            and bcrd_process_complete = GConst.OPTIONNO;
--
----          select BCRD_BUYERS_CREDIT as "TradeReference", BCRD_SANCTION_REFERENCE as "BillReference",
----                 BCRD_SANCTION_DATE as "ReferenceDate",BCRD_SANCTIONED_FCY as "BillAmount",
----                 BCRD_CONVERSION_RATE as "BenchmarkRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (BCRD_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.BCRD_BUYERS_CREDIT and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(BCRD_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANBUYERSCREDIT, 2) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(BCRD_LOCAL_BANK, 2) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 BCRD_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
----                 BCRD_DUE_DATE  "MaturityFrom", BCRD_DUE_DATE1 "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 2) as "Company",BCRD_LOCAL_BANK as LocalBankCode,
----                 pkgForexProcess.fncGetRate(bcrd_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from trtran045 a
----           where bcrd_RECORD_STATUS in (10200001,10200003,10200004)
----            and bcrd_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----             and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
----             Union -- Added by Ishwarachandra for PCFC Loan
----                     select FCLN_LOAN_NUMBER as "TradeReference", FCLN_BANK_REFERENCE as "BillReference",
----                 FCLN_SANCTION_DATE as "ReferenceDate",FCLN_SANCTIONED_FCY as "BillAmount",
----                 FCLN_CONVERSION_RATE as "BenchmarkRate",
----                 (select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER  and brel_record_status not in(10200005,10200006)) "Realised",
----                 (FCLN_SANCTIONED_FCY-(select nvl(sum(BREL_REVERSAL_FCY),0) from trtran003 where BREL_TRADE_REFERENCE =  a.FCLN_LOAN_NUMBER and brel_record_status not in(10200005,10200006))) "ReversedNow",
----                  pkgreturnreport.fncconvrs(FCLN_SANCTIONED_INR) "RupeeAmount",
----                 pkgreturncursor.fncgetdescription(Gconst.LOANPCFC, 2) as "InstrumentType",
----                 pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 2) as "LocalBank",
----                 '' as "BuyerSeller", ''  as "ProductCode",  ''  "ProductDescription",
----                 FCLN_CURRENCY_CODE Currency,pkgreturncursor.fncgetdescription(FCLN_CURRENCY_CODE, 2) as "CurrencyName",
----                 FCLN_MATURITY_FROM  "MaturityFrom", FCLN_MATURITY_TO "MaturityDate", 0 RecordStatus,
----                 pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 2) as "Company",fcln_local_bank as LocalBankCode,
----                 pkgForexProcess.fncGetRate(fcln_currency_code,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
----            from trtran005 a
----           where FCLN_RECORD_STATUS in (10200001,10200003,10200004)
----             and FCLN_PROCESS_COMPLETE = GConst.OPTIONNO;
--      end if;
--      goto process_end;
--  end if;

--manjunath sir modification ends

              --ADDED ON 09-04-014 GIVEN BY MANJUNATH SIR-----------
    if numInfoType = GConst.REFBUYERSLOAN then
              varOperation := 'Cursor for Merchant transaction for Loans';
              numcode := gconst.fncxmlextract(xmldoc,'CompanyCode', numcode);

              Open GenCursor for
              select trad_contract_no "ContractNumber",
              trad_trade_reference "TradeReference", trad_user_reference "UserReference",
              pkgReturnCursor.fncGetDescription(trad_trade_currency, 2) "TradeCurrency",
              trad_trade_fcy "MerchantFcy",
              nvl((select sum(brel_reversal_fcy)
              from trtran003
              where trad_trade_reference=brel_trade_reference
              and brel_record_status in (10200001, 10200002, 10200003, 10200004)),0) "AdjustedAmount",
              trad_trade_fcy -nvl((select sum(brel_reversal_fcy)
              from trtran003
              where trad_trade_reference=brel_trade_reference
              and brel_record_status in (10200001, 10200002, 10200003, 10200004)),0) as "ReverseNow",
              trad_trade_rate "BenchMarkRate",
              pkgreturnreport.fncconvrs(trad_trade_inr) "MerchantInr",
              trad_maturity_date "MaturityDate", 0 RecordStatus,
              round( trad_spot_rate,4) "SpotRate",
              round(trad_forward_rate,4) "FrwRate",
              round( trad_margin_rate,4) "MarginRate",
              pkgReturnCursor.fncGetDescription(trad_local_bank, 2) "BankName"
              from TradeRegister
              where trad_company_code = numcode
              and trad_process_complete = GConst.OPTIONNO
              and trad_import_export in (25900077,25900053)
              and trad_Company_Code in( select usco_company_code from trsystem022a
              where usco_user_id = varUserid )
              and trad_trade_fcy > nvl((select sum(bcrd_sanctioned_fcy)
              from trtran007,BuyersCredit
              where trad_trade_reference=trln_trade_reference
              and trln_loan_number =bcrd_buyers_credit
              and trln_record_status in (10200001, 10200002, 10200003, 10200004)
              group by trln_trade_reference),0)
              and trad_reverse_reference is null
              and trad_record_status not in (10200006) ;
              Goto Process_End;
        End if;

--    if numInfoType = GConst.REFTRADEDEALS then
--    varOperation := 'Extracting Trade Register for Hedging';
--    numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--    Begin
--      varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/DealNumber', varTemp,GConst.TYPENODEPATH);
--    Exception
--      when others then
--        varTemp := '1';
--    End;
--
--    Open GenCursor for
--    select pkgreturncursor.fncgetdescription(trad_company_code, 1) as CompanyName,
--        pkgreturncursor.fncgetdescription(trad_import_export, 1) as Instrumentype,
--        trad_user_reference as billreference, trad_reference_date as referencedate,
--        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as currencyname,
--        trad_trade_fcy BillAmount, trad_maturity_date Maturity,
--        (select NVL(sum(hedg_hedged_fcy),0) - NVL(sum(cdel_cancel_amount),0)
--          from HedgeRegister left outer join HedgeDealCancellation4
--          on cdel_deal_number = hedg_deal_number
--          and cdel_deal_serial = hedg_deal_serial
--          and cdel_trade_reference = hedg_trade_reference
--          where hedg_deal_number != varTemp
--          and hedg_trade_reference = trad_trade_reference) ReversedAmount,
--        (select NVL(sum(hedg_hedged_fcy),0)
--          from HedgeRegister
--          where hedg_trade_reference = trad_trade_reference
--          and hedg_deal_number = varTemp) ReverseAmount,
--        trad_trade_rate ExchangeRate,
--         pkgreturnreport.FNCCONVRS(trad_trade_inr) rupeeamount , trad_trade_reference tradereference,
--        trad_product_description ProductDescription,
--        trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
--        from TradeRegister a
--        where trad_import_export in
--        (select erel_entity_relation
--          from trsystem008
--          where erel_main_entity =
--          decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--          and erel_relation_type = 259)
--        and trad_record_status in
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--        and trad_trade_fcy >
--         NVL((select sum(hedg_hedged_fcy)
--          from trtran004
--          where hedg_trade_reference = trad_trade_reference
--          and hedg_record_status in (10200001,10200002,10200003,10200004)),0);
--    Goto Process_End;
--
--   End if;

   if numInfoType= Gconst.REFRISKPOSITION then
    varOperation := 'Extracting Risk Pisition';
    numerror := pkgForexProcess.fncRiskPopulate(datWorkDate, GConst.TRADEDEAL);
    numError := pkgForexProcess.fncRiskGenerate(datWorkDate, GConst.TRADEDEAL);
    open GenCursor for
      select pkgreturncursor.fncGetDescription(CRSK_RISK_TYPE,1) RiskType,nvl(CRSK_RISK_TYPE,0) RiskCode,
             pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,2) Currency,nvl(CRSK_CURRENCY_CODE,0) CurrencyCode,
             pkgreturncursor.fncGetDescription(CRSK_COUNTER_PARTY,1) CounterParty,nvl(CRSK_COUNTER_PARTY,0) CounterPartyCode,
             decode(crsk_serial_number,1,'Cancel Deals',2,'Outstanding Deals') as DealType,CRSK_POSITION_FCY FCYPosition,
             pkgreturnreport.FNCCONVRS(nvl(CRSK_POSITION_USD,0),2,30400004) PositionUSD,
             pkgreturnreport.FNCCONVRS(nvl(CRSK_POSITION_INR,0)) PositionINR,
             pkgreturnreport.FNCCONVRS(nvl(CRSK_LIMIT_USD,0),2,30400004) AllowedUSD,
             pkgreturnreport.FNCCONVRS(nvl(CRSK_LIMIT_INR,0),2,30400004) AllowedINR
        from trsystem996
       where nvl(CRSK_RISK_TYPE, 0) > 200
         and nvl(crsk_user_id,'0')='0'
         and crsk_ason_date=datworkdate
    order by crsk_risk_type,pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,2);
     Goto Process_End;
   end if;

   if numInfoType = Gconst.REFRISKPOSITION1 then
    varOperation := 'Extracting Risk Pisition';
    open GenCursor for
      select crsk_deal_number DealNumber,pkgreturncursor.fncGetDescription(CRSK_RISK_TYPE,1) RiskType,
             nvl(CRSK_RISK_TYPE,0) RiskCode,
             pkgreturncursor.fncGetDescription(CRSK_CURRENCY_CODE,2) Currency,
             nvl(CRSK_CURRENCY_CODE,0) CurrencyCode,
             pkgreturncursor.fncGetDescription(CRSK_COUNTER_PARTY,1) CounterParty,
             nvl(CRSK_COUNTER_PARTY,0) CounterPartyCode,
             nvl(decode(CRSK_BUY_SELL,gconst.SALEDEAL,CRSK_POSITION_USD,0),0) Sale,
             nvl(decode(CRSK_BUY_SELL,gconst.PURCHASEDEAL,CRSK_POSITION_USD,0),0) Purchase,
             pkgreturnreport.FNCCONVRS(nvl(CRSK_ALLOWED_USD,0),2,30400004) as "Profit/Loss(USD)",
             pkgreturnreport.FNCCONVRS(nvl(CRSK_ALLOWED_INR,0)) as "Profit/Loss(INR)",
             crsk_ason_date AsOnDate, crsk_maturity_month GapMonth, crsk_maturity_date MaturityDate
        from trsystem996
       where nvl(CRSK_RISK_TYPE,0) in( 0,200)
         and crsk_ason_date=datworkdate;

     Goto Process_End;
   end if;


--  if numInfoType = GConst.REFDEALCURRENCYRATE then
--    varOperation := 'Extracting Currency Rates for Deals';
--    
--    Begin
--     varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--     vartemp  := varQuery ||'BaseCurrency';
--    --numCode := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode);
--    --numCode := GConst.fncXMLExtract(xmldoc,vartemp,numCode);
--    numcode := GConst.fncXMLExtract(xmldoc,vartemp,numcode,Gconst.TYPENODEPATH);
--     varQuery := '//HEDGEDEALREGISTER/ROW[@NUM="1"]/';
--     vartemp  := varQuery ||'OtherCurrency';    
--   -- numCode1 := GConst.fncXMLExtract(xmldoc, 'OtherCurrency', numCode);
--   -- numCode1 := GConst.fncXMLExtract(xmldoc, vartemp, numCode1);
--    numcode1 := GConst.fncXMLExtract(xmldoc,vartemp,numcode1,Gconst.TYPENODEPATH);
--    Exception
--      when others then
--       numCode := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode);
--       numCode1 := GConst.fncXMLExtract(xmldoc, 'OtherCurrency', numCode);
--    End;
--    select count(*)
--      into numRecords
--      from trtran012
--      where drat_currency_code = numCode
--      and drat_for_currency = numCode1
--      and drat_effective_date = datWorkDate;
--
--    if numRecords = 0 then
--      select cncy_principal_yn
--        into numCode2
--        from trmaster304
--        where cncy_pick_code = numCode1;
--
--      if numCode2 = GConst.OPTIONYES then
--
--        Open GenCursor for
--        select 'Bid',
--          round(a.drat_spot_bid / b.drat_spot_bid,4) "SpotRate",
--          round(a.drat_month1_bid / b.drat_month1_bid,4) "Month-01",
--          round(a.drat_month2_bid / b.drat_month2_bid,4) "Month-02",
--          round(a.drat_month3_bid / b.drat_month3_bid,4) "Month-03",
--          round(a.drat_month4_bid / b.drat_month4_bid,4) "Month-04",
--          round(a.drat_month5_bid / b.drat_month5_bid,4) "Month-05",
--          round(a.drat_month6_bid / b.drat_month6_bid,4) "Month-06",
--          round(a.drat_month7_bid / b.drat_month7_bid,4) "Month-07",
--          round(a.drat_month8_bid / b.drat_month8_bid,4) "Month-08",
--          round(a.drat_month9_bid / b.drat_month9_bid,4) "Month-09",
--          round(a.drat_month10_bid / b.drat_month10_bid,4) "Month-10",
--          round(a.drat_month11_bid / b.drat_month11_bid,4) "Month-11",
--          round(a.drat_month12_bid / b.drat_month12_bid,4) "Month-12"
--         from trtran012 a, trtran012 b
--         where a.drat_effective_date = b.drat_effective_date
--           and a.drat_serial_number = b.drat_serial_number
--           and a.drat_currency_code = numCode
--           and a.drat_for_currency = GConst.USDOLLAR
--           and b.drat_currency_code = numCode1
----           decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
--           and b.drat_for_currency = GConst.USDOLLAR
----           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
--           and a.drat_effective_date = datWorkDate
--           and a.drat_serial_number=
--           (select max(drat_serial_number)
--              from trtran012
--              where drat_currency_code = numCode
--              and drat_for_currency = GConst.USDOLLAR
--              and drat_effective_date = datWorkDate
--              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
--            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--        union
--        select 'Ask',
--          round(a.drat_spot_ask / b.drat_spot_ask,4) "SpotRate",
--          round(a.drat_month1_ask / b.drat_month1_ask,4) "Month-01",
--          round(a.drat_month2_ask / b.drat_month2_ask,4) "Month-02",
--          round(a.drat_month3_ask / b.drat_month3_ask,4) "Month-03",
--          round(a.drat_month4_ask / b.drat_month4_ask,4) "Month-04",
--          round(a.drat_month5_ask / b.drat_month5_ask,4) "Month-05",
--          round(a.drat_month6_ask / b.drat_month6_ask,4) "Month-06",
--          round(a.drat_month7_ask / b.drat_month7_ask,4) "Month-07",
--          round(a.drat_month8_ask / b.drat_month8_ask,4) "Month-08",
--          round(a.drat_month9_ask / b.drat_month9_ask,4) "Month-09",
--          round(a.drat_month10_ask / b.drat_month10_ask,4) "Month-10",
--          round(a.drat_month11_ask / b.drat_month11_ask,4) "Month-11",
--          round(a.drat_month12_ask / b.drat_month12_ask,4) "Month-12"
--         from trtran012 a, trtran012 b
--         where a.drat_effective_date = b.drat_effective_date
--           and a.drat_serial_number = b.drat_serial_number
--           and a.drat_currency_code = numCode
--           and a.drat_for_currency = GConst.USDOLLAR
--           and b.drat_currency_code = numCode1
----           decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
--           and b.drat_for_currency = GConst.USDOLLAR
----           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
--           and a.drat_effective_date = datWorkDate
--           and a.drat_serial_number=
--           (select max(drat_serial_number)
--              from trtran012
--              where drat_currency_code = numCode
--              and drat_for_currency = GConst.USDOLLAR
--              and drat_effective_date = datWorkDate
--              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
--            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--          order by 1 desc;
--
--      else
--        Open GenCursor for
--        select 'Bid',
--          round(a.drat_spot_bid * b.drat_spot_bid,4) "SpotRate",
--          round(a.drat_month1_bid * b.drat_month1_bid,4) "Month-01",
--          round(a.drat_month2_bid * b.drat_month2_bid,4) "Month-02",
--          round(a.drat_month3_bid * b.drat_month3_bid,4) "Month-03",
--          round(a.drat_month4_bid * b.drat_month4_bid,4) "Month-04",
--          round(a.drat_month5_bid * b.drat_month5_bid,4) "Month-05",
--          round(a.drat_month6_bid * b.drat_month6_bid,4) "Month-06",
--          round(a.drat_month7_bid * b.drat_month7_bid,4) "Month-07",
--          round(a.drat_month8_bid * b.drat_month8_bid,4) "Month-08",
--          round(a.drat_month9_bid * b.drat_month9_bid,4) "Month-09",
--          round(a.drat_month10_bid * b.drat_month10_bid,4) "Month-10",
--          round(a.drat_month11_bid * b.drat_month11_bid,4) "Month-11",
--          round(a.drat_month12_bid * b.drat_month12_bid,4) "Month-12"
--         from trtran012 a, trtran012 b
--         where a.drat_effective_date = b.drat_effective_date
--           and a.drat_serial_number = b.drat_serial_number
--           and a.drat_currency_code = numCode
--           and a.drat_for_currency = GConst.USDOLLAR
--           and b.drat_currency_code = GConst.USDOLLAR
-- --          decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
--           and b.drat_for_currency = numCode1
----           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
--           and a.drat_effective_date = datWorkDate
--           and a.drat_serial_number =
--           (select max(drat_serial_number)
--              from trtran012
--              where drat_currency_code = numCode
--              and drat_for_currency = GConst.USDOLLAR
--              and drat_effective_date = datWorkDate
--              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
--            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--        union
--        select 'Ask',
--          round(a.drat_spot_ask * b.drat_spot_ask,4) "SpotRate",
--          round(a.drat_month1_ask * b.drat_month1_ask,4) "Month-01",
--          round(a.drat_month2_ask * b.drat_month2_ask,4) "Month-02",
--          round(a.drat_month3_ask * b.drat_month3_ask,4) "Month-03",
--          round(a.drat_month4_ask * b.drat_month4_ask,4) "Month-04",
--          round(a.drat_month5_ask * b.drat_month5_ask,4) "Month-05",
--          round(a.drat_month6_ask * b.drat_month6_ask,4) "Month-06",
--          round(a.drat_month7_ask * b.drat_month7_ask,4) "Month-07",
--          round(a.drat_month8_ask * b.drat_month8_ask,4) "Month-08",
--          round(a.drat_month9_ask * b.drat_month9_ask,4) "Month-09",
--          round(a.drat_month10_ask * b.drat_month10_ask,4) "Month-10",
--          round(a.drat_month11_ask * b.drat_month11_ask,4) "Month-11",
--          round(a.drat_month12_ask * b.drat_month12_ask,4) "Month-12"
--         from trtran012 a, trtran012 b
--         where a.drat_effective_date = b.drat_effective_date
--           and a.drat_serial_number = b.drat_serial_number
--           and a.drat_currency_code = numCode
--           and a.drat_for_currency = GConst.USDOLLAR
--           and b.drat_currency_code = GConst.USDOLLAR
-- --          decode(numCode2, GConst.OPTIONYES, numCode1, GConst.USDOLLAR)
--           and b.drat_for_currency = numCode1
----           decode(numCode2, GConst.OPTIONYES, GConst.USDOLLAR, numCode1)
--           and a.drat_effective_date = datWorkDate
--           and a.drat_serial_number=
--           (select max(drat_serial_number)
--              from trtran012
--              where drat_currency_code = numCode
--              and drat_for_currency = GConst.USDOLLAR
--              and drat_effective_date = datWorkDate
--              and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
--            and a.drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--          order by 1 desc;
--
--      end if;
--
--    else
--
--      Open GenCursor for
--      select 'Bid', drat_spot_bid "SpotRate", drat_month1_bid "Month-01",
--             drat_month2_bid "Month-02", drat_month3_bid "Month-03",drat_month4_bid "Month-04",
--             drat_month5_bid "Month-05",drat_month6_bid "Month-06",drat_month7_bid "Month-07",
--             drat_month8_bid "Month-08",drat_month9_bid "Month-09",drat_month10_bid "Month-10",
--             drat_month11_bid "Month-11",drat_month12_bid "Month-12"
--        from trtran012
--       where drat_currency_code = numCode
--         and drat_for_currency = numCode1
--         and drat_effective_date = datWorkDate
--         and drat_serial_number= (select max(drat_serial_number)
--                                   from trtran012
--                                  where drat_currency_code = numCode
--                                    and drat_for_currency = numCode1
--                                    and drat_effective_date = datWorkDate
--                                    and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
--                                    and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--      union
--      select 'Ask', drat_spot_ask SpotRate, drat_month1_ask "Month-01",
--             drat_month2_ask "Month-02", drat_month3_ask "Month-03", drat_month4_ask "Month-04",
--             drat_month5_ask "Month-05",drat_month6_ask "Month-06", drat_month7_ask "Month-07",
--             drat_month8_ask "Month-08",drat_month9_ask "Month-09", drat_month10_ask "Month-10",
--             drat_month11_ask "Month-11",drat_month12_ask "Month-12"
--        from trtran012
--       where drat_currency_code = numCode
--         and drat_for_currency = numCode1
--         and drat_effective_date = datWorkDate
--         and drat_serial_number= (select max(drat_serial_number)
--                                    from trtran012
--                                   where drat_currency_code = numCode
--                                     and drat_for_currency = numCode1
--                                     and drat_effective_date = datWorkDate
--                                     and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED))
--        and drat_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--        order by 1 desc;
--    End if;
--
--    Goto Process_End;
--   End if;
   ---commeted by aakash 11-jun-13 11:22 am
--     if numInfoType=Gconst.REFEXCELREPORTSET then
--    varOperation := 'Getting Excel Report set';
--    open GENCURSOR
--     for  select M.EXLM_REPORT_ID,
--                 M.EXLM_REPORT_NAME,
--                 xmlelement("Details",
--                    xmlforest(M.EXLM_VIEW_NAME     as "ViewName",
--                              M.EXLM_TEMPLATE_PATH as "Path",
--                              M.EXLM_START_ROW     as "StartRow",
--                              M.EXLM_START_COL     as "StartCol",
--                              (select XMLAGG(
--                                         xmlelement("Row",
--                                            xmlforest(D.EXLD_FIELD_NAME as "Field",
--                                                      D.Exld_Column_Index As "Index",
--                                                      D.EXLD_VISIBLE as "Visible",
--                                                      Nvl(D.EXLD_PICK_KEY_GROUP, 0) as "GroupId"))
--                                         order by D.EXLD_COLUMN_INDEX)
--                                 from EXCELREPDETAIL D
--                                Where D.Exld_Report_Id = M.Exlm_Report_Id
--                                  /*and D.EXLD_VISIBLE = 124000018*/) as "Rows"
--                              )).GETCLOBVAL() RPT_DET
--            from EXCELREPMASTER M;
--
--       Goto Process_End;
--  End If;
     ---added by aakash/gouri 11-jun-13 11:23am
--If Numinfotype=Gconst.Refexcelreportset Then
--    Varoperation := 'Getting Excel Report set';
--    select max(HDAY_CALENDAR_DATE) into dattemp
--    From Trsystem001
--    Where Hday_Location_Code=30299999
--    And Hday_Day_Status=26400002;
--    delete from trsystem978;commit;
--    insert into trsystem978 values(dattemp);commit;
--
--    open GENCURSOR
--     for  select M.EXLM_REPORT_ID,
--                 M.EXLM_REPORT_NAME,
--                 xmlelement("Details",
--                    xmlforest(M.EXLM_VIEW_NAME     as "ViewName",
--                              M.EXLM_TEMPLATE_PATH as "Path",
--                              M.EXLM_START_ROW     as "StartRow",
--                              M.EXLM_START_COL     as "StartCol",
--                              (select XMLAGG(
--                                         xmlelement("Row",
--                                            xmlforest(D.EXLD_FIELD_NAME as "Field",
--                                                      D.Exld_Column_Index As "Index",
--                                                      D.EXLD_VISIBLE as "Visible",
--                                                      Nvl(D.EXLD_PICK_KEY_GROUP, 0) as "GroupId"))
--                                         order by D.EXLD_COLUMN_INDEX)
--                                 from EXCELREPDETAIL D
--                                Where D.Exld_Report_Id = M.Exlm_Report_Id
--                                  /*and D.EXLD_VISIBLE = 124000018*/) as "Rows"
--                              )).GETCLOBVAL() RPT_DET
--            from EXCELREPMASTER M;
--       Goto Process_End;
--  End If;
--end
If Numinfotype=Gconst.Refexcelreportset Then
    Varoperation := 'Getting Excel Report set';
    select max(HDAY_CALENDAR_DATE) into dattemp
    From Trsystem001
    Where Hday_Location_Code=30299999
    And Hday_Day_Status=26400002;
    delete from trsystem978;commit;
    insert into trsystem978 values(dattemp);commit;
    
    open GENCURSOR
     for  select M.EXLM_REPORT_ID,
                 M.EXLM_REPORT_NAME,
                 xmlelement("Details",
                    xmlforest(M.EXLM_VIEW_NAME     as "ViewName",
                              M.EXLM_TEMPLATE_PATH as "Path",
                              M.EXLM_START_ROW     as "StartRow",
                              M.EXLM_START_COL     as "StartCol",
                              (select XMLAGG(
                                         xmlelement("Row",
                                            xmlforest(D.EXLD_FIELD_NAME as "Field",
                                                      D.Exld_Column_Index As "Index",
                                                      D.EXLD_VISIBLE as "Visible",
                                                      Nvl(D.EXLD_PICK_KEY_GROUP, 0) as "GroupId",
                                                      d.EXLD_DATA_TYPE as "Data_Type"))
                                         order by D.EXLD_COLUMN_INDEX)
                                 from EXCELREPDETAIL D
                                Where D.Exld_Report_Id = M.Exlm_Report_Id
                                  /*and D.EXLD_VISIBLE = 124000018*/) as "Rows"
                              )).GETCLOBVAL() RPT_DET
            from EXCELREPMASTER M;
       Goto Process_End;
  End If;
  

----***UPDATED AAKASH/GOURI 15-JULY-13 01:04 PM
if numInfoType=Gconst.REFEXCELREPORTDATA then  
   VAROPERATION := 'Getting Excel Report Data';
    VARKEY       := GCONST.FNCXMLEXTRACT(XMLDOC, 'RepId',VARTEMP);
    VARTEMP      := GCONST.FNCXMLEXTRACT(XMLDOC,'ViewName',VARTEMP);
    Vartemp2     := Gconst.Fncxmlextract(Xmldoc,'Filter',Vartemp);
    dattemp   := gconst.fncxmlextract(xmldoc,'Fromdate',dattemp);
    dattemp1  :=gconst.fncxmlextract(xmldoc,'Todate',dattemp1);
        delete from trsystem978;
        insert into trsystem978 values(dattemp1); 
        delete from trsystem981;
        insert into trsystem981 values(dattemp,dattemp1);        
    open GENCURSOR  for
         'Select * From ' || VARTEMP;
  GOTO PROCESS_END;
  end if;
 --end

-- if NUMINFOTYPE=GCONST.REFEXCELREPORTDETAIL then
--    VAROPERATION := 'Getting Excel Report Field Details';
--    VARTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'ViewName',VARTEMP);
--    VARTEMP2 := 'Select * From ' || VARTEMP || ' where rownum = 1';
--
--    open GENCURSOR
--     for VARTEMP2;
--
--    Goto Process_End;
--  end if;
--
-----end
--
--
-- if NUMINFOTYPE=GCONST.REFEXCELREPORTDETAIL then
--    VAROPERATION := 'Getting Excel Report Field Details';
--    VARTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'ViewName',VARTEMP);
--    VARTEMP2 := ' SELECT column_name,data_type  FROM user_tab_columns  WHERE table_name ='||'''' || VARTEMP || ''''|| '  ORDER BY column_id';
--
--      
--    open GENCURSOR 
--     for VARTEMP2;
--     
--    Goto Process_End;
--  end if;

  if NUMINFOTYPE=GCONST.REFEXCELREPORTDETAIL then
    VAROPERATION := 'Getting Excel Report Field Details';
    VARTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'ViewName',VARTEMP);
    VARTEMP2 := ' SELECT column_name,data_type  FROM user_tab_columns  WHERE table_name ='||'''' || VARTEMP || ''''|| '  ORDER BY column_id';

      
    open GENCURSOR 
     for VARTEMP2;
     
    Goto Process_End;
  end if;

   if numInfoType =Gconst.REFHOLIDAYFILE then
     varoperation :='Extracting Holiday File Details';
     numCode :=GConst.fncXMLExtract(xmldoc,'LocationCode',numCode);
     numCode1 :=Gconst.fncXMLExtract(xmldoc,'CalendarDate',numCode1);



       Open GenCursor for
           select hday_location_code locationcode,hday_calendar_date calendardate,
                  hday_day_status daystatus,hday_day_remarks dayremarks
             from holidaytable
            where hday_location_code = numcode
              and to_char(hday_calendar_date,   'yyyy') = numcode1
              and hday_record_status not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);

       Goto Process_End;

   end if;
  -- MODIFIED BY RAMYA 02-APR-08
    if numInfoType = GConst.REFREPORTPARAM then
      varOperation := 'Opening Cursor for Report Parameters';

      Open GenCursor for

      select menu_parent_id ParentID,
             menu_program_unit ProgramUnit,
             rept_report_file ReportFile
        from trsystem002, trsystem010
       where menu_parent_id = 2033
         and rept_report_id = menu_program_unit
    order by menu_parent_id, menu_program_unit;

      Goto Process_End;
   End if;

  if numInfoType = GConst.REFTABLENAMES then
      varOperation := 'Extracting cursor for Table Names';
       vartemp:=  GConst.fncXMLExtract(xmlDoc,'UserID',varTemp);

    Open GenCursor for
      --Modified by  kumar 30-july-08
--           Select distinct fldp_table_synonym  as synonymname,
--                  v.TABLE_NAME as tablename
--             from trsystem999 t, vewxmlsynonyms v
--             where t.fldp_table_synonym = v.synonym_name
--              order by fldp_table_synonym;
--      Select distinct fldp_table_synonym  as synonymname,
--             v.TABLE_NAME as tablename
--        from trsystem999 t, vewxmlsynonyms v
--       where t.fldp_table_synonym = v.synonym_name
--         and V.table_name like '%%TRAN%'
--      order by fldp_table_synonym;
        Select distinct v. synonym_name  as synonymname,
                     v.TABLE_NAME as tablename, m.menu_description as Menu
                from  vewxmlsynonyms v,trsystem002 M
               where  v.synonym_name= m.menu_program_unit
                 and V.table_name like '%%TRAN%'
              order by m.menu_description;

      Goto Process_End;
  End if;

  if numInfoType = GConst.REFFIELDNAMES then
      varOperation := 'Extracting cusor for Field Names';
      varTemp := GConst.fncXMLExtract(xmlDoc, '//CommandSet/TableName', varTemp,GConst.TYPENODEPATH);

      Open GenCursor for
       --modified by kumar.h on 30-july-08
           Select fldp_xml_field  as fieldname,
                fldp_column_name as  originalfield, fldp_data_type,
                fldp_pick_group,  fldp_text_length,
                fldp_text_format_code
             from trsystem999
             where fldp_table_synonym = vartemp
            and FLDP_DATA_TYPE     !='XMLTYPE'
               and nvl(FLDP_PICK_GROUP,0) != 102
               and FLDP_XML_FIELD != 'SerialNumber'
             order by fldp_xml_field;
--            Select fldp_xml_field  as fieldname,
--                   fldp_column_name as  originalfield, fldp_data_type,
--                   fldp_pick_group,  fldp_text_length,
--                   fldp_text_format
--                   from trsystem999
--                   where fldp_table_synonym = vartemp
--                     and FLDP_DATA_TYPE     !='XMLTYPE'
--                     and nvl(FLDP_PICK_GROUP,0)! = 102
--                     and FLDP_XML_FIELD != 'SerialNumber'
--                   order by fldp_xml_field;
--           Select  distinct fldp_xml_field  as fieldname,
--                   fldp_column_name as  originalfield, fldp_data_type,
--                   fldp_pick_group,  fldp_text_length,
--                   fldp_text_format
--                   from trsystem999, vewxmlsynonyms S
--                   where fldp_table_synonym = s.synonym_name
--                     and s.table_name= vartemp
--                     and FLDP_DATA_TYPE     !='XMLTYPE'
--                     and nvl(FLDP_PICK_GROUP,0)! = 102
--                     and FLDP_XML_FIELD != 'SerialNumber'
--                   order by fldp_xml_field;
          Goto Process_End;
  End if;

 --abhijit commented on 04072012
--  if numInfoType = GConst.REFREPORTGROUPS then
--    varOperation := 'Extracting Cursor for Report Groups';
--    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//CommandSet/ReportID', varTemp,GConst.TYPENODEPATH);
--    Open GenCursor for
--             select to_number(ExtractValue(value(t), '//GroupType')) GroupType,
--                    pick_long_description GroupName, fldp_column_name FieldName,
--                    to_number(ExtractValue(value(t), '//Group')) GroupYesNO,
--                    to_number(ExtractValue(value(t), '//RestrictFrom')) RestrictFrom,
--                    to_number(ExtractValue(value(t), '//RestrictTo')) RestrictTo
--               from trsystem003 a,trmaster001, trsystem999,
--                    table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
--              where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
--                and fldp_table_synonym = ExtractValue(value(t), '//TableName')
--                and fldp_xml_field = ExtractValue(value(t), '//FieldName')
--                and repm_report_id = varTemp;
--   Goto Process_end;
--  end if;

if numInfoType = GConst.REFREPORTGROUPS then
    varOperation := 'Extracting Cursor for Report Groups';
    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//Param/ReportID', varTemp,GConst.TYPENODEPATH);
    Open GenCursor for
             select ExtractValue(value(t), '//GroupType') GroupType,
                    pick_long_description GroupName, fldp_column_name FieldName,
                    ExtractValue(value(t), '//Group') GroupYesNO,
                    ExtractValue(value(t), '//RestrictFrom') RestrictFrom,
                    ExtractValue(value(t), '//RestrictTo') RestrictTo,
                    nvl(REPM_REPORT_TYPE,90700002) ReportType,
                     REPM_REPORT_FILE ReportName
               from trsystem003 a,trmaster001, trsystem999,
                    table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
              where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
                and fldp_table_synonym = ExtractValue(value(t), '//TableName')
                and fldp_xml_field = ExtractValue(value(t), '//FieldName')
                and repm_report_id = varTemp;
   Goto Process_end;
  end if;


             --commented by aakash 21-may-13
--   if numInfoType = GConst.REFREPORTCODES then
--
--    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//CommandSet/ReportID', varTemp,GConst.TYPENODEPATH);
--    numCode :=  to_number(GConst.fncXMLExtract(xmlDoc, '//CommandSet/GroupType', varTemp,GConst.TYPENODEPATH));
--
--    if (numcode =30700301) then --checking for the Group by Fields
--      varOperation := 'Extracting parameters from the file';
--
--        open GenCursor for
--      select fldp_column_name fieldname, b.fieldname name
--        from trsystem999 a,
--             (select ExtractValue(value(t), '//TableName')TableName,
--                     ExtractValue(value(t), '//FieldName') FieldName
--                from trsystem003 a,
--                     table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
--               where to_number(ExtractValue(value(t), '//Group')) = gconst.optionyes
--                 and a.repm_report_id = varTemp
--             ) b
--       where a.fldp_table_synonym = b.TableName
--         and a.fldp_xml_field = b.FieldName;
--    else
   --added by aakash/gouri 21-may-13
 if numInfoType = GConst.REFREPORTCODES then

    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//Param/ReportID', varTemp,GConst.TYPENODEPATH);
    numCode :=  to_number(GConst.fncXMLExtract(xmlDoc, '//Param/GroupType', varTemp,GConst.TYPENODEPATH));

    if (numcode =30700301) then --checking for the Group by Fields
      varOperation := 'Extracting parameters from the file';

        Open Gencursor For
      select fldp_column_name fieldname,
      Pkgreturncursor.Fncgetdescription(B.Grouptype,2) Name,
      FieldName ColumanName
        from trsystem999 a,
             (select ExtractValue(value(t), '//TableName')TableName,
                     ExtractValue(value(t), '//FieldName') FieldName,
                      ExtractValue(value(t), '//GroupType') GroupType
                from trsystem003 a,
                     table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
               where to_number(ExtractValue(value(t), '//Group')) = gconst.optionyes
                 and a.repm_report_id = varTemp
             ) b
       where a.fldp_table_synonym = b.TableName
         And A.Fldp_Xml_Field = B.Fieldname;
    Else
      varOperation := 'Extracting cursor for Report Codes';
      varOperation := 'Extracting parameters from the file';

      select ExtractValue(value(t), '//TableName') TableName,
             ExtractValue(value(t), '//FieldName') FieldName into varValue, varDummy
        from trsystem003 a,
             table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
       where to_number(ExtractValue(value(t), '//GroupType')) = numCode
         and a.repm_report_id = varTemp;

      select fldp_column_name into varDummy
        from trsystem999
       where fldp_table_synonym = varValue
         and fldp_xml_field = varDummy;

      varOperation := 'Building Query for the cursor';
      --modified by kumar.h 0n 01-04-09
      if varTemp='COMPLETEDELIVARYOFHEDGE' and numcode =30700008 then
         varQuery := 'select distinct ' || varDummy || ', decode(pick_key_value,25300001,'||'''Import'''||','||'''Export'''||')';
      else
         varQuery := 'select distinct ' || varDummy || ', pick_short_description';
      end if;

         varQuery := varQuery || ' from trmaster001, ' || varValue;
         varQuery := varQuery || ' where pick_key_value = ' || varDummy;
                DELETE FROM TEMP;COMMIT;
     insert into temp values(varQuery,numInfoType);commit;
      open GenCursor for varQuery;
    end if;
      Goto Process_end;
  end if;

  if numInfoType = GConst.REFREPORTBROWSER then
    varOperation := 'Extracting cursor for Report Browser';
    varTemp :=  GConst.fncXMLExtract(xmlDoc, '//CommandSet/ReportID', varTemp,
                  GConst.TYPENODEPATH);
    varCondition := GConst.fncReturnparam(ParamData,'Query');
    --  varCondition:=GConst.fncxmlExtract(xmlDoc,'Query',varCondition);

    select repm_browser_sql
    into varQuery
    from trsystem003
    where repm_report_id = varTemp;

    select ExtractValue(value(t), '//TableName') TableName
    into varValue
    from trsystem003 a,
    table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
    where to_number(ExtractValue(value(t), '//GroupType')) = 30700201
    and a.repm_report_id = varTemp;

      begin
        select NVL(einf_company_field,''), NVL(einf_location_field,''),
          NVL(einf_status_field, '')
          into varCompany, varLocation, varStatus
          from trsystem995
          where einf_entity_name = varValue;
        exception
    when others then
       varCompany:= '';
       varLocation:= '';
       varStatus:= '';
    end;


--    if Length(trim(varStatus)) > 0 then
--      varQuery := varQuery || ' where ' || varStatus || ' != 10200006 ';
--    end if;

    if Length(trim(varCompany)) > 0 then
      varQuery := varQuery || ' and ' || varCompany || ' = ' || numCompanyCode;
    end if;

    if Length(trim(varLocation)) > 0 then
      varQuery := varQuery || ' and ' || varLocation || ' = ' || numLocationCode;
    end if;

    if varCondition = 'ALL' then
       varQuery := varQuery ;
    else
      varQuery := varQuery  ||  varCondition;
    end if;
    delete from temp; commit;
    insert into temp values('varquery',varQuery);commit;
    Open GenCursor for varQuery;

    Goto Process_end;
  End if;

  if numInfoType =GConst.REFCHILDREPORT then
    varOperation := 'Extracting cursor for Report Browser';
    numtemp:=  GConst.fncXMLExtract(xmlDoc, 'MenuId', numtemp);

     select user_group_code into numtemp1
     from UserMaster
     where user_user_id = varUserID
     and user_record_status not in (GConst.STATUSINACTIVE, GConst.STATUSDELETED);

     select count(*) into numRecords
     from AccessFile
     where actl_user_id = varUserID;

     if numRecords = 0 then
        varUserID := '.';
     end if;
     -- ramya updates 26-jul-08 reporttable synonym name modified to reportgroup
     open GenCursor for
       select ProgramACL,Description,reportid,Filename from(select actl_program_unit ProgramUnit,
              nvl(decode(actl_access_insert, 12400001, 'Add,', '') ||
              decode(actl_access_edit, 12400001, 'Edit,', '') ||
              decode(actl_access_delete, 12400001, 'Delete,', '') ||
              decode(actl_access_confirm, 12400001, 'Confirm,', '') ||
              decode(actl_access_view, 12400001, 'View,', '') ||
              decode(actl_access_print, 12400001, 'Print,', '') ||
              decode(actl_access_save, 12400001, 'Save', ''),0) ProgramACL,
              menu_description Description,repm_report_id reportid,repm_report_file Filename
         from AccessFile, MenuFile,REPORTGROUP
        where actl_program_unit = menu_program_unit
          and actl_group_code = numtemp1
          and actl_user_id = varUserID
          and menu_child_level =5
          and menu_parent_id = numtemp
          and menu_program_unit = repm_report_id) where ProgramACL !='0';
      -- update ends
    Goto Process_end;
  end if;
  if numInfoType = Gconst.REFDAYDETAILS then
    varoperation :='Extracting cursor for Day Details';
    numcode := Gconst.fncXMLExtract(xmldoc,'LocationID',numtemp);
   -- numtemp1 := Gconst.fncXMLExtract(xmldoc,'CompanyCode',numtemp1);
    dattemp :=Gconst.fncXMLExtract(xmldoc,'WorkDate',dattemp);
    open GenCursor for
      SELECT hday_location_code locationcode,
             hday_calendar_date calendardate,
             hday_day_status daystatus,hday_day_remarks dayremarks
        FROM holidaytable
       WHERE hday_location_code = numLocationCode
         AND hday_calendar_date = datworkdate;
--
--       SELECT hday_location_code "locationcode",
--             hday_calendar_date "calendardate",
--             hday_day_status "daystatus",hday_day_remarks "dayremarks"
--        FROM holidaytable
--       WHERE hday_location_code = 30299999
--       AND   to_date(hday_calendar_date,'dd/mm/yyyy') = to_date(sysdate,'dd/mm/yyyy');
      goto Process_end;
  end if;
  if numinfotype = gconst.REFDAYTOOPEN then

  varoperation := 'Extracting Day to open';
  --numcode := Gconst.fncXMLExtract(xmldoc,'LocationID',numtemp);
  insert into temp values (numLocationCode,gconst.DAYNOTOPENED);commit;
   open GenCursor for
--        SELECT MIN(hday_calendar_date) DaytoOpen
--          FROM holidaytable
--         WHERE hday_day_status = gconst.DAYNOTOPENED
--           AND hday_location_code = numLocationCode;
--        SELECT min(hday_calendar_date) DaytoOpen
--          FROM holidaytable
--         WHERE hday_day_status = gconst.DAYNOTOPENED
--           and hday_calendar_date > (select max(hday_calendar_date)
--               from holidaytable where hday_day_status =gconst.DAYCLOSED
--               and hday_location_code=numLocationCode )
--           AND hday_location_code = numLocationCode;
        SELECT min(hday_calendar_date) DaytoOpen
          FROM holidaytable
         WHERE hday_day_status = gconst.DAYNOTOPENED
           and hday_calendar_date > (select max(hday_calendar_date)
               from holidaytable where hday_day_status =gconst.DAYCLOSED
               AND hday_location_code=numLocationCode )
           AND hday_location_code = numLocationCode;

    goto Process_end;
  end if;

 if numinfotype =gconst.REFDAYOPENED then

  varoperation := 'Extracting Day to open';
  numcode := Gconst.fncXMLExtract(xmldoc,'LocationID',numtemp);
   open GenCursor for
       SELECT hday_calendar_date DayOpened
         FROM holidaytable
        WHERE hday_day_status = gconst.dayopen
          AND hday_location_code = numcode;
  --        Select sysdate "DayOpened" from dual;
    goto Process_end;
  end if;

  if numinfotype = gconst.REFDAYOPENCALC then
    varoperation := 'Extracting Cursor for Day Open';
      DAYOPENDAYEND.prcdayopen(datworkdate,numLocationCode,numcompanycode);


     open GenCursor for

       select DAYO_PROCESS_DATE "Process Date",
              fncgetdescription(DAYO_JOB_CODE,2) "JOb Code",
              DAYO_JOB_MESSAGE "Job Message" from trsystem031
        where DAYO_JOB_STATUS=GCONST.OPTIONNO
          and DAYO_PROCESS_DATE=datworkdate
          and DAYO_OPERATION_TYPE=GCONST.DAYOPEN ;

     goto Process_end;
  end if;
--   if numinfotype = gconst.REFREMINDERCALC then
--    varoperation := 'Extracting Cursor for REMINDERCALC';
--    --dattemp := Gconst.fncXMLExtract(xmldoc,'WorkDate',dattemp);
--    vartemp :=Gconst.fncXMLExtract(xmldoc,'UserID',vartemp);
--
--
--
--
--    goto Process_end;
--
--  end if;
  if numinfotype = gconst.REFDAYCLOSECALC then
    varoperation := 'Extracting Cursor for Dat Close';

    DAYOPENDAYEND.prcdayclose(datworkdate,varuserid);

       open GenCursor for
        select DAYO_PROCESS_DATE "Process Date",
               fncgetdescription(DAYO_JOB_CODE,2) "JOb Code",
               DAYO_JOB_MESSAGE "Job Message" from trsystem031
         where DAYO_JOB_STATUS=GCONST.OPTIONNO
           and DAYO_PROCESS_DATE=datworkdate
           and DAYO_OPERATION_TYPE=GCONST.DAYCLOSED ;

      goto Process_end;
  end if;


 if numInfoType=gconst.REFREMINDER then
      varoperation := 'Extracting Cursor for Reminders';
      varTemp := Gconst.fncXMLExtract(xmldoc,'UserID',vartemp);

       open GenCursor for

               select "Reminder Name" ,ReportID,remarks,punt_control_name ReportFile,
                   c.reminderno,c.remindercode,serialnumber,"Forwarded By User",UserRemarks,
                   finalxml,c.createDate,
                   nvl((select  remp_frequency_no
                         from trsystem013
                        where remp_report_id=d.punt_program_unit
                         and REMP_REMINDER_CODE= 27600001),0) as DateRange
                  from (select (select remp_report_header
                             from trsystem013
                            where remp_report_id =remm_report_id
                            and REMP_REMINDER_CODE= 27600001) "Reminder Name",
                          remm_report_id reportid,remm_reminder_date as createDate,
                          remm_reminder_remarks remarks,b.remm_reminder_number reminderno,
                          b.remm_report_id remindercode,remu_serial_number serialnumber,
                          (select user_user_name
                             from usermaster
                            where user_user_id=remu_Forwarded_user) "Forwarded By User",

                          remu_reminder_remarks UserRemarks,remm_final_xml finalxml
                    from trtran022 a, trtran021 b
                   where a.remu_reminder_number = b.remm_reminder_number
                     and a.remu_user_id = varTemp
                     and a.remu_reminder_date = datworkdate
                     and remu_record_status not in(gconst.STATUSDELETED,gconst.STATUSINACTIVE))c,trsystem005 d
            where  d.punt_program_unit=c.reportid  ;

       goto Process_end;
  end if;

  if numInfoType = GConst.REFHOLDINGRATE then
    varOperation := 'Extracting Cursor for Holding Rate';
    Open GenCursor for
           select dpos_currency_code CurrencyCode, dpos_holding_rate HoldingRate,
                  pkgforexprocess.fncgetrate(dpos_currency_code,30400003,datWorkDate,25300001) TodayRate
             from trsystem032
            where dpos_position_type = GConst.TRADEDEAL
              and dpos_position_date = datWorkDate;

--    Open GenCursor for
--      select decode(deal_other_currency, 30400003, deal_base_currency, deal_other_currency) CurrencyCode,
--        decode(deal_other_currency, 30400003, deal_holding_rate, deal_holding_rate1) HoldingRate
--        from trtran001 a
--        where deal_execute_date = datWorkDate
--        and deal_hedge_trade = GConst.TRADEDEAL
--        and to_timestamp(deal_time_stamp,'DD-Mon-RR HH24:MI:SS:FF3') =
--        (select max(to_timestamp(deal_time_stamp,'DD-Mon-RR HH24:MI:SS:FF3'))
--            from trtran001 b
--            where decode(a.deal_other_currency, 30400003, a.deal_base_currency, a.deal_other_currency) =
--            decode(b.deal_other_currency, 30400003, b.deal_base_currency, b.deal_other_currency));
--
    Goto Process_End;
  End if;
  ---------aakash 30-apr-13 03:48 pm--

-- if numInfoType = GConst.REFDEALS then
--    varOperation := 'Extracting Cursor for Holding Rate';
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealType',numcode);
--
--
-- if numcode in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
--       Open GenCursor for
--           select fncgetdescription(deal_Company_code,2) "Company",
--                  deal_deal_number "DealNumber",
--                   DEAL_EXECUTE_DATE "ExecuteDate",
--                  round(deal_spot_rate,4) "SpotRate",
--                  round(deal_forward_rate,4) "FrwRate",
--                  round (deal_margin_rate,4) "MarginRate",
--                 pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
--                  deal_base_amount "BaseAmount",
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency",
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",deal_local_rate "LocalRate",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                    deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,1) "CounterParty",
--                  deal_hedge_trade "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                  (select user_user_name
--                     from usermaster
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
--                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode,
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                 DEAL_BANK_REFERENCE "BankReference"
--         from trtran001
--          where deal_hedge_trade = numcode
--          and deal_process_complete = GConst.OPTIONNO
--           and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    else
--    Open GenCursor for
--          select fncgetdescription(deal_Company_code,2) "Company",
--                 deal_deal_number "DealNumber",
--                 DEAL_EXECUTE_DATE "ExecuteDate",
--                 round(deal_spot_rate,4) "SpotRate",
--                 round(deal_forward_rate,4) "FrwRate",
--                 round (deal_margin_rate,4) "MarginRate",
--                 deal_exchange_rate "ExchangeRate",
--                 Deal_base_amount "BaseAmount",
--                  NVL((select sum(cdel_cancel_amount)
--                         from trtran006
--                         where cdel_deal_number = deal_deal_number
--                         And Cdel_Record_Status In (10200001, 10200003, 10200004)),0) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--               -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,1) "CounterParty",
--                 deal_hedge_trade "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  deal_stop_loss "StopLoss", deal_take_profit "TakeProfit",
--                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                 DEAL_BANK_REFERENCE "BankReference"
--
--             from trtran001
--            where deal_hedge_trade = numcode
--              and deal_process_complete = GConst.OPTIONNO
--              and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----            and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--              and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    end if;
--
--      Goto Process_End;
--  End If;

------------------added Aakash/Gouri 13/06/13
------------------commented on 26-sep-2013
--if numInfoType = GConst.REFDEALS then
--    varOperation := 'Extracting Cursor for Holding Rate';
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealType',numcode);
--
--
-- if numcode in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
--       Open GenCursor for
--           select fncgetdescription(deal_Company_code,2) "Company",
--                  deal_deal_number "DealNumber",
--                   DEAL_EXECUTE_DATE "ExecuteDate",
--                  round(deal_spot_rate,4) "SpotRate",
--                  round(deal_forward_rate,4) "FrwRate",
--                  round (deal_margin_rate,4) "MarginRate",
--                 pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
--                  deal_base_amount "BaseAmount",
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency",
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",deal_local_rate "LocalRate",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                    deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                  Deal_Hedge_Trade "HedgeTrade",
--                  fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                  (select user_user_name
--                     from usermaster
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
--                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode,
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                 Deal_Bank_Reference "BankReference",
--                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade"
--         from trtran001
--          where deal_hedge_trade = numcode
--          and deal_process_complete = GConst.OPTIONNO
--           and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    else
--    Open GenCursor for
--          select fncgetdescription(deal_Company_code,2) "Company",
--                 deal_deal_number "DealNumber",
--                 DEAL_EXECUTE_DATE "ExecuteDate",
--                 round(deal_spot_rate,4) "SpotRate",
--                 round(deal_forward_rate,4) "FrwRate",
--                 round (deal_margin_rate,4) "MarginRate",
--                 deal_exchange_rate "ExchangeRate",
--                 Deal_base_amount "BaseAmount",
--                  NVL((select sum(cdel_cancel_amount)
--                         from trtran006
--                         where cdel_deal_number = deal_deal_number
--                         And Cdel_Record_Status In (10200001, 10200003, 10200004)),0) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--               -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                 deal_hedge_trade "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  deal_stop_loss "StopLoss", deal_take_profit "TakeProfit",
--                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                 DEAL_BANK_REFERENCE "BankReference"
--
--             from trtran001
--            where deal_hedge_trade = numcode
--              and deal_process_complete = GConst.OPTIONNO
--              and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----            and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--              And Deal_Record_Status Not In (Gconst.Statusinactive,Gconst.Statusdeleted,Gconst.Statuspostcancel);
--    end if;
--
--      Goto Process_End;
--  End If;
----------modified aakash/ishwar on 26-sep-2013 03:38 pm
--if numInfoType = GConst.REFDEALS then
--    varOperation := 'Extracting Cursor for Holding Rate';
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealType',numcode);
--
--
-- if numcode in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
--       Open GenCursor for
--           select fncgetdescription(deal_Company_code,2) "Company",
--                  deal_deal_number "DealNumber",
--                   DEAL_EXECUTE_DATE "ExecuteDate",
--                  round(deal_spot_rate,4) "SpotRate",
--                  round(deal_forward_rate,4) "FrwRate",
--                  round (deal_margin_rate,4) "MarginRate",
--                 pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
--                  deal_base_amount "BaseAmount",
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency",
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",deal_local_rate "LocalRate",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                    deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                  Deal_Hedge_Trade "HedgeTrade",
--                  fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                  (select user_user_name
--                     from usermaster
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
--                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode,
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                 Deal_Bank_Reference "BankReference",
--                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade",
--                deal_Company_code "CompanyCode"
--         from trtran001
--          where deal_hedge_trade = numcode
--          and deal_process_complete = GConst.OPTIONNO
--           and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    else
--    Open GenCursor for
--          select fncgetdescription(deal_Company_code,2) "Company",
--                 deal_deal_number "DealNumber",
--                 DEAL_EXECUTE_DATE "ExecuteDate",
--                 round(deal_spot_rate,4) "SpotRate",
--                 round(deal_forward_rate,4) "FrwRate",
--                 round (deal_margin_rate,4) "MarginRate",
--                 deal_exchange_rate "ExchangeRate",
--                 Deal_base_amount "BaseAmount",
--                  NVL((select sum(cdel_cancel_amount)
--                         from trtran006
--                         where cdel_deal_number = deal_deal_number
--                         And Cdel_Record_Status In (10200001, 10200003, 10200004)),0) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--               -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                 deal_hedge_trade "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  deal_stop_loss "StopLoss", deal_take_profit "TakeProfit",
--                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                 DEAL_BANK_REFERENCE "BankReference",
--                 deal_Company_code "CompanyCode"
--
--             from trtran001
--            where deal_hedge_trade = numcode
--              and deal_process_complete = GConst.OPTIONNO
--              and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----            and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--              And Deal_Record_Status Not In (Gconst.Statusinactive,Gconst.Statusdeleted,Gconst.Statuspostcancel);
--    end if;
--
--      Goto Process_End;
--  End If;
  ----------------end
  ----manjunath sir added on 05052014
-- if numInfoType = GConst.REFDEALS then
--    varOperation := 'Extracting Cursor for Holding Rate';
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealType',numcode);
--
--
-- if numcode in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
--       Open GenCursor for
--           select fncgetdescription(deal_Company_code,2) "Company",
--                  deal_deal_number "DealNumber",
--                   DEAL_EXECUTE_DATE "ExecuteDate",
--                  round(deal_spot_rate,4) "SpotRate",
--                  round(deal_forward_rate,4) "FrwRate",
--                  round (deal_margin_rate,4) "MarginRate",
--                  round(deal_exchange_rate,4) "ExchangeRate",
--                  deal_base_amount "BaseAmount",
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency",
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",deal_local_rate "LocalRate",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                    deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                  Deal_Hedge_Trade "HedgeTrade",
--                  fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                  (select user_user_name
--                     from usermaster
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
--                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode,
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Category",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "SubCategory",
--                 --changed temporarily to check fxcontract no.
--                 Deal_user_Reference "BankReference",
--                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade",
--                deal_Company_code "CompanyCode"
--         from trtran001
--          where deal_hedge_trade = numcode
--          and deal_process_complete = GConst.OPTIONNO
--           and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    else
--    Open GenCursor for
--          select fncgetdescription(deal_Company_code,2) "Company",
--                 deal_deal_number "DealNumber",
--                 DEAL_EXECUTE_DATE "ExecuteDate",
--                 round(deal_spot_rate,4) "SpotRate",
--                 round(deal_forward_rate,4) "FrwRate",
--                 round (deal_margin_rate,4) "MarginRate",
--                 deal_exchange_rate "ExchangeRate",
--                 Deal_base_amount "BaseAmount",
--                  NVL((select sum(cdel_cancel_amount)
--                         from trtran006
--                         where cdel_deal_number = deal_deal_number
--                         And Cdel_Record_Status In (10200001, 10200003, 10200004)),0) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--               -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                 deal_hedge_trade "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  deal_stop_loss "StopLoss", deal_take_profit "TakeProfit",
--                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Category",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "SubCategory",
--                 DEAL_BANK_REFERENCE "BankReference",
--                 deal_Company_code "CompanyCode"
--
--             from trtran001
--            where deal_hedge_trade = numcode
--              and deal_process_complete = GConst.OPTIONNO
--              and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----            and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--              And Deal_Record_Status Not In (Gconst.Statusinactive,Gconst.Statusdeleted,Gconst.Statuspostcancel);
--    end if;
--
--      Goto Process_End;
--        End If;
-------Updated from Almus--------
--if numInfoType = GConst.REFDEALS then
--    varOperation := 'Extracting Cursor for Holding Rate';
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealType',numcode);
--       
--
-- if numcode in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
--       Open GenCursor for
--           select fncgetdescription(deal_Company_code,2) "Company",
--                  deal_deal_number "DealNumber",
--                   DEAL_EXECUTE_DATE "ExecuteDate",
--                  round(nvl(deal_spot_rate,0),4) "SpotRate",
--                  round(nvl(deal_forward_rate,0),4) "FrwRate",
--                  round (nvl(deal_margin_rate,0),4) "MarginRate",
--                 pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
--                  deal_base_amount "BaseAmount",
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid   
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                    deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                  Deal_Hedge_Trade "HedgeTrade",
--                  fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp", 
--                  (select user_user_name 
--                     from usermaster 
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
--                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode, 
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Initiator",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "Trader",
--                 Deal_Bank_Reference "BankReference", 
--                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade",
--                deal_Company_code "CompanyCode"
--         from trtran001
--          where deal_hedge_trade = numcode 
--          and deal_process_complete = GConst.OPTIONNO 
--           and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    else
--    Open GenCursor for
--          select fncgetdescription(deal_Company_code,2) "Company",
--                 deal_deal_number "DealNumber",
--                 DEAL_EXECUTE_DATE "ExecuteDate",
--                 round(deal_spot_rate,4) "SpotRate",
--                 round(deal_forward_rate,4) "FrwRate",
--                 round (deal_margin_rate,4) "MarginRate",
--                 deal_exchange_rate "ExchangeRate",
--                 Deal_base_amount "BaseAmount", 
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
----
----                  NVL((select sum(cdel_cancel_amount)
----                         from trtran006
----                         where cdel_deal_number = deal_deal_number
----                         And Cdel_Record_Status In (10200001, 10200003, 10200004)),0) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid     
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--               -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount, 
--                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,2) "CounterParty",
--                 deal_hedge_trade "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                 (select user_user_name 
--                   from usermaster 
--                  where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                  deal_stop_loss "StopLoss", deal_take_profit "TakeProfit",
--                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Initiator",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "Trader",
--                 DEAL_BANK_REFERENCE "BankReference",
--                 deal_Company_code "CompanyCode"
--                  
--             from trtran001
--            where deal_hedge_trade = numcode 
--              and deal_process_complete = GConst.OPTIONNO 
--              and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----            and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--              And Deal_Record_Status Not In (Gconst.Statusinactive,Gconst.Statusdeleted,Gconst.Statuspostcancel);
--    end if;
--
--      Goto Process_End;
--  End If;

--if numInfoType = GConst.REFDEALS then
--    varOperation := 'Extracting Cursor for Holding Rate';
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealType',numcode);
--     begin
--        numcode1 := Gconst.fncXMLExtract(xmlDoc,'CompanyCode',numCode1);  
--     exception
--        when others then
--         numcode1 :=30199999;
--     end;
--      if numcode in(gconst.HEDGEDEAL,GCONST.FTDEAL) then
--        Open GenCursor for
--          SELECT 
--            fncgetdescription(deal_Company_code,2) "Company",
--            deal_deal_number "DealNumber",
--            DEAL_EXECUTE_DATE "ExecuteDate",
--            fncgetdescription(deal_buy_sell,1) "BuySell",
--            fncgetdescription(deal_counter_party,2) "CounterParty",
--            pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--            pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
--            ROUND(NVL(deal_spot_rate,0),4) "SpotRate",
--            ROUND(NVL(deal_forward_rate,0),4) "FrwRate",
--            ROUND (NVL(deal_margin_rate,0),4) "MarginRate",
--            Deal_maturity_from "ExpiryDate",
--            deal_maturity_date "DeliveryDate",
--            (deal_base_amount-NVL((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--            fncgetdescription(deal_base_currency,2) "BaseCurrency",
--            fncgetdescription(deal_other_currency,2) "OtherCurrency",
--            Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
--            Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
--            deal_base_amount "BaseAmount",
--            --added by gouri   to show OutStandingAmount in grid
--            -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--            pkgreturnreport.FNCCONVRS(NVL((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL, GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",
--            NVL(deal_local_rate,0) "LocalRate",
--            pkgreturnreport.FNCCONVRS(NVL((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL, GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--            --fncRollover(deal_deal_number) "MaturityDate",
--            deal_serial_number "SerialNumber",
--            Deal_Hedge_Trade "HedgeTrade",
--            fncgetdescription(deal_swap_outright,1) "SwapOutright",
--            fncgetdescription(deal_deal_type,1) "DealType",
--            deal_time_stamp "DealTimeStamp",
--            (SELECT user_user_name FROM usermaster WHERE user_user_id=deal_user_id) "UserName",
--            deal_other_currency "OtherCurrencyCode",
--            deal_dealer_remarks "Remarks",
--            deal_record_status "RecordStatus",
--            deal_counter_party Counterpartycode,
--            deal_base_currency "BaseCurrencyCode",
--            Deal_buy_sell AS "BuySellCode",
--            ''            AS "TradeReference",
--            deal_holding_rate "HoldingRate",
--            deal_holding_rate1 "HoldingRate1",
--            Deal_Bank_Reference "BankReference",
--            fncgetdescription(Deal_Hedge_Trade,2) "HedgeTradeDesc",
--            deal_Company_code "CompanyCode"
--          FROM trtran001
--          WHERE deal_hedge_trade   IN(gconst.HEDGEDEAL,GCONST.FTDEAL)
--          AND deal_process_complete = GConst.OPTIONNO
--          AND deal_Company_Code    IN
--            ( SELECT usco_company_code FROM trsystem022a WHERE usco_user_id =varUserid)
--          AND deal_company_code = DECODE(numcode1,30199999,deal_company_code,numcode1)
--            --          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          AND deal_record_status = 10200003; ---as per client requirment we are considerd only confirm deal
--        --and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--      else
--        Open GenCursor for
--           SELECT fncgetdescription(deal_Company_code,2) "Company",
--            deal_deal_number "DealNumber",
--            DEAL_EXECUTE_DATE "ExecuteDate",
--            Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
--            Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
--            ROUND(deal_spot_rate,4) "SpotRate",
--            ROUND(deal_forward_rate,4) "FrwRate",
--            ROUND (deal_margin_rate,4) "MarginRate",
--            deal_exchange_rate "ExchangeRate",
--            Deal_base_amount "BaseAmount",
--            (deal_base_amount-NVL((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--            --
--            --                  NVL((select sum(cdel_cancel_amount)
--            --                         from trtran006
--            --                         where cdel_deal_number = deal_deal_number
--            --                         And Cdel_Record_Status In (10200001, 10200003, 10200004)),0) "AdjustedAmount",
--            --added by gouri   to show OutStandingAmount in grid
--            pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--            -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,
--            fncgetdescription(deal_base_currency,2) "BaseCurrency",
--            fncgetdescription(deal_other_currency,2) "OtherCurrency",
--            deal_other_amount "OtherAmount",
--            deal_local_rate "LocalRate",
--            pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--            deal_maturity_date "MaturityDate",
--            deal_serial_number "SerialNumber",
--            fncgetdescription(deal_counter_party,2) "CounterParty",
--            deal_hedge_trade "HedgeTrade",
--            fncgetdescription(deal_buy_sell,1) "BuySell",
--            fncgetdescription(deal_swap_outright,1) "SwapOutright",
--            fncgetdescription(deal_deal_type,1) "DealType",
--            deal_time_stamp "DealTimeStamp",
--            (SELECT user_user_name FROM usermaster WHERE user_user_id=deal_user_id) "UserName",
--            deal_other_currency "OtherCurrencyCode",
--            deal_holding_rate "HoldingRate",
--            deal_holding_rate1 "HoldingRate1",
--            deal_dealer_remarks "Remarks",
--            'All' "TradeReference",
--            deal_record_status "RecordStatus",
--            deal_base_currency "BaseCurrencyCode",
--            Deal_buy_sell AS "BuySellCode",
--            deal_stop_loss "StopLoss",
--            deal_take_profit "TakeProfit",
--            DEAL_BANK_REFERENCE "BankReference",
--            deal_Company_code "CompanyCode"
--          FROM trtran001
--          WHERE deal_hedge_trade    = numcode
--          AND deal_process_complete = GConst.OPTIONNO
--          AND deal_Company_Code    IN
--            ( SELECT usco_company_code FROM trsystem022a WHERE usco_user_id =varUserid)
--            --            and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          AND Deal_Record_Status NOT IN (Gconst.Statusinactive,Gconst.Statusdeleted,Gconst.Statuspostcancel);
--      end if;
--      Goto Process_End;
--  End If;
--  

if numInfoType = GConst.REFDEALS then
   varOperation := 'Extracting Cursor for Holding Rate';
   
--        Begin
--        vartemp := gconst.fncxmlextract(xmldoc,'Param/DealNumber', vartemp);
--        Exception 
--            when others then 
--            vartemp := '0';        
--        end;
--        
--        Begin
--        numcode := gconst.fncxmlextract(xmldoc,'Param/DealSerial', numcode);
--        Exception 
--            when others then 
--            numcode := 0;        
--        end;
        
    Open GenCursor for
    SELECT  rownum "Rownum",
            fncgetdescription(deal_Company_code,2) "Company",
            fncgetdescription(DEAL_LOCATION_CODE,2) "Location",
            deal_deal_number "DealNumber",	
            ROUND(NVL(deal_spot_rate,0),4) "SpotRate",
            ROUND(NVL(deal_forward_rate,0),4) "ForwardRate",
            ROUND (NVL(deal_margin_rate,0),4) "MarginRate",
            pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
            deal_base_amount "BaseAmount",
            pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
            (deal_base_amount-NVL((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL, GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",            
            pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
            deal_other_amount "OtherAmount",
            DEAL_EXECUTE_DATE "ExecuteDate",
            Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
            Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",		
			      fncgetdescription(deal_buy_sell,1) "BuySell",
            fncgetdescription(deal_counter_party,2) "CounterParty",
            Deal_maturity_from "ExpiryDate",
            deal_maturity_date "DeliveryDate",
			      fncgetdescription(deal_base_currency,2) "BaseCurrency",
            fncgetdescription(deal_other_currency,2) "OtherCurrency",
            deal_serial_number "SerialNumber",
            Deal_Hedge_Trade "HedgeTrade",
            fncgetdescription(deal_swap_outright,1) "SwapOutright",
            fncgetdescription(deal_deal_type,1) "DealType",
            deal_time_stamp "DealTimeStamp",
            (SELECT user_user_name FROM usermaster WHERE user_user_id=deal_user_id) "UserName",
            deal_other_currency "OtherCurrencyCode",
            deal_dealer_remarks "Remarks",
            deal_record_status "RecordStatus",
            deal_counter_party "Counterpartycode",
            deal_base_currency "BaseCurrencyCode",
            Deal_buy_sell AS "BuySellCode",
            Deal_Bank_Reference "BankReference",
            fncgetdescription(Deal_Hedge_Trade,2) "HedgeTradeDesc",
            deal_Company_code "CompanyCode", DEAL_LOCATION_CODE "LocationCode",
			DEAL_DIRECT_INDIRECT "DirectIndirect"
          FROM trtran001
          where deal_process_complete = GConst.OPTIONNO
--          AND deal_deal_number=decode(vartemp,'0',deal_deal_number,vartemp)
--          AND deal_serial_number=decode(numcode,0,deal_serial_number,numcode)
          AND deal_Company_Code    IN
          ( SELECT usco_company_code FROM trsystem022a WHERE usco_user_id =varUserid)
          AND deal_record_status not in (10200005,10200006); ---as per client requirment we are considerd only confirm deal
   Goto Process_End;
  End if;
  
  
   if numInfoType = GConst.REFBCINTEREST then
    varOperation := 'Extracting Buyers Credit Information for Interest';

    Open Gencursor for
    select pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
      pkgReturnCursor.fncGetDescription(33800062,2) "SubCategory",
      pkgReturnCursor.fncGetDescription(deal_counter_party,2) "SubCategory",
      deal_base_amount "DealAmount",
      min(bcrd_sanction_date) "SanctionDate",
      max(bcrd_due_date) "DueDate",
      sum(bcrd_sanctioned_fcy) "BuyersCredit",
      avg(bcrd_libor_rate) "LiborRate",
      avg(bcrd_interest_spread) "InterestSpread",
      avg(bcrd_interest_rate) "InterestRate",
      NVL((select max(trad_maturity_date)
        from trtran002
        where trad_trade_remarks = deal_deal_number),max(bcrd_sanction_date)) "FromDate",
      max(bcrd_due_date) "ToDate",0 "InterestAmount",deal_deal_number "DealNumber",
      0 RecordStatus
      from trtran001, trtran045
      where deal_deal_number = bcrd_hedge_reference
      and bcrd_process_complete = 12400002
      group by deal_backup_deal, deal_init_code, deal_base_amount, deal_deal_number,
      deal_counter_party;


    Goto Process_End;
  End if;




  ---end



--  if numInfoType = Gconst.refTradeDealCurrencyWise then
--    vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
--        --dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
--    numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyDealer',numcode);
--
--    varoperation := 'Extracting particular user details';
--    select pick_short_description, user_group_code, pick_key_value
--      into varValue, numCode1, numCode2
--      from trmaster001, trsystem022
--      where pick_key_group = 338
--      and user_user_id = varTemp
--      and instr(user_user_id,pick_short_description) > 0;
--  --insert into temp values (varUserid,numcode); commit;
--      --to Calculate the Year begin date
--    if  to_char(datWorkDate,'mm') <= 3 then
--        datTemp:=to_date('01-APR-' || to_char(to_number(to_char(datWorkDate,'YYYY'))-1));
--    else
--        datTemp :=to_date('01-APR-' || to_char(datWorkDate,'YYYY'));
--    end if;
--
--    Open GenCursor for
--    Select Currency, sum(decode(m.buysell,'Sell',-1,1) * m.Balancefcy) "BaseAmount",
--      Round(Sum(M.Balancefcy * M.Exrate) / Sum(M.Balancefcy),6) HoldingRate,
--      nvl(sum(case when (m.dealdate < datWorkDate)
--          then decode(m.buysell,'Sell',-1,1) * Balancefcy else 0 end),0) OpenPosition,
--      nvl( Sum(Case When (Dealdate = datWorkDate And Buysell= 'Buy')
--          then Balancefcy Else 0 End),0) Totalbuy,
--      nvl( sum(case when (dealdate = datWorkDate and buysell= 'Sell')
--          then Balancefcy else 0 end),0) TotalSell,
--      nvl(sum((select sum(nvl(sub.PandLFcy,0))
--            from vewforwardfuture sub
--            where M.Currencycode= Sub.Currencycode
--            and m.Othercode= sub.Othercode
--            and m.InitCode = sub.InitCode
--            and Canceldate Between datTemp And datWorkDate)),0) Plytd,
--      nvl(Sum(Mtmpandlinr),0) Mtmpandlinr,CurrencyCode BaseCurrencyCode,Othercode OtherCurrencyCode
--      from
--        (select 1 Order1, BuySell, exrate, BalanceFcy, DealDate, 0 PLYTD, MTMPandLInr, Currency,
--          CurrencyCode, OtherCode, InitCode,pkgReturnCursor.fncGetDescription(InitCode, 2) InitiatorDesc
--          from vewForwardFuture
--          where status = 12400002
--          and CompanyCode = decode(numCode, 30199999, CompanyCode, numCode)
--          and CompanyCode in( select usco_company_code from trsystem022a
--                                        where usco_user_id =vartemp)
--          and HedgeCode = 26000002
--          and BalanceFcy > 0
--        union all
--        select 1 Order1,
--          case
--            when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Buy'
--            when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Sell'
--          End BuySell,
--          cosu_strike_rate ExRate,	Pkgforexprocess.Fncgetoutstanding(Copt_Deal_Number,
--            Copt_Serial_Number,15,1,datWorkDate) As Balancefcy,
--          copt_execute_date as DealDate, 0 PLYTD ,0 MTMPandLInr,
--          Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) ||'/'||
--          Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) as Currency,
--          copt_base_currency as CurrencyCode,copt_Other_currency As Othercode,
--          copt_init_code As Initcode,
--          pkgReturncursor.Fncgetdescription(copt_init_code,2) as InitiatorDesc
--          From Trtran071,Trtran072
--          Where Copt_Deal_Number = Cosu_Deal_Number
--          and  Copt_Process_Complete =12400002
--          and Copt_Record_Status Not In (10200005,10200006)
--          and Cosu_Record_Status Not In (10200005,10200006)
--          and Cosu_Buy_Sell=25300002
--          and Copt_Company_Code =Decode(Numcode,30199999,Copt_Company_Code,Numcode)
--          and copt_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =vartemp)
--          and Copt_Hedge_Trade=26000002) M
--      where InitiatorDesc like decode(numCode1, GConst.SUBDEALER, varValue, '%')
--      group by CurrencyCode,OtherCode,Currency;
--
--      Goto process_end;
--
--   end if;

---taken from bradesh as per manjureddy.
 if numInfoType = Gconst.refTradeDealCurrencyWise then
    vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
        --dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
    numcode := gconst.fncxmlextract(xmldoc,'KeyValues/CompanyDealer',numcode);

    varoperation := 'Extracting particular user details';
--    select pick_short_description, user_group_code, pick_key_value
--      into varValue, numCode1, numCode2
--      from trmaster001, trsystem022
--      where pick_key_group = 338
--      and user_user_id = varTemp
--      and instr(user_user_id,pick_short_description) > 0;

     select (case when user_group_code in(14200001,14200003,14200006) then null
            else vartemp end)
       into vartemp1
       from trsystem022
       where user_user_id =vartemp
       and user_record_status not in(10200005,10200006);


    if  to_char(datWorkDate,'mm') <= 3 then 
        datTemp:=to_date('01-APR-' || to_char(to_number(to_char(datWorkDate,'YYYY'))-1));
    else 
        datTemp :=to_date('01-APR-' || to_char(datWorkDate,'YYYY'));
    end if;    
        
    Open GenCursor for
    Select Currency, sum(decode(m.buysell,'Sell',-1,1) * m.Balancefcy) "BaseAmount",
      Round(Sum(M.Balancefcy * M.Exrate) / Sum(M.Balancefcy),6) HoldingRate, 
      nvl(sum(case when (m.dealdate < datWorkDate) 
          then decode(m.buysell,'Sell',-1,1) * Balancefcy else 0 end),0) OpenPosition,
      nvl( Sum(Case When (Dealdate = datWorkDate And Buysell= 'Buy') 
          then Balancefcy Else 0 End),0) Totalbuy,
      nvl( sum(case when (dealdate = datWorkDate and buysell= 'Sell') 
          then Balancefcy else 0 end),0) TotalSell,
      nvl(sum((select sum(nvl(sub.PandLFcy,0)) 
            from vewforwardfuture sub
            where M.Currencycode= Sub.Currencycode
            and m.Othercode= sub.Othercode
            and m.UserID = sub.UserID
            and Canceldate Between datTemp And datWorkDate)),0) Plytd,
      nvl(Sum(Mtmpandlinr),0) Mtmpandlinr,CurrencyCode BaseCurrencyCode,Othercode OtherCurrencyCode
      from
        (select 1 Order1, BuySell, exrate, BalanceFcy, DealDate, 0 PLYTD, MTMPandLInr, Currency,
          CurrencyCode, OtherCode, userid UserID,
            userid UserIDDesc
          --InitCode,pkgReturnCursor.fncGetDescription(InitCode, 2) InitiatorDesc
          from vewForwardFuture
          where status = 12400002
          and CompanyCode = decode(numCode, 30199999, CompanyCode, numCode)
          and CompanyCode in( select usco_company_code from trsystem022a
                                        where usco_user_id =vartemp)
          and userid = (case when (vartemp1 is  null) then userid else vartemp1 end)
          --and HedgeCode = 26000002
          and BalanceFcy > 0
        union all
        select 1 Order1, 
          case
            when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Buy'
            when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Sell'
          End BuySell, 
          cosu_strike_rate ExRate,	Pkgforexprocess.Fncgetoutstanding(Copt_Deal_Number,
            Copt_Serial_Number,15,1,datWorkDate) As Balancefcy,
          copt_execute_date as DealDate, 0 PLYTD ,0 MTMPandLInr,
          Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) ||'/'|| 
          Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) as Currency,
          copt_base_currency as CurrencyCode,copt_Other_currency As Othercode,
          copt_user_id As UserID, copt_user_id as UserIDDesc
--          copt_init_code As Initcode,
--          pkgReturncursor.Fncgetdescription(copt_init_code,2) as InitiatorDesc
          From Trtran071,Trtran072
          Where Copt_Deal_Number = Cosu_Deal_Number
          and  Copt_Process_Complete =12400002
          and Copt_Record_Status Not In (10200005,10200006)
          and Cosu_Record_Status Not In (10200005,10200006)
          and Cosu_Buy_Sell=25300002
          and Copt_Company_Code =Decode(Numcode,30199999,Copt_Company_Code,Numcode)
          and copt_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =vartemp)
         -- and Copt_Hedge_Trade=26000002
          and copt_user_id =(case when (vartemp1 is  null) then copt_user_id else vartemp1 end) ) M
      --where InitiatorDesc like decode(numCode1, GConst.SUBDEALER, varValue, '%')          
      group by CurrencyCode,OtherCode,Currency;    
              
      Goto process_end;  
   
   end if;

--  If numInfoType =Gconst.Reftradedealuserwise Then
--    vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
--    -- dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
--    numcode := gconst.fncxmlextract(xmldoc,'CompanyDealer',numcode);
--    varoperation := 'Extracting particular user details';
--    select pick_short_description, user_group_code, pick_key_value
--      into varValue, numCode1, numCode2
--      from trmaster001, trsystem022
--      where pick_key_group = 338
--      and user_user_id = varTemp
--      and instr(user_user_id,pick_short_description) > 0;
--
----to Calculate the Year begin date
--    if  to_char(datWorkDate,'mm') <= 3 then
--        datTemp:=to_date('01-APR-' || to_char(to_number(to_char(datWorkDate,'YYYY'))-1));
--    else
--        datTemp :=to_date('01-APR-' || to_char(datWorkDate,'YYYY'));
--    end if;
--
--    Open GenCursor for
--     Select Currency, InitiatorDesc, sum(decode(m.buysell,'Sell',-1,1) * m.Balancefcy) "BaseAmount",
--        Round(Sum(M.Balancefcy * M.Exrate) / Sum(M.Balancefcy),6) HoldingRate,
--        nvl(sum(case when (m.dealdate < datWorkDate)
--            then decode(m.buysell,'Sell',-1,1) * Balancefcy else 0 end),0) OpenPosition,
--        nvl( Sum(Case When (Dealdate = datWorkDate And Buysell= 'Buy')
--            then Balancefcy Else 0 End),0) Totalbuy,
--        nvl( sum(case when (dealdate = datWorkDate and buysell= 'Sell')
--            then Balancefcy else 0 end),0) TotalSell,
--       nvl( sum((select sum(nvl(sub.PandLFcy,0))
--              from vewforwardfuture sub
--              where M.Currencycode= Sub.Currencycode
--              and m.Othercode= sub.Othercode
--              and m.InitCode = sub.InitCode
--              and Canceldate Between datTemp And datWorkDate)),0) Plytd,
--       nvl( Sum(Mtmpandlinr),0) Mtmpandlinr,CurrencyCode BaseCurrencyCode,Othercode OtherCurrencyCode, InitCode
--        from
--          (select 1 Order1, BuySell, exrate, BalanceFcy, DealDate, 0 PLYTD, MTMPandLInr, Currency,
--            CurrencyCode, OtherCode, InitCode,pkgReturnCursor.fncGetDescription(InitCode, 2) InitiatorDesc
--            from vewForwardFuture
--            where status = 12400002
--            and CompanyCode = decode(numCode, 30199999, CompanyCode, numCode)
--            and CompanyCode in( select usco_company_code from trsystem022a
--                                        where usco_user_id =vartemp)
--            and HedgeCode = 26000002
--            and BalanceFcy > 0
--          union all
--          select 1 Order1,
--            case
--              when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Buy'
--              when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Sell'
--            End BuySell,
--            cosu_strike_rate ExRate,	Pkgforexprocess.Fncgetoutstanding(Copt_Deal_Number,
--              Copt_Serial_Number,15,1,datWorkDate) As Balancefcy,
--            copt_execute_date as DealDate, 0 PLYTD ,0 MTMPandLInr,
--            Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) ||'/'||
--            Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) as Currency,
--            copt_base_currency as CurrencyCode,copt_Other_currency As Othercode,
--            copt_init_code As Initcode,
--            pkgReturncursor.Fncgetdescription(copt_init_code,2) as InitiatorDesc
--            From Trtran071,Trtran072
--            Where Copt_Deal_Number=Cosu_Deal_Number
--            and  Copt_Process_Complete =12400002
--            and Copt_Record_Status Not In (10200005,10200006)
--            and Cosu_Record_Status Not In (10200005,10200006)
--            and Cosu_Buy_Sell=25300002
--            and Copt_Company_Code =Decode(Numcode,30199999,Copt_Company_Code,Numcode)
--            and copt_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =vartemp)
--            and Copt_Hedge_Trade=26000002) M
--         where InitiatorDesc like decode(numCode1, GConst.SUBDEALER, varValue, '%')
--         group by CurrencyCode,OtherCode,Currency,InitiatorDesc,initcode;
--      Goto Process_End;
--
--   End If;
---taken from Badresh as per manjureddy.

If numInfoType =Gconst.Reftradedealuserwise Then
    vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
    -- dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/Date', dattemp);
    numcode := gconst.fncxmlextract(xmldoc,'CompanyDealer',numcode);
    varoperation := 'Extracting particular user details';
--    select pick_short_description, user_group_code, pick_key_value
--      into varValue, numCode1, numCode2
--      from trmaster001, trsystem022
--      where pick_key_group = 338
--      and user_user_id = varTemp
--      and instr(user_user_id,pick_short_description) > 0;
        
     select (case when user_group_code in(14200001,14200003,14200006) then null
            else vartemp end)
       into vartemp1
       from trsystem022
       where user_user_id =vartemp
       and user_record_status not in(10200005,10200006);
    delete from temp;
    insert into temp values (vartemp,vartemp1); commit;
    commit;
--to Calculate the Year begin date
    if  to_char(datWorkDate,'mm') <= 3 then 
        datTemp:=to_date('01-APR-' || to_char(to_number(to_char(datWorkDate,'YYYY'))-1));
    else 
        datTemp :=to_date('01-APR-' || to_char(datWorkDate,'YYYY'));
    end if;    
          
    Open GenCursor for
     Select Currency, UserIDDesc, sum(decode(m.buysell,'Sell',-1,1) * m.Balancefcy) "BaseAmount",
        Round(Sum(M.Balancefcy * M.Exrate) / Sum(M.Balancefcy),6) HoldingRate, 
        nvl(sum(case when (m.dealdate < datWorkDate) 
            then decode(m.buysell,'Sell',-1,1) * Balancefcy else 0 end),0) OpenPosition,
        nvl( Sum(Case When (Dealdate = datWorkDate And Buysell= 'Buy') 
            then Balancefcy Else 0 End),0) Totalbuy,
        nvl( sum(case when (dealdate = datWorkDate and buysell= 'Sell') 
            then Balancefcy else 0 end),0) TotalSell,
       nvl( sum((select sum(nvl(sub.PandLFcy,0)) 
              from vewforwardfuture sub
              where M.Currencycode= Sub.Currencycode
              and m.Othercode= sub.Othercode
              and m.UserID = sub.UserID
              and Canceldate Between datTemp And datWorkDate)),0) Plytd,
       nvl( Sum(Mtmpandlinr),0) Mtmpandlinr,CurrencyCode BaseCurrencyCode,Othercode OtherCurrencyCode, UserID
        from
          (select 1 Order1, BuySell, exrate, BalanceFcy, DealDate, 0 PLYTD, MTMPandLInr, Currency,
            CurrencyCode, OtherCode, userid UserID,
            userid UserIDDesc
            from vewForwardFuture
            where status = 12400002
            and CompanyCode = decode(numCode, 30199999, CompanyCode, numCode)
            and CompanyCode in( select usco_company_code from trsystem022a
                                        where usco_user_id =vartemp)
            and userid = (case when vartemp1 is null then userid else vartemp1 end)
           -- and HedgeCode = 26000002
            and BalanceFcy > 0
          union all
          select 1 Order1, 
            case
              when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Buy'
              when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Sell'
            End BuySell, 
            cosu_strike_rate ExRate,	Pkgforexprocess.Fncgetoutstanding(Copt_Deal_Number,
              Copt_Serial_Number,15,1,datWorkDate) As Balancefcy,
            copt_execute_date as DealDate, 0 PLYTD ,0 MTMPandLInr,
            Pkgreturncursor.Fncgetdescription(Copt_Base_Currency,2) ||'/'|| 
            Pkgreturncursor.Fncgetdescription(Copt_Other_Currency,2) as Currency,
            copt_base_currency as CurrencyCode,copt_Other_currency As Othercode,
            copt_user_id As UserID,
           --     pkgReturncursor.Fncgetdescription(copt_init_code,2) as InitiatorDesc
           copt_user_id as UserIDDesc
            From Trtran071,Trtran072
            Where Copt_Deal_Number=Cosu_Deal_Number
            and  Copt_Process_Complete =12400002
            and Copt_Record_Status Not In (10200005,10200006)
            and Cosu_Record_Status Not In (10200005,10200006)
            and Cosu_Buy_Sell=25300002
            and Copt_Company_Code =Decode(Numcode,30199999,Copt_Company_Code,Numcode)
            and copt_Company_Code in (select usco_company_code from trsystem022a
                                        where usco_user_id =vartemp)
            and copt_user_id = (case when vartemp1 is null then copt_user_id else vartemp1 end)                                      
            --and Copt_Hedge_Trade=26000002
            ) M
         --where InitiatorDesc like decode(numCode1, GConst.SUBDEALER, varValue, '%')             
         group by CurrencyCode,OtherCode,Currency,UserIDDesc,UserID;
      Goto Process_End;   

   End If;  



--------aakash 19-mar-13 10:50 am--

--if numInfoType = GConst.REFPARTICULARDEAL then
--    varOperation := 'Extracting Cursor for Holding Rate';
--
--     vartemp := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
--     numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
--      Open GenCursor for
--          select deal_deal_number "DealNumber",deal_time_stamp "DealTimeStamp",fncgetdescription(deal_hedge_trade,1) "HedgeTrade",
--                 fncgetdescription(deal_buy_sell,1) "BuySell",fncgetdescription(deal_swap_outright,1) "SwapOutright",
--                 fncgetdescription(deal_deal_type,1) "DealType",fncgetdescription(deal_counter_party,1) "CounterParty",
--                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",deal_exchange_rate "ExchangeRate",
--                 deal_local_rate "LocalRate", deal_base_amount "BaseAmount",deal_other_amount "OtherAmount",deal_amount_local "AmountLocal",
--                 deal_maturity_date "MaturityDate",(select user_user_name from usermaster where user_user_id=deal_user_id) "UserName",
--                 deal_other_currency "OtherCurrencyCode", deal_buy_sell "BuySellCode",deal_base_currency "BaseCurrencyCode", deal_serial_number "SerialNumber",
--                 deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",deal_dealer_remarks "Remarks",
--                 deal_record_status "RecordStatus",
--                Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BackupDeal",
--                Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "InitCode",
--                Deal_Bank_Reference "BankReference"
--          from trtran001
--          where deal_deal_number=vartemp
--            and deal_serial_number=numcode;
----          deal_record_status in (gconst.STATUSPOSTCANCEL);
--
--      Goto Process_End;
--  end if;
-----------
-----Copy From Almus-----
if numInfoType = GConst.REFPARTICULARDEAL then
    varOperation := 'Extracting Cursor for Holding Rate';


     vartemp := Gconst.fncXMLExtract(xmldoc,'Param/DealNumber',vartemp);
     numcode := Gconst.fncXMLExtract(xmldoc,'Param/DealSerial',numcode);

      Open GenCursor for
          select rownum "Rownum",
          fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
                 Deal_execute_date "ExecuteDate",                Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
                Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
                fncgetdescription(deal_counter_party,1) "CounterParty",
                 fncgetdescription(deal_buy_sell,1) "BuySell",
                 deal_base_amount "BaseAmount",
                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
                  deal_spot_rate "SpotRate",
                  deal_forward_rate "ForwardRate",
                  Deal_margin_rate "MarginRate",
                  deal_exchange_rate "AllinRate",
                  Deal_maturity_from "ExpiryDate",
                  deal_maturity_date "DeliveryDate",
                  --added by gouri   to show OutStandingAmount in grid   
                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
                 deal_deal_number "DealNumber",deal_time_stamp "DealTimeStamp",fncgetdescription(deal_hedge_trade,1) "HedgeTrade",
                 fncgetdescription(deal_swap_outright,1) "SwapOutright", 
                 fncgetdescription(deal_deal_type,1) "DealType",                 
                 deal_local_rate "LocalRate",                  
                 deal_other_amount "OtherAmount",deal_amount_local "AmountLocal",
                 Pkgreturncursor.Fncgetdescription(DEAL_COMPANY_CODE,2) "Company",
                 Pkgreturncursor.Fncgetdescription(DEAL_LOCATION_CODE,2) "Location",
                 deal_maturity_date "MaturityDate",(select user_user_name from usermaster where user_user_id=deal_user_id) "UserName",
                 deal_other_currency "OtherCurrencyCode", deal_buy_sell "BuySellCode",deal_base_currency "BaseCurrencyCode", deal_serial_number "SerialNumber",
                 --nvl(deal_holding_rate,0) "HoldingRate",deal_holding_rate1 "HoldingRate1",
                 deal_dealer_remarks "Remarks", 
                 deal_record_status "RecordStatus",
                DEAL_LOCATION_CODE "LocationCode",
                Deal_Bank_Reference "BankReference",
                deal_counter_party "CounterpartyCode"
          from trtran001
          where deal_deal_number=vartemp
            and deal_serial_number=numcode;
--          deal_record_status in (gconst.STATUSPOSTCANCEL);

      Goto Process_End;
  end if;
  -----
--  if numInfoType = GConst.REFLOANREPAYMENT then
--    varOperation := 'Extracting Foreign Currency Loan Details';
--    numcode := gconst.fncxmlextract(xmldoc,'CompanyCode', numcode);
--
--    Open GenCursor for
--     select fcln_loan_number LoanNumber,
--            pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "Company",
--            pkgreturncursor.fncgetdescription(fcln_loan_type,1) as "InstrumentType",
--            pkgreturncursor.fncgetdescription(fcln_local_bank,1) as "LocalBank",
--            fcln_bank_reference BankReference, fcln_sanction_date SanctionDate,
--            fcln_sanctioned_fcy LoanAmount,
--            NVL((select sum(brel_reversal_fcy)
--                   from trtran003
--                  where brel_user_reference = fcln_loan_number
--                    and brel_record_status in (10200001, 10200003, 10200004)),0) Adjusted,
--            fcln_conversion_rate LoanRate,
--            fcln_maturity_to Maturity, 0 RecordStatus
--       from trtran005
--       Where Fcln_Company_Code = Numcode
--       and FCLN_RECORD_STATUS in (10200001,10200003,10200004)
--        and fcln_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid);
--    Goto Process_End;
--  End if;
---Updated From Almus
  if numInfoType = GConst.REFLOANREPAYMENT then
    varOperation := 'Extracting Foreign Currency Loan Details';
    numcode := gconst.fncxmlextract(xmldoc,'CompanyCode', numcode);

    Open GenCursor for
     select fcln_loan_number LoanNumber,
            pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "Company",
            pkgreturncursor.fncgetdescription(fcln_loan_type,1) as "InstrumentType",
            pkgreturncursor.fncgetdescription(fcln_local_bank,1) as "LocalBank",
            fcln_bank_reference BankReference, fcln_sanction_date SanctionDate,
            fcln_sanctioned_fcy LoanAmount, 
            NVL((select sum(brel_reversal_fcy)
                   from trtran003
                  where brel_user_reference = fcln_loan_number
                    and brel_record_status in (10200001, 10200003, 10200004)),0) Adjusted,
            fcln_conversion_rate LoanRate,
            fcln_maturity_to Maturity, 0 RecordStatus
       from trtran005
       Where Fcln_Company_Code = Numcode
       and FCLN_RECORD_STATUS in (10200001,10200003,10200004)
        and fcln_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid);
    Goto Process_End;
  End if; 
  
  if numinfotype = gconst.REFHOLDINGRATEUSER then
    varOperation := 'Extracting holiding Rates For the Particular User';
--    numcode := gconst.fncxmlextract(xmldoc,'CurrencyCode', numcode);
--    vartemp :=gconst.fncxmlextract(xmldoc,'DealerID',varTemp);
--      if vartemp='ALL' then
--          numrate := pkgForexProcess.fncHoldingRate(numcode,datworkdate,numerror);
--      else
--          numrate := pkgForexProcess.fncHoldingRate(numcode,datworkdate,numerror,vartemp);
--      end if;
--      Open GenCursor for
--         select numrate as HoldingRate,pkgforexprocess.fncgetrate(numcode,30400003,datWorkDate,25300001) TodayRate  from dual;
--     Goto Process_End;
    Open GenCursor for
         SELECT dpos_currency_code CurrencyCode ,dpos_holding_rate HoldingRate,
                dpos_user_id DealerID, pkgforexprocess.fncgetrate(dpos_currency_code,   30400003,  datWorkDate,   25300001) todayrate
         FROM trsystem032
         where dpos_position_date=datWorkDate
         and dpos_position_type = GConst.TRADEDEAL;
    Goto Process_End;
  end if;



if numInfoType = GConst.REFTRADELOANS then
    varOperation := 'Cursor for Merchant transaction for Loans';
    numcode := gconst.fncxmlextract(xmldoc,'ROW/CompanyCode', numcode);
    numCode1 := gconst.fncxmlextract(xmldoc,'ReasonCode', numcode);

    if numCode1 = GConst.REASONEXPORT then
      Open GenCursor for
        select pkgReturnCursor.fncGetDescription(trad_company_code, 1) "CompanyName",
          trad_trade_reference "TradeReference", trad_user_reference "UserReference",
          pkgReturnCursor.fncGetDescription(trad_trade_currency, 1) "TradeCurrency",
         pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "MerchantFcy",
          trad_trade_rate "MerchantRate",
         (select nvl(sum(LOLN_ADJUSTED_FCY),0)
          from   trtran010
          where LOLN_TRADE_REFERENCE =   a.trad_trade_reference
          and LOLN_RECORD_STATUS not in(10200005,10200006)) "ReversedAmount",
          0 as "ReverseNow",
          pkgreturnreport.fncconvrs(trad_trade_inr) "MerchantInr",
          trad_maturity_date "MaturityDate",
          0 "RecordStatus"
          from TradeRegister a
          where trad_company_code = numCode
           and trad_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
          and trad_import_export in(25900001,25900017,25900051,25900077)
          and trad_process_complete =12400002;
    elsif numCode1 = GConst.REASONIMPORT then
      Open GenCursor for
        select pkgReturnCursor.fncGetDescription(trad_company_code, 1) "CompanyName",
          trad_trade_reference "TradeReference", trad_user_reference "UserReference",
          pkgReturnCursor.fncGetDescription(trad_trade_currency, 1) "TradeCurrency",
         pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "MerchantFcy",
          TRAD_TRADE_RATE "MerchantRate",
        (select nvl(sum(LOLN_ADJUSTED_FCY),0)
          from   trtran010
          where LOLN_TRADE_REFERENCE = trad_trade_reference
          and LOLN_RECORD_STATUS not in(10200005,10200006)) "ReversedAmount",
          0 as "ReverseNow",
          pkgreturnreport.fncconvrs(trad_trade_inr) "MerchantInr",
          trad_maturity_date "MaturityDate",
          0 RecordStatus
          from TradeRegister
          where trad_company_code = numCode
           and trad_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
          and trad_import_export  between 25900051 and 25900053;
--          and trad_trade_reference not in (select trln_trade_reference
--                                             from trtran007
--                                             where trln_record_status  in (10200001, 10200002, 10200003, 10200004));
    End if;

    Goto Process_End;
  End if;
  if numInfoType = GConst.REFLOANSPECIFIC then
    varOperation := 'Extracting Trade Details for Loan';
    varTemp := GConst.fncXMLExtract(xmldoc,'//FOREIGNCURRENCYLOAN/ROW/LoanNumber',
                varTemp, GConst.TYPENODEPATH);
   Open GenCursor for
       select pkgReturnCursor.fncGetDescription(trad_company_code, 1) "CompanyName",
        trad_trade_reference "TradeReference", trad_user_reference "UserReference",
         pkgReturnCursor.fncGetDescription(trad_trade_currency, 1) "TradeCurrency",
        trad_trade_fcy "MerchantFcy", trad_trade_rate "MerchantRate",
        trad_trade_inr "MerchantInr", trad_maturity_date "MaturityDate",
        0 "RecordStatus"
        from TradeRegister, trtran010
        where trad_company_code = loln_company_code
        and trad_trade_reference = loln_trade_reference
        and trad_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
        and loln_loan_number = varTemp;
       Goto Process_End;
  end if;

      IF numinfotype = gconst.REFUSERUPDATE THEN
--        varoperation := 'extracting login information for: ' || varuserid;
        vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/UserID', vartemp);
        vartemp2  := gconst.fncxmlextract(xmldoc,'KeyValues/PasswordKey', vartemp2);
        varTemp3  := gconst.fncxmlextract(xmldoc,'KeyValues/PasswordCode', varTemp3);
        varTemp4  := gconst.fncxmlextract(xmldoc,'KeyValues/PasswordView', varTemp4);
        numcode := fncSendPassword(vartemp,vartemp2,varTemp3,varTemp4);
        OPEN gencursor FOR
          SELECT USER_EMAIL_ID "UserMailID"
          FROM trsystem022
          WHERE USER_USER_ID          = vartemp
          AND User_Record_Status NOT IN(10200005,10200006);
        GOTO process_end;
    END IF;
    
    IF numinfotype = gconst.REFEXPDETAILS THEN
        varoperation := 'Extracting Linking Details';
        vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1); 
        IF vartemp1 = 'HEDGEDEALCANCELLATION' THEN
          vartemp := gconst.fncxmlextract(xmldoc,'HEDGEDEALCANCELLATION/ROW/DealNumber', vartemp);
          numcode  := gconst.fncxmlextract(xmldoc,'HEDGEDEALCANCELLATION/ROW/CompanyCode', numcode);
        ELSE
          vartemp := gconst.fncxmlextract(xmldoc,'CURRENCYFUTUREDEALCANCEL/ROW/DealNumber', vartemp);
          numcode  := gconst.fncxmlextract(xmldoc,'CURRENCYFUTUREDEALCANCEL/ROW/CompanyCode', numcode);
        END IF;
        OPEN gencursor FOR
          SELECT pkgReturnCursor.fncGetDescription(hedg_company_code,2) AS "Company",
            hedg_trade_reference                                        AS "TradeReference",
            hedg_deal_number                                            AS "LinkDealNumber",
            hedg_deal_serial                                            AS "DealSerial",
            pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) As "OutStandingAmount" ,              
            0.00                                                        AS "HedgedAmount",  
            hedg_company_code                                           AS "CompanyCode",
            hedg_record_status                                          AS "RecordStatus",
            datworkdate                                                 AS "LinkDate",
            trad_trade_fcy                                              AS "BillAmount",
            trad_trade_rate                                             AS "BookingRate",
            trad_reference_date                                         AS "ReferenceDate",
            hedg_hedged_fcy                                             AS "CoveredAmount"
          FROM trtran004,trtran002
          WHERE hedg_record_status BETWEEN 10200001 AND 10200004
          AND hedg_company_code    = numcode
          AND hedg_deal_number     = vartemp
          AND trad_trade_reference = hedg_trade_reference;
        GOTO process_end;
    END IF;
    
  if numinfoType =gconst.REFMATURITYDATECALC then

    varOperation := 'Extracting Maturity Dates For the Execution Date';

    ExecutionDate := gconst.fncxmlextract(xmldoc,'ExecutionDate', executiondate);
    BaseCurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency', BaseCurrency);
    OtherCurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency', OtherCurrency);
    DelivaryType :=gconst.fncxmlextract(xmldoc,'DelivaryType', delivaryType);
   -- DelivaryOption :=gconst.fncxmlextract(xmldoc,'DelivaryOption', DelivaryOption);
   -- DelivaryDays :=gconst.fncxmlextract(xmldoc,'DelivaryDays', DelivaryDays);
    --DelivaryDate :=gconst.fncxmlextract(xmldoc,'DelivaryDate', DelivaryDate);

    dayopendayend.prcHolidaysCheck (ExecutionDate,
                                    BaseCurrency,
                                    OtherCurrency,
                                    DelivaryType,
                                  null,--  DelivaryOption,
                                   null, --DelivaryDays,
                                    null,--DelivaryDate,
                                    dattemp,
                                    dattemp1);

    Open GenCursor for
        select dattemp maturityFrom,dattemp1 maturityDate from dual;
    Goto Process_End;
  end if;

  if numinfotype =gconst.REFRISKUSER then
    varOperation := 'Extracting holiding Rates For the Particular User';
    vartemp :=gconst.fncxmlextract(xmldoc,'DealID',varTemp);
    numcode :=gconst.fncxmlextract(xmldoc,'TRNTYPE',numcode);
    if vartemp='ALL' then
       vartemp := '%';
    end if;

    --numerror :=pkgforexprocess.fncRiskGenerate(datworkdate,numcode);
   -- 21000005
    Open GenCursor for
      select (select user_user_name from usermaster where user_user_id=crsk_user_id) "UserName" ,pkgreturncursor.fncgetdescription(crsk_currency_code,1) "Currency", '0/S' "PositionType",crsk_position_fcy "PositionFcy" ,crsk_position_usd "PositionUSD",crsk_allowed_usd "AllowedUSD",
      (crsk_allowed_usd-abs(crsk_position_USD)) "BalanceUSD"  from trsystem996 where
      crsk_risk_type >1 and nvl(crsk_user_id,'0') !='0' and crsk_user_id like vartemp;


     Goto Process_End;
  end if;
  if numinfotype = gconst.REFDEALRISKCALC then
    varOperation := 'Calculating Risk for a deals';
    numcode := gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode);
    varuserid := gconst.fncxmlextract(xmldoc,'UserID',varuserid);
    vartemp1 := gconst.fncxmlextract(xmldoc,'DealNumber',vartemp1);
    varvalue:='';
    for curfields in (SELECT * FROM (SELECT crsk_risk_type risktype,
                                  ((crsk_allowed_usd) -ABS(crsk_position_usd)) riskusd,((crsk_allowed_inr) -ABS(crsk_position_inr)) riskinr
                      FROM trsystem996
                      WHERE crsk_risk_type > 1
                      AND nvl(crsk_user_id,    '0') = varuserid
                      AND crsk_currency_code = numcode)
                      WHERE(riskusd < 0 OR riskinr < 0))
    loop

                varvalue:=varvalue ||','||  curfields.risktype;
    end loop;
    if varvalue !='' then
        insert into trtran011 (rdel_company_code,rdel_risk_reference,rdel_deal_number,rdel_risk_type)
                    values (numcompanycode,22,vartemp1,varvalue);
        goto dummy_cursor;
    end if;
  end if;
  --ramya updates to get the bank account number 15-may-08
    if  numinfotype = gconst.REFBANKACCOUNT   then
       varOperation := 'Extracting Bank Account Number';
        numCode := GConst.fncXMLExtract(xmlDoc, 'LocalBank', numCode);

        Open GenCursor for
          select lbnk_account_number as AccountNumber
          from trmaster306
          where lbnk_pick_code = numCode
                and lbnk_record_status not in(GConst.STATUSINACTIVE,GConst.STATUSDELETED);
        Goto Process_End;
    end if;

--    --manjunath sir changed on 19/06/2014
--if numinfotype =gconst.REFBANKLIST then 
--dattemp   := gconst.fncxmlextract(xmldoc,'KeyValues/EffectiveDate',dattemp);
--numcode :=gconst.fncxmlextract(xmldoc,'KeyValues/CompanyCode',numcode);
--
--  Open GenCursor for  
--     select Bank.BankName,Bank.BankCode,Bank.AccountNumber,
--            nvl(Balance.CrDr,14600001) CrDR,
--           decode(Balance.CrDr,14600002, -1* Balance.BankBalance,Balance.BankBalance) BankBalance,
--            nvl(balance.RecordStatus,10200001)  as RecordStatus,
--            nvl(balance.SerialNumber,0) as SerialNumber
--     from      (SELECT  pkgreturncursor.fncgetdescription(LBNK_PICK_CODE,2) as BankName,
--                 LBNK_PICK_CODE  as BankCode,
--                LBNK_ACCOUNT_NUMBER as AccountNumber 
--                from trmaster306
--                WHERE lbnk_company_code=decode(numcode,30199999,lbnk_company_code,numcode)
--                AND LBNK_ACCOUNT_NUMBER is not null
--                union all
--                SELECT  'Cash' as BankName,
--                 pick_key_value  as BankCode,
--                '0' as AccountNumber
--                from trmaster001
--                where pick_key_value=30699999  ) Bank
--                left outer join
--                 (select lbbl_bank_code BankCode,lbbl_account_number AccountNumber,
--                        LBBL_CRDR_ACC AS CrDr,
--                        LBBL_BALANCE as BankBalance, lbbl_record_status  as RecordStatus,
--                        lbbl_serial_number SerialNumber
--                   FROM TRMASTER306A
--                  WHERE lbbl_company_code=decode(numcode,30199999,lbbl_company_code,numcode)
--                  AND  LBBL_EFFECTIVE_DATE=dattemp
--                  and lbbl_record_Status not in (10200005,10200006)) Balance
--       on Bank.BankCode= Balance.BankCode
--       and Bank.AccountNumber= Balance.AccountNumber
--       order by 2; 
----     select Bank.BankName,Bank.BankCode,Bank.AccountNumber,
----            nvl(Balance.CrDr,14600001) CrDR,Balance.BankBalance,
----            nvl(balance.RecordStatus,10200001)  as RecordStatus    
----      from (SELECT  pkgreturncursor.fncgetdescription(LBNK_PICK_CODE,2) as BankName,
----       LBNK_PICK_CODE  as BankCode,
----      LBNK_ACCOUNT_NUMBER as AccountNumber   
----      from trmaster306
----      where LBNK_ACCOUNT_NUMBER is not null ) Bank
----      
----      left outer join
----       (select lbbl_bank_code BankCode,lbbl_account_number AccountNumber,
----              LBBL_CRDR_ACC AS CrDr,
----              LBBL_BALANCE as BankBalance, lbbl_record_status  as RecordStatus  
----         from TRMASTER306A
----        where  LBBL_EFFECTIVE_DATE=dattemp) Balance
----       on Bank.BankCode= Balance.BankCode
----       and Bank.AccountNumber= Balance.AccountNumber;    
--     
--  Goto Process_End;   
--end if ; 

--if numInfoType = GConst.REFREVERSEDEAL then
--  --insert into temp values(vartemp,'REFREVERSEDEAL');
--      varOperation := 'Extracting Deal Information for reversal';
--      varDummy := '//' || varEntity || '/ROW/';
--      varTemp := GConst.fncXMLExtract(xmldoc,varDummy || 'TradeReference',
--                varTemp, GConst.TYPENODEPATH);
--      numTemp := GConst.fncXMLExtract(xmldoc, varDummy || 'ReverseSerial',
--                numTemp, GConst.TYPENODEPATH);
--      numCode1 := GConst.fncXMLExtract(xmldoc,'CategoryType', numCode1);
--      varValue := varTemp;
--
--      delete from temp;
--      insert into temp values(vartemp,'REFREVERSEDEAL');
--<<GettingRef>>
--        begin
--             select  nvl(trad_reverse_reference, '0')
--               into vartemp
--               from trtran002
--              where trad_trade_reference = varTemp;
--            if (varTemp !='0') then
--              insert into temp values(vartemp,'REFREVERSEDEAL');
--              goto Gettingref;
--            end if;
--         exception
--           when no_data_found then
--             vartemp:=vartemp;
--         end;
--commit;
--
------- Added by TMM on 26/01/14 to show deals where the trade is not pre-linked
---- a dummy condition, since the actual PO is not linked to the deal
--    varOperation := 'Checking whether the Trade is linked to a deal';
--    select count(*)
--      into numCode
--      from trtran004
--      where hedg_trade_reference = varValue
--      and hedg_record_status not in(10200005,10200006,10200012);
--
--    if numCode = 0 then
--          Open GenCursor for
--            select pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
--            NVL((select sum(hedg_hedged_fcy)
--                from trtran004
--                where hedg_deal_number = deal_deal_number
--                and hedg_record_status between 10200001 and 10200004),0) "CoveredAmount",
--              deal_dealer_remarks "TradeReference",
----            NVL((select trad_contract_no
----                from trtran004, trtran002
----                where hedg_trade_reference = trad_trade_reference
----                and hedg_deal_number = deal_deal_number
----                and hedg_record_status between 10200001 and 10200004),0) "ContractNumber",
--            deal_Exchange_rate "BaseRate",deal_base_amount "BaseAmount",deal_other_amount "INRAmount",
--            NVL((select sum(cdel_cancel_amount)
--                from trtran006 a
--                where a.cdel_deal_number = deal_deal_number
--                and a.cdel_deal_serial = deal_serial_number
--                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
--                0.00 "ReverseNow",deal_maturity_date "MaturityDate",
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
--                deal_spot_rate "SpotRate", deal_forward_rate "Premium",
--                deal_margin_rate "MarginRate", 0 "EDBenefit", deal_exchange_rate "FinalRate",
--                deal_deal_number "DealNumber",deal_other_currency OtherCurrencycode, 0 "RecordStatus",DEAL_USER_REFERENCE "User Reference"
--                from trtran001
--                where  deal_Company_Code in
--                (select usco_company_code from trsystem022a
--                  where usco_user_id =varUserid)
--                and deal_process_complete = Gconst.OptionNo
--                and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_process_complete = 12400002
--                and exists
--                (select 'x'
--                  from trtran002
--                  where trad_trade_reference = varValue
--                  and trad_product_category =
--                  decode(numCode1, 33800058, trad_product_category, deal_backup_deal)
--                  and trad_local_bank =
--                  decode(trad_product_category,33300001, deal_counter_party,trad_local_bank));
--
----                select '' "TradeReference", deal_deal_number "DealNumber",
----                  deal_exchange_rate "BaseRate", deal_base_amount "HedgedBase",
----                  NVL((select sum(cdel_cancel_amount)
----                  from trtran006 a
----                  where a.cdel_deal_number = deal_deal_number
----                  and a.cdel_deal_serial = deal_serial_number
----                  and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
----                  0.00 "ReverseAmount", deal_maturity_date "MaturityDate",
----                  pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
----                  pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
----                  deal_other_amount "HedgedOther",
----                  fncRollOver(deal_deal_number, LOCALRATE) "OtherRate",
----                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 2) "BuySell",
----                  pkgReturnCursor.fncGetDescription(deal_init_code,2) "DealType",
----                  pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
----                  pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
----                  deal_other_currency OtherCurrencycode,deal_buy_sell buySellcode, 32200001 "HedgingWith",
----                  0 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
----                  round(deal_spot_rate,4) "SpotRate",
----                  round(deal_forward_rate,4) "Premium",
----                  round (deal_margin_rate,4) "MarginRate",
------                  0.00 "Premium",
----                  round (deal_exchange_rate,4) "FinalRate"
----                  from trtran001
----                  where  deal_Company_Code in
----                  (select usco_company_code from trsystem022a
----                    where usco_user_id =varUserid)
----                  and deal_process_complete = Gconst.OptionNo
----                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and deal_process_complete = 12400002
----                  and exists
----                  (select 'x'
----                    from trtran002
----                    where trad_trade_reference = varValue
----                    and trad_product_category = deal_backup_deal
------                    and trad_subproduct_code = deal_init_code
----                    and trad_local_bank =
----                    decode(trad_product_category,33300001, deal_counter_party,trad_local_bank));
---- For the main categories the corresponding deals are picked and for others all deals are displayed
---- For only Newsprint, the bank codes are checked otherwise all banks are displayed)
--      Goto Process_End;
--    End if;
-------------------------------------------------
--      --Reversed,where condition are modified by ramya on 06-jan-2010 to get the deals details in reversal screen
----         select hedg_hedging_with
----           into numcode
----           from trtran004
----          where hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL');
----
--        --if numcode=Gconst.ForwardContract then
--
----                select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
----                  fncRollOver(deal_deal_number, EXCHANGERATE  ) "BaseRate",
----                  hedg_hedged_fcy "HedgedBase",
------                  pkgforexprocess.fncGetOutstanding(deal_deal_number, 1,
------                         GConst.UTILHEDGEDEAL,GConst.AMOUNTFCY, datworkdate,hedg_trade_reference) "HedgedBase",
----                  NVL((select sum(cdel_cancel_amount)
----                  from trtran006 a
----                  where a.cdel_deal_number = deal_deal_number
----                 -- and a.cdel_deal_serial = deal_serial_number
----                 and a.cdel_reverse_serial = hedg_deal_serial
----                  and a.cdel_record_status in (10200001, 10200003,10200004)
----                   and a.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')),0.00) "Reversed",
------                  and not exists
------                  (select 'x'
------                     from trtran006 b
------                     where b.cdel_trade_reference = a.cdel_trade_reference
------                     and b.cdel_trade_serial = a.cdel_trade_serial
------                     and b.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL'))),0.00) "Reversed",
------                  NVL((select sum(cdel_cancel_amount)
------                         from trtran006
------                         where cdel_deal_number = deal_deal_number
------                         and cdel_trade_reference  in (select tt from temp where tt1 ='REFREVERSEDEAL')
------                         and cdel_record_status in  (10200001, 10200003,10200004)),0.00) ReverseAmount,
----
----                  0.00 ReverseAmount,
----                  pkgReturnCursor.fncGetDescription(deal_base_currency,1) "BaseCurrency",
----                  pkgReturnCursor.fncGetDescription(deal_other_currency,1) "OtherCurrency",
----                  hedg_other_fcy "HedgedOther",
----                  fncRollOver(deal_deal_number, LOCALRATE) "OtherRate",
----                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
----                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
----                  pkgReturnCursor.fncGetDescription(deal_counter_party,1) "CounterParty",
----                  pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
----                  deal_other_currency OtherCurrencycode,deal_buy_sell buySellcode,0 "RecordStatus"
----                  from trtran004, trtran001
----                  where deal_deal_number = hedg_deal_number
----                  --and deal_serial_number = hedg_deal_serial
----                  and deal_process_complete=Gconst.OptionNo
----                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')
----                  and deal_deal_number not in(select cdel_deal_number from trtran006
----                                              where cdel_deal_number = deal_deal_number
----                                                         and cdel_trade_reference ='REFREVERSEDEAL'
----                                                    and cdel_cancel_amount = hedg_hedged_fcy);
----
----        elsif  numcode=Gconst.OptionContract then
----           Open GenCursor for
----                select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
----                  copt_exchange_rate "BaseRate",
----                  hedg_hedged_fcy "HedgedBase",
------                  pkgforexprocess.fncGetOutstanding(deal_deal_number, 1,
------                         GConst.UTILHEDGEDEAL,GConst.AMOUNTFCY, datworkdate,hedg_trade_reference) "HedgedBase",
----                  NVL((select sum(corv_base_amount)
----                  from trtran073 a
----                  where a.corv_deal_number = copt_deal_number
----                 -- and a.cdel_deal_serial = deal_serial_number
----                    and a.corv_serial_number = hedg_deal_serial
----                    and a.corv_record_status in (10200001, 10200003,10200004)),0.00) "Reversed",
----
----                    --and a.corv_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')
------                  and not exists
------                  (select 'x'
------                     from trtran006 b
------                     where b.cdel_trade_reference = a.cdel_trade_reference
------                     and b.cdel_trade_serial = a.cdel_trade_serial
------                     and b.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL'))),0.00) "Reversed",
------                  NVL((select sum(cdel_cancel_amount)
------                         from trtran006
------                         where cdel_deal_number = deal_deal_number
------                         and cdel_trade_reference  in (select tt from temp where tt1 ='REFREVERSEDEAL')
------                         and cdel_record_status in  (10200001, 10200003,10200004)),0.00) ReverseAmount,
----
----                  0.00 ReverseAmount,
----                  pkgReturnCursor.fncGetDescription(copt_base_currency,1) "BaseCurrency",
----                  pkgReturnCursor.fncGetDescription(copt_other_currency,1) "OtherCurrency",
----                  hedg_other_fcy "HedgedOther",
----                  copt_local_rate "OtherRate",
----                  pkgReturnCursor.fncGetDescription(copt_buy_sell, 1) "BuySell",
----                  pkgReturnCursor.fncGetDescription(copt_deal_type,1) "DealType",
----                  pkgReturnCursor.fncGetDescription(copt_counter_party,1) "CounterParty",
----                  pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
----                  copt_other_currency OtherCurrencycode,copt_buy_sell buySellcode,0 "RecordStatus"
----                  from trtran004, trtran071
----                  where copt_deal_number = hedg_deal_number
----                  and copt_serial_number = hedg_deal_serial
----                  and copt_process_complete=Gconst.OptionNo
----                  and copt_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
----                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL');
------                  and copt_deal_number not in(select copt_deal_number from trtran073
------                                              where copt_deal_number = deal_deal_number
------                                                         --and cdel_trade_reference ='REFREVERSEDEAL'
------                                                    and cdel_cancel_amount = hedg_hedged_fcy);
----
--       --    Open GenCursor for
--           Open GenCursor for
--                    select pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
--                      pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
--                      hedg_hedged_fcy "CoveredAmount",
--                      hedg_trade_reference  "TradeReference",
--                      deal_Exchange_rate "BaseRate",
--                      deal_base_amount "BaseAmount",
--                      deal_other_amount "INRAmount",
--                      NVL((select sum(cdel_cancel_amount)
--                      from trtran006 a
--                      where a.cdel_deal_number = deal_deal_number
--                      and a.cdel_deal_serial = deal_serial_number
--                      and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
--                      0.00 "ReverseNow",
--                      deal_maturity_date "MaturityDate",
--                      pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--                      pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--                      pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
--                      deal_spot_rate "SpotRate",
--                      deal_forward_rate "Premium",
--                      deal_margin_rate "MarginRate",
--                      0 "EDBenefit",
--                      deal_exchange_rate "FinalRate",
--                      deal_deal_number "DealNumber",
--                      deal_other_currency OtherCurrencycode,
--                      0 "RecordStatus"
--                  from trtran004, trtran001
--                  where deal_deal_number = hedg_deal_number
--                  --and deal_serial_number = hedg_deal_serial
--                  and  deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--                  and deal_process_complete=Gconst.OptionNo
--                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')
--                  and deal_deal_number not in(select cdel_deal_number from trtran006
--                                              where cdel_deal_number = deal_deal_number
--                                                         and cdel_trade_reference ='REFREVERSEDEAL'
--                                                    and cdel_cancel_amount = hedg_hedged_fcy);
--
--      Goto Process_End;
--    End if;

    ---manjunath sir ends
---Udated from Almus

if numInfoType = GConst.REFREVERSEDEAL then
 -- insert into temp values(vartemp,'REFREVERSEDEAL');
      varOperation := 'Extracting Deal Information for reversal';
      varDummy := '//' || varEntity || '/ROW/';
      begin
        varTemp := GConst.fncXMLExtract(xmldoc,varDummy || 'TradeReference', 
                  varTemp, GConst.TYPENODEPATH);
        numTemp := GConst.fncXMLExtract(xmldoc, varDummy || 'ReverseSerial', 
                  numTemp, GConst.TYPENODEPATH);
      exception
        when others then
        varTemp:='';
        numTemp:=0;
      End;
      if varEntity='CCIRSSETTLEMENT' then 
      numcode := gconst.fncXMLExtract(xmldoc,'CommandSet/CompanyCode', numcode);  
      Numcode3 := Gconst.Fncxmlextract(Xmldoc,'CommandSet/CurrencyCode', Numcode3);
      numCode2 := GConst.fncXMLExtract(xmldoc,'CommandSet/ImportExport', numCode2);
      else
      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);  
      Numcode3 := Gconst.Fncxmlextract(Xmldoc,'CurrencyCode', Numcode3);
      numCode2 := GConst.fncXMLExtract(xmldoc,'ImportExport', numCode2);
      end if;
      if numCode2 > 25900049 then
        numCode2 := 25300001;
      else
        numCode2 := 25300002;
      end if;
      varValue := varTemp;          
                
        delete from temp;
        insert into temp values(vartemp,'REFREVERSEDEAL');

<<GettingRef>>
        begin
             select  nvl(trad_reverse_reference, '0')
             into vartemp
               from trtran002
              where trad_trade_reference = varTemp
              and trad_company_code = numcode;
            if (varTemp !='0') then
              insert into temp values(vartemp,'REFREVERSEDEAL');
              goto Gettingref;
            end if;
         exception
           when no_data_found then
             vartemp:=vartemp;
         end;    
commit;
      --Reversed,where condition are modified by ramya on 06-jan-2010 to get the deals details in reversal screen  
--         select hedg_hedging_with 
--           into numcode
--           from trtran004 
--          where hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL');
--          
        --if numcode=Gconst.ForwardContract then 

--                select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
--                  fncRollOver(deal_deal_number, EXCHANGERATE  ) "BaseRate",
--                  hedg_hedged_fcy "HedgedBase", 
----                  pkgforexprocess.fncGetOutstanding(deal_deal_number, 1,
----                         GConst.UTILHEDGEDEAL,GConst.AMOUNTFCY, datworkdate,hedg_trade_reference) "HedgedBase",
--                  NVL((select sum(cdel_cancel_amount)
--                  from trtran006 a
--                  where a.cdel_deal_number = deal_deal_number
--                 -- and a.cdel_deal_serial = deal_serial_number
--                 and a.cdel_reverse_serial = hedg_deal_serial
--                  and a.cdel_record_status in (10200001, 10200003,10200004)
--                   and a.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')),0.00) "Reversed",
----                  and not exists 
----                  (select 'x' 
----                     from trtran006 b
----                     where b.cdel_trade_reference = a.cdel_trade_reference
----                     and b.cdel_trade_serial = a.cdel_trade_serial
----                     and b.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL'))),0.00) "Reversed",
----                  NVL((select sum(cdel_cancel_amount)
----                         from trtran006
----                         where cdel_deal_number = deal_deal_number
----                         and cdel_trade_reference  in (select tt from temp where tt1 ='REFREVERSEDEAL')
----                         and cdel_record_status in  (10200001, 10200003,10200004)),0.00) ReverseAmount, 
--
--                  0.00 ReverseAmount, 
--                  pkgReturnCursor.fncGetDescription(deal_base_currency,1) "BaseCurrency",
--                  pkgReturnCursor.fncGetDescription(deal_other_currency,1) "OtherCurrency",
--                  hedg_other_fcy "HedgedOther", 
--                  fncRollOver(deal_deal_number, LOCALRATE) "OtherRate",
--                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
--                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
--                  pkgReturnCursor.fncGetDescription(deal_counter_party,1) "CounterParty",
--                  pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
--                  deal_other_currency OtherCurrencycode,deal_buy_sell buySellcode,0 "RecordStatus"
--                  from trtran004, trtran001
--                  where deal_deal_number = hedg_deal_number
--                  --and deal_serial_number = hedg_deal_serial
--                  and deal_process_complete=Gconst.OptionNo
--                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')
--                  and deal_deal_number not in(select cdel_deal_number from trtran006 
--                                              where cdel_deal_number = deal_deal_number
--                                                         and cdel_trade_reference ='REFREVERSEDEAL'
--                                                    and cdel_cancel_amount = hedg_hedged_fcy);
--
--        elsif  numcode=Gconst.OptionContract then 
--           Open GenCursor for
--                select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
--                  copt_exchange_rate "BaseRate",
--                  hedg_hedged_fcy "HedgedBase", 
----                  pkgforexprocess.fncGetOutstanding(deal_deal_number, 1,
----                         GConst.UTILHEDGEDEAL,GConst.AMOUNTFCY, datworkdate,hedg_trade_reference) "HedgedBase",
--                  NVL((select sum(corv_base_amount)
--                  from trtran073 a
--                  where a.corv_deal_number = copt_deal_number
--                 -- and a.cdel_deal_serial = deal_serial_number
--                    and a.corv_serial_number = hedg_deal_serial
--                    and a.corv_record_status in (10200001, 10200003,10200004)),0.00) "Reversed",
--                    
--                    --and a.corv_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')
----                  and not exists 
----                  (select 'x' 
----                     from trtran006 b
----                     where b.cdel_trade_reference = a.cdel_trade_reference
----                     and b.cdel_trade_serial = a.cdel_trade_serial
----                     and b.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL'))),0.00) "Reversed",
----                  NVL((select sum(cdel_cancel_amount)
----                         from trtran006
----                         where cdel_deal_number = deal_deal_number
----                         and cdel_trade_reference  in (select tt from temp where tt1 ='REFREVERSEDEAL')
----                         and cdel_record_status in  (10200001, 10200003,10200004)),0.00) ReverseAmount, 
--
--                  0.00 ReverseAmount, 
--                  pkgReturnCursor.fncGetDescription(copt_base_currency,1) "BaseCurrency",
--                  pkgReturnCursor.fncGetDescription(copt_other_currency,1) "OtherCurrency",
--                  hedg_other_fcy "HedgedOther", 
--                  copt_local_rate "OtherRate",
--                  pkgReturnCursor.fncGetDescription(copt_buy_sell, 1) "BuySell",
--                  pkgReturnCursor.fncGetDescription(copt_deal_type,1) "DealType",
--                  pkgReturnCursor.fncGetDescription(copt_counter_party,1) "CounterParty",
--                  pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
--                  copt_other_currency OtherCurrencycode,copt_buy_sell buySellcode,0 "RecordStatus"
--                  from trtran004, trtran071
--                  where copt_deal_number = hedg_deal_number
--                  and copt_serial_number = hedg_deal_serial
--                  and copt_process_complete=Gconst.OptionNo
--                  and copt_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
--                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL');
----                  and copt_deal_number not in(select copt_deal_number from trtran073 
----                                              where copt_deal_number = deal_deal_number
----                                                         --and cdel_trade_reference ='REFREVERSEDEAL'
----                                                    and cdel_cancel_amount = hedg_hedged_fcy);
--      

----- Added by TMM on 26/01/14 to show deals where the trade is not pre-linked
-- a dummy condition, since the actual PO is not linked to the deal
    varOperation := 'Checking whether the Trade is linked to a deal';
    select count(*)
      into numCode1
      from trtran004
      where hedg_trade_reference = varValue
      and hedg_record_status not in(10200005,10200006,10200012);

    if nvl(numCode1,0) = 0 then
          Open GenCursor for
               select deal_dealer_remarks "TradeReference", deal_deal_number "DealNumber",
                  deal_exchange_rate "BaseRate",
                  deal_base_amount "BaseAmount", 
            	NVL((select sum(cdel_cancel_amount)
                from trtran006 a
                where a.cdel_deal_number = deal_deal_number
                and a.cdel_deal_serial = deal_serial_number
                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
                  0.00 "ReverseNow", '' as "PutCall",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,1) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,1) "OtherCurrency",
                  deal_other_amount "HedgedOther", 
                  deal_local_rate "OtherRate",
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,1) "CounterParty",
                  pkgReturnCursor.fncGetDescription(deal_company_code, 1) "CompanyName",
                  deal_other_currency OtherCurrencycode,deal_buy_sell buySellcode,deal_deal_number as "HedgingWith",
                  1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                  round(deal_spot_rate,4) "SpotRate",
                  round(deal_forward_rate,4) "Premium",
                  round (deal_margin_rate,4) "MarginRate",
                  0 "EDBenefit",
                  round (deal_exchange_rate,4) "FinalRate"
       		from trtran001
                where  deal_Company_Code in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
                and deal_record_status in (10200001, 10200002, 10200003, 10200004)
                and deal_process_complete = 12400002
                and deal_company_code = decode(numcode,30199999,deal_company_code,numcode)
                and deal_base_currency = numcode3
                and deal_buy_sell = numcode2;
--                and exists
--                (select 'x'
--                  from trtran002
--                  where trad_trade_reference = varValue
--                  and trad_company_code = numcode);
                  --and trad_product_category =
                  --decode(numCode1, 33800058, trad_product_category, deal_backup_deal)
--                  and trad_local_bank =
--                  decode(trad_product_category,33300001, deal_counter_party,trad_local_bank));

      Goto Process_End;
   else
 



           Open GenCursor for
                select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
                  fncRollOver(deal_deal_number, EXCHANGERATE  ) "BaseRate",
                  hedg_hedged_fcy "BaseAmount", 
                  NVL((select sum(cdel_cancel_amount)
                  from trtran006 a
                  where a.cdel_deal_number = deal_deal_number
                 -- and a.cdel_deal_serial = deal_serial_number
                 and a.cdel_reverse_serial = hedg_deal_serial
                  and a.cdel_record_status in (10200001, 10200003,10200004)
                   and a.cdel_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')),0.00) "Reversed",
                  0.00 "ReverseNow", '' as "PutCall",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,1) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,1) "OtherCurrency",
                  hedg_other_fcy "HedgedOther", 
                  fncRollOver(deal_deal_number, LOCALRATE) "OtherRate",
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,1) "CounterParty",
                  pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
                  deal_other_currency OtherCurrencycode,deal_buy_sell buySellcode,hedg_hedging_with as "HedgingWith",
                  hedg_deal_serial as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                  round(deal_spot_rate,4) "SpotRate",
                  round(deal_forward_rate,4) "Premium",
                  round (deal_margin_rate,4) "MarginRate",
                  0 "EDBenefit",
                  round (deal_exchange_rate,4) "FinalRate"
                  from trtran004, trtran001
                  where deal_deal_number = hedg_deal_number
                  --and deal_serial_number = hedg_deal_serial
                  and  deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
                  and deal_process_complete=Gconst.OptionNo
                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL')
                  and deal_deal_number not in(select cdel_deal_number from trtran006 
                                              where cdel_deal_number = deal_deal_number
                                                         and cdel_trade_reference ='REFREVERSEDEAL'
                                                    and cdel_cancel_amount = hedg_hedged_fcy)
                  and deal_company_code = numcode 
                  and deal_base_currency = numcode3
                  and deal_buy_sell = numcode2
              union
                select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
                  cosu_strike_rate "BaseRate",
                  hedg_hedged_fcy "BaseAmount", 
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, 1,
--                         GConst.UTILHEDGEDEAL,GConst.AMOUNTFCY, datworkdate,hedg_trade_reference) "HedgedBase",
                  NVL((select sum(corv_base_amount)
                  from trtran073 a
                  where a.corv_deal_number = copt_deal_number
                 -- and a.cdel_deal_serial = deal_serial_number
                    and a.corv_subserial_number= cosu_subserial_number 
                    and a.corv_serial_number = hedg_deal_serial
                    and a.corv_record_status in (10200001, 10200003,10200004)),0.00) "Reversed",
                  0.00 "ReverseNow", pkgReturnCursor.fncGetDescription(cosu_option_type,1) as "PutCall",
                  pkgReturnCursor.fncGetDescription(copt_base_currency,1) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(copt_other_currency,1) "OtherCurrency",
                  hedg_other_fcy "HedgedOther", 
                  0 "OtherRate",
                  pkgReturnCursor.fncGetDescription(cosu_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(copt_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(copt_counter_party,1) "CounterParty",
                  pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
                  copt_other_currency OtherCurrencycode,cosu_buy_sell buySellcode,hedg_hedging_with as "HedgingWith",
                  cosu_serial_number as "SerialNumber",cosu_subserial_number as "SubserialNumber",0 "RecordStatus",
                  0 "SpotRate",
                  0 "Premium",
                  0 "MarginRate",
                  0 "EDBenefit",
                  0 "FinalRate"
                  from trtran004, trtran071,trtran072
                  where copt_deal_number = hedg_deal_number
                   and copt_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
                  and copt_serial_number = hedg_deal_serial
                  and copt_deal_number= cosu_deal_number
                  and copt_serial_number= cosu_serial_number
                  and copt_process_complete=Gconst.OptionNo
                  and copt_record_status in (10200001, 10200002, 10200003, 10200004)
                  and hedg_record_status in (10200001, 10200002, 10200003, 10200004)
                  and hedg_trade_reference in(select tt from temp where tt1 ='REFREVERSEDEAL');
--                  and copt_deal_number not in(select copt_deal_number from trtran073 
--                                              where copt_deal_number = deal_deal_number
--                                                         --and cdel_trade_reference ='REFREVERSEDEAL'
--                                                    and cdel_cancel_amount = hedg_hedged_fcy);
                                                     
        
        
        
        
        
        
        
     End if;    
        
   --   delete from temp;
   --   commit;
      Goto Process_End;
    End if;



--   if numInfoType = GConst.REFCROSSDEALDETAILS then
--
--      Open GenCursor for
--      select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
--        fncRollOver(deal_deal_number, EXCHANGERATE) "BaseRate",hedg_hedged_fcy "HedgedBase",
--        NVL((select sum(cdel_cancel_amount)
--          from trtran006 a
--          where a.cdel_deal_number = deal_deal_number
--          and a.cdel_deal_serial = deal_serial_number
--          and cdel_record_status in
--          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and not exists
--          (select 'x'
--            from trtran006 b
--            where b.cdel_trade_reference = a.cdel_trade_reference
--            and b.cdel_trade_serial = a.cdel_trade_serial
--            and b.cdel_trade_reference = varTemp1
--            and b.cdel_trade_serial = numTemp)),0.00) "Reversed",
--       NVL((select sum(cdel_cancel_amount)
--          from trtran006
--          where cdel_deal_number = deal_deal_number
--          and cdel_trade_reference = varTemp1
--          and cdel_trade_serial = numTemp
--          and cdel_record_status in
--          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00) ReverseAmount,
--        pkgReturnCursor.fncGetDescription(deal_base_currency,1) "BaseCurrency",
--        pkgReturnCursor.fncGetDescription(deal_other_currency,1) "OtherCurrency",
--        hedg_other_fcy "HedgedOther",
--        fncRollOver(deal_deal_number, LOCALRATE) "OtherRate",
--        pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
--        pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
--        pkgReturnCursor.fncGetDescription(deal_counter_party,1) "CounterParty",
--        pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
--         0 "RecordStatus"
--        from trtran004, trtran001
--        where deal_deal_number = hedg_deal_number
--        and deal_serial_number = hedg_deal_serial
--        and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
--        and deal_base_currency = 30400004
--        and deal_process_complete =12400002
--	and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--  and hedg_record_status in (10200001, 10200002, 10200003, 10200004);
--
--      Goto Process_End;
--    End if;
----Udated from Almus
   if numInfoType = GConst.REFCROSSDEALDETAILS then

      Open GenCursor for
      select hedg_trade_reference "TradeReference", hedg_deal_number "DealNumber",
        fncRollOver(deal_deal_number, EXCHANGERATE) "BaseRate",hedg_hedged_fcy "HedgedBase", 
        NVL((select sum(cdel_cancel_amount)
          from trtran006 a
          where a.cdel_deal_number = deal_deal_number
          and a.cdel_deal_serial = deal_serial_number
          and cdel_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
          and not exists 
          (select 'x' 
            from trtran006 b
            where b.cdel_trade_reference = a.cdel_trade_reference
            and b.cdel_trade_serial = a.cdel_trade_serial
            and b.cdel_trade_reference = varTemp1
            and b.cdel_trade_serial = numTemp)),0.00) "Reversed",
       NVL((select sum(cdel_cancel_amount)
          from trtran006
          where cdel_deal_number = deal_deal_number
          and cdel_trade_reference = varTemp1
          and cdel_trade_serial = numTemp
          and cdel_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00) "ReverseNow", 
        pkgReturnCursor.fncGetDescription(deal_base_currency,1) "BaseCurrency",
        pkgReturnCursor.fncGetDescription(deal_other_currency,1) "OtherCurrency",
        hedg_other_fcy "HedgedOther", 
        fncRollOver(deal_deal_number, LOCALRATE) "OtherRate",
        pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
        pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
        pkgReturnCursor.fncGetDescription(deal_counter_party,1) "CounterParty",
        pkgReturnCursor.fncGetDescription(hedg_company_code, 1) "CompanyName",
         0 "RecordStatus"
        from trtran004, trtran001
        where deal_deal_number = hedg_deal_number
        and deal_serial_number = hedg_deal_serial
        and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
        and deal_base_currency=30400004
        and deal_process_complete =12400002
	and deal_record_status in (10200001, 10200002, 10200003, 10200004)
  and hedg_record_status in (10200001, 10200002, 10200003, 10200004);
    
      Goto Process_End;
    End if;  

-- updated on 16-Apr-09 by manjunath
--if numInfoType = Gconst.REFREVERSELOAN then
--      varOperation := 'Extracting Loan Information for reversal';
--      varDummy := '//' || varEntity || '/ROW/';
--      varTemp1 := GConst.fncXMLExtract(xmldoc,varDummy || 'TradeReference',
--                varTemp, GConst.TYPENODEPATH);
--      numTemp := GConst.fncXMLExtract(xmldoc, varDummy || 'ReverseSerial',
--                numTemp, GConst.TYPENODEPATH);
--
----      Begin
------         select trad_trade_reference
------            into varTemp1
------            from trtran002
------            where trad_reverse_reference = varTemp
------            and trad_reverse_serial = numTemp;
----
----
----         select distinct nvl(trad_reverse_reference, trad_trade_reference)
----            into varTemp
----            from trtran002
----            where trad_trade_reference = varTemp1;
----
----            goto Start_Cursor;
----        begin
----           select loln_loan_number
----               into Vartemp
----               from trtran010
----               where (loln_trade_reference=vartemp1);
----        exception
----          when no_data_found then
----             select loln_loan_number
----               into Vartemp
----               from trtran010
----               where (loln_trade_reference=vartemp);
----         end;
----      Exception
----        When No_Data_Found Then
----          varTemp := null;
----      End;
--
--      Open GenCursor for
----      select pkgReturnCursor.fncGetDescription(fcln_company_code, 1) "CompanyName",
----        '' "TradeReference", fcln_loan_number "LoanNumber",
----        fcln_bank_reference "BankReference", fcln_sanction_date "SanctionDate",
----        pkgReturnCursor.fncGetDescription(fcln_loan_type, 2) "LoanType",
----        pkgReturnCursor.fncGetDescription(fcln_local_bank,2) "BankName",
----        pkgReturnCursor.fncGetDescription(fcln_currency_code,2) "Currency",
----        fcln_sanctioned_fcy "LoanAmount",
------        NVL((select sum(trln_adjusted_fcy)
------          from trtran007 a
------          where trln_serial_number > 0
------          and trln_record_status in
------          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
------          and not exists
------          (select 'x'
------            from trtran007 b
------            where a.trln_trade_reference = b.trln_trade_reference
------            and a.trln_trade_serial = b.trln_trade_serial
------            and b.trln_trade_reference = varTemp
------            and b.trln_trade_serial = numTemp)),0.00)  "Reversed",
----        NVL((select sum(trln_adjusted_fcy)
----          from trtran007
----          where trln_loan_number = fcln_loan_number
----          --and trln_trade_reference = varTemp
----         -- and trln_trade_serial = numTemp
----          and trln_serial_number > 0
----          and trln_record_status in
----          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00) "Reversed",
----        0.00 ReverseAmount,
----        fcln_conversion_rate "ExchangeRate", fcln_sanctioned_inr "RupeeValue",
----        fcln_noof_days "NoofDays", fcln_maturity_to "MaturityDate", 0 "RecordStatus"
----        from trtran005
----        where fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----        and fcln_loan_type != GConst.LOANPSCFC
----       and fcln_loan_number = decode(varTemp, null,fcln_loan_number,varTemp)
----      union
----      select pkgReturnCursor.fncGetDescription(fcln_company_code, 1) "CompanyName",
----        loln_trade_reference "TradeReference", fcln_loan_number "LoanNumber",
----        fcln_bank_reference "BankReference", fcln_sanction_date "SanctionDate",
----        pkgReturnCursor.fncGetDescription(fcln_loan_type, 2) "LoanType",
----        pkgReturnCursor.fncGetDescription(fcln_local_bank,2) "BankName",
----        pkgReturnCursor.fncGetDescription(fcln_currency_code,2) "Currency",
----        loln_adjusted_fcy "LoanAmount", 0.00 "Reversed",
----        0.00 ReverseAmount,
----        loln_adjusted_rate "ExchangeRate",loln_adjusted_inr "RupeeValue",
----        fcln_noof_days "NoofDays", fcln_maturity_to "MaturityDate", 0 "RecordStatus"
----        from trtran005, trtran010
----        where loln_loan_number = fcln_loan_number
----        and fcln_loan_type = GConst.LOANPSCFC
----        and fcln_Company_Code in( select usco_company_code from trsystem022a
----                                        where usco_user_id =varUserid)
----        and loln_serial_number = 0
----        and fcln_loan_number = decode(varTemp, null,fcln_loan_number,varTemp)
----       union
--       select pkgReturnCursor.fncGetDescription(BCRD_COMPANY_CODE, 1) "CompanyName",
--        '' "TradeReference", BCRD_BUYERS_CREDIT "LoanNumber",
--        BCRD_SANCTION_REFERENCE "BankReference", BCRD_SANCTION_DATE "SanctionDate",
--        pkgReturnCursor.fncGetDescription(25900073, 2) "LoanType",
--        pkgReturnCursor.fncGetDescription(BCRD_LOCAL_BANK,2) "BankName",
--        pkgReturnCursor.fncGetDescription(bcrd_currency_code,2) "Currency",
--        bcrd_sanctioned_fcy "LoanAmount",
--        NVL((select sum(trln_adjusted_fcy)
--          from trtran007 a
--          where trln_serial_number > 0
--          and trln_loan_number=BCRD_BUYERS_CREDIT
--          and trln_record_status in
--          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00)
--            "Reversed",
-- --       NVL((select sum(trln_adjusted_fcy)
-- --         from trtran007
-- --         where trln_loan_number = fcln_loan_number
-- --         and trln_trade_reference = varTemp
-- --         and trln_trade_serial = numTemp
-- --         and trln_serial_number > 0
-- --         and trln_record_status in
-- --         (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00)
--       0  ReverseAmount,
--        bcrd_conversion_rate "ExchangeRate", bcrd_sanctioned_inr "RupeeValue",
--        BCRD_NOOF_DAYS "NoofDays", BCRD_DUE_DATE "MaturityDate", 0 "RecordStatus"
--        from trtran045
--          where  BCRD_BUYERS_CREDIT = varTemp1 --decode(varTemp, null,BCRD_BUYERS_CREDIT,varTemp)
--         and bcrd_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)and BCRD_RECORD_STATUS in(10200001,10200002,10200003);
--
--      Goto Process_End;
--    End if;

------Udated from Almus-----

if numInfoType = Gconst.REFREVERSELOAN then
      varOperation := 'Extracting Loan Information for reversal';
      varDummy := '//' || varEntity || '/ROW/';
      varTemp1 := GConst.fncXMLExtract(xmldoc,varDummy || 'TradeReference', 
                varTemp, GConst.TYPENODEPATH);
      numTemp := GConst.fncXMLExtract(xmldoc, varDummy || 'ReverseSerial', 
                numTemp, GConst.TYPENODEPATH);
      numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);           
      
      Begin          
--         select trad_trade_reference
--            into varTemp1
--            from trtran002
--            where trad_reverse_reference = varTemp
--            and trad_reverse_serial = numTemp;

      
         select distinct nvl(trad_reverse_reference, trad_trade_reference)
            into varTemp
            from trtran002
            where trad_trade_reference = varTemp1
            and trad_company_code = numcode;
        begin     
           select loln_loan_number 
               into Vartemp
               from trtran010
               where (loln_trade_reference=vartemp1);
        exception 
          when no_data_found then
             select loln_loan_number 
               into Vartemp
               from trtran010
               where (loln_trade_reference=vartemp);
         end;
      Exception
        When No_Data_Found Then
          varTemp := null;
      End;

      Open GenCursor for
      select pkgReturnCursor.fncGetDescription(fcln_company_code, 1) "CompanyName",
        '' "TradeReference", fcln_loan_number "LoanNumber",
        fcln_bank_reference "BankReference", fcln_sanction_date "SanctionDate",
        pkgReturnCursor.fncGetDescription(fcln_loan_type, 2) "LoanType",
        pkgReturnCursor.fncGetDescription(fcln_local_bank,2) "BankName",
        pkgReturnCursor.fncGetDescription(fcln_currency_code,2) "Currency",
        fcln_sanctioned_fcy "LoanAmount", 
--        NVL((select sum(trln_adjusted_fcy)
--          from trtran007 a
--          where trln_serial_number > 0
--          and trln_record_status in
--          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--          and not exists
--          (select 'x'
--            from trtran007 b
--            where a.trln_trade_reference = b.trln_trade_reference
--            and a.trln_trade_serial = b.trln_trade_serial
--            and b.trln_trade_reference = varTemp
--            and b.trln_trade_serial = numTemp)),0.00)  "Reversed", 
        NVL((select sum(trln_adjusted_fcy)
          from trtran007
          where trln_loan_number = fcln_loan_number
          --and trln_trade_reference = varTemp
         -- and trln_trade_serial = numTemp
          and trln_serial_number > 0
          and trln_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00) "Reversed",
        0.00 ReverseAmount,  
        fcln_conversion_rate "ExchangeRate", fcln_sanctioned_inr "RupeeValue",
        fcln_noof_days "NoofDays", fcln_maturity_to "MaturityDate", 0 "RecordStatus"
        from trtran005
        where fcln_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
        and fcln_loan_type != GConst.LOANPSCFC
       and fcln_loan_number = decode(varTemp, null,fcln_loan_number,varTemp)
      union         
      select pkgReturnCursor.fncGetDescription(fcln_company_code, 1) "CompanyName",
        loln_trade_reference "TradeReference", fcln_loan_number "LoanNumber",
        fcln_bank_reference "BankReference", fcln_sanction_date "SanctionDate",
        pkgReturnCursor.fncGetDescription(fcln_loan_type, 2) "LoanType",
        pkgReturnCursor.fncGetDescription(fcln_local_bank,2) "BankName",
        pkgReturnCursor.fncGetDescription(fcln_currency_code,2) "Currency",
        loln_adjusted_fcy "LoanAmount", 0.00 "Reversed", 
        0.00 ReverseAmount,  
        loln_adjusted_rate "ExchangeRate",loln_adjusted_inr "RupeeValue",
        fcln_noof_days "NoofDays", fcln_maturity_to "MaturityDate", 0 "RecordStatus"
        from trtran005, trtran010
        where loln_loan_number = fcln_loan_number
        and fcln_loan_type = GConst.LOANPSCFC
        and fcln_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
        and loln_serial_number = 0
        and fcln_loan_number = decode(varTemp, null,fcln_loan_number,varTemp)
       union 
       select pkgReturnCursor.fncGetDescription(BCRD_COMPANY_CODE, 1) "CompanyName",
        '' "TradeReference", BCRD_BUYERS_CREDIT "LoanNumber",
        BCRD_SANCTION_REFERENCE "BankReference", BCRD_SANCTION_DATE "SanctionDate",
        pkgReturnCursor.fncGetDescription(25900073, 2) "LoanType",
        pkgReturnCursor.fncGetDescription(BCRD_LOCAL_BANK,2) "BankName",
        pkgReturnCursor.fncGetDescription(bcrd_currency_code,2) "Currency",
        bcrd_sanctioned_fcy "LoanAmount", 
        NVL((select sum(trln_adjusted_fcy)
          from trtran007 a
          where trln_serial_number > 0
          and trln_loan_number=BCRD_BUYERS_CREDIT
          and trln_record_status in
          (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00) 
            "Reversed",  
 --       NVL((select sum(trln_adjusted_fcy)
 --         from trtran007
 --         where trln_loan_number = fcln_loan_number
 --         and trln_trade_reference = varTemp
 --         and trln_trade_serial = numTemp
 --         and trln_serial_number > 0
 --         and trln_record_status in
 --         (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)),0.00)
       0  ReverseAmount,  
        bcrd_conversion_rate "ExchangeRate", bcrd_sanctioned_inr "RupeeValue",
        BCRD_NOOF_DAYS "NoofDays", BCRD_DUE_DATE "MaturityDate", 0 "RecordStatus"
        from trtran045
          where  BCRD_BUYERS_CREDIT = decode(varTemp, null,BCRD_BUYERS_CREDIT,varTemp)
         and bcrd_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid);

      Goto Process_End;
    End if;



if numInfoType = Gconst.REFGRAPHS then
     varOperation := 'Extracting Information for Graphs';

     numcode := gconst.fncxmlextract(xmldoc,'GraphType',numcode);
     datTemp := Gconst.fncxmlextract(xmldoc,'DateFrom',datTemp);
     datTemp1 := Gconst.fncXmlExtract(xmldoc,'DateTo',datTemp1);

 --gconst.fncreturnparam(paramdata,'OtherCurrency'); --
     if ((numcode =Gconst.ExchangeRateBid) or  (numcode =Gconst.GraphExchangeRate) or  (numcode =Gconst.ExchangeRateAsk)) then

        basecurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode);
        Othercurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency',numCode1);

          if (numcode =Gconst.ExchangeRateBid) then
              --sqlQuery:='Select round(drat_spot_ask,4) ExchangeRate ,drat_effective_date effectiveDate';
              sqlQuery:='Select round(drat_spot_bid,4) ExchangeRate,drat_effective_date effectiveDate ';
          elsif  (numcode =Gconst.GraphExchangeRate) then
              sqlQuery:='Select round(((drat_spot_bid + drat_spot_ask)/2),4) ExchangeRate ,drat_effective_date effectiveDate ';
          elsif (numcode =Gconst.ExchangeRateAsk) then
              sqlQuery:='Select round(drat_spot_ask,4) ExchangeRate ,drat_effective_date effectiveDate';
          end if;

          sqlQuery := sqlQuery || ' from trtran012 where  DRAT_EFFECTIVE_DATE between ' || '''' || dattemp ||''''
                               ||' and ' || '''' || dattemp1 ||'''' || ' and drat_currency_code= ' || baseCurrency ||
                               ' and drat_for_currency= ' || otherCurrency ||' order by drat_effective_date,drat_serial_number';

--
--           if (dattemp-dattemp1)=0 then
--              open gencursor for
--               select rownum SlNo,DRAT_SPOT_BID SpotBid,drat_effective_date EffectiveDate
--                 from trtran012
--                 where  DRAT_EFFECTIVE_DATE between datTemp and datTemp1
--                 and drat_currency_code=basecurrency and drat_for_currency=Othercurrency;
--           else
--             open gencursor for
--               select drat_effective_date EffectiveDate, drat_spot_bid SpotBid
--                 from trtran012 a
--                 where  a.DRAT_EFFECTIVE_DATE between datTemp and datTemp1
--                 and a.drat_currency_code=basecurrency and a.drat_for_currency=Othercurrency
--                 and a.drat_serial_number= (select max(drat_serial_number)
--                                            from trtran012
--                                            where  DRAT_EFFECTIVE_DATE =a.drat_effective_date
--                                            and drat_currency_code=basecurrency
--                                            and drat_for_currency=Othercurrency)
--                 order by drat_effective_date;
--           end if;

           open gencursor for sqlQuery;

     elsif numcode = Gconst.GraphHoldRate then
        open gencursor for
               select rownum SlNo,DRAT_SPOT_BID,drat_serial_number,drat_effective_date
                 from trtran012
                 where  DRAT_EFFECTIVE_DATE between datTemp and datTemp1
                 and drat_currency_code=BaseCurrency and drat_for_currency=OtherCurrency;
     elsif ((numcode = Gconst.GraphDealRateBuy) or (numcode = Gconst.GraphDealRateSell)) then
        basecurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode);
        Othercurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency',numCode1);

        if numcode = Gconst.GraphDealRateBuy then
           numcode2:=25300001;  --Buy
        elsif numcode = Gconst.GraphDealRateSell then
           numcode2:=25300002;  --Sell
        end if;

       open gencursor for
               select rownum SlNo,Round(deal_exchange_rate,4) ExchangeRate,(select user_user_name
                                                         from trsystem022
                                                         where user_user_id=deal_user_id) UserName
                from trtran001
                where deal_base_currency=BaseCurrency
                and deal_other_currency   =OtherCurrency
                and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
                and deal_buy_sell=numcode2
                and deal_hedge_trade=Gconst.TRADEDEAL
                and deal_execute_date between datTemp and datTemp1;
     elsif numcode =Gconst.GraphProfitLoss then
       open genCursor for
            Select sum(cdel_profit_loss) ProfitLoss,
              cdel_cancel_date CancelDate
              from trtran001,trtran006
             where deal_deal_number=cdel_deal_number
               and cdel_cancel_date between datTemp and datTemp1
               and deal_record_status not in(10200005,10200006)
               and cdel_record_status not in(10200005,10200006)
               and cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
               and cdel_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
               group by cdel_cancel_date
               order by cdel_cancel_date ;
     elsif numcode =Gconst.GraphMonProfitLoss then
       open genCursor for
            select to_char(to_date('01' || '/' || substr(CancelDate,5) || '/' ||  substr(CancelDate, 0, 4),'dd/mm/yyyy'),'Mon YYYY') CancelDate ,
               profitloss from
              (Select sum(cdel_profit_loss) ProfitLoss,
                 to_char(cdel_cancel_date,'YYYYMM') CancelDate
                 from trtran001,trtran006
                 where deal_deal_number=cdel_deal_number
                 and cdel_cancel_date between datTemp and datTemp1
                 and deal_record_status not in(10200005,10200006)
                 and cdel_record_status not in(10200005,10200006)
                 and cdel_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
                 and cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                 group by to_char(cdel_cancel_date,'YYYYMM')
                 order by to_char(cdel_cancel_date,'YYYYMM'));
     elsif numcode =Gconst.GraphCurrWise then
       open genCursor for
             Select pkgReturnCursor.fncGetDescription(deal_base_currency,2)
                || '/' || pkgReturnCursor.fncGetDescription(deal_other_currency,2) CurrencyPair,
                sum(cdel_profit_loss) ProfitLoss
                from trtran001,trtran006
                where deal_deal_number=cdel_deal_number
                and cdel_cancel_date between datTemp and datTemp1
                and deal_record_status not in(10200005,10200006)
                and cdel_record_status not in(10200005,10200006)
                and cdel_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
                and cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                group by deal_base_currency,deal_other_currency;
    elsif numcode =Gconst.GraphDealerWise then
       open genCursor for
             Select
                (select  user_user_name from trsystem022 where user_user_id=deal_user_id) DealerName,
                 sum(cdel_profit_loss) ProfitLoss
                from trtran001,trtran006
                where deal_deal_number=cdel_deal_number
                and cdel_cancel_date between datTemp and datTemp1
                and deal_record_status not in(10200005,10200006)
                and cdel_record_status not in(10200005,10200006)
                and cdel_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
                and cdel_deal_number not in (select LMOD_REFERENCE_NUMBER from trtran009)
                group by deal_user_id;
    elsif numcode=Gconst.DealRateCancelRateBUY then
        basecurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode);
        Othercurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency',numCode1);
       open genCursor for
           select rownum Slno,round(deal_exchange_rate,4) DealRate ,
              round(cdel_cancel_rate,4) CancelRate
              from trtran001,trtran006
              where deal_deal_number= cdel_deal_number
              and deal_base_currency  =BaseCurrency
              and deal_other_currency =OtherCurrency
              and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
              and cdel_cancel_date between datTemp and datTemp1
              and deal_buy_sell=25300002;
    elsif numcode=Gconst.DealRateCancelRateSELL then
        basecurrency := gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode);
        Othercurrency := gconst.fncxmlextract(xmldoc,'OtherCurrency',numCode1);
       open genCursor for
           select rownum Slno,round(deal_exchange_rate,4) DealRate ,
              round(cdel_cancel_rate,4) CancelRate
              from trtran001,trtran006
              where deal_deal_number= cdel_deal_number
              and cdel_cancel_date between datTemp and datTemp1
              and deal_base_currency  =BaseCurrency
              and deal_other_currency =OtherCurrency
              and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
              and deal_buy_sell=25300001;
    elsif numcode =Gconst.ExchRateComparision then
       vartemp := gconst.fncreturnparam(paramdata,'BaseCurrency');
       vartemp1 := gconst.fncreturnparam(paramdata,'OtherCurrency');
        open genCursor for
         select drat_effective_date,round(drat_spot_bid,4),round(drat_spot_ask,4) ,
            pkgreturncursor.fncGetDescription(drat_currency_code,2)
            || '/' || pkgreturncursor.fncGetDescription(drat_for_currency,2) CurrencyPair
            from trtran012
            where drat_currency_code in (vartemp)
            and drat_for_currency in (vartemp1)

            and drat_effective_date between datTemp and datTemp1
            order by drat_effective_date;
    end if;

--   1	27200001	ExcRate
--2	27200002	HoldRate
--3	27200003	Both

--   if numcode1=27200001 then
    Goto Process_End;
   END IF;

  if numInfoType = Gconst.REFHEDGEAMOUNT then
     varOperation := 'Extracting Information Of Hedge Amount';
     numcode := gconst.fncxmlextract(xmldoc,'HedgeCurrency',numcode);
     numcode1 := gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode1);
     numcode2 := gconst.fncxmlextract(xmldoc,'BuyORSell',numcode1);
     ExecutionDate :=  gconst.fncxmlextract(xmldoc,'ExecutionDate',ExecutionDate);
     numfcy := gconst.fncxmlextract(xmldoc,'HedgeAmount',numfcy);
     numfcy1 := gconst.fncxmlextract(xmldoc,'BaseAmount',numfcy1);


     Open GenCursor for
        select  dayopendayend.fnccalcHedgeAmount(numcode,numcode1,numfcy,numfcy1,ExecutionDate,numcode2) as bool from dual;

     Goto Process_End;

  end  if;

  if numinfotype =gconst.REFTRANEXCESS then
     varOperation := 'Extracting Information Transaction Excess';
     vartemp := gconst.fncxmlextract(xmldoc,'DealNumber',vartemp);
    Open GenCursor for
         select rdel_deal_number as "Deal Number" ,pkgreturncursor.fncgetdescription(rdel_risk_type,1) "Risk Type",
                RDEL_LIMIT_USD "Amount Limit",rdel_amount_excess "Amount Excess",
                pkgreturncursor.fncgetdescription(rdel_action_taken,1) "Amount Taken",rdel_stake_holder "Stake Holder"
           from trtran011 where (rdel_record_status is null or rdel_record_status =10200001);

    update trtran011 set  rdel_record_status=10200003;

--     numerror :=pkgforexprocess.fncRiskGenerate(datworkdate,26000002);
--
----     SELECT nvl(count (*),0) into numcode
----     FROM (SELECT (crsk_allowed_usd -crsk_position_usd) amountusd,(crsk_allowed_inr -crsk_position_inr) amountinr
----           FROM trsystem996 WHERE crsk_risk_type NOT IN(0,    1))
----     WHERE amountusd<0 or amountinr <0;
--
----     if numcode >0 then
------        insert into trtran011 (  SELECT 30199999,riskreference,vartemp,1,actiontaken,risktype,allowedusd,amountinr  FROM (SELECT nvl(crsk_risk_reference,'0') riskreference,
------                                       (SELECT RISK_ACTION_TAKEN from TRSYSTEM012 where risk_risk_reference =crsk_risk_reference) as actiontaken,
------                                       crsk_risk_type risktype,(crsk_allowed_usd -crsk_position_usd) amountusd,(crsk_allowed_inr -crsk_position_inr) amountinr,crsk_allowed_usd allowedusd  FROM trsystem996 WHERE crsk_risk_type NOT IN(0,    1))
------                                 WHERE amountusd<0 or amountinr <0);
------        Open GenCursor for
------            SELECT * FROM (SELECT nvl(crsk_risk_reference,'0') "RiskReference", pkgreturncursor.fncgetdescription(crsk_risk_type,    1) AS
------                  "RiskType",crsk_allowed_usd "AllowedUSD",crsk_position_usd "PositionUSD",(crsk_allowed_usd -abs(crsk_position_usd)) "ExcessAmt(USD)",crsk_allowed_inr "AllowedInr",(crsk_allowed_inr -abs(crsk_position_inr)) "ExcessAmt(INR)",
------                  pkgreturncursor.fncgetdescription(crsk_counter_party,1) as "CounterParty",pkgreturncursor.fncgetdescription(crsk_currency_code,2) as "Currency"
------                  FROM trsystem996  WHERE crsk_risk_type NOT IN(0,    1))
------            WHERE  "ExcessAmt(USD)"<0 or "ExcessAmt(INR)" <0;
------       Goto Process_End;
------     else
----       Goto dummy_cursor;
----     end if;
       Goto Process_End;
    end if;
  if numinfotype =gconst.REFCURRENCYRATES then
    varOperation := 'Extracting Information Ref Currency Rates';
    --124000001 for total currency rates of that day
    --124000002 for latest currency rates of that day
    numcode := gconst.fncxmlextract(xmldoc,'Currency',numcode);
    if numcode=gconst.OPTIONYES then 
      Open GenCursor for       
        SELECT  pkgreturncursor.fncgetdescription(drat_currency_code,2) as currency,
            drat_spot_bid as bid,drat_spot_ask as Ask,drat_rate_time "DateTime"
        FROM trtran012
        WHERE drat_effective_date = datworkdate
        and drat_serial_number= (select max(drat_serial_number) 
                                 from trtran012 where
                                 drat_effective_date = datworkdate
                                 AND drat_for_currency = 30400003)
        AND drat_for_currency = 30400003
        and drat_record_status not in (10200005,10200006);
    else
      Open GenCursor for       
        select    drat_serial_number  as "SerialNo", drat_rate_description  as "RateDesc" 
        FROM trtran012
        WHERE drat_effective_date = datworkdate
        AND drat_for_currency = 30400003
        and drat_record_status not in (10200005,10200006);
        
       
    end if;
    Goto Process_End; 
 end if;

-----aakash commented on 05-Aug-13 12:19 pm
--if numinfotype =gconst.REFAPPLYRATES then
--  varOperation := 'Extracting Information Ref Apply Rates';
----  vartemp := gconst.fncxmlextract(xmldoc,'FromTime',vartemp);
----  vartemp1 := gconst.fncxmlextract(xmldoc,'ToTime',vartemp1);
--  numtemp := gconst.fncxmlextract(xmldoc,'SerialNo',numtemp);
--  numtemp1 :=gconst.fncxmlextract(xmldoc,   'Scenario',   numtemp1);
--  dattemp   := gconst.fncxmlextract(xmldoc,'Fromdate',dattemp);
--  dattemp1  :=gconst.fncxmlextract(xmldoc,'Todate',dattemp1);
--  numcode  := gconst.fncxmlextract(xmldoc,'Compcode',numcode);
--  Numcode1 :=Gconst.Fncxmlextract(Xmldoc,'Catcode',Numcode1);
--  numcode2  := gconst.fncxmlextract(xmldoc,'InitCode',numcode2);
--
--  varquery := 'SELECT  deal_deal_number as "DealNumber", pkgreturncursor.fncgetdescription(deal_swap_outright,   1) "Swap/OutRight",
--                pkgreturncursor.fncgetdescription(deal_buy_sell,   1) "Buy/Sale", deal_maturity_date "Matirity Date",
--                pkgreturncursor.fncgetdescription(deal_base_currency,   2) "Base Currency",
--                pkgreturncursor.fncgetdescription(deal_other_currency,   2) "Other Currency",
--                deal_exchange_rate "Exchange Rate",deal_local_rate "Local Rate", deal_base_amount "Base Amount",
--                decode(deal_other_currency,30400003,deal_other_amount,deal_amount_local) as "Amount(INR)",
--                pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
--                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
--                deal_maturity_date),null, ' || numtemp || ') AS "M2MRate",
--                ' || '''' || ' ' || '''' || ' as "UserDefined Rates", (((deal_exchange_rate/100) * ' ||  numtemp1 || ') + deal_exchange_rate)  AS "Scenario Rate",
--                decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency,   30400003,
--                '||''''||datworkdate||''''||',   deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || '
--                ,deal_maturity_date),null, ' || numtemp || ')) AS "Wash Rate",
--                ' || '''' || 'Profit/Loss' || '''' || ' as "Profit/Loss",
--                deal_buy_sell "BuySalecode",
--                pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,   1) "Comapny Name",
--                pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,   1) "Catergory",
--                 deal_base_amount*pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
--                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
--                deal_maturity_date),null, ' || numtemp || ')  "m2mvalue"
--               FROM trtran001
--                   WHERE
--                     deal_record_status  not in(10200005,10200006)
--                     and deal_process_complete=12400002
--                     and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id = ' || '''' || varUserid || ''''||')
--                     and DEAL_COMPANY_CODE =decode('''||numcode||''',30199999,DEAL_COMPANY_CODE,'''||numcode||''')
--                     and DEAL_BACKUP_DEAL  = decode('''||numcode1||''',33399999, DEAL_BACKUP_DEAL,'''||numcode1||''')
--                     and DEAL_INIT_CODE=decode('''||numcode2||''',33899999, DEAL_INIT_CODE,'''||numcode2||''')
--                     and DEAL_MATURITY_DATE between '||''''||dattemp||''''||' and '||''''||dattemp1||''''||' ';
--                                  --and deal_execute_time BETWEEN ' || '''' || vartemp || '''' || '
--                                  -- AND ' || '''' || vartemp1 || '''' || '
--                                --  and deal_execute_date= ' || '''' || datworkdate || '''';
--                             -- deal_hedge_trade =26000002       -- and
--            --   delete from temp;
--            --   INSERT INTO TEMP values(varquery,varquery) ;
--            --   commit;
--
--
--       varOperation := 'Extracting User Information For Apply Rates';
--
--
--         select user_group_code into numcode
--         from usermaster
--         where user_user_id= varUserID;
--
--
----
--      -- if user is dealer then it will display only his deal
--      -- if user is other than deal dealer then it will display all deal for a given specific time
--       if (numcode=14200002) then
--          varQuery := varQuery || '  and deal_user_id='||''''|| varUserID ||'''' ;
--       end if;
--
--
--    Open GenCursor for  varQuery;
--   Goto Process_End;
-- end if ;
-------------modified Ishwar/Aakash 05-Aug-13 12:20 pm
if numinfotype =gconst.REFAPPLYRATES then
  varOperation := 'Extracting Information Ref Apply Rates';
--  vartemp := gconst.fncxmlextract(xmldoc,'FromTime',vartemp);
--  vartemp1 := gconst.fncxmlextract(xmldoc,'ToTime',vartemp1);
  numtemp := gconst.fncxmlextract(xmldoc,'SerialNo',numtemp);
  numtemp1 :=gconst.fncxmlextract(xmldoc,   'Scenario',   numtemp1);
  dattemp   := gconst.fncxmlextract(xmldoc,'Fromdate',dattemp);
  dattemp1  :=gconst.fncxmlextract(xmldoc,'Todate',dattemp1);
  numcode  := gconst.fncxmlextract(xmldoc,'Compcode',numcode);
  numcode1 :=gconst.fncxmlextract(xmldoc,'Locationcode',numcode1);
  --Commented in Almus
 -- Numcode1 :=Gconst.Fncxmlextract(Xmldoc,'Catcode',Numcode1); --
 -- numcode2  := gconst.fncxmlextract(xmldoc,'InitCode',numcode2);
   --Numcode1 :=Gconst.Fncxmlextract(Xmldoc,'Catcode',Numcode1);
  --numcode2  := gconst.fncxmlextract(xmldoc,'InitCode',numcode2);


  varquery := 'SELECT  deal_deal_number as "DealNumber", pkgreturncursor.fncgetdescription(deal_swap_outright,   1) "Swap/OutRight",
                pkgreturncursor.fncgetdescription(deal_buy_sell,   1) "Buy/Sale", deal_maturity_date "Matirity Date",
                pkgreturncursor.fncgetdescription(deal_base_currency,   2) "Base Currency",
                pkgreturncursor.fncgetdescription(deal_other_currency,   2) "Other Currency",
                deal_exchange_rate "Exchange Rate",deal_local_rate "Local Rate", deal_base_amount "Base Amount",
                decode(deal_other_currency,30400003,deal_other_amount,deal_amount_local) as "Amount(INR)",
 --Almus Code--
 --               pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
 --               pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
 --               deal_maturity_date),deal_maturity_date, ' || numtemp || ') AS "M2MRate",
 --Cygnet Code
                 pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
                deal_maturity_date),null, ' || numtemp || ') AS "M2MRate",
--Almus Code
--                ' || '''' || ' ' || '''' || ' as "UserDefined Rates", (((pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
--                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
--                deal_maturity_date),deal_maturity_date, ' || numtemp || ')/100) * ' ||  numtemp1 || ') + pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
--                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
--                deal_maturity_date),deal_maturity_date, ' || numtemp || '))  AS "Scenario Rate",
--Cygnet Code
                  ' || '''' || ' ' || '''' || ' as "UserDefined Rates", (((deal_exchange_rate/100) * ' ||  numtemp1 || ') + deal_exchange_rate)  AS "Scenario Rate",
                decode(deal_other_currency,30400003,1,pkgforexprocess.fncgetrate(deal_other_currency,   30400003,
                '||''''||datworkdate||''''||',   deal_buy_sell,pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || '
                ,deal_maturity_date),null, ' || numtemp || ')) AS "Wash Rate",
                ' || '''' || 'Profit/Loss' || '''' || ' as "Profit/Loss",
                deal_buy_sell "BuySalecode",
                pkgreturncursor.fncgetdescription(DEAL_COMPANY_CODE,   1) "Comapny Name",
                pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,   1) "Catergory",
                 deal_base_amount*pkgforexprocess.fncgetrate(deal_base_currency,   deal_other_currency,   '||''''||datworkdate||''''||',   deal_buy_sell,
                pkgforexprocess.fncAllotMonth(DEAL_COUNTER_PARTY,' || '''' || datworkdate || '''' || ',
                deal_maturity_date),null, ' || numtemp || ')  "m2mvalue"
               FROM trtran001
                   WHERE
                     deal_record_status  not in(10200005,10200006)
                     and deal_process_complete=12400002
                     and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id = ' || '''' || varUserid || ''''||')
                     and DEAL_COMPANY_CODE =decode('''||numcode||''',30199999,DEAL_COMPANY_CODE,'''||numcode||''')
                     and DEAL_LOCATION_CODE=decode('''||numcode1||''',30299999,DEAL_LOCATION_CODE,'''||numcode1||''')
                   --  and DEAL_BACKUP_DEAL  = decode('''||numcode1||''',33399999, DEAL_BACKUP_DEAL,'''||numcode1||''')
                    -- and DEAL_INIT_CODE=decode('''||numcode2||''',33899999, DEAL_INIT_CODE,'''||numcode2||''')


                     and DEAL_MATURITY_DATE between '||''''||dattemp||''''||' and '||''''||dattemp1||''''||' ';
                     --   and DEAL_BACKUP_DEAL  = decode('''||numcode1||''',33399999, DEAL_BACKUP_DEAL,'''||numcode1||''')
                                  --and deal_execute_time BETWEEN ' || '''' || vartemp || '''' || '
                                  -- AND ' || '''' || vartemp1 || '''' || '
                                --  and deal_execute_date= ' || '''' || datworkdate || '''';
                             -- deal_hedge_trade =26000002       -- and
                            -- and DEAL_INIT_CODE=decode('''||numcode2||''',33899999, DEAL_INIT_CODE,'''||numcode2||''')
               delete from temp;
               INSERT INTO TEMP values(varquery,varquery) ;
               commit;


       varOperation := 'Extracting User Information For Apply Rates';


         select user_group_code into numcode
         from usermaster
         where user_user_id= varUserID;


--
      -- if user is dealer then it will display only his deal
      -- if user is other than deal dealer then it will display all deal for a given specific time
       if (numcode=14200002) then
          varQuery := varQuery || '  and deal_user_id='||''''|| varUserID ||'''' ;
       end if;


    Open GenCursor for  varQuery;
   Goto Process_End;
 end if ;

 ----end

 if numinfotype =gconst.REFFDDETAILREPORT then
  varOperation := 'Extracting Information FD Details';
  dattemp   := gconst.fncxmlextract(xmldoc,'Fromdate',dattemp);
  dattemp1  :=gconst.fncxmlextract(xmldoc,'Todate',dattemp1);
  delete from trsystem981;
  insert into trsystem981 values(dattemp,dattemp1);
  Open GenCursor for

    select * from VEWFIXEDDEPOSIT order by "S.No";

  Goto Process_End;
 end if ;


if numinfotype =gconst.REFSMSMAIL then
     varOperation := 'Extracting Information Sending sms/mail';
      Open GenCursor for
        select rdel_company_code  CompanyCode,rdel_risk_reference  RiskReference,
               rdel_deal_number  DealNumber,rdel_serial_number  SerialNumber,
               rdel_risk_type  RiskType,rdel_risk_date riskdate,rdel_action_taken actiontaken,
               rdel_message_text as message,rdel_mobile_number mobilenumber,rdel_email_id emailid
        from trtran011
        where nvl(rdel_sent_status,27300001) =27300001;


        Goto Process_End;
end if;
--if numinfotype =gconst.REFFILLCOMBO then
--      varOperation := 'Extracting Information For Filling Combo';
--      vartemp := gconst.fncxmlextract(xmldoc,'ComboName',vartemp);
--
--      Select fldp_column_name into vartemp1 from trsystem999
--      where fldp_xml_field=vartemp and fldp_table_synonym=varEntity;
--
--      varQuery :=' select distinct ' ||vartemp1 || ' as KeyValue, pkgreturncursor.fncgetdescription( ' || vartemp1 || ',2) as LongDescription from trsystem011 where rprm_record_status not in(10200005,10200006)';
--
--    insert into temp values (varQuery,varQuery);
--    commit;
--
--    open gencursor for   varQuery;
--
--   Goto Process_End;
--end if;

-- added for cash flow statement on 24apr2012 - sivadas --
   -- added for cash flow statement on 24apr2012 - sivadas --
 -- added for cash flow statement on 24apr2012 - sivadas --
 -- added for cash flow statement on 24apr2012 - sivadas --
  if numInfoType = Gconst.REFGAPVIEWSUMMARY then
       Varoperation := 'Extracting Cursor for Holding Rate';
       numcode := Gconst.fncXMLExtract(xmldoc,'CompanyCode',numcode);
       numcode1 := GConst.fncXMLExtract(xmldoc, 'CurrencyCode', numCode);
       varTemp2 := GConst.fncXMLExtract(xmldoc, 'AccountCode', VarTemp);
       numcode2 := GConst.fncXMLExtract(xmldoc, 'GroupCode', numCode2);
       numcode4 := GConst.fncXMLExtract(xmldoc, 'FiguresIn', numCode4);

       numcode3 := pkgforexprocess.fncpositiongenerate(varUserID, datWorkDate);
       commit;

       if numcode4 = '1' then -- Figures in millions crores
          numFcy := 1000000;
          numInr := 10000000;
       else
          numFcy := 1;    -- Figures in $ and Rs.
          numInr := 1;
       end if;

       if numcode2 = 0 then
          sqlQuery:='select ''All'' Bank,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) spotFcy,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) spotInr,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) spotRUsd,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) spotRInr,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_inr_value else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=7 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_FCY,';

            sqlQuery2 := 'round(nvl(sum((case when posn_maturity_month=7 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=7 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=7 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_Rusd,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_Rusd,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_Rinr,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_Rusd,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_Rinr,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_Rinr,
                   '''' bankcode
              from trsystem997' ;
              varQuery:=' where posn_due_date >='''|| datWorkDate  || '''
             and posn_company_code= decode( '|| numcode || ',30199999, posn_company_code ,' || numcode || ')
             and posn_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =' || '''' || varUserid || '''' || ')
             and posn_Currency_code = Decode( ' || numcode1 || ',30499999,posn_currency_code, ' || numcode1 || ')
             and posn_account_code in('||varTemp2 ||')';

        else
           sqlQuery:='select pkgreturncursor.fncgetdescription(posn_counter_party, 2) Bank,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) spotFcy,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) spotInr,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) spotRUsd,
                   round(nvl(sum((case when posn_maturity_month=0 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) spotRInr,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_inr_value else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=1 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 1), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=2 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 2), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=3 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 3), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=4 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 4), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=5 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 5), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=6 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 6), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=7 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_FCY,';

            sqlQuery2 := 'round(nvl(sum((case when posn_maturity_month=7 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=7 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=7 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 7), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_Rusd,
                   round(nvl(sum((case when posn_maturity_month=8 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 8), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=9 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 9), 'mon') ||'_RInr,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_Rusd,
                   round(nvl(sum((case when posn_maturity_month=10 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 10), 'mon') ||'_Rinr,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_Rusd,
                   round(nvl(sum((case when posn_maturity_month=11 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 11), 'mon') ||'_Rinr,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_transaction_amount else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_FCY,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_inr_value else 0 end ))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_Inr,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_revalue_usd else 0 end))/'|| numFcy ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_RUsd,
                   round(nvl(sum((case when posn_maturity_month=12 then posn_revalue_inr else 0 end))/'|| numInr ||', 0), 4) '|| to_char(add_months(datWorkDate , 12), 'mon') ||'_Rinr,
                   posn_counter_party bankcode
              from trsystem997';

              varQuery:=' where posn_due_date >='''|| datWorkDate  || '''
             and posn_company_code= decode( '|| numcode || ',30199999, posn_company_code ,' || numcode || ')
              and posn_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =' || '''' || varUserid || '''' || ')
             and posn_Currency_code = Decode( ' || numcode1 || ',30499999,posn_currency_code, ' || numcode1 || ')
             and posn_account_code in('||varTemp2 ||')
           group by posn_counter_party';
        end if;

     Open Gencursor for  sqlQuery || sqlQuery2 || varQuery;

    Goto Process_End;
  end if;

 if numInfoType = Gconst.REFGAPVIEWDETAILS then
      varoperation := 'Extracting Cursor for Cash flow details';
      numcode := Gconst.fncXMLExtract(xmldoc,'CompanyCode',numcode);
      numcode1 := GConst.fncXMLExtract(xmldoc, 'CurrencyCode', numCode);
      numcode2 := GConst.fncXMLExtract(xmldoc, 'MaturityMonth', numCode);
      numcode3 := GConst.fncXMLExtract(xmldoc, 'BankCode', numCode3);
      numcode4 := GConst.fncXMLExtract(xmldoc, 'FiguresIn', numCode4);
      varTemp2 := GConst.fncXMLExtract(xmldoc, 'AccountCode', VarTemp);

      if numcode4 = '1' then -- Figures in millions crores
         numFcy := 1000000;
         numInr := 10000000;
      else
         numFcy := 1;    -- Figures in $ and Rs.
         numInr := 1;
      end if;

      sqlQuery := 'select pkgreturncursor.fncgetdescription(posn_company_code, 2) company,
                          pkgreturncursor.fncgetdescription(posn_currency_code, 2) currency,
                          pkgreturncursor.fncgetdescription(posn_account_code, 2) account,
                          posn_reference_number ref_Number,
                          posn_reference_date ref_Date,
                          --pkgreturncursor.fncgetdescription(posn_dealer_id, 2) dealer,
                          pkgreturncursor.fncgetdescription(posn_counter_party, 2) counter_party,
                          --posn_transaction_amount trans_amount,
                          posn_fcy_rate fcy_rate,
                          posn_usd_rate usd_rate,
                          --round(nvl(posn_inr_value, 0)/' || numInr || ', 4) inr_value,
                          round(nvl(posn_usd_value, 0)/' || numFcy || ', 4) usd_value,
                          posn_m2m_usdrate m2m_usdrate,
                          posn_m2m_inrrate m2m_inrrate,
                          round(nvl(posn_transaction_amount, 0)/' || numFcy || ', 4) trans_amount,
                          round(nvl(posn_inr_value, 0)/' || numInr || ', 4) trans_inr,
                          round(nvl(posn_revalue_usd, 0)/' || numFcy || ', 4) reval_usd,
                          round(nvl(posn_revalue_inr, 0)/' || numInr || ', 4) reval_inr,
                          --round(nvl(posn_position_usd, 0)/numFcy, 4) position_usd,
                          --round(nvl(posn_position_inr, 0)/numInr, 4) position_inr,
                          posn_due_date due_date,
                          posn_maturity_month maturity,
                          pkgreturncursor.fncgetdescription(posn_product_code, 2) product,
                          posn_user_id userid,
                          posn_reference_serial ref_Serial,
                          posn_account_code AccountCode,
                          posn_counter_party bankcode
                     from trsystem997
                    where posn_due_date >='''|| datWorkDate  || '''
                      and posn_company_code= decode(' || numcode || ',30199999, posn_company_code ,' || numcode || ')
                      and posn_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =' || '''' || varUserid || '''' || ')
                      and posn_Currency_code = Decode(' || numcode1 || ',30499999,posn_currency_code,' || numcode1 || ')
                      and posn_maturity_month = ' || numcode2 || '
                      and posn_counter_party = decode(' || numcode3 || ', 0,posn_counter_party,' || numcode3 || ')
                      and posn_account_code in('||varTemp2 ||')
                    order by posn_maturity_month';

      open gencursor
       for sqlQuery;

    Goto Process_End;
  end if;
  -- end modification 24apr2012 --

if numinfotype =gconst.REFRATES then
      varOperation := 'Extracting Information For Rates For Calculation';
      numcode := gconst.fncxmlextract(xmldoc,'Param/BuySell',numcode);
      numcode1 := gconst.fncxmlextract(xmldoc,'Param/BaseCurrency',numcode1);
      numcode2 := gconst.fncxmlextract(xmldoc,'Param/OtherCurrency',numcode2);
      ExecutionDate :=  gconst.fncxmlextract(xmldoc,'Param/MaturityDate',ExecutionDate);

      numrate:=pkgforexprocess.fncGetRate(numcode1,numcode2,datworkdate,numcode,0,ExecutionDate);
      numcustom :=pkgforexprocess.fncGetRate(numcode1,30400003,datworkdate,numcode,0,ExecutionDate);

      select PRMC_BENCHMARK_PERCENT 
        into numRate1
      from trsystem051;
   open gencursor for
          select (nvl(numrate,0)*(numRate1/100)) as VaryRate , numRate1 VaryPercentage, 
                 nvl(numrate,0) as MTMRate, nvl(numcustom,0) as CustomRate 
          from dual;

   Goto Process_End;
end if;
--added bay ishwarachandra.
--    IF  numInfoType =gconst.REFCUSTOMRATEIMP THEN
--        VAROPERATION := 'Extracting Custome rate';
--        VARTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'ReferenceDate',VARTEMP);
--        DATTEMP := TO_DATE(RPAD(VARTEMP,10),'dd-mm-yyyy');
        --insert into temp values (VARTEMP,DATTEMP);commit;
 --         OPEN GENCURSOR FOR
 --             SELECT nvl(ERAT_IMPORT_CUSTOM,0) AS "customrate" FROM TFSYSTEM009
 --             where to_char(ERAT_EFFECTIVE_DATE,'MON-YYYY') = to_char(datTemp,'MON-YYYY');
 --         GOTO process_end;
 --   END IF;
 -- ramya updates starts 11/07/08 for extracting BaseCurrencies
 if numinfotype =gconst.REFBASECURRENCY then
     varOperation := 'Extracting base currencies';
     open gencursor for
           select cncy_long_description as LongDescription,cncy_pick_code  as CurrencyCode
             from trmaster304
            where cncy_principal_yn = 12400001;
     Goto Process_End;
 end if;
 -- ramya updates ends
 if numinfotype =gconst.REFCOMPANYDETAILS then
     varoperation := 'Extracting Company Parameters';
     open gencursor for
        select PRMC_COMPANY_NAME CompanyName,PRMC_PHONE_NUMBER PhoneNumber,
               PRMC_FAX_NUMBER FaxNumber,PRMC_EMAIL_ID EmailId,
               PRMC_SMS_NUMBER SmsNumber,PRMC_SMS_PORT SmsPort,
               PRMC_SMS_BAUDRATE BaudRate,PRMC_MAIL_USERID MailID,
               PRMC_PASSWORD_KEY PassKey,PRMC_PASSWORD_CODE PassCode,
               PRMC_SMTP_SERVER SmtpServer,PRMC_SMTP_PORT smtpPort,
               PRMC_MAIL_USER mailUser,
               PRMC_ORDER_LINKING_ONHEDGEDEAL as OrderLinking,
               PRMC_ORDER_LINKING_FUTUREDEAL as FutureLinking,
               PRMC_ORDER_LINKING_OPTIONDEAL as OptionLinking,
               PRMC_LETTER_PRINTING as LetterPrinting,
               PRMC_VOUCHER_PASS as VoucherPass
          from trsystem051
          where PRMC_EFFECTIVE_DATE = (select max(PRMC_EFFECTIVE_DATE) from trsystem051);
    goto process_end;
 end if;
if numinfotype = gconst.refhedgerisk then
        varoperation := 'Extracting Hedge Risk Details';
        numcode := pkgforexprocess.fnchedgerisk(datworkdate);

        open gencursor for
                  select pkgreturncursor.fncgetdescription(stop_currency_code,   2) "currency",
                      pkgreturnreport.fncConvRs(sum(stop_order_value),2,gconst.USDOLLAR) "position fcy",
                      pkgreturnreport.fncConvRs(sum(stop_order_value *stop_order_rate)) as "position inr",
                      pkgreturnreport.fncConvRs(sum(stop_unhedge_portion),2,gconst.USDOLLAR) "unhedgeamt",
                      pkgreturnreport.fncConvRs(sum(stop_loss_inr)) "loss(inr)"
                      from trsystem994
                      group by stop_currency_code;

       Goto Process_End;
      end if;

if numinfotype = gconst.refhedgerisk1 then
      varoperation := 'extracting hedge risk details';

      open gencursor for
            select stop_order_date as "order date",stop_oder_number "order no",
                pkgreturncursor.fncgetdescription(stop_currency_code,   1) as "currency",
                pkgreturnreport.fncConvRs(stop_order_value,2,gconst.USDOLLAR) "order value", round(stop_order_rate,4) "order rate",
                pkgreturnreport.fncConvRs(stop_hedge_portion,2,gconst.USDOLLAR) "hedged protion",
                pkgreturnreport.fncConvRs(stop_unhedge_portion,2,gconst.USDOLLAR) "unhedge protion",
                stop_unhedge_percent "% of unhedged protion", round(stop_loss_rate,2) "stop loss level",
                round(stop_m2m_rate,6) "m2m rate", round(stop_loss_percent,2) "loss level in % terms",
                pkgreturnreport.fncConvRs(stop_loss_inr) "loss(inr)"
                from trsystem994;

     Goto Process_End;
end if;

 
if numinfotype = gconst.refkeygroup then
        varoperation := 'Extracting Max Keynumber for the Particular KeyGroup ';
       
        numcode := gconst.fncxmlextract(xmldoc,'Param/KeyGroup', numcode);
       
        open gencursor for
                 select max(pick_key_number)  +1 keynumber
                     from trmaster001
                     where pick_key_group = numcode
                     and PICK_RECORD_STATUS not in(10200006,10200005)
                     and pick_key_number not in(99999)
                     group by pick_key_group;

     Goto Process_End;
end if;
if numinfotype = gconst.refquery then
      varoperation := 'Extracting the information for the Dynamic Report ';
      varquery := gconst.fncreturnparam(paramdata,'TableName');

      open gencursor for   varquery ;

     Goto Process_End;
end if;

If numinfotype = gconst.REFCUSTOMERDETAILS then
  varoperation := 'Extracting the information for the Customer Details ';
  --numcode := gconst.fncxmlextract(xmldoc,'CompanyCode',   numcode);
  if varentity = 'EXPORTTRADEREGISTER' then
       open gencursor for
            select cust_pick_code as "ID",cust_long_description as "Name",
                cust_short_description as Shortdesc
              from trmaster305
            where 
            --Decode(cust_company_code,10399999,numcode,cust_company_code) in (numcode,30199999)
            --and
            cust_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id = varUserID)
            and cust_customer_type in (GConst.BUYER, GConst.BOTHCUSTOMERS)
           and 
            cust_record_status not in (gconst.statusinactive,   gconst.statusdeleted)
            order by cust_pick_code;
  else
      open gencursor for
            select cust_pick_code as "ID",cust_long_description as "Name",
            cust_short_description as Shortdesc
            from trmaster305
            where 
            --Decode(cust_company_code,10399999,numcode,cust_company_code) in (numcode,30199999)
            --and
            cust_Company_Code in( select usco_company_code from trsystem022a
                                   where usco_user_id = varUserID)
            and  cust_customer_type in (GConst.SUPPLER, GConst.BOTHCUSTOMERS)
            and cust_record_status not in (gconst.statusinactive,   gconst.statusdeleted)
            order by cust_pick_code;
  end if;
 Goto Process_End;
end if;


 if numInfoType = GConst.REFVOUCHERDETAIL then
    varOperation := 'Getting Cursor for Current Account Transactions';
    varTemp := GConst.fncXMLExtract(xmlDoc, 'VoucherReference',varTemp);
    numTemp := GConst.fncXMLExtract(xmlDoc, 'ReferenceSerial',numTemp);

    open Gencursor for
      select bcac_voucher_reference VoucherReference,
        bcac_reference_serial Serial, bcac_voucher_date "Date",
        fncGetDescription(bcac_crdr_code, GConst.PICKUPSHORT) Crdr,
        fncGetDescription(bcac_account_head, GConst.PICKUPSHORT) AccountHead,
        fncGetDescription(bcac_record_type, GConst.PICKUPSHORT) ChargeType,
        bcac_voucher_inr VoucherAmt, bcac_voucher_detail VoucherDetail
        from CurrentAccountMaster
        where bcac_voucher_reference = varTemp
         and bcac_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =' || '''' || varUserid || '''' || ')
        and bcac_reference_serial = numTemp
        and bcac_record_status != GConst.STATUSDELETED;

    Goto Process_End;
  End if;
-------------------------------------------------------------------------------------
  if numInfoType = Gconst.REFVOUCHERREFERENCE then
    varOperation := 'Extracting information for voucher reference';
    numCode := GConst.fncXMLExtract(xmlDoc, 'VoucherType', numCode);

    if numCode = GConst.EVENTPURCHASE then
      Open Gencursor for
      select deal_deal_number "Reference", deal_serial_number "Serial",
        deal_execute_Date "DealDate",
        fncGetDescription(deal_counter_party, GConst.PICKUPLONG) "BankName",
        fncGetDescription(deal_base_currency, GConst.PICKUPSHORT) "Base",
        fncGetDescription(deal_other_currency, GConst.PICKUPSHORT) "Other",
        deal_base_amount "DealAmount", deal_other_amount "OtherAmount",
        deal_exchange_rate "Rate", deal_amount_local "Local",
        deal_counter_party "BankCode", 0 "RecordStatus"
        from trtran001

        where deal_buy_sell = GConst.PURCHASEDEAL
        and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id = varUserid );
    elsif numCode = GConst.EVENTSALE then
       Open Gencursor for
       select deal_deal_number "Reference", deal_serial_number "Serial",
        deal_execute_Date "DealDate",
        fncGetDescription(deal_counter_party, GConst.PICKUPLONG) "BankName",
        fncGetDescription(deal_base_currency, GConst.PICKUPSHORT) "Base",
        fncGetDescription(deal_other_currency, GConst.PICKUPSHORT) "Other",
        deal_base_amount "DealAmount", deal_other_amount "OtherAmount",
        deal_exchange_rate "Rate", deal_amount_local "Local",
        deal_counter_party "BankCode", 0 "RecordStatus"
        from trtran001
        where deal_buy_sell = GConst.SALEDEAL
         and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );

    elsif numCode = GConst.EVENTPURREVERSAL then
      Open Gencursor for
       select deal_deal_number "Reference", deal_serial_number "Serial",
        deal_execute_Date "DealDate",
        fncGetDescription(deal_counter_party, GConst.PICKUPLONG) "BankName",
        fncGetDescription(deal_base_currency, GConst.PICKUPSHORT) "Base",
        fncGetDescription(deal_other_currency, GConst.PICKUPSHORT) "Other",
        cdel_cancel_amount "DealReverse", cdel_other_amount "OtherAmount",
        cdel_cancel_rate "Rate", cdel_cancel_inr "Local",
        deal_counter_party "BankCode", 0 "RecordStatus"
        from trtran001, trtran006
        where deal_deal_number = cdel_deal_number
        and deal_serial_number = cdel_deal_serial
        and deal_buy_sell = GConst.PURCHASEDEAL
        and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );

    elsif numCode = GConst.EVENTSALREVERSAL then
       Open Gencursor for
       select deal_deal_number "Reference", deal_serial_number "Serial",
        deal_execute_Date "DealDate",
        fncGetDescription(deal_counter_party, GConst.PICKUPLONG) "BankName",
        fncGetDescription(deal_base_currency, GConst.PICKUPSHORT) "Base",
        fncGetDescription(deal_other_currency, GConst.PICKUPSHORT) "Other",
        cdel_cancel_amount "DealReverse", cdel_other_amount "OtherAmount",
        cdel_cancel_rate "Rate", cdel_cancel_inr "Local",
        deal_counter_party "BankCode", 0 "RecordStatus"
        from trtran001, trtran006
        where deal_deal_number = cdel_deal_number
        and deal_serial_number = cdel_deal_serial
        and deal_buy_sell = GConst.SALEDEAL
        and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );


    elsif numCode = GConst.EVENTPURROLLOVER then
      Open Gencursor for
       select deal_deal_number "Reference", deal_serial_number "Serial",
        deal_execute_Date "DealDate",
        fncGetDescription(deal_counter_party, GConst.PICKUPLONG) "BankName",
        fncGetDescription(deal_base_currency, GConst.PICKUPSHORT) "Base",
        fncGetDescription(deal_other_currency, GConst.PICKUPSHORT) "Other",
        lmod_enhanced_fcy "DealRollover", lmod_other_amount "OtherAmount",
        lmod_enhanced_rate "Rate", lmod_local_amount "Local",
        deal_counter_party "BankCode", 0 "RecordStatus"
        from trtran001, trtran009
        where deal_deal_number = lmod_reference_number
        and deal_serial_number = lmod_reference_serial
        and deal_buy_sell = GConst.PURCHASEDEAL
        and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );

    elsif numCode = GConst.EVENTSALROLLOVER then
      Open Gencursor for
       select deal_deal_number "Reference", deal_serial_number "Serial",
        deal_execute_Date "DealDate",
        fncGetDescription(deal_counter_party, GConst.PICKUPLONG) "BankName",
        fncGetDescription(deal_base_currency, GConst.PICKUPSHORT) "Base",
        fncGetDescription(deal_other_currency, GConst.PICKUPSHORT) "Other",
        lmod_enhanced_fcy "DealRollover", lmod_other_amount "OtherAmount",
        lmod_enhanced_rate "Rate", lmod_local_amount "Local",
        deal_counter_party "BankCode", 0 "RecordStatus"
        from trtran001, trtran009
        where deal_deal_number = lmod_reference_number
        and deal_serial_number = lmod_reference_serial
        and deal_buy_sell = GConst.SALEDEAL
        and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );

    End if;
    Goto Process_End;
 end if;
if numInfoType = GConst.REFCURRENTSTATEMENT then
    varOperation := 'Extracting Statement';
    numCode := GConst.fncXMLExtract(xmlDoc, 'LocalBank',numTemp);
    datTemp := GConst.fncXMLExtract(xmlDoc, 'FromDate',datTemp);
    datTemp1 := GConst.fncXMLExtract(xmlDoc, 'ToDate',datTemp);
    numCode1 := GConst.fncXMLExtract(xmlDoc, 'StatType',numCode);

    numError := fncGenerateStatement(datWorkDate, numCompanyCode,
    numCode, datTemp, datTemp1,numCode1);
--    elsif numCode1 = GConst.OPTIONNO then
--      numError := fncGenerateStatement(datWorkDate, numCompanyCode,
--        numCode, datTemp, datTemp1,2);
--    end if;

    Open GenCursor for
        select csmt_serial_number "Srl", csmt_transaction_date "Date",
               csmt_cheque_number "ChequeNo", csmt_voucher_detail "Detail",
               csmt_debit_amount "Debit", csmt_credit_amount "Credit",
               csmt_balance_amount "Balance",
               pkgreturncursor.fncGetDescription(bcac_recon_flag,2) "Recon YesNo",
               csmt_Recon_inr "Recon INR",csmt_Recon_Date "Recon Date",
               csmt_recon_remarks "Recon Remarks"
          from trsystem993
         where csmt_statement_date = datWorkDate
          -- and csmt_company_code = numCompanyCode
           and csmt_local_bank = numCode
--           and csmt_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )


      order by csmt_serial_number;

    Goto Process_End;
End if;

 if numinfoType =Gconst.REFACCOUNTNUMBER then
    varOperation := 'ExtractingBankCode';
    numcode := Gconst.fncXMLExtract(xmldoc,'CommandSet/BankCode',numcode);

    open gencursor for
    select lbnk_account_number AccountNumber from trmaster306
     where lbnk_pick_code=numcode
     and lbnk_record_status not in (10200005,10200006);
     Goto Process_End;

 end if;

 if numinfoType =Gconst.REFBANKWITHCURRENTACC then
    varOperation := 'Extracting Bank With Current Account';
    --numcode := Gconst.fncXMLExtract(xmldoc,'BankCode',numcode);
    numcode := Gconst.fncXMLExtract(xmldoc,'CompanyCode',numcode);
    

    open gencursor for
     select Lbnk_Pick_Code "KeyValue",Lbnk_Pick_Code "KeyString",
                   LBNK_SHORT_DESCRIPTION "ShortDescription",lbnk_Long_description "LongDescription",
                   306 "KeyType"
     from trmaster306 
      where lbnk_company_code=decode(numcode,30699999,lbnk_company_code,numcode)
       and lbnk_account_number is not null
       and lbnk_record_status not in (10200005,10200006);
     Goto Process_End;

 end if;
if numinfoType =Gconst.REFBANKWITHCURACANDNBFC then
    varOperation := 'Extracting Bank With Current Account';
    numcode := Gconst.fncXMLExtract(xmldoc,'CompanyCode',numcode);

    open gencursor for
     select Lbnk_Pick_Code "KeyValue",Lbnk_Pick_Code "KeyString",
                   LBNK_SHORT_DESCRIPTION "ShortDescription",lbnk_Long_description "LongDescription",
                   306 "KeyType"
         from trmaster306 
          where lbnk_company_code=decode(numcode,30699999,lbnk_company_code,numcode)
           and lbnk_account_number is not null
           and lbnk_record_status not in (10200005,10200006)
     UNION ALL
     
     select Lbnk_Pick_Code "KeyValue",Lbnk_Pick_Code "KeyString",
                   LBNK_SHORT_DESCRIPTION "ShortDescription",lbnk_Long_description "LongDescription",
                   306 "KeyType"
     from trmaster306 
      where lbnk_account_number is null
       and lbnk_record_status not in (10200005,10200006);
     Goto Process_End;

 end if;
if numinfoType =GConst.REFREPORTIDS then
   varOperation := 'Extracting Report ids';

       open gencursor for
          select menu_program_unit as keyvalue,
                 menu_description as menu_desc from menufile
           where menu_menu_id > 1000
             and menu_program_unit is not null
        order by menu_menu_id,menu_parent_id;

       Goto Process_End;
End if;
--  if numinfotype=Gconst.REFPOSITIONGAPVIEW then
--    varOperation := 'Extraction Position GAP View';
--    numCode1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', numCode1);
--    numCode2 := GConst.fncxmlextract(xmldoc, 'CompanyCode', numCode2);
--    numCode3 := GConst.fncxmlextract(xmldoc, 'ProductCode', numCode3);
--    numCode4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', numCode4);
--    --numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);
--   -- insert into temp values(numCode1,numCode2); commit;
--    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);
--
--  Open GenCursor for
--    select (case when ExposureType='Export' then 1
--               when ExposureType='Hedge Sell' then 1
--               when exposureType='Import' then 2
--               when exposureType ='Hedge Buy' then 2 end ) ExposureOrder,
--           (case when ExposureType='Export' then 1
--               when ExposureType='Hedge Sell' then 2
--               when exposureType='Import' then 1
--               when exposureType ='Hedge Buy' then 2 end ) ExposureSubOrder,
--      pkgreturncursor.fncgetdescription(CompanyCode,2) "Company",
--            pkgreturncursor.fncgetdescription(CurrencyCode,2) "Currency",
--            ExposureType,
--            pkgreturncursor.fncgetdescription(ProductCode,2) "Product",
--            pkgreturncursor.fncgetdescription(SubProductCode,2) "SubProduct",
--            CompanyCode CompanyCode,CurrencyCode CurrencyCode,
--            ProductCode ProductCode,SubProductCode SubProductCode,
--      (sum(decode( DueDays,0,AmountFCY,0)))/1000 "Forward1",
--      round(sum(decode( DueDays,0,AmountLocal,0))/ sum(decode( DueDays,0,AmountFCY,1)),6) "BenchmarkRate1",
--      round(sum(decode( DueDays,0,AmountMTMLocal,0))/ sum(decode( DueDays,0,AmountFCY,1)),6) "MTMRate1",
--      (sum(decode( DueDays,1,AmountFCY,0)))/1000 "Forward2",
--      round(sum(decode( DueDays,1,AmountLocal,0))/ sum(decode( DueDays,1,AmountFCY,1)),6) "BenchmarkRate2",
--      round(sum(decode( DueDays,1,AmountMTMLocal,0))/ sum(decode( DueDays,1,AmountFCY,1)),6) "MTMRate2",
--      (sum(decode( DueDays,2,AmountFCY,0)))/1000 "Forward3",
--      round(sum(decode( DueDays,2,AmountLocal,0))/ sum(decode( DueDays,2,AmountFCY,1)),6) "BenchmarkRate3",
--      round(sum(decode( DueDays,2,AmountMTMLocal,0))/ sum(decode( DueDays,2,AmountFCY,1)),6) "MTMRate3",
--      (sum(decode( DueDays,3,AmountFCY,0)))/1000 "Forward4",
--      round(sum(decode( DueDays,3,AmountLocal,0))/ sum(decode( DueDays,3,AmountFCY,1)),6) "BenchmarkRate4",
--      round(sum(decode( DueDays,3,AmountMTMLocal,0))/ sum(decode( DueDays,3,AmountFCY,1)),6) "MTMRate4",
--      (sum(decode( DueDays,4,AmountFCY,0)))/1000 "Forward5",
--      round(sum(decode( DueDays,4,AmountLocal,0))/ sum(decode( DueDays,4,AmountFCY,1)),6) "BenchmarkRate5",
--      round(sum(decode( DueDays,4,AmountMTMLocal,0))/ sum(decode( DueDays,4,AmountFCY,1)),6) "MTMRate5",
--      (sum(decode( DueDays,5,AmountFCY,0)))/1000 "Forward6",
--      round(sum(decode( DueDays,5,AmountLocal,0))/ sum(decode( DueDays,5,AmountFCY,1)),6) "BenchmarkRate6",
--      round(sum(decode( DueDays,5,AmountMTMLocal,0))/ sum(decode( DueDays,5,AmountFCY,1)),6) "MTMRate6",
--      (sum(decode( DueDays,6,AmountFCY,0)))/1000 "Forward7",
--      round(sum(decode( DueDays,6,AmountLocal,0))/ sum(decode( DueDays,6,AmountFCY,1)),6) "BenchmarkRate7",
--      round(sum(decode( DueDays,6,AmountMTMLocal,0))/ sum(decode( DueDays,6,AmountFCY,1)),6) "MTMRate7",
--      (sum(decode( DueDays,7,AmountFCY,0)))/1000 "Forward8",
--      round(sum(decode( DueDays,7,AmountLocal,0))/ sum(decode( DueDays,7,AmountFCY,1)),6) "BenchmarkRate8",
--      round(sum(decode( DueDays,7,AmountMTMLocal,0))/ sum(decode( DueDays,7,AmountFCY,1)),6) "MTMRate8",
--      (sum(decode( DueDays,8,AmountFCY,0)))/1000 "Forward9",
--      round(sum(decode( DueDays,8,AmountLocal,0))/ sum(decode( DueDays,8,AmountFCY,1)),6) "BenchmarkRate9",
--      round(sum(decode( DueDays,8,AmountMTMLocal,0))/ sum(decode( DueDays,8,AmountFCY,1)),6) "MTMRate9",
--      (sum(decode( DueDays,9,AmountFCY,0)))/1000 "Forward10",
--      round(sum(decode( DueDays,9,AmountLocal,0))/ sum(decode( DueDays,9,AmountFCY,1)),6) "BenchmarkRate10",
--      round(sum(decode( DueDays,9,AmountMTMLocal,0))/ sum(decode( DueDays,9,AmountFCY,1)),6) "MTMRate10",
--      (sum(decode( DueDays,10,AmountFCY,0)))/1000 "Forward11",
--      round(sum(decode( DueDays,10,AmountLocal,0))/ sum(decode( DueDays,10,AmountFCY,1)),6) "BenchmarkRate11",
--      round(sum(decode( DueDays,10,AmountMTMLocal,0))/ sum(decode( DueDays,10,AmountFCY,1)),6) "MTMRate11",
--      (sum(decode( DueDays,11,AmountFCY,0)))/1000 "Forward12",
--      round(sum(decode( DueDays,11,AmountLocal,0))/ sum(decode( DueDays,11,AmountFCY,1)),6) "BenchmarkRate12",
--      round(sum(decode( DueDays,11,AmountMTMLocal,0))/ sum(decode( DueDays,11,AmountFCY,1)),6) "MTMRate12"
--    from (select posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,POSN_SUBPRODUCT_CODE SubProductCode,
--         posn_account_code AccountCode,
--         sum(posn_transaction_amount) AmountFCY,
--        sum((posn_transaction_amount*posn_fcy_rate)) AmountLocal,
--       nvl(sum(posn_M2M_INRRATE*Posn_transaction_amount),0) AmountMTMLocal,
--         (case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
--                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
--                      else
--                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) DueDays,
--         (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
--           when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
--                                      25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType
--  from trsystem997
--  where posn_transaction_amount!=0
--  and posn_fcy_rate !=0
--  and posn_company_code=numcode2
--  and posn_currency_code=numcode1
--  and posn_product_code= decode( numcode3,33300000,posn_product_code,numcode3)
--  and POSN_SUBPRODUCT_CODE= decode( numCode4,33800000,POSN_SUBPRODUCT_CODE,numCode4)
--
--  group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,(case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
--                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
--                      else
--                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) )
--  group by CompanyCode,CurrencyCode,ExposureType,ProductCode,SubProductCode
--  ORDER BY 1 ASC;
--
--  goto process_end;
-- end if;

---updates by arjun as on 17022014

-- 
--from badresh as per manjureddy
-----Commented by Ishwarachandra -- for cross currency MTM calculation
-- if numinfotype=Gconst.REFPOSITIONGAPVIEW then
--    varOperation := 'Extraction Position GAP View';
--    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--    vartemp := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--    vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--    vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--    vartemp5 := GConst.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
--    numCode1 := GConst.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
--    numCode2 := GConst.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);
--       
--    --numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);  
--    insert into temp values(numCode1,numCode2); commit;
--    --numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,datWorkDate);commit;
--    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate,
--                 vartemp,vartemp1,vartemp3,vartemp4,vartemp5,
--                 numCode1,numCode2);
--   
--  Open GenCursor for  
-- select (case when ExposureType='Export' then 1 
--               when ExposureType='Hedge Sell' then 2 
--               when exposureType='Import' then 1 
--               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
--           (case when ExposureType='Export' then 1 
--               when ExposureType='Hedge Sell' then 1 
--               when exposureType='Import' then 2 
--               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
--        ExposureType as "ExposureType",
--        sum(Forward1) "Forward1",
--        Nvl(case when sum(AmountLocal1) > 0 then
--        Round(sum(AmountLocal1)/sum(AmountFCY1),6)
--        end,0) as "BenchmarkRate1" ,
--        Nvl(Round(case when sum(AmountMTMLocal1) > 0 then
--        Round(sum(AmountMTMLocal1)/sum(AmountFCY1),6) 
--        End,6),0) as "MTMRate1",
--        sum(Forward2) "Forward2",
--        Nvl(case when sum(AmountLocal2) > 0 then
--        Round(sum(AmountLocal2)/sum(AmountFCY2),6) 
--        end,0)  as "BenchmarkRate2" ,
--        Nvl(case when sum(AmountMTMLocal2) > 0 then        
--        Round(sum(AmountMTMLocal2)/sum(AmountFCY2),6) end,0) as "MTMRate2",
--        sum(Forward3) "Forward3",
--        Nvl(case when sum(AmountLocal3) > 0 then
--        Round(sum(AmountLocal3)/sum(AmountFCY3),6) end,0) as "BenchmarkRate3" ,
--        Nvl(case when sum(AmountMTMLocal3) > 0 then        
--        Round(sum(AmountMTMLocal3)/sum(AmountFCY3),6) end,0) as "MTMRate3",
--
--        sum(Forward4) "Forward4",
--        Nvl(case when sum(AmountLocal4) > 0 then        
--        Round(sum(AmountLocal4)/sum(AmountFCY4),6) end,0) as "BenchmarkRate4" ,
--        Nvl(case when sum(AmountMTMLocal4) > 0 then        
--        Round(sum(AmountMTMLocal4)/sum(AmountFCY4),6)end,0) as "MTMRate4",
--        
--        sum(Forward5) "Forward5",
--        Nvl(case when sum(AmountLocal5) > 0 then          
--        Round(sum(AmountLocal5)/sum(AmountFCY5),6) end,0) as "BenchmarkRate5" ,
--        Nvl(case when sum(AmountMTMLocal5) > 0 then  
--        Round(sum(AmountMTMLocal5)/sum(AmountFCY5),6) end,0) as "MTMRate5",
--        
--        sum(Forward6) "Forward6",
--        Nvl(case when sum(AmountLocal6) > 0 then 
--        Round(sum(AmountLocal6)/sum(AmountFCY6),6) end,0) as "BenchmarkRate6" ,
--        Nvl(case when sum(AmountMTMLocal6) > 0 then 
--        Round(sum(AmountMTMLocal6)/sum(AmountFCY6),6) end,0) as "MTMRate6",
--        
--        sum(Forward7) "Forward7",
--        Nvl(case when sum(AmountLocal7) > 0 then 
--        Round(sum(AmountLocal7)/sum(AmountFCY7),6) end,0) as "BenchmarkRate7",
--        Nvl(case when sum(AmountMTMLocal7) > 0 then 
--        Round(sum(AmountMTMLocal7)/sum(AmountFCY7),6) end,0) as "MTMRate7",
--        
--        sum(Forward8) "Forward8",
--        Nvl(case when sum(AmountLocal8) > 0 then 
--        Round(sum(AmountLocal8)/sum(AmountFCY8),6) end,0) as "BenchmarkRate8",
--        Nvl(case when sum(AmountMTMLocal8) > 0 then 
--        Round(sum(AmountMTMLocal8)/sum(AmountFCY8),6) end,0) as "MTMRate8",    
--        
--        sum(Forward9) "Forward9",
--        Nvl(case when sum(AmountLocal9) > 0 then 
--        Round(sum(AmountLocal9)/sum(AmountFCY9),6) end,0) as "BenchmarkRate9",
--        Nvl(case when sum(AmountMTMLocal9) > 0 then 
--        Round(sum(AmountMTMLocal9)/sum(AmountFCY9),6) end,0) as "MTMRate9",        
--
--        sum(Forward10) "Forward10",
--        Nvl(case when sum(AmountLocal10) > 0 then 
--        Round(sum(AmountLocal10)/sum(AmountFCY10),6) end,0) as "BenchmarkRate10",
--        Nvl(case when sum(AmountMTMLocal10) > 0 then 
--        Round(sum(AmountMTMLocal10)/sum(AmountFCY10),6) end,0) as "MTMRate10",     
--        
--        sum(Forward11) "Forward11",
--        Nvl(case when sum(AmountLocal11) > 0 then 
--        Round(sum(AmountLocal11)/sum(AmountFCY11),6) end,0) as "BenchmarkRate11",
--        Nvl(case when sum(AmountMTMLocal11) > 0 then 
--        Round(sum(AmountMTMLocal11)/sum(AmountFCY11),6) end,0) as "MTMRate11", 
--        
--        sum(Forward12) "Forward12",
--        Nvl(case when sum(AmountLocal12) > 0 then 
--        Round(sum(AmountLocal12)/sum(AmountFCY12),6) end,0) as "BenchmarkRate12",
--        Nvl(case when sum(AmountMTMLocal12) > 0 then 
--        Round(sum(AmountMTMLocal12)/sum(AmountFCY12),6) end,0) as "MTMRate12",
--        sum(Forward1 + Forward2 + Forward3 + Forward4 + Forward5 + Forward6 +
--        Forward7 + Forward8 + Forward9 + Forward10 +Forward11 + Forward12) as "Total"
--        from(
--    select 
--     ExposureType ExposureType ,
--      (decode( DueDays,0,AmountFCY,0))/1000 Forward1,
--      decode(DueDays,0,AmountLocal,0)AmountLocal1,
--      decode(DueDays,0,AmountFCY,0) AmountFCY1,
--      decode(DueDays,0,AmountMTMLocal,0) AmountMTMLocal1,
--      
--      (decode( DueDays,1,AmountFCY,0))/1000 Forward2,
--      decode(DueDays,1,AmountLocal,0)AmountLocal2,
--      decode(DueDays,1,AmountFCY,0) AmountFCY2,
--      decode(DueDays,1,AmountMTMLocal,0)AmountMTMLocal2,
--      
--      (decode( DueDays,2,AmountFCY,0))/1000 Forward3,
--      decode( DueDays,2,AmountLocal,0) AmountLocal3,
--      decode( DueDays,2,AmountFCY,0) AmountFCY3,
--      decode( DueDays,2,AmountMTMLocal,0)AmountMTMLocal3,
--      
--      (decode( DueDays,3,AmountFCY,0))/1000 Forward4,
--      decode( DueDays,3,AmountLocal,0) AmountLocal4,
--      decode( DueDays,3,AmountFCY,0) AmountFCY4,
--      decode( DueDays,3,AmountMTMLocal,0)AmountMTMLocal4,
--      
--      (decode( DueDays,4,AmountFCY,0))/1000 Forward5,
--      decode( DueDays,4,AmountLocal,0)AmountLocal5,
--      decode( DueDays,4,AmountFCY,0) AmountFCY5,
--      decode( DueDays,4,AmountMTMLocal,0) AmountMTMLocal5,
--      
--      (decode( DueDays,5,AmountFCY,0))/1000 Forward6,
--      decode( DueDays,5,AmountLocal,0)AmountLocal6,
--      decode( DueDays,5,AmountFCY,0) AmountFCY6,
--      decode( DueDays,5,AmountMTMLocal,0)AmountMTMLocal6,
--      
--      (decode( DueDays,6,AmountFCY,0))/1000 Forward7,
--      decode( DueDays,6,AmountLocal,0)AmountLocal7,
--      decode( DueDays,6,AmountFCY,0) AmountFCY7,
--      decode( DueDays,6,AmountMTMLocal,0)AmountMTMLocal7,
--      
--      (decode( DueDays,7,AmountFCY,0))/1000 Forward8,
--      decode( DueDays,7,AmountLocal,0)AmountLocal8,
--      decode( DueDays,7,AmountFCY,0) AmountFCY8,
--      decode( DueDays,7,AmountMTMLocal,0)AmountMTMLocal8,
--      
--      
--      (decode( DueDays,8,AmountFCY,0))/1000 Forward9,
--      decode( DueDays,8,AmountLocal,0)AmountLocal9,
--      decode( DueDays,8,AmountFCY,0) AmountFCY9,
--      decode( DueDays,8,AmountMTMLocal,0) AmountMTMLocal9,
--      
--      (decode( DueDays,9,AmountFCY,0))/1000 Forward10,
--      decode( DueDays,9,AmountLocal,0)AmountLocal10,
--      decode( DueDays,9,AmountFCY,0) AmountFCY10,
--      decode( DueDays,9,AmountMTMLocal,0)AmountMTMLocal10,
--      
--      (decode( DueDays,10,AmountFCY,0))/1000 Forward11,
--      decode( DueDays,10,AmountLocal,0)AmountLocal11,
--      decode( DueDays,10,AmountFCY,0) AmountFCY11,
--      decode( DueDays,10,AmountMTMLocal,0)AmountMTMLocal11,
--      
--      (decode( DueDays,11,AmountFCY,0))/1000 Forward12,
--      decode( DueDays,11,AmountLocal,0)AmountLocal12, 
--      decode( DueDays,11,AmountFCY,0) AmountFCY12,
--      decode( DueDays,11,AmountMTMLocal,0)AmountMTMLocal12
--    from (select posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
--         POSN_SUBPRODUCT_CODE SubProductCode,
--         posn_account_code AccountCode,
--         sum(case when length(vartemp1)>8 then posn_revalue_usd else posn_transaction_amount end) AmountFCY,
--        sum((case when length(vartemp1)>8 then posn_revalue_inr else posn_inr_value end)) AmountLocal,
--       nvl(sum((case when length(vartemp1)>8 then posn_revalue_usd*posn_M2M_USDRATE else posn_transaction_amount*posn_M2M_INRRATE end)),0) AmountMTMLocal,
--         (case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
--                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
--                      else
--                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) DueDays,
--         (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) then 'Export'
--           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
--           when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) then 'Import'
--           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
--                                      25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType
--  from trsystem997
--  where posn_transaction_amount!=0
--  and posn_fcy_rate !=0
--  and instr(vartemp1,posn_currency_code)>0
-- -- and posn_company_code=numcode2
-- -- and posn_currency_code=numcode1
-- -- and posn_product_code= decode( numcode3,33300000,posn_product_code,numcode3)
-- -- and POSN_SUBPRODUCT_CODE= decode( numCode4,33800000,POSN_SUBPRODUCT_CODE,numCode4)
-- 
--  group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,(case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
--                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
--                      else
--                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) ))
--  group by ExposureType
--  --group by CompanyCode,CurrencyCode,ExposureType,ProductCode,SubProductCode
--  ORDER BY 1 ASC;
--  
--      
--  
--  goto process_end;
--  
-- end if;  
-------Updated from demo treasury----------
---------Commented by Ishwarachandra-------
-- if numinfotype=Gconst.REFPOSITIONGAPVIEW then
--    varOperation := 'Extraction Position GAP View';
--    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--    vartemp := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--    vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--    vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--    vartemp5 := GConst.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
--    numCode1 := GConst.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
--    numCode2 := GConst.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);
--       
--    --numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);  
--    insert into temp values(numCode1,numCode2); commit;
--    --numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,datWorkDate);commit;
--    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate,
--                 vartemp,vartemp1,vartemp3,vartemp4,vartemp5,
--                 numCode1,numCode2);
--   
--  Open GenCursor for  
-- select (case when ExposureType='Export' then 1 
--               when ExposureType='Hedge Sell' then 2 
--               when exposureType='Import' then 1 
--               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
--           (case when ExposureType='Export' then 1 
--               when ExposureType='Hedge Sell' then 1 
--               when exposureType='Import' then 2 
--               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
--        ExposureType as "ExposureType",
--        sum(Forward1) "Forward1",
--        Nvl(case when sum(AmountLocal1) > 0 then
--        Round(sum(AmountLocal1)/sum(AmountFCY1),6)
--        end,0) as "BenchmarkRate1" ,
--        Nvl(Round(case when sum(AmountMTMLocal1) > 0 then
--        Round(sum(AmountMTMLocal1)/sum(AmountFCY1),6) 
--        End,6),0) as "MTMRate1",
--        sum(Forward2) "Forward2",
--        Nvl(case when sum(AmountLocal2) > 0 then
--        Round(sum(AmountLocal2)/sum(AmountFCY2),6) 
--        end,0)  as "BenchmarkRate2" ,
--        Nvl(case when sum(AmountMTMLocal2) > 0 then        
--        Round(sum(AmountMTMLocal2)/sum(AmountFCY2),6) end,0) as "MTMRate2",
--        sum(Forward3) "Forward3",
--        Nvl(case when sum(AmountLocal3) > 0 then
--        Round(sum(AmountLocal3)/sum(AmountFCY3),6) end,0) as "BenchmarkRate3" ,
--        Nvl(case when sum(AmountMTMLocal3) > 0 then        
--        Round(sum(AmountMTMLocal3)/sum(AmountFCY3),6) end,0) as "MTMRate3",
--
--        sum(Forward4) "Forward4",
--        Nvl(case when sum(AmountLocal4) > 0 then        
--        Round(sum(AmountLocal4)/sum(AmountFCY4),6) end,0) as "BenchmarkRate4" ,
--        Nvl(case when sum(AmountMTMLocal4) > 0 then        
--        Round(sum(AmountMTMLocal4)/sum(AmountFCY4),6)end,0) as "MTMRate4",
--        
--        sum(Forward5) "Forward5",
--        Nvl(case when sum(AmountLocal5) > 0 then          
--        Round(sum(AmountLocal5)/sum(AmountFCY5),6) end,0) as "BenchmarkRate5" ,
--        Nvl(case when sum(AmountMTMLocal5) > 0 then  
--        Round(sum(AmountMTMLocal5)/sum(AmountFCY5),6) end,0) as "MTMRate5",
--        
--        sum(Forward6) "Forward6",
--        Nvl(case when sum(AmountLocal6) > 0 then 
--        Round(sum(AmountLocal6)/sum(AmountFCY6),6) end,0) as "BenchmarkRate6" ,
--        Nvl(case when sum(AmountMTMLocal6) > 0 then 
--        Round(sum(AmountMTMLocal6)/sum(AmountFCY6),6) end,0) as "MTMRate6",
--        
--        sum(Forward7) "Forward7",
--        Nvl(case when sum(AmountLocal7) > 0 then 
--        Round(sum(AmountLocal7)/sum(AmountFCY7),6) end,0) as "BenchmarkRate7",
--        Nvl(case when sum(AmountMTMLocal7) > 0 then 
--        Round(sum(AmountMTMLocal7)/sum(AmountFCY7),6) end,0) as "MTMRate7",
--        
--        sum(Forward8) "Forward8",
--        Nvl(case when sum(AmountLocal8) > 0 then 
--        Round(sum(AmountLocal8)/sum(AmountFCY8),6) end,0) as "BenchmarkRate8",
--        Nvl(case when sum(AmountMTMLocal8) > 0 then 
--        Round(sum(AmountMTMLocal8)/sum(AmountFCY8),6) end,0) as "MTMRate8",    
--        
--        sum(Forward9) "Forward9",
--        Nvl(case when sum(AmountLocal9) > 0 then 
--        Round(sum(AmountLocal9)/sum(AmountFCY9),6) end,0) as "BenchmarkRate9",
--        Nvl(case when sum(AmountMTMLocal9) > 0 then 
--        Round(sum(AmountMTMLocal9)/sum(AmountFCY9),6) end,0) as "MTMRate9",        
--
--        sum(Forward10) "Forward10",
--        Nvl(case when sum(AmountLocal10) > 0 then 
--        Round(sum(AmountLocal10)/sum(AmountFCY10),6) end,0) as "BenchmarkRate10",
--        Nvl(case when sum(AmountMTMLocal10) > 0 then 
--        Round(sum(AmountMTMLocal10)/sum(AmountFCY10),6) end,0) as "MTMRate10",     
--        
--        sum(Forward11) "Forward11",
--        Nvl(case when sum(AmountLocal11) > 0 then 
--        Round(sum(AmountLocal11)/sum(AmountFCY11),6) end,0) as "BenchmarkRate11",
--        Nvl(case when sum(AmountMTMLocal11) > 0 then 
--        Round(sum(AmountMTMLocal11)/sum(AmountFCY11),6) end,0) as "MTMRate11", 
--        
--        sum(Forward12) "Forward12",
--        Nvl(case when sum(AmountLocal12) > 0 then 
--        Round(sum(AmountLocal12)/sum(AmountFCY12),6) end,0) as "BenchmarkRate12",
--        Nvl(case when sum(AmountMTMLocal12) > 0 then 
--        Round(sum(AmountMTMLocal12)/sum(AmountFCY12),6) end,0) as "MTMRate12",
--        sum(Forward1 + Forward2 + Forward3 + Forward4 + Forward5 + Forward6 +
--        Forward7 + Forward8 + Forward9 + Forward10 +Forward11 + Forward12) as "Total"
--        from(
--    select 
--     ExposureType ExposureType ,
--      (decode( DueDays,0,AmountFCY,0))/1000 Forward1,
--      decode(DueDays,0,AmountLocal,0)AmountLocal1,
--      decode(DueDays,0,AmountFCY,0) AmountFCY1,
--      decode(DueDays,0,AmountMTMLocal,0) AmountMTMLocal1,
--      
--      (decode( DueDays,1,AmountFCY,0))/1000 Forward2,
--      decode(DueDays,1,AmountLocal,0)AmountLocal2,
--      decode(DueDays,1,AmountFCY,0) AmountFCY2,
--      decode(DueDays,1,AmountMTMLocal,0)AmountMTMLocal2,
--      
--      (decode( DueDays,2,AmountFCY,0))/1000 Forward3,
--      decode( DueDays,2,AmountLocal,0) AmountLocal3,
--      decode( DueDays,2,AmountFCY,0) AmountFCY3,
--      decode( DueDays,2,AmountMTMLocal,0)AmountMTMLocal3,
--      
--      (decode( DueDays,3,AmountFCY,0))/1000 Forward4,
--      decode( DueDays,3,AmountLocal,0) AmountLocal4,
--      decode( DueDays,3,AmountFCY,0) AmountFCY4,
--      decode( DueDays,3,AmountMTMLocal,0)AmountMTMLocal4,
--      
--      (decode( DueDays,4,AmountFCY,0))/1000 Forward5,
--      decode( DueDays,4,AmountLocal,0)AmountLocal5,
--      decode( DueDays,4,AmountFCY,0) AmountFCY5,
--      decode( DueDays,4,AmountMTMLocal,0) AmountMTMLocal5,
--      
--      (decode( DueDays,5,AmountFCY,0))/1000 Forward6,
--      decode( DueDays,5,AmountLocal,0)AmountLocal6,
--      decode( DueDays,5,AmountFCY,0) AmountFCY6,
--      decode( DueDays,5,AmountMTMLocal,0)AmountMTMLocal6,
--      
--      (decode( DueDays,6,AmountFCY,0))/1000 Forward7,
--      decode( DueDays,6,AmountLocal,0)AmountLocal7,
--      decode( DueDays,6,AmountFCY,0) AmountFCY7,
--      decode( DueDays,6,AmountMTMLocal,0)AmountMTMLocal7,
--      
--      (decode( DueDays,7,AmountFCY,0))/1000 Forward8,
--      decode( DueDays,7,AmountLocal,0)AmountLocal8,
--      decode( DueDays,7,AmountFCY,0) AmountFCY8,
--      decode( DueDays,7,AmountMTMLocal,0)AmountMTMLocal8,
--      
--      
--      (decode( DueDays,8,AmountFCY,0))/1000 Forward9,
--      decode( DueDays,8,AmountLocal,0)AmountLocal9,
--      decode( DueDays,8,AmountFCY,0) AmountFCY9,
--      decode( DueDays,8,AmountMTMLocal,0) AmountMTMLocal9,
--      
--      (decode( DueDays,9,AmountFCY,0))/1000 Forward10,
--      decode( DueDays,9,AmountLocal,0)AmountLocal10,
--      decode( DueDays,9,AmountFCY,0) AmountFCY10,
--      decode( DueDays,9,AmountMTMLocal,0)AmountMTMLocal10,
--      
--      (decode( DueDays,10,AmountFCY,0))/1000 Forward11,
--      decode( DueDays,10,AmountLocal,0)AmountLocal11,
--      decode( DueDays,10,AmountFCY,0) AmountFCY11,
--      decode( DueDays,10,AmountMTMLocal,0)AmountMTMLocal11,
--      
--      (decode( DueDays,11,AmountFCY,0))/1000 Forward12,
--      decode( DueDays,11,AmountLocal,0)AmountLocal12, 
--      decode( DueDays,11,AmountFCY,0) AmountFCY12,
--      decode( DueDays,11,AmountMTMLocal,0)AmountMTMLocal12
--    from (select posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
--         POSN_SUBPRODUCT_CODE SubProductCode,
--         Posn_Account_Code Accountcode,
--         Sum(CASE WHEN LENGTH(Vartemp1)>8 THEN ABS(Posn_Revalue_Usd) ELSE Abs(Posn_Transaction_Amount) END) Amountfcy,
--        Sum((CASE WHEN LENGTH(Vartemp1)>8 THEN ABS(Posn_Revalue_Usd * PKGFOREXPROCESS.fncGetRate(posn_currency_code,numCode2, POSN_REFERENCE_DATE, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002), 0, POSN_REFERENCE_DATE)
--        ) ELSE ABS(Posn_Inr_Value) END)) Amountlocal,
--       nvl(sum((case when length(vartemp1)>8 then ABS(posn_revalue_usd)*posn_M2M_USDRATE else ABS(posn_transaction_amount)*posn_M2M_INRRATE end)),0) AmountMTMLocal,
--         (case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
--                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
--                      else
--                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) DueDays,
--         (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Export'
--           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
--                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
--           when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Import'
--           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
--                                      25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType
--  from trsystem997
--  where posn_transaction_amount!=0
--  and posn_fcy_rate !=0
--  and instr(vartemp1,posn_currency_code)>0
-- -- and posn_company_code=numcode2
-- -- and posn_currency_code=numcode1
-- -- and posn_product_code= decode( numcode3,33300000,posn_product_code,numcode3)
-- -- and POSN_SUBPRODUCT_CODE= decode( numCode4,33800000,POSN_SUBPRODUCT_CODE,numCode4)
-- 
--  group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,(case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
--                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
--                      else
--                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) ))
--  group by ExposureType
--  --group by CompanyCode,CurrencyCode,ExposureType,ProductCode,SubProductCode
--  ORDER BY 1 ASC;
--  
--      
--  
--  goto process_end;
--  
-- end if;  
if numinfotype=Gconst.REFPOSITIONGAPVIEW then
    varOperation := 'Extraction Position GAP View';
    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
    vartemp := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
    vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
    vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
    vartemp5 := GConst.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
    numCode1 := GConst.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
    numCode2 := GConst.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);
       
    --numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);  
    insert into temp values(numCode1,numCode2); commit;
    --numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,datWorkDate);commit;
    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate,
                 vartemp,vartemp1,vartemp3,vartemp4,vartemp5,
                 numCode1,numCode2);
   
--   if (numError<>0) then
--      varError := 'Error in fncPositionGenerate ';
--      raise error_occurred;
--   end if;
   
  Open GenCursor for  
 select (case when ExposureType='Inflow' then 1 
               when ExposureType='Hedge Sell' then 2 
               when exposureType='Outflow' then 1 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
           (case when ExposureType='Inflow' then 1 
               when ExposureType='Hedge Sell' then 1 
               when exposureType='Outflow' then 2 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
        ExposureType as "ExposureType",
        sum(Forward1) "Forward1",
        Nvl(case when sum(AmountLocal1) > 0 then
        Round(sum(AmountLocal1)/sum(AmountFCY1),6)
        end,0) as "BenchmarkRate1" ,
        Nvl(Round(case when sum(AmountMTMLocal1) > 0 then
        Round(sum(AmountMTMLocal1)/sum(AmountFCY1),6) 
        End,6),0) as "MTMRate1",
        sum(Forward2) "Forward2",
        Nvl(case when sum(AmountLocal2) > 0 then
        Round(sum(AmountLocal2)/sum(AmountFCY2),6) 
        end,0)  as "BenchmarkRate2" ,
        Nvl(case when sum(AmountMTMLocal2) > 0 then        
        Round(sum(AmountMTMLocal2)/sum(AmountFCY2),6) end,0) as "MTMRate2",
        sum(Forward3) "Forward3",
        Nvl(case when sum(AmountLocal3) > 0 then
        Round(sum(AmountLocal3)/sum(AmountFCY3),6) end,0) as "BenchmarkRate3" ,
        Nvl(case when sum(AmountMTMLocal3) > 0 then        
        Round(sum(AmountMTMLocal3)/sum(AmountFCY3),6) end,0) as "MTMRate3",

        sum(Forward4) "Forward4",
        Nvl(case when sum(AmountLocal4) > 0 then        
        Round(sum(AmountLocal4)/sum(AmountFCY4),6) end,0) as "BenchmarkRate4" ,
        Nvl(case when sum(AmountMTMLocal4) > 0 then        
        Round(sum(AmountMTMLocal4)/sum(AmountFCY4),6)end,0) as "MTMRate4",
        
        sum(Forward5) "Forward5",
        Nvl(case when sum(AmountLocal5) > 0 then          
        Round(sum(AmountLocal5)/sum(AmountFCY5),6) end,0) as "BenchmarkRate5" ,
        Nvl(case when sum(AmountMTMLocal5) > 0 then  
        Round(sum(AmountMTMLocal5)/sum(AmountFCY5),6) end,0) as "MTMRate5",
        
        sum(Forward6) "Forward6",
        Nvl(case when sum(AmountLocal6) > 0 then 
        Round(sum(AmountLocal6)/sum(AmountFCY6),6) end,0) as "BenchmarkRate6" ,
        Nvl(case when sum(AmountMTMLocal6) > 0 then 
        Round(sum(AmountMTMLocal6)/sum(AmountFCY6),6) end,0) as "MTMRate6",
        
        sum(Forward7) "Forward7",
        Nvl(case when sum(AmountLocal7) > 0 then 
        Round(sum(AmountLocal7)/sum(AmountFCY7),6) end,0) as "BenchmarkRate7",
        Nvl(case when sum(AmountMTMLocal7) > 0 then 
        Round(sum(AmountMTMLocal7)/sum(AmountFCY7),6) end,0) as "MTMRate7",
        
        sum(Forward8) "Forward8",
        Nvl(case when sum(AmountLocal8) > 0 then 
        Round(sum(AmountLocal8)/sum(AmountFCY8),6) end,0) as "BenchmarkRate8",
        Nvl(case when sum(AmountMTMLocal8) > 0 then 
        Round(sum(AmountMTMLocal8)/sum(AmountFCY8),6) end,0) as "MTMRate8",    
        
        sum(Forward9) "Forward9",
        Nvl(case when sum(AmountLocal9) > 0 then 
        Round(sum(AmountLocal9)/sum(AmountFCY9),6) end,0) as "BenchmarkRate9",
        Nvl(case when sum(AmountMTMLocal9) > 0 then 
        Round(sum(AmountMTMLocal9)/sum(AmountFCY9),6) end,0) as "MTMRate9",        

        sum(Forward10) "Forward10",
        Nvl(case when sum(AmountLocal10) > 0 then 
        Round(sum(AmountLocal10)/sum(AmountFCY10),6) end,0) as "BenchmarkRate10",
        Nvl(case when sum(AmountMTMLocal10) > 0 then 
        Round(sum(AmountMTMLocal10)/sum(AmountFCY10),6) end,0) as "MTMRate10",     
        
        sum(Forward11) "Forward11",
        Nvl(case when sum(AmountLocal11) > 0 then 
        Round(sum(AmountLocal11)/sum(AmountFCY11),6) end,0) as "BenchmarkRate11",
        Nvl(case when sum(AmountMTMLocal11) > 0 then 
        Round(sum(AmountMTMLocal11)/sum(AmountFCY11),6) end,0) as "MTMRate11", 
        
        sum(Forward12) "Forward12",
        Nvl(case when sum(AmountLocal12) > 0 then 
        Round(sum(AmountLocal12)/sum(AmountFCY12),6) end,0) as "BenchmarkRate12",
        Nvl(case when sum(AmountMTMLocal12) > 0 then 
        Round(sum(AmountMTMLocal12)/sum(AmountFCY12),6) end,0) as "MTMRate12",
        sum(Forward1 + Forward2 + Forward3 + Forward4 + Forward5 + Forward6 +
        Forward7 + Forward8 + Forward9 + Forward10 +Forward11 + Forward12) as "Total"
        from(
    select 
     ExposureType ExposureType ,
      (decode( DueDays,0,AmountFCY,0)) Forward1,
      decode(DueDays,0,AmountLocal,0)AmountLocal1,
      decode(DueDays,0,AmountFCY,0) AmountFCY1,
      decode(DueDays,0,AmountMTMLocal,0)AmountMTMLocal1,
      
      (decode( DueDays,1,AmountFCY,0)) Forward2,
      decode(DueDays,1,AmountLocal,0)AmountLocal2,
      decode(DueDays,1,AmountFCY,0) AmountFCY2,
      decode(DueDays,1,AmountMTMLocal,0) AmountMTMLocal2,
      
      (decode( DueDays,2,AmountFCY,0)) Forward3,
      decode( DueDays,2,AmountLocal,0) AmountLocal3,
      decode( DueDays,2,AmountFCY,0) AmountFCY3,
      decode( DueDays,2,AmountMTMLocal,0)AmountMTMLocal3,
      
      (decode( DueDays,3,AmountFCY,0)) Forward4,
      decode( DueDays,3,AmountLocal,0) AmountLocal4,
      decode( DueDays,3,AmountFCY,0) AmountFCY4,
      decode( DueDays,3,AmountMTMLocal,0)AmountMTMLocal4,
      
      (decode( DueDays,4,AmountFCY,0)) Forward5,
      decode( DueDays,4,AmountLocal,0)AmountLocal5,
      decode( DueDays,4,AmountFCY,0) AmountFCY5,
      decode( DueDays,4,AmountMTMLocal,0) AmountMTMLocal5,
      
      (decode( DueDays,5,AmountFCY,0)) Forward6,
      decode( DueDays,5,AmountLocal,0)AmountLocal6,
      decode( DueDays,5,AmountFCY,0) AmountFCY6,
      decode( DueDays,5,AmountMTMLocal,0)AmountMTMLocal6,
      
      (decode( DueDays,6,AmountFCY,0)) Forward7,
      decode( DueDays,6,AmountLocal,0)AmountLocal7,
      decode( DueDays,6,AmountFCY,0) AmountFCY7,
      decode( DueDays,6,AmountMTMLocal,0)AmountMTMLocal7,
      
      (decode( DueDays,7,AmountFCY,0)) Forward8,
      decode( DueDays,7,AmountLocal,0)AmountLocal8,
      decode( DueDays,7,AmountFCY,0) AmountFCY8,
      decode( DueDays,7,AmountMTMLocal,0)AmountMTMLocal8,
      
      
      (decode( DueDays,8,AmountFCY,0)) Forward9,
      decode( DueDays,8,AmountLocal,0)AmountLocal9,
      decode( DueDays,8,AmountFCY,0) AmountFCY9,
      decode( DueDays,8,AmountMTMLocal,0) AmountMTMLocal9,
      
      (decode( DueDays,9,AmountFCY,0)) Forward10,
      decode( DueDays,9,AmountLocal,0)AmountLocal10,
      decode( DueDays,9,AmountFCY,0) AmountFCY10,
      decode( DueDays,9,AmountMTMLocal,0)AmountMTMLocal10,
      
      (decode( DueDays,10,AmountFCY,0)) Forward11,
      decode( DueDays,10,AmountLocal,0)AmountLocal11,
      decode( DueDays,10,AmountFCY,0) AmountFCY11,
      decode( DueDays,10,AmountMTMLocal,0)AmountMTMLocal11,
      
      (decode( DueDays,11,AmountFCY,0)) Forward12,
      decode( DueDays,11,AmountLocal,0) AmountLocal12, 
      decode( DueDays,11,AmountFCY,0) AmountFCY12,
      decode( DueDays,11,AmountMTMLocal,0)AmountMTMLocal12
    from (select posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
         POSN_SUBPRODUCT_CODE SubProductCode,
         Posn_Account_Code Accountcode,
         Sum(CASE WHEN LENGTH(Vartemp1)>8 THEN ABS(Posn_Revalue_Usd) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
        Sum((CASE WHEN LENGTH(Vartemp1)>8 THEN ABS(POSN_REVALUE_INR) ELSE ABS(Posn_Inr_Value) END))/1000000 Amountlocal,
       nvl(sum((case when length(vartemp1)>8 then ABS(POSN_REVALUE_INR) else ABS(posn_transaction_amount)*POSN_MTM_RATEACTUAL end)),0)/1000000 AmountMTMLocal,
         (case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
                      else
                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) DueDays,
         (case
           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
           when posn_account_code between 25900001 and 25900050 then  'Inflow'
           --    in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Inflow'
           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                      25900085,25900074,25900075) then 'Hedge Sell'
            when posn_account_code between 25900051 and 25900099 then  'Outflow' end) ExposureType 
          --  in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Outflow' end) ExposureType
  from trsystem997
  where posn_transaction_amount!=0
  and posn_fcy_rate !=0
  AND POSN_ACCOUNT_CODE NOT IN(25900155,25900154)
  and instr(vartemp1,posn_currency_code)>0
 -- and posn_company_code=numcode2
 -- and posn_currency_code=numcode1
 -- and posn_product_code= decode( numcode3,33300000,posn_product_code,numcode3)
 -- and POSN_SUBPRODUCT_CODE= decode( numCode4,33800000,POSN_SUBPRODUCT_CODE,numCode4)
 
  group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,(case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
                      else
                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) ))
  group by ExposureType
  --group by CompanyCode,CurrencyCode,ExposureType,ProductCode,SubProductCode
  ORDER BY 1 ASC;
  
      
  
  goto process_end;
  
 end if;  
 
  if numInfoType=Gconst.REFPOSITIONGAPVIEWGRID then
  
    insert into temp values  ('Taken Values','FDd') ; commit;
    
    varOperation := 'Extraction Position GAP View into new grid';
    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
    vartemp := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
    vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
    vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
     
  
       Open GenCursor for  
          select (case when ExposureType='Export' then 1 
               when ExposureType='Hedge Sell' then 2 
               when exposureType='Import' then 1 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
           (case when ExposureType='Export' then 1 
               when ExposureType='Hedge Sell' then 1
               when exposureType='Import' then 2 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
            ExposureType "ExposureType",pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) "Company",
                  pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) "Currency",
                  pkgreturncursor.fncgetdescription(posn_product_code,2) "Product",
                  pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) "SubProduct",
                  pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,2) "Account",
                  POSN_REFERENCE_NUMBER "ReferenceNumber",
                  POSN_REFERENCE_SERIAL "SerialNumber",
                  POSN_REFERENCE_DATE "ReferenceDate",
                  POSN_DEALER_ID "DealerID",
                  pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) "CounterParty",
                  POSN_TRANSACTION_AMOUNT "TransactionAmount",
                  POSN_FCY_RATE "FCYRate",
                  POSN_USD_RATE "USDRate",
                  POSN_INR_VALUE "INRValue",
                  POSN_USD_VALUE "USDValue",
                  POSN_M2M_USDRATE "M2MUSDRate",
                  POSN_M2M_INRRATE "M2MINRRate",
                  POSN_REVALUE_USD "RevalueUSD",
                  POSN_REVALUE_INR "RevalueINR",
                  POSN_POSITION_USD "PositionUSD",
                  POSN_POSITION_INR "PositionINR",
                  POSN_DUE_DATE "DueDate",
                  POSN_MATURITY_MONTH "MaturityMonth",
                  pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) "ProductCode",
                  POSN_USER_ID "UserID",
                  to_char(POSN_DUE_DATE,'MON-YY') "DueDate"
                  from (select trsystem997.*,(case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Export'
                           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
                           when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Import'
                           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                      25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType
                        from trsystem997
                         where posn_transaction_amount!=0
                          and posn_fcy_rate !=0
                          and instr(vartemp1,posn_currency_code)>0);

  
   insert into temp values  ('Taken Values','FDd') ; commit;
   
   Goto Process_End;
   
  end if;

     IF NUMINFOTYPE = GCONST.REFSTRESSDETAIL THEN
    VAROPERATION := 'Existing Stress Reference Details';
   -- vartemp := GConst.fncxmlextract(xmldoc, 'StressReferenceNumber',varTemp);

    OPEN GENCURSOR FOR
    SELECT  STRE_COMPANY_CODE COMPONYCODE,STRE_REFERENCE_NUMBER REFERENCENUMBER,
            STRE_LOCATION_CODE LOCATIONCODE,STRE_REFERENCE_DATE REFERENCEDATE,STRE_PRODUCT_CATEGORY PRODUCTCATEGORY,
             STRE_SUBPRODUCT_CODE SUBPRODUCTCATEGORY,STRE_STRESS_TYPE STRESSTYPE,STRE_CHANGE_TYPE CHANGETYPE,
             STRE_PRICE_TYPE PRICETYPE,STRE_START_DATE STARTDATE,STRE_END_DATE ENDDATE,STRE_DEAL_TYPE DEALTYPE,
             STRE_RECORD_STATUS RecordStatus
     FROM TRSYSTEM060
      where --STRE_REFERENCE_NUMBER =vartemp and
         STRE_RECORD_STATUS not in(10200006,10200005) ;

     Goto Process_End;
  END IF;

IF NUMINFOTYPE = GCONST.REFSTRESSPNLCOMPANY THEN

    VAROPERATION := 'Existing Stress Rate Details';


    VARREFERENCE :=GCONST.FNCXMLEXTRACT(XMLDOC,'ReferenceNumber',VARREFERENCE);
    VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'UserCode',VARTEMP);
    DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
    VARTEMP1 :=GCONST.FNCXMLEXTRACT(XMLDOC,'CompanyCode',VARTEMP1);
    VARTEMP2 := GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',VARTEMP2);
    VARTEMP3 :=GCONST.FNCXMLEXTRACT(XMLDOC,'ProductCode',VARTEMP3);
    VARTEMP4 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP4);


    NUMERROR:= pkgvaranalysis.FNCSTRESSPOSITIONGENERATE(VARTEMP,  DATTEMP, VARREFERENCE,VARTEMP1,'30499999',VARTEMP3,VARTEMP4 );

/*VAROPERATION := 'Getting Stress Type from TRSYSTEM060 table';
    SELECT STRE_STRESS_TYPE INTO NUMSTRESSTYPE FROM TRSYSTEM060
     where STRE_REFERENCE_NUMBER =VARREFERENCE and
           STRE_RECORD_STATUS NOT IN(10200006,10200005) ;*/


   /*   OPEN GENCURSOR FOR
       SELECT POSN_COMPANY_CODE "CompanyCode" ,POSN_BASE_CURRENCY "Base Currency",
              POSN_OTHER_CURRENCY "Other Currency" ,POSN_ACCOUNT_CODE "Account Code",
              POSN_TRANSACTION_AMOUNT "Transaction Amount",POSN_FCY_RATE "Currency Rate",
              POSN_MTM_FCYRATE "MTM Rate",POSN_MTM_LOCALRATE "MTM Local Rate",
              POSN_STRESS_FCYRATE "Stress Currency Rate" ,POSN_STRESS_LOCALRATE "Stress Local Rate",
              POSN_MTM_PNL "MTM P N L", POSN_MTM_PNLLOCAL "MTM Local P N L",
              POSN_STRESS_PNL "Stress P N L" ,POSN_STRESS_PNLLOCAL "Stress Local P N L" FROM TRSYSTEM997A    ;
              */
     VAROPERATION := 'Getting Stress PNL Company wise';
       OPEN GENCURSOR FOR
       SELECT pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) "CompanyName"  , 'MTM PNL Local' PnLType,
             ROUND( SUM(NVL(POSN_MTM_PNLLOCAL,0)),6) PNLAmount
        FROM TRSYSTEM997A
    GROUP BY POSN_COMPANY_CODE
     union all
     SELECT pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) "CompanyName" , 'Stress PNL Local' PnLType,
             Round(SUM(NVL(POSN_STRESS_PNLLOCAL,0)),6) "PNLAmount"
        FROM TRSYSTEM997A
    GROUP BY POSN_COMPANY_CODE order by 1,2;

        GOTO PROCESS_END;

  END IF;

  --Editted by Arjun on 050714
  IF NUMINFOTYPE = GCONST.REFSTRESSPNLCURRENCY   THEN

      VAROPERATION := 'Getting Stress PNL CURRENCY WISE';
       OPEN GENCURSOR FOR
       Select
--       Pkgreturncursor.Fncgetdescription(Posn_Company_Code,2) "CompanyName" ,
              pkgreturncursor.fncgetdescription(POSN_BASE_CURRENCY,2) || '/' ||
              pkgreturncursor.fncgetdescription(POSN_Other_CURRENCY,2) "Currency Pair",
           --   POSN_OTHER_CURRENCY "Other Currency" ,
              ROUND(SUM(NVL(POSN_MTM_PNLLOCAL,0)),6) "MTM PNL Local",
             ROUND( SUM(NVL(POSN_STRESS_PNLLOCAL,0)),6) "Stress PNL Local"
             FROM TRSYSTEM997A
              Group By
--              pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2),
              pkgreturncursor.fncgetdescription(POSN_BASE_CURRENCY,2) || '/' ||
              pkgreturncursor.fncgetdescription(POSN_Other_CURRENCY,2) ;

        GOTO PROCESS_END;

  END IF;

  -- Added by Arjun for currency Compare detailed grid view on 050714
  If Numinfotype = Gconst.Refstresspnlcurrencydetailed   Then
            varTemp :=  GConst.fncxmlextract(xmldoc, 'CurrencyPair', VarTemp);
      VAROPERATION := 'Getting Stress PNL CURRENCY WISE';
       OPEN GENCURSOR FOR
       Select Pkgreturncursor.Fncgetdescription(Posn_Company_Code,2) "CompanyName" ,
               --   POSN_OTHER_CURRENCY "Other Currency" ,
              ROUND(SUM(NVL(POSN_MTM_PNLLOCAL,0)),6) "MTM PNL Local",
             ROUND( SUM(NVL(POSN_STRESS_PNLLOCAL,0)),6) "Stress PNL Local"
             FROM TRSYSTEM997A
                  Where Pkgreturncursor.Fncgetdescription(Posn_Base_Currency,2) || '/' ||
              pkgreturncursor.fncgetdescription(POSN_Other_CURRENCY,2) = varTemp
              GROUP BY pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) ;

        GOTO PROCESS_END;

  End If;
  --- Ends Refstresspnlcurrencydetailed

  ---190514-----

  if NUMINFOTYPE=GCONST.REFSTRESSPNLEDIT then

         varTemp :=  GConst.fncxmlextract(xmldoc, 'ReferenceNumber', VarTemp);

      OPEN GENCURSOR FOR
                  SELECT pkgreturncursor.fncgetdescription(a.STRE_BASE_CURRENCY,2) || '/' ||
                         pkgreturncursor.fncgetdescription(a.STRE_OTHER_CURRENCY,2) "CurrencyPair",
                         a.STRE_FORWARD_MONTH "ForwardMonth",
                         a.STRE_PRICE_CHANGE "Change",b.stre_stress_type stresstype
                  FROM
                      TRSYSTEM061 a left outer join trsystem060 b
                      on a.stre_reference_number=b.stre_reference_number WHERE
                            a.STRE_REFERENCE_NUMBER=VarTemp;
    GOTO PROCESS_END;

  END IF;


 IF NUMINFOTYPE = GCONST.REFSTRESSPNLRATE THEN

    VAROPERATION := 'Getting Stress PNL Rate Wise';
    BASECURRENCY :=GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',BASECURRENCY);
    OTHERCURRENCY :=GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',OTHERCURRENCY);
    DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);


    OPEN GENCURSOR FOR

        SELECT 1,'Base Amount' "Rowflag" , round(sum(MONTH0) , 2) MONTH0, round(sum(MONTH1) , 2) MONTH1,round(sum(MONTH2) , 2) MONTH2,round(sum(MONTH3) , 2) MONTH3,
              round(sum(MONTH4) , 2) MONTH4,round(sum(MONTH5) , 2) MONTH5,round(sum(MONTH6) , 2) MONTH6,round(sum(MONTH7) , 2) MONTH7,
              round(sum(MONTH8) , 2) MONTH8,round(sum( MONTH9) , 2) MONTH9,round(sum(MONTH10) , 2) MONTH10,round(sum(MONTH11) , 2) MONTH11,round(sum(MONTH12) , 2) MONTH12 FROM
        (SELECT DECODE (A.MONTH ,0 ,A.base_amount,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.base_amount,0) MONTH1 ,
               DECODE (A.MONTH ,2 ,A.base_amount,0) MONTH2 ,
               DECODE (A.MONTH ,3 ,A.base_amount,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.base_amount,0) MONTH4 ,
               DECODE (A.MONTH ,5 ,A.base_amount,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.base_amount,0) MONTH6 ,
               DECODE (A.MONTH ,7 ,A.base_amount,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.base_amount,0) MONTH8 ,
               DECODE (A.MONTH ,9 ,A.base_amount,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.base_amount,0) MONTH10 ,
               DECODE (A.MONTH ,11 ,A.base_amount,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.base_amount,0) MONTH12
      FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(posn_transaction_amount,0)) base_amount
      FROM TRSYSTEM997A
      WHERE POSN_BASE_CURRENCY=BASECURRENCY
        AND POSN_OTHER_CURRENCY=OTHERCURRENCY
      GROUP BY POSN_MATURITY_MONTH ) A)
      union
       SELECT 2,'Actual Rate' "Rowflag" , round(sum(MONTH0) , 6) MONTH0, round(sum(MONTH1) , 6) MONTH1,round(sum(MONTH2) , 6) MONTH2,round(sum(MONTH3) , 6) MONTH3,
              round(sum(MONTH4) , 6) MONTH4,round(sum(MONTH5) , 6) MONTH5,round(sum(MONTH6) , 6) MONTH6,round(sum(MONTH7) , 6) MONTH7,
              round(sum(MONTH8) , 6) MONTH8,round(sum( MONTH9) , 6) MONTH9,round(sum(MONTH10) , 6) MONTH10,round(sum(MONTH11) , 6) MONTH11,round(sum(MONTH12) , 6) MONTH12 FROM
        (SELECT DECODE (A.MONTH ,0 ,A.actual_rate,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.actual_rate,0) MONTH1 ,
               DECODE (A.MONTH ,2 ,A.actual_rate,0) MONTH2 ,
               DECODE (A.MONTH ,3 ,A.actual_rate,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.actual_rate,0) MONTH4 ,
               DECODE (A.MONTH ,5 ,A.actual_rate,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.actual_rate,0) MONTH6 ,
               DECODE (A.MONTH ,7 ,A.actual_rate,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.actual_rate,0) MONTH8 ,
               DECODE (A.MONTH ,9 ,A.actual_rate,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.actual_rate,0) MONTH10 ,
               DECODE (A.MONTH ,11 ,A.actual_rate,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.actual_rate,0) MONTH12
      FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(posn_transaction_amount,0)*nvl(posn_fcy_rate,0))/SUM(NVL(posn_transaction_amount,0)) Actual_rate
      FROM TRSYSTEM997A
      WHERE POSN_BASE_CURRENCY=BASECURRENCY
        AND POSN_OTHER_CURRENCY=OTHERCURRENCY
      GROUP BY POSN_MATURITY_MONTH ) A)
    union
        SELECT 5,'StressRate' "Rowflag", Round(((DRAT_SPOT_BID + DRAT_SPOT_ASK)/2) ,6 ) "MONTH0",
              Round(((DRAT_MONTH1_BID+ DRAT_MONTH1_ASK)/2) ,6 ) MONTH1,
              Round(((DRAT_MONTH2_BID + DRAT_MONTH2_ASK)/2) ,6 ) MONTH2,
              Round(((DRAT_MONTH3_BID + DRAT_MONTH3_ASK)/2) ,6 ) MONTH3,
              Round((( DRAT_MONTH4_BID + DRAT_MONTH4_ASK)/2) ,6 ) MONTH4,
              Round(((DRAT_MONTH5_BID +  DRAT_MONTH5_ASK)/2) ,6 ) MONTH5,
              Round(((DRAT_MONTH6_BID +  DRAT_MONTH6_ASK)/2) ,6 ) MONTH6,
              Round(((DRAT_MONTH7_BID +  DRAT_MONTH7_ASK)/2) ,6 ) MONTH7,
              Round(((DRAT_MONTH8_BID +  DRAT_MONTH8_ASK)/2) ,6 ) MONTH8,
              Round(((DRAT_MONTH9_BID + DRAT_MONTH9_ASK)/2) ,6 )   MONTH9,
              Round(((DRAT_MONTH10_BID + DRAT_MONTH10_ASK)/2) ,6 ) MONTH10,
              Round(((DRAT_MONTH11_BID + DRAT_MONTH11_ASK)/2) ,6 ) MONTH11,
              Round(((DRAT_MONTH12_BID + DRAT_MONTH12_ASK)/2) ,6 ) "MONTH12"
          FROM TRTRAN012A
          WHERE DRAT_CURRENCY_CODE =BASECURRENCY
                AND DRAT_FOR_CURRENCY=othercurrency
              AND DRAT_EFFECTIVE_DATE=DATTEMP
  UNION
  SELECT 3,'MTMRate' "Rowflag", Round(((DRAT_SPOT_BID + DRAT_SPOT_ASK)/2) ,6 ) "MONTH0",
              Round(((DRAT_MONTH1_BID+ DRAT_MONTH1_ASK)/2) ,6 ) MONTH1,
              Round(((DRAT_MONTH2_BID + DRAT_MONTH2_ASK)/2) ,6 ) MONTH2,
              Round(((DRAT_MONTH3_BID + DRAT_MONTH3_ASK)/2) ,6 ) MONTH3,
              Round((( DRAT_MONTH4_BID + DRAT_MONTH4_ASK)/2) ,6 ) MONTH4,
              Round(((DRAT_MONTH5_BID +  DRAT_MONTH5_ASK)/2) ,6 ) MONTH5,
              Round(((DRAT_MONTH6_BID +  DRAT_MONTH6_ASK)/2) ,6 ) MONTH6,
              Round(((DRAT_MONTH7_BID +  DRAT_MONTH7_ASK)/2) ,6 ) MONTH7,
              Round(((DRAT_MONTH8_BID +  DRAT_MONTH8_ASK)/2) ,6 ) MONTH8,
              Round(((DRAT_MONTH9_BID + DRAT_MONTH9_ASK)/2) ,6 )   MONTH9,
              Round(((DRAT_MONTH10_BID + DRAT_MONTH10_ASK)/2) ,6 ) MONTH10,
              Round(((DRAT_MONTH11_BID + DRAT_MONTH11_ASK)/2) ,6 ) MONTH11,
              Round(((DRAT_MONTH12_BID + DRAT_MONTH12_ASK)/2) ,6 ) "MONTH12"
          FROM TRTRAN012C
          WHERE DRAT_CURRENCY_CODE =BASECURRENCY
                AND DRAT_FOR_CURRENCY=othercurrency
                AND DRAT_EFFECTIVE_DATE=DATTEMP
  UNION
    SELECT 4,'MTMPnL Local' "Rowflag" , round(sum(MONTH0) , 2) MONTH0, round(sum(MONTH1) , 2) MONTH1,round(sum(MONTH2) , 2) MONTH2,round(sum(MONTH3) , 2) MONTH3,
        round(sum(MONTH4) , 2) MONTH4,round(sum(MONTH5) , 2) MONTH5,round(sum(MONTH6) , 2) MONTH6,round(sum(MONTH7) , 2) MONTH7,
        round(sum(MONTH8) , 2) MONTH8,round(sum( MONTH9) , 2) MONTH9,round(sum(MONTH10) , 2) MONTH10,round(sum(MONTH11) , 2) MONTH11,round(sum(MONTH12) , 2) MONTH12 FROM
  (SELECT DECODE (A.MONTH ,0 ,A.MTM_PNL,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.MTM_PNL,0) MONTH1 ,
         DECODE (A.MONTH ,2 ,A.MTM_PNL,0) MONTH2 ,
         DECODE (A.MONTH ,3 ,A.MTM_PNL,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.MTM_PNL,0) MONTH4 ,
         DECODE (A.MONTH ,5 ,A.MTM_PNL,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.MTM_PNL,0) MONTH6 ,
         DECODE (A.MONTH ,7 ,A.MTM_PNL,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.MTM_PNL,0) MONTH8 ,
         DECODE (A.MONTH ,9 ,A.MTM_PNL,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.MTM_PNL,0) MONTH10 ,
         DECODE (A.MONTH ,11 ,A.MTM_PNL,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.MTM_PNL,0) MONTH12
FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(POSN_MTM_PNLLOCAL,0)) MTM_PNL,SUM(NVL(POSN_STRESS_PNLLOCAL,0)) STRESS_PNL
FROM TRSYSTEM997A
WHERE POSN_BASE_CURRENCY=BASECURRENCY
  AND POSN_OTHER_CURRENCY=othercurrency
GROUP BY POSN_MATURITY_MONTH ) A)
UNION
  SELECT 6,'StressPnL Local' "Rowflag" , round(sum(MONTH0) , 2) MONTH0, round(sum(MONTH1) , 2) MONTH1,round(sum(MONTH2) , 2) MONTH2,round(sum(MONTH3) , 2) MONTH3,
        round(sum(MONTH4) , 2) MONTH4,round(sum(MONTH5) , 2) MONTH5,round(sum(MONTH6) , 2) MONTH6,round(sum(MONTH7) , 2) MONTH7,
        round(sum(MONTH8) , 2) MONTH8,round(sum( MONTH9) , 2) MONTH9,round(sum(MONTH10) , 2) MONTH10,round(sum(MONTH11) , 2) MONTH11,round(sum(MONTH12) , 2) MONTH12 FROM
  (SELECT DECODE (A.MONTH ,0 ,A.STRESS_PNL,0) MONTH0 ,DECODE (A.MONTH ,1 ,A.STRESS_PNL,0) MONTH1 ,
         DECODE (A.MONTH ,2 ,A.STRESS_PNL,0) MONTH2 ,
         DECODE (A.MONTH ,3 ,A.STRESS_PNL,0) MONTH3 ,DECODE (A.MONTH ,4 ,A.STRESS_PNL,0) MONTH4 ,
         DECODE (A.MONTH ,5 ,A.STRESS_PNL,0) MONTH5 ,DECODE (A.MONTH ,6 ,A.STRESS_PNL,0) MONTH6 ,
         DECODE (A.MONTH ,7 ,A.STRESS_PNL,0) MONTH7 ,DECODE (A.MONTH ,8 ,A.STRESS_PNL,0) MONTH8 ,
         DECODE (A.MONTH ,9 ,A.STRESS_PNL,0) MONTH9 ,DECODE (A.MONTH ,10 ,A.STRESS_PNL,0) MONTH10 ,
         DECODE (A.MONTH ,11 ,A.STRESS_PNL,0) MONTH11 ,DECODE (A.MONTH ,12 ,A.STRESS_PNL,0) MONTH12
FROM (SELECT POSN_MATURITY_MONTH "MONTH",SUM(NVL(POSN_MTM_PNLLOCAL,0)) MTM_PNL,SUM(NVL(POSN_STRESS_PNLLOCAL,0)) STRESS_PNL
FROM TRSYSTEM997A
WHERE POSN_BASE_CURRENCY=basecurrency
  AND POSN_OTHER_CURRENCY=othercurrency
GROUP BY POSN_MATURITY_MONTH ) A) order by 1;


     Goto Process_End;

  END IF;


  -------Added for Stress Testing ---End


--if numInfoType = GConst.REFPERIODICREPORT then
--   varOperation := 'Extracting periodic Mail Reports';
--    numCode := GConst.fncXMLExtract(xmlDoc, 'ReminderType',numCode);
--     open gencursor for
--       select remp_periodicity_code periodcode,remp_report_id reportid,
--              remp_report_query Condition,remp_user_forward userforward,remp_frequency_no FrequencyNo,
--              repm_report_file controlname,remp_report_remarks remarks,remp_report_header report_Header,
--              remp_report_grouping reportgrouping,  -- added by sivadas on 02Mar2012
--              nvl((select to_number(ExtractValue(value(t), '//GroupType')) GroupType
--                from  trsystem003 a,trmaster001, trsystem999,
--                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
--                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
--                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
--                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
--                  and repm_report_id = remp_report_id
--                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108),0) as GroupType,
--              (select fldp_column_name FieldName
--                 from trsystem003 a,trmaster001, trsystem999,
--                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
--                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
--                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
--                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
--                  and repm_report_id = remp_report_id
--                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108) as FieldName
--         from remindermaster,trsystem003
--        where remp_reminder_code = numCode
--          and remp_report_id=repm_report_id
--          and remp_record_status not in(gconst.statusinactive,   gconst.statusdeleted);
--     Goto Process_End;
--end if;
--if numInfoType = GConst.REFPERIODICREPORT then
--   varOperation := 'Extracting periodic Mail Reports';
--    numCode := GConst.fncXMLExtract(xmlDoc, 'ReminderType',numCode);
--     open gencursor for
--       select  pkgreturncursor.fncGetDescription(remp_periodicity_code,2) "Period",remp_report_id "ReportId",
--              remp_report_query "Condition",remp_user_forward "UserForward",remp_frequency_no "FrequencyNo",
--              repm_report_file "ControlName",remp_report_remarks "Remarks",remp_report_header "Report_Header",
--              remp_report_grouping "ReportGrouping",remp_schedule_time "ScheduleTime",
--              pkgreturncursor.fncGetDescription(remp_business_unit,2) "BusinessUnit",
--              pkgreturncursor.fncGetDescription(remp_profit_center,2) "ProfitCenter",
--              -- added by sivadas on 02Mar2012
--              nvl((select to_number(ExtractValue(value(t), '//GroupType')) GroupType
--                from  trsystem003 a,trmaster001, trsystem999,
--                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
--                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
--                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
--                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
--                  and repm_report_id = remp_report_id
--                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108),0) as GroupType,
--              (select fldp_column_name FieldName
--                 from trsystem003 a,trmaster001, trsystem999,
--                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
--                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
--                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
--                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
--                  and repm_report_id = remp_report_id
--                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108) as FieldName,
--                  remp_business_unit "BusinessUnitCode",
--                  remp_profit_center "ProfitCenterCode",
--                  remp_periodicity_code "PeriodCode"
--         from remindermaster,trsystem003
--        where remp_reminder_code = numCode
--          and remp_report_id=repm_report_id
--          and remp_record_status not in(gconst.statusinactive,   gconst.statusdeleted);
--     Goto Process_End;  
--end if;
if numInfoType = GConst.REFPERIODICREPORT then
   varOperation := 'Extracting periodic Mail Reports';
    numCode := GConst.fncXMLExtract(xmlDoc, 'ReminderType',numCode);
     open gencursor for
       select  pkgreturncursor.fncGetDescription(remp_periodicity_code,2) "Period",
                 pkgreturncursor.fncGetDescription(remp_business_unit,2) "BusinessUnit",
              remp_report_id "ReportId",
              remp_report_header "Report_Header",remp_report_query "Condition",remp_user_forward "UserForward",
              remp_mail_to "Email_To",remp_mail_cc "CC_Mail",
              repm_report_file "ControlName",remp_report_remarks "Remarks",remp_report_grouping "ReportGrouping",           
              remp_serial_number "SerialNumber",
              -- added by sivadas on 02Mar2012
              nvl((select to_number(ExtractValue(value(t), '//GroupType')) GroupType
                from  trsystem003 a,trmaster001, trsystem999,
                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
                  and repm_report_id = remp_report_id
                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108),0) as GroupType,
              (select fldp_column_name FieldName
                 from trsystem003 a,trmaster001, trsystem999,
                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
                  and repm_report_id = remp_report_id
                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108) as FieldName 
         from remindermaster,trsystem003
        where remp_reminder_code = numCode
          and remp_periodicity_code=decode(numCode,27600002,26600001,26699999)
          and remp_report_id=repm_report_id
         -- and remp_reminder_code=numCode
          and trsystem003.repm_report_id=remindermaster.remp_report_id  
          and repm_record_status not in (10200005,10200006)
          and remp_record_status not in(gconst.statusinactive,   gconst.statusdeleted);
     Goto Process_End;  
end if;

--if numInfoType = GConst.REFPERIODICREPORTMAIL then
--   varOperation := 'Extracting periodic Mail Reports';
--   numCode := GConst.fncXMLExtract(xmlDoc, 'ReminderType',numCode);
--     open gencursor for
----      select remindermaster.remp_periodicity_code "PeriodCode",TRSYSTEM013A.remp_report_id "ReportId",
----              TRSYSTEM013A.remp_user_forward "userforward", remindermaster.remp_report_query "Condition",
----              repm_report_file "ControlName",TRSYSTEM013A.Remp_report_header "Report_Header",
----              pkgreturncursor.fncGetDescription(remindermaster.REMP_BUSINESS_UNIT,2) "BusinessUnit",   
----              pkgreturncursor.fncGetDescription(remindermaster.REMP_PROFIT_CENTER,2) "ProfitCenter", 
----              TRSYSTEM013A.remp_report_grouping "ReportGrouping",           
----              TRSYSTEM013A.remp_work_date "WorkDate",
----              remindermaster.remp_serial_number "SerialNumber",
----              remindermaster.remp_mail_to "EmailTo",
----              remindermaster.remp_mail_cc "CCMails",
----              remp_user_id "UserId",
----              REMP_REFERENCE_NUMBER "ReferenceNumber",
----              -- added by sivadas on 02Mar2012
----              nvl((select to_number(ExtractValue(value(t), '//GroupType')) GroupType
----                from  trsystem003 a,trmaster001, trsystem999,
----                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
----                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
----                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
----                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
----                  and repm_report_id = TRSYSTEM013A.remp_report_id
----                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108),0) as GroupType,
----              (select fldp_column_name FieldName
----                 from trsystem003 a,trmaster001, trsystem999,
----                      table(xmlsequence(extract(repm_report_params,'//Parameter'))) t
----                where to_number(ExtractValue(value(t), '//GroupType')) = pick_key_value
----                  and fldp_table_synonym = ExtractValue(value(t), '//TableName')
----                  and fldp_xml_field = ExtractValue(value(t), '//FieldName')
----                  and repm_report_id = TRSYSTEM013A.remp_report_id
----                  and to_number(ExtractValue(value(t), '//GroupType')) between 30700102 and 30700108) as FieldName               
----         from TRSYSTEM013A,trsystem003,remindermaster
----        where TRSYSTEM013A.remp_report_id=repm_report_id        
----        and remp_mail_status='No'        
----        and trsystem003.repm_report_id=remindermaster.remp_report_id
----        and remindermaster.remp_serial_number=TRSYSTEM013A.remp_serial_number
----        and repm_record_status not in (10200005,10200006)
----        and remindermaster.remp_record_status not in(10200005,10200006)
----        and TRSYSTEM013A.remp_record_status not in(10200005,10200006);
--    
--        Goto Process_End;
--end if;


   if numinfotype = gconst.REFDYNAMICQUERY  then
       varoperation := 'Extracting the information for the Dynamic Report ';
       varquery :=   gconst.fncreturnparam(paramdata,   'TableName');

       -- varquery := GConst.fncXMLExtract(xmlDoc, 'TableName',varquery);
       -- insert into temp values( varquery);
        open gencursor for   varquery ;
    Goto Process_End;
  end if;


  if numInfoType = GConst.REFDYNAMICFUNCTIONS   then

   varOperation := 'Extracting cursor for Function  Names';

    Open GenCursor for
            select   distinct object_name as function_name
              from  all_arguments
              where owner = (select user from global_name)
              and package_name= 'PKGFUNCTIONS';

    Goto Process_End;
  End if;

  if numinfotype = gconst.REFARGUMENTS   then
       varoperation := 'Extracting the arguments  of functions  for the Dynamic Report ';
         vartemp := GConst.fncXMLExtract(xmlDoc, 'TableName',varquery);
      open gencursor for
         select   Argument_name, in_out,
           data_type,data_length,data_precision,char_length  ,
           ( case nvl(data_precision,0)
            when 0 then 'N'
            else 'N2'
            end ) format
            from  all_arguments
            where owner = (select user from global_name)
            and  package_name= 'PKGFUNCTIONS'
            and  object_name=vartemp ;
    Goto Process_End;
  end if;


  if numinfotype = gconst.REFBIDASKRATES then
      varoperation := 'Extracting the Bid and Ask rates for the Particular Currency';
      numcode:= GConst.fncXMLExtract(xmlDoc, 'CurrencyCode',numTemp);
      numcode1:= GConst.fncXMLExtract(xmlDoc, 'ForCurrency',numTemp);
      open gencursor for

          SELECT nvl(RATE_MONTH1_BID,0) BID1,nvl(RATE_MONTH1_ASK,0) ASK1,
                 nvl(RATE_MONTH2_BID,0) BID2,nvl(RATE_MONTH2_ASK,0) ASK2,
                 nvl(RATE_MONTH3_BID,0) BID3,nvl(RATE_MONTH3_ASK,0) ASK3,
                 nvl(RATE_MONTH4_BID,0) BID4,nvl(RATE_MONTH4_ASK,0) ASK4,
                 nvl(RATE_MONTH5_BID,0) BID5,nvl(RATE_MONTH5_ASK,0) ASK5,
                 nvl(RATE_MONTH6_BID,0) BID6,nvl(RATE_MONTH6_ASK,0) ASK6,
                 nvl(RATE_MONTH7_BID,0) BID7,nvl(RATE_MONTH7_ASK,0) ASK7,
                 nvl(RATE_MONTH8_BID,0) BID8,nvl(RATE_MONTH8_ASK,0) ASK8,
                 nvl(RATE_MONTH9_BID,0) BID9,nvl(RATE_MONTH9_ASK,0) ASK9,
                 nvl(RATE_MONTH10_BID,0) BID10,nvl(RATE_MONTH10_ASK,0) ASK10,
                 nvl(RATE_MONTH11_BID,0) BID11,nvl(RATE_MONTH11_ASK,0) ASK11,
                 nvl(RATE_MONTH12_BID,0) BID12,nvl(RATE_MONTH12_ASK,0) ASK12
          FROM   trsystem009
           WHERE RATE_CURRENCY_CODE=numcode AND RATE_FOR_CURRENCY=numcode1 AND
                 RATE_EFFECTIVE_DATE=(select max(RATE_EFFECTIVE_DATE) from trsystem009
                                      where  RATE_CURRENCY_CODE=numcode AND RATE_FOR_CURRENCY=numcode1) and
                 RATE_SERIAL_NUMBER=(select max(RATE_SERIAL_NUMBER) from trsystem009
                                      where  RATE_CURRENCY_CODE=numcode AND RATE_FOR_CURRENCY=numcode1
                                      and RATE_EFFECTIVE_DATE=(select max(RATE_EFFECTIVE_DATE) from trsystem009
                                      where  RATE_CURRENCY_CODE=numcode AND RATE_FOR_CURRENCY=numcode1));

  Goto Process_End;
  end if;


   if numinfotype = gconst.REFUSERTERMINAL then
      varoperation := 'Extracting the Userid  for the Particular Terminal';
      varTemp:= GConst.fncXMLExtract(xmlDoc, 'TerminalId',varTemp);

    open gencursor for

            select  USER_USER_ID as UserId
              from  usermaster
           where  USER_TERMINAL_ID =  varTemp;

  Goto Process_End;
  end if;

  if numinfotype = gconst.REFEXCHANGERATE then
      varoperation := 'Extracting the No of times the rates are defined for the Particular date and time';
     datTemp := GConst.fncXMLExtract(xmlDoc, 'EffectiveDate',datTemp);
      varTemp:= GConst.fncXMLExtract(xmlDoc, 'RateTime',varTemp);

    open gencursor for

             select  count(*)  as num
                from  trsystem009
              where  RATE_EFFECTIVE_DATE =  datTemp
                  and RATE_RATE_TIME  = varTemp    ;

  Goto Process_End;
  end if;

  if numinfotype = gconst.REFWORKINGDAYS then
    datTemp := GConst.fncXMLExtract(xmlDoc, 'FromDate',datTemp);
    numtemp := GConst.fncXMLExtract(xmlDoc, 'NoOfDays',numtemp);
      open gencursor for
         select pkgforexprocess.fncGetCurrSpotDate
                (30400004,
                 30400003,
                 datTemp,numtemp)from dual ;

    Goto Process_End;
  end if;

--  if numInfoType = GConst.REFMATURITYVALUE then
--      numFcy := pkgMoneyModule.fncCalculateInterest(xmlDoc, numCode,numFcy1);
--
--      Open GenCursor for
--      select numFcy as InterestAmount, numCode as InterestType, numFcy1 as Repurchase
--        from dual;
--
--
--      Goto Process_End;
--    End if;


-- if numinfotype = gconst.REFENTITY then
--      varoperation := 'Extracting the Entity names';
--
--    open gencursor for
--
--         select  distinct FLDP_TABLE_SYNONYM
--           from  trsystem999 ;
--
--  Goto Process_End;
--  end if;
--
--
--  if numinfotype = gconst.REFFIELDS  then
--      varoperation := 'Extracting the Field Names and Properties  for the particular Entity';
--       varTemp:= GConst.fncXMLExtract(xmlDoc, 'TableName',varTemp);
--
--    open gencursor for
--
--           select FLDP_XML_FIELD  as  ColumnName,FLDP_SHOW_YN as ShowYn ,
--                  FLDP_DISPLAY_YN as DisplayYn,FLDP_TEXT_CASE  as TextCase,
--                  FLDP_TEXT_LENGTH as TextLength, FLDP_TEXT_FORMAT as TextFormat,
--                  FLDP_TOOLTIP_TEXT as ToolTip,FLDP_SELECT_YN as SelectYn,
--                  FLDP_DATA_TYPE  as DataType
--             from trsystem999
--            where FLDP_TABLE_SYNONYM =vartemp
--              and FLDP_DATA_TYPE != 'XMLTYPE'
--              and FLDP_PICK_GROUP is null;
--
--  Goto Process_End;
--  end if;
--

if numinfotype = gconst.REFMARKETDEALS then
       varoperation := 'Extracting the Market Deals dor redemption';
       BEGIN
       numcode:= GConst.fncXMLExtract(xmlDoc,'CompanyCode',numcode);
       Exception
        when others then
          numcode := 30199999;
       End;
       Begin       
        varReference :=  GConst.fncXMLExtract(xmlDoc,'DealNumber',varTemp);
       Exception
        when others then
          varReference := NULL;
       End;

       Open GenCursor for
       select  mdel_deal_number as "Deal_Number", mdel_execute_date "Deal_Date",
        pkgreturncursor.fncGetDescription(mdel_transaction_type,GConst.PICKUPLONG) "Transaction_Type",
        pkgreturncursor.fncGetDescription(mdel_counter_party,GConst.PICKUPLONG) "Counter_Party",
        mdel_user_reference "ISIN_Number", mdel_dealer_remark "Dealer_Remarks",
        mdel_interest_rate "Yield", mdel_market_price "Contract_Price",
        mdel_unit_quantity "Units", mdel_unit_price "Unit_Price",
        mdel_deal_amount "Deal_Amount",  mdel_period_number "Noof_Days",
        mdel_due_date "Maturity_Date", mdel_maturity_amount "Maturity_Amount",
        mdel_maturity_amount - mdel_deal_amount "Profit_Loss",
        pkgreturncursor.fncGetDescription(mdel_currency_code,GConst.PICKUPSHORT) "Currency",
        mdel_exchange_rate "Exchange_Rate", mdel_amount_local "Local_Amount",
        mdel_currency_code "Currency_Code", mdel_transaction_type "Transaction_Code",
        mdel_record_status  as "RecordStatus" ,
        mdel_value_date as "Value_Date",
        mdel_current_ac as "Current_AC"
        from trtran031
        where mdel_company_code=decode(numcode , 30199999,mdel_company_code,numcode)
        and mdel_deal_number = decode(varReference, NULL, mdel_deal_number, varReference)
        and mdel_record_status between 10200001 and 10200004
        ORDER BY mdel_execute_date ,mdel_deal_number;


--       Open GenCursor for SqlQuery;


       Goto Process_End;
end if;
 if numInfoType = GConst.REFCPCDDETAILS then
    varOperation := 'Extracting Details of CP / CD';
    numCode := GConst.fncXMLExtract(xmldoc,'TransactionType',numCode);
    begin
    dattemp := GConst.fncXMLExtract(xmldoc,'//CommandSet//KeyValues/ExecuteDate',dattemp);
    exception
      when others then
       dattemp:=SYSDATE;
    end;
    if numCode = GConst.COMMERCIALPAPER then
      Open GenCursor for
      select cpde_isin_number "ISIN_Number", cpde_company_name "Company_Name",
        cpde_issue_date "Issue_Date", cpde_maturity_date "Maturity_date",
        cpde_face_value "Face_value", cpde_credit_rating "Credit_Rating",
        cpde_rating_Agency "Rating_Agency", cpde_cp_details "Instrument_Details",
        cpde_nsdl_details "Investment_Details", 0 RecordStatus, cpde_security_name "Security_name"
        FROM trmaster402
        where cpde_maturity_date>dattemp        
        order by cpde_company_name;

    elsif numCode = GConst.CERTIFICATEOFDEPOSIT then
      Open GenCursor for
      select cdde_isin_number "ISIN_Number",
        pkgReturnCursor.fncGetDescription(cdde_bank_code,1) "Bank_Name",
        null "Issue_Date", cdde_maturity_date "Maturity_date",
        cdde_face_value "Face_value", cdde_credit_rating "Credit_Rating",
        cdde_rating_Agency "Rating_Agency", cdde_cd_details  "Instrument_Details",
        cdde_cd_demat "Investment_Details", 0 RecordStatus, cdde_security_name "Security_name"
        FROM trmaster403
        where cdde_maturity_date>dattemp        
        order by 2;
   elsif numCode = GConst.TBILL then
      Open GenCursor for
      select TBIL_ISIN_NUMBER "ISIN_Number",
         (TBIL_MATURITY_DATE-TBIL_ISSUE_DATE)||'-Days Bill' "Security_name",
        TBIL_ISSUE_DATE "Issue_Date", TBIL_MATURITY_DATE "Maturity_date",
        TBIL_FACE_VALUE "Face_value",
        round(TBIL_AVG_RATE,4) "Average Rate",
         '' "Bank_Name",
        '' "Credit_Rating",
        '' "Rating_Agency", 
        ''  "Instrument_Details",
        '' "Investment_Details", 
         0 RecordStatus
       -- '' "Security_name"
        from trmaster403A
        WHERE TBIL_MATURITY_DATE>dattemp
        order by 2;
    end if;

    Goto Process_End;
  End if;




 if numinfotype =gconst.REFSAVEREPORTS then
          Open GenCursor for
             select resv_report_date "Saved Date",
                    (select user_user_name
                     from trsystem022
                     where user_user_id = resv_user_id) "User Name",
                    resv_report_id "ReportID",
                    resv_data_xml "DataXML",resv_serial_number "Serialno",
                    (select punt_control_name
                     from trsystem005
                     where punt_program_unit=resv_report_id) "Report File",
                    (select menu_description
                     from trsystem002
                     where menu_program_unit=resv_report_id) "Report Name",
                    resv_report_remarks "Remarks"
             from trsystem033
             where resv_record_status=10200001;
        Goto Process_End;
    end if;

  if numInfoType = GConst.REFBASERATE then
      varOperation := 'Extracting Base Rate For The Interest type ';
      numCode := GConst.fncXMLExtract(xmlDoc, 'InterestType',numCode);
      datTemp := GConst.fncXMLExtract(xmlDoc, 'WorkDate',datTemp);

    Open GenCursor for

      select nvl(BINT_INTEREST_RATE,0) as "BaseRate",
             decode(IPRM_LINK_TYPE,27900001,'Enable',27900003,'Enable','Disable') as "Link",
             IPRM_LINK_TYPE  as "LinkType"
        from trmaster401 ,trtran041 A
       where IPRM_PICK_CODE = numCode
         and IPRM_BASE_TYPE = BINT_BASE_TYPE
         and BINT_EFFECTIVE_DATE = (select max(BINT_EFFECTIVE_DATE)
                                      from  trtran041 b
                                      where BINT_EFFECTIVE_DATE < datTemp
                                       and  a.BINT_BASE_TYPE = b.BINT_BASE_TYPE )
       union
        select 0 as "BaseRate",
               decode(IPRM_LINK_TYPE,27900001,'Enable',27900003,'Enable','Disable') as "Link",
               IPRM_LINK_TYPE  as "LinkType"
          from trmaster401
         where IPRM_PICK_CODE = numCode
      order by   1  desc ;


      Goto Process_End;
    End if;

--   if numInfoType = GConst.REFDUEDATE then
--      varOperation := 'Extracting Due Date ';
--       datTemp := GConst.fncXMLExtract(xmlDoc, 'AsOnDate',datTemp);
--       numcode := GConst.fncXMLExtract(xmlDoc, 'Merchant',numcode);
--       Open GenCursor for
--         select  pkgMoneyModule.FNCMERCHANTHOLIDAYCHECK(datTemp,numcode) as "DueDate"
--           from  dual ;
--      Goto Process_End;
--   end if;

   if numInfoType = GConst.REFALLDEALS then
      Open GenCursor for
         select DEAL_DEAL_NUMBER "DealNumber",DEAL_EXECUTE_DATE "ExecuteDate",
                DEAL_EXCHANGE_RATE "ExchangeRate", 0 "RecordStatus",
                DEAL_BASE_AMOUNT  "DealAmount",DEAL_HEDGE_TRADE "HedgeTrade",
                HEDG_TRADE_REFERENCE "TradeRefernce"
           from trtran001,trtran004
           where DEAL_DEAL_NUMBER = HEDG_DEAL_NUMBER(+)
           and deal_company_code in (select usco_company_code from trsystem022a where usco_user_id=varuserid);
       Goto Process_End;
   end if;
  if numInfoType = GConst.REFDEALPROFILE then
      varoperation := 'Extracting the Details of a Particular Deal';
            vartemp:=  GConst.fncXMLExtract(xmlDoc,'DealCode',varTemp);
            vartemp1:=  GConst.fncXMLExtract(xmlDoc,'DealTrade',varTemp1);

    if vartemp1='Deal' then
          numcode:=pkgreturncursor.fncDealProfile(vartemp);
      Open GenCursor for
            select DP_DEAL_NUMBER  "DealNumber",DP_ECR_DATE "EnCaRoDate",
                   DP_ECREXECUTE_TIME "Executetime",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_BUY_SELL,2)    "BuySell",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_SWAP_OUTRIGHT,2)  "SwapOutright",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_DEAL_TYPE,2) "DealType",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_COUNTER_PARTY,2) "CounterParty",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_BASE_CURRENCY,2) || '/'||
                   pkgreturncursor.FNCGETDESCRIPTION(DP_OTHER_CURRENCY,2) "CurrencyPair",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_MATURITY_CODE,2) "MaturityCode",
                   DP_ERMATURITY_FROM "Maturityfrom",DP_ERMATURITY_DATE "Maturityto",
                   DP_ECR_RATE "Rate" ,DP_ECRLOCAL_RATE "LocalRate",DP_ECRBASE_AMOUNT "BaseAmount",
                   DP_ECROTHER_AMOUNT "OtherAmount",DP_ECRAMOUNT_LOCAL "LocalAmount",
                   DP_ERMATURITY_MONTH "MaturityMonth",DP_ECRUSER_ID "User",DP_CONFIRM_DATE "ConfirmDate",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_PROCESS_COMPLETE,2) "Complete" ,
                   DP_COMPLETE_DATE "CompleteDate",
                   DP_TRADE_REFERENCE "TradeReference",
                   pkgreturncursor.FNCGETDESCRIPTION(DP_CANCEL_TYPE,2) "CancelType",
                   DP_CRPROFIT_LOSS "Profit/Loss",DP_CRPL_VOUCHER "CurrAccountVoucher",DP_STATUS "Status",DP_STATUS_NO "No"
                  -- DP_DELIVERED_STATUS "DStatus"
            from  trsystem991;
    elsif  vartemp1='Trade'  then
          Open GenCursor for
                 --tradeDetails
            select TRAD_TRADE_REFERENCE "TradeReference",
                   pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) "Export/Import",
                   pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) "LocalBank",
                   TRAD_ENTRY_DATE "EnteredDate",
                   pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) "Buyer/Seller",
                   pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) "Currency",
                   pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,2) "Product",
                   TRAD_TRADE_FCY "TradeAmount",
                   TRAD_TRADE_RATE "TradeRate",TRAD_TRADE_INR "TradeInr",TRAD_MATURITY_FROM "MaturityFrom",
                   TRAD_MATURITY_DATE "MaturityTo",
                   pkgreturncursor.fncgetdescription(TRAD_PROCESS_COMPLETE,2) "Completed",
                   TRAD_COMPLETE_DATE "CompleteDate",TRAD_TRADE_REMARKS "Remarks",
                   'Order' "Status",1 "Order"
             from  trtran002
            where TRAD_TRADE_REFERENCE = vartemp
            -- and TRAD_RECORD_STATUS not in (10200005,10200006)
            union
            --billsentfor collection
            select TRAD_TRADE_REFERENCE "TradeReference",
                   pkgreturncursor.fncgetdescription(TRAD_IMPORT_EXPORT,1) "Export/Import",
                   pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) "LocalBank",
                   TRAD_ENTRY_DATE "EnteredDate",
                   pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) "Buyer/Seller",
                   pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) "Currency",
                   pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,2) "Product",
                   TRAD_TRADE_FCY "TradeAmount",
                   TRAD_TRADE_RATE "TradeRate",TRAD_TRADE_INR "TradeInr",TRAD_MATURITY_FROM "MaturityFrom",
                   TRAD_MATURITY_DATE "MaturityTo",
                   pkgreturncursor.fncgetdescription(TRAD_PROCESS_COMPLETE,2) "Completed",
                   TRAD_COMPLETE_DATE "CompleteDate",TRAD_TRADE_REMARKS "Remarks",
                   'Collect' "Status", 2 "Order"
             from  trtran002
             where TRAD_REVERSE_REFERENCE = vartemp
               and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

              and TRAD_RECORD_STATUS not in (10200005,10200006)
            --billrealized
              union
            select BREL_TRADE_REFERENCE "TradeReference",
                   pkgreturncursor.fncgetdescription(BREL_REVERSAL_TYPE,1) "Export/Import",
                   pkgreturncursor.fncgetdescription(TRAD_LOCAL_BANK,2) "LocalBank",
                   BREL_ENTRY_DATE "EnteredDate",
                   pkgreturncursor.fncgetdescription(TRAD_BUYER_SELLER,2) "Buyer/Seller",
                   pkgreturncursor.fncgetdescription(TRAD_TRADE_CURRENCY,2) "Currency",
                   pkgreturncursor.fncgetdescription(TRAD_PRODUCT_CODE,2) "Product",
                   BREL_REVERSAL_FCY "TradeAmount",
                   BREL_REVERSAL_RATE "TradeRate",BREL_REVERSAL_INR "TradeInr",BREL_MATURITY_FROM "MaturityFrom",
                   BREL_MATURITY_DATE "MaturityTo",
                   pkgreturncursor.fncgetdescription(TRAD_PROCESS_COMPLETE,2) "Completed",
                   TRAD_COMPLETE_DATE "CompleteDate",TRAD_TRADE_REMARKS "Remarks",
                   'Realize' "Status",2 "Order"
              from trtran003 B,trtran002 T
              where B.BREL_TRADE_REFERENCE=t.TRAD_TRADE_REFERENCE
                and t.TRAD_REVERSE_REFERENCE= vartemp
                and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

                and BREL_RECORD_STATUS not in (10200005,10200006)
             --  order by 17,4 ;
                order by 17,4 ;
         elsif  vartemp1='Voucher' then
          Open GenCursor for
              --CurrentAccountVoucher
              select BCAC_VOUCHER_NUMBER "VoucherNumber",
                     pkgreturncursor.FNCGETDESCRIPTION(BCAC_VOUCHER_TYPE,2) "VoucherType",
                     BCAC_VOUCHER_DATE "VoucherDate",
                     BCAC_VOUCHER_FCY  "Amount1",
                     pkgreturncursor.FNCGETDESCRIPTION(BCAC_CRDR_CODE,2)"Credit/Debit",
                     BCAC_VOUCHER_INR "Amount",
                     pkgreturncursor.FNCGETDESCRIPTION(BCAC_LOCAL_BANK,2) "Bank",
                     pkgreturncursor.FNCGETDESCRIPTION(BCAC_ACCOUNT_HEAD,2) "AccountHead",
                     pkgreturncursor.FNCGETDESCRIPTION(BCAC_LOCAL_MERCHANT,2) "Merchant",
                     BCAC_VOUCHER_REFERENCE "Refernce",
                     pkgreturncursor.FNCGETDESCRIPTION(BCAC_VOUCHER_CURRENCY,2) "Currency",
                     BCAC_VOUCHER_RATE "VoucherRate",
                     BCAC_CHEQUE_NUMBER "ChequeNumber",BCAC_CHEQUE_DATE "ChequeDate",
                     BCAC_VOUCHER_DETAIL "VoucherDetail",  BCAC_ACCOUNT_NUMBER "AccountNumber"
               from  trtran008
              where  BCAC_VOUCHER_NUMBER in(select CDEL_PL_VOUCHER
                                              from trtran006
                                             where CDEL_DEAL_NUMBER = vartemp
                                             and  CDEL_DEAL_NUMBER not in (select LMOD_REFERENCE_NUMBER
                                                                            from  trtran009)
                                             union
                                             select LMOD_PL_VOUCHER
                                               from trtran009
                                              where LMOD_REFERENCE_NUMBER = vartemp)
                and bcac_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );

      end if;
    Goto Process_End;
 end if;

if numInfoType = GConst.REFGROUPASSLIAB then
      numtemp := gconst.fncxmlextract(xmldoc,'SerialNo',numtemp);
      numtemp1 :=gconst.fncxmlextract(xmldoc,   'Scenario',   numtemp1);
      numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);
      numError := pkgfunctions.fncapplyrates(numtemp,numtemp1,datWorkDate);
     open gencursor for
         select pick_long_description "ACHead", pkgreturnreport.FNCCONVRS(sum(posn_transaction_amount),2,30400004) "TransAmount",
                pkgreturnreport.FNCCONVRS(sum(POSN_REVALUE_USD),2,30400004) "RevaluedUsd",
                pkgreturnreport.FNCCONVRS(sum (posn_position_inr)) "ProfitLoss", posn_account_code "AccountCode"
           from trsystem997, trmaster001
          where posn_account_code = pick_key_value
            and posn_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

       group by pick_long_description,posn_account_code;

          goto process_end;
 end if;

if numInfoType = GConst.REFDETAILASSLIAB then
        varOperation := 'Generating the cursor for position sheet';
        numtemp := gconst.fncxmlextract(xmldoc,'SerialNo',numtemp);
        numtemp1 :=gconst.fncxmlextract(xmldoc,   'Scenario',   numtemp1);
        numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate);
        numError := pkgfunctions.fncapplyrates(numtemp,numtemp1,datWorkDate);

        Open GenCursor for
        select pkgreturncursor.fncgetdescription(posn_company_code,1)  "CompanyName",
               pkgreturncursor.fncgetdescription(posn_currency_code,1) "Currency",
               pkgreturncursor.fncgetdescription(posn_account_code,1) "AccountDesc",
               posn_reference_number "ReferenceNumber",posn_reference_date "ReferenceDate",
               pkgreturnreport.FNCCONVRS(posn_transaction_amount,2,30400004) "TransAmount",
               pkgreturnreport.FNCCONVRS(posn_fcy_rate,4) "ExchangeRate",pkgreturnreport.FNCCONVRS(posn_inr_value) "INRValue",
               posn_dealer_id "DealerID", pkgreturncursor.fncgetdescription(posn_counter_party,1) "CounterParty",
               posn_company_code "CompanyCode", posn_currency_code "CurrencyCode",posn_account_code "AccountCode",
               posn_counter_party "CounterPartyCode",pkgreturnreport.FNCCONVRS(posn_m2m_inrrate,4,30400004) "M2MRate",
               pkgreturnreport.FNCCONVRS(posn_revalue_inr) "RevaluedINR",
               pkgreturnreport.FNCCONVRS(posn_position_inr) "ProfitLoss",to_date(posn_due_date,'dd-mm-yyyy') "MaturityDate"
          from trsystem997
           where posn_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );

        goto process_end;
    end if;

 if numInfoType = GConst.REFCURRENTACCOUNT then
    varOperation := 'Getting Cursor for Current Account Transactions';
    varTemp := GConst.fncXMLExtract(xmlDoc, '//CommandSet/VoucherReference',
              varTemp, GConst.TYPENODEPATH);
    numTemp := GConst.fncXMLExtract(xmlDoc, '//CommandSet/ReferenceSerial',
              numTemp, GConst.TYPENODEPATH);
    numCode := GConst.fncXMLExtract(xmlDoc, '//CommandSet/VoucherEvent',
              numCode, GConst.TYPENODEPATH);
    if numaction in (GCONST.CONFIRMLOAD ,GCONST.CONFIRMSAVE) Then
        open Gencursor for
          select bcac_voucher_number VoucherNumber, bcac_local_bank LocalBank, bcac_crdr_code CrdrCode,
            bcac_account_head AccountHead, bcac_voucher_type VoucherType,
            bcac_record_type RecordType, bcac_voucher_currency CurrencyCode,
            bcac_voucher_reference VoucherReference,
            bcac_reference_serial ReferenceSerial, bcac_voucher_fcy VoucherFcy,
            bcac_voucher_rate VoucherRate, bcac_voucher_inr VoucherInr,
            bcac_voucher_detail VoucherDetail, bcac_local_merchant LocalMerchant,
            bcac_account_number AccountNumber
            from CurrentAccountMaster
            where bcac_voucher_reference = varTemp
            and bcac_reference_serial = numTemp
            and bcac_voucher_type in (numCode ,24800032)
            and BCAC_VOUCHER_DATE= (select max(BCAC_VOUCHER_DATE) from  CurrentAccountMaster
                  where bcac_voucher_reference = varTemp
                  and bcac_reference_serial = numTemp
                  and bcac_voucher_type in (numCode ,24800032)
                  and bcac_record_status  <> 10200003)
            and bcac_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id = varUserid )
            and bcac_record_status <> 10200003;
     else
          open Gencursor for
          select bcac_voucher_number VoucherNumber, bcac_local_bank LocalBank, bcac_crdr_code CrdrCode,
            bcac_account_head AccountHead, bcac_voucher_type VoucherType,
            bcac_record_type RecordType, bcac_voucher_currency CurrencyCode,
            bcac_voucher_reference VoucherReference,
            bcac_reference_serial ReferenceSerial, bcac_voucher_fcy VoucherFcy,
            bcac_voucher_rate VoucherRate, bcac_voucher_inr VoucherInr,
            bcac_voucher_detail VoucherDetail, bcac_local_merchant LocalMerchant,
            bcac_account_number AccountNumber
            from CurrentAccountMaster
            where bcac_voucher_reference = varTemp
            and bcac_reference_serial = numTemp
            and bcac_voucher_type in (numCode ,24800032)
            and BCAC_VOUCHER_DATE= (select max(BCAC_VOUCHER_DATE) from  CurrentAccountMaster
                  where bcac_voucher_reference = varTemp
                  and bcac_reference_serial = numTemp
                  and bcac_voucher_type in (numCode ,24800032)
                  and bcac_record_status not in ( GConst.STATUSDELETED,GConst.STATUSINACTIVE))
            and bcac_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id = varUserid )
            and bcac_record_status not in ( GConst.STATUSDELETED,GConst.STATUSINACTIVE);
     end if;
    Goto Process_End;
  End if;

if numInfoType = GConst.REFFIXEDDEPOSIT then
    varOperation := 'Extracting Fixed Deposit Details';
   -- numCompanyCode:= GConst.fncXMLExtract(xmlDoc, '//BUYERSCREDIT/ROW/CompanyCode',numTemp);



   Begin

      numCompanyCode:= GConst.fncXMLExtract(xmlDoc, 'CompanyCode',numtemp);

      numCode := GConst.fncXMLExtract(xmlDoc, 'LocalBank',numTemp);


    --  varQuery := '//' || varEntity  || '/ROW/BuyersCredit';

     -- varTemp := GConst.fncXMLExtract(xmlDoc, varQuery,
    --                  varTemp, GConst.TYPENODEPATH);


   Exception
      when others then
        varTemp :=null ;
   End;

   begin

      varTemp1 := GConst.fncXMLExtract(xmlDoc, 'TradeReference',varTemp1);

   exception
     when others then
       varTemp:=null;
   end;

   insert into temp values(varTemp,varTemp1);
   commit;

    open GenCursor for
    select fncGetDescription(fdrf_company_code, GConst.PICKUPSHORT) "Company",
      fncGetDescription(fdrf_local_bank, GConst.PICKUPSHORT) "Bank",
      fdrf_fd_number "FDReference", fdrf_bank_reference "FDNumber",
      fdrf_reference_date "FDDate", fdrf_deposit_amount "DepositAmount",
      fdrf_interest_rate "Rate", fdrf_maturity_amount "Maturity",
      (select fdln_lien_reference
        from trtran017
        where fdln_fd_number = fdrf_fd_number
        and fdln_lien_reference = varTemp
        and fdln_record_status in (10200001, 10200003, 10200004)) "LienReference",
        fdrf_maturity_date "MaturityDate",
      0 RecordStatus
      from FixedDepositFile
      where fdrf_company_code = numCompanyCode
     -- and fdrf_local_bank = numCode
      and fdrf_record_status in (10200001, 10200003, 10200004)
      and fdrf_closure_type in (31600002,31600004)
      and fdrf_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

      and fdrf_fd_number in
      (select fdln_fd_number
        from trtran017
        where fdln_lien_reference = decode(varTemp,null,vartemp1,null,fdln_lien_reference)
        and fdln_record_status in (10200001, 10200003, 10200004));

    Goto Process_End;
  end if;

  if numInfoType = GConst.REFFIXEDDEPOSITCLOSURE then
    varOperation := 'Extracting Fixed Deposit Details';
    numCompanyCode:= GConst.fncXMLExtract(xmlDoc, '//ROW/CompanyCode',numtemp, GConst.TYPENODEPATH);
    numCode := GConst.fncXMLExtract(xmlDoc, 'LocalBank',numTemp);
    --numcode1 := GConst.fncXMLExtract(xmlDoc, 'SrNumber',numcode1);
    numcode4:=0;
    begin
      VarReference :=  GConst.fncXMLExtract(xmlDoc, 'KeyValues/FdNumber',VarReference);
      numcode4 :=  GConst.fncXMLExtract(xmlDoc, 'KeyValues/SrNumber',numcode4);
    exception
    when others then
      VarReference:=null;
      numcode4:=0;
    end;

    varQuery := '//' || varEntity  || '/ROW/BuyersCredit';
    Begin
      varTemp := GConst.fncXMLExtract(xmlDoc, varQuery,
                      varTemp, GConst.TYPENODEPATH);
    Exception
      when others then
        varTemp := 'NONE';
    End;
   --- delete from temp; insert into temp values(VarReference ,numaction); commit;
  if VarReference is not null THEN

    numcode5:=  GConst.fncXMLExtract(xmlDoc, 'KeyValues/ClosureSrno',numcode5);
    open GenCursor for
    select fncGetDescription(fdcl_company_code, GConst.PICKUPSHORT) "CompanyName",
      fncGetDescription(fdcl_local_bank, GConst.PICKUPSHORT) "BankName",
      fncGetDescription(FDcl_LOCATION_CODE,2) "Location",
      fdcl_fd_number "SystemRefNo",
      FDcl_SR_NUMBER "SrNumber",
      fdcl_bank_reference "FDNumber",
      fdcl_reference_date "ValueDate",
      fdcl_deposit_amount "OutStandingAmt",
      fdcl_interest_rate  "Rate",
      FDCL_INTEREST_AMOUNT "InterestAmt",
      fdcl_maturity_amount "MaturityAmt",
      fdcl_maturity_date "MaturityDate",
      0 RecordStatus,
      fdcl_company_code "companycode",
      fdcl_local_bank "bankcode",
      FDcl_LOCATION_CODE "locationcode",
     -- pkgsapinterface.fncgetcurrentacdetails(24800036,VarReference,0,4)  "CurrentAcNo",
      fdcl_credit_acno "CurrentAcNo",
      fdcl_deposit_amount "PrincipalAmount",
      Fdcl_Currency_Code "CurrencyCode",
      Fdcl_Scheme_Code "SchemeCode",
      FDcl_UTR_REFERENCE "UTRReference",
      FDcl_TRANSACTION_DATE "TransactionDate",
      FDcl_USER_REMARKS "UserRemarks"
      from trtran047a
      where fdcl_company_code = numCompanyCode
      and  fdcl_local_bank = numCode
      and fdcl_FD_number = VarReference
      and fdcl_sr_number = numcode4
      and FDCL_CLOSURE_SRNO=numcode5
      and fdcl_record_status not in(10200005,10200006) ;

  ELSE
   open GenCursor for
    select fncGetDescription(fdrf_company_code, GConst.PICKUPSHORT) "CompanyName",
      fncGetDescription(fdrf_local_bank, GConst.PICKUPSHORT) "BankName",
      fncGetDescription(FDRF_LOCATION_CODE,2) "Location",
      fdrf_fd_number "SystemRefNo",
      FDRF_SR_NUMBER "SrNumber",
      fdrf_bank_reference "FDNumber",
      fdrf_reference_date "ValueDate",
      fdrf_deposit_amount - nvl((select sum(nvl(fdcl_deposit_amount,0)) from trtran047a
                              where fdrf_FD_NUMBER = FDCL_FD_NUMBER
                              and FDRF_SR_NUMBER = FDCL_SR_NUMBER and
                              fdcl_record_status not in(10200005,10200006)),0)"OutStandingAmt",
      fdrf_interest_rate "Rate",  FDRF_INTEREST_AMOUNT "InterestAmt",
      fdrf_maturity_amount "MaturityAmt",
--      (select fdln_lien_reference
--        from trtran017
--        where fdln_fd_number = fdrf_fd_number
--        and fdln_lien_reference = varTemp
--        and fdln_record_status in (10200001, 10200003, 10200004)) "LienReference",
        fdrf_maturity_date "MaturityDate",
      0 RecordStatus,
      fdrf_company_code "companycode",fdrf_local_bank "bankcode",
      FDRF_LOCATION_CODE "locationcode",
      Fdrf_Credit_Acno  "CurrentAcNo",
      fdrf_deposit_amount "PrincipalAmount",
      Fdrf_Currency_Code "CurrencyCode",
      Fdrf_Scheme_Code "SchemeCode",
      FDRF_UTR_REFERENCE "UTRReference",
      FDRF_TRANSACTION_DATE "TransactionDate",
      FDRF_USER_REMARKS "UserRemarks"
      from FixedDepositFile
      where fdrf_company_code = numCompanyCode
      and    fdrf_local_bank = numCode
      and Fdrf_Process_Complete = decode(VarReference, null,12400002,Fdrf_Process_Complete)
      and fdrf_FD_number = decode(VarReference, null,fdrf_FD_number,VarReference)
      and fdrf_sr_number = decode(numcode4,0,fdrf_sr_number,numcode4)
      and fdrf_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

      and fdrf_record_status in (10200001, 10200003, 10200004)
      --and FDRF_SR_NUMBER = numcode1
      --and fdrf_closure_type in (31600002,31600004)
      and fdrf_fd_number not in
     (select fdln_fd_number
        from trtran017
        where fdln_lien_reference != varTemp
        and fdln_record_status in (10200001, 10200003, 10200004)) ;
  END IF;

    Goto Process_End;
  end if;
  if numInfoType = GConst.REFFDPRECLOSEDTLS then
    varOperation := 'Extracting Fixed Deposit Details';
    --numCompanyCode:= GConst.fncXMLExtract(xmlDoc, '//ROW/CompanyCode',numtemp, GConst.TYPENODEPATH);

    varTemp1 := GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/FdNumber',
              varTemp1, GConst.TYPENODEPATH);

    --varTemp1 := GConst.fncXMLExtract(xmlDoc, 'FdNumber',varTemp1);
    dELETE FROM TEMP;
    INSERT INTO TEMP VALUES(varTemp1,'ISHWARA');
    open GenCursor for
      SELECT PREC_PERIOD_UPTO "PeriodUpTO",
             PREC_PERIOD_IN "PeriodIn",
             PREC_INT_RATE "IntRate"
      FROM TRMASTER409 where PREC_fd_number = varTemp1
      and prec_record_status not in(10200005,10200006);
    Goto Process_End;
  end if;
  if numInfoType = GConst.REFTERMLOAN then
    varOperation := 'Extracting Statement of Term Loan';

    varQuery := '//' || varEntity  || '/ROW/';
    varTemp := GConst.fncXMLExtract(xmlDoc, varQuery || 'LoanNumber',
      varTemp, GConst.TYPENODEPATH);
      --numCode := GConst.fncXMLExtract(xmlDoc,'DebitType',numCode);
    numFcy := 0;
    delete from TRSYSTEM971
      where csmt_account_number = varTemp;

    For curLoan in
    (Select trpy_loan_number, trpy_loan_serial, trpy_repaid_date,
      trpy_transfer_code, trpy_repaid_inr, trpy_debit_type
      from trtran082
      where trpy_loan_number = varTemp
      order by trpy_loan_serial)
      Loop
      --if curLoan.trpy_debit_type = 24900012 then
        if  curLoan.trpy_transfer_code = GConst.ENTRYDEBIT then
          numFcy := numFcy + curLoan.trpy_repaid_inr;
        else
          numFcy := numFcy - curLoan.trpy_repaid_inr;
        end if;
--      --  else
--        if  curLoan.trpy_transfer_code = GConst.ENTRYDEBIT then
--          numFcy := numFcy + curLoan.trpy_repaid_fcy;
--        else
--          numFcy := numFcy; -- - curLoan.trpy_repaid_fcy;
--        end if;

 --     end if;
        insert into TRSYSTEM971(csmt_statement_date, csmt_company_code,
          csmt_local_bank, csmt_serial_number, csmt_account_number,
          csmt_transaction_date, csmt_debit_amount, csmt_credit_amount,
          csmt_balance_amount, csmt_voucher_detail)
        values(datWorkDate, numCompanyCode, 0, curLoan.trpy_loan_serial,
        varTemp, curLoan.trpy_repaid_date, decode(curLoan.trpy_transfer_code,
          GConst.ENTRYDEBIT, curLoan.trpy_repaid_inr, 0),
        decode(curLoan.trpy_transfer_code,
          GConst.ENTRYCREDIT, curLoan.trpy_repaid_inr, 0), numFcy,
        pkgReturnCursor.fncGetDescription(curLoan.trpy_debit_type,2));
      End Loop;

      Open GenCursor For
      select csmt_account_number "LoanNumber", csmt_serial_number "Srl",
        csmt_transaction_date "TransDate", csmt_voucher_detail "Details",
        csmt_debit_amount "Debits",
        csmt_credit_amount "Credits", csmt_balance_amount "Balance"
        from TRSYSTEM971
        where csmt_statement_date = datWorkDate
        and csmt_company_code = numCompanyCode
        and csmt_local_bank = 0
        and csmt_account_number = varTemp;
    Goto Process_End;
  End if;

    if numInfoType = GConst.REFTLREPAY then
    varOperation := 'Extracting Instalment/interest Details of Term Loan';
    varTemp := GConst.fncXMLExtract(xmlDoc,'LoanNumber',varTemp);
    numCode := GConst.fncXMLExtract(xmlDoc,'DebitType',numCode);
    datTemp := GConst.fncXMLExtract(xmlDoc,'ToDate',datTemp);

    if numCode = 24900012 then
      Open GenCursor for
      select tlon_instalment_amount FCY, tlon_sanctioned_rate Rate,
        round(tlon_instalment_amount * tlon_sanctioned_rate) INR
        from trtran081
        where tlon_loan_number = varTemp;
    else
      Open GenCursor for
      select trpy_repaid_fcy FCY, trpy_conversion_rate Rate,
        trpy_repaid_inr INR
        from trtran082
        where trpy_loan_number = varTemp
        and trpy_debit_type = 24900036
        and trpy_transfer_code = GConst.ENTRYDEBIT
        and trpy_to_date = datTemp;
    end if;
    Goto Process_End;
  End if;

if numInfoType = GConst.REFAUTORNWLDISP then
    varOperation := 'Extracting Fixed Deposit Details';
    --numCompanyCode:= GConst.fncXMLExtract(xmlDoc, '//ROW/CompanyCode',numtemp, GConst.TYPENODEPATH);
    --numCode := GConst.fncXMLExtract(xmlDoc, 'LocalBank',numTemp);
    varTemp := GConst.fncXMLExtract(xmlDoc, 'Entity',varTemp);
    if varTemp = 'FDCLOSURE' then
      varTemp1 := GConst.fncXMLExtract(xmlDoc, 'FdNumber',varTemp1);
    else
        varTemp1 := GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/FdNumber',
              varTemp1, GConst.TYPENODEPATH);
    end if;
    --varTemp1 := GConst.fncXMLExtract(xmlDoc, 'FdNumber',varTemp1);
    open GenCursor for
      SELECT Fdrf_Fd_Number "ReferenceNo",
        Fdrf_Sr_Number "SerialNo",
        Fdrf_Bank_Reference "BankReference",
        Fdrf_Reference_Date "ReferenceDate",
        Fdrf_Local_Bank "Bank",
        Fdrf_deposit_amount "DepositAmount",
        Fdrf_Interest_Rate "InterestRate",
        Fdrf_Maturity_Amount "MaturityAmount",
        Fdrf_Maturity_Date "MaturityDate",
        Fdrf_Interest_Amount "InterestAmount",
        Fdrf_Closure_Date "ClosureDate",
        Fdrf_Int_Paidamt "InterestPaidAmount",
        Fdrf_Tds_Deducted_Amt "TDSAmount",
        Fdrf_Tds_Surcharge "TDSSurcharge",
        Fdrf_Credit_Acno "AccountNumber"
      FROM trtran047
      WHERE Fdrf_Closure_Type = 31600002
      AND Fdrf_Fd_Number = varTemp1
      ORDER BY Fdrf_Reference_Date;
    Goto Process_End;
  end if;

    if numInfoType = GConst.REFINTDETAILS then
    varOperation := 'Extracting Fixed Deposit Details';
    --numCompanyCode:= GConst.fncXMLExtract(xmlDoc, '//ROW/CompanyCode',numtemp, GConst.TYPENODEPATH);
    varTemp := GConst.fncXMLExtract(xmlDoc, 'Entity',varTemp);

    if varTemp = 'FDCLOSURE' then
      varTemp1 := GConst.fncXMLExtract(xmlDoc, 'FdNumber',varTemp1);
    else
        varTemp1 := GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/FdNumber',
              varTemp1, GConst.TYPENODEPATH);
    end if;
    insert into temp values(varTemp1,'Ishwara') ;commit;
    open GenCursor for
          Select IntType"IntType",sum(IntAmount)"InterestAmount",SrNo"Sr.No" from(
            SELECT Intc_Charging_date IntChargeDate,
              Intc_Intcharge_Amount IntAmount,
              'Interest Amount In Accrual' IntType,
              1 SrNo
            FROM trtran047b where Intc_Charging_Type = 42200001
            and intc_fd_number = varTemp1
            and Intc_Record_Status not in(10200005,10200006)
            Union All
            SELECT Intc_Charging_date IntChargeDate,
              Intc_Intcharge_Amount IntAmount,
              'Interest Paid'IntType,
              2 SrNo
            FROM trtran047b where Intc_Charging_Type = 42200002
            and intc_fd_number = varTemp1
            and Intc_Record_Status not in(10200005,10200006)
            Union All
            SELECT Intc_Charging_date IntChargeDate,
              Intc_Intcharge_Amount IntAmount,
              'Accrual Int.Paid at close'IntType,
              3 SrNo
            FROM trtran047b where Intc_Charging_Type = 42200003
            and intc_fd_number = varTemp1
            and Intc_Record_Status not in(10200005,10200006)
            Union All
            SELECT Intc_Charging_date IntChargeDate,
              Intc_Intcharge_Amount IntAmount,
              'Excess Int.Reversal From Accrual'IntType,
              4 SrNo
            FROM trtran047b where Intc_Charging_Type = 42200004
            and intc_fd_number = varTemp1
            and Intc_Record_Status not in(10200005,10200006))
          group by IntType,SrNo order by SrNo;
    Goto Process_End;
  end if;



     if numInfoType = GConst.REFFDDTLS then
    varOperation := 'Extracting Fixed Deposit Details';
    --numCompanyCode:= GConst.fncXMLExtract(xmlDoc, '//ROW/CompanyCode',numtemp, GConst.TYPENODEPATH);

    varTemp1 := GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/FdNumber',
              varTemp1, GConst.TYPENODEPATH);

    --varTemp1 := GConst.fncXMLExtract(xmlDoc, 'FdNumber',varTemp1);
    INSERT INTO TEMP VALUES(varTemp1,'ISHWARA');
    open GenCursor for
     SELECT Fdrf_fd_number "SystemRefNo",
        Fdrf_Bank_reference "FDNumber",
        Fdrf_Reference_date "ValueDate",
        pkgreturncursor.fncgetdescription(Fdrf_Local_Bank,1) "BankName",
        Fdrf_Deposit_Amount "Depositmount",
        Fdrf_Interest_Rate "Interest",
        Fdrf_Maturity_Amount "MaturityAmount",
        Fdrf_Interest_Amount "InterestAmount",
        pkgreturncursor.fncgetdescription(Fdrf_Currency_Code,1)"Currency",
        pkgreturncursor.fncgetdescription(Fdrf_scheme_Code,1)"SchemeType",
        Fdrf_Open_Date "OpenDate",
        Fdrf_Addtional_Interest "Additionalinterest",
        Fdrf_Credit_Acno "CurrentAccountNo",
        Fdrf_Utr_Reference "UtrReference",
        Fdrf_Transaction_Date "TransactionDate",
        Fdrf_User_Remarks "UserRemarks",
        pkgreturncursor.fncgetdescription(Fdrf_UTR_Bank,1) "RemitterBank",
        Fdrf_UTR_Date "UTRDate"
      FROM trtran047 where Fdrf_fd_number = varTemp1
      and fdrf_record_status not in (10200005,10200006);
      --and Fdrf_Process_Complete = 12400002;
    Goto Process_End;
    end if;

    if numInfoType = GConst.REFTLDETAILS then
    varOperation := 'Extracting Term Loan Details';

    Open GenCursor for
    select tlon_bank_reference "LoanReference", tlon_reference_date "ReferenceDate",
      fncGetDescription(tlon_local_bank,GConst.PICKUPSHORT) as "BankName" ,
      fncGetDescription(tlon_currency_code,GConst.PICKUPSHORT) as "Currency" ,
      tlon_libor_rate "LiborRate", tlon_interest_spread "InterestSpread",
      tlon_interest_rate "InterestRate", tlon_sanctioned_fcy "SanctionAmount",
      tlon_due_date  "DueDate", tlon_sanctioned_rate SanctionedRate,
      tlon_loan_number LoanNumber, tlon_loan_type LoanType, tlon_local_bank LocalBank,
      tlon_currency_code CurrencyCode, tlon_period_type PeriodType,
      tlon_period_number PeriodNumber, tlon_instalment_type InstalmentType,
      tlon_instalment_amount Instalment, tlon_interest_type InterestType,
      Tlon_Record_Status RecordStatus
      from trtran081
 --     where tlon_company_code = numCompanyCode
      where tlon_record_status in
      (10200001, 10200003, 10200004);

      Goto Process_End;
  End if;

 if numInfoType = GConst.REFBCRFIXEDDEPOSIT then
    varOperation := 'Extracting FD details for Buyers credit';
    varQuery := '//' || varEntity  || '/ROW/BuyersCredit';
    varTemp := GConst.fncXMLExtract(xmlDoc, varQuery,
                      varTemp, GConst.TYPENODEPATH);

    Open Gencursor for
    select fncGetDescription(fdrf_company_code, GConst.PICKUPSHORT) "Company",
      fncGetDescription(fdrf_local_bank, GConst.PICKUPSHORT) "Bank",
      fdrf_fd_number "FDReference", fdrf_bank_reference "FDNumber",
      fdrf_reference_date "FDDate", fdrf_deposit_amount "DepositAmount",
      fdrf_interest_rate "Rate", fdrf_maturity_amount "Maturity",
     '' as  "LienReference",
        fdrf_maturity_date "MaturityDate",
      0 RecordStatus
      from FixedDepositFile, trtran017
      where fdrf_fd_number = fdln_fd_number
        and fdrf_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

      and fdln_lien_reference = varTemp
      and fdln_record_status in (10200001, 10200003, 10200004);

    Goto Process_End;
  End if;

  if numInfoType = GConst.REFPURCHASEORDER then
    varOperation := 'Extracting Purchase Order details ';
    numcode := Gconst.fncXMLExtract(xmldoc,'ImportExport',numcode);

   Open Gencursor for
      select trad_trade_reference as "PurchaseNumber",trad_product_quantity as "ProductQuantity",
             trad_product_rate as "ProductRate", trad_product_code "ProductCode",
             fncGetDescription(trad_product_code,2) as "Commodity",trad_vessel_name as "Vessel",
             fncGetDescription(trad_trade_currency,2) as "Currency",
             trad_voyage as "Voyage",
             fncGetDescription(trad_buyer_seller,2) as "Party",trad_bill_date "BillDate",trad_contract_no "ContractNo",
             trad_beneficiary "Benificiary",trad_port_name "Port",trad_app as "App",
             trad_term as  "Term",trad_trade_currency "CurrencyCode",trad_buyer_seller "SellerCode",
            --  fncGetDescription(trad_term,2) "Term",
             0 as "RecordStatus",trad_maturity_date "MaturityDate",
             trad_tenor_code as  "TenorCode",trad_tenor_Period "TenorPeriod",trad_maturity_from "MaturityFrom"
        from trtran002
       where trad_import_export= numcode
         and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

         and trad_process_complete = gconst.OPTIONNO
         and trad_record_status not in (10200005,10200006);
    Goto Process_End;
  End if;


-- manjunth sir modified on 21042014

--   if numInfoType = GConst.REFHEDGEDEALS then
--      varOperation := 'Extracting Cursor for Holding Rate';
--       numcode := Gconst.fncXMLExtract(xmldoc,'BaseCurrency',numcode);
--       numcode1 := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--       numcode2 := GConst.fncXMLExtract(xmldoc, 'HedgingWith', numCode2);
--       numcode3 := Gconst.fncXMLExtract(xmldoc,'CompanyCode',numcode3);
--       numcode4 := Gconst.fncXMLExtract(xmldoc,'CounterParty',numcode4);
--       numcode5 := Gconst.fncXMLExtract(xmldoc,'Category',numcode5);
--       numcode6 := Gconst.fncXMLExtract(xmldoc,'SubCategory',numcode6);
--      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
--       numLocationCode := Gconst.fncXMLExtract(xmldoc,'MultipleCurrency',numLocationCode);
--       
--    if numcode2 = GConst.ForwardContract then
------Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
--      if numLocationCode = 12400002 then
--      Open Gencursor for
--            select pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
--            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
--            deal_base_amount "BaseAmount",
--            NVL((select sum(hedg_hedged_fcy)
--                from trtran004
--                where hedg_deal_number = deal_deal_number
--                and hedg_record_status between 10200001 and 10200004)-
--                nvl((select sum(cdel_cancel_amount)
--                from trtran006 a
--                where a.cdel_deal_number = deal_deal_number
--                and a.cdel_deal_serial = deal_serial_number
--                and a.cdel_record_status in (10200001, 10200003,10200004)),0),0) "CoveredAmount",
--                NVL((select sum(cdel_cancel_amount)
--                from trtran006 a
--                where a.cdel_deal_number = deal_deal_number
--                and a.cdel_deal_serial = deal_serial_number
--                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
--                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
--                0.00 "HedgingAmount",
--              deal_user_reference "TradeReference",  
--            deal_Exchange_rate "BaseRate",deal_other_amount "INRAmount", ----Up to here
--                deal_maturity_date "MaturityDate",
--                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
--                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
--                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
--                deal_spot_rate "SpotRate", deal_forward_rate "Premium",
--                deal_margin_rate "MarginRate", deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
--                deal_deal_number "DealNumber",deal_other_currency OtherCurrencycode, 0 "RecordStatus"
--                from trtran001
--                where  deal_Company_Code in
--                (select usco_company_code from trsystem022a
--                  where usco_user_id =varUserid)
--                and deal_process_complete = Gconst.OptionNo
--                and deal_record_status in (10200001, 10200002, 10200003, 10200004)
--                and deal_process_complete = 12400002
--                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
--                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
--                and deal_process_complete = GConst.OPTIONNO 
--                and deal_buy_sell = decode(numcode1,25399999,deal_buy_sell, numcode1)
--                and deal_base_currency = decode(numcode,30499999,deal_base_currency, numcode)
--                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
--                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6);
--                
--
----        select deal_execute_date "ExecuteDate" ,deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
----        pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate)  "BaseAmount",  ----changed on 19/06/13 for taking outstanding Deal amount.
----        NVL((select sum(hedg_hedged_fcy)
----       from trtran004
----       where hedg_deal_number = deal_deal_number
----       and hedg_multiple_currency = numLocationCode
----       and hedg_record_status between 10200001 and 10200004),0) "AdjustedAmount",
----      deal_base_amount -
----      NVL((select sum(hedg_hedged_fcy)
----        from trtran004
----        where hedg_deal_number = deal_deal_number
----        and HEDG_MULTIPLE_CURRENCY = numLocationCode
----        and hedg_record_status between 10200001 and 10200004),0) "HedgingAmount",
----       fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
----       deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
----       deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,1) "CounterParty",
----       fncgetdescription(deal_init_code,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
----       fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
----       deal_time_stamp "DealTimeStamp",
----       (select user_user_name
----         from usermaster
----        where user_user_id=deal_user_id) "UserName",
----        deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
----        deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
----        deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode"  ,
----        round(deal_spot_rate,4) "SpotRate",
----        round(deal_forward_rate,4) "FrwRate",
----        round (deal_margin_rate,4) "MarginRate"
----       from trtran001
----       where deal_hedge_trade in (26000001 ,26000003)
----       and deal_Company_Code in
----       (select usco_company_code
----        from trsystem022a
----        where usco_user_id = varUserid)
----        and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
----        and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
----        and deal_process_complete = GConst.OPTIONNO
----        and deal_buy_sell = decode(numcode1,25399999,deal_buy_sell, numcode1)
----        and deal_base_currency = decode(numcode,30499999,deal_base_currency, numcode)
----        and deal_backup_deal = decode(numcode,33399999,deal_backup_deal, numcode5)
----        and deal_init_code = decode(numcode,33899999,deal_init_code, numcode6);
----        and (Deal_base_amount >
----        (NVL((select sum(hedg_hedged_fcy)
----          from trtran004
----          where hedg_deal_number = deal_deal_number
----          and hedg_record_status in (10200001, 10200003, 10200004)),0)))
----          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
----          and deal_process_complete=12400002;
--    elsif   numLocationCode = 12400001 then
--            Open Gencursor for
--                select deal_execute_date "ExecuteDate" ,deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
--                 deal_other_amount "BaseAmount",
--                  NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = deal_deal_number and HEDG_MULTIPLE_CURRENCY = numLocationCode
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
--                (deal_other_amount-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number and HEDG_MULTIPLE_CURRENCY = numLocationCode
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                )) "HedgingAmount",
--                 PKGRETURNCURSOR.fncgetdescription(deal_base_currency,2) "BaseCurrency", PKGRETURNCURSOR.fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
--                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",PKGRETURNCURSOR.fncgetdescription(deal_counter_party,1) "CounterParty",
--                 PKGRETURNCURSOR.fncgetdescription(deal_init_code,1) "HedgeTrade",PKGRETURNCURSOR.fncgetdescription(deal_buy_sell,1) "BuySell",
--                 PKGRETURNCURSOR.fncgetdescription(deal_swap_outright,1) "SwapOutright",PKGRETURNCURSOR.fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=deal_user_id) "UserName",
--                  deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode"  ,
--                  round(deal_spot_rate,4) "SpotRate",
--                  round(deal_forward_rate,4) "FrwRate",
--                  round (deal_margin_rate,4) "MarginRate"
--             from trtran001
--            where deal_hedge_trade in (26000001 ,26000003)
--                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
--                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
--                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
--                  and deal_backup_deal = decode(numcode,33399999,deal_backup_deal, numcode4)
--                  and deal_init_code = decode(numcode,33899999,deal_init_code, numcode5)
--                  and deal_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
--              and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = deal_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)))
--              and deal_record_status not in (10200005,10200006,10200012);
--    end if;
----end Ishwarachandra----
--
--    elsif numcode2=GConst.FutureContract then
--         Open Gencursor for
--            select cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
--                 cfut_base_amount "BaseAmount",
--                  NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = cfut_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",
--                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = cfut_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                +
--                  (NVL((select sum(cfrv_reverse_lot)
--                                              from trtran063
--                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
--                                              --updated by gouri on 040111
--                                               --and CDEL_CANCEL_TYPE =27000001
--                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * cfut_lot_price)
--                                                )) "HedgingAmount",
--                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
--                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
--                 cfut_maturity_date "MaturityDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
--                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
--                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
--                 cfut_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=cfut_user_id) "UserName",
--                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",cfut_lot_price "Lot Price",
--                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
--                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
--             from trtran061
--            where cfut_hedge_trade in (26000001,26000003)
--              and cfut_process_complete = GConst.OPTIONNO
--              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
--              --and cfut_counter_party=decode(numcode4,30699999,cfut_counter_party,numcode4)--numcode4
--              and cfut_exchange_code=decode(numcode4,70199999,cfut_exchange_code,numcode4)
--              and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
--              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
--              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
--              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
--              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = cfut_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                +
--                                          (NVL((select sum(cfrv_reverse_lot)
--                                              from trtran063
--                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
--                                              --updated by gouri on 040111
--                                               --and CDEL_CANCEL_TYPE =27000001
--                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * cfut_lot_price)
--                                                ))
--             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--
--      elsif numcode2=GConst.OptionContract then
--         Open Gencursor for
--            select  copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
--                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",                  NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = copt_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
--               --decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",
--                (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "BC",
--               (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "BP",
--               (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "SP",
--               (select avg(cosu_strike_rate) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "SC",
--                    NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = copt_deal_number
--                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
--                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
--                    ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
--                                                )) "HedgingAmount",
--                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
--                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
--                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
--                 COPT_MATURITY_DATE "MaturityDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
--                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
--                 fncgetdescription(copt_contract_type,1) "DealType",
--                 copt_time_stamp "DealTimeStamp",
--                 (select user_user_name
--                   from usermaster
--                  where user_user_id=copt_user_id) "UserName",
--                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot Numbers",copt_lot_price "Lot Price",
--                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
--                  copt_base_currency "BaseCurrencyCode",
--                   0 "ExchangeRate",
--                   0 "LocalRate"
--             from trtran071
--              where copt_hedge_trade in (26000001,26000003)
--                and copt_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
--                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
--                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
--                and (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)
--                                >  ( NVL((select sum(hedg_hedged_fcy)
--                                              from trtran004
--                                              where hedg_deal_number = copt_deal_number
--                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)))
--                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--    end if;
--  Goto Process_End;
--  End if;

if numInfoType = GConst.REFHEDGEDEALS then
      varOperation := 'Extracting Cursor for Holding Rate';
--       delete from Testhari;commit;
--       insert into Testhari values(varOperation,'varOperation');commit;
       numcode := Gconst.fncXMLExtract(xmldoc,'Param/BaseCurrency',numcode);      
      -- insert into Testhari values(numcode,'BaseCurrency');commit;
       numcode1 := GConst.fncXMLExtract(xmldoc, 'Param/BuySell', numCode);
    --    insert into Testhari values(numcode1,'BuySell');commit;
       numcode2 := GConst.fncXMLExtract(xmldoc, 'Param/HedgingWith', numCode2);
    --    insert into Testhari values(numcode2,'HedgingWith');commit;
       numcode3 := Gconst.fncXMLExtract(xmldoc,'Param/CompanyCode',numcode3);
     --   insert into Testhari values(numcode3,'CompanyCode');commit;
       numcode4 := Gconst.fncXMLExtract(xmldoc,'Param/CounterParty',numcode4);
     --   insert into Testhari values(numcode4,'CounterParty');commit;
       numcode5 := Gconst.fncXMLExtract(xmldoc,'Param/Category',numcode5);
    --    insert into Testhari values(numcode5,'Category');commit;
       numcode6 := Gconst.fncXMLExtract(xmldoc,'Param/SubCategory',numcode6);
     --   insert into Testhari values(numcode6,'SubCategory');commit;
      -- numdetail := Gconst.fncXMLExtract(xmldoc,'OtherCurrency',numdetail);
       numLocationCode := Gconst.fncXMLExtract(xmldoc,'Param/CrossCurrency',numLocationCode);
    --    insert into Testhari values(numLocationCode,'CrossCurrency');commit;
       numcode8:= Gconst.fncXMLExtract(xmldoc,'Param/LinkingCancelledDeals',numcode8);
    --    insert into Testhari values(numcode8,'LinkingCancelledDeals');commit;
    if numcode2 = GConst.ForwardContract then
----Added by Ishwarachandra--------------- For multiple deal linking for Forward Contract
      if numLocationCode = 12400002 then
      Open Gencursor for
            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
            deal_base_amount "BaseAmount",
            NVL((select sum(hedg_hedged_fcy)
                from trtran004
                where hedg_deal_number = deal_deal_number
                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
                NVL((select sum(cdel_cancel_amount)
                from trtran006 a
                where a.cdel_deal_number = deal_deal_number
                and a.cdel_deal_serial = deal_serial_number
                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
                (deal_base_amount-( NVL((select sum(hedg_hedged_fcy)
                            from trtran004
                            where hedg_deal_number = deal_deal_number 
                            and hedg_record_status not in (10200005,10200006)),0)
                              )) "UncoveredAmount",
                  (deal_base_amount-( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = deal_deal_number 
                                              and hedg_record_status not in (10200005,10200006)),0)
                                                )) "HedgingAmount",
                DEAL_SPOT_RATE "SpotRate",
                DEAL_FORWARD_RATE "ForwardRate",
                DEAL_MARGIN_RATE "MarginRate",
                deal_Exchange_rate "AllinRate",
                DEAL_MATURITY_FROM "ExpiryDate",
                deal_maturity_date "SettlementDate",
                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
                deal_user_reference "TradeReference",  
                deal_other_amount "INRAmount", ----Up to here
                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
               -- deal_spot_rate "SpotRate",
                deal_forward_rate "Premium",
              --  deal_margin_rate "MarginRate", 
                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
                from trtran001
                where  deal_Company_Code in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
                and deal_record_status in (10200001, 10200002, 10200003, 10200004)
                and deal_company_code = decode(numcode3,30199999, deal_company_code, numcode3)
                and deal_counter_party = decode(numcode4,30699999,deal_counter_party,numcode4)
              --  and deal_process_complete = GConst.OPTIONNO 
                and deal_buy_sell = decode(numcode1,25399999,deal_buy_sell, numcode1)
                and deal_base_currency = decode(numcode,30499999,deal_base_currency, numcode)
                and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
                and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
                
                and ((numUserActionType in (101,102,103,104)
                and deal_process_complete = numcode8
                and (Deal_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = deal_deal_number
                                                and hedg_record_status not in (10200005,10200006)),0))))
                 or (numUserActionType not in (101,102,103,104)));
                 
    elsif   numLocationCode = 12400001 then
            Open Gencursor for
            select rownum "Rownum", deal_execute_date "ExecuteDate" ,pkgReturnCursor.fncGetDescription(deal_backup_deal,2) "Category",
            pkgReturnCursor.fncGetDescription(deal_init_code,2) "SubCategory",
            DEAL_OTHER_AMOUNT "BaseAmount",
            NVL((select sum(hedg_hedged_fcy)
                from trtran004
                where hedg_deal_number = deal_deal_number
                and hedg_record_status not in (10200005,10200006)),0) "CoveredAmount",
                NVL((select sum(CDEL_OTHER_AMOUNT)
                from trtran006 a
                where a.cdel_deal_number = deal_deal_number
                and a.cdel_deal_serial = deal_serial_number
                and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Reversed",
                pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,datworkdate) as "OutStanding",
                  (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = deal_deal_number 
                                              and hedg_record_status not in (10200005,10200006)),0)
                                                )) "HedgingAmount",
                (DEAL_OTHER_AMOUNT-( NVL((select sum(hedg_hedged_fcy)
                            from trtran004
                            where hedg_deal_number = deal_deal_number 
                            and hedg_record_status not in (10200005,10200006)),0)
                              )) "UnCoveredAmount",
                DEAL_SPOT_RATE "SpotRate",
                DEAL_FORWARD_RATE "ForwardRate",
                DEAL_MARGIN_RATE "MarginRate",
                deal_Exchange_rate "AllinRate",
                DEAL_MATURITY_FROM "ExpiryDate",
                deal_maturity_date "SettlementDate",
                pkgReturnCursor.fncGetDescription(deal_buy_sell,2) "BuySell",
                deal_user_reference "TradeReference",  
                deal_other_amount "INRAmount", ----Up to here
                pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                pkgReturnCursor.fncGetDescription(deal_counter_party,2) "Bank",
               -- deal_spot_rate "SpotRate", 
                deal_forward_rate "Premium",
               -- deal_margin_rate "MarginRate", 
                deal_local_rate "LocalRate", deal_exchange_rate "ExchangeRate",
                deal_deal_number "DealNumber",deal_other_currency "OtherCurrencyCode", 0 "RecordStatus"
             from trtran001
            where deal_hedge_trade in (26000001 ,26000003)
                  and deal_process_complete = numcode8
                  and deal_record_status in (10200001, 10200002, 10200003, 10200004)
                  and deal_company_code=decode(numcode3,30199999,deal_company_code,numcode3)
                  and deal_counter_party=decode(numcode4,30699999,deal_counter_party,numcode4)
                  and deal_buy_sell= decode(numcode1,25399999,deal_buy_sell, numcode1)
                  and deal_backup_deal = decode(numcode5,33399999,deal_backup_deal, numcode5)
                  and deal_init_code = decode(numcode6,33899999,deal_init_code, numcode6)
                  and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
              and deal_other_currency = decode(numcode,30499999,deal_other_currency, numcode)
              and (DEAL_OTHER_AMOUNT >  ( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = deal_deal_number
                                                and hedg_record_status not in (10200005,10200006)),0)));
      end if;
    elsif numcode2=GConst.FutureContract then
         Open Gencursor for
            select rownum "Rownum", cfut_execute_date "ExecuteDate" ,cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
                 cfut_base_amount "BaseAmount",
                  NVL((select sum(hedg_hedged_fcy)
                         from trtran004
                         where hedg_deal_number = cfut_deal_number
                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",

                   (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = cfut_deal_number
                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
                                                +
                  (NVL((select sum(cfrv_reverse_lot)
                                              from trtran063
                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
                                                )) "UnCoveredAmount",
                                                
                (cfut_base_amount-( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = cfut_deal_number
                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
                                                +
                  (NVL((select sum(cfrv_reverse_lot)
                                              from trtran063
                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
                                                )) "HedgingAmount",
                 
                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
                 cfut_maturity_date "SettlementDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
                 fncgetdescription(cfut_init_code,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
                 cfut_time_stamp "DealTimeStamp",
                 (select user_user_name
                   from usermaster
                  where user_user_id=cfut_user_id) "UserName",
                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode"
             from trtran061
            where cfut_hedge_trade in (26000001,26000003)
              and cfut_process_complete = GConst.OPTIONNO
              and cfut_company_code=decode(numcode3,30199999,cfut_company_code,numcode3) --numcode3
              and cfut_exchange_code=decode(numcode4,70199999,cfut_exchange_code,numcode4)
              and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
              and cfut_buy_sell= decode(numcode1,25399999,cfut_buy_sell, numcode1)
              and cfut_base_currency = decode(numcode,30499999,cfut_base_currency, numcode)
              and cfut_backup_deal = decode(numcode5,33399999,cfut_backup_deal, numcode5)
              and cfut_init_code = decode(numcode6,33899999,cfut_init_code, numcode6)
              and (cfut_base_amount >  ( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = cfut_deal_number
                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
                                                +
                                          (NVL((select sum(cfrv_reverse_lot)
                                              from trtran063
                                              where Cfrv_DEAL_NUMBER = cfut_DEAL_NUMBER
                                                and cfrv_record_status not in (10200005, 10200006)),0) * cfut_lot_quantity * CFUT_EXCHANGE_RATE)
                                                ))
             and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);

      elsif numcode2=GConst.OptionContract then
         Open Gencursor for
            select rownum "Rownum", copt_execute_date "ExecuteDate",copt_deal_number "DealNumber",
                    decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount)"BaseAmount",      
                    NVL((select sum(hedg_hedged_fcy)
                         from trtran004
                         where hedg_deal_number = copt_deal_number
                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0) "CoveredAmount",                    
                (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.PURCHASEDEAL
                   and cosu_option_type=GCONST.OptionCall) "BC",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.PURCHASEDEAL
                   and cosu_option_type=GCONST.OptionPut) "BP",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.SALEDEAL
                   and cosu_option_type=GCONST.OptionPut) "SP",
               (select avg(cosu_strike_rate) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.SALEDEAL
                   and cosu_option_type=GCONST.OptionCall) "SC",
                    NVL((select sum(hedg_hedged_fcy)
                         from trtran004
                         where hedg_deal_number = copt_deal_number
                         and copt_record_status in (10200001, 10200003, 10200004,10200012)),0) "AdjustedAmount",
                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
                    ( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = copt_deal_number
                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
                                                )) "HedgingAmount",
                    (decode(COPT_DEAL_TYPE,32300002,copt_base_amount*2,32300005,copt_base_amount*2,copt_base_amount) -
                    ( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = copt_deal_number
                                                and hedg_record_status in (10200001, 10200003, 10200004)),0)
                                                )) "UnCoveredAmount",
                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
                 COPT_MATURITY_DATE "SettlementDate",1 "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
                 fncgetdescription(copt_contract_type,1) "DealType",
                 copt_time_stamp "DealTimeStamp",
                 (select user_user_name
                   from usermaster
                  where user_user_id=copt_user_id) "UserName",
                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot_Numbers",copt_lot_price "Lot_Price",
                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
                  copt_base_currency "BaseCurrencyCode",
                   0 "ExchangeRate",
                   0 "LocalRate"
             from trtran071
              where copt_hedge_trade in (26000001,26000003)
                and copt_process_complete = numcode8
                and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
                and copt_company_code=decode(numcode3,30199999,copt_company_code,numcode3)
                and copt_counter_party=decode(numcode4,30699999,copt_counter_party,numcode4)
                and copt_base_currency = decode(numcode,30499999,copt_base_currency, numcode)
                and copt_backup_deal = decode(numcode5,33399999,copt_backup_deal, numcode5)
                and copt_init_code = decode(numcode6,33899999,copt_init_code, numcode6)
                and copt_base_amount
                                >  ( NVL((select sum(hedg_hedged_fcy)
                                              from trtran004
                                              where hedg_deal_number = copt_deal_number
                                                and hedg_record_status in (10200001, 10200003, 10200004)),0))
                and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
    end if;
  Goto Process_End;
  End if;


  ------

  if numInfoType = GConst.REFHEDGESPECIFIC then
      varOperation := 'Extracting Cursor for deal';
          varQuery := '//' || varEntity  || '/ROW/BuyersCredit';
           varTemp := GConst.fncXMLExtract(xmlDoc, varQuery,
                      varTemp, GConst.TYPENODEPATH);

      Open Gencursor for
            select deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
                  Deal_base_amount "BaseAmount",
                  NVL((select sum(hedg_hedged_fcy)
                         from trtran004
                         where hedg_deal_number = deal_deal_number
                           and hedg_trade_reference= varTemp
                           and hedg_record_status in (10200001, 10200003, 10200004)),0) "AdjustedAmount",
                  Deal_base_amount -(NVL((select sum(hedg_hedged_fcy)
                                          from trtran004
                                          where hedg_deal_number = deal_deal_number
                                            and hedg_trade_reference= varTemp
                                            and hedg_record_status in (10200001, 10200003, 10200004)),0)) "HedgingAmount",
                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,1) "CounterParty",
                 fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp",
                 (select user_user_name
                   from usermaster
                  where user_user_id=deal_user_id) "UserName",
                  deal_other_currency "OtherCurrencyCode",
                  --deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate"
             from trtran001,trtran004
            where deal_hedge_trade in (26000001,26000003)
              and deal_deal_number=hedg_deal_number
              and hedg_deal_serial=deal_serial_number
              and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

              and hedg_trade_reference= varTemp
               and hedg_record_status in (10200001, 10200003, 10200004)
               and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
    Goto Process_End;
    End if;

--  if numInfoType = GConst.REFCURRENTACCOUNT then
--    varOperation := 'Getting Cursor for Current Account Transactions';
--    varTemp := GConst.fncXMLExtract(xmlDoc, '//CommandSet/VoucherReference',
--              varTemp, GConst.TYPENODEPATH);
--    numTemp := GConst.fncXMLExtract(xmlDoc, '//CommandSet/ReferenceSerial',
--              numTemp, GConst.TYPENODEPATH);
--    numCode := GConst.fncXMLExtract(xmlDoc, '//CommandSet/VoucherEvent',
--              numCode, GConst.TYPENODEPATH);
--
--    open Gencursor for
--      select bcac_voucher_number VoucherNumber, bcac_local_bank LocalBank, bcac_crdr_code CrdrCode,
--        bcac_account_head AccountHead, bcac_voucher_type VoucherType,
--        bcac_record_type RecordType, bcac_voucher_currency CurrencyCode,
--        bcac_voucher_reference VoucherReference,
--        bcac_reference_serial ReferenceSerial, bcac_voucher_fcy VoucherFcy,
--        bcac_voucher_rate VoucherRate, bcac_voucher_inr VoucherInr,
--        bcac_voucher_detail VoucherDetail, bcac_local_merchant LocalMerchant
--        from CurrentAccountMaster
--        where bcac_voucher_reference = varTemp
--        and bcac_reference_serial = numTemp
--        and bcac_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--        and bcac_voucher_type = numCode
--        and bcac_record_status != GConst.STATUSDELETED;
--
--    Goto Process_End;
--  End if;
--
 if numInfoType = GConst.REFPICKENTITY then
    varOperation := 'Extracting Entity Realtion Details';
    vartemp := Gconst.fncXMLExtract(xmldoc,'EntityRelation',vartemp);
      if vartemp = 'Entity' then
            open Gencursor for
             select distinct pick_long_description "Description", pick_key_group "Value"
               from trmaster001
               where pick_key_group in (select distinct erel_entity_type
                                         from trsystem008)
               and pick_key_number =0
               and pick_key_type in (10100002,10100003)
               order by pick_key_group;
      elsif  vartemp = 'Relation' then
      numcode := Gconst.fncXMLExtract(xmldoc,'Entity',numcode);
              open Gencursor for
               select distinct pick_long_description "Description", pick_key_group "Value"
                from  trmaster001
                where pick_key_group in (select distinct erel_relation_type
                                          from trsystem008
                                          where erel_entity_type = numcode)
                and pick_key_number =0
                and pick_key_type in (10100002,10100003)
                order by pick_key_group;
        end if   ;
   Goto Process_End;
  End if;
-- if numinfoType =Gconst.REFACCOUNTNUMBER then
--    varOperation := 'ExtractingBankCode';
--    numcode := Gconst.fncXMLExtract(xmldoc,'BankCode',numcode);
--    
--    open gencursor for
--    select lbnk_account_number AccountNumber from trmaster306 
--     where lbnk_pick_code=numcode
--     and lbnk_record_status not in (10200005,10200006);
--     Goto Process_End;  
-- 
-- end if;
-- 
-- if numinfoType =Gconst.REFBANKWITHCURRENTACC then 
--    varOperation := 'Extracting Bank With Current Account';
--    --numcode := Gconst.fncXMLExtract(xmldoc,'BankCode',numcode);
--    
--    open gencursor for
--     select Lbnk_Pick_Code "KeyValue",Lbnk_Pick_Code "KeyString",
--                   LBNK_SHORT_DESCRIPTION "ShortDescription",lbnk_Long_description "LongDescription",
--                   306 "KeyType"
--     from trmaster306 where lbnk_account_number is not null
--     and lbnk_record_status not in (10200005,10200006);
--     Goto Process_End;  
--     
-- end if;
 if numInfoType = GConst.REFPICKRELATION then
    varOperation := 'Extracting Entity Realtion Details';
    numcode := Gconst.fncXMLExtract(xmldoc,'RelationType',numcode);
    numcode1:= Gconst.fncXMLExtract(xmldoc,'MainEntity',numcode);
    vartemp := Gconst.fncXMLExtract(xmldoc,'Mode',vartemp);

   if vartemp = 'Add' then
         open Gencursor for
           select distinct pick_key_value "Value",pick_long_description "Description"
             from trmaster001
             where pick_key_number >0
             and pick_key_group =numcode
             and pick_key_value not in (select erel_entity_relation
                                          from trsystem008
                                          where erel_relation_type= numcode
                                          and erel_main_entity =numcode1
                                          and erel_company_code = pick_company_code
                                          and erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED))
             and pick_key_type in (10100002,10100003)
             order by pick_key_group;
    else
      open Gencursor for
           select distinct pick_key_value "Value",pick_long_description "Description"
             from trmaster001
             where pick_key_number >0
             and pick_key_group =numcode
             and pick_key_value in (select erel_entity_relation
                                      from trsystem008
                                     where erel_relation_type= numcode
                                       and erel_main_entity =numcode1
                                       and erel_company_code = pick_company_code
                                       and erel_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED))
              and pick_key_type in (10100002,10100003)
             order by pick_key_group;
    end if;
    Goto Process_End;
  End if;

-- if numInfoType = GConst.REFBUYERSLOAN then
--    varOperation := 'Cursor for Merchant transaction for Loans';
--    numcode := gconst.fncxmlextract(xmldoc,'CompanyCode', numcode);
--
--        Open GenCursor for
--             select pkgReturnCursor.fncGetDescription(trad_company_code, 1) "CompanyName",
--               trad_trade_reference "TradeReference", trad_user_reference "UserReference",
--               pkgReturnCursor.fncGetDescription(trad_trade_currency, 1) "TradeCurrency",
--               trad_trade_fcy "MerchantFcy",
--               nvl((select sum(bcrd_sanctioned_fcy)
--                     from trtran007,BuyersCredit
--                    where trad_trade_reference=trln_trade_reference
--                      and trln_loan_number =bcrd_buyers_credit
--                      and trln_record_status  in (10200001, 10200002, 10200003, 10200004)
--                 group by trln_trade_reference ),0) "AdjustedAmount",
--              trad_trade_fcy -nvl((select sum(bcrd_sanctioned_fcy)
--                                     from trtran007,BuyersCredit
--                                    where trad_trade_reference=trln_trade_reference
--                                      and trln_loan_number =bcrd_buyers_credit
--                                      and trln_record_status  in (10200001, 10200002, 10200003, 10200004)
--                                 group by trln_trade_reference ),0) as "REVERSEAMOUNT",
--               trad_trade_rate "MerchantRate",
--               pkgreturnreport.fncconvrs(trad_trade_inr) "MerchantInr",
--               trad_maturity_date "MaturityDate", 0 RecordStatus,
--                round( trad_spot_rate,4) "SpotRate",
--               round(trad_forward_rate,4) "FrwRate",
--               round( trad_margin_rate,4) "MarginRate"
--         from TradeRegister
--        where trad_company_code = numcode
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_import_export  between 25900051 and 25900053
--          and trad_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and trad_trade_fcy > nvl((select sum(bcrd_sanctioned_fcy)
--                                  from trtran007,BuyersCredit
--                                 where trad_trade_reference=trln_trade_reference
--                                   and trln_loan_number =bcrd_buyers_credit
--                                   and trln_record_status  in (10200001, 10200002, 10200003, 10200004)
--                                   group by trln_trade_reference),0)
--          and trad_record_status not in (10200005,10200006) ;
--    Goto Process_End;
--  End if;

  ---manjunath sir modified on 16042014
  if numInfoType = GConst.REFBUYERSLOANSPECIFIC then
       varOperation := 'Cursor for Merchant transaction for Loans';
       varTemp := GConst.fncXMLExtract(xmldoc,'//BUYERSCREDIT/ROW/BuyersCredit',
                 varTemp, GConst.TYPENODEPATH);
       Open GenCursor for
          select pkgReturnCursor.fncGetDescription(trad_company_code, 1) "CompanyName",
                 trad_trade_reference "TradeReference", trad_user_reference "UserReference",
                 pkgReturnCursor.fncGetDescription(trad_trade_currency, 1) "TradeCurrency",
                 trad_trade_fcy "MerchantFcy",
                 nvl((select sum(bcrd_sanctioned_fcy)
                         from trtran007,BuyersCredit
                        where trad_trade_reference=trln_trade_reference
                          and trln_loan_number =bcrd_buyers_credit
                          and bcrd_buyers_credit=varTemp
                          and trln_record_status  in (10200001, 10200002, 10200003, 10200004)
                     group by trln_trade_reference ),0) "AdjustedAmount",
                 nvl((select sum(bcrd_sanctioned_fcy)
                        from trtran007,BuyersCredit
                        where trad_trade_reference=trln_trade_reference
                          and trln_loan_number =bcrd_buyers_credit
                          and bcrd_buyers_credit=varTemp
                          and trln_record_status  in (10200001, 10200002, 10200003, 10200004)
                     group by trln_trade_reference ),0) as "ReverseAmount",
                 trad_trade_rate "BenchMarkRate",
                 trad_trade_inr "MerchantInr", trad_maturity_date "MaturityDate",
                 0 "RecordStatus",
                  round( trad_spot_rate,4) "SpotRate",
               round(trad_forward_rate,4) "FrwRate",
               round( trad_margin_rate,4) "MarginRate"
          from TradeRegister, trtran007
          where trad_company_code = trln_company_code
          and trad_trade_reference = trln_trade_reference
          and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

          and trln_loan_number = varTemp;
        --  and trad_process_complete = GConst.OPTIONNO;
     Goto Process_End;
  End if;
---manjunath sir modification ends

-- commented on 22-apr-10 to update the modified cursor
-- if numInfoType = GConst.REFDEALLINKING then
--       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
--       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
--       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
--       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
--       numcode1 := Gconst.fncXMLExtract(xmldoc,'Trade',numcode);
--
--       if numcode1 <> 0 then
--               open Gencursor for
--               ---hedge details
--                  select distinct deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
--                      Deal_base_amount "BaseAmount",
--                     (select sum(hedg_hedged_fcy)
--                       from  trtran004 H
--                       where H.hedg_trade_reference = vartemp
--                        and  H.hedg_deal_number = vartemp1
--                        and  H.hedg_deal_serial = numcode
--                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                        "AdjustedAmount",
--                        -- hedg_hedged_fcy  "AdjustedAmount",
--                        (select sum(hedg_hedged_fcy)
--                          from  trtran004 H
--                          where H.hedg_trade_reference = vartemp
--                           and  H.hedg_deal_number = vartemp1
--                           and  H.hedg_deal_serial = numcode
--                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                           "HedgingAmount",
--                         fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                         deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local)
--                           "AmountLocal",
--                         deal_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
--                         pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
--                         fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                         fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                         deal_time_stamp "DealTimeStamp",
--                         (select user_user_name
--                           from usermaster
--                          where user_user_id=deal_user_id) "UserName",
--                          deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                          deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                          deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate"
--                     from trtran004,trtran001
--                    where deal_deal_number = hedg_deal_number
--                      and deal_hedge_trade = 26000001
--                      and hedg_trade_reference = vartemp
--                      and hedg_deal_number = vartemp1
--                      and hedg_deal_serial = numcode
--                      and deal_process_complete = GConst.OPTIONNO
--                      and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--              else
--                open Gencursor for
--                      select  distinct trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
--                        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--                        trad_trade_fcy  "BillAmount",
--                        (select sum(hedg_hedged_fcy)
--                             from  trtran004 H
--                             where H.hedg_trade_reference = vartemp
--                             and  H.hedg_deal_number = vartemp1
--                             and  H.hedg_deal_serial = numcode
--                             and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                         "CoveredAmount",
--                         (select sum(hedg_hedged_fcy)
--                             from  trtran004 H
--                             where H.hedg_trade_reference = vartemp
--                              and  H.hedg_deal_number = vartemp1
--                              and  H.hedg_deal_serial = numcode
--                              and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                         "HedgingAmount",
--                          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
--                          trad_user_reference as billreference,trad_maturity_date "Maturity",
--                          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
--                          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
--                          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--                          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
--                          trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
--                      from TradeRegister,trtran004
--                      where trad_trade_reference = hedg_trade_reference
--                        and hedg_trade_reference = vartemp
--                        and hedg_deal_number = vartemp1
--                        and hedg_deal_serial = numcode
--                        and trad_process_complete = GConst.OPTIONNO
--                        and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--                        and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--              End if ;
--              Goto Process_End;
--            End if;

--if numInfoType = GConst.REFDEALLINKING then
--       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
--       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
--       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
--       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
--       numcode1 := Gconst.fncXMLExtract(xmldoc,'Trade',numcode);
--
--       if numcode1 <> 0 then
--               open Gencursor for
--               ---hedge details
--                  select distinct deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
--                      Deal_base_amount "BaseAmount",
--                     (select sum(hedg_hedged_fcy)
--                       from  trtran004 H
--                       where H.hedg_trade_reference = vartemp
--                        and  H.hedg_deal_number = vartemp1
--                        and  H.hedg_deal_serial = numcode
--                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                        "AdjustedAmount",
--                        -- hedg_hedged_fcy  "AdjustedAmount",
--                        (select sum(hedg_hedged_fcy)
--                          from  trtran004 H
--                          where H.hedg_trade_reference = vartemp
--                           and  H.hedg_deal_number = vartemp1
--                           and  H.hedg_deal_serial = numcode
--                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                           "HedgingAmount",
--                         fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                         deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local)
--                           "AmountLocal",
--                         deal_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
--                         pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
--                         fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
--                         fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                         deal_time_stamp "DealTimeStamp",
--                         (select user_user_name
--                           from usermaster
--                          where user_user_id=deal_user_id) "UserName",
--                          deal_other_currency "OtherCurrencyCode",deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
--                          deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
--                          deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate"
--                     from trtran004,trtran001
--                    where deal_deal_number = hedg_deal_number
--                      and deal_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
--                      and hedg_trade_reference = vartemp
--                      and hedg_deal_number = vartemp1
--                      and hedg_deal_serial = numcode
--                      and deal_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--                      and deal_process_complete = GConst.OPTIONNO
--                      and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--              else
--                open Gencursor for
--                    ----for trtran002
--                     select  distinct trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
--                            pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--                            trad_trade_fcy  "BillAmount",
--                            (select sum(hedg_hedged_fcy)
--                                 from  trtran004 H
--                                 where H.hedg_trade_reference = vartemp
--                                 and  H.hedg_deal_number = vartemp1
--                                 and  H.hedg_deal_serial = numcode
--                                 and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                             "CoveredAmount",
--                             (select sum(hedg_hedged_fcy)
--                                 from  trtran004 H
--                                 where H.hedg_trade_reference = vartemp
--                                  and  H.hedg_deal_number = vartemp1
--                                  and  H.hedg_deal_serial = numcode
--                                  and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                             "HedgingAmount",
--                              trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
--                              trad_user_reference as billreference,trad_maturity_date "Maturity",
--                              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
--                              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
--                              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--                              GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
--                              trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
--                          from TradeRegister,trtran004
--                          where trad_trade_reference = hedg_trade_reference
--                            and hedg_trade_reference = vartemp
--                            and hedg_deal_number = vartemp1
--                            and hedg_deal_serial = numcode
--                            and trad_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--                            and trad_process_complete = GConst.OPTIONNO
--                            and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--                            and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                     union
--                   -----for trtran005
--                         select  distinct fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
--                            pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
--                            fcln_sanctioned_fcy  "BillAmount",
--                            (select sum(hedg_hedged_fcy)
--                                 from  trtran004 H
--                                 where H.hedg_trade_reference = vartemp
--                                 and  H.hedg_deal_number = vartemp1
--                                 and  H.hedg_deal_serial = numcode
--                                 and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                             "CoveredAmount",
--                             (select sum(hedg_hedged_fcy)
--                                 from  trtran004 H
--                                 where H.hedg_trade_reference = vartemp
--                                  and  H.hedg_deal_number = vartemp1
--                                  and  H.hedg_deal_serial = numcode
--                                  and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
--                             "HedgingAmount",
--                              fcln_sanction_date as "ReferenceDate", fcln_reason_detail "ProductDescription",
--                              fcln_bank_reference as billreference,fcln_maturity_to "Maturity",
--                              pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
--                              pkgreturncursor.fncgetdescription(fcln_reason_code, 1) as "InstrumenType",
--                              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--                              GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,
--                              fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus
--                          from trtran005,trtran004
--                          where fcln_loan_number = hedg_trade_reference
--                            and hedg_trade_reference = vartemp
--                            and hedg_deal_number = vartemp1
--                            and hedg_deal_serial = numcode
--                            and fcln_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--                            and fcln_process_complete = GConst.OPTIONNO
--                            and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--                            and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL);
--               End if ;
--              Goto Process_End;
--        End if;


if numInfoType = GConst.REFDEALLINKING then
       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
      -- numcode1 := Gconst.fncXMLExtract(xmldoc,'Trade',numcode);
      
               open Gencursor for
               ---hedge details
               select rownum "Rownum", a.* from
                  (select distinct deal_deal_number "DealNumber",deal_exchange_rate "ExchangeRate",
                      Deal_base_amount "BaseAmount",
                     (select sum(hedg_hedged_fcy)
                       from  trtran004 H
                       where H.hedg_trade_reference = vartemp
                        and  H.hedg_deal_number = vartemp1
                        and  H.hedg_deal_serial = numcode
                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                        "AdjustedAmount",
                        -- hedg_hedged_fcy  "AdjustedAmount",
                        (select sum(hedg_hedged_fcy)
                          from  trtran004 H
                          where H.hedg_trade_reference = vartemp
                           and  H.hedg_deal_number = vartemp1
                           and  H.hedg_deal_serial = numcode
                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                           "HedgingAmount",
                         fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
                         deal_other_amount "OtherAmount",deal_local_rate "LocalRate",
                         --pkgreturnreport.FNCCONVRS(deal_amount_local)      "AmountLocal",
                         deal_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
                         pkgreturncursor.fncgetdescription(deal_counter_party,1) "CounterParty",
                         fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
                         fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                         deal_time_stamp "DealTimeStamp",
                         (select user_user_name
                           from usermaster
                          where user_user_id=deal_user_id) "UserName",
                          deal_other_currency "OtherCurrencyCode",
                          --deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
                          deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
                          deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate",
                          deal_counter_party "CounterPartyCode",DEAL_BACKUP_DEAL "CategoryCode",DEAL_INIT_CODE "subCategoryCode",
                          HEDG_HEDGING_WITH "HedgingWith"
                     from trtran004,trtran001
                    where deal_deal_number = hedg_deal_number
                      and deal_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
                      and hedg_trade_reference = vartemp
                      and hedg_deal_number = vartemp1
                      and hedg_deal_serial = numcode
                      and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

                      and deal_process_complete = GConst.OPTIONNO
                      and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                    union all
                  select distinct cfut_deal_number "DealNumber",cfut_exchange_rate "ExchangeRate",
                      cfut_base_amount "BaseAmount",
                     (select sum(hedg_hedged_fcy)
                       from  trtran004 H
                       where H.hedg_trade_reference = vartemp
                        and  H.hedg_deal_number = vartemp1
                        and  H.hedg_deal_serial = numcode
                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                        "AdjustedAmount",
                        -- hedg_hedged_fcy  "AdjustedAmount",
                        (select sum(hedg_hedged_fcy)
                          from  trtran004 H
                          where H.hedg_trade_reference = vartemp
                           and  H.hedg_deal_number = vartemp1
                           and  H.hedg_deal_serial = numcode
                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                           "HedgingAmount",
                         fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
                         cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
                         --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
                         cfut_maturity_date "MaturityDate",hedg_deal_serial "SerialNumber",
                         pkgreturncursor.fncgetdescription(cfut_counter_party,1) "CounterParty",
                         fncgetdescription(cfut_hedge_trade,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
                         null "SwapOutright",null "DealType",
                         cfut_time_stamp "DealTimeStamp",
                         (select user_user_name
                           from usermaster
                          where user_user_id=cfut_user_id) "UserName",
                          cfut_other_currency "OtherCurrencyCode",
                          --0 "HoldingRate",0 "HoldingRate1",
                          cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
                          cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode",cfut_execute_date "ExecuteDate",
                          cfut_counter_party "CounterPartyCode",cfut_BACKUP_DEAL "CategoryCode",cfut_INIT_CODE "subCategoryCode",
                          HEDG_HEDGING_WITH "HedgingWith"
                     from trtran004,trtran061
                    where cfut_deal_number = hedg_deal_number
                      and cfut_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
                      and hedg_trade_reference = vartemp
                      and hedg_deal_number = vartemp1
                      and hedg_deal_serial = numcode
                      and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
                      and cfut_process_complete = GConst.OPTIONNO
                      and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      UNION ALL
                  select distinct copt_deal_number "DealNumber",0 "ExchangeRate",
                      COPT_BASE_AMOUNT "BaseAmount",
                     (select sum(hedg_hedged_fcy)
                       from  trtran004 H
                       where H.hedg_trade_reference = vartemp
                        and  H.hedg_deal_number = vartemp1
                        and  H.hedg_deal_serial = numcode
                        and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                        "AdjustedAmount",
                        (select sum(hedg_hedged_fcy)
                          from  trtran004 H
                          where H.hedg_trade_reference = vartemp
                           and  H.hedg_deal_number = vartemp1
                           and  H.hedg_deal_serial = numcode
                           and   H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                           "HedgingAmount",
                         fncgetdescription(COPT_BASE_CURRENCY,2) "BaseCurrency", fncgetdescription(COPT_OTHER_CURRENCY,2) "OtherCurrency",
                         COPT_OTHER_AMOUNT "OtherAmount",1 "LocalRate",
                         --pkgreturnreport.FNCCONVRS(0)  "AmountLocal",
                         COPT_MATURITY_DATE "MaturityDate",hedg_deal_serial "SerialNumber",
                         pkgreturncursor.fncgetdescription(COPT_LOCAL_BANK,1) "CounterParty",
                         fncgetdescription(COPT_HEDGE_TRADE,1) "HedgeTrade",
                         null "BuySell",
                         null "SwapOutright",null "DealType",
                         COPT_TIME_STAMP "DealTimeStamp",
                         (select user_user_name
                           from usermaster
                          where user_user_id=COPT_USER_ID) "UserName",
                          COPT_OTHER_CURRENCY "OtherCurrencyCode",
                          --0 "HoldingRate",0 "HoldingRate1",
                          COPT_DEALER_REMARK "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
                          COPT_BASE_CURRENCY "BaseCurrencyCode",0 as "BuySellCode",COPT_EXECUTE_DATE "ExecuteDate",
                          COPT_COUNTER_PARTY "CounterPartyCode",COPT_BACKUP_DEAL "CategoryCode",COPT_INIT_CODE "subCategoryCode",
                          HEDG_HEDGING_WITH "HedgingWith"
                     from trtran004,trtran071
                    where copt_deal_number = hedg_deal_number
                      and COPT_HEDGE_TRADE in(gconst.HEDGEDEAL,GCONST.FTDEAL)
                      and hedg_trade_reference = vartemp
                      and hedg_deal_number = vartemp1
                      and hedg_deal_serial = numcode
                      and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
                      and copt_process_complete = GConst.OPTIONNO
                      and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
                      and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) a;                      
             
              GOTO PROCESS_END;
        End if;
        
  if numInfoType = GConst.REFORDERLINKING then
       varOperation := 'Extracting The Hegde Deal Linking Details For Delete Mode';
       vartemp  := Gconst.fncXMLExtract(xmldoc,'TradeReference',vartemp);
       vartemp1 := Gconst.fncXMLExtract(xmldoc,'DealNumber',vartemp);
       numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);             
                open Gencursor for           
                      select rownum "Rownum", a.* from
                      (select  distinct trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
                        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
                        trad_trade_fcy  "BillAmount",
                        (select sum(hedg_hedged_fcy)
                             from  trtran004 H
                             where H.hedg_trade_reference = vartemp
                             and  H.hedg_deal_number = vartemp1
                             and  H.hedg_deal_serial = numcode
                             and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                         "CoveredAmount",
                         (select sum(hedg_hedged_fcy)
                             from  trtran004 H
                             where H.hedg_trade_reference = vartemp
                              and  H.hedg_deal_number = vartemp1
                              and  H.hedg_deal_serial = numcode
                              and  H.hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL))
                         "HedgingAmount",
                          trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
                          trad_user_reference as "BillReference",trad_maturity_date "Maturity",
                          pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
                          pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
                          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
                          GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
                          trad_company_code "CompanyCode",trad_trade_currency "currencyCode" ,0 "RecordStatus",
                          trad_import_export "ImportExport"
                      from TradeRegister,trtran004
                      where trad_trade_reference = hedg_trade_reference
                        and hedg_trade_reference = vartemp
                        and hedg_deal_number = vartemp1
                        and hedg_deal_serial = numcode
                        and trad_process_complete = GConst.OPTIONNO
                        and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
                        and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) a;
              
              GOTO PROCESS_END;
        End if;      
--  if numInfoType = GConst.REFBCRSHIPMENT then
--    varOperation := 'Extracting Buyers Credit Shipment Info';
--    varQuery := '//' || varEntity  || '/ROW/BuyersCredit';
--    varTemp := GConst.fncXMLExtract(xmlDoc, varQuery,
--                      varTemp, GConst.TYPENODEPATH);
--
--    Open GenCursor for
--    select fncGetDescription(spay_company_code, GConst.PICKUPSHORT) Company,
--      fncGetDescription(spay_local_bank, GConst.PICKUPSHORT) Bank,
--      spay_shipment_number ShipmentNumber, ishp_supplier_reference Invoice,
--      spay_bcr_fcy RetiredAmount, spay_bcr_rate Rate,
--      spay_bcr_inr RetiredInr, spay_bcr_duedate DueDate
--      from tftran045, tftran042
--      where spay_shipment_number = ishp_shipment_number
--      and spay_bcr_number = varTemp;
--
--    Goto Process_End;
--  End if;
--

----------------------------------------------------   Commodities Module    ----------------------------------------
--   if numInfoType = GConst.REFMATURITYDATE then
--     numcode := GConst.fncXMLExtract(xmlDoc, 'ProductCode',numcode);
--     numcode1 :=GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numcode1);
--       Open GenCursor for
--
--      Goto Process_End;
--   end if;

-- This Cursor Is For Selecting Commodity Parameter like Commodities Dealing With and Service Tax

   if numInfoType = GConst.REFGETCOMMODITYPARAM then
       Open GenCursor for
          select prmc_commodity_currency DealingCurrency,prmc_service_tax Servicetax
            from trsystem051;
      Goto Process_End;
   end if;

-- This Cursor Is for Geting Product Details For the Selected Product in Commdity Deal Screen

--   if numInfoType = Gconst.REFPRODUCTDETAILS then
--       numcode:=  gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
--        Open GenCursor for
--           select cpro_short_description as "Name",cpro_long_description as "Name (inLong)",
--             cpro_due_date as "DueDate",
--             pkgreturncursor.fncGetdescription(cpro_exchange_code,2) as "Exchange",
--             pkgreturncursor.fncGetdescription(cpro_product_category,2) as "ProductCategory",
--             cpro_trade_unit || ' ' ||  pkgreturncursor.fncGetdescription(cpro_trade_uom,2) as "Trade Qty",
--             cpro_quote_value || ' ' || pkgreturncursor.fncGetdescription(cpro_quote_uom,2) "Qoute",
--             cpro_tick_size || ' ' || cpro_tick_value || ' ' || pkgreturncursor.fncGetdescription(cpro_tick_uom,2) "Ticker" ,
--             cpro_order_max || ' ' ||pkgreturncursor.fncGetdescription(cpro_order_uom,2) "Max Order",
--             cpro_position_max || ' ' || pkgreturncursor.fncGetdescription(cpro_position_uom,2)"Max Position",
--             cpro_delivery_unit || ' ' || pkgreturncursor.fncGetdescription(cpro_delivery_uom,2) "Delivery Unit",
--             cpro_price_band "Price Brand",cpro_initial_margin  "Initial Margin" ,
--             cpro_quality_detail "Quality Details", numcode1 "DueDay",
--             cpro_quote_value Qouteunit,cpro_quote_uom Qouteuom,cpro_conversion_value conversion,
--             cpro_pick_code "ProductCode",cpro_record_status as "RecordStatus"
--           from commodityproduct
--           where cpro_exchange_code=numcode
--           and cpro_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--           and CPRO_PRODUCT_CATEGORY = decode(varEntity,'CURRENCYFUTUREHEDGEDEAL',61000001,
--           'CURRENCYFUTURETRADEDEAL', 61000001,'OPTIONTRADEDEAL', 61000002,
--           'OPTIONHEDGEDEAL',61000002)
--           and cpro_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--           and cpro_due_date >= datWorkDate
--           order by cpro_due_date, cpro_trade_uom;
--
--          Goto Process_End;
--   end if; --COMMENTED AND TAKEN FROM ALMUS
--if numInfoType = Gconst.REFPRODUCTDETAILS then
----       numcode:=  gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
----       numcode2:=  gconst.fncxmlextract(xmldoc,'ProductCode',numcode2);
--         if varEntity = 'CURRENCYFUTUREHEDGEDEAL' then
--           numcode := GConst.fncXMLExtract(xmlDoc, '//CURRENCYFUTUREHEDGEDEAL//ExchangeCode',
--                numcode, GConst.TYPENODEPATH);       
--           numCode2 := GConst.fncXMLExtract(xmlDoc, '//CURRENCYFUTUREHEDGEDEAL//ProductCode',
--                numCode2, GConst.TYPENODEPATH); 
--         elsif  varEntity = 'OPTIONHEDGEDEAL' then
--           numcode := GConst.fncXMLExtract(xmlDoc, '//OPTIONHEDGEDEAL//ExchangeCode',
--                numcode, GConst.TYPENODEPATH);       
--           numCode2 := GConst.fncXMLExtract(xmlDoc, '//OPTIONHEDGEDEAL//ProductCode',
--                numCode2, GConst.TYPENODEPATH);          
--         end if;     
--              
--        Open GenCursor for
--           select cpro_short_description ||' '||TO_CHAR(CPRM_MATURITY_DATE,'DDMMYYYY') as "Name",cpro_long_description as "Name (inLong)",
--             CPRM_MATURITY_DATE as "DueDate", 
--             pkgreturncursor.fncGetdescription(cpro_exchange_code,2) as "Exchange",
--             pkgreturncursor.fncGetdescription(cpro_product_category,2) as "ProductCategory",
--             cpro_trade_unit || ' ' ||  pkgreturncursor.fncGetdescription(cpro_trade_uom,2) as "Trade Qty",
--             cpro_quote_value || ' ' || pkgreturncursor.fncGetdescription(cpro_quote_uom,2) "Quote", 
--             cpro_tick_size || ' ' || cpro_tick_value || ' ' || pkgreturncursor.fncGetdescription(cpro_tick_uom,2) "Ticker" , 
--             cpro_order_max || ' ' ||pkgreturncursor.fncGetdescription(cpro_order_uom,2) "Max O",
--             cpro_position_max || ' ' || pkgreturncursor.fncGetdescription(cpro_position_uom,2)"Max Position",
--             cpro_delivery_unit || ' ' || pkgreturncursor.fncGetdescription(cpro_delivery_uom,2) "Delivery Unit",
--             cpro_price_band "Price Brand",cpro_initial_margin  "Initial Margin" , 
--             cpro_quality_detail "Quality Details", numcode1 "DueDay",
--             cpro_quote_value Quoteunit,cpro_quote_uom Quoteuom,cpro_conversion_value conversion,
--             cpro_product_code "ProductCode", cpro_trade_unit tradeunit,cpro_record_status as "RecordStatus"  -- cpro_pick_code
--           from commodityproduct
--           left outer join 
--           TRMASTER503A ON
--           CPRM_PRODUCT_CODE = CPRO_PRODUCT_CODE           
--           where cpro_exchange_code=numcode
--           AND cpro_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
--           AND CPRM_MATURITY_DATE >= datWorkDate
--           AND CPRO_PRODUCT_CODE = numcode2
--           and CPRO_PRODUCT_CATEGORY = decode(varEntity,'CURRENCYFUTUREHEDGEDEAL',61000001,
--           'CURRENCYFUTURETRADEDEAL', 61000001,'OPTIONTRADEDEAL', 61000002,       
--           'OPTIONHEDGEDEAL',61000002,'IRF',61000003,'HEDGECOMMODITYDEAL',60300005,'TRADECOMMODITYDEAL',60300005)
--           and cpro_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          -- and cpro_due_date >= datWorkDate
--           order by cpro_short_description,CPRM_MATURITY_DATE;
--           
--          Goto Process_End;
--   end if;
if numInfoType = Gconst.REFPRODUCTDETAILS then
--       numcode:=  gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
--       numcode2:=  gconst.fncxmlextract(xmldoc,'ProductCode',numcode2);
         if varEntity in ('CURRENCYFUTUREHEDGEDEAL','CURRENCYFUTURETRADEDEAL') then
-- we need to take care of Exchange Code Later
--           numcode := GConst.fncXMLExtract(xmlDoc, '//CURRENCYFUTUREHEDGEDEAL//ExchangeCode',
--                numcode, GConst.TYPENODEPATH);       
           numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param//ProductCode',
                numCode2, GConst.TYPENODEPATH); 
         elsif  varEntity = 'OPTIONHEDGEDEAL' then
-- we need to take care of Exchange Code Later
--           numcode := GConst.fncXMLExtract(xmlDoc, '//OPTIONHEDGEDEAL//ExchangeCode',
--                numcode, GConst.TYPENODEPATH);       
           numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param//ProductCode',
                numCode2, GConst.TYPENODEPATH);          
         end if;     
        
        Open GenCursor for
           select cpro_short_description ||' '||TO_CHAR(CPRM_MATURITY_DATE,'DDMONYYYY') as "Name",cpro_long_description as "NameinLong",
             CPRM_MATURITY_DATE as "DueDate", 
             pkgreturncursor.fncGetdescription(cpro_exchange_code,2) as "Exchange",
             pkgreturncursor.fncGetdescription(cpro_product_category,2) as "ProductCategory",
             cpro_trade_unit || ' ' ||  pkgreturncursor.fncGetdescription(cpro_trade_uom,2) as "TradeQty",
             cpro_quote_value || ' ' || pkgreturncursor.fncGetdescription(cpro_quote_uom,2) "Quote", 
             cpro_tick_size || ' ' || cpro_tick_value || ' ' || pkgreturncursor.fncGetdescription(cpro_tick_uom,2) "Ticker" , 
             cpro_order_max || ' ' ||pkgreturncursor.fncGetdescription(cpro_order_uom,2) "MaxO",
             cpro_position_max || ' ' || pkgreturncursor.fncGetdescription(cpro_position_uom,2)"MaxPosition",
             cpro_delivery_unit || ' ' || pkgreturncursor.fncGetdescription(cpro_delivery_uom,2) "DeliveryUnit",
             cpro_price_band "PriceBrand",cpro_initial_margin  "InitialMargin" , 
             cpro_quality_detail "QualityDetails", 
             cpro_quote_value Quoteunit,cpro_quote_uom Quoteuom,cpro_conversion_value conversion,
             cpro_trade_unit "UOM",
             cpro_product_code "ProductCode", cpro_trade_unit tradeunit,cpro_record_status as "RecordStatus"
             -- cpro_pick_code
            -- numcode1 "DueDay"
           from commodityproduct
           left outer join 
           TRMASTER503A ON
           CPRM_PRODUCT_CODE = CPRO_PRODUCT_CODE           
           where 
           --cpro_exchange_code=numcode
           --AND 
           cpro_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
           AND CPRM_MATURITY_DATE >= datWorkDate
           AND CPRO_PRODUCT_CODE = numcode2
           and CPRO_PRODUCT_CATEGORY = decode(varEntity,'CURRENCYFUTUREHEDGEDEAL',61000001,
           'CURRENCYFUTURETRADEDEAL', 61000001,'OPTIONTRADEDEAL', 61000002,       
           'OPTIONHEDGEDEAL',61000002,'IRF',61000003,'HEDGECOMMODITYDEAL',60300005,'TRADECOMMODITYDEAL',60300005)
           and cpro_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

          -- and cpro_due_date >= datWorkDate
           order by cpro_short_description,CPRM_MATURITY_DATE;
    Goto Process_End;   
   end if;


  if numInfoType = Gconst.REFORDINVLINKING then
     varOperation := 'Extracting Trade Register for Order Invoice Linking';

     numCode  := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
     numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
     numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
     numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
     VarReference  := GConst.fncxmlextract(xmldoc, 'TradeRef',VarReference);
     --varTemp2 := GConst.fncxmlextract(xmldoc, 'ReverseRef',varTemp2);

--     delete from temp;
--     insert into temp values ('siva->', to_char(numCode) || ' ' || to_char(numCode2) || ' ' || to_char(numCode3) || ' ' || to_char(numCode4));
--     commit;
          open Gencursor for
         select  *
           from
            (select trad_trade_reference "TradeReference",
              trad_user_reference as "BillReference",
              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "Buyer_Supplier",
              pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
              trad_trade_fcy as "BillAmount",
              trad_trade_fcy - pkgforexprocess.fncGetOutstanding(trad_trade_reference,1,20,
              --decode(numCode, 25900086, 13, 25900024, 13, 20),
              GConst.AMOUNTFCY, datworkdate,null) "BalanceAmount",
              0.00 "LinkingAmount",
              (select NVL(sum(hedg_hedged_fcy),0)
                 from HedgeRegister
                 where hedg_trade_reference = trad_trade_reference
                   and hedg_deal_number = '1'
                  and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) "DealAmount",
              round(trad_trade_rate,4) "ExchangeRate",

              trad_reference_date as "ReferenceDate",
              trad_product_description "ProductDescription",
              TRAD_MATURITY_DATE "Maturity",
              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
              GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
              trad_company_code CompanyCode,
              trad_trade_currency currencyCode ,
              0 RecordStatus,
              trad_link_batchno "LinkBatchNo",
              trad_Link_date "LinkDate",
              TRAD_LOCAL_BANK "LocalBankCode",
              TRAD_USER_REFERENCE UserRef
              from TradeRegister a
              where trad_import_export = (case numcode when 25999999 then trad_import_export
                                               else numcode  end )
              and trad_process_complete = GConst.OPTIONNO
              and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

              and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
              and trad_company_code=decode(numcode2,30199999,trad_company_code,numcode2)
              and trad_local_bank =decode(numcode3,30699999,trad_local_bank,numcode3)
              and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
              and trad_trade_reference = decode(VarReference, 'A', trad_trade_reference, VarReference)
              );
              --and trad_reverse_reference = decode(varTemp2, null , trad_reverse_reference, varTemp2))a;

       Goto Process_End;
   end if;
   --modified by manjunath reddy on 02/012008 to get all users names,
   --added by ishwarachandra
--  If  numInfoType =gconst.REFCUSTOMRATEIMP THEN
--      varOperation := 'Extracting Import Exchange Rate';
--      datTemp := GConst.fncXMLExtract(xmlDoc, 'ReferenceDate', datTemp);
--      numCode := GConst.fncXMLExtract(xmlDoc, 'RateType', numCode);
--      numCode1 := GConst.fncXMLExtract(xmlDoc, 'TradeCurrency', numCode1);
--      numTemp := GConst.fncXMLExtract(xmlDoc, 'TenorPeriod', numTemp);
--      numCode2 := GConst.fncXMLExtract(xmlDoc, 'LocalBank', numCode2);
--
--  if varentity = 'IMPORTTRADEREGISTER' then
--      if numCode = 1 then
--
--        varOperation := 'Extracting Custom Rates';
--        Open GenCursor for
--        select erat_import_custom SpotRate, 0 Premium
--          from tfsystem009
--          where erat_currency_code = numCode1
--          and erat_effective_date =
--          (select max(erat_effective_date)
--            from tfsystem009
--            where erat_currency_code = numCode1
--            and erat_effective_date <= datTemp);
--      Else
--        if numTemp > 30 then
--          numTemp := numTemp / 30;
--        else
--          numTemp := 1;
--        end if;
--
--        varOperation := 'Extracting Bank Margin Rate';
--        select NVL(lbnk_bank_margin ,0)
--          into numFcy1
--          from trmaster306
--          where lbnk_pick_code = numCode2;
--
--        Open GenCursor for
--        select drat_spot_ask SpotRate,
--          decode(numTemp, 1,drat_month1_ask,2,drat_month2_ask,3,drat_month3_ask,
--            4,drat_month4_ask,5,drat_month5_ask,6,drat_month6_ask,
--            7,drat_month7_ask,8,drat_month8_ask,9,drat_month9_ask,
--            10,drat_month10_ask,11,drat_month11_ask,12,drat_month12_ask) -
--            drat_spot_ask Premium, numFcy1 BankMargin
--          from trtran012
--          where drat_currency_code = numCode1
--          and drat_for_currency = 30400003
--          and drat_effective_date =
--          (select max(drat_effective_date)
--            from trtran012
--            where drat_currency_code = numCode1
--            and drat_for_currency = 30400003
--            and drat_effective_date <= datTemp);
--      End if;
--    else
--       if numCode = 1 then
--        Open GenCursor for
--        select ERAT_EXPORT_CUSTOM SpotRate, 0 Premium
--          from tfsystem009
--          where erat_currency_code = numCode1
--          and erat_effective_date =
--          (select max(erat_effective_date)
--            from tfsystem009
--            where erat_currency_code = numCode1
--            and erat_effective_date <= datTemp);
--      Else
--        if numTemp > 30 then
--          numTemp := numTemp / 30;
--        else
--          numTemp := 1;
--        end if;
--
--        varOperation := 'Extracting Bank Margin Rate';
--        select NVL(lbnk_bank_margin ,0)
--          into numFcy1
--          from trmaster306
--          where lbnk_pick_code = numCode2;
--
--        Open GenCursor for
--        select drat_spot_ask SpotRate,
--          decode(numTemp, 1,drat_month1_bid,2,drat_month2_bid,3,drat_month3_bid,
--            4,drat_month4_bid,5,drat_month5_bid,6,drat_month6_bid,
--            7,drat_month7_bid,8,drat_month8_bid,9,drat_month9_bid,
--            10,drat_month10_bid,11,drat_month11_bid,12,drat_month12_bid) -
--            drat_spot_ask Premium, numFcy1 BankMargin
--          from trtran012
--          where drat_currency_code = numCode1
--          and drat_for_currency = 30400003
--          and drat_effective_date =
--          (select max(drat_effective_date)
--            from trtran012
--            where drat_currency_code = numCode1
--            and drat_for_currency = 30400003
--            and drat_effective_date <= datTemp);
--      End if;
--    end if;
--    GOTO process_end;
--  End If;


--  If  numInfoType =gconst.REFCUSTOMRATEIMP THEN
--      varOperation := 'Extracting Import Exchange Rate';
--      datTemp := GConst.fncXMLExtract(xmlDoc, 'ReferenceDate', datTemp);
--      numCode := GConst.fncXMLExtract(xmlDoc, 'RateType', numCode);
--      numCode1 := GConst.fncXMLExtract(xmlDoc, 'TradeCurrency', numCode1);
--      numTemp := GConst.fncXMLExtract(xmlDoc, 'TenorPeriod', numTemp);
--      numCode2 := GConst.fncXMLExtract(xmlDoc, 'LocalBank', numCode2);
--
--      varOperation := 'Extracting Bank Margin Rate';
--      select NVL(lbnk_bank_margin ,0)
--        into numTemp1
--        from trmaster306
--        where lbnk_pick_code = numCode2;
--
--  if varentity = 'IMPORTTRADEREGISTER' then
--      if numCode = 1 then
--
--        varOperation := 'Extracting Custom Rates';
--        Open GenCursor for
--        select erat_import_custom SpotRate, 0 Premium
--          from tfsystem009
--          where erat_currency_code = numCode1
--          and erat_effective_date =
--          (select max(erat_effective_date)
--            from tfsystem009
--            where erat_currency_code = numCode1
--            and erat_effective_date <= datTemp);
--      Else
--        select pkgForexProcess.fncGetRate(numCode1,30400003,datTemp,25300001,0,NULL)
--          into numSpot
--          from dual;
--
--        Open GenCursor for
--        select
--          numSpot SpotRate,
--          pkgForexProcess.fncGetRate(numCode1,30400003,datTemp,25300001,0,datTemp + numTemp) - numSpot Premium,
--          numTemp1 BankMargin
--          from dual;
--      End if;
--
--    else
--       if numCode = 1 then
--
--        Open GenCursor for
--        select ERAT_EXPORT_CUSTOM SpotRate, 0 Premium
--          from tfsystem009
--          where erat_currency_code = numCode1
--          and erat_effective_date =
--          (select max(erat_effective_date)
--            from tfsystem009
--            where erat_currency_code = numCode1
--            and erat_effective_date <= datTemp);
--      Else
--        select pkgForexProcess.fncGetRate(numCode1,30400003,datTemp,25300002,0,NULL)
--          into numSpot
--          from dual;
--
--        Open GenCursor for
--        select
--          numSpot SpotRate,
--          pkgForexProcess.fncGetRate(numCode1,30400003,datTemp,25300001,0,datTemp + numTemp) - numSpot Premium,
--          numTemp1 BankMargin
--          from dual;
--
--      End if;
--
--    end if;
--    GOTO process_end;
--  End If;

--updates by Ishwar as on 18042014
 
  If  numInfoType =gconst.REFCUSTOMRATEIMP THEN
      varOperation := 'Extracting Import Exchange Rate';
      datTemp := GConst.fncXMLExtract(xmlDoc, 'Param/ReferenceDate', datTemp);
      numCode := GConst.fncXMLExtract(xmlDoc, 'Param/RateType', numCode);
      numCode1 := GConst.fncXMLExtract(xmlDoc, 'Param/TradeCurrency', numCode1);
      numTemp := GConst.fncXMLExtract(xmlDoc, 'Param/TenorPeriod', numTemp);
      numCode2 := GConst.fncXMLExtract(xmlDoc, 'Param/LocalBank', numCode2);
      datTemp1 := GConst.fncXMLExtract(xmlDoc, 'Param/MaturityDate', datTemp1);
      
      begin 
        numCode3 := GConst.fncXMLExtract(xmlDoc, 'LocalCurrency', numCode3);
      exception 
        when others then 
         numCode3 :=30400003;
      end;
      
      if (numCode3 =30499999) then
        numCode3 :=30400003;
      end if;  
       
      varOperation := 'Extracting Bank Margin Rate';
      begin
      select NVL(lbnk_bank_margin ,0)
        into numTemp1
        from trmaster306
        where lbnk_pick_code = numCode2;
      exception 
        when others then 
         numTemp1 :=0;
      end;        

  if varentity = 'IMPORTTRADEREGISTER' then
--      if numCode = 1 then
--
--        varOperation := 'Extracting Custom Rates';
--        Open GenCursor for
--        select erat_import_custom SpotRate, 0 Premium
--          from tfsystem009
--          where erat_currency_code = numCode1
--          and erat_effective_date =
--          (select max(erat_effective_date)
--            from tfsystem009
--            where erat_currency_code = numCode1
--            and erat_effective_date <= datTemp);
--      Else
        select pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300001,0,NULL)
          into numSpot
          from dual;

        Open GenCursor for
        select
          numSpot "SpotRate",
          pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300001,0,datTemp1) - numSpot "Premium",
          numTemp1 "BankMargin"
          from dual;
--      End if;

    else
--       if numCode = 1 then
--
--        Open GenCursor for
--        select ERAT_EXPORT_CUSTOM SpotRate, 0 Premium
--          from tfsystem009
--          where erat_currency_code = numCode1
--          and erat_effective_date =
--          (select max(erat_effective_date)
--            from tfsystem009
--            where erat_currency_code = numCode1
--            and erat_effective_date <= datTemp);
--      Else
        select pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300002,0,NULL)
          into numSpot
          from dual;

        Open GenCursor for
        select
          numSpot "SpotRate",
          pkgForexProcess.fncGetRate(numCode1,numCode3,datTemp,25300002,0,datTemp + numTemp) - numSpot "Premium",
          numTemp1 "BankMargin"
          from dual;

--      End if;

    end if;
    GOTO process_end;
  End If;
  

  -----------------------------------------


   if numInfoType = Gconst.REFORDINVLINKINGRS1 then
     varOperation := 'Extracting Trade Register for Order Invoice Linking';

     numCode  := 25999999;
     VarReference := GConst.fncxmlextract(xmldoc, 'KeyValues/TradeReference',varTemp);

     --delete from temp;
     --insert into temp values ('siva->', VarReference);
     --commit;

           open Gencursor for
         select  *
           from
            (select trad_trade_reference "TradeReference",
                    trad_user_reference as "BillReference",
                    pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "Buyer_Supplier",
                    pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
                    trad_trade_fcy as "BillAmount",
                    trad_trade_rate "ExchangeRate",
      --              pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
      --              GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
                    0 "CoveredAmount",
                    (select NVL(sum(BREL_REVERSAL_FCY),0)
                       from trtran003
                       where BREL_TRADE_REFERENCE = trad_trade_reference
                         and BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE, GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) "LinkAmount",
                    trad_reference_date as "ReferenceDate",
                    trad_product_description "ProductDescription",
                    TRAD_MATURITY_DATE "Maturity",
                    pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
                    pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
                    GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
                    trad_company_code CompanyCode,
                    trad_trade_currency currencyCode,
                    0 RecordStatus,
                    trad_link_batchno "LinkBatchNo",
                    trad_Link_date "LinkDate",
                    TRAD_LOCAL_BANK LocalBankCode,
                    TRAD_USER_REFERENCE UserRef
               from TradeRegister a
               where
              --trad_import_export = (case numcode when 25999999 then trad_import_export
              --                                 else numcode  end )
              --and
              trad_process_complete = GConst.OPTIONNO
              and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

              --and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
              --and trad_company_code=decode(numcode2,30199999,trad_company_code,numcode2)
              --and trad_local_bank =decode(numcode3,30699999,trad_local_bank,numcode3)
              and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
              --and trad_trade_reference = decode(VarReference, 'A', trad_trade_reference, VarReference));
              and trad_trade_reference = VarReference);
              --and trad_reverse_reference = decode(varTemp2, null , trad_reverse_reference, varTemp2))a;

       Goto Process_End;
   end if;


 if numInfoType=Gconst.REFORDINVLINKINGRS2 then
     varOperation := 'Getting the linked record details';
     numCode  := 25999999;
     VarReference := GConst.fncxmlextract(xmldoc, 'KeyValues/TradeReference',varTemp);

     open Gencursor for
         select  *
           from
            (select brel_user_reference "TradeReference",
                    trad_user_reference as "BillReference",
                    pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "Buyer_Supplier",
                    pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
                    trad_trade_fcy as "BillAmount",
                    trad_trade_rate "ExchangeRate",
      --              pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
      --              GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
                    0 "CoveredAmount",
                    brel_reversal_fcy "LinkAmount",
--                    (select NVL(sum(BREL_REVERSAL_FCY),0)
--                       from trtran003
--                       where BREL_TRADE_REFERENCE = trad_trade_reference
--                         and BREL_RECORD_STATUS not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) "LinkAmount",
                    trad_reference_date as "ReferenceDate",
                    trad_product_description "ProductDescription",
                    TRAD_MATURITY_DATE "Maturity",
                    pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
                    pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
                    GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
                    trad_company_code CompanyCode,
                    trad_trade_currency currencyCode ,
                    0 RecordStatus,
                    trad_link_batchno "LinkBatchNo",
                    trad_Link_date "LinkDate",
                    TRAD_LOCAL_BANK LocalBankCode,
                    TRAD_USER_REFERENCE UserRef
               from trtran002,
                    trtran003
              where trad_reverse_reference = brel_trade_reference
                and brel_trade_reference = VarReference
                and trad_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

                --and trad_import_export = (case numcode when 25999999 then trad_import_export
                --                               else numcode  end )
              --  and trad_process_complete = GConst.OPTIONNO
              --and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
              --and trad_company_code=decode(numcode2,30199999,trad_company_code,numcode2)
              --and trad_local_bank =decode(numcode3,30699999,trad_local_bank,numcode3)
              and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)

              and brel_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED));
              --and trad_trade_reference = decode(VarReference, 'A', trad_trade_reference, VarReference));
              --and brel_trade_reference = 'SALEOR/SDJL/00005/12-13');
              --and trad_reverse_reference = decode(varTemp2, null , trad_reverse_reference, varTemp2))a;

     goto process_end;
  end if;


-- When Commodity Deal IS going Reverse then We are Going to Reverse on First Come First Server Basis
-- this cursor is used to show the user Which are the deals he is going to reverse

   if numInfoType = Gconst.REFREVERSALDEAL then

     begin
        vartemp := GConst.fncXMLExtract(xmlDoc, 'KeyValues/DealNumber',vartemp);
     exception
        when others then
          vartemp := null;
     end;

     numcode := GConst.fncXMLExtract(xmlDoc, 'ProductCode',numcode);
     numcode1 :=  GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numcode1);
     numcode2 :=  GConst.fncXMLExtract(xmlDoc, 'HedgeTrade',numcode2);
     numcode3 :=  GConst.fncXMLExtract(xmlDoc, 'BuySell',numcode3);
     numcode4 := GConst.fncXMLExtract(xmlDoc, 'CurrencyCode',numcode3);

     open GenCursor for
        select cmdl_deal_number "Deal Number", CMDL_EXECUTE_DATE  "Execute Date",
          pkgreturncursor.fncGetDescription(CMDL_PRODUCT_CODE,1) "Product " ,
          CMDL_LOT_NUMBERS   "No Of Lots" ,
          CMDL_LOT_PRICE     "Lot Price"   ,
          CMDL_DEAL_AMOUNT   "Deal Amount"   ,
          nvl((select sum(crev_reverse_lot)
             from trtran053
             where ((crev_reverse_deal=cmdl_deal_number) or(crev_deal_number=cmdl_deal_number))
             and crev_record_status between 10200001 and 10200004),0) "Adjusted Lots",
          '0' "Adjusting Lots",
          CMDL_MATURITY_DATE "Maturity Date",  pkgreturncursor.fncGetDescription(CMDL_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(CMDL_COUNTER_PARTY,2) "Broker"   ,
          pkgreturncursor.fncGetDescription(CMDL_CURRENCY_CODE,2)  "Currency"  ,
          CMDL_EXCHANGE_RATE  "Exchange Rate"  ,
          pkgreturncursor.fncGetDescription(CMDL_CONTRACT_TYPE,1)  "Contract Type"  ,
          pkgreturncursor.fncGetDescription(CMDL_HEDGE_TRADE ,1)   "Hedge or Trade"  ,
          pkgreturncursor.fncGetDescription(CMDL_BUY_SELL,1)       "Buy or Sell"  ,
          pkgreturncursor.fncGetDescription(CMDL_LOCAL_BANK,1)     "Local Bank",
           0 "Profit / Loss",CMDL_BUY_SELL as buysell
          FROM trtran051
          where  CMDL_EXCHANGE_CODE=decode(vartemp,null,numcode1,CMDL_EXCHANGE_CODE)
          and CMDL_HEDGE_TRADE = decode(vartemp,null,numcode2,CMDL_HEDGE_TRADE)
          and cmdl_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

          and CMDL_BUY_SELL =decode(vartemp,null,decode ( numcode3,Gconst.PURCHASEDEAL,Gconst.SALEDEAL,Gconst.SALEDEAL,Gconst.PURCHASEDEAL),CMDL_BUY_SELL)
          and CMDL_PRODUCT_CODE= decode(vartemp,null,numcode,CMDL_PRODUCT_CODE)
          and cmdl_deal_number like nvl(vartemp,'%')
          and cmdl_process_complete=Gconst.OptionNO
          and CMDL_CURRENCY_CODE = numcode4
          and CMDL_RECORD_STATUS between 10200001 and 10200004
          order by cmdl_time_stamp ;
    Goto Process_End;
   end if;


   if numInfoType = Gconst.REFCOMMODITYVALUE  then
    varoperation :='Extracting Commodity Deal Details For Valuation';
     --numCode :=GConst.fncXMLExtract(xmldoc,'CompanyCode',numCode);
    open GenCursor for
     select     ----deal details(0,1,2,3,4,5,6,7,8,9)----
            CMDL_DEAL_NUMBER "DealNumber",
            pkgreturncursor.fncgetdescription(CMDL_PRODUCT_CODE,2) "Product",
            pkgreturncursor.fncgetdescription(CMDL_BUY_SELL,2)"BuySell",
            CMDL_LOT_NUMBERS "No of Lots",
            CMDL_PRODUCT_QUANTITY "Quantity",
            CMDL_LOT_PRICE  "Unit Price",
            CMDL_DEAL_AMOUNT "DealAmount",
            pkgforexprocess.fncGetCommPandL(cmdl_deal_number,gconst.TOTALPANDL) "AccruedPandL",
              pkgreturncursor.fncgetdescription(CMDL_EXCHANGE_CODE,2) "Exchange",
            pkgreturncursor.fncgetdescription(CMDL_HEDGE_TRADE,2) "Hedge/Trade",
            ----MTM details(10,11,12,13,14,15,16) ----
            pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Lots",
           (cmdl_product_quantity /CMDL_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Quantity",
            pkgforexprocess.fnccommDealRate(cmdl_deal_number,datWorkDate) "Yesterday MtmRate",
            pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTINR, datworkdate)  "Yesterday OutstandingAmount",
            pkgforexprocess.fnccommoditymtmrate(CMDL_MATURITY_DATE,CMDL_EXCHANGE_CODE,CMDL_PRODUCT_CODE,datworkdate) "Today MtmRate",
            0.00 "Today OutstandingAmount",0.00 "TodayPandL",
             (select (pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate)
                    *CPRO_TRADE_UNIT) ||pkgreturncursor.fncgetdescription(CPRO_TRADE_UOM,2)
                       from trmaster503
                      where CPRO_PICK_CODE = CMDL_PRODUCT_CODE
                        and cpro_due_date= cmdl_maturity_date
                      and CPRO_EXCHANGE_CODE =CMDL_EXCHANGE_CODE ) as "LotSize",
            ---MarginDEtails(17,18,19,20)--
            CMDL_MARGIN_RATE "MarginRate",
            pkgforexprocess.fncCommMarginAmount(cmdl_deal_number,datworkdate,Gconst.TodayMargin) "Margin Req",
            pkgforexprocess.fncCommMarginAmount(cmdl_deal_number,datworkdate,Gconst.YesterdayMargin) "Margin Maintained",
            0 "MarginExcess/Less",
            --- InvisibleFields(21,22,23,24,25) -------------
            0.00 "UserRate",0.00 "UserDealValue", 0.00"UserProfitLoss",CMDL_BUY_SELL "BuySellCode",
            0 "SerialNumber"
      from  trtran051
     where  CMDL_PROCESS_COMPLETE = gconst.OPTIONNO
       and cmdl_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );
     Goto Process_End;
  end if;

--Geting Brokers Data for the Selected Exchange In Commodity Deal Screen

   if numInfoType = Gconst.REFBROKERS then
     numcode :=  GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numcode);
     open GenCursor for
        select cbrk_pick_code as keyValue ,cbrk_short_description as shortDescription,
          cbrk_long_description as longDescription
          from CommodityBroker
          where instr(cbrk_exchange_codes, to_char(numcode)) >0
          and cbrk_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
          and cbrk_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );
     Goto Process_End;
   end if;

--Geting Product Data for the Selected Exchange In Commodity Deal Screen

   if numInfoType = Gconst.REFPRODUCTS then
     numcode :=  GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numcode);
     open GenCursor for
        select cpro_pick_code as KeyValue,cpro_short_description as ShortDescription,
           cpro_long_description as longDescription,CPRO_TICKER_SYMBOL as TickerSymbol
           from CommodityProduct
           where cpro_exchange_code=numcode
           and cpro_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED)
           and cpro_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );
     Goto Process_End;
   end if;

   if numInfoType =Gconst.REFCOMMMTMRATE then

     varoperation :='Extracting Commodity Values Details';
     numCode :=GConst.fncXMLExtract(xmldoc,'CompanyCode',numCode);
     datTemp :=Gconst.fncXMLExtract(xmldoc,'MtmDate',datTemp);

      Open GenCursor for
       select     ----deal details(0,1,2,3,4,5,6,7,8,9)----
              CMTR_DEAL_NUMBER "DealNumber",
              pkgreturncursor.fncgetdescription(CMDL_PRODUCT_CODE,2) "Product",
              pkgreturncursor.fncgetdescription(CMDL_BUY_SELL,2)"BuySell",
              CMDL_LOT_NUMBERS "No of Lots",
              CMDL_PRODUCT_QUANTITY "Quantity",
              CMDL_LOT_PRICE  "Unit Price",
              CMDL_DEAL_AMOUNT "DealAmount",
              pkgforexprocess.fncGetCommPandL(cmdl_deal_number,gconst.TOTALPANDL) "AccruedPandL",
                pkgreturncursor.fncgetdescription(CMDL_EXCHANGE_CODE,2) "Exchange",
              pkgreturncursor.fncgetdescription(CMDL_HEDGE_TRADE,2) "Hedge/Trade",
              ----MTM details(10,11,12,13,14,15,16) ----
              pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Lots",
             (cmdl_product_quantity /CMDL_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Quantity",
              pkgforexprocess.fnccommDealRate(cmdl_deal_number,datWorkDate) "Yesterday MtmRate",
              pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTINR, datworkdate)  "Yesterday OutstandingAmount",
              pkgforexprocess.fnccommoditymtmrate(CMDL_MATURITY_DATE,CMDL_EXCHANGE_CODE,CMDL_PRODUCT_CODE,datworkdate) "Today MtmRate",
              0.00 "Today OutstandingAmount",0.00 "TodayPandL",
               (select (pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate)
                      *CPRO_TRADE_UNIT) ||pkgreturncursor.fncgetdescription(CPRO_TRADE_UOM,2)
                         from trmaster503
                        where CPRO_PICK_CODE = CMDL_PRODUCT_CODE
                          and cpro_due_date= cmdl_maturity_date
                        and CPRO_EXCHANGE_CODE =CMDL_EXCHANGE_CODE ) as "LotSize",
              ---MarginDEtails(17,18,19,20)--
              CMDL_MARGIN_RATE "MarginRate",
              pkgforexprocess.fncCommMarginAmount(cmdl_deal_number,datworkdate,Gconst.TodayMargin) "Margin Req",
              pkgforexprocess.fncCommMarginAmount(cmdl_deal_number,datworkdate,Gconst.YesterdayMargin) "Margin Maintained",
              0 "MarginExcess/Less",
              --- InvisibleFields(21,22,23,24,25) -------------
              0.00 "UserRate",0.00 "UserDealValue", 0.00"UserProfitLoss",CMDL_BUY_SELL "BuySellCode",
              0 "SerialNumber"
        from trtran052,trtran051
       where CMTR_MTM_DATE = datTemp
         and CMTR_COMPANY_CODE = numCode
         and CMTR_COMPANY_CODE=CMDL_COMPANY_CODE
         and CMTR_DEAL_NUMBER=CMDL_DEAL_NUMBER
         and cmdl_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

         and CMTR_RECORD_STATUS not in (gconst.STATUSINACTIVE,gconst.STATUSDELETED);

       Goto Process_End;

   end if;

  if numInfoType =Gconst.REFPRODUCTLIST then
    numcode :=  GConst.fncXMLExtract(xmlDoc, 'ROW/ExchangeCode',numcode);
   Open GenCursor for
    select distinct CPRO_SHORT_DESCRIPTION as "ShortDescription", CPRO_PICK_CODE "Product",
           CPRO_LONG_DESCRIPTION "LongDescription",CPRO_DUE_DATE "DueDate",
            CPRO_PRODUCT_CATEGORY "ProductCategory",CPRO_TICKER_SYMBOL "TickerSymbol",
           CPRO_TRADE_UNIT "TradeUnit",CPRO_TRADE_UOM "TradeUom",
           CPRO_QUOTE_VALUE  "QuoteValue",CPRO_QUOTE_UOM "QuoteUom",CPRO_TICK_SIZE "TickSize",
           CPRO_TICK_VALUE "TickValue",CPRO_TICK_UOM "TickUom",CPRO_ORDER_MAX "OrderMax",
           CPRO_ORDER_UOM "OrderUom",CPRO_POSITION_MAX "PositionMax",CPRO_POSITION_UOM "PositionUom",
           CPRO_DELIVERY_UNIT "DeliveryUnit",CPRO_DELIVERY_UOM "DeliveryUom",CPRO_PRICE_BAND "PriceBand",
           CPRO_INITIAL_MARGIN "InitialMargin",CPRO_QUALITY_DETAIL "QualityDetail",
           CPRO_DELIVERY_PLACES "DeliveryPlaces",CPRO_CONVERSION_VALUE "ConversionValue",
           CPRO_RECORD_STATUS "RecordStatus",CPRO_EXCHANGE_CODE "ExchangeCode"
    from  trmaster503
    where cpro_exchange_code=numcode
      and cpro_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

      and cpro_record_status not in(gconst.STATUSINACTIVE,gconst.STATUSDELETED);
   Goto Process_End;
  end if;
  if numInfoType = Gconst.REFCOMMRISKPARAM then

       varoperation := 'extracting Commodity Risk Parameters';
       numcode :=gconst.fncxmlextract(xmldoc,'KeyValues/RiskType',numcode);
       vartemp := gconst.fncxmlextract(xmldoc,'KeyValues/DelarId',vartemp);
       if vartemp !='0' then
          vartemp1:='and rprm_dealer_id' || vartemp;
       end if;

       sqlQuery :='select crpm_company_code as companycode,crpm_crsk_type as risktype,
                          crpm_hedge_trade as hedgetrade, crpm_buy_sell as buysell,
                          crpm_deal_type as dealtype,crpm_counter_party as counterparty,
                          crpm_dealer_id as dealerid ,crpm_gross_net grossnet,
                          crpm_fluct_allowed as fluctallowed,crpm_fluct_ceo as fluctceo,
                          crpm_exchange_code as ExchangeCode ,crpm_product_code as ProductCode
                     from commodityparameter
                    where crpm_crsk_type  =' || numcode || vartemp1;


       open gencursor for sqlquery;
       goto process_end;
  end if;
  if numInfoType = Gconst.REFCOMMRISKDETAILS then
      numcode :=gconst.fncxmlextract(xmldoc,'KeyValues/RiskType',numcode);
      varoperation := 'extracting particular risk details';
        open gencursor for
          select *
            from CommodityRisk
            where crsk_crsk_type=numcode;
         goto process_end;
  end if;

  if numInfoType =Gconst.REFCOMMOUTSTANDINGDEAL then
     numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
     varoperation := 'Extracting Information of Outstanding Deals ';

     open gencursor for
        select cmdl_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cmdl_product_code,2) "Product",
          cmdl_execute_date "Execute Date",
          pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate)  "NoOfLots",
          cmdl_Lot_price "UnitPrice",
          (cmdl_product_quantity /CMDL_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,GConst.AMOUNTFCY, datworkdate) "ProductQty",
          pkgreturncursor.fncgetdescription(cmdl_product_uom,2) "Uom",
          cmdl_deal_amount "TradeAmount",cmdl_margin_amount "MarginAmount",
          cmdl_brokerage_amount "BrokerageAmount",cmdl_transaction_cost "TransactionCost",
          cmdl_maturity_date "MaturityDate",cmdl_buy_sell "Buysell",cmdl_hedge_trade "hedgetrade",
          cmdl_product_code "productCode",cmdl_record_status "RecordStatus"
          from trtran051
          where cmdl_process_complete= gconst.optionNo
            and cmdl_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

          and cmdl_exchange_code= numcode;
         goto process_end;
  end if;

  -------------CURRENCYFUTURES----------------------------
--     if numInfoType = Gconst.REFFUTUREREVERSALDEAL then
--
--     begin
--        vartemp := GConst.fncXMLExtract(xmlDoc, 'KeyValues/DealNumber',vartemp);
--     exception
--        when others then
--          vartemp := null;
--     end;
--
--     numcode := GConst.fncXMLExtract(xmlDoc, 'ProductCode',numcode);
--     numcode1 :=  GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numcode1);
--     numcode2 :=  GConst.fncXMLExtract(xmlDoc, 'HedgeTrade',numcode2);
--     numcode3 :=  GConst.fncXMLExtract(xmlDoc, 'BuySell',numcode3);
--
--     open GenCursor for
--        select cfut_deal_number "Deal Number", CFUT_EXECUTE_DATE  "Execute Date",
--          pkgreturncursor.fncGetDescription(CFUT_PRODUCT_CODE,1) "Product " ,
--          CFUT_LOT_NUMBERS   "No Of Lots" ,
--          CFUT_LOT_PRICE     "Lot Price"   ,
--          CFUT_Base_AMOUNT   "Deal Amount"   ,
--          nvl((select sum(cfrv_reverse_lot)
--             from trtran063
--             where ((cfrv_reverse_deal=cfut_deal_number) or(cfrv_deal_number=CFUT_deal_number))),0) "Adjusted Lots",
--          '0' "Adjusting Lots",
--          CFUT_MATURITY_DATE "Maturity Date",  pkgreturncursor.fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
--          pkgreturncursor.fncGetDescription(CFUT_COUNTER_PARTY,2) "Broker"   ,
--          pkgreturncursor.fncGetDescription(CFUT_BASE_CURRENCY,2)  "Base Currency"  ,
--          pkgreturncursor.fncGetDescription(CFUT_OTHER_CURRENCY,2)  "Other Currency"  ,
--          CFUT_EXCHANGE_RATE  "Exchange Rate"  ,
--          pkgreturncursor.fncGetDescription(CFUT_CONTRACT_TYPE,1)  "Contract Type"  ,
--          pkgreturncursor.fncGetDescription(CFUT_HEDGE_TRADE ,1)   "Hedge or Trade"  ,
--          pkgreturncursor.fncGetDescription(CFUT_BUY_SELL,1)       "Buy or Sell"  ,
--          pkgreturncursor.fncGetDescription(CFUT_LOCAL_BANK,1)     "Local Bank",
--           0 "Profit / Loss",CFUT_BUY_SELL as buysell
--          FROM trtran061
--          where  CFUT_EXCHANGE_CODE=decode(vartemp,null,numcode1,CFUT_EXCHANGE_CODE)
--          and CFUT_HEDGE_TRADE = decode(vartemp,null,numcode2,CFUT_HEDGE_TRADE)
--          and CFUT_BUY_SELL =decode(vartemp,null,decode ( numcode3,Gconst.PURCHASEDEAL,Gconst.SALEDEAL,Gconst.SALEDEAL,Gconst.PURCHASEDEAL),CFUT_BUY_SELL)
--          and CFUT_PRODUCT_CODE= decode(vartemp,null,numcode,CFUT_PRODUCT_CODE)
--          and CFUT_deal_number like nvl(vartemp,'%')
--          and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and CFUT_process_complete=Gconst.OptionNO
--          order by CFUT_time_stamp ;
--    Goto Process_End;
--   end if;
   -------aakash 02-may-13 12:30 pm--

  if numInfoType = Gconst.REFFUTUREREVERSALDEAL then
   
     begin
        vartemp := GConst.fncXMLExtract(xmlDoc, 'KeyValues/DealNumber',vartemp);
     exception
        when others then
          vartemp := null;
     end;
     
     numcode := GConst.fncXMLExtract(xmlDoc, 'ProductCode',numcode);
     numcode1 :=  GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numcode1);
     numcode2 :=  GConst.fncXMLExtract(xmlDoc, 'HedgeTrade',numcode2);
     numcode3 :=  GConst.fncXMLExtract(xmlDoc, 'BuySell',numcode3);
     
     open GenCursor for 
        select cfut_deal_number "Deal Number", CFUT_EXECUTE_DATE  "Execute Date",
          pkgreturncursor.fncGetDescription(CFUT_PRODUCT_CODE,1) "Product " ,
          CFUT_LOT_NUMBERS   "No Of Lots" ,
          CFUT_EXCHANGE_RATE     "Lot Price"   ,
          CFUT_Base_AMOUNT   "Deal Amount"   ,
          nvl((select sum(cfrv_reverse_lot) 
             from trtran063
             where ((cfrv_reverse_deal=cfut_deal_number) or(cfrv_deal_number=CFUT_deal_number))),0) "Adjusted Lots",
          '0' "Adjusting Lots",  
          CFUT_MATURITY_DATE "Maturity Date",  pkgreturncursor.fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(CFUT_COUNTER_PARTY,2) "Broker"   ,
          pkgreturncursor.fncGetDescription(CFUT_BASE_CURRENCY,2)  "Base Currency"  ,
          pkgreturncursor.fncGetDescription(CFUT_OTHER_CURRENCY,2)  "Other Currency"  ,
          CFUT_EXCHANGE_RATE  "Exchange Rate"  ,
          pkgreturncursor.fncGetDescription(CFUT_CONTRACT_TYPE,1)  "Contract Type"  ,
          pkgreturncursor.fncGetDescription(CFUT_HEDGE_TRADE ,1)   "Hedge or Trade"  ,
          pkgreturncursor.fncGetDescription(CFUT_BUY_SELL,1)       "Buy or Sell"  ,
          pkgreturncursor.fncGetDescription(CFUT_LOCAL_BANK,1)     "Local Bank",
           0 "Profit / Loss",CFUT_BUY_SELL as buysell
          FROM trtran061
          where  CFUT_EXCHANGE_CODE=decode(vartemp,null,numcode1,CFUT_EXCHANGE_CODE)
          and CFUT_HEDGE_TRADE = decode(vartemp,null,numcode2,CFUT_HEDGE_TRADE)
          and CFUT_BUY_SELL =decode(vartemp,null,decode ( numcode3,Gconst.PURCHASEDEAL,Gconst.SALEDEAL,Gconst.SALEDEAL,Gconst.PURCHASEDEAL),CFUT_BUY_SELL)
          and CFUT_PRODUCT_CODE= decode(vartemp,null,numcode,CFUT_PRODUCT_CODE)
          and CFUT_deal_number like nvl(vartemp,'%')
          and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

          and CFUT_process_complete=Gconst.OptionNO
          order by CFUT_time_stamp ;
    Goto Process_End;
   end if;
------------------added by Aakash/gouri 13/06/13
--  if numInfoType =Gconst.REFFUTUREOUTSTANDING then
--     numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
--     varoperation := 'Extracting Information of Outstanding Deals ';
--
--    if varEntity = 'CURRENCYFUTUREDEALCANCEL' then
--     Open Gencursor For
--        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--          cfut_execute_date "Execute Date",
--          --0 "NoOfLots",
--          pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "NoOfLots",
--          cfut_Lot_price "UnitPrice",
--        --  0 "LotQuantity",
--          (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
--
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
--          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
--           pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
--          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
--          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BackupDeal",
--          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "InitCode",
--          Cfut_Bank_Reference "BankReference",Cfut_Company_Code "CompanyCode",
--          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty"
--       from trtran061
--       where cfut_process_complete= gconst.optionNo
--       and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--          And Cfut_Exchange_Code= Numcode
--          and cfut_hedge_trade in (26000001,26000003)
--          and cfut_record_status not in (10200006, 10200005);
--
--
--      elsif varEntity = 'CURRENCYFUTURETRADDEALCANCEL' then
--           open gencursor for
--        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--          cfut_execute_date "Execute Date",
--          --0 "NoOfLots",
--          Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,Gconst.Utilfuturedeal,Gconst.Amountfcy, Datworkdate)  "NoOfLots",
--          cfut_Lot_price "UnitPrice",
--        --  0 "LotQuantity",
--          (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
--
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
--          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
--            pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
--          cfut_product_code "productCode",cfut_record_status "RecordStatus",
--          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BackupDeal",
--          Pkgreturncursor.Fncgetdescription(Cfut_Init_Code,2) "InitCode",
--          CFUT_BANK_REFERENCE "BankReference",Cfut_Company_Code "CompanyCode",
--          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty"
--          from trtran061
--          where cfut_process_complete= gconst.optionNo
--            and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and cfut_exchange_code= numcode
--          and cfut_hedge_trade in(26000002)
--          and cfut_record_status not in (10200006, 10200005);
--    end if;
--         goto process_end;
--  End If;
-----------end
--if numInfoType =Gconst.REFFUTUREOUTSTANDING then
----     numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
----     varoperation := 'Extracting Information of Outstanding Deals ';
----     
---- --   if varEntity = 'CURRENCYFUTUREDEALCANCEL' then 
----     Open Gencursor For  
----        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
----          cfut_execute_date "Execute Date",
----          CFUT_LOT_NUMBERS "NoOfLots", 
----          pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
----          cfut_Lot_price "UnitPrice",
----        --  0 "LotQuantity",
----          (cfut_lot_quantity /nvl(CPRO_Trade_unit,1000))* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
----          
----         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
----          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
----          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
----          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
----           pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
----          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
----          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "Initiator",
----          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "Trader",
----          Cfut_Bank_Reference "BankReference",Cfut_Company_Code "CompanyCode",
----          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty",
----          CPRO_TRADE_UNIT "TradeUnit"
----       from trtran061 left outer join trmaster503
----         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
----       where cfut_process_complete= gconst.optionNo
----       and cfut_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----          And Cfut_Exchange_Code= Numcode
----          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
----                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
----          and cfut_record_status not in (10200006, 10200005)
----          and cpro_record_status not in (10200006,10200005);
--          
--             numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
--     varoperation := 'Extracting Information of Outstanding Deals ';
--     
-- --   if varEntity = 'CURRENCYFUTUREDEALCANCEL' then 
--     Open Gencursor For  
--        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--          cfut_execute_date "Execute Date",
--          CFUT_LOT_NUMBERS "NoOfLots", 
--          pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
--          cfut_Lot_price "UnitPrice",
--        --  0 "LotQuantity",
--          (cfut_lot_quantity /nvl(CPRO_Trade_unit,1000))* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
--          
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
--          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
--         -- pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buysell_Desc",
--           pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
--          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
--          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
--          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "ProfitCentre",
--          Cfut_Bank_Reference "BankReference",Cfut_Company_Code "CompanyCode",
--          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty",
--          CPRO_TRADE_UNIT "TradeUnit"
--          --Cfut_Buy_Sell "Buysell"
--       from trtran061 left outer join trmaster503
--         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
--       where cfut_process_complete= gconst.optionNo
--       and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--          And Cfut_Exchange_Code= Numcode
--          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
--                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
--          and cfut_record_status not in (10200006, 10200005)
--          and cpro_record_status not in (10200006,10200005);
--          
--            
----      elsif varEntity = 'CURRENCYFUTURETRADDEALCANCEL' then
----           open gencursor for  
----        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
----          cfut_execute_date "Execute Date",
----          --0 "NoOfLots", 
----          Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,Gconst.Utilfuturedeal,Gconst.Amountfcy, Datworkdate)  "NoOfLots", 
----          cfut_Lot_price "UnitPrice",
----        --  0 "LotQuantity",
----          (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
----          
----         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
----          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
----          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
----          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
----            pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
----          cfut_product_code "productCode",cfut_record_status "RecordStatus",
----          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "Initiator",
----          Pkgreturncursor.Fncgetdescription(Cfut_Init_Code,2) "Trader",
----          CFUT_BANK_REFERENCE "BankReference",Cfut_Company_Code "CompanyCode",
----          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty"
----          from trtran061
----          where cfut_process_complete= gconst.optionNo
----            and cfut_Company_Code in( select usco_company_code from trsystem022a
----                                    where usco_user_id = varUserid )
----
----          and cfut_exchange_code= numcode
----          and cfut_hedge_trade in(26000002)
----          and cfut_record_status not in (10200006, 10200005);
----    end if;      
--         goto process_end;
--  End If;
if numInfoType =Gconst.REFFUTUREOUTSTANDING then
    -- numcode :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
     varoperation := 'Extracting Information of Outstanding Deals ';
     
 --   if varEntity = 'CURRENCYFUTUREDEALCANCEL' then 
 
 Begin
        VarReference := gconst.fncxmlextract(xmldoc,'Param/DealNumber', VarReference);
        Exception 
            when others then 
            varreference := '0';        
        end;
        
        commit;
     Open Gencursor For  
        select cfut_deal_number "DealNumber" ,
        pkgreturncursor.fncgetdescription(cfut_product_code,2) "Currency",
          cfut_execute_date "ExecuteDate",
          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "ProfitCentre",
          fncGetDescription(CFUT_EXCHANGE_CODE,2) "Exchange",
          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "Broker",
          pkgreturncursor.fncgetdescription(Cfut_Buy_Sell,2) "Buy_Sell",
          --CFUT_LOT_NUMBERS "NoOfLots", 
          pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
          CFUT_LOT_NUMBERS- pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "AdjustedLots",
          CPRO_Trade_unit "LotQuantity",
          (CPRO_Trade_unit* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)) "OutstandingAmount",
          fncgetdescription(CFUT_BASE_CURRENCY,2) "BaseCurrency",
            fncgetdescription(CFUT_OTHER_CURRENCY,2) "OtherCurrency",
          CFUT_SPOT_RATE "SpotRate", CFUT_FORWARD_RATE "ForwardRate",
          CFUT_MARGIN_RATE  "MarginRate", CFUT_EXCHANGE_RATE "AllInRate",
          --cfut_Lot_price "AllInRate",
          CFUT_Maturity_From "ExpiryDate",
          Cfut_Maturity_Date "DeliveryDate",
        --  0 "LotQuantity",
         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
          cfut_base_amount "TradeAmount", cfut_margin_amount "MarginAmount",
          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
           pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
          Cfut_Bank_Reference "BankReference",Cfut_Company_Code "CompanyCode",
          cfut_counter_party "CounterParty",  CFUT_LOCATION_CODE "LocationCode",  
          Cfut_Buy_Sell "BuySell", CPRO_TRADE_UNIT "TradeUnit",
           CFUT_OTHER_CURRENCY "OtherCurrencyCode",
            CFUT_BASE_CURRENCY "BaseCurrencyCode"
       from trtran061 left outer join trmaster503
         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
       where cfut_process_complete != gconst.OPTIONYES
       and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
          --And Cfut_Exchange_Code= Numcode
          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
          and cfut_record_status not in (10200006, 10200005)
          and cpro_record_status not in (10200006,10200005)
          and cfut_deal_number = decode(VarReference,'0',cfut_deal_number,VarReference);
          
          
--      elsif varEntity = 'CURRENCYFUTURETRADDEALCANCEL' then
--           open gencursor for  
--        select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--          cfut_execute_date "Execute Date",
--          --0 "NoOfLots", 
--          Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,Gconst.Utilfuturedeal,Gconst.Amountfcy, Datworkdate)  "NoOfLots", 
--          cfut_Lot_price "UnitPrice",
--        --  0 "LotQuantity",
--          (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
--          
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
--          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--          Cfut_Maturity_Date "MaturityDate",Cfut_Buy_Sell "Buysell",
--            pkgreturncursor.fncGetDescription(cfut_hedge_trade,2) "hedgetrade",
--          cfut_product_code "productCode",cfut_record_status "RecordStatus",
--          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "Initiator",
--          Pkgreturncursor.Fncgetdescription(Cfut_Init_Code,2) "Trader",
--          CFUT_BANK_REFERENCE "BankReference",Cfut_Company_Code "CompanyCode",
--          pkgreturncursor.fncGetDescription(cfut_counter_party,2) "CounterParty"
--          from trtran061
--          where cfut_process_complete= gconst.optionNo
--            and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and cfut_exchange_code= numcode
--          and cfut_hedge_trade in(26000002)
--          and cfut_record_status not in (10200006, 10200005);
--    end if;      
         goto process_end;
  End If;


--   if numInfoType = Gconst.REFFUTUREVALUE  then
--    varoperation :='Extracting Currency Future Deal Details For Valuation';
--     --numCode :=GConst.fncXMLExtract(xmldoc,'CompanyCode',numCode);
--     delete from temp ;
--     insert into temp values (varoperation,varoperation);
--     commit;
--    open GenCursor for
--     select     ----deal details(0,1,2,3,4,5,6,7,8,9)----
--            CFUT_DEAL_NUMBER "DealNumber",
--            pkgreturncursor.fncgetdescription(CFUT_PRODUCT_CODE,2) "Product",
--            pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2)"BuySell",
--            CFUT_LOT_NUMBERS "No of Lots",
--            cfut_lot_quantity "Quantity",
--            CFUT_LOT_PRICE  "Unit Price",
--            cfut_base_amount "DealAmount",
--            pkgforexprocess.fncGetFuturePandL(cfut_deal_number,gconst.TOTALPANDL) "AccruedPandL",
--              pkgreturncursor.fncgetdescription(cfut_EXCHANGE_CODE,2) "Exchange",
--            pkgreturncursor.fncgetdescription(Cfut_HEDGE_TRADE,2) "Hedge/Trade",
--            ----MTM details(10,11,12,13,14,15,16) ----
--            pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Lots",
--           (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Quantity",
--            pkgforexprocess.fncFutureDealRate(cfut_deal_number,datWorkDate) "Yesterday MtmRate",
--            pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTINR, datworkdate)  "Yesterday OutstandingAmount",
--            pkgforexprocess.fncFutureMTMRate(cfut_MATURITY_DATE,cfut_exchange_code,cfut_base_currency,cfut_other_currency,datworkdate) "Today MtmRate",
--            0.00 "Today OutstandingAmount",0.00 "TodayPandL",
--             (select (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)
--                    *CPRO_TRADE_UNIT) ||pkgreturncursor.fncgetdescription(CPRO_TRADE_UOM,2)
--                       from trmaster503
--                      where CPRO_PICK_CODE = Cfut_PRODUCT_CODE
--                        and cpro_due_date= cfut_maturity_date
--                      and CPRO_EXCHANGE_CODE =CFUT_EXCHANGE_CODE ) as "LotSize",
--            ---MarginDEtails(17,18,19,20)--
--            CFUT_MARGIN_RATE "MarginRate",
--            pkgforexprocess.fncFutureMarginAmount(cfut_deal_number,datworkdate,Gconst.TodayMargin) "Margin Req",
--            pkgforexprocess.fncFutureMarginAmount(cfut_deal_number,datworkdate,Gconst.YesterdayMargin) "Margin Maintained",
--            0 "MarginExcess/Less",
--            --- InvisibleFields(21,22,23,24,25) -------------
--            0.00 "UserRate",0.00 "UserDealValue", 0.00"UserProfitLoss",cfut_buy_sell "BuySellCode",
--            0 "SerialNumber"
--      from  trtran061
--     where  cfut_process_complete = gconst.OPTIONNO
--       and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid );
--     Goto Process_End;
--  end if;
  if numInfoType = Gconst.REFFUTUREVALUE  then
    varoperation :='Extracting Currency Future Deal Details For Valuation';
     --numCode :=GConst.fncXMLExtract(xmldoc,'CompanyCode',numCode);
     delete from temp ;
     insert into temp values (varoperation,varoperation);
     commit;
    open GenCursor for
     select     ----deal details(0,1,2,3,4,5,6,7,8,9)----
            CFUT_DEAL_NUMBER "DealNumber",
            pkgreturncursor.fncgetdescription(CFUT_PRODUCT_CODE,2) "Product",
            pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2)"BuySell",
            CFUT_LOT_NUMBERS "No of Lots",
            cfut_lot_quantity "Quantity",
            CFUT_EXCHANGE_RATE  "Unit Price",
            cfut_base_amount "DealAmount",
            pkgforexprocess.fncGetFuturePandL(cfut_deal_number,gconst.TOTALPANDL) "AccruedPandL",
              pkgreturncursor.fncgetdescription(cfut_EXCHANGE_CODE,2) "Exchange", 
            pkgreturncursor.fncgetdescription(Cfut_HEDGE_TRADE,2) "Hedge/Trade",
            ----MTM details(10,11,12,13,14,15,16) ----
            pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Lots",
           (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "Outstanding Quantity",
            pkgforexprocess.fncFutureDealRate(cfut_deal_number,datWorkDate) "Yesterday MtmRate",
            pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTINR, datworkdate)  "Yesterday OutstandingAmount",
            pkgforexprocess.fncFutureMTMRate(cfut_MATURITY_DATE,cfut_exchange_code,cfut_base_currency,cfut_other_currency,datworkdate) "Today MtmRate",
            0.00 "Today OutstandingAmount",0.00 "TodayPandL",
             (select (pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)
                    *CPRO_TRADE_UNIT) ||pkgreturncursor.fncgetdescription(CPRO_TRADE_UOM,2) 
                       from trmaster503
                      where CPRO_PICK_CODE = Cfut_PRODUCT_CODE
                        and cpro_due_date= cfut_maturity_date
                      and CPRO_EXCHANGE_CODE =CFUT_EXCHANGE_CODE ) as "LotSize",
            ---MarginDEtails(17,18,19,20)--
            CFUT_MARGIN_RATE "MarginRate",
            pkgforexprocess.fncFutureMarginAmount(cfut_deal_number,datworkdate,Gconst.TodayMargin) "Margin Req", 
            pkgforexprocess.fncFutureMarginAmount(cfut_deal_number,datworkdate,Gconst.YesterdayMargin) "Margin Maintained",
            0 "MarginExcess/Less",
            --- InvisibleFields(21,22,23,24,25) -------------
            0.00 "UserRate",0.00 "UserDealValue", 0.00"UserProfitLoss",cfut_buy_sell "BuySellCode", 
            0 "SerialNumber"
      from  trtran061
     where  cfut_process_complete = gconst.OPTIONNO
       and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid );  
     Goto Process_End;
  end if;


if numinfotype=Gconst.REFCURRENCYLABEL then
      numCode1 := GConst.fncxmlextract(xmldoc,'LocationCode',numCode1);
            open GenCursor for
                select pkgreturncursor.fncgetdescription(locn_local_currency,2) "Currency",
                       locn_local_currency "CurrencyCode"
                from trmaster302 
                   where locn_pick_code= numCode1;
          
            
 GoTo Process_End;
 End if;   


--  if numinfotype = gconst.REFCURRENCYFUTURERATES then
--    varoperation := 'Extracting the No of times the currencyfuture rates  defined for the Particular date ';
--    datTemp := GConst.fncXMLExtract(xmlDoc, 'EffectiveDate',datTemp);
--    numCode1:= GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numCode1);
--
--    open gencursor for
--    select count(*) as num
--      from trtran064
--      where cfmm_exchange_code = numCode1
--      and cfmm_effective_date = datTemp;

if numinfotype = gconst.REFCURRENCYFUTURERATES then
    varoperation := 'Extracting the No of times the currencyfuture rates  defined for the Particular date ';
    datTemp := GConst.fncXMLExtract(xmlDoc, 'EffectiveDate',datTemp);
    numCode1:= GConst.fncXMLExtract(xmlDoc, 'ExchangeCode',numCode1);

    open gencursor for
    select count(*) as num
      from trtran064
      where cfmm_exchange_code = numCode1
      and cfmm_effective_date = datTemp;
                                     
    Goto Process_End;
  end if;
--
--    Goto Process_End;
--  end if;

  if numInfoType =Gconst.REFVEDIOHELP then
     varoperation := 'Extracting Information of Vedio Help ';
     open gencursor for
        Select  vedo_vedio_id VedioId ,vedo_vedio_name Vedioname,
          vedo_vedio_description Description,vedo_vedio_path path
          from trsystem030 order by VEDO_VEDIO_ID;
      goto process_end;
  end if;
  if numInfoType =Gconst.REFSHORTCUTLIST then
     varoperation := 'Extracting Information of Short cut List';
     open gencursor for
         Select * from trsystem025 order by ICON_ICON_ID;
      goto process_end;
  end if;
  if numInfoType =Gconst.REFPRODUCTDOC then
     varoperation := 'Extracting Information of Product Specification List';
     numcode :=gconst.fncxmlextract(xmldoc,'pickCode',numcode);
     numcode1 :=gconst.fncxmlextract(xmldoc,'ExchangeCode',numcode);
     datTemp :=gconst.fncxmlextract(xmldoc,'dueDate',datTemp);
     open gencursor for
         Select cpro_commodity_specs
           from trmaster503
           where cpro_pick_code=numcode
           and cpro_exchange_code=numcode1
           and cpro_due_date=datTemp;
      goto process_end;
  end if;
  if numInfoType =Gconst.REFSHORTUSER then
     varoperation := 'Extracting Information of Product Specification List';
     open gencursor for
         select shrt_menu_id,icon_icon
           from trsystem024,trsystem025
           where shrt_icon_id = icon_icon_id
           and shrt_user_id = varUserID
           order by shrt_order_no;
     goto process_end;
  end if;
  
  if numInfoType = GConst.REFWORDREPORTLIST then
    varOperation := 'Existing Subreport details';
    vartemp := GConst.fncxmlextract(xmldoc, 'EntityName',varTemp);
     numCode := GConst.fncxmlextract(xmldoc, 'BankCode',numCode);
     numcode1:=GConst.fncxmlextract(xmldoc, 'LcYesNo',numcode1);
     
    -- INSERT INTO TEMP1 VALUES (varReference);
  --  insert into temp values (vartemp,vartemp);
  --  commit;
   open gencursor for
     select WOPM_REPORT_ID ReportID,
          WOPM_BANK_CODE BankCode,
          WOPM_CONTROL_NAME ControlName,
         --- WOPM_REPORT_PATH ReportPath,
          REPM_REPORT_FILE REPORTFILE,
        --  REPM_REPORT_TYPE REPORTTYPE,
          --REPM_REPORT_format REPORTTYPE1,
          wopm_colreference_number ColReferenceNumber,
          wopm_colbank_code colBankCode,
          WOPM_FILE_TYPE FILETYPE
       from trsystem003B inner join 
       trsystem003 on 
        wopm_report_id=REPM_REPORT_ID
         inner join trsystem005 
         on repm_report_id=PUNT_PROGRAM_UNIT
      where WOPM_SYNONYM_NAME=vartemp
        and decode(WOPM_BANK_CODE,22699999,numCode,WOPM_BANK_CODE)=numCode
        AND NVL(WOPM_REPORT_PATH,numcode1)=numcode1
        and repm_record_status not in (10200005,10200006)
        and WOPM_record_status not in (10200005,10200006);
   Goto Process_End;
  End if;
  
  if numInfoType=Gconst.REFVARANALYSIS then
     varoperation := 'Calculation Of Var Analysis';
     numcode :=gconst.fncxmlextract(xmldoc,'RatesType',numcode);
     numcode1 :=gconst.fncxmlextract(xmldoc,'Confidencelevel',numcode1);
     numcode2 :=gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode2);
     numcode3 :=gconst.fncxmlextract(xmldoc,'OtherCurrency',numcode3);
     numcode4 := gconst.fncxmlextract(xmldoc,'BidAsk',numcode4);
     datTemp :=gconst.fncxmlextract(xmldoc,'FromDate',datTemp);
     datTemp1 :=gconst.fncxmlextract(xmldoc,'ToDate',datTemp1);

     if numcode4 = Gconst.BidRates then
          vartemp :=' DRAT_SPOT_BID ';
     elsif numcode4 = Gconst.AskRates then
          vartemp :=' DRAT_SPOT_ASK ';
     elsif numcode4 = Gconst.MeanRates then
          vartemp := ' ( DRAT_SPOT_BID + DRAT_SPOT_ASK )/2 ' ;
     end if;
     vartemp1:= ' drat_currency_code= ' || numcode2 ||
                ' and drat_for_currency =  ' || numcode3 ||
                ' and drat_effective_date between ' ||'''' || datTemp || '''' ||  ' and '  ||'''' || datTemp1 ||'''' ;

     if numcode = Gconst.AvgRates then
             sqlQuery :=' select round(sum(rate)/count(*),4) from (select  sum( ' || vartemp || ')/count(*) as Rate
                         from trtran012
                         where ' || vartemp1 ||
                         ' group by drat_effective_date
                         order by drat_effective_date) ';
   insert into temp values (sqlQuery,sqlQuery);
     commit;
             execute immediate sqlQuery into numrate;

             sqlQuery :=' select drat_effective_date as Effdate , round(sum(' || vartemp || ')/count(*),4) as Rate, '|| numrate
                        ||' as AvgRate  from trtran012
                          where ' || vartemp1 ||
                          ' group by drat_effective_date
                          order by drat_effective_date ';

     elsif  numcode = Gconst.DayOpenRates then
          sqlQuery :=  ' select round(sum(' || vartemp || ') /count(*),4)
                         from trtran012 a
                         where '   || vartemp1 ||
                        ' and drat_serial_number= (select min(drat_serial_number)
                                                      from trtran012 b
                                                      where b.drat_effective_date=a.drat_effective_date
                                                      and b.drat_currency_code=a.drat_currency_code
                                                      and b.drat_for_currency=a.drat_for_currency)
                          order by drat_effective_date ';
            execute immediate sqlQuery into numrate;

            sqlQuery :=  ' select drat_effective_date as EffDate ,' || vartemp || ' as Rate,
                         ' || numrate || ' as AvgRate
                         from trtran012 a where '   || vartemp1 ||
                        ' and drat_serial_number= (select min(drat_serial_number)
                                                      from trtran012 b
                                                      where b.drat_effective_date=a.drat_effective_date
                                                      and b.drat_currency_code=a.drat_currency_code
                                                      and b.drat_for_currency=a.drat_for_currency)
                          order by drat_effective_date ';
     elsif  numcode = Gconst.DayEndRates then
            sqlQuery :=  ' select round(sum(' || vartemp || ') /count(*),4)
                         from trtran012 a
                         where  ' || vartemp1 ||
                        ' and drat_serial_number= (select max(drat_serial_number)
                                                      from trtran012 b
                                                      where b.drat_effective_date=a.drat_effective_date
                                                      and b.drat_currency_code=a.drat_currency_code
                                                      and b.drat_for_currency=a.drat_for_currency)
                          order by drat_effective_date ';
            execute immediate sqlQuery into numrate;

            sqlQuery :=  ' select drat_effective_date as EffDate ,' || vartemp || '  as Rate ,
                         '|| numrate  ||' as AvgRate
                         from trtran012 a
                         where '  || vartemp1 ||
                        ' and drat_serial_number= (select max(drat_serial_number)
                                                      from trtran012 b
                                                      where b.drat_effective_date=a.drat_effective_date
                                                      and b.drat_currency_code=a.drat_currency_code
                                                      and b.drat_for_currency=a.drat_for_currency)
                        order by drat_effective_date ';
     elsif  numcode = Gconst.MaxRates then
           sqlQuery :=  ' select sum(Rate)/count(*) from (select  max( ' || vartemp || ') as Rate
                         from trtran012
                         where ' || vartemp1 ||
                         ' group by drat_effective_date )';

           execute immediate sqlQuery into numrate;
          sqlQuery :=  ' select drat_effective_date as EffDate, max( ' || vartemp || ') as Rate,
                       '|| numrate ||' as AvgRate
                         from trtran012
                         where  ' || vartemp1 ||
                         ' group by drat_effective_date order by drat_effective_date ';

     elsif  numcode = Gconst.MinRates then
          sqlQuery :=  ' select sum(Rate)/count(*) from (select  min( ' || vartemp || ') as Rate
                         from trtran012
                         where  ' || vartemp1 ||
                         ' group by drat_effective_date )';
           execute immediate sqlQuery into numrate;
          sqlQuery :=  ' select drat_effective_date as EffDate , min( ' || vartemp || ') as Rate,
                      '|| numrate ||' as AvgRate
                         from trtran012
                         where ' || vartemp1 ||
                         ' group by drat_effective_date order by drat_effective_date ';

     end if;
     insert into temp values (sqlQuery,sqlQuery);
     commit;
       open gencursor for sqlQuery;
       goto process_end;
  end if;



  if numInfoType=Gconst.REFRISKACTION then
    varoperation := 'Sendin Mail or sms to correspoing Stack Holders';
    open gencursor for
      select RDEL_COMPANY_CODE CompanyCode, RDEL_RISK_REFERENCE riskref,
        RDEL_DEAL_NUMBER dealno, RDEL_SERIAL_NUMBER srno,
        RDEL_RISK_TYPE,  RDEL_RISK_DATE,  RDEL_LIMIT_USD,  RDEL_AMOUNT_EXCESS,
        RDEL_ACTION_TAKEN ActionTaken,  RDEL_STAKE_HOLDER,  RDEL_MOBILE_NUMBER,
        RDEL_EMAIL_ID as emailid,  RDEL_MESSAGE_TEXT message,  RDEL_SENT_STATUS,  RDEL_SENT_TIMESTAMP
        FROM trtran011
        where rdel_sent_status=27300001;

       goto process_end;
  end if;
  -- updated by ramya on 22-apr-10 for deallinking operation
--  if numInfoType = GConst.REFTRADELINKING then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--
--     open Gencursor for
--         select  *
--           from
--            (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
--              pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--              pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--              GConst.AMOUNTFCY, datworkdate) "BillAmount",
--              pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILCOVEREDORDERS,
--              GConst.AMOUNTFCY, datworkdate,trad_trade_reference) "CoveredAmount",
--              (select NVL(sum(hedg_hedged_fcy),0)
--                 from HedgeRegister
--                 where hedg_trade_reference = trad_trade_reference
--                   and hedg_deal_number = '1'
--                   and hedg_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)) "HedgingAmount",
--              trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription",
--              trad_user_reference as billreference,trad_maturity_date "Maturity",
--              pkgreturncursor.fncgetdescription(trad_company_code, 1) as "CompanyName",
--              pkgreturncursor.fncgetdescription(trad_import_export, 1) as "InstrumenType",
--              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
--              GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,
--              trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus
--              from TradeRegister a
--              where trad_import_export in
--              (select erel_entity_relation
--                 from trsystem008
--                 where erel_main_entity =
--                 decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--                 and erel_relation_type = 259)
--              and trad_process_complete = GConst.OPTIONNO
--              and trad_trade_currency = numcode1
--              and trad_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED))a
--            where a."BillAmount" > a."CoveredAmount";
--       Goto Process_End;
--   end if;

-- added by ramya on 07-jul-10 for deallink after filter option in deal linking screen
--manjuanth sir modidfied on 21042014

--   if numInfoType = GConst.REFTRADELINKING then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
--        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
--        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
--        numCode5 := Gconst.fncXMLextract(xmldoc,'SubCategory',numcode5);
--   if numCode in (Gconst.TRADEBUYERCREDIT ,Gconst.TRADETERMLOAN) then
--   open Gencursor for
--         select  *
--          from
--         (select BCRD_BUYERS_CREDIT "TradeReference", BCRD_CONVERSION_RATE "ExchangeRate",
--          pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
--          BCRD_SANCTIONED_FCY "BillAmount",
--          fncGetHedgedamount(BCRD_BUYERS_CREDIT,0,0,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
--          --pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILFCYLOAN,
--          --GConst.AMOUNTFCY, datworkdate,BCRD_BUYERS_CREDIT) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = BCRD_BUYERS_CREDIT
--          ) "HedgingAmount",
--          fncGetHedgedamount(BCRD_BUYERS_CREDIT,0,0,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
--          BCRD_SANCTION_DATE as "ReferenceDate", '' "ProductDescription",
--          BCRD_SANCTION_REFERENCE as "BllReference",BCRD_DUE_DATE "Maturity",
--          pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 1) as "CompanyName",
--          'BCR' as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(BCRD_BUYERS_CREDIT,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *BCRD_CONVERSION_RATE ) "RupeeAmount" ,
--          BCRD_COMPANY_CODE CompanyCode,BCRD_CURRENCY_CODE currencyCode ,0 RecordStatus
--          from trtran045 a
--          where BCRD_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
--           and BCRD_CURRENCY_CODE = decode(numcode1,30499999,BCRD_CURRENCY_CODE,numcode1)
--          and BCRD_RECORD_STATUS in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--       -- insert into temp values(numCode,'first');commit;
--    elsif  numCode in (Gconst.TRADEPCFC , GConst.TRADEPSCFC  ) then
--          open Gencursor for
--          select * from (
--               select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
--          Pkgreturncursor.Fncgetdescription(Fcln_Currency_Code, 2) As "CurrencyName",
--          --pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          FCLN_SANCTIONED_FCY "BillAmount",
--          --pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          --GConst.AMOUNTFCY, datworkdate) "BillAmount",
--          fncGetHedgedamount(fcln_loan_number,0,0,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
--          --pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILFCYLOAN,
--          --GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = fcln_loan_number
--          ) "HedgingAmount",
--          fncGetHedgedamount(fcln_loan_number,0,0,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
--          fcln_sanction_date as "ReferenceDate", '' "ProductDescription",
--          fcln_bank_reference as billreference,fcln_maturity_to "Maturity",
--          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
--          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,
--          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus
--          from trtran005 a
--          where fcln_loan_type =  decode(numCode,Gconst.TRADEPCFC,Gconst.LOANPCFC,Gconst.TRADEPSCFC,Gconst.LOANPSCFC)
--            and fcln_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and fcln_process_complete = GConst.OPTIONNO
--          and FCLN_CURRENCY_CODE =  decode(numcode1,30499999,FCLN_CURRENCY_CODE,numcode1)
--          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--      --    insert into temp values(numCode,'second');commit;
--    else
--
--     open Gencursor for
--         select  *
--           from
--       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
----          (select b.trad_maturity_date
----            from trtran002c b
----            where a.trad_reverse_reference = b.trad_trade_reference) "ContractMaturity",
---- updated to seek contract maturity from 02c
--          (select max(b.conr_end_date)
--            from trtran002c b
--            where a.trad_contract_no = b.conr_user_reference) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GConst.UTILCONTRACTOS,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference and hedg_record_status not in (10200005,10200006,10200012)) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,GConst.UTILCONTRACTOS,1,datworkdate) - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference and hedg_record_status not in (10200005,10200006,10200012))) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp) "HedgingAmount",  
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus
--          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
--          where trad_process_complete = GConst.OPTIONNO
--          
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5))a where "UncoveredAmount"<>0;
--
----            (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----              pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----              GConst.AMOUNTFCY, datworkdate) "BillAmount",
----              fncGetHedgedamount(trad_trade_reference,0,TRAD_IMPORT_EXPORT,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
----              (select NVL(sum(hedg_hedged_fcy),0)
----                 from HedgeRegister
----                 where hedg_trade_reference = trad_trade_reference
----                 and hedg_deal_number = '1'
----                 And Hedg_Record_Status between 10200001 and 10200005) "HedgingAmount",  
----              fncGetHedgedamount(trad_trade_reference,0,TRAD_IMPORT_EXPORT,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
----              trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription", 
----              trad_user_reference as "BillReference",trad_Maturity_date "Maturity",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "CompanyName",
----              pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) as "InstrumenType",
----              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----              GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,  
----              trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus,
----              trad_link_batchno "LinkBatchNo",trad_Link_date "LinkDate"
----              from TradeRegister a
----              where trad_import_export = decode(numcode,25999999,trad_import_export, numcode)
----              and trad_Company_Code in
----              (select usco_company_code from trsystem022a
----                where usco_user_id = varUserid )
----              and trad_process_complete = GConst.OPTIONNO
----              and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
----              and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
----              and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
----              and trad_product_category = decode(numcode4,33399999,trad_product_category, numcode4)
----              and trad_subproduct_code = decode(numcode5,33899999,trad_subproduct_code, numcode5)
----              and trad_record_status between 10200001 and 10200005)a;
------         where a."BillAmount" > a."CoveredAmount";
----             --insert into temp values(numCode,'third');commit;
--      end if;
--       Goto Process_End;
--   end if;

 if numInfoType = GConst.REFTRADELINKING then
        varOperation := 'Extracting Trade Register for Hedging';
        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
        datTemp := Gconst.fncXMLExtract(xmldoc,'EffectiveDate',datTemp);
        numCode6 := Gconst.Fncxmlextract(Xmldoc,'CrossCurrency',numCode6);
        SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
--IF  numCode7 = 12400002 then  
      if numCode6 = 12400002 then ---Corss currency no then
        if numCode <= 25900050 then
           numCode8 := 25300002;
        else
           numCode8 := 25300001;
        end if;
      else
         if numCode <= 25900050 then
           numCode8 := 25300001;
        else
           numCode8 := 25300002;
        end if;
      end if;
      
      
   open Gencursor for
     select rownum "Rownum", pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "Product", 
          trad_user_reference as "BillReference",
          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "Bank",
          trad_maturity_date "BillMaturity",
          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "Currency",
          trad_trade_fcy  "BillAmount",
          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0) "CoveredAmount",          
          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datTemp) -
          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0)) "UncoveredAmount",
          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datTemp) -
          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0)) "HedgingAmount",
          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
          trad_trade_remarks "BankReference",
          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
          trad_local_bank "BankCode",trad_company_code "CompanyCode",
          trad_trade_currency "currencyCode" ,0 "RecordStatus",
         (select b.trad_maturity_date
            from TradeRegister b
            where a.trad_reverse_reference = b.trad_trade_reference) "ContractMaturity"
          from TradeRegister a where 
--          trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
         -- and 
          trad_process_complete = GConst.OPTIONNO
          and trad_Company_Code in
          (select usco_company_code from trsystem022a
           where usco_user_id = varUserid)
          and trad_record_status between 10200001 and 10200004
          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
          --and TRAD_IMPORT_EXPORT in(25900053,25900059)
          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode);
         -- and trad_local_bank not in(30699999);
   Goto Process_End;
   end if;

   -- Commented By Manjunath Reddy on 23/09/2019 -- becuase in Cloud Environment we are going to push all data
   -- to only 002 table
   
--   if numCode in (Gconst.TRADEBUYERCREDIT ,Gconst.TRADETERMLOAN) then
--   open Gencursor for
--         select rownum "Rownum", a.* from
--         (select  BCRD_BUYERS_CREDIT "TradeReference", BCRD_CONVERSION_RATE "ExchangeRate",
--          pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
--          BCRD_SANCTIONED_FCY "BillAmount",
--          fncGetHedgedamount(BCRD_BUYERS_CREDIT,0,0,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = BCRD_BUYERS_CREDIT
--          ) "HedgingAmount", 
--          fncGetHedgedamount(BCRD_BUYERS_CREDIT,0,0,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
--          BCRD_SANCTION_DATE as "ReferenceDate", '' "ProductDescription", 
--          BCRD_SANCTION_REFERENCE as "BllReference",BCRD_DUE_DATE "Maturity",
--          pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 1) as "CompanyName",
--          'BCR' as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(BCRD_BUYERS_CREDIT,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *BCRD_CONVERSION_RATE ) "RupeeAmount" ,  
--          BCRD_COMPANY_CODE CompanyCode,BCRD_CURRENCY_CODE currencyCode ,0 RecordStatus                           
--          from trtran045 a
--          where BCRD_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
--           and BCRD_CURRENCY_CODE = decode(numcode1,30499999,BCRD_CURRENCY_CODE,numcode1)
--          and BCRD_RECORD_STATUS in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--    elsif  numCode in (Gconst.TRADEPCFC , GConst.TRADEPSCFC  ) then
--          open Gencursor for
--          select  rownum "Rownum", a.* from (
--               select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
--          Pkgreturncursor.Fncgetdescription(Fcln_Currency_Code, 2) As "CurrencyName",
--          FCLN_SANCTIONED_FCY "BillAmount",
--          fncGetHedgedamount(fcln_loan_number,0,0,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = fcln_loan_number
--          ) "HedgingAmount",  
--          fncGetHedgedamount(fcln_loan_number,0,0,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
--          fcln_sanction_date as "ReferenceDate", '' "ProductDescription", 
--          fcln_bank_reference as billreference,fcln_maturity_to "Maturity",
--          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
--          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,  
--          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus                           
--          from trtran005 a
--          where fcln_loan_type =  decode(numCode,Gconst.TRADEPCFC,Gconst.LOANPCFC,Gconst.TRADEPSCFC,Gconst.LOANPSCFC)
--            and fcln_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and fcln_process_complete = GConst.OPTIONNO
--          and FCLN_CURRENCY_CODE =  decode(numcode1,30499999,FCLN_CURRENCY_CODE,numcode1)
--          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--    else 
--        open Gencursor for
--         select rownum "Rownum", a.*
--           from
--       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "Product", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "Bank",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "Currency",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0) "CoveredAmount",          
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datTemp) -
--          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0)) "UncoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datTemp) -
--          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0)) "HedgingAmount",
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus,
--         (select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference) "ContractMaturity"
--          from TradeRegister a where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
--          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode)
--          and TRAD_IMPORT_EXPORT not in(25900053,25900059)
--        union all        
--        select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "Product", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "Bank",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "Currency",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0) "CoveredAmount",          
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datTemp) -
--          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0)) "UncoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datTemp) -
--          nvl(getExposureCoveredAmount(TRAD_TRADE_REFERENCE,datTemp),0)) "HedgingAmount",
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus,
--         (select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference) "ContractMaturity"
--          from TradeRegister a where trad_import_export in
--          (select erel_entity_relation
--             from trsystem008
--             where erel_main_entity =
--             decode(numCode8, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
--             and erel_relation_type = 259)
--          and trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)
--          and TRAD_IMPORT_EXPORT in(25900053,25900059)
----          AND TRAD_IMPORT_EXPORT = decode(numCode,25999999,TRAD_IMPORT_EXPORT,numCode)
--          and trad_local_bank not in(30699999)) a;
--      end if;
--       Goto Process_End;
--   end if;





--      if numInfoType = GConst.REFTRADELINKING then
--        varOperation := 'Extracting Trade Register for Hedging';
--        numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
--        numCode1 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode1);
--        numcode2 := Gconst.fncXMLextract(xmldoc, 'CompanyCode',numcode2);
--        numcode3 := Gconst.fncXMLextract(xmldoc,'CounterParty',numcode3);
--        numCode4 := Gconst.fncXMLextract(xmldoc,'Category',numcode4);
--        Numcode5 := Gconst.Fncxmlextract(Xmldoc,'SubCategory',Numcode5);
--        SELECT NVL(PRMC_TRADEFINANCE_LINK,12400002) INTO numCode7 FROM TRSYSTEM051;
--IF  numCode7 = 12400002 then       
--   if numCode in (Gconst.TRADEBUYERCREDIT ,Gconst.TRADETERMLOAN) then
--   open Gencursor for
--         select  *
--          from
--         (select BCRD_BUYERS_CREDIT "TradeReference", BCRD_CONVERSION_RATE "ExchangeRate",
--          pkgreturncursor.fncgetdescription(BCRD_CURRENCY_CODE, 2) as "CurrencyName",
--          BCRD_SANCTIONED_FCY "BillAmount",
--          fncGetHedgedamount(BCRD_BUYERS_CREDIT,0,0,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
--          --pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILFCYLOAN,
--          --GConst.AMOUNTFCY, datworkdate,BCRD_BUYERS_CREDIT) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = BCRD_BUYERS_CREDIT
--          ) "HedgingAmount", 
--          fncGetHedgedamount(BCRD_BUYERS_CREDIT,0,0,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
--          BCRD_SANCTION_DATE as "ReferenceDate", '' "ProductDescription", 
--          BCRD_SANCTION_REFERENCE as "BllReference",BCRD_DUE_DATE "Maturity",
--          pkgreturncursor.fncgetdescription(BCRD_COMPANY_CODE, 1) as "CompanyName",
--          'BCR' as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(BCRD_BUYERS_CREDIT,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *BCRD_CONVERSION_RATE ) "RupeeAmount" ,  
--          BCRD_COMPANY_CODE CompanyCode,BCRD_CURRENCY_CODE currencyCode ,0 RecordStatus                           
--          from trtran045 a
--          where BCRD_COMPANY_CODE in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and BCRD_PROCESS_COMPLETE = GConst.OPTIONNO
--           and BCRD_CURRENCY_CODE = decode(numcode1,30499999,BCRD_CURRENCY_CODE,numcode1)
--          and BCRD_RECORD_STATUS in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--       -- insert into temp values(numCode,'first');commit;
--    elsif  numCode in (Gconst.TRADEPCFC , GConst.TRADEPSCFC  ) then
--          open Gencursor for
--          select * from (
--               select fcln_loan_number "TradeReference", fcln_conversion_rate "ExchangeRate",
--          Pkgreturncursor.Fncgetdescription(Fcln_Currency_Code, 2) As "CurrencyName",
--          --pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          FCLN_SANCTIONED_FCY "BillAmount",
--          --pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          --GConst.AMOUNTFCY, datworkdate) "BillAmount",
--          fncGetHedgedamount(fcln_loan_number,0,0,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
--          --pkgforexprocess.fncGetOutstanding(null,0,GConst.UTILFCYLOAN,
--          --GConst.AMOUNTFCY, datworkdate,fcln_loan_number) "CoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = fcln_loan_number
--          ) "HedgingAmount",  
--          fncGetHedgedamount(fcln_loan_number,0,0,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
--          fcln_sanction_date as "ReferenceDate", '' "ProductDescription", 
--          fcln_bank_reference as billreference,fcln_maturity_to "Maturity",
--          pkgreturncursor.fncgetdescription(fcln_company_code, 1) as "CompanyName",
--          pkgreturncursor.fncgetdescription(fcln_loan_type, 1) as "InstrumenType",
--          pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) *fcln_conversion_rate ) "RupeeAmount" ,  
--          fcln_company_code CompanyCode,fcln_currency_code currencyCode ,0 RecordStatus                           
--          from trtran005 a
--          where fcln_loan_type =  decode(numCode,Gconst.TRADEPCFC,Gconst.LOANPCFC,Gconst.TRADEPSCFC,Gconst.LOANPSCFC)
--            and fcln_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and fcln_process_complete = GConst.OPTIONNO
--          and FCLN_CURRENCY_CODE =  decode(numcode1,30499999,FCLN_CURRENCY_CODE,numcode1)
--          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
--         )a
--        where a."BillAmount" > a."CoveredAmount";
--      --    insert into temp values(numCode,'second');commit;
--    else 
--        open Gencursor for
--         select  *
--           from
--       (select  pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) "ProductDescription", 
--          trad_user_reference as "BillReference",
--          pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          (select b.trad_maturity_date
--            from TradeRegister b
--            where a.trad_reverse_reference = b.trad_trade_reference) "ContractMaturity",
--          trad_maturity_date "BillMaturity",
--          pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
--          trad_trade_fcy  "BillAmount",
--          pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference) "CoveredAmount",
--          (pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,datworkdate) - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference)) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = trad_trade_reference
--             and hedg_deal_number = varTemp) "HedgingAmount",  
--          trad_trade_rate "BenchMarkRate", trad_trade_inr "RupeeAmount", 
--          trad_trade_reference "TradeReference",trad_reference_date as "ReferenceDate", 
--          trad_trade_remarks "BankReference",
--          pkgreturncursor.fncgetdescription(trad_company_code,2) as "CompanyName",
--          trad_local_bank BankCode,trad_company_code CompanyCode,
--          trad_trade_currency currencyCode ,0 RecordStatus
--          from TradeRegister a
----          where trad_import_export in
----          (select erel_entity_relation
----             from trsystem008
----             where erel_main_entity =
----             decode(numCode, GConst.PURCHASEDEAL, 2, GConst.SALEDEAL, 1)
----             and erel_relation_type = 259)
--          where trad_process_complete = GConst.OPTIONNO
--          and trad_Company_Code in
--          (select usco_company_code from trsystem022a
--           where usco_user_id = varUserid)
--          and trad_record_status between 10200001 and 10200004
--          and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
--          and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
--          and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
--          and trad_product_category  = decode(numcode4,33399999,trad_product_category,numcode4)
--          and trad_subproduct_Code = decode(numcode5,33899999,trad_subproduct_code,numcode5)) a;
--      end if;
--      else 
--      
--     open Gencursor for
--
--
--     select  *
--       From
--       (Select  Pkgreturncursor.Fncgetdescription(IMPORTEXPORTTYPE, 1) "ProductDescription", 
--          Referencenumber As "BillReference",
--          himatsingkatf_prod.Pkgreturncursor.Fncgetdescription(Bankcode,2) As "BankName",--himatsingkatf_prod.pkgreturncursor.fncgetdescription(trad_local_bank,2) as "BankName",
--          Nvl(Maturityto,Referencedate)  "ContractMaturity",
--          NVL(Maturityto,Referencedate) "BillMaturity",
--          himatsingkatf_prod.pkgreturncursor.fncGetDescription(Currencycode,2) as "CurrencyName",
--          Amountfcy  "BillAmount",
--          Amountfcy "OutStanding",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = IBSREFERENCE
--             and hedg_record_status between 10200001 and 10200004) "CoveredAmount",
--          Amountfcy - 
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             where hedg_trade_reference = IBSREFERENCE
--             and hedg_record_status between 10200001 and 10200004) "UncoveredAmount",
--          (select NVL(sum(hedg_hedged_fcy),0)
--             from HedgeRegister
--             Where Hedg_Trade_Reference = Ibsreference
--             and hedg_deal_number = varTemp
--             And Hedg_Record_Status Between 10200001 And 10200004) "HedgingAmount",  
--          Invoicerate "BenchMarkRate", Invoicerate * Amountfcy "RupeeAmount", 
--          IBSREFERENCE "TradeReference", Referencedate as "ReferenceDate", 
--          Bankreference "BankReference",
--          himatsingkatf_prod.Pkgreturncursor.Fncgetdescription(Companycode,2) As "CompanyName",
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Bankcode)Bankcode,
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Companycode) Companycode,
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Currencycode) Currencycode ,0 Recordstatus
--          From (Select Contractnumber Referencenumber, Contractdate Referencedate, Referenecenumber Bankreference,
--                  Referencedate RefDate,Currencycode, AMOUNTFCY, Invoicerate, Maturityfrom, Maturityto,  Bankcode,COMPANYCODE,
--                  IMPORTEXPORTTYPE,  IBSREFERENCE
--                FROM himatsingkatf_prod.Vewimportexport
--                UNION ALL
--                SELECT Invoicenumber Referencenumber,  Referencedate,  Bankreference,  SANCTIONDATE RefDate,Currencycode,
--                   Amountfcy,  Rate,  Duedate,  Duedate,  Bankcode,  Companycode,
--                   Loantype IMPORTEXPORTTYPE, Ibsreference
--                From himatsingkatf_prod.Vewloans)
--               where  himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Currencycode) = decode(numcode1,30499999,himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Currencycode),numcode1)
--               and himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Companycode) = decode(numcode2,30199999,himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Companycode),numcode2)
--               And himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Bankcode) = Decode(Numcode3,30699999,himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(Bankcode),Numcode3)
--               and IMPORTEXPORTTYPE = numCode);
----            (select trad_trade_reference "TradeReference", trad_trade_rate "ExchangeRate",
----              pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CurrencyName",
----              pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----              GConst.AMOUNTFCY, datworkdate) "BillAmount",
----              fncGetHedgedamount(trad_trade_reference,0,TRAD_IMPORT_EXPORT,0,GConst.AMOUNTFCY,datworkdate,null,1) "CoveredAmount",
----              (select NVL(sum(hedg_hedged_fcy),0)
----                 from HedgeRegister
----                 where hedg_trade_reference = trad_trade_reference
----                 and hedg_deal_number = '1'
----                 And Hedg_Record_Status between 10200001 and 10200005) "HedgingAmount",  
----              fncGetHedgedamount(trad_trade_reference,0,TRAD_IMPORT_EXPORT,0,GConst.AMOUNTFCY,datworkdate,null,2) "LoanAmount",
----              trad_reference_date as "ReferenceDate", trad_product_description "ProductDescription", 
----              trad_user_reference as "BillReference",trad_Maturity_date "Maturity",
----              pkgreturncursor.fncgetdescription(trad_buyer_seller, 1) as "CompanyName",
----              pkgreturncursor.fncgetdescription(trad_subproduct_code, 1) as "InstrumenType",
----              pkgreturnreport.FNCCONVRS( pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
----              GConst.AMOUNTFCY, datworkdate) *trad_trade_rate ) "RupeeAmount" ,  
----              trad_company_code CompanyCode,trad_trade_currency currencyCode ,0 RecordStatus,
----              trad_link_batchno "LinkBatchNo",trad_Link_date "LinkDate"
----              from TradeRegister a
----              where trad_import_export = decode(numcode,25999999,trad_import_export, numcode)
----              and trad_Company_Code in
----              (select usco_company_code from trsystem022a
----                where usco_user_id = varUserid )
----              and trad_process_complete = GConst.OPTIONNO
----              and trad_trade_currency = decode(numcode1,30499999,trad_trade_currency,numcode1)
----              and trad_company_code = decode(numcode2,30199999,trad_company_code,numcode2)
----              and trad_local_bank = decode(numcode3,30699999,trad_local_bank,numcode3)
----              and trad_product_category = decode(numcode4,33399999,trad_product_category, numcode4)
----              and trad_subproduct_code = decode(numcode5,33899999,trad_subproduct_code, numcode5)
----              and trad_record_status between 10200001 and 10200005)a;
------         where a."BillAmount" > a."CoveredAmount";
----             --insert into temp values(numCode,'third');commit;
----      end if;
--end if;
--       Goto Process_End;
--   end if;


--   if numInfoType = GConst.REFOPTIONTRADES then
--        varOperation := 'Extracting Trade Type';
--       Numcode := Gconst.Fncxmlextract(Xmldoc, 'HedgeTrade', Numcode);
--       begin
--          Numcode1 :=Gconst.Fncxmlextract(Xmldoc, 'ActionMode', Numcode1);
--       exception
--         when others then
--           Numcode1:=0;
--       end;
--
--      open GenCursor for
--         select copt_deal_number "DealNumber",copt_serial_number "SerialNumber",
--               pkgForexProcess.fncGetOutstanding(copt_deal_number, copt_serial_number,
--                Gconst.Utiloptionhedgedeal,Gconst.Amountfcy, Datworkdate) --copt_base_amount
--                "MaturityAmount",
--               COPT_EXPIRY_DATE "MaturityDate",COPT_MATURITY_DATE "SettlementDate",
--               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
--               copt_user_reference "UserReference",copt_execute_date "ExecuteDate",
--               (select round(avg(cosu_strike_rate),2) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "BC",
--               (select round(avg(cosu_strike_rate),2) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "BP",
--               (select round(avg(cosu_strike_rate),2) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut) "SP",
--               (select round(avg(cosu_strike_rate),2) from trtran072
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall) "SC",
--               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",
--               pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
--               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 1) As "BaseCurrency",
--               pkgreturncursor.fncgetdescription(copt_other_currency, 1) as "OtherCurrency",
--               copt_base_amount as "BaseAmount",
--               --cosu_strike_rate "ExchangeRate",
--               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
--               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",
--              -- pkgreturncursor.fncgetdescription(cosu_buy_sell, 1) as "BuySell",
--              -- pkgreturncursor.fncgetdescription(cosu_Option_type, 1) as "OptionType",
--               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
--               copt_premium_status as "PremiumStatusCode",
--               copt_base_currency as "BaseCurrencyCode",
--               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
--               Copt_Bank_Reference "BankReference",
--               pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
--               pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
--               Copt_Premium_Exrate As PremiumRate
--          from trtran071
--          -- and cosu_serial_number=copt_serial_number
--         Where Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
--           and copt_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--           and Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete);
--
--      Goto Process_End;
--    End If;
 ------end aakash/gouri
--    if numInfoType = GConst.REFOPTIONTRADES then
--        varOperation := 'Extracting Trade Type';
--       Numcode := Gconst.Fncxmlextract(Xmldoc, 'HedgeTrade', Numcode);
--       begin
--          Numcode1 :=Gconst.Fncxmlextract(Xmldoc, 'ActionMode', Numcode1);
--       exception 
--         when others then 
--           Numcode1:=0;
--       end;
--        
--      open GenCursor for
--         select copt_deal_number "DealNumber",copt_serial_number "SerialNumber",
--               pkgForexProcess.fncGetOutstanding(copt_deal_number, copt_serial_number,
--                Gconst.Utiloptionhedgedeal,Gconst.Amountfcy, Datworkdate) --copt_base_amount 
--                "MaturityAmount",
--               COPT_EXPIRY_DATE "MaturityDate",COPT_MATURITY_DATE "SettlementDate",
--               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
--               copt_user_reference "UserReference",copt_execute_date "ExecuteDate",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "BC",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "BP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "SP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "SC",
--               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",
--               pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
--               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 1) As "BaseCurrency",
--               pkgreturncursor.fncgetdescription(copt_other_currency, 1) as "OtherCurrency",
--               copt_base_amount as "BaseAmount", 
--               --cosu_strike_rate "ExchangeRate",
--               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
--               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",
--              -- pkgreturncursor.fncgetdescription(cosu_buy_sell, 1) as "BuySell",
--              -- pkgreturncursor.fncgetdescription(cosu_Option_type, 1) as "OptionType",
--               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
--               copt_premium_status as "PremiumStatusCode", 
--               copt_base_currency as "BaseCurrencyCode",
--               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
--               Copt_Bank_Reference "BankReference",
--               pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
--               pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
--               Copt_Premium_Exrate As PremiumRate
--          from trtran071 
--          -- and cosu_serial_number=copt_serial_number
--         Where Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
--           and copt_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--           and ((Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete))or
--                (Copt_Process_Complete = case when Numcode1 = 103 and (( select count(*)
--                                          from trtran073 where corv_deal_number = copt_deal_number 
--                                          and corv_record_status not in (10200005,10200006))>=1) then Copt_Process_Complete
--                        else null end));           
--      Goto Process_End;       
--    End If;   

    if numInfoType = GConst.REFOPTIONTRADES then
        varOperation := 'Extracting Trade Type';
       Numcode := Gconst.Fncxmlextract(Xmldoc, 'HedgeTrade', Numcode);
       Numcode2 := Gconst.Fncxmlextract(Xmldoc, 'ExerciseType', Numcode2);
       begin
          Numcode1 :=Gconst.Fncxmlextract(Xmldoc, 'ActionMode', Numcode1);          
       exception 
         when others then 
           Numcode1:=0;          
       end;
       begin         
          varReference :=Gconst.Fncxmlextract(Xmldoc, 'DealNumber', varReference);
       exception 
         when others then 
           varReference:='0';
       end;
      -- insert into temp values(Numcode1||varReference, 'testoption'); commit;
      if Numcode2 = 33000003 then  
      open GenCursor for
         select rownum "Rownum", Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
                pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
                COPT_EXECUTE_DATE as "ExecuteDate",
                pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
                pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
                pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
                pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell, 
                pkgreturncursor.fncgetdescription(cosu_option_type,2) OptionType,
                pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)
                "MaturityAmount",cosu_strike_rate Strike,
               COPT_EXPIRY_DATE "ExpiryDate",COPT_MATURITY_DATE "SettlementDate",
               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
               copt_user_reference "UserReference",
               --copt_execute_date "ExecuteDate",
               
               
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "BC",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "BP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "SP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "SC",
               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",
               
               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
               pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
               copt_base_amount as "BaseAmount", copt_deal_number "DealNumber",COSU_SERIAL_NUMBER "SerialNumber",
               --cosu_strike_rate "ExchangeRate",
               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",

               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
               copt_premium_status as "PremiumStatusCode", 
               copt_base_currency as "BaseCurrencyCode",
               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
               Copt_Bank_Reference "BankReference",
               copt_counter_party "CounterpartyCode", 
               Copt_Premium_Exrate As PremiumRate,
               copt_contract_type "ContractTypeCode"
--          from trtran071 
--           JOIN TRTRAN072A ON
--           COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--          and COSM_SERIAL_NUMBER = 1
--          AND COSM_RECORD_STATUS NOT IN(10200005,10200006) 
--          -- and cosu_serial_number=copt_serial_number
           from trtran071 join trtran072
           on cosu_deal_number= COPT_DEAL_NUMBER
           JOIN TRTRAN072A ON
           cosu_deal_number = COSM_DEAL_NUMBER
           and cosu_serial_number=cosm_serial_number
         Where 
         --Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
          cosu_record_Status not in (10200005,10200006)
          and copt_record_status not in (10200005,10200006)
          and cosm_record_status not in (10200005,10200006)
          -- and copt_record_status = 10200003  -- commented by lakshmi, to display even 10200001 records 
          and copt_record_status not in (10200005,10200006)
          and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
          and COPT_DEAL_NUMBER = decode(varReference,'0',COPT_DEAL_NUMBER,varReference)
           and ((Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete))or
                (Copt_Process_Complete = case when Numcode1 = 103 and (( select count(*)
                                          from trtran073 where corv_deal_number = copt_deal_number 
                                          and corv_record_status not in (10200005,10200006))>=1) then Copt_Process_Complete
                        else null end)); 
      elsif Numcode2 in(33000001,33000002)then
      open GenCursor for
         select rownum "Rownum", Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
                pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
                COPT_EXECUTE_DATE as "ExecuteDate",
                pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
                pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
                pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
                pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell, 
                pkgreturncursor.fncgetdescription(cosu_option_type,2) OptionType,
                pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)
                "MaturityAmount",cosu_strike_rate Strike,
               COPT_EXPIRY_DATE "ExpiryDate",COPT_MATURITY_DATE "SettlementDate",
               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
               copt_user_reference "UserReference",
               --copt_execute_date "ExecuteDate",
               
               
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "BC",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.PURCHASEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "BP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionPut),0) "SP",
--               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
--                 where cosu_deal_number=copt_deal_number
--                   and cosu_buy_sell=Gconst.SALEDEAL
--                   and cosu_option_type=GCONST.OptionCall),0) "SC",
               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",
               
               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 2) As "BaseCurrency",
               pkgreturncursor.fncgetdescription(copt_other_currency, 2) as "OtherCurrency",
               copt_base_amount as "BaseAmount", copt_deal_number "DealNumber",COSU_SERIAL_NUMBER "SerialNumber",
               --cosu_strike_rate "ExchangeRate",
               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",

               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
               copt_premium_status as "PremiumStatusCode", 
               copt_base_currency as "BaseCurrencyCode",
               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
               Copt_Bank_Reference "BankReference",
               copt_counter_party "CounterpartyCode", 
               Copt_Premium_Exrate As PremiumRate,
               copt_contract_type "ContractTypeCode"
--          from trtran071 
--           JOIN TRTRAN072A ON
--           COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
--          and COSM_SERIAL_NUMBER = 1
--          AND COSM_RECORD_STATUS NOT IN(10200005,10200006) 
--          -- and cosu_serial_number=copt_serial_number
           from trtran071 join trtran072
           on cosu_deal_number= COPT_DEAL_NUMBER
           and cosu_serial_number=copt_serial_number
           JOIN TRTRAN072A ON
           cosu_deal_number = COSM_DEAL_NUMBER
           and cosm_serial_number = 1
         Where 
         --Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
          cosu_record_Status not in (10200005,10200006)
          and copt_record_status not in (10200005,10200006)
          and cosm_record_status not in (10200005,10200006)
       --   and copt_record_status = 10200003 -- commented by lakshmi, to display even 10200001 records 
          and copt_record_status not in (10200005,10200006)
          and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
          and COPT_DEAL_NUMBER = decode(varReference,'0',COPT_DEAL_NUMBER,varReference)
           and ((Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete))or
                (Copt_Process_Complete = case when Numcode1 = 103 and (( select count(*)
                                          from trtran073 where corv_deal_number = copt_deal_number 
                                          and corv_record_status not in (10200005,10200006))>=1) then Copt_Process_Complete
                        else null end)); 
      end if;                  
      Goto Process_End;       
    End If;   

--    if numInfoType = GConst.REFOPTIONTRADES then
--        varOperation := 'Extracting Trade Type';
--       Numcode := Gconst.Fncxmlextract(Xmldoc, 'HedgeTrade', Numcode);
--       begin
--          Numcode1 :=Gconst.Fncxmlextract(Xmldoc, 'ActionMode', Numcode1);
--       exception 
--         when others then 
--           Numcode1:=0;
--       end;
--        
--      open GenCursor for
--         select copt_deal_number "DealNumber",COSU_SERIAL_NUMBER "SerialNumber",
--         pkgForexProcess.fncGetOutstanding(COSM_DEAL_NUMBER,COSM_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,Datworkdate,null,COSM_SUBSERIAL_NUMBER)
--                "MaturityAmount",
--               COSM_MATURITY_DATE "MaturityDate",COSM_SETTLEMENT_DATE "SettlementDate",
--               pkgreturncursor.fncgetdescription(copt_deal_type, 1) as "DealType",
--               copt_user_reference "UserReference",copt_execute_date "ExecuteDate",
--               pkgreturncursor.fncgetdescription(cosu_buy_sell,2) Buysell, 
--               pkgreturncursor.fncgetdescription(cosu_option_type,2) OptionType,
--               cosu_strike_rate Strike,
----               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionCall),0) "BC",
----               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.PURCHASEDEAL
----                   and cosu_option_type=GCONST.OptionPut),0) "BP",
----               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionPut),0) "SP",
----               nvl((select round(avg(cosu_strike_rate),2) from trtran072 
----                 where cosu_deal_number=copt_deal_number
----                   and cosu_buy_sell=Gconst.SALEDEAL
----                   and cosu_option_type=GCONST.OptionCall),0) "SC",
--               copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
--               nvl(copt_Premium_Exrate,0) "PremiumExRate",copt_premium_Local "PremiumLocal",
--               pkgreturncursor.fncgetdescription(copt_counter_party, 2) as "CounterParty",
--               Pkgreturncursor.Fncgetdescription(Copt_Base_Currency, 1) As "BaseCurrency",
--               pkgreturncursor.fncgetdescription(copt_other_currency, 1) as "OtherCurrency",
--               copt_base_amount as "BaseAmount", 
--               --cosu_strike_rate "ExchangeRate",
--               pkgreturncursor.fncgetdescription(copt_contract_type, 1) as "ContractType",
--               pkgreturncursor.fncgetdescription(copt_hedge_trade, 1) as "HedgeTrade",
--
--               pkgreturncursor.fncgetdescription(copt_option_style, 1) as "Optionstyle",
--               copt_premium_status as "PremiumStatusCode", 
--               copt_base_currency as "BaseCurrencyCode",
--               copt_other_currency as "OtherCurrencyCode", copt_company_code "CompanyCode", 0 as "RecordStatus",
--               Copt_Bank_Reference "BankReference",
--               pkgreturncursor.fncgetdescription(COPT_BACKUP_DEAL, 2) as  "Initiator" ,
--               pkgreturncursor.fncgetdescription(COPT_INIT_CODE, 2) as  "Trader" ,
--               Copt_Premium_Exrate As PremiumRate,
--               copt_contract_type "ContractTypeCode"
----          from trtran071 
----           JOIN TRTRAN072A ON
----           COPT_DEAL_NUMBER = COSM_DEAL_NUMBER
----          and COSM_SERIAL_NUMBER = 1
----          AND COSM_RECORD_STATUS NOT IN(10200005,10200006) 
----          -- and cosu_serial_number=copt_serial_number
--           from trtran071 join trtran072
--           on cosu_deal_number= COPT_DEAL_NUMBER
--           JOIN TRTRAN072A ON
--           cosu_deal_number = COSM_DEAL_NUMBER
--           and cosu_serial_number=cosm_serial_number
--         Where Copt_Hedge_Trade=Decode(Numcode,26000000,Copt_Hedge_Trade,Numcode)
--          and cosu_record_Status not in (10200005,10200006)
--          and copt_record_status not in (10200005,10200006)
--          and cosm_record_status not in (10200005,10200006)
--          and copt_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--           and ((Copt_Process_Complete =Decode(Numcode1,101,12400002,103,12400001,106,12400001,Copt_Process_Complete))or
--                (Copt_Process_Complete = case when Numcode1 = 103 and (( select count(*)
--                                          from trtran073 where corv_deal_number = copt_deal_number 
--                                          and corv_record_status not in (10200005,10200006))>=1) then Copt_Process_Complete
--                        else null end));        
--      Goto Process_End;       
--    End If;   

--aakash 14-mar-13
--if numInfoType = GConst.REFPARTICULARFUTUREDEAL then
--
--    varOperation := 'Extracting Cursor for Holding Rate';
--
--     vartemp := Gconst.fncXMLExtract(xmldoc,'//ROW/DealNumber',vartemp,GConst.TYPENODEPATH);
--
--    -- numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
--      Open GenCursor for
--       select cfut_deal_number "DealNumber" ,pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--          cfut_execute_date "Execute Date",
--          --0 "NoOfLots",
--          pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "NoOfLots",
--        --  cfut_Lot_price "UnitPrice",
--           CFUT_EXCHANGE_RATE "UnitPrice",
--        --  0 "LotQuantity",
--          (cfut_lot_quantity /cfut_LOT_NUMBERS)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
--
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--          cfut_base_amount "TradeAmount",cfut_margin_amount "MarginAmount",
--          cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--          cfut_maturity_date "MaturityDate",cfut_buy_sell "Buysell",cfut_hedge_trade "hedgetrade",
--          Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",
--          Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BackupDeal",
--          pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "InitCode"
--          from trtran061
--          where cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    where usco_user_id = varUserid )
--
--          and CFUT_DEAL_NUMBER= vartemp;
--
--
----          deal_record_status in (gconst.STATUSPOSTCANCEL);
--
--      Goto Process_End;
--  end if;
if numInfoType = GConst.REFPARTICULARFUTUREDEAL then

    varOperation := 'Extracting Cursor for Holding Rate';

     vartemp := Gconst.fncXMLExtract(xmldoc,'//ROW/DealNumber',vartemp,GConst.TYPENODEPATH);

    -- numcode := Gconst.fncXMLExtract(xmldoc,'DealSerial',numcode);
      Open GenCursor for
       select cfut_deal_number "DealNumber" ,
            Pkgreturncursor.Fncgetdescription(Cfut_Backup_Deal,2) "BusinessUnit",
            pkgreturncursor.fncgetdescription(CFUT_INIT_CODE,2) "ProfitCentre",
            pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
            cfut_execute_date "Execute Date",
            CFUT_LOT_NUMBERS "NoOfLots", 
            CFUT_LOT_NUMBERS-pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "AdjustedLots",
            pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "OutstandingLots", 
          --  cfut_Lot_price "UnitPrice",
          --  0 "LotQuantity",
            (cfut_lot_quantity /nvl(CPRO_Trade_unit,1000))* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",
            
           -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
            cfut_base_amount "TradeAmount",
           CFUT_SPOT_RATE "SpotRate", CFUT_FORWARD_RATE "ForwardRate",CFUT_MARGIN_RATE  "MarginRate",
           CFUT_EXCHANGE_RATE "All-in Rate",
          -- CFUT_EXCHANGE_RATE "UnitPrice",
           CFUT_MATURITY_FROM  "MaturityDate", cfut_maturity_date  "DeliveryDate",
            cfut_buy_sell "Buysell",cfut_hedge_trade "hedgetrade",
            Cfut_Product_Code "productCode",Cfut_Record_Status "RecordStatus",

            CFUT_EXCHANGE_CODE ExchangeCode,
            CPRO_TRADE_UNIT "TradeUnit"
          from trtran061 left outer join trmaster503
          on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
          where cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
          and CFUT_DEAL_NUMBER= vartemp
          AND cpro_record_Status not in (10200005,10200006);
          
            
--          deal_record_status in (gconst.STATUSPOSTCANCEL);

      Goto Process_End;
  end if;

  --Added by gouri
 if numInfoType=Gconst.REFVIEWDEALSMATURITYDATE then
     varoperation := 'View Deals By Maturity Date';
     datTemp :=gconst.fncxmlextract(xmldoc,'FromDate',datTemp);
     datTemp1 :=gconst.fncxmlextract(xmldoc,'ToDate',datTemp1);
    open gencursor for

   select      deal_COMPANY_CODE AS COMPANYCODE,
             deal_deal_number AS DEALNO,pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,2) as COMPANYDESC,
             pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as BASECRNCY,
             pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCRNCY,
             pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS COUNTERPRTY,
             pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS BUYSELL,
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS FCY,
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as ExchangeRate,
             DEAL_EXECUTE_DATE AS EXECUTEDDATE,
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS BASEAMT,
             DEAL_MATURITY_FROM AS MATURITYFROM,
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS MATURITYDATE,
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as OtherAmount,
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as LocalRate,
             pkgreturnreport.getCompanyName(varuserid) as CompanyName,
             0 BP,0 BC,0 SP,0 SC, DEAL_MATURITY_DATE SettlementDate, 'FORWARD' DealType
     from    trtran001 
     where   deal_maturity_date between datTemp and datTemp1 and
              deal_process_complete =12400002
         and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

             and deal_record_status not in(10200005,10200006)
    union
    select   cfut_COMPANY_CODE AS COMPANYCODE,
             cfut_deal_number AS DEALNO,pkgreturncursor.fncgetdescription(cfut_COMPANY_CODE,2) as COMPANYDESC,
             pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as BASECRNCY,
             pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as OTHERCRNCY,
             pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) AS COUNTERPRTY,
             pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) AS BUYSELL,
             CFUT_BASE_AMOUNT  AS FCY,CFUT_EXCHANGE_RATE as ExchangeRate,
             CFUT_EXECUTE_DATE AS EXECUTEDDATE,
             CFUT_BASE_AMOUNT AS BASEAMT,
             CFUT_MATURITY_DATE AS MATURITYFROM,
             CFUT_MATURITY_DATE AS MATURITYDATE,
             CFUT_OTHER_AMOUNT as OtherAmount,
             CFUT_LOCAL_RATE as LocalRate,   
             pkgreturnreport.getCompanyName(varUserID) as CompanyName,
             0.00 "BP",0.00 "BC",0.00 "SP",0.00 "SC", CFUT_MATURITY_DATE SettlementDate, 'FUTURE' DealType
    from     trtran061
    where    cfut_maturity_date between datTemp and datTemp1 and
            cfut_process_complete =12400002
         and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

             and cfut_record_status not in(10200005,10200006)
    union
    select   copt_COMPANY_CODE AS COMPANYCODE,
             copt_deal_number AS DEALNO,pkgreturncursor.fncgetdescription(copt_COMPANY_CODE,2) as COMPANYDESC,
              pkgreturncursor.fncgetdescription(Copt_BASE_CURRENCY,2) as BASECRNCY,
              pkgreturncursor.fncgetdescription(Copt_OTHER_CURRENCY,2) as OTHERCRNCY,
              pkgreturncursor.fncgetdescription(Copt_COUNTER_PARTY,2) AS COUNTERPRTY,
              '' AS BUYSELL,
             copt_BASE_AMOUNT  AS FCY,0.00 as ExchangeRate,
             Copt_EXECUTE_DATE AS EXECUTEDDATE,
             COPT_BASE_AMOUNT AS BASEAMT,
             COPT_MATURITY_DATE AS MATURITYFROM,
             COPT_MATURITY_DATE AS MATURITYDATE,
             COPT_OTHER_AMOUNT as OtherAmount,
             0.00 as LocalRate,
             pkgreturnreport.getCompanyName(varUserID) as CompanyName,
            (select round( avg(cosu_strike_rate),4) from trtran072 
              where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400001) "BC",
           (select avg(cosu_strike_rate) from trtran072 
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400002) "BP",
           (select avg(cosu_strike_rate) from trtran072 
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400002) "SP",
           (select avg(cosu_strike_rate) from trtran072 
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400001) "SC",copt_expiry_date SettlementDate, 'OPTION' DealType
      from  trtran071
      where  copt_maturity_date between datTemp and datTemp1 and
              copt_process_complete =12400002
         and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
  
             and copt_record_status not in(10200005,10200006)
       union
          select FDRF_COMPANY_CODE AS COMPANYCODE,
          FDRF_FD_NUMBER AS DEALNO,pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE,2) as COMPANYDESC,
          pkgreturncursor.fncgetdescription(FDRF_CURRENCY_CODE,2) as BASECRNCY,
              '' as OTHERCRNCY,
              pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK,2) AS COUNTERPRTY,
              '' AS BUYSELL,
              FDRF_DEPOSIT_AMOUNT  AS FCY,FDRF_INTEREST_RATE as ExchangeRate,
             FDRF_REFERENCE_DATE AS EXECUTEDDATE,
             FDRF_MATURITY_AMOUNT AS BASEAMT,
             null AS MATURITYFROM,
             FDRF_MATURITY_DATE AS MATURITYDATE,
             0.0 as OtherAmount,
             0.0 as LocalRate,
             pkgreturnreport.getCompanyName(varUserID) as CompanyName,
             0.00 "BP",0.00 "BC",0.00 "SP",0.00 "SC", FDRF_MATURITY_DATE SettlementDate, 'Fixed Deposit' DealType
          from trtran047
           where    FDRF_MATURITY_DATE between datTemp and datTemp1 and
            nvl(FDRF_Process_complete,12400002)=12400002
         and FDRF_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

             and FDRF_RECORD_STATUS not in(10200005,10200006)
        union
          select MFTR_COMPANY_CODE AS COMPANYCODE,
          MFTR_REFERENCE_NUMBER AS DEALNO,pkgreturncursor.fncgetdescription(MFTR_COMPANY_CODE,2) as COMPANYDESC,
         'INR' as BASECRNCY,
              'USD' as OTHERCRNCY,
             '' AS COUNTERPRTY,
              'BUY' AS BUYSELL,
              MFTR_TRANSACTION_AMOUNT  AS FCY,MFTR_TRANSACTION_PRICE as ExchangeRate,
             MFTR_REFERENCE_DATE AS EXECUTEDDATE,
             0.0 AS BASEAMT,
             null AS MATURITYFROM,
             MFTR_LOCKIN_DUEDATE AS MATURITYDATE,
             0.0 as OtherAmount,
           0.0 as LocalRate,
             pkgreturnreport.getCompanyName(varUserID) as CompanyName,
             0.00 "BP",0.00 "BC",0.00 "SP",0.00 "SC", MFTR_LOCKIN_DUEDATE SettlementDate, 'Mutual Fund' DealType
          from trtran048
           where    MFTR_LOCKIN_DUEDATE between datTemp and datTemp1 and
            MFTR_PROCESS_COMPLETE =12400002
         and MFTR_COMPANY_CODE in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

             and MFTR_RECORD_STATUS not in(10200005,10200006);
         -- insert into temp values(numCode,'third');commit;
        goto process_end;
  end if;

--  if numinfoType =Gconst.REFREFRATES then
--    varOperation :='Getting the RBI and Tokyo Rate';
--   open gencursor for
--    select lrat_rbi_usd RBIusd,lrat_tokyo_rate tokyoRate from liablerates
--     where lrat_effective_date =datWorkDate
--       and lrat_serial_number =
--            (select max(lrat_serial_number)
--             from liablerates where lrat_effective_date=datWorkDate);
--
--   goto process_end;
--  end if;
if numinfoType =Gconst.REFREFRATES then
    varOperation :='Getting the RBI and Tokyo Rate';
   open gencursor for 
    select lrat_rbi_usd RBIusd,lrat_tokyo_rate tokyoRate from liablerates 
     where lrat_effective_date =datWorkDate
       and lrat_serial_number = 
            (select max(lrat_serial_number) 
             from liablerates where lrat_effective_date=datWorkDate);
             
   goto process_end;
  end if;
if numinfoType =Gconst.REFOPTIONLEGS then
    varOperation := 'Getting Legs of Option Deal';
    varTemp :=gconst.fncxmlextract(xmldoc,'Param/DealNumber',varTemp);
    open genCursor for
   select COSU_SERIAL_NUMBER "SerialNumber",COSU_SUBSERIAL_NUMBER "SubSerialNumber",
              --pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) OptionTypeCode,
              COSU_OPTION_TYPE "OptionTypeCode",
              pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) "OptionType", 
              pkgreturncursor.fncgetdescription(COSU_BUY_SELL,2) "BuySell",COSU_BASE_AMOUNT "BaseAmount",
              COSU_BUY_SELL "BuySellCode",
              COSU_STRIKE_RATE "StrikeRate",COSU_OTHER_AMOUNT "OtherAmount",
              COSU_LOCAL_RATE "LocalRate",COSU_LOCAL_AMOUNT "LocalAmount",COSU_PREMIUM_RATE "PremiumRate",
              COSU_PREMIUM_AMOUNT "PremiumAmount",COSU_PREMIUM_LOCALRATE "PremiumLocalRate",
              COSU_PREMIUM_LOCALAMOUNT "PremiumLocalAmount",COSU_MATURITY_DATE "MaturityDate",
              COSU_SETTLEMENT_DATE "SettlementDate",COSU_USER_REMARKS "UserRemarks",COSU_ACTION_TAKEN "ActionTaken",
              pkgreturncursor.fncgetdescription(COSU_PRODUCT_CODE,2) "ProductCode", 
              pkgreturncursor.fncgetdescription(COSU_PRODUCT_CODE,2) "Product",COSU_LOT_NUMBERS "NoOfLots",0 "ExchangeRate"
         from trtran072
        where cosu_deal_number=varTemp;
   goto process_end;
  end if;
--  if numinfoType =Gconst.REFOPTIONSPL then
--    varOperation := 'Getting Pl for the Option Contracts';
--    varReference :=gconst.fncxmlextract(xmldoc,'ROW/DealNumber',varTemp);
--    numrate :=gconst.fncxmlextract(xmldoc,'ROW/RBIRefrate',numrate);
--    datTemp := gconst.fncxmlextract(xmldoc,'ROW/ExerciseDate',datTemp);
--    numFcy:= gconst.fncxmlextract(xmldoc,'ROW/BaseAmount',numFcy);
--    delete from temp;
--
--
--    numfcy1:=  pkgforexprocess.fncGetprofitLossOptions(varReference,numrate,numFcy,datTemp,  numRecords,  numfcy1,  numinr,  varTemp1) ;
--
--
--
--    open gencursor for
--       select numrate refRate, numRecords SerialNumber,
--              numFcy1 PLFcy,numinr PLinr,varTemp1 remarks
--         from dual;
--
--   goto process_end;
--   end if;
  if numinfoType =Gconst.REFOPTIONSPL then
    varOperation := 'Getting Pl for the Option Contracts';
    varReference :=gconst.fncxmlextract(xmldoc,'ROW/DealNumber',varTemp);
    numrate :=gconst.fncxmlextract(xmldoc,'ROW/RBIRefrate',numrate);
    datTemp := gconst.fncxmlextract(xmldoc,'ROW/ExerciseDate',datTemp);
    numFcy:= gconst.fncxmlextract(xmldoc,'ROW/BaseAmount',numFcy);
    numCode9:=  gconst.fncxmlextract(xmldoc,'ROW/ReverseSerial',numCode9);
    delete from temp;
    
   
    numfcy1:=  pkgforexprocess.fncGetprofitLossOptions(varReference,numrate,numFcy,datTemp,  numRecords,  numfcy1,  numinr,  varTemp1,numCode9) ;

     
    
    open gencursor for
       select numrate refRate, numRecords SerialNumber,
              numFcy1 PLFcy,numinr PLinr,varTemp1 remarks
         from dual;  
       
   goto process_end;
   end if;
 if numInfoType = GConst.REFHEDGEDEALLINKING then
      Varoperation := 'Extracting Cursor for Holding Rate';
      -- numcode := Gconst.fncXMLExtract(xmldoc,'BaseCurrency',numcode);
      -- numcode1 := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
       numcode2 := GConst.fncXMLExtract(xmldoc, 'DealType', numcode2);
       dattemp := Gconst.Fncxmlextract(Xmldoc,'FromDate',dattemp);
       dattemp1 := Gconst.fncXMLExtract(xmldoc,'ToDate',dattemp1);
       --if numaction=GCONST.DELETELOAD then
       begin
          VarTemp1 :=Gconst.fncXMLExtract(xmldoc,'KeyValues/BatchNumber',varReference);
       exception
       when others then
          varTemp1:=null;
       end;

       if VarTemp1 is not null then
         Open Gencursor for
             select
                   deal_deal_number AS "DealNumber",pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as "Company",
                   pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as "BaseCurrency",
                   pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as "OtherCurrency",
                   pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS "CounterParty",
                   pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS "BuySell",
                   PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS "FCY",
                   PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as "ExchangeRate",
                   DEAL_EXECUTE_DATE AS "ExecuteDate",
                   PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS "BaseAmount",
                   DEAL_MATURITY_FROM AS "MaturityFrom",
                   PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS "MaturityDate",
                   PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as "OtherAmount",
                   PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as "LocalRate",
                   0 BP,0 BC,0 SP,0 SC, DEAL_MATURITY_DATE "SettlementDate",
                   deal_COMPANY_CODE AS "CompanyCode"
              from trtran001
              where deal_deal_number in( select link_deal_number
                            from trtran019
                            where link_batch_number=VarTemp1
                            and link_record_status not in(10200005,10200006))
               and deal_record_status not in(10200005,10200006)
               and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

            union
            select
                   cfut_deal_number AS "DealNumber",pkgreturncursor.fncgetdescription(cfut_COMPANY_CODE,1) as "Company",
                   pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as "BaseCurrency",
                   pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as "OtherCurrency",
                   pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) AS "CounterParty",
                   pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) AS "BuySell",
                   CFUT_BASE_AMOUNT  AS "FCY",CFUT_EXCHANGE_RATE as "ExchangeRate",
                   CFUT_EXECUTE_DATE AS "ExecuteDate",
                   CFUT_BASE_AMOUNT AS "BaseAmount",
                   CFUT_MATURITY_DATE AS "MaturityFrom",
                   CFUT_MATURITY_DATE AS "MaturityDate",
                   CFUT_OTHER_AMOUNT as "OtherAmount",
                   CFUT_LOCAL_RATE as "LocalRate",
                   0.00 "BP",0.00 "BC",0.00 "SP",0.00 "SC", CFUT_MATURITY_DATE "SettlementDate",
                   cfut_COMPANY_CODE AS "CompanyCode"
              from trtran061
             where cfut_deal_number in( select link_deal_number
                            from trtran019
                            where link_batch_number=VarTemp1
                            and link_record_status not in(10200005,10200006))
               and cfut_record_status not in(10200005,10200006)
               and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

            union
             select
                    copt_deal_number AS "DealNumber",pkgreturncursor.fncgetdescription(copt_COMPANY_CODE,1) as "Company",
                    pkgreturncursor.fncgetdescription(Copt_BASE_CURRENCY,2) as "BaseCurrency",
                    pkgreturncursor.fncgetdescription(Copt_OTHER_CURRENCY,2) as "OtherCurrency",
                    pkgreturncursor.fncgetdescription(Copt_COUNTER_PARTY,2) AS "CounterParty",
                    '' AS "BuySell",
                   copt_BASE_AMOUNT  AS "FCY",0.00 as "ExchangeRate",
                   Copt_EXECUTE_DATE AS "ExecuteDate",
                   COPT_BASE_AMOUNT AS "BaseAmount",
                   COPT_MATURITY_DATE AS "MaturityFrom",
                   COPT_MATURITY_DATE AS "MaturityDate",
                   COPT_OTHER_AMOUNT as "OtherAmount",
                   0.00 as "LocalRate",
                  (select round( avg(cosu_strike_rate),2) from trtran072
                    where cosu_deal_number=copt_deal_number
                     and cosu_buy_sell=25300001
                     and cosu_option_type=32400001) "BC",
                 (select avg(cosu_strike_rate) from trtran072
                   where cosu_deal_number=copt_deal_number
                     and cosu_buy_sell=25300001
                     and cosu_option_type=32400002) "BP",
                 (select avg(cosu_strike_rate) from trtran072
                   where cosu_deal_number=copt_deal_number
                     and cosu_buy_sell=25300002
                     and cosu_option_type=32400002) "SP",
                 (select avg(cosu_strike_rate) from trtran072
                   where cosu_deal_number=copt_deal_number
                     and cosu_buy_sell=25300002
                     and cosu_option_type=32400001) "SC",copt_expiry_date "SettlementDate",
                     copt_COMPANY_CODE AS "CompanyCode"
              from trtran071
             where copt_deal_number in( select link_deal_number
                            from trtran019
                            where link_batch_number=VarTemp1
                            and link_record_status not in(10200005,10200006))
               and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
               and copt_record_status not in(10200005,10200006);

            Goto Process_End;
       end if;

       --end if;

--       insert into temp values(numaction,VarTemp1);
--        insert into temp values(VarTemp1,VarTemp2);
--       if varTemp1 !=null then
--           if (substr(varTemp1,1,2)='HD') then
--             numcode2:=GConst.ForwardContract;
--          elsif (substr(varTemp1,1,2)='CO') then
--             numcode2:=GConst.OptionContract;
--          end if;
--       end if;
--       Insert Into Temp Values (numcode2,dattemp);
--       insert into temp values (dattemp1,dattemp1);
--       commit;
    if numcode2=GConst.ForwardContract then
      Open Gencursor for
            select pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as "Company",
                 deal_deal_number "DealNumber",round(deal_exchange_rate,4) "ExchangeRate",
                 Deal_base_amount "BaseAmount",

--               (Deal_base_amount-NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = deal_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0)) "HedgingAmount",
              --updated by Nataraj on 27-11-10

                 fncgetdescription(deal_base_currency,2) "BaseCurrency", fncgetdescription(deal_other_currency,2) "OtherCurrency",
                 deal_other_amount "OtherAmount",deal_local_rate "LocalRate",pkgreturnreport.FNCCONVRS(deal_amount_local) "AmountLocal",
                 deal_maturity_date "MaturityDate",deal_serial_number "SerialNumber",fncgetdescription(deal_counter_party,1) "CounterParty",
                 fncgetdescription(deal_hedge_trade,1) "HedgeTrade",fncgetdescription(deal_buy_sell,1) "BuySell",
                 fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp",
                 (select user_user_name
                   from usermaster
                  where user_user_id=deal_user_id) "UserName",
                  deal_other_currency "OtherCurrencyCode",
                  --deal_holding_rate "HoldingRate",deal_holding_rate1 "HoldingRate1",
                  deal_dealer_remarks "Remarks",  'All' "TradeReference",deal_record_status "RecordStatus",
                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",deal_execute_date "ExecuteDate",
                  deal_company_code CompanyCode
             from trtran001
            where deal_hedge_trade in (26000001,26000003)
              and deal_execute_date between dattemp and datTemp1
              and deal_process_complete = GConst.OPTIONNO
              and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
              and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

              and deal_deal_number not in( select link_deal_number
                                          from trtran019
                                          where link_record_status not in(10200005,10200006));
--              and deal_deal_number in (case VarTemp1 when null then
--                                         select link_deal_number
--                                           from trtran019
--                                          where link_batch_number= varTemp1
--                                          and link_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--                                        else
--                                          deal_deal_number end)


              --For Delete Mode
--              and (deal_deal_number =decode(varTemp1,null,deal_deal_number,varTemp1)
--                 or deal_deal_number =decode(varTemp2,null ,deal_deal_number,varTemp2));
              --To check Already Added Deals
 --             and deal_deal_number
 --               not in( select link_link_dealno from trtran019 where link_record_status not in(10200005,10200006))
 --             and deal_deal_number
 --               not in( select link_deal_number from trtran019 where link_record_status not in(10200005,10200006));


    elsif numcode2=GConst.FutureContract then
         Open Gencursor for
            select pkgreturncursor.fncgetdescription(cfut_COMPANY_CODE,1) as "Company",
                 cfut_deal_number "DealNumber",round(cfut_exchange_rate,4) "ExchangeRate",
                 cfut_base_amount "BaseAmount",
                 fncgetdescription(cfut_base_currency,2) "BaseCurrency", fncgetdescription(cfut_other_currency,2) "OtherCurrency",
                 cfut_other_amount "OtherAmount",cfut_local_rate "LocalRate",
                 --pkgreturnreport.FNCCONVRS(cfut_amount_local) "AmountLocal",
                 cfut_maturity_date "MaturityDate",0 "SerialNumber",fncgetdescription(cfut_counter_party,1) "CounterParty",
                 fncgetdescription(cfut_hedge_trade,1) "HedgeTrade",fncgetdescription(cfut_buy_sell,1) "BuySell",
                 fncgetdescription(cfut_exchange_code,1) "SwapOutright",fncgetdescription(cfut_contract_type,1) "DealType",
                 cfut_time_stamp "DealTimeStamp",
                 (select user_user_name
                   from usermaster
                  where user_user_id=cfut_user_id) "UserName",
                  cfut_other_currency "OtherCurrencyCode",cfut_lot_numbers "Lot Numbers",CFUT_EXCHANGE_RATE "Lot Price",
                  cfut_dealer_remark "Remarks",  'All' "TradeReference",cfut_record_status "RecordStatus",
                  cfut_base_currency "BaseCurrencyCode",cfut_buy_sell as "BuySellCode",cfut_execute_date "ExecuteDate",
                  cfut_company_code "CompanyCode"
             from trtran061
            where cfut_hedge_trade in (26000001,26000003)
              and cfut_process_complete = GConst.OPTIONNO
              and cfut_execute_date between dattemp and datTemp1
              and cfut_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
              and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

              and cfut_deal_number not in( select link_deal_number
                                             from trtran019
                                            where  link_record_status not in(10200005,10200006));
                  --For Delete Mode
--              and (cfut_deal_number =decode(varTemp1,null,cfut_deal_number,varTemp1)
--                 or cfut_deal_number =decode(varTemp2,null ,cfut_deal_number,varTemp2))
--                            --To check Already Added Deals
--              and cfut_deal_number
--                not in( select LINK_DEAL_NUMBER from trtran019 where link_record_status not in(10200005,10200006));


      elsif numcode2=GConst.OptionContract then
         Open Gencursor for
            select pkgreturncursor.fncgetdescription(copt_COMPANY_CODE,1) as "Company",copt_deal_number "DealNumber",
                 copt_base_amount "BaseAmount",
                (select round(avg(cosu_strike_rate),4) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.PURCHASEDEAL
                   and cosu_option_type=GCONST.OptionCall) "BC",
               (select round(avg(cosu_strike_rate),4) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.PURCHASEDEAL
                   and cosu_option_type=GCONST.OptionPut) "BP",
               (select round(avg(cosu_strike_rate),4) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.SALEDEAL
                   and cosu_option_type=GCONST.OptionPut) "SP",
               (select round(avg(cosu_strike_rate),4) from trtran072
                 where cosu_deal_number=copt_deal_number
                   and cosu_buy_sell=Gconst.SALEDEAL
                   and cosu_option_type=GCONST.OptionCall) "SC",

--               (Deal_base_amount-NVL((select sum(hedg_hedged_fcy)
--                         from trtran004
--                         where hedg_deal_number = deal_deal_number
--                         and hedg_record_status in (10200001, 10200003, 10200004,10200012)),0)) "HedgingAmount",
              --updated by Nataraj on 27-11-10

                 copt_premium_rate "PremiumRate",copt_premium_Amount "PremiumAmount",
                 copt_Premium_Exrate "PremiumExRate",copt_premium_Local "PremiumLocal",
                 fncgetdescription(copt_base_currency,2) "BaseCurrency", fncgetdescription(copt_other_currency,2) "OtherCurrency",
                 copt_other_amount "OtherAmount",0 "LocalRate",0 "AmountLocal",
                 copt_maturity_date "MaturityDate",copt_serial_number "SerialNumber",fncgetdescription(copt_counter_party,1) "CounterParty",
                 fncgetdescription(copt_hedge_trade,1) "HedgeTrade",
                 --fncgetdescription(cosu_buy_sell,1) "BuySell",
                 --fncgetdescription(cosu_option_type,1) "OptionType",
                 fncgetdescription(copt_contract_type,1) "DealType",
                 copt_time_stamp "DealTimeStamp",
                 (select user_user_name
                   from usermaster
                  where user_user_id=copt_user_id) "UserName",
                  copt_other_currency "OtherCurrencyCode",copt_lot_numbers "Lot Numbers",copt_lot_price "Lot Price",
                  copt_dealer_remark "Remarks",  'All' "TradeReference",copt_record_status "RecordStatus",
                  copt_base_currency "BaseCurrencyCode",
                  --cosu_buy_sell as "BuySellCode",
                  copt_execute_date "ExecuteDate",
                   0 "ExchangeRate",
                   0 "LocalRate",
                   copt_company_code "CompanyCode"
                  --,
                  --copt_link_batchno "LinkBatchNo",copt_link_date "LinkDate"
             from trtran071
            where copt_hedge_trade in (26000001,26000003)
              and copt_execute_date between dattemp and datTemp1
              and copt_process_complete = GConst.OPTIONNO
              and copt_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
              and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
              and copt_deal_number not in( select link_deal_number
                                            from trtran019
                                           where link_record_status not in(10200005,10200006));
                            --To check Already Added Deals
--              and copt_deal_number
--                not in( select LINK_DEAL_NUMBER from trtran019 where link_record_status not in(10200005,10200006));
--              and copt_deal_number
--                not in( select link_deal_number from trtran019 where link_record_status not in(10200005,10200006));
   else
     Open Gencursor for
       select
             deal_deal_number AS "DealNumber",pkgreturncursor.fncgetdescription(deal_COMPANY_CODE,1) as "Company",
             pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) as "BaseCurrency",
             pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as "OtherCurrency",
             pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,2) AS "CounterParty",
             pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,2) AS "BuySell",
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1)  AS "FCY",
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,2) as "ExchangeRate",
             DEAL_EXECUTE_DATE AS "ExecuteDate",
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,1) AS "BaseAmount",
             DEAL_MATURITY_FROM AS "MaturityFrom",
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER) AS "MaturityDate",
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,3) as "OtherAmount",
             PKGRETURNCURSOR.fncRollover(deal_DEAL_NUMBER,4) as "LocalRate",
             0 BP,0 BC,0 SP,0 SC, DEAL_MATURITY_DATE "SettlementDate",
             deal_COMPANY_CODE AS "CompanyCode"
        from trtran001
        where deal_maturity_date between dattemp and datTemp1
         and deal_process_complete =12400002
         and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
         and deal_deal_number not in( select link_deal_number
                              from trtran019
                             where link_record_status not in(10200005,10200006))

         and deal_record_status not in(10200005,10200006)
      union
      select
             cfut_deal_number AS "DealNumber",pkgreturncursor.fncgetdescription(cfut_COMPANY_CODE,1) as "Company",
             pkgreturncursor.fncgetdescription(CFUT_BASE_CURRENCY,2) as "BaseCurrency",
             pkgreturncursor.fncgetdescription(CFUT_OTHER_CURRENCY,2) as "OtherCurrency",
             pkgreturncursor.fncgetdescription(CFUT_COUNTER_PARTY,2) AS "CounterParty",
             pkgreturncursor.fncgetdescription(CFUT_BUY_SELL,2) AS "BuySell",
             CFUT_BASE_AMOUNT  AS "FCY",CFUT_EXCHANGE_RATE as "ExchangeRate",
             CFUT_EXECUTE_DATE AS "ExecuteDate",
             CFUT_BASE_AMOUNT AS "BaseAmount",
             CFUT_MATURITY_DATE AS "MaturityFrom",
             CFUT_MATURITY_DATE AS "MaturityDate",
             CFUT_OTHER_AMOUNT as "OtherAmount",
             CFUT_LOCAL_RATE as "LocalRate",
             0.00 "BP",0.00 "BC",0.00 "SP",0.00 "SC", CFUT_MATURITY_DATE "SettlementDate",
             cfut_COMPANY_CODE AS "CompanyCode"
        from trtran061
       where cfut_maturity_date between dattemp and datTemp1
         and cfut_process_complete =12400002
         and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
         and cfut_deal_number not in( select link_deal_number
                              from trtran019
                             where link_record_status not in(10200005,10200006))
         and cfut_record_status not in(10200005,10200006)
      union
       select
              copt_deal_number AS "DealNumber",pkgreturncursor.fncgetdescription(copt_COMPANY_CODE,1) as "Company",
              pkgreturncursor.fncgetdescription(Copt_BASE_CURRENCY,2) as "BaseCurrency",
              pkgreturncursor.fncgetdescription(Copt_OTHER_CURRENCY,2) as "OtherCurrency",
              pkgreturncursor.fncgetdescription(Copt_COUNTER_PARTY,2) AS "CounterParty",
              '' AS "BuySell",
             copt_BASE_AMOUNT  AS "FCY",0.00 as "ExchangeRate",
             Copt_EXECUTE_DATE AS "ExecuteDate",
             COPT_BASE_AMOUNT AS "BaseAmount",
             COPT_MATURITY_DATE AS "MaturityFrom",
             COPT_MATURITY_DATE AS "MaturityDate",
             COPT_OTHER_AMOUNT as "OtherAmount",
             0.00 as "LocalRate",
            (select round( avg(cosu_strike_rate),2) from trtran072
              where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400001) "BC",
           (select avg(cosu_strike_rate) from trtran072
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400002) "BP",
           (select avg(cosu_strike_rate) from trtran072
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400002) "SP",
           (select avg(cosu_strike_rate) from trtran072
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400001) "SC",copt_expiry_date "SettlementDate",
               copt_COMPANY_CODE AS "CompanyCode"
        from trtran071
       where copt_maturity_date between dattemp and datTemp1
         and copt_process_complete =12400002
         and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

         and copt_deal_number not in( select link_deal_number
                      from trtran019
                     where link_record_status not in(10200005,10200006))
         and copt_record_status not in(10200005,10200006);


    end if;
  Goto Process_End;
  End if;



------------modified 24-july-13
--if  numInfotype = GConst.REFOPTIONSMTM then
--    VAROPERATION := 'Extracting OTC Options for updating MTM';
--    datTemp := GConst.fncxmlextract(xmldoc, 'MtmDate', datTemp);
--    numCode1 := GConst.fncxmlextract(xmldoc, 'CompanyCode', numCode1);
--
--    Open GenCursor for
--    select CompanyName, BankName, DealDate, DealAmount, Currency, Maturity, Settlement,
--    bc, bp, sc, sp, trans, DealNumber, Status,
--    pkgReturnCursor.fncGetDescription(HedgeTrade,2) Pupose,
--    pkgReturnCursor.fncGetDescription(initcode,2) Trader,
--    CompanyCode, BankCode, transcode, hedgetrade, initcode,pick_key_value CurrencyCode,
--    RecordStatus
--    from vewOptions, trmaster001
--    where status = 12400002
--    AND COMPANYCODE = NUMCODE1
--    and RecordStatus not in (10200005,10200006)
--   -- and bankcode between 30600001 and 30699999
--    AND CURRENCY = PICK_SHORT_DESCRIPTION
--    AND NOT EXISTs
--    (SELECT 'X' FROM TRTRAN062
--    WHERE CFMR_MTM_DATE=datTemp
--    and CFMR_DEAL_NUMBER=DealNumber) ;
--
--  Goto Process_End;
--End if;
----end
--
--if  numInfotype = GConst.REFOPTIONSMTM1 then
--    varOperation := 'Extracting Edited OTC Options';
--
--    varReference := GConst.fncxmlextract(xmldoc, 'KeyValues/DealNumber', varReference);
--
--    Open GenCursor for
--    select CompanyName, BankName, DealDate, DealAmount, Currency, Maturity, Settlement,
--    bc, bp, sc, sp, trans, DealNumber, Status RecordStatus,
--    pkgReturnCursor.fncGetDescription(HedgeTrade,2) Pupose,
--    pkgReturnCursor.fncGetDescription(initcode,2) Trader,
--    CompanyCode, BankCode, transcode, hedgetrade, initcode,pick_key_value CurrencyCode
--    from vewOptions, trmaster001
--    where DealNumber = varReference
--    and currency = pick_short_description;
--
--  Goto Process_End;
--End if;
if  numInfotype = GConst.REFOPTIONSMTM then
    VAROPERATION := 'Extracting OTC Options for updating MTM';
    datTemp := GConst.fncxmlextract(xmldoc, 'MtmDate', datTemp); 
    numCode1 := GConst.fncxmlextract(xmldoc, 'CompanyCode', numCode1); 

    Open GenCursor for
    select CompanyName, BankName, DealDate, 
    --pkgForexProcess.fncGetOutstanding(dealnumber,1,GConst.UTILOPTIONHEDGEDEAL,GConst.AMOUNTFCY,datTemp) DealAmount,
    OUTSTANDING DealAmount,
    Currency, Maturity, Settlement,
    --bc, bp, sc, sp, 
    trans, DealNumber, Status, 
    pkgReturnCursor.fncGetDescription(HedgeTrade,2) Pupose,
    pkgReturnCursor.fncGetDescription(initcode,2) Trader,
    CompanyCode, BankCode, transcode, hedgetrade, initcode,pick_key_value CurrencyCode,
    RecordStatus
    from vewOptions, trmaster001
    where ((status = 12400001  and completedate > datTemp) or status = 12400002)
    AND COMPANYCODE = NUMCODE1
    and RecordStatus not in (10200005,10200006)
   -- and bankcode between 30600001 and 30699999
    AND CURRENCY = PICK_SHORT_DESCRIPTION
    AND NOT EXISTs 
    (SELECT 'X' FROM TRTRAN062
    WHERE CFMR_MTM_DATE=datTemp
    and CFMR_DEAL_NUMBER=DealNumber
    and CFMR_SERIAL_NUMBER = (Select max(CFMR_SERIAL_NUMBER) from trtran062 a
    where a.CFMR_DEAL_NUMBER = DealNumber and a.CFMR_MTM_DATE=datTemp)
    and cfmr_record_status in (10200001,10200002,10200003,10200004));
  Goto Process_End;
End if;

if  numInfotype = GConst.REFOPTIONSMTM1 then
    varOperation := 'Extracting Edited OTC Options';

    varReference := GConst.fncxmlextract(xmldoc, 'KeyValues/DealNumber', varReference);
  
    Open GenCursor for
    select CompanyName, BankName, DealDate, DealAmount, Currency, Maturity, Settlement,
    --bc, bp, sc, sp, 
    trans, DealNumber, Status RecordStatus,
    pkgReturnCursor.fncGetDescription(HedgeTrade,2) Pupose,
    pkgReturnCursor.fncGetDescription(initcode,2) Trader,
    CompanyCode, BankCode, transcode, hedgetrade, initcode,pick_key_value CurrencyCode
    from vewOptions, trmaster001
    where DealNumber = varReference 
    and currency = pick_short_description;

  Goto Process_End;
End if;

--------------------------------------------
  if numInfoType = GConst.REFSPECIFICTRADE then
    varOperation := 'Getting Trade Details';
    varReference := GConst.fncxmlextract(xmldoc, 'TradeReference',varTemp);

    open GenCursor for
      select trad_company_code, trad_trade_reference, trad_import_export,
        trad_local_bank,trad_reference_date, trad_buyer_seller, trad_product_code,
        trad_product_description, trad_trade_fcy, trad_maturity_from,
        trad_maturity_date, TRAD_MATURITY_DATE, trad_trade_fcy,
        trad_trade_currency, trad_trade_rate, trad_trade_inr,
        trad_entry_date, trad_reference_date
        from trtran002
        where trad_trade_reference = varReference;

    Goto Process_End;
  End if;

  if numInfoType = GConst.REFLINKEDDEALS then
    varOperation := 'Getting Trade Details for the Trade Reference';
    varReference := GConst.fncxmlextract(xmldoc, 'TradeReference',varTemp);

    OPEN GenCursor for
    select copt_deal_number "DealNumber", copt_execute_date "DealDate",
      pkgreturncursor.fncgetdescription(copt_counter_party,2) "Bank",
      pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY,2)||'/'||
      pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2) "Currency",
      copt_user_reference "BankReference",
      copt_base_amount "BaseAmount",COPT_EXPIRY_DATE "Expiry",
      copt_maturity_date "Settlement", 0 "ExchangeRate",
        (select round( avg(cosu_strike_rate),2) from trtran072
          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
          and cosu_option_type=32400001) "BC",
        (select avg(cosu_strike_rate) from trtran072
          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300001
          and cosu_option_type=32400002) "BP",
        (select avg(cosu_strike_rate) from trtran072
          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
          and cosu_option_type=32400002) "SP",
        (select avg(cosu_strike_rate) from trtran072
          where cosu_deal_number=copt_deal_number and cosu_buy_sell=25300002
          and cosu_option_type=32400001) "SC",
      copt_premium_amount "PremiumAmount", copt_premium_local "PremiumLocal",
      corv_exercise_date "CancelDate", NVL(corv_base_amount,0)  "CancelAmount",
      0 "CancelRate",corv_rbi_refrate "RBIReference",NVL(corv_profit_loss,0) "Gain/Loss",
      (NVL(corv_profit_loss,0)-copt_premium_local) "NetPL"--, 0 "ProfitLossUsd"
      from trtran071 left outer join trtran073
      on corv_deal_number = copt_deal_number
      and corv_record_status not in(10200005,10200006)
      and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
      where copt_deal_number in
      (select hedg_deal_number
        from trtran004
        where hedg_trade_reference = varReference
        and hedg_record_status between 10200001 and 10200004)
      and copt_record_status not in(10200005,10200006)
    union
    Select deal_deal_number "DealNumber",deal_execute_date "DealDate",
      pkgreturncursor.fncgetdescription(deal_counter_party,2) "Bank",
      pkgreturncursor.fncgetdescription(deal_base_currency,2)|| '/' ||
      pkgreturncursor.fncgetdescription(deal_other_currency,2) "Currency",
      deal_user_reference BankReference,
      deal_base_amount "BaseAmount", DEAL_MATURITY_DATE "Maturity",
      DEAL_MATURITY_DATE "DeliveryDate", deal_exchange_rate "ExchangeRate",
      0 BC,0 BP,0 SP,0 SC , 0 "PremiumAmount", 0 "PremiumLocal",
      cdel_cancel_date "CancelDate",NVL(cdel_cancel_amount,0) "CancelAmount",
      cdel_cancel_rate "CancelRate", 0 "RBIReference",
      NVL(cdel_profit_loss,0) "Gain/Loss", 0 "NetPL"
--      cdel_other_amount "ProfitLossUsd"
    from trtran001
    left outer join trtran006
    on deal_deal_number = cdel_deal_number
    and Cdel_Record_Status Not In(10200005,10200006)
    and deal_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )
    where deal_deal_number in
      (select hedg_deal_number
        from trtran004
        where hedg_trade_reference = varReference
        and hedg_record_status between 10200001 and 10200004)
    and deal_record_status not in(10200005,10200006)
  union
  select 'Totals' "DealNumber", null "DealDate",
    '' "Bank", '' "Currency", '' "BankReference", 0 "BaseAmount",
    null "Maturity", null "DeliveryDate", null "ExchangeRate",
        null BC,null BP,null SP,null SC , 0 "PremiumAmount", 0 "PremiumLocal",
      null "CancelDate",0 "CancelAmt",
      null "CancelRate", null "RBIReference",
      0 "Gain/Loss", 0 "NetPL"
      from dual
  order by 1;

--  if numInfoType=Gconst.REFLINKBATCHNO then
--    varOperation := 'Getting the Link BatchNo';
--    VarReference := 'Link/' || Gconst.fncGenerateSerial(Gconst.SERIALLINKBATCHNO);
--    open gencursor for
--       select VarReference
--         from dual;
--
--   goto process_end;
--  end if;
if numInfoType=Gconst.REFLINKBATCHNO then
    varOperation := 'Getting the Link BatchNo';
    VarReference := 'Link/' || Gconst.fncGenerateSerial(Gconst.SERIALLINKBATCHNO);
    open gencursor for
       select VarReference
         from dual;  
       
   goto process_end;
  end if;


    Goto Process_End;
  End if;

if numInfoType=Gconst.refFrowardBatchno then
    varOperation := 'Getting the Link BatchNo';
    VarReference := 'Link/' || Gconst.fncGenerateSerial(Gconst.SERIALFRWDLINKBATCHNO);
    open gencursor for
       select VarReference "VarReference"
         from dual;  
       
   goto process_end;
  end if;
  
if numInfoType=Gconst.refDeliveryBatchNo then
    varOperation := 'Getting the Delivery BatchNo';
    VarReference := 'Deli/' || Gconst.fncGenerateSerial(Gconst.SERIALDELIVERYBATCHNO);
    open gencursor for
       select VarReference "VarReference"
         from dual;        
   goto process_end;
  end if;
  
    -- Added by Sivadas on 19Dec2011  for MTM Bank Statement upload -------------
  if numInfoType=Gconst.REFBANKSTAT then
     varOperation := 'Getting Link Batch No';
     VarReference := 'LINK/' || Gconst.fncGenerateSerial(Gconst.SERIALFRWDLINKBATCHNO);
       open gencursor for
     select VarReference
       from dual;
     goto process_end;
  end if;

    -- Added by Sivadas on 03AUG2012 for NSE Rates upload -------------
  if numInfoType=Gconst.REFNSESTAT then
     varOperation := 'Getting the NSE Upload New Serial';
     VarReference := 'STAT/' || Gconst.fncGenerateSerial(Gconst.SERIALNSESTAT);
       open gencursor for
     select VarReference
       from dual;

     goto process_end;
  end if;

  if numInfoType=Gconst.REFBANKSTATDETAIL then
     varOperation := 'Getting the Bank Statement record details';
     VarReference := GConst.fncxmlextract(xmldoc, 'KeyValues/BatchNumber',varTemp);
       open gencursor for
     select *
       from trtran075
      where mtmr_batch_number =VarReference
        and mtmr_record_status not in(10200005,10200006);

     goto process_end;
  end if;
   if numInfoType=Gconst.REFUSERREFUPDATE then
     varOperation := 'Getting Deal details to update User Reference number';
     varTemp      := GConst.fncxmlextract(xmldoc, 'Company',varTemp);
     varTemp2     := GConst.fncxmlextract(xmldoc, 'CouterParty',varTemp);

       open gencursor for
     Select PKGRETURNCURSOR.FNCGETDESCRIPTION(copt_company_code, 2) CompanyCode,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(copt_counter_party, 1) CounterParty,
            copt_user_reference User_Reference,
            copt_deal_number DealNumber,
            copt_execute_date ExecuteDate,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(copt_deal_type, 1) DealType,
            copt_base_amount BaseAmount,
            (select round( avg(cosu_strike_rate),4)
               from trtran072
              where cosu_deal_number = copt_deal_number
                and cosu_buy_sell = 25300001
                and cosu_option_type = 32400001) BC,
            (select avg(cosu_strike_rate)
               from trtran072
              where cosu_deal_number = copt_deal_number
                and cosu_buy_sell = 25300001
                and cosu_option_type = 32400002) BP,
            (select avg(cosu_strike_rate)
               from trtran072
              where cosu_deal_number = copt_deal_number
                and cosu_buy_sell = 25300002
                and cosu_option_type = 32400002) SP,
            (select avg(cosu_strike_rate)
               from trtran072
              where cosu_deal_number=copt_deal_number
                and cosu_buy_sell=25300002
                and cosu_option_type=32400001) SC,
            copt_expiry_date SettlementDate,
            copt_maturity_date MaturityDate,
            copt_company_code ,
            copt_serial_number SerialNo
       from trtran071
      where copt_company_code = varTemp
        and copt_counter_party = varTemp2
        and copt_process_complete = 12400002
        and copt_Company_Code in( select usco_company_code from trsystem022a
                                    where usco_user_id = varUserid )

        and copt_record_status not in(10200005,10200006)
        and copt_user_reference is null;

     goto process_end;
  end if;


  if numInfoType=Gconst.REFUSERREFUPDATEREC then
     varOperation := 'Getting Deal details to update User Reference number';
     clbTemp :=pkgMastermaintenance.fncMiscellaneousUpdates
                 (ParamData,Gconst.SYSUPDATEDEALNO ,numCode);
     commit;
     goto dummy_cursor;
  end if;

 if numInfoType=Gconst.REFGETUPLOADEDDATA then
     varOperation := 'Getting Uploaded MTM options report records';
     varTemp      := GConst.fncxmlextract(xmldoc, 'UserRefNos', varTemp);
     datTemp      := GConst.fncxmlextract(xmldoc, 'RepDate', datTemp);

       open gencursor for
     select mtmr_user_reference UserReference
       from trtran075
      where regexp_instr(varTemp, '[|]'||mtmr_user_reference||'[|]') > 0
        and mtmr_report_date = datTemp;

     goto process_end;
  end if;

  if numInfoType = Gconst.REFGETRBISPOTRATE then
     varOperation := 'Getting RBI spot rate';
     datTemp      := GConst.fncxmlextract(xmldoc, 'RepDate', datTemp);

       open gencursor for
     select lrat_rbi_usd RbiRate
       from trsystem017
      where lrat_effective_date = (select Max(lrat_effective_date)
                                     from trsystem017
                                    where lrat_effective_date <= datTemp);
     goto process_end;
  end if;

  if numInfoType = GConst.REFTFDATAUPDATES then
        varOperation := 'Inserting  TradeFinance  Data';
    --    pkgTreasury.prcExportDetails@TRADEFINANCELINK2(numCode,vartemp1);
    --    pkgTreasury.prcImportDetails@TRADEFINANCELINK2(numCode,vartemp1);
  end if;

  if numInfoType = GConst.REFDEALSVIEW then

    varOperation := 'Extracting Deal Details';
    GConst.gdatToday := datWorkDate;

    numCode  := GConst.fncxmlextract(xmldoc, 'OpenClose', numCode);
    numCode1 := GConst.fncxmlextract(xmldoc, 'CompanyCode', numCode1);
    numCode2 := GConst.fncxmlextract(xmldoc, 'CounterParty', numCode2);
    numCode3 := GConst.fncxmlextract(xmldoc, 'TransType', numCode3);
    numCode4 := GConst.fncxmlextract(xmldoc, 'DealType', numCode4);
    numCode5 := GConst.fncxmlextract(xmldoc, 'MTMType', numCode5);
    numCode6 := GConst.fncxmlextract(xmldoc, 'GroupBy', numCode6);
    numCode7 := GConst.fncxmlextract(xmldoc, 'HedgeTrade', numCode7);
    numCode8 := GConst.fncxmlextract(xmldoc, 'Dealers', numCode8);
    numCode9 := GConst.fncxmlextract(xmldoc, 'CurrencyPair', numCode9);
    ExecutionDate := GConst.fncxmlextract(xmldoc, 'ExecuteFrom', ExecutionDate);
    DelivaryDate := GConst.fncxmlextract(xmldoc, 'ExecuteTo', DelivaryDate);
    datTemp := GConst.fncxmlextract(xmldoc, 'MaturityFrom', datTemp);
    datTemp1 := GConst.fncxmlextract(xmldoc, 'MaturityTo', datTemp1);
    datTemp2 := GConst.fncxmlextract(xmldoc, 'CancelledFrom', datTemp);
    datTemp3 := GConst.fncxmlextract(xmldoc, 'CancelledTo', datTemp1);
    numFcy := GConst.fncxmlextract(xmldoc, 'RateFrom', numFcy);
    numFcy1 := GConst.fncxmlextract(xmldoc, 'RateTo', numFcy1);

    if numCode5 = 62400003 then
      numRate := GConst.fncxmlextract(xmldoc, 'AskRate', numRate);
      numSpot := GConst.fncxmlextract(xmldoc, 'BidRate', numSpot);
    else
      numRate := 0;
      numSpot := 0;
    end if;

    if numCode6 not in (62500022,62599999) then

      select pick_long_description
        into varTemp
        from trmaster001
        where pick_key_value = numCode6;

      varTemp2 := 'select ' || varTemp || ',';

      varTemp1 := 'to_char(dealdate,' || '''' || 'yyyy:mm' || '''' || ')';
      if  instr(varTemp2, varTemp1) > 0 then
        varTemp2 := replace(varTemp2, varTemp1, varTemp1 || ' ' || 'DealMonth');
      end if;

      varTemp1 := 'to_char(maturity,' || '''' || 'yyyy:mm' || '''' || ')';
      if  instr(varTemp2, varTemp1) > 0 then
        varTemp2 := replace(varTemp2, varTemp1, varTemp1 || ' ' || 'MatuMonth');
      end if;

      if numCode4 = 32200001 then
        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
        sum(pandlfcy) PandlFcy, min(exrate) EXMin, max(exrate) ExMax,
        Round(avg(exrate),4) ExAvg,
        from vewForwards ';
--        sum(decode(status,12400001,0,Round(pkgReturnCursor.fncMTMRate(DealNumber,
--        32200001,62400002) * pkgReturnCursor.fncMTMRate(DealNumber,32200001,62400002,0,0,1)))) MTMAmount
      elsif numCode4 = 32200002 then
        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
        sum(pandlfcy) PandlFcy, min(exrate) EXMin, max(exrate) ExMax,
        Round(avg(exrate),4) ExAvg
        from vewFutures ';
      elsif numCode4 = 32200003 then
        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
        sum(premium) Premium, sum(pandlfcy) PandlFcy,
        min(sc) SCMin, max(sc) SCMax, Round(avg(sc),4) SCAvg
        from vewoptions ';
      else
        varTemp2 := varTemp2 || ' count(*) DealNos, sum(dealamount) DealAmount,
        sum(pandlfcy) PandlFcy, min(exrate) EXMin, max(exrate) ExMax,
        Round(avg(exrate),4) ExAvg
        from vewFutureForward ';
      end if;

      Goto Where_Clause;
    elsif numCode6 = 62500022 then
        Goto Where_Clause;
    End if;

-- Balance
    varCondition := ' pkgForexProcess.fncGetOutstanding(dealnumber, 1,';
    if numCode4 = 32200001 then
      varCondition := varCondition || '1,';
    elsif numCode4 = 32200002 then
      varCondition := varCondition || '14,';
    elsif numCode4 = 32200003 then
      varCondition := varCondition || '15,';
    else
      varCondition := varCondition || 'decode(DealType, 32200001, 1, 14),';
    end if;
    varCondition := varCondition || '1,' || '''' || datWorkDate|| '''' || ') Balance,';

-- MTM Value
    varCondition := varCondition || ' pkgReturnCursor.fncMTMRate(' || 'dealnumber' || ',';
    if numCode4 = 32200004 then
      varCondition := varCondition ||  'DealType,' || numCode5 || ',';
    else
      varCondition := varCondition || numCode4 || ',' || numCode5  || ',';
    End if;

    varCondition := varCondition || numRate || ',' || numSpot || ')';
    varCondition := varCondition || ' MTMRate' || ',0 MTMValue,';

--Wash Rate
    varCondition := varCondition ||
    ' pkgReturnCursor.fncMTMRate(' || 'dealnumber' || ',';
    if numCode4 = 32200004 then
      varCondition := varCondition ||  'DealType,' || numCode5 || ',';
    else
      varCondition := varCondition || numCode4 || ',' || numCode5  || ',';
    End if;

    varCondition := varCondition || numRate || ',' || numSpot || ',1)';
    varCondition := varCondition || ' WashRate,0 PNLInr';

    if  numCode4 = 32200001 then
      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
        trans, dealdate,dealamount,currency,exrate,maturity,
        canceldate,cancelrate,NVL(pandlfcy,0) pandlfcy, completedate,
        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
      varTemp2 := varTemp2 || varCondition;
      varTemp2 := varTemp2 || ' from vewForwards';
    elsif numCode4 = 32200002 then
      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
        trans, dealdate,dealamount,currency,exrate,maturity,
        canceldate,cancelrate,NVL(pandlfcy,0) pandlfcy, completedate,
        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
      varTemp2 := varTemp2 || varCondition;
      varTemp2 := varTemp2 || ' from vewFutures';
    elsif numCode4 = 32200003 then
      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
        trans,dealdate,dealamount,currency,
        premium,maturity,settlement,premiumdate,
        bc,bp,sc,sp,canceldate,cancelrate,
        NVL(pandlfcy,0) pandlfcy, completedate,
        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
      varTemp2 := varTemp2 || varCondition;
      varTemp2 := varTemp2 || ' from vewOptions';
    else
      varTemp2 := 'select dealnumber,NVL(dealref,0) dealref,companyname,bankname,
        trans, dealdate,dealamount,currency,exrate,maturity,
        canceldate,cancelrate,NVL(pandlfcy,0) pandlfcy, completedate,
        pkgReturnCursor.fncGetDescription(status,2) Closed, UserID,
        pkgReturnCursor.fncGetDescription(InitCode,2) Initiator,';
      varTemp2 := varTemp2 || varCondition;
      varTemp2 := varTemp2 || ' from vewFutureForward';
    End if;

<<Where_Clause>>
-- In the following lines, the code is concatenatedto varTemp2 to facilitate
-- the next query to call with the same 'where' condition
      if numCode3 = 99999999 then
        SQLQuery := SQLQuery || ' where TransCode between 33300001 and 33399998';
        varTemp3 := ' and TransCode between 33300001 and 33399998';
      else
        SQLQuery := SQLQuery || ' where TransCode = ' || numCode3;
        varTemp3 := ' and TransCode = ' || numCode3;
      end if;
--    if numCode3 = 99999999 then
--      SQLQuery := SQLQuery || ' Where Trans like ' || '''' || '%' || '''';
--    else
--      SQLQuery := SQLQuery || ', trmaster001 where ';
--      SQLQuery := SQLQuery || ' trans = pick_short_description';
--      SQLQuery := SQLQuery || ' and pick_key_value = ' || numCode3;
--    End if;

    if  numCode1 != 99999999 then
      SQLQuery := SQLQuery || ' and CompanyCode = ' || numCode1;
      varTemp3 := varTemp3 || ' and CompanyCode = ' || numCode1;
    end if;

      SQLQuery := SQLQuery || ' and CompanyCode in( select usco_company_code from trsystem022a
                                    where usco_user_id =' || '''' ||  varUserid || '''' || ' )' ;
      varTemp3 := varTemp3 || ' and CompanyCode in( select usco_company_code from trsystem022a
                                    where usco_user_id =' || '''' ||  varUserid || '''' || ' )' ;

    if numCode2 != 99999999 then
      SQLQuery := SQLQuery || ' and BankCode = ' || numCode2;
      varTemp3 := varTemp3 || ' and BankCode = ' || numCode2;
    end if;

    if numCode != 99999999 then
      SQLQuery := SQLQuery || ' and status = ' || numCode;
      varTemp3 := varTemp3 || ' and status = ' || numCode;
    End if;

    if numCode = 12400001 then
      SQLQuery := SQLQuery || ' and CancelDate between ';
      SQLQuery := SQLQuery || '''' || to_char(datTemp2,'dd-mon-yyyy') || '''';
      SQLQuery := SQLQuery || ' and ' || '''' || to_char(datTemp3, 'dd-mon-yyyy')  || '''';

      varTemp3 := varTemp3 || ' and CancelDate between ';
      varTemp3 := varTemp3 || '''' || to_char(datTemp2,'dd-mon-yyyy') || '''';
      varTemp3 := varTemp3 || ' and ' || '''' || to_char(datTemp3, 'dd-mon-yyyy')  || '''';
    End if;

    SQLQuery := SQLQuery || ' and dealdate between ';
    SQLQuery := SQLQuery || '''' || to_char(ExecutionDate,'dd-mon-yyyy') || '''';
    SQLQuery := SQLQuery || ' and ' || '''' || to_char(DelivaryDate, 'dd-mon-yyyy')  || '''';
    SQLQuery := SQLQuery || ' and Maturity between ';
    SQLQuery := SQLQuery || '''' || to_char(datTemp,'dd-mon-yyyy') || '''';
    SQLQuery := SQLQuery || ' and ' || '''' || to_char(datTemp1, 'dd-mon-yyyy')  || '''';

    varTemp3 := varTemp3 || ' and dealdate between ';
    varTemp3 := varTemp3 || '''' || to_char(ExecutionDate,'dd-mon-yyyy') || '''';
    varTemp3 := varTemp3 || ' and ' || '''' || to_char(DelivaryDate, 'dd-mon-yyyy')  || '''';
    varTemp3 := varTemp3 || ' and Maturity between ';
    varTemp3 := varTemp3 || '''' || to_char(datTemp,'dd-mon-yyyy') || '''';
    varTemp3 := varTemp3 || ' and ' || '''' || to_char(datTemp1, 'dd-mon-yyyy')  || '''';

    if numCode4 = 32200003 then
      SQLQuery := SQLQuery || ' and greatest(bc,bp,sc,sp) between ' || numFcy || ' and ' || numFcy1;
      varTemp3 := varTemp3 || ' and greatest(bc,bp,sc,sp) between ' || numFcy || 'and ' || numFcy1;
    else
      SQLQuery := SQLQuery || ' and exrate between ' || numFcy || ' and ' || numFcy1;
      varTemp3 := varTemp3 || ' and exrate between ' || numFcy || ' and ' || numFcy1;
    end if;

    if numCode7 != 99999999 then
      SQLQuery := SQLQuery || ' and HedgeTrade = ' || numCode7;
      varTemp3 := varTemp3 || ' and HedgeTrade = ' || numCode7;
    End if;

    if numCode8 != 99999999 then
      SQLQuery := SQLQuery || ' and InitCode = ' || numCode8;
      varTemp3 := varTemp3 || ' and InitCode = ' || numCode8;
    End if;

--    if numCode8 != 99999999 then
--      SQLQuery := SQLQuery || ' and UserID = ' || '''' ||
--        pkgReturnCursor.fncGetDescription(numCode8,2) || '''';
--      varTemp3 := varTemp3 || ' and UserID = ' || '''' ||
--        pkgReturnCursor.fncGetDescription(numCode8,2) || '''';
--    End if;

    if numCode9 != 99999999 then
      SQLQuery := SQLQuery || ' and Currency = ' || '''' ||
        pkgReturnCursor.fncGetDescription(numCode9,2) || '''';
      varTemp3 := varTemp3 || ' and Currency = ' || '''' ||
        pkgReturnCursor.fncGetDescription(numCode9,2) || '''';
    End if;

    if numCode6 = 62500022 then
      varOperation := 'Calling Trade Profile Program';
      select decode(numCode4, 99999999, ' where ' || substr(varTemp3,5),
                  ' where dealtype = ' || numCode4 || varTemp3)
        into varTemp3
        from dual;
      numCode6 := fncDealProfile1(varTemp3);
      Open GenCursor for
        select deal_profile_serial Sl,deal_profile_legend Param,deal_profile_currency Currency,
          deal_profile_april April,deal_profile_may May,deal_profile_june June,
          deal_profile_july July,deal_profile_august August,deal_profile_september September,
          deal_profile_october October,deal_profile_november November,deal_profile_december December,
          deal_profile_january January,deal_profile_february February,deal_profile_march March,
          deal_profile_total Total
          from trsystem980;
      Goto Process_End;
    End if;

    if numCode6 != 62599999 then
      SQLQuery := varTemp2 || SQLQuery || ' group by ' || varTemp;
      SQLQuery := SQLQuery || ' order by '  || varTemp;
    else
      SQLQuery := varTemp2 || SQLQuery || ' order by dealdate, bankname';
      varTemp3 := varTemp3 || ' order by dealdate, bankname';
    end if;

delete from temp;
insert into temp(tt, tt1) values('Query', sqlquery);

    open GenCursor
      for SQLQuery;


    SQLQuery := ' and ' || Substr(SQLQuery, instr(SQLQuery, 'where') + 6);

--varUserID to be added to the key
--delete from temp;
insert into temp(tt, tt1) values('VewDeals', varTemp3);

    Goto Process_End;
  End if;

  if numInfoType = GConst.REFAANDLPOSITION then
    varOperation := 'Getting Asset and Liability Position';

    numCode  := GConst.fncxmlextract(xmldoc, 'ActionCode', numCode);
    numCode1 := GConst.fncxmlextract(xmldoc, 'CompanyName', numCode1);


    if numCode != GConst.ADDLOAD then
      Open GenCursor for
      select unln_aandl_code AndLCode, pick_short_description AndLDetail,
        unln_forward_months Months,
        unln_due_date DueDate, unln_spot_rate SpotRate,
        unln_forward_rate Premium, unln_base_amount Balance
        from trtran002A, trmaster001
        where unln_company_code = numCode1
        and unln_effective_date = fncToday()
        and unln_aandl_code = pick_key_value
        and unln_line_item = 'O';
      Goto Process_End;
    End if;

    select count(*)
      into numCode
      from trtran002A
      where unln_company_code = numCode1
      and unln_effective_date = fncToday();

    if numCode > 0 then
      varError := 'Records Already Exist, Cannot Add';
      raise error_occurred;
    End if;

    Open GenCursor for
    select pick_key_value AndLCode, pick_short_description AndLDetail,
      decode(pick_key_value, 33700001, 3, 33700002, 4, 33700003, 0,
      33700050, 3, 33700051, 3, 33700052, 5, 33700053, 0) Months,
      decode(pick_key_value,
      33700001, Last_day(add_months(fncToday(),3)),
      33700050, Last_day(add_months(fncToday(),3)),
      33700051, Last_day(add_months(fncToday(),3)),
      33700002, Last_day(add_months(fncToday(),4)),
      33700052, Last_day(add_months(fncToday(),5)),
      fncSpotDate(fncToday(),2,30299999)) DueDate,
      case  when pick_key_value between 33700001 and 33700010 then drat_spot_bid
      else drat_spot_ask  end SpotRate,
      decode(pick_key_value,
      33700001,  drat_month3_bid - drat_spot_bid,
      33700002, drat_month4_bid - drat_spot_bid,
      33700003, 0.00,
      33700050, drat_month3_ask - drat_spot_ask,
      33700051, drat_month3_ask - drat_spot_ask,
      33700052, drat_month5_ask - drat_spot_ask,
      33700053, 0.00) Premium,
      NVL((select unln_base_amount
        from trtran002A
        where unln_company_code = numCode1
        and pick_key_value = unln_aandl_code
        and unln_line_item = 'O'
        and unln_effective_date =
        (select max(unln_effective_date)
          from trtran002A
          where unln_effective_date < fncToday())),0) Balance
      from trmaster001, mvewLatestRates
      where pick_key_group = 337
      and pick_key_number > 0
      and drat_currency_code = 30400004
      and drat_for_currency = 30400003;

    Goto Process_End;
  End if;

  if numInfoType = GConst.REFAANDLTRANS then
    varOperation := 'Extracting Previous Asset  Transactions';

    numCode  := GConst.fncxmlextract(xmldoc, 'ActionCode', numCode);
    numCode1 := GConst.fncxmlextract(xmldoc, 'CompanyName', numCode1);

    if numCode != GConst.AddLoad then
      Open GenCursor for
      select unln_effective_date TransDate,
      pkgReturnCursor.fncGetDescription(unln_aandl_code,2) TransType,
      pkgReturnCursor.fncGetDescription(unln_currency_code,2) Currency,
      unln_forward_months Months, unln_due_date DueDate,
      (select unln_base_amount
        from trtran002A b
        where b.unln_company_code =  a.unln_company_code
        and b.unln_effective_date = a.unln_effective_date
        and b.unln_aandl_code = a.unln_aandl_code
        and b.unln_line_item = 'O') Outstanding,
      unln_base_amount TodayAddless,
      unln_spot_rate SpotRate, unln_forward_rate Premium,
      unln_exchange_rate ExchangeRate,  unln_aandl_code AandLCode
      from trtran002A a
      where unln_company_code = numCode1
      and unln_effective_date = fncToday()
      and unln_line_item = 'T';

      Goto Process_End;
    End if;

    Open GenCursor for
    select unln_effective_date TransDate,
    pkgReturnCursor.fncGetDescription(unln_aandl_code,2) TransType,
    pkgReturnCursor.fncGetDescription(unln_currency_code,2) Currency,
    0 Months,null DueDate,
    unln_base_amount Outstanding, 0 TodayAddless,
    0 SpotRate, 0 Premium,
    0 ExchangeRate,  unln_aandl_code AandLCode
    from trtran002A
    where unln_effective_date =
    (select max(unln_effective_date)
      from trtran002A
      where unln_effective_date < datWorkDate);

    Goto Process_End;
  End if;

--  if numInfoType = GConst.REFAANDLTRADE then
--
--    varOperation := 'Extracting Asset  Trans  for Linking';
--    numCode1 := GConst.fncxmlextract(xmldoc, 'BuySell', numCode1);
--    numCode2 := GConst.fncxmlextract(xmldoc, 'BaseCurrency', numCode1);
--
--    Open GenCursor for
--    select pkgReturnCursor.fncGetDescription(unln_aandl_code, 2) AstLia,
--      unln_Trade_reference TradeReference,
--      unln_effective_date EffectiveDate, unln_forward_months FwdMonths,
--      pkgReturnCursor.fncGetDescription(unln_currency_code, 2) Currency,
--      unln_base_amount BillAmount,
--      NVL((select sum(udel_trade_amount)
--        from trtran002B
--        where unln_trade_reference = udel_trade_reference),0) CoveredAmount,
--      0 HedgeAmount, unln_spot_rate SpotRate,
--      unln_forward_rate FrwRate, unln_exchange_rate ExchangeRate,
--      unln_due_date DueDate, unln_aandl_code AandLCode,
--      (select NVL(max(udel_link_batch),0) + 1
--         from trtran002B) LinkBatchNo
--      from trtran002A
--      where unln_line_item = 'T'
--      and unln_base_amount > 0
--      and unln_aandl_code = decode(numCode1, 33799999, unln_aandl_code, numCode1)
--      and unln_currency_code = decode(numCode2, 30499999, unln_currency_code, numCode2);
----      and not exists in trtran002B;
--
--    Goto Process_End;
--  End if;
 if numInfoType = GConst.REFAANDLTRADE then
    
    varOperation := 'Extracting Asset  Trans  for Linking';
    numCode1 := GConst.fncxmlextract(xmldoc, 'BuySell', numCode1);  
    numCode2 := GConst.fncxmlextract(xmldoc, 'BaseCurrency', numCode1);  
    
    Open GenCursor for
    select pkgReturnCursor.fncGetDescription(unln_aandl_code, 2) AstLia,
      unln_Trade_reference TradeReference, 
      unln_effective_date EffectiveDate, unln_forward_months FwdMonths,
      pkgReturnCursor.fncGetDescription(unln_currency_code, 2) Currency,
      unln_base_amount BillAmount, 
      NVL((select sum(udel_trade_amount)
        from trtran002B
        where unln_trade_reference = udel_trade_reference),0) CoveredAmount,
      0 HedgeAmount, unln_spot_rate SpotRate,
      unln_forward_rate FrwRate, unln_exchange_rate ExchangeRate,
      unln_due_date DueDate, unln_aandl_code AandLCode,
      (select NVL(max(udel_link_batch),0) + 1
         from trtran002B) LinkBatchNo
      from trtran002A
      where unln_line_item = 'T'
      and unln_base_amount > 0
      and unln_aandl_code = decode(numCode1, 33799999, unln_aandl_code, numCode1)
      and unln_currency_code = decode(numCode2, 30499999, unln_currency_code, numCode2);
--      and not exists in trtran002B;
    
    Goto Process_End;
  End if;
  
--  if numInfoType = GConst.REFAANDLDEAL then
--    varOperation := 'Extracting Deals for Asset Liability Linking';
--    numCode1 := GConst.fncxmlextract(xmldoc, 'BuySell', numCode1);
--    numCode2 := GConst.fncxmlextract(xmldoc, 'BaseCurrency', numCode2);
--    numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);
--
--
--    Open GenCursor for
--    select DealNumber, decode(BuySell, 25300001, 'BUY','SALE') BuySale, BankName,
--      Currency, exrate, dealAmount BaseAmount,
--      NVL((select sum(udel_deal_amount)
--        from trtran002B
--        where udel_deal_number = DealNumber),0) CoveredAmount,
--      0 HedgeAmount, Maturity
--      from vewForwards
--      where status = 12400002
--      and buysell = decode(numCode1,25399999, buysell, numCode1)
--      and currency like 'USD%';
--    Goto Process_End;
--  End if;
 if numInfoType = GConst.REFAANDLDEAL then
    varOperation := 'Extracting Deals for Asset Liability Linking';
    numCode1 := GConst.fncxmlextract(xmldoc, 'BuySell', numCode1);  
    numCode2 := GConst.fncxmlextract(xmldoc, 'BaseCurrency', numCode2);  
    numCode3 := GConst.fncxmlextract(xmldoc, 'HedgingWith', numCode3);  

    
    Open GenCursor for
    select DealNumber, decode(BuySell, 25300001, 'BUY','SALE') BuySale, BankName,
      Currency, exrate, dealAmount BaseAmount, 
      NVL((select sum(udel_deal_amount)
        from trtran002B
        where udel_deal_number = DealNumber),0) CoveredAmount,
      0 HedgeAmount, Maturity
      from vewForwards
      where status = 12400002
      and buysell = decode(numCode1,25399999, buysell, numCode1)
      and currency like 'USD%';
    Goto Process_End;
  End if;
  if numInfotype = GConst.REFCUSTOMERDETAIL  then
      varOperation := 'Extracting Customer / Vendor Details';
      numCode1 := GConst.fncxmlextract(xmldoc, 'BeneficiaryCode', numCode1);

      if substr(to_char(numCode1),1,3) = 305 then
        Open GenCursor for
        select cust_long_description,cust_address_1,cust_address_2,
          cust_address_3,cust_address_4,cust_phone_numbers,cust_fax_numbers
          from trmaster305
          where cust_pick_code = numCode1;
      else
        Open GenCursor for
        select cust_long_description,cust_address_1,cust_address_2,
          cust_address_3,cust_address_4,cust_phone_numbers,cust_fax_numbers
          from trmaster334
          where cust_pick_code = numCode1;
      end if;


    Goto Process_End;
  End If;
------ADDED BY SHRIHARI ON 150514------------------------
if numInfoType = GConst.CONTRACTBUCKETTING then
    varOperation := 'Getting Contract Bucketting Details';
   --varReference := GConst.fncxmlextract(xmldoc, 'TradeReference',varTemp);
    open GenCursor for
    Select
                Pkgreturncursor.Fncgetdescription(Conr_Product_Category,1) As "Product Category",
                Pkgreturncursor.Fncgetdescription(Conr_Sub_Category,1) As "Sub Category",
                CONR_USER_REFERENCE  as "ContractNo",
                pkgreturncursor.fncgetdescription(conr_BUYER_SELLER,2) as "Vendor",
                Pkgreturncursor.Fncgetdescription(conr_local_bank,2)as "BankName",
                To_Char(Conr_Total_Quantity,'999,999.99') As "Quantity",
                conr_PRODUCT_RATE as "Price/Ton",
                Pkgreturncursor.Fncgetdescription(Conr_Base_Currency,2) As "Currency",
                to_char(CONR_BASE_AMOUNT,'999,999,999.99') as "Amount",
                To_Char(Conr_Base_Amount- (nvl((Select
                           sum(brel_reversal_fcy)
                          From Trtran002 a ,Trtran003 b
                          Where a.Trad_Trade_Reference=b.brel_Trade_Reference
                          And a.Trad_Contract_No=CONR_USER_REFERENCE
                         -- and to_char(a.trad_maturity_date,'yyyymm')= to_char(b.brel_entry_date,'yyyymm')
                          And a.Trad_Record_Status In (10200005,10200006)
                          And b.Brel_Record_Status Not In (10200005,10200006)),0)),'999,999,999.99') as "Outstanding",
                To_Char(Conr_Reference_Date,'dd-mm-yy') As "ContractDate",
                Pkgreturncursor.Fncgetdescription(Conr_Payment_Terms,2) As "Payment Terms",
               to_char((Conr_Reference_Date+2),'dd-mm-yy') as "Validity",
                to_char(conr_end_date,'dd-mm-yy') as "ContractEndDate",
                Conr_Trade_Reference As "Reference Number",
                conr_local_bank as "BankCode"
       From Trtran002c;
--        Select
--                Pkgreturncursor.Fncgetdescription(Conr_Product_Category,1) As "Product Category",
--                Pkgreturncursor.Fncgetdescription(Conr_Sub_Category,1) As "Sub Category",
--                CONR_USER_REFERENCE  as "ContractNo",
--                pkgreturncursor.fncgetdescription(conr_BUYER_SELLER,2) as "Vendor",
--                Pkgreturncursor.Fncgetdescription(conr_local_bank,2)as "BankName",
--                To_Char(Conr_Total_Quantity,'999,999') As "Quantity",
--                conr_PRODUCT_RATE as "Price/Ton",
--                Pkgreturncursor.Fncgetdescription(Conr_Base_Currency,2) As "Currency",
--                to_char(CONR_BASE_AMOUNT,'999,999,999') as "Amount",
--                To_Char(Conr_Base_Amount- nvl((Select
--                   sum(brel_reversal_fcy)
--                    From Trtran002,Trtran003
--                    Where Trad_Trade_Reference=brel_Trade_Reference
--                    And Conr_user_Reference=Trad_Contract_No
--                    And Trad_Record_Status Not In (10200005,10200006)
--                    And Brel_Record_Status Not In (10200005,10200006)
--                    and Trad_Reverse_Reference= Conr_Trade_Reference),0),'999,999,999') as "Outstanding",
--                To_Char(Conr_Reference_Date,'dd-mm-yy') As "ContractDate",
--                Pkgreturncursor.Fncgetdescription(Conr_Payment_Terms,2) As "Payment Terms",
--               to_char((Conr_Reference_Date+2),'dd-mm-yy') as "Validity",
--                to_char(conr_end_date,'dd-mm-yy') as "ContractEndDate",
--                Conr_Trade_Reference As "Reference Number",
--                conr_local_bank as "BankCode"
--       From Trtran002c;
    Goto Process_End;
  End if;

---------------------SHRIHARIENDSHERE---------------------
--  if numInfoType = GConst.refExistingContract then
--    varOperation := 'Existing Contract Bucketting Details';
--    varReference := GConst.fncxmlextract(xmldoc, 'KeyValues/TradeReference',varTemp);
--    open GenCursor for
--      select trad_trade_reference TradeReference, to_date( '01-' || to_char(trad_maturity_from,'MM-yyyy'),'dd-MM-yyyy') MaturityDate,
--      trad_trade_fcy Amount ,nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.trad_maturity_from,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0)SettledAmount,
--                                  -- and trad_record_status not in (10200005,10200006) ),0)SettledAmount,
--      --trad_trade_fcy-pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) SettledAmount,
--      pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) OutstandingAmount,
--      trad_product_quantity Quantity,
--      nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       And Hedg_Record_Status Not In(10200005,10200006)),0) As Hedgedfcy, Conr_End_Date,
--       Pkgreturncursor.Fncgetdescription(Conr_Local_Bank,2) As Bank, Conr_Local_Bank Bankcode
--      from trtran002 a,  trtran002c b
--     where
--      trad_contract_no= conr_user_reference
--      and trad_reverse_reference=varReference
--     and trad_record_status not in (10200005,10200006);
--
--    Goto Process_End;
--  End if;


---new update by shrihari as on 07/04/2014
-- if numInfoType = GConst.refExistingContract then
--    varOperation := 'Existing Contract Bucketting Details';
--    varReference := GConst.fncxmlextract(xmldoc, 'KeyValues/TradeReference',varTemp);
--    open GenCursor for
--      select trad_trade_reference TradeReference, to_date( '01-' || to_char(trad_maturity_date,'MM-yyyy'),'dd-MM-yyyy') MaturityDate,
--      trad_trade_fcy Amount ,nvl( ( select sum(brel_reversal_fcy)
--                                  from trtran003 ,trtran002 sub
--                                 where brel_trade_reference= sub.trad_trade_reference
--                                 and  sub.trad_contract_no = a.trad_contract_no
--                                 and brel_reversal_type=25800052
--                                   and to_char(a.trad_maturity_from,'mm-YYYY') = to_char(brel_entry_date,'MM-YYYY')
--                                   and brel_record_status not in (10200005,10200006)),0)SettledAmount,
--                                  -- and trad_record_status not in (10200005,10200006) ),0)SettledAmount,
--      --trad_trade_fcy-pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) SettledAmount,
--      pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) OutstandingAmount,
--      trad_product_quantity Quantity,
--      nvl((select sum(HEDG_HEDGED_FCY) from trtran004
--      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
--       And Hedg_Record_Status Not In(10200005,10200006)),0) As Hedgedfcy, Conr_End_Date,
--       Pkgreturncursor.Fncgetdescription(Conr_Local_Bank,2) As Bank, Conr_Local_Bank Bankcode
--      from   trtran002c b , trtran002 a
--
--     where trad_contract_no= conr_user_reference
--     and trad_reverse_reference=varReference
--     and trad_record_status not in (10200005,10200006);
--
--    Goto Process_End;
--  End if;
--

--new updates by Shrihari as on 15052014
if numInfoType = GConst.refExistingContract then
    varOperation := 'Existing Contract Bucketting Details';
    varReference := GConst.fncxmlextract(xmldoc, 'KeyValues/TradeReference',varTemp);
    open GenCursor for

     select TradeReference,MaturityDate,Amount,SettledAmount,(Amount-SettledAmount) OutstandingAmount,
            Quantity,Hedgedfcy,Conr_End_Date
            Bank,Bankcode
       from
      (select trad_trade_reference TradeReference, to_date( '01-' || to_char(trad_maturity_date,'MM-yyyy'),'dd-MM-yyyy') MaturityDate,
     trad_trade_fcy Amount ,
      nvl((Select
         sum(brel_reversal_fcy)
        From trtran002 a, Trtran003 c
        Where a.Trad_Trade_Reference=c.brel_Trade_Reference
        And a.Trad_Contract_No=m.Trad_Contract_No
        and c.brel_entry_date <=datworkdate
        and to_char(c.brel_entry_date,'yyyymm')= to_char(m.trad_maturity_date,'yyyymm')

        And a.Trad_Record_Status In (10200005,10200006)
        And c.Brel_Record_Status Not In (10200005,10200006)),0)
        SettledAmount,
    --  pkgforexprocess.fncGetOutstanding( trad_trade_reference,1,6,1,sysdate,null) OutstandingAmount,
      trad_product_quantity Quantity,
      nvl((select sum(HEDG_HEDGED_FCY) from trtran004
      where heDG_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
       And Hedg_Record_Status Not In(10200005,10200006)),0) As Hedgedfcy, Conr_End_Date,
       Pkgreturncursor.Fncgetdescription(Conr_Local_Bank,2) As Bank, Conr_Local_Bank Bankcode
      from   trtran002c b , trtran002 m

     where trad_contract_no= conr_user_reference
     and trad_reverse_reference=varReference
     and trad_record_status not in (10200005,10200006));

    Goto Process_End;
  End if;


  ---update ends here

---  modified by abhijeet on 13-JUN-14  -----
  if numInfoType = GConst.REFSUBREPORTLIST then
    varOperation := 'Existing Subreport details';
    vartemp := GConst.fncxmlextract(xmldoc, 'ReportID',varTemp);

    insert into temp values (vartemp,vartemp);
    commit;

    open gencursor for
     select  rech_subreport_id SubReportID,rech_subreport_name SubreportName
       from trsystem003A
      where rech_report_id =vartemp
        and RECH_RECORD_STATUS not in(10200006,10200005)
        order by rech_subreport_id;

    Goto Process_End;
  End if;

 if numInfotype = GConst.REFCONTRACTDETAILS then
varOperation := 'Extracting Contract Details';
varTemp := GConst.fncXMLExtract(xmldoc, '//ROW/BoRemark', varTemp,GConst.TYPENODEPATH);

Open GenCursor for
select pkgReturnCursor.fncGetDescription(b.trad_product_category,2) "Category",
pkgReturnCursor.fncGetDescription(b.trad_subproduct_code,2) "SubCategory",
b.trad_contract_no "ContractNumber",
pkgReturnCursor.fncGetDescription(b.trad_local_bank,2) "Bank",
pkgReturnCursor.fncGetDescription(b.trad_trade_currency,2) "Cry",
to_char(a.trad_maturity_date, 'Mon-YY') "ScheduleMaturity",
NVL(b.trad_trade_fcy,0) "ContractAmount",NVL(c.trad_trade_fcy,0) "POs",
NVL(a.trad_trade_fcy,0) "CashFlows",
NVL((select sum(brel_reversal_fcy)
from trtran003
where brel_trade_reference = c.trad_trade_reference),0) "Settled",
-- For settled rate read trtran006 joining 4 with schedule number
-- for hedged rate read trtran001 joining 4 with schedule number
-- For Avaliability to hedge read trtran001 joining 4 with schedule number
0 "SettledRate",NVL(hedg_hedged_fcy,0) "HedgedAmount",
0 "HedgedRate", 0 "AvailableToHedge", a.trad_trade_rate "BenchMarkRate",
a.trad_trade_reference "ScheduleNumber"
from trtran002 a -- Delivery Scheduler
join trtran002 b -- Main Contract
on a.trad_contract_no = b.trad_contract_no
left outer join trtran004
on a.trad_trade_reference = hedg_trade_reference
left outer join trtran002 c -- Purchase Order
on a.trad_contract_no = c.trad_contract_no
and to_char(a.trad_maturity_date,'yyyymm') = to_char(c.trad_maturity_date,'yyyymm')
and c.trad_import_export = 25900077 and c.trad_record_status = 10200005
where b.trad_import_export = 25900086
and a.trad_import_export = 25900077
and a.trad_record_status not in (10200005,10200006)
and a.trad_contract_no = varTemp
order by a.trad_contract_no, a.trad_maturity_date;

-- select b.trad_contract_no "ContractNumber", b.trad_maturity_date "ContractMaturity", NVL(b.trad_trade_fcy,0) "ContractAmount",
-- a.trad_trade_reference "ScheduleNumber", a.trad_maturity_date "ScheduleMaturity", NVL(a.trad_trade_fcy,0) "ScheduleAmount",
-- c.trad_trade_reference "PurchaseOrder", NVL(c.trad_trade_fcy,0) "POValue", c.trad_maturity_date "POMaturity",
-- hedg_deal_number "DealNumber", NVL(hedg_hedged_fcy,0) "HedgedAmount",
-- NVL((select sum(brel_reversal_fcy)
-- from trtran003
-- where brel_trade_reference = c.trad_trade_reference),0) "SettledAmount"
-- from trtran002 a -- Delivery Scheduler
-- join trtran002 b -- Main Contract
-- on a.trad_contract_no = b.trad_contract_no
-- left outer join trtran004
-- on a.trad_trade_reference = hedg_trade_reference
-- left outer join trtran002 c -- Purchase Order
-- on a.trad_contract_no = c.trad_contract_no
-- and to_char(a.trad_maturity_date,'yyyymm') = to_char(c.trad_maturity_date,'yyyymm')
-- and c.trad_import_export = 25900077 and c.trad_record_status = 10200005
-- where a.trad_contract_no = varTemp
-- and b.trad_import_export = 25900086
-- and a.trad_import_export = 25900077 and a.trad_record_status not in (10200005,10200006)
-- order by a.trad_contract_no, a.trad_maturity_date;

Goto Process_End;
End if;


---manjunath sir added on 12052014

  if numInfoType = GConst.REFVENDORCUSTOMER then
    varOperation := 'Extracting Vendor / Customer Information';

    if varEntity = 'FOREIGNREMITTANCE' then
      numCode := GConst.fncxmlextract(xmldoc, 'ProductSubcategory', numCode);
    else
      numCode := GConst.fncxmlextract(xmldoc, 'SubProductcode', numCode);
    end if;
   
   insert into temp values(numcode,numcode);commit;
    Open Gencursor for
      with tblVendorCustomer as
      (select pick_sap_code "SapCode",cust_customer_type "CustType",
      pkgReturnCursor.fncGetDescription(numCode, 2) "Category",
      cust_long_description "CustomerName", cust_address_1 "Address1", cust_address_2 "Address2",
      cust_address_3 "Address3", cust_address_4 "Address4", 'ImportVendor' "ImpexType",'Vendor' "BuyerSeller",
      Gconst.IMPORTCODE "ImpexCode", pick_key_value "KeyValue", 0 RecordStatus
      from trmaster305, trmaster001
      where cust_pick_code = pick_key_value
      and cust_customer_type=22000001
--      and pick_key_value in
--      (select erel_entity_relation
--        from trsystem008
--        where erel_main_entity = numCode)
        union
        select pick_sap_code "SapCode",cust_customer_type "CustType",
      pkgReturnCursor.fncGetDescription(numCode, 2) "Category",
      cust_long_description "CustomerName", cust_address_1 "Address1", cust_address_2 "Address2",
      cust_address_3 "Address3", cust_address_4 "Address4", 'ExportCustomer' "ImpexType",'Customer' "BuyerSeller",
      Gconst.IMPORTCODE "ImpexCode", pick_key_value "KeyValue", 0 RecordStatus
      from trmaster305, trmaster001
      where cust_pick_code = pick_key_value
      and cust_customer_type=22000002
--      and pick_key_value in
--      (select erel_entity_relation
--        from trsystem008
--        where erel_main_entity = numCode)
        )
--      union
--      select pick_sap_code "SapCode",
--      pkgReturnCursor.fncGetDescription(numCode, 2) "Category",
--      cust_long_description "CustomerName", cust_address_1 "Address1", cust_address_2 "Address2",
--      cust_address_3 "Address3", cust_address_4 "Address4", 'ExportCustomer' "ImpexType",
--      Gconst.EXPORTCODE "ImpexCode", pick_key_value "KeyValue", 0 RecordStatus
--      from trmaster334, trmaster001
--      where cust_pick_code = pick_key_value
--      and pick_key_value in
--      (select erel_entity_relation
--        from trsystem008
--        where erel_main_entity = numCode))
      select *
      from tblVendorCustomer
--      where "ImpexCode" = numCode
      order by 8 desc,3 asc;

    Goto Process_End;
  End if;

  if numInfoType = GConst.REFREMITTANCEREFERENCE then

    varoperation := 'extracting trade details';
    numcode := gconst.fncXMLExtract(xmldoc,'CompanyCode', numcode);
    numCode1 := GConst.fncXMLExtract(xmldoc,'ProductCategory', numCode1);
    numCode2 := GConst.fncXMLExtract(xmldoc,'ProductSubcategory', numCode2);

    varOperation := 'Extracting Remittance Adjustments, if any';
    Open GenCursor for
      select pkgReturnCursor.fncGetDescription(trad_product_category,2) "Category",
        pkgReturnCursor.fncGetDescription(trad_subproduct_code,2) "SubCategory",
        nvl(trad_contract_no,trad_user_reference) as "BillReference",
        trad_trade_reference "TradeReference",
        pkgreturncursor.fncgetdescription(trad_local_bank, 2) as "Bank",
        trad_user_reference "BankReference", trad_maturity_date "DueDate",
        pkgreturncursor.fncgetdescription(trad_trade_currency, 2) as "CRY",
        trad_trade_fcy "BillAmount",
        nvl((select sum(brel_reversal_fcy)
          from trtran003
          where brel_company_code = trad_company_code
          and brel_trade_reference = trad_trade_reference
          and brel_record_status in (10200001,10200003,10200004)),0) "Realised",
        pkgreturncursor.fncgetdescription(trad_buyer_seller, 2) as "Vendor",
        trad_trade_rate "BenchmarkRate", pkgreturnreport.fncconvrs(trad_trade_inr) "AmountInINR",
        trad_local_bank as LocalBankCode,0 RecordStatus,
        pkgForexProcess.fncGetRate(trad_trade_currency,30400003,datWorkDate,25300002,0,NULL) "TodaySpot"
        from TradeRegister
      where trad_company_code = numCode
--        and trad_import_export between 25900051 and 25900100
        and trad_Company_Code in
        (select usco_company_code from trsystem022a
          where usco_user_id =varUserid)
        and trad_record_status between 10200001 and 10200005
        and trad_reverse_reference is null
        and trad_subproduct_code = numCode2
        and trad_process_complete = GConst.OPTIONNO;

    Goto Process_End;
  End if;


 if numinfotype =gconst.REFAUDITTRAIL then
 varOperation := 'Extracting Information AuditTrail';

    vartemp1   := gconst.fncxmlextract(xmldoc,'Audittrailtype',vartemp1);
    varTemp3   := gconst.fncxmlextract(xmldoc,'QueryStr',varTemp3);
 -- numtemp1 :=gconst.fncxmlextract(xmldoc,   'Audittrailtype',   numtemp1);
  dattemp   := gconst.fncxmlextract(xmldoc,'Fromdate',dattemp);
  dattemp1  :=gconst.fncxmlextract(xmldoc,'Todate',dattemp1);
  numcode  := gconst.fncxmlextract(xmldoc,'Compcode',numcode);
  --numcode1 :=gconst.fncxmlextract(xmldoc,'Locationcode',numcode1);


    varOperation := 'Extracting Audittrail actual table data from Trsystem015';

      select AUDT_AUDIT_ID into vartemp
         from trsystem015, trsystem002
         where MENU_DESCRIPTION= vartemp1
         and MENU_PROGRAM_UNIT=AUDT_TABLE_ID;

  --  Open GenCursor for

     varquery := 'select IMAGETYPE,ENTITY,DATESTAMP,WORKDATE,'||varTemp3||' from '||vartemp||' where
                  to_date(to_char(TO_TIMESTAMP(DATESTAMP,''DD-MON-YYYY HH24:MI:SS:FF3''),''DD-MON-YYYY''),''DD-MON-YYYY'')
                  between '||''''||dattemp||''''||' and '||''''||dattemp1||''''||'
                  order by TO_TIMESTAMP(DATESTAMP,''DD-MON-YYYY HH24:MI:SS:FF3'')asc,IMAGETYPE desc';
    --    select varTemp3 from TRSYSTEM164 ;
          delete from temp;
          INSERT INTO TEMP values(varquery,varquery) ;
          commit;

  Open GenCursor for  varquery;
   Goto Process_End;
 end if ;

 ---abhijit ends



 if numinfotype =gconst.REFAUDITTRAILDETAIL then
 varOperation := 'Extracting table Information for AuditTrail';

  vartemp1   := gconst.fncxmlextract(xmldoc,'Audittrailtype',vartemp);
 -- numtemp1  := gconst.fncxmlextract(xmldoc, 'Audittrailtype',numtemp1);
  dattemp   := gconst.fncxmlextract(xmldoc,'Fromdate',dattemp);
  dattemp1  := gconst.fncxmlextract(xmldoc,'Todate',dattemp1);
  numcode   := gconst.fncxmlextract(xmldoc,'Compcode',numcode);

-- insert into temp values(vartemp1,vartemp1);
  varOperation := 'Extracting audittrail actual table data from trtran015';
  select AUDT_TABLE_ID into vartemp
         from trsystem015, trsystem002
         where MENU_DESCRIPTION= vartemp1
         and MENU_PROGRAM_UNIT=AUDT_TABLE_ID;

  varquery := 'select fldp_table_synonym,
                fldp_column_name,FLDP_COLUMN_DISPLAYNAME,fldp_data_type,fldp_show_YN,
                fldp_description_type,FLDP_COLUMN_ID,FLDP_PICK_GROUP,FLDP_TEXT_FORMAT,fldp_xml_field
                from trsystem999 where FLDP_SHOW_YN=''Y'' and fldp_table_synonym= '||''''||vartemp||''''||' order by FLDP_COLUMN_ID';

delete from temp;
INSERT INTO TEMP values(varquery,'chandra');
commit;

  Open GenCursor for  varquery;
  Goto Process_End;
 end if ;


 if numinfotype =gconst.refAuditTrailType then
 varOperation := 'Extracting Information AuditTrailtype';



  Open GenCursor for
   select MENU_DESCRIPTION as "Display",
         AUDT_AUDIT_ID as "Value"
         from trsystem015, trsystem002
         where  MENU_PROGRAM_UNIT=AUDT_TABLE_ID
         and menu_record_status not in (10200005,10200006);


   Goto Process_End;
 end if ;


  if numInfoType = Gconst. REFVARCURSOR1 then
--    Open GenCursor for
--    select to_date(efdate,'mm/dd/yyyy') EffectiveDate,Round(usd_inr,5) "USD-INR", round(eur_usd,5) "EUR-USD",
--      round(gbp_usd,5) "GBP-USD", round(aud_usd,5) "AUD-USD", Round(jpy_cny,5) "JPY-CNY",
--      round(eur_ron,5) "EUR-RON", round(usd_mxn,5) "USD-MXN", round(usd_php,5) "USD-PHP",
--      round(eur_huf,5) "EUR-HUF", round(eur_pln,5) "EUR-PLN", round(usd_zar,5) "USD-ZAR",
--      round(gtq_usd,5) "GTQ-USD", round(eur_mad,5) "EUR-MAD", round(brl_usd,5) "BRL-USD"
--      from covarn
--      order by to_date(efdate,'mm/dd/yyyy');
  
    Goto Process_End;
  End if;
 IF NuminfoType = GCONST.RefVarCovarPositionPopulate THEN
  
   
   
    VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'CompanyCode',VARTEMP);
    VARTEMP1 := GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',VARTEMP1);
    VARTEMP2 :=GCONST.FNCXMLEXTRACT(XMLDOC,'ProductCode',VARTEMP2);
    VARTEMP3 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP3);
    VARTEMP4 :=GCONST.FNCXMLEXTRACT(XMLDOC,'HedgeInclude',VARTEMP4);
    
    select decode(VARTEMP4,'34400001','Y','34400002','N','34400003','B')
      into VARTEMP4
      from dual;
-- 34300001   Yes	Include Hedge Yes
-- 34300002	No	Include Hedge Yes
-- 34300003	Both Compare	Both Compare
--delete from temp;
-- insert into temp values (VARTEMP,VARTEMP1);
-- insert into temp values (VARTEMP2,VARTEMP3);
--  insert into temp values (VARTEMP4,VARTEMP4);
--  commit;

    PKGVarCovar.COVAR_Position_populate (VARTEMP,VARTEMP1,VARTEMP2,VARTEMP3,VARTEMP4);
    
  open gencursor for
    select pkgreturncursor.fncgetdescription(vpos_company_code,2) "Company",
       pkgreturncursor.fncgetdescription(vpos_Location_code,2) "Location",
       pkgreturncursor.fncgetdescription(vpos_product_code,2) "Product",
       pkgreturncursor.fncgetdescription(vpos_subproduct_code,2) "Subproduct",
       pkgreturncursor.fncgetdescription(vpos_currency_code,2) "BaseCurrency",
       pkgreturncursor.fncgetdescription(vpos_for_currency,2) "ForCurrency",
       vpos_transaction_amount "TransactionAmount"
    from trcovar005;

     Goto Process_End;
    --    VARTEMP4 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP4);
    --DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
     
 end if;
  IF NuminfoType = GCONST.RefVarCovarResults THEN
  
   
   
    VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'CompanyCode',VARTEMP);
    VARTEMP1 := GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',VARTEMP1);
    VARTEMP2 :=GCONST.FNCXMLEXTRACT(XMLDOC,'ProductCode',VARTEMP2);
    VARTEMP3 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP3);
    numfcy :=  GCONST.FNCXMLEXTRACT(XMLDOC,'AdjustEarnings',numfcy);
    --VARTEMP4 :=GCONST.FNCXMLEXTRACT(XMLDOC,'HedgeInclude',VARTEMP4);
    
    --Covar_PopulateRates ('01-Apr-2009','31-Mar-2010'); -- (VARTEMP,VARTEMP1,VARTEMP2,VARTEMP3,VARTEMP4);
    PKGVarCovar.Covar_Populate_var_covar('01-Apr-2009','31-Mar-2010',numfcy);

     open gencursor for
    select 
--    pkgreturncursor.fncgetdescription(varc_company_code,2) Company,
--           pkgreturncursor.fncgetdescription(varc_Location_code,2) Location,
--           pkgreturncursor.fncgetdescription(varc_product_code,2) Product,
--           pkgreturncursor.fncgetdescription(varc_subproduct_code,2) Subproduct,
           
           Varc_var_95 "VaR95",Varc_var_99 "VaR99", Varc_sensitivity_95 "Sensitivity_95",
           Varc_sensitivity_99 "Sensitivity_99",
           Varc_portfolio_variance "PortfolioVariance",varc_Portfolio_volatility "PortfolioVolatility",
           Varc_adjust_earnings "AdjustedEarnings"
      from trcovar004;
      

  Goto Process_End;
    --    VARTEMP4 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP4);
    --DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
     
 end if;
  IF NuminfoType = GCONST.RefVarCovarResults1 THEN
  
  open gencursor for
  select pkgreturncursor.fncgetdescription(copo_company_code,2) "Company",
       pkgreturncursor.fncgetdescription(copo_Location_code,2) "Location",
       pkgreturncursor.fncgetdescription(copo_product_code,2) "Product",
       pkgreturncursor.fncgetdescription(copo_subproduct_code,2) "Subproduct",
       pkgreturncursor.fncgetdescription(copo_currency_code,2) "BaseCurrency",
       pkgreturncursor.fncgetdescription(copo_forcurrency_code,2) "ForCurrency",
       COPO_CAL_Weight "ExposureWeight",COPO_Var_Delta "VaRDelta",
       Copo_Component_var95 "Component_VaR95",Copo_Component_var99 "Component_VaR99"
 from trcovar003;
    
    
         Goto Process_End;
        --    VARTEMP4 := GCONST.FNCXMLEXTRACT(XMLDOC,'SubProductCode',VARTEMP4);
        --DATTEMP := GCONST.FNCXMLEXTRACT(XMLDOC,'WorkDate',DATTEMP);
         
 end if;

  IF NuminfoType = GCONST.RefVarCovarHedgeRatio THEN
   PKGVarCovar.COVAR_POPULATE_HEDGERATIO;
  
    open gencursor for
    select Vart_Acceptable_sensitivity "AcceptableSensitivity",
           Vart_hedge_ratio99 "HedgeRatio_99",
           Vart_open_exposure99 "OpenExposure_99",
           Vart_hedge_ratio95 "HedgeRatio_95",
           Vart_open_exposure95 "OpenExposure_95"
      from trcovar006
     order by vart_serial_number;
           Goto Process_End;
 end if;
 
   if numInfoType = Gconst. REFREPAYMENTSCHEDULE then
   numCode := GConst.fncXMLExtract(xmldoc, 'CurrencyCode', numCode);
   numCode1 := GConst.fncXMLExtract(xmldoc, 'PeriodType', numCode1);
   numCode2 := GConst.fncXMLExtract(xmldoc, 'PeriodNumber', numCode2);
   numCode3 := GConst.fncXMLExtract(xmldoc, 'HolidayType', numCode3);
   numCode4 := GConst.fncXMLExtract(xmldoc, 'HolidayNumber', numCode4);
   numCode6 := GConst.fncXMLExtract(xmldoc, 'RepaymentType', numCode4);
   numCode5 := GConst.fncXMLExtract(xmldoc, 'InterestType', numCode5);
   Numinr := Gconst.Fncxmlextract(Xmldoc, 'SanctionedInr', Numinr);
   Numtemp1 := 0;--Gconst.Fncxmlextract(Xmldoc, 'InstallmentPercent', Numtemp1);
   numfcy1 := GConst.fncXMLExtract(xmldoc, 'InstalmentAmount', numfcy1);
   numrate := GConst.fncXMLExtract(xmldoc, 'InterestRate', numrate);
   dattemp := GConst.fncXMLExtract(xmldoc, 'ReferenceDate', dattemp);
   dattemp1 := GConst.fncXMLExtract(xmldoc, 'DisbursalDate', dattemp1);
   dattemp2 := GConst.fncXMLExtract(xmldoc, 'DueDate', dattemp2);
   if numCode not in(30400003) then
    numfcy := GConst.fncXMLExtract(xmldoc, 'SanctionedFcy', numfcy);
    numinr := GConst.fncXMLExtract(xmldoc, 'SanctionedFcy', numfcy);
   End If; 

    --numCode9 := fncRepaymentSchedule (Paramdata);
--    numCode9 := fncRepaymentSchedule (numCode,numCode1,numCode2,numCode3,numCode4,numinr,numfcy,dattemp1,dattemp2,numrate,numCode6,numfcy1,Numtemp1);
    Open GenCursor for
      SELECT  
        REPY_SRNO "SrNo",
        REPY_EFFECTIVE_DATE "EffectiveDate",
        REPY_INSTALLMENT_DATE "InstallmentDate",
        REPY_PRINCIPAL_AMOUNT "InstallmentAmount",
        REPY_PRINCIPAL_OUTSTANDING "PrincipalOutstanding",
        REPY_INTEREST_AMOUNT "InterestAmount",
        repy_inst_percentage "Repayment%"
      FROM TRSYSTEM967 ORDER BY REPY_INSTALLMENT_DATE;
    Goto Process_End;
  End if;
   if numInfoType = Gconst. REFREPAYMENTSCHEDULEEDIT then
--   numCode := GConst.fncXMLExtract(xmldoc, 'CurrencyCode', numCode);
    varQuery := '//' || varEntity  || '/ROW/';
    
    varTemp := GConst.fncXMLExtract(xmlDoc, varQuery || 'LoanNumber',
      varTemp, GConst.TYPENODEPATH);
      
   dattemp1 := GConst.fncXMLExtract(xmldoc, 'DisbursalDate', dattemp1);
    Open GenCursor for
      SELECT  
        REPS_SR_NUMBER "SrNo",
        REPS_EFFECTIVE_DATE "EffectiveDate",
        REPS_INSTALLMENT_DATE "InstallmentDate",
        REPS_PRINCIPAL_AMOUNT "InstallmentAmount",
        REPS_PRINCIPAL_OUTSTANDING "PrincipalOutstanding",
        REPS_INTEREST_AMOUNT "InterestAmount"
      FROM TRTRAN081A WHERE REPS_RECORD_STATUS BETWEEN 10200001 AND 10200004 
      AND REPS_LOAN_NUMBER = varTemp
      AND REPS_EFFECTIVE_DATE = dattemp1
      ORDER BY REPS_INSTALLMENT_DATE;
    Goto Process_End;
  End if;  
  
--   if numInfoType = Gconst. REFLOANSCHEME then
--    Open GenCursor for
--      SELECT  
--        pkgreturncursor.fncgetdescription(LSCM_PICK_CODE,1)"LoanSchemeDesc",
--        LSCM_SHORT_DESCRIPTION "LoanSchemeShortDesc",
--        pkgreturncursor.fncgetdescription(LSCM_DISBURSEMENT_TYPE,2)"DisbursmentType",
--        pkgreturncursor.fncgetdescription(LSCM_REPAYMENT_TYPE,2)"RepaymentTypeDesc",
--        pkgreturncursor.fncgetdescription(LSCM_INTEREST_PLAN,2)"InterestPlan",
--        pkgreturncursor.fncgetdescription(LSCM_SECURITY_TYPE,2)"SecurityType",
--        pkgreturncursor.fncgetdescription(LSCM_CHARGE_TYPE,2)"ChargeType",
--        pkgreturncursor.fncgetdescription(LSCM_OVERDUE_CHARGE,2)"OverDueCharge",
--        pkgreturncursor.fncgetdescription(LSCM_INTEREST_TYPE,2)"InterestType",
--        LSCM_PICK_CODE "LoanScheme",
--        LSCM_REPAYMENT_TYPE "RepaymentType",
--        LSCM_RECORD_STATUS "RecordStatus"
--      FROM TRMASTER411 WHERE LSCM_RECORD_STATUS BETWEEN 10200001 AND 10200004; 
--    Goto Process_End;
--  End if;  
 if numinfotype = gconst.REFACCOUNTMAPPINGDEATILS then
          varOperation := 'Extracting Account Mapping Details';  
          open gencursor for
           select
                pkgreturncursor.fncgetdescription(CMAP_COMPANY_CODE,2) "Company",
                CMAP_EFFECTIVE_DATE "EffectiveDate",
                CMAP_FINANCE_CODE "FinanceSystemGLAccount",
                CMAP_FINANCE_DESCRIPTION "FinanceSystemGLName",
                pkgreturncursor.fncgetdescription(CMAP_SCHEME_CATEGORY,2) "SchemeCategory",
                pkgreturncursor.fncgetdescription(CMAP_LOCAL_BANK,1) "LocalBank",
                pkgreturncursor.fncgetdescription(CMAP_ACCOUNT_TYPE,2) "TrasuryGLName",
                pkgreturncursor.fncgetdescription(CMAP_CRDR_CODE,2) "TransactionType",
                pkgreturncursor.fncgetdescription(CMAP_ACCOUNT_EVENT,2)"TransactionEvent"
          from TRTRAN008F
          where cmap_record_status not in(10200005,10200006);
      Goto Process_End;
     END IF;  
  if numinfotype=Gconst.REFALMVIEW then
    varOperation := 'Extraction Position GAP View';
    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
    vartemp := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
    vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
    vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
    vartemp5 := GConst.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
    numCode1 := GConst.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
    numCode2 := GConst.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);
    insert into temp values(numCode1,numCode2); commit;
    numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,datWorkDate);commit;
    Open GenCursor for  
      SELECT DECODE(SIGN(posn_account_code-25900050) ,-1,'Asset','Liability') "GLtype",
        pkgreturncursor.fncgetdescription(posn_account_code,1) "GLHead",
        SUM(rawdata.matured) "Already-Matured",
        SUM(rawdata.a) "1-14 Days",
        SUM(rawdata.b) "15-28 Days",
        SUM(rawdata.c) "29-3 Month",
        SUM(rawdata.d) "3-6 Month",
        SUM(rawdata.e) "6 Month-1 Year",
        SUM(rawdata.f) "1 Year-3 Years",
        SUM(rawdata.g) "3 Year-5 Years",
        SUM(rawdata.h) "Greater than -5 Years",
        posn_account_code "GLCode"
      FROM
        (SELECT posn_account_code ,
          DECODE( SIGN(posn_due_date -datWorkDate) ,1 ,0,posn_revalue_inr) matured,
          DECODE( SIGN(14            -((posn_due_date-datWorkDate))) ,1 ,DECODE(SIGN(posn_due_date-datWorkDate) ,1, posn_revalue_inr,0),0) a,
          DECODE( SIGN((posn_due_date-datWorkDate)-14) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-29),-1,posn_revalue_inr,0 ),0) b,
          DECODE( SIGN((posn_due_date-datWorkDate)-28) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-91),-1,posn_revalue_inr,0 ),0) C,
          DECODE( SIGN((posn_due_date-datWorkDate)-90) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-181),-1,posn_revalue_inr,0 ),0) d,
          DECODE( SIGN((posn_due_date-datWorkDate)-180) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-366),-1,posn_revalue_inr,0 ),0) e,
          DECODE( SIGN((posn_due_date-datWorkDate)-365) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-1096),-1,posn_revalue_inr,0 ),0) f,
          DECODE( SIGN((posn_due_date-datWorkDate)-1095) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-1827),-1,posn_revalue_inr,0 ),0) g,
          DECODE( SIGN((posn_due_date-datWorkDate)-1826) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-3650),-1,posn_revalue_inr,0 ),0) h
        FROM trsystem997
        WHERE datWorkDate=datWorkDate
        ) rawdata
      group by posn_account_code Order by posn_account_code; 
    goto process_end;
  
  end if; 
--------------------------------------------------- 
    if numinfotype=Gconst.REFALMVIEWDETAIL then
    varOperation := 'Extraction Position GAP View';
    vartemp1 := GConst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
    vartemp := GConst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
    vartemp3 := GConst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
    vartemp4 := GConst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
    vartemp5 := GConst.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
    numCode1 := GConst.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
    numCode2 := GConst.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);
    insert into temp values(numCode1,numCode2); commit;
    numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,datWorkDate);commit;
    Open GenCursor for  
      SELECT 
        pkgreturncursor.fncgetdescription(A.POSN_COMPANY_CODE,1) as "Company",
        pkgreturncursor.fncgetdescription(A.POSN_CURRENCY_CODE,1)as "Currency",
        pkgreturncursor.fncgetdescription(A.POSN_ACCOUNT_CODE,1) as "GLHead",
        A.POSN_REFERENCE_NUMBER  as "ReferenceNo",
        A.POSN_REFERENCE_DATE  as "ReferenceDate",
        A.POSN_DUE_DATE  as "DueDate",
        pkgreturncursor.fncgetdescription(A.POSN_COUNTER_PARTY,1)  as "Bank",
        A.POSN_REVALUE_INR  as "INRAmount",
        A.POSN_FCY_RATE  as "FCYRate",
        A.POSN_REVALUE_USD  as "RevalueUsd",
        A.POSN_TRANSACTION_AMOUNT  as "TransactionAmount",
        A.POSN_USD_RATE  as "USDRate",
        pkgreturncursor.fncgetdescription(A.POSN_PRODUCT_CODE,1)  as "ProductCode",
        A.POSN_ASSET_LIABILITY  as "AssetLiability",
        pkgreturncursor.fncgetdescription(A.POSN_FOR_CURRENCY,1)  as "ForCurrency",
        pkgreturncursor.fncgetdescription(A.POSN_SUBPRODUCT_CODE,1)  as "SubProduct",
        POSN_ACCOUNT_CODE,
        DECODE( SIGN(posn_due_date -datWorkDate) ,1 ,0,posn_revalue_inr) matured,
        DECODE( SIGN(14            -((posn_due_date-datWorkDate))) ,1 ,DECODE(SIGN(posn_due_date-datWorkDate) ,1, posn_revalue_inr,0),0) a,
        DECODE( SIGN((posn_due_date-datWorkDate)-14) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-29),-1,posn_revalue_inr,0 ),0) b,
        DECODE( SIGN((posn_due_date-datWorkDate)-28) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-91),-1,posn_revalue_inr,0 ),0) C,
        DECODE( SIGN((posn_due_date-datWorkDate)-90) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-181),-1,posn_revalue_inr,0 ),0) d,
        DECODE( SIGN((posn_due_date-datWorkDate)-180) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-366),-1,posn_revalue_inr,0 ),0) e,
        DECODE( SIGN((posn_due_date-datWorkDate)-365) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-1096),-1,posn_revalue_inr,0 ),0) f,
        DECODE( SIGN((posn_due_date-datWorkDate)-1095) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-1827),-1,posn_revalue_inr,0 ),0) g,
        DECODE( SIGN((posn_due_date-datWorkDate)-1826) ,1 , DECODE( SIGN((posn_due_date-datWorkDate)-3650),-1,posn_revalue_inr,0 ),0) h
      FROM trsystem997 a
      WHERE datWorkDate=datWorkDate;
    goto process_end;
  
  end if;  

if numinfoType = Gconst.refLoanDetailsForLink then 
      numCode := GConst.fncXMLExtract(xmldoc, 'BuySell', numCode);
      numCode1 := GConst.fncXMLExtract(xmldoc, 'CompanyCode', numCode);
      numCode2 := GConst.fncXMLExtract(xmldoc, 'LocationCode', numCode);
      numCode3 := GConst.fncXMLExtract(xmldoc, 'BaseCurrency', numCode);
      numCode4 := GConst.fncXMLExtract(xmldoc, 'CounterParty', numCode);
      numCode5 := GConst.fncXMLExtract(xmldoc, 'ExchangeCode', numCode);
      numCode6 := GConst.fncXMLExtract(xmldoc, 'Category', numCode);
      numCode7 := GConst.fncXMLExtract(xmldoc, 'SubCategory', numCode); 
  if  numcode = 25300002  then----SELL
  Open GenCursor for         

       select 'ForigenCurrencyLoan' "ProductDescription",fcln_bank_reference as "BillReference",
          pkgreturncursor.fncgetdescription(FCLN_LOCAL_BANK, 2) as "BankName",
          fcln_maturity_to "ContractMaturity", fcln_maturity_to "BillMaturity",
          pkgreturncursor.fncgetdescription(fcln_currency_code, 2) as "CurrencyName",
--          pkgforexprocess.fncGetOutstanding(fcln_loan_number,0,GConst.UTILFCYLOAN,
--          GConst.AMOUNTFCY, datworkdate) 
          FCLN_SANCTIONED_FCY "BillAmount",
          FCLN_SANCTIONED_FCY "OutStanding",
          (select NVL(sum(irdl_hedged_amount),0)
             from trtran096
             where irdl_trade_reference = fcln_loan_number
             and irdl_record_status between 10200001 and 10200004) "CoveredAmount",
          (FCLN_SANCTIONED_FCY - 
             (select NVL(sum(irdl_hedged_amount),0)
             from trtran096
             where irdl_trade_reference = fcln_loan_number
             and irdl_record_status between 10200001 and 10200004))"UncoveredAmount",
          0 "HedgingAmount",  
          FCLN_CONVERSION_RATE "ExchangeRate",FCLN_SANCTIONED_INR "RupeeAmount",
          fcln_loan_number "TradeReference", FCLN_SANCTION_DATE as "ReferenceDate",
          FCLN_LOAN_REMARKS "BankReference", 
          pkgreturncursor.fncgetdescription(FCLN_COMPANY_CODE, 2) as "CompanyName",
          FCLN_LOCAL_BANK BankCode,FCLN_COMPANY_CODE CompanyCode,
          FCLN_CURRENCY_CODE currencyCode ,0 RecordStatus
          from trtran005 a
          where fcln_Company_Code in
            (select usco_company_code from trsystem022a
              where usco_user_id =varUserid)
          and fcln_process_complete = GConst.OPTIONNO
          and fcln_loan_type in (Gconst.LOANPCFC,GConst.LOANPSCFC)
          and fcln_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
       UNION ALL
        select 'BuyersCredit' "ProductDescription",bcrd_sanction_reference as "BillReference",
          pkgreturncursor.fncgetdescription(bcrd_local_bank, 2) as "BankName",
          bcrd_due_date "ContractMaturity", bcrd_due_date "BillMaturity",
          pkgreturncursor.fncgetdescription(bcrd_currency_code, 2) as "CurrencyName",
          bcrd_sanctioned_fcy "BillAmount",
         -- pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit,0,12,1,datworkdate)
          BCRD_SANCTIONED_FCY "OutStanding",
          (select NVL(sum(irdl_hedged_amount),0)
             from trtran096
             where irdl_trade_reference = bcrd_buyers_credit
             and irdl_record_status between 10200001 and 10200004) "CoveredAmount",
          (BCRD_SANCTIONED_FCY  - 
             (select NVL(sum(irdl_hedged_amount),0)
             from trtran096
             where irdl_trade_reference = bcrd_buyers_credit
             and irdl_record_status between 10200001 and 10200004))"UncoveredAmount",
          0 "HedgingAmount",  
          bcrd_conversion_rate "ExchangeRate",bcrd_sanctioned_inr "RupeeAmount",
          bcrd_buyers_credit "TradeReference", bcrd_sanction_date as "ReferenceDate",
          bcrd_loan_remarks "BankReference", 
          pkgreturncursor.fncgetdescription(bcrd_company_code, 2) as "CompanyName",
          bcrd_local_bank BankCode,bcrd_company_code CompanyCode,
          bcrd_currency_code currencyCode ,0 RecordStatus
          from trtran045 a
          where bcrd_Company_Code in
            (select usco_company_code from trsystem022a
              where usco_user_id =varUserid)
          and bcrd_process_complete = GConst.OPTIONNO
          and bcrd_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
          
          UNION ALL
          
           select 'Term Loan' "ProductDescription",TLON_BANK_REFERENCE as "BillReference",
          pkgreturncursor.fncgetdescription(TLON_LOCAL_BANK, 2) as "BankName",
          TLON_DUE_DATE "ContractMaturity", TLON_DUE_DATE "BillMaturity",
          pkgreturncursor.fncgetdescription(TLON_CURRENCY_CODE, 2) as "CurrencyName",
          TLON_SANCTIONED_FCY "BillAmount",
          --pkgforexprocess.fncGetOutstanding(TLON_BANK_REFERENCE,0,12,1,datworkdate)
          TLON_SANCTIONED_FCY "OutStanding",
          (select NVL(sum(irdl_hedged_amount),0)
             from trtran096
             where irdl_trade_reference = TLON_BANK_REFERENCE
             and irdl_record_status between 10200001 and 10200004) "CoveredAmount",
          (TLON_SANCTIONED_FCY  - 
             (select NVL(sum(irdl_hedged_amount),0)
             from trtran096
             where irdl_trade_reference = TLON_BANK_REFERENCE
             and irdl_record_status between 10200001 and 10200004))"UncoveredAmount",
          0 "HedgingAmount",  
          TLON_CONVERSION_RATE "ExchangeRate",TLON_SANCTIONED_INR "RupeeAmount",
          TLON_BANK_REFERENCE "TradeReference", TLON_DISBURSAL_DATE as "ReferenceDate",
          TLON_LOAN_REMARKS "BankReference", 
          pkgreturncursor.fncgetdescription(TLON_COMPANY_CODE, 2) as "CompanyName",
          TLON_LOCAL_BANK BankCode,TLON_COMPANY_CODE CompanyCode,
          TLON_CURRENCY_CODE currencyCode ,0 RecordStatus
          from TRTRAN081 a
          where TLON_COMPANY_CODE in
            (select usco_company_code from trsystem022a
              where usco_user_id =varUserid)
          and TLON_PROCESS_COMPLETE = GConst.OPTIONNO
          and TLON_RECORD_STATUS in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)  ;
          
          END IF; 
          IF numcode = 25300001 then --Buy
            Open GenCursor for         
            
              select 'Fixed Deposit' "ProductDescription",FDRF_BANK_REFERENCE as "BillReference",
              pkgreturncursor.fncgetdescription(FDRF_LOCAL_BANK, 2) as "BankName",
              FDRF_MATURITY_DATE "ContractMaturity", FDRF_MATURITY_DATE "BillMaturity",
              pkgreturncursor.fncgetdescription(FDRF_CURRENCY_CODE, 2) as "CurrencyName",
--              pkgforexprocess.fncGetOutstanding(FDRF_FD_NUMBER,0,GConst.UTILFCYLOAN,
--              GConst.AMOUNTFCY, datworkdate)
              FDRF_DEPOSIT_AMOUNT "BillAmount",
--              pkgforexprocess.fncGetOutstanding(FDRF_FD_NUMBER,0,GConst.UTILFCYLOAN,
--              GConst.AMOUNTFCY, datworkdate)
              FDRF_DEPOSIT_AMOUNT "OutStanding",
              (select NVL(sum(irdl_hedged_amount),0)
                 from trtran096
                 where irdl_trade_reference = FDRF_FD_NUMBER
                 and irdl_record_status between 10200001 and 10200004) "CoveredAmount",
              --(pkgforexprocess.fncGetOutstanding(FDRF_FD_NUMBER,0,12,1,datworkdate) 
                 (FDRF_DEPOSIT_AMOUNT - 
                 (select NVL(sum(irdl_hedged_amount),0)
                 from trtran096
                 where irdl_trade_reference = FDRF_FD_NUMBER
                 and irdl_record_status between 10200001 and 10200004))"UncoveredAmount",
              0  "HedgingAmount",  
              FDRF_INTEREST_RATE "ExchangeRate",FDRF_DEPOSIT_AMOUNT "RupeeAmount",
              FDRF_FD_NUMBER "TradeReference", FDRF_REFERENCE_DATE as "ReferenceDate",
              FDRF_USER_REMARKS "BankReference", 
              pkgreturncursor.fncgetdescription(FDRF_COMPANY_CODE, 2) as "CompanyName",
              FDRF_LOCAL_BANK BankCode,FDRF_COMPANY_CODE CompanyCode,
              FDRF_CURRENCY_CODE currencyCode ,0 RecordStatus
              from TRTRAN047 a
              where FDRF_COMPANY_CODE in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
              and FDRF_PROCESS_COMPLETE = GConst.OPTIONNO
              and FDRF_RECORD_STATUS in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
              
              UNION ALL
              select 'CP CD' "ProductDescription",MDEL_USER_REFERENCE as "BillReference",
              pkgreturncursor.fncgetdescription(MDEL_LOCAL_BANK, 2) as "BankName",
              MDEL_VALUE_DATE "ContractMaturity", MDEL_VALUE_DATE "BillMaturity",
              pkgreturncursor.fncgetdescription(MDEL_CURRENCY_CODE, 2) as "CurrencyName",
              MDEL_DEAL_AMOUNT "BillAmount",
    --          pkgforexprocess.fncGetOutstanding(FDRF_FD_NUMBER,0,GConst.UTILFCYLOAN,
    --          GConst.AMOUNTFCY, datworkdate) 
              MDEL_DEAL_AMOUNT "OutStanding",
              (select NVL(sum(irdl_hedged_amount),0)
                 from trtran096
                 where irdl_trade_reference = MDEL_DEAL_NUMBER
                 and irdl_record_status between 10200001 and 10200004) "CoveredAmount",
              (MDEL_DEAL_AMOUNT - 
                 (select NVL(sum(irdl_hedged_amount),0)
                 from trtran096
                 where irdl_trade_reference = MDEL_DEAL_NUMBER
                 and irdl_record_status between 10200001 and 10200004))"UncoveredAmount",
              0 "HedgingAmount",  
              MDEL_MARKET_PRICE "ExchangeRate",MDEL_AMOUNT_LOCAL "RupeeAmount",
              MDEL_DEAL_NUMBER "TradeReference", MDEL_EXECUTE_DATE as "ReferenceDate",
              MDEL_DEALER_REMARK "BankReference", 
              pkgreturncursor.fncgetdescription(MDEL_COMPANY_CODE, 2) as "CompanyName",
              MDEL_LOCAL_BANK BankCode,MDEL_COMPANY_CODE CompanyCode,
              MDEL_CURRENCY_CODE currencyCode ,0 RecordStatus
              from TRTRAN031 a
              where MDEL_COMPANY_CODE in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
              and MDEL_PROCESS_COMPLETE = GConst.OPTIONNO
              and MDEL_RECORD_STATUS in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
         end  if ;
  -- and IFRA_PROCESS_COMPLETE =12400001;
  Goto Process_End;

end if;

if numInfoType =GCONST.refIRSInterestBuyDetails then
      VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
      
  open gencursor for  
--    select iirl_currency_code CurrencyCode,iirl_int_type intType,iirl_int_charge intCharge,iirl_base_rate BaseRate,
--       iirl_spread Spread,iirl_final_rate FinalRate,iirl_interest_daystype intDaysType,iirl_rate_type RateType,
--       iirl_interest_fixingtype fixingType, iirm_intstart_date intStartDate,iirm_intEnd_date intEndDate,
--       IIRM_settlement_date PaymentDate,iirm_intfixing_date fixingDate,
--       IIRL_NOTIONAL_amount NotionalAmount,IIRM_INTEREST_AMOUNT InterestAmount,
--       IIRL_PAYMENTFIXING_DAYSTYPE PaymentFixingDaysType,
--       iirm_process_complete SettlementStatus
--    from trtran091a inner join trtran091b
--    on iirl_irs_number= iirm_irs_number
--    and iirm_serial_number= iirl_serial_number
--    where iirl_buy_sell= 25300001
--    and iirl_Irs_number=VARTEMP
--    and iirl_record_status not in (10200005,10200006);

    select iirl_currency_code CurrencyCode,iirl_int_type intType,iirl_int_charge intCharge,iirl_base_rate BaseRate,
       iirl_spread Spread,iirl_final_rate FinalRate,iirl_interest_daystype intDaysType,iirl_rate_type RateType,
       iirl_interest_fixingtype fixingType, c.iirm_intstart_date intStartDate,c.iirm_intEnd_date intEndDate,
       c.IIRM_settlement_date PaymentDate,c.iirm_intfixing_date fixingDate,
       IIRL_NOTIONAL_amount NotionalAmount,c.IIRM_INTEREST_AMOUNT InterestAmount,
       IIRL_PAYMENTFIXING_DAYSTYPE PaymentFixingDaysType,
       case when ClosedLeg.iirm_process_complete = 12400001 then
       12400001 else c.iirm_process_complete end SettlementStatus
    from trtran091a inner join trtran091b c
    on iirl_irs_number= c.iirm_irs_number
    and c.iirm_serial_number= iirl_serial_number
    left outer join
    (select iirm_process_complete,IIRM_settlement_date,iirm_Irs_number,iirm_leg_serial
    from trtran091b where iirm_Irs_number=VARTEMP
    and iirm_process_complete = 12400001
    and iirm_record_status not in (10200005,10200006))ClosedLeg
    --on ClosedLeg.IIRM_settlement_date = c.IIRM_settlement_date
    on ClosedLeg.iirm_Irs_number = c.iirm_Irs_number
    and ClosedLeg.iirm_leg_serial = c.iirm_leg_serial        
    where iirl_buy_sell= 25300001
    and iirl_Irs_number=VARTEMP
    and iirl_record_status not in (10200005,10200006)
    order by c.IIRM_settlement_date;

goto process_end;    

end if;


if numInfoType =GCONST.refIRSInterestSellDetails then
      VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
      
  open gencursor for  
--    select iirl_currency_code CurrencyCode,iirl_int_type intType,iirl_int_charge intCharge,iirl_base_rate BaseRate,
--       iirl_spread Spread,iirl_final_rate FinalRate,iirl_interest_daystype intDaysType,iirl_rate_type RateType,
--       iirl_interest_fixingtype fixingType, iirm_intstart_date intStartDate,iirm_intEnd_date intEndDate,
--       IIRM_settlement_date PaymentDate,iirm_intfixing_date fixingDate,
--       IIRL_NOTIONAL_amount NotionalAmount,IIRM_INTEREST_AMOUNT InterestAmount,
--       IIRL_PAYMENTFIXING_DAYSTYPE PaymentFixingDaysType,
--       iirm_process_complete SettlementStatus
--    from trtran091a inner join trtran091b
--    on iirl_irs_number= iirm_irs_number
--    and iirm_serial_number= iirl_serial_number
--    where iirl_buy_sell= 25300002
--    and iirl_Irs_number=VARTEMP
--    and iirl_record_status not in (10200005,10200006);

    select iirl_currency_code CurrencyCode,iirl_int_type intType,iirl_int_charge intCharge,iirl_base_rate BaseRate,
       iirl_spread Spread,iirl_final_rate FinalRate,iirl_interest_daystype intDaysType,iirl_rate_type RateType,
       iirl_interest_fixingtype fixingType, c.iirm_intstart_date intStartDate,c.iirm_intEnd_date intEndDate,
       c.IIRM_settlement_date PaymentDate,c.iirm_intfixing_date fixingDate,
       IIRL_NOTIONAL_amount NotionalAmount,c.IIRM_INTEREST_AMOUNT InterestAmount,
       IIRL_PAYMENTFIXING_DAYSTYPE PaymentFixingDaysType,
       case when ClosedLeg.iirm_process_complete = 12400001 then
       12400001 else c.iirm_process_complete end SettlementStatus
    from trtran091a inner join trtran091b c
    on iirl_irs_number= c.iirm_irs_number
    and c.iirm_serial_number= iirl_serial_number
    left outer join
    (select iirm_process_complete,IIRM_settlement_date,iirm_Irs_number,iirm_leg_serial
    from trtran091b where iirm_Irs_number=VARTEMP
    and iirm_process_complete = 12400001
    and iirm_record_status not in (10200005,10200006))ClosedLeg
    --on ClosedLeg.IIRM_settlement_date = c.IIRM_settlement_date
    on ClosedLeg.iirm_Irs_number = c.iirm_Irs_number
    and ClosedLeg.iirm_leg_serial = c.iirm_leg_serial      
    where iirl_buy_sell= 25300002
    and iirl_Irs_number=VARTEMP
    and iirl_record_status not in (10200005,10200006)
    order by c.IIRM_settlement_date;

goto process_end;    

end if;


if numinfotype =Gconst.refIRSRollerCosterDetails then 

      VARTEMP :=GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
      
  open gencursor for  
    select IIRN_IRS_NUMBER IRSNumber, IIRN_SERIAL_NUMBER SerialNumber,
        IIRN_OUTSTANDING_AMOUNT OutstandingAmount, IIRN_EFFECTIVE_DATE EffectiveDate,
        IIRN_EFFECTIVE_AMOUNT EffectiveAmount,
        IIRN_Payment_amount PaymentAmount,IIRN_outstanding_payment OutstandingPayment
        from trtran091c
        where  IIRN_IRS_NUMBER= VARTEMP
        and iirn_record_status not in (10200005,10200006);
    
goto process_end;    

end if;
if numinfotype = gconst.REFIRSHOLIDAYVALIDATION then

    varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCodes',VARTEMP);
    datTemp := Gconst.FNCXMLEXTRACT(XMLDOC,'StartDate',DatTemp);
    open gencursor for
      select hday_location_code LocationCode, hday_calendar_date CalendarDate
        from trsystem001
       where hday_record_status not in (10200005,10200006)
       and hday_Calendar_date >= datTemp
         and hday_location_code in (select regexp_substr(varTemp, '[^,]+', 1, rownum) SPLIT
                                    from dual
                                    connect by level <= length (regexp_replace(varTemp, '[^,]+')))
         
         and hday_day_status not in (26400007,26400008,26400009);
       
  goto process_end;          
end if;

if numinfotype = gconst.REFIRSUNDERLYING then
   Open Gencursor for 
    select TLON_LOAN_NUMBER "LoanNumber",
         pkgreturncursor.fncgetdescription(tlon_local_bank,2) "LocalBank",
         tlon_reference_date "ReferenceDate",tlon_sanctioned_fcy "SanctionedFCY",
         tlon_sanctioned_rate "SanctionedRate",tlon_sanctioned_inr "SanctionedINR",
         tlon_disbursal_date "DisbursalDate",null  "LimitReference",
         pkgreturncursor.fncgetdescription(tlon_Currency_code,2) "Currency",
         pkgreturncursor.fncgetdescription(tlon_period_type,2) "PeriodType", 
         tlon_period_number "PeriodNumber",
         pkgreturncursor.fncgetdescription(tlon_instalment_type,2) "InstalmentType", 
         tlon_instalment_amount "InstalmentAmount",tlon_due_date "DueDate",
         null "InterestPlan",
         tlon_libor_rate "LiborRate",tlon_interest_spread "InterestSpread",
         tlon_interest_rate "InterestRate",
         pkgreturncursor.fncgetdescription(tlon_float_rate,2) "FloatRate",
         tlon_reason_detail "ReasonDetails",pkgreturncursor.fncgetdescription(tlon_loan_type,2) "LoanType",
         0  "InterestPlanCode", 
         80300001 "InterestType", --Fixed
         TLON_Local_Bank "LocalBankCode", tlon_Currency_code "CurrencyCode", 
         0 "RecordStatus"
    from Trtran081
    where tlon_process_complete =12400002
    and tlon_record_Status not in (10200005,10200006);

--80300001	Fixed
--80300002	Floating

--    select t.tlon_loan_number "LoanNumber",
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_local_bank,2) "LocalBank",
--         tlon_reference_date "ReferenceDate",tlon_sanctioned_fcy "SanctionedFCY",
--         tlon_sanctioned_rate "SanctionedRate",tlon_sanctioned_inr "SanctionedINR",
--         tlon_disbursal_date "DisbursalDate",tlon_limit_reference "LimitReference",
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_Currency_code,2) "Currency",
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_period_type,2) "PeriodType", 
--         tlon_period_number "PeriodNumber",
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_instalment_type,2) "InstalmentType", 
--         tlon_instalment_amount "InstalmentAmount",tlon_due_date "DueDate",
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_interest_plan,2) "InterestPlan",
--         tlon_libor_rate "LiborRate",tlon_interest_spread "InterestSpread",
--         tlon_interest_rate "InterestRate",
--         himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_float_rate,2) "FloatRate",
--         tlon_reason_detail "ReasonDetails",himatsingkatf_prod.pkgreturncursor.fncgetdescription(tlon_loan_type,2) "LoanType",
--         himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(TLON_INTEREST_PLAN) "InterestPlanCode", 
--         80300001 "InterestType", --Fixed
--          himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(TLON_Local_Bank) "LocalBankCode", 
--           himatsingkatf_prod.Pkgreturncursor.Fncgettreasurycode(tlon_Currency_code) "CurrencyCode", 
--         0 "RecordStatus"
--    from himatsingkatf_prod.tftran121 t
--    where tlon_process_complete =12400002
--    and tlon_record_Status not in (10200005,10200006);
      
  goto process_end;          
end if;

if numinfotype = gconst.REFIRSUNDERLYINGDETAILS then
     varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'UnderlyingExposure',VARTEMP);
     
     --varTemp := Pkgglobalmethods.fncXMLExtract(xmldoc, '//CommandSet//KeyValues/UnderlyingExposure', varTemp,GConst.TYPENODEPATH);
     

   OPEN GENCURSOR FOR 
      select REPS_SR_NUMBER SerialNumber,REPS_INSTALLMENT_DATE InstallmentDueDate,
                REPS_RECORD_TYPE "RecordType",0 InterestRate,
                REPS_INTEREST_AMOUNT InterestFcy,0 InterestInr,
                0 ExchangeRate,REPS_PRINCIPAL_AMOUNT InstalmentFcy,
                REPS_PRINCIPAL_AMOUNT InstalmentInr,REPS_PRINCIPAL_AMOUNT PrincipalAmount,
                REPS_PRINCIPAL_AMOUNT BalanceInr,REPS_RECORD_TYPE
      from TRTRAN081A
      where REPS_RECORD_STATUS not in (10200005,10200006)
      --and REPS_RECORD_TYPE = 1
      and REPS_LOAN_NUMBER = VarTemp;
--      select tins_serial_number SerialNumber,tins_due_date InstallmentDueDate,
--                tins_record_type RecordType,TINS_INTEREST_RATE InterestRate,
--                TINS_INTEREST_FCY InterestFcy,TINS_INTEREST_INR InterestInr,
--                tins_exchange_rate ExchangeRate,tins_instalment_fcy InstalmentFcy,
--                tins_instalment_inr InstalmentInr,tins_balance_fcy PrincipalAmount,
--                tins_balance_inr BalanceInr,tins_record_type
--      from himatsingkatf_prod.tftran121C
--      where tins_record_status not in (10200005,10200006)
--      and tins_loan_number=VarTemp;
      
  goto process_end;          
End If;

IF numinfotype = gconst.refIRSSettlement THEN

   OPEN GENCURSOR FOR 
    SELECT iirs_irs_number "IrsNumber",
      iirs_notional_amount "NotionalAmount",
      iirl_base_rate "BaseRate",
      iirl_spread "SpreadRate",
      iirl_final_rate "FinalRate",
      IIRM_SETTLEMENT_DATE "SettlementDate",
      IIRM_INTSTART_DATE "IntStartDate",
      IIRM_INTEND_DATE "IntEndDate",
      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
      IIRM_SERIAL_NUMBER "SerialNumber",
      IIRM_LEG_SERIAL "LegSerial",
      IIRS_RECORD_STATUS "RecordStatus",
      IIRS_Company_Code "CompanyCode",
      Iirl_Currency_Code "CurrencyCode",
      iirs_counter_party "CounterParty",
      iirs_Location_code "LocationCode"
    FROM TRTRAN091
    LEFT OUTER JOIN TRTRAN091A 
    ON iirs_irs_number = IIRL_IRS_NUMBER
    LEFT OUTER JOIN TRTRAN091B
    ON iirm_irs_number   = iirs_irs_number
    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND iirl_record_status BETWEEN 10200001 AND 10200004
    AND iirm_record_status BETWEEN 10200001 AND 10200004
    AND IIRL_INT_TYPE = 80300002
    AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER
    AND IIRM_SETTLEMENT_DATE <= datworkdate
    and IIRm_Process_complete =12400002;
  goto process_end;          
End If;
IF numinfotype = gconst.refIrsDetails THEN
   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
   numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'SerialNumber',numCode);
   numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'LegSerial',numCode);

   OPEN GENCURSOR FOR 
    SELECT iirs_irs_number "IrsNumber",
      --iirs_notional_amount "NotionalAmount",
      PKGirs.fncIRSOutstanding(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirs_irs_number,IIRM_SERIAL_NUMBER)"NotionalAmount",
      iirl_base_rate "BaseRate",
      --nvl(PKGirs.fncIRSGetInterestRate(iirs_irs_number, 1,'30-JUN-16',SYSDATE,0,0),0) "BaseRate",
      --"BaseRate",
      iirl_spread "SpreadRate",
     iirl_final_rate "FinalRate",
      --nvl(PKGirs.fncIRSGetInterestRate(iirs_irs_number, 1,'30-JUN-16',SYSDATE,0,0),0) + iirl_spread "FinalRate",--iirl_final_rate "FinalRate",
      IIRM_SETTLEMENT_DATE "SettlementDate",
      IIRM_INTSTART_DATE "IntStartDate",
      IIRM_INTEND_DATE "IntEndDate",
      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
      IIRM_SERIAL_NUMBER "SerialNumber",
      IIRM_LEG_SERIAL "LegSerial",
      IIRS_RECORD_STATUS "RecordStatus",
      (case when IIRL_buy_sell=25300002 then  --Sell
            -1* nvl(IIRM_INTEREST_AMOUNT,0)
          else nvl(IIRM_INTEREST_AMOUNT,0) end) "IntAmountFixed",
      iirs_counter_party "CounterParty",
      iirs_Location_code "LocationCode"
    FROM TRTRAN091,TRTRAN091A,TRTRAN091B 
    WHERE iirs_irs_number = IIRL_IRS_NUMBER
    AND iirm_irs_number   = iirs_irs_number
    AND iirs_irs_number = varTemp
    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND iirl_record_status BETWEEN 10200001 AND 10200004
    AND iirm_record_status BETWEEN 10200001 AND 10200004
    AND IIRL_INT_TYPE = 80300001
    AND IIRM_SERIAL_NUMBER != numCode
    AND IIRM_LEG_SERIAL = numCode1;
  goto process_end;          
End If; 



IF numinfotype = gconst.refCBFCFORMAT THEN
  varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'RunProgram',VARTEMP);
  select  REVERSE(substr(REVERSE(varTemp),7,3))  into varTemp2 from dual;
  insert into temp values (varTemp,varTemp);commit;
     OPEN GENCURSOR FOR 
   select DEAL_COMPANY_CODE AS COMPANYCODE,
               pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
                        DEAL_DEAL_NUMBER AS DealNumber,
                        DEAL_EXECUTE_DATE AS ExecuteDate,
                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCURRENCY,
                       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,1) AS COUNTERPARTY,                        
                       DEAL_EXCHANGE_RATE AS EXRATE,
                       DEAL_LOCAL_RATE AS LOCALRATE,
                       DEAL_BASE_AMOUNT AS BASEAMT,
                       DEAL_OTHER_AMOUNT AS OTHERAMOUNT,
                       DEAL_DEALER_REMARKS AS REMARKS,
                       DEAL_USER_REFERENCE AS USERREF,
                       DEAL_SPOT_RATE AS Spot,
                       DEAL_MARGIN_RATE AS Margin,
                       DEAL_FORWARD_RATE AS Forward,
                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) AS PURPOSE,
                        pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1)  AS COMMODITY,
                     --  pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) AS AMTLCL,
                        DEAL_MATURITY_FROM AS MATURITYFROM,
                        DEAL_MATURITY_DATE AS MATURITYDATE,LBNK_ADDRESS_1 AS BKADDR1,LBNK_ADDRESS_2 AS BKADDR2,
                        LBNK_ADDRESS_3 AS BKADDR3,LBNK_ADDRESS_4 AS BKADDR4,LBNK_CONTACT_PERSON AS CTPERSON,
                        LBNK_LONG_DESCRIPTION AS BANKNAME,
                        LBNK_PHONE_NUMBERS AS PHNUMBER,
                        LBNK_ACCOUNT_NUMBER AS ACCNO,
                        comp_address_1 AS COMPADDR1,
                        comp_address_2 AS COMPADDR2,
                        comp_address_3 AS COMPADDR3,
                        comp_address_4 AS COMPADDR4,
                        varTemp2 as Num
                     --  pkgreturnreport.GetSystemDate() as SystemDate ,
                       --pkgreturnreport.getCompanyName() as CompanyName
                from    TRTRAN001,TRMASTER306,TRMASTER301
                where   TRMASTER306.LBNK_PICK_CODE = TRTRAN001.DEAL_COUNTER_PARTY AND
                TRMASTER301.COMP_COMPANY_CODE=TRTRAN001.DEAL_COMPANY_CODE AND
                        DEAL_record_status NOT IN(10200006)AND DEAL_DEAL_NUMBER=varTemp;
    
       goto process_end;          
End If; 
          
          
if numinfotype = gconst.refCBCANCELLATION then
varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'RunProgram',VARTEMP);
varTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'ReverseSerial',VARTEMP1);
select  REVERSE(substr(REVERSE(varTemp),7,3))  into varTemp2 from dual;
insert into temp values (varTemp,varTemp);commit;
open gencursor for
select  pkgreturncursor.fncGetDescription(cdel_company_code,1) as CompanyName,
cdel_deal_number  as IBSRef,
cdel_trade_reference as tradeRef,
cdel_bank_reference as DealNumber,
CDEL_DEALER_REMARK AS Remarks,
cdel_bo_remark as Boremarks,
DEAL_DEALER_REMARKS AS REMARKS,
DEAL_USER_REFERENCE AS USERREF,
pkgreturncursor.fncGetDescription(deal_counter_party,1) as CounterParty,
LBNK_ADDRESS_1 AS BKADDR1,LBNK_ADDRESS_2 AS BKADDR2,
LBNK_ADDRESS_3 AS BKADDR3,LBNK_ADDRESS_4 AS BKADDR4,
LBNK_CONTACT_PERSON AS CTPERSON,
LBNK_LONG_DESCRIPTION AS BANKNAME,
LBNK_PHONE_NUMBERS AS PHNUMBER,
LBNK_ACCOUNT_NUMBER AS ACCNO,
DEAL_EXECUTE_DATE AS ExecuteDate,
pkgreturncursor.fncGetDescription(DEAL_BASE_CURRENCY,2) AS BaseCurrency,
pkgreturncursor.fncGetDescription(DEAL_OTHER_CURRENCY,2) AS OtherCurrency,
DEAL_BASE_AMOUNT AS BookingAmt,
deal_exchange_rate AS BookingRate,
CDEL_CANCEL_AMOUNT AS CancelAmt,
CDEL_CANCEL_DATE AS CancelDate,
CDEL_CANCEL_RATE AS CancelRate,
varTemp2 as Num
from trtran006,trtran001,trmaster306 where 
deal_deal_number=cdel_deal_number and 
TRMASTER306.LBNK_PICK_CODE = TRTRAN001.DEAL_COUNTER_PARTY and
--CDEL_CANCEL_TYPE=27000001 AND
CDEL_REVERSE_SERIAL=varTemp1 AND
cdel_deal_number=varTemp;

Goto Process_End;
End If;          
          
          
--IF numinfotype = gconst.refCCIRSSettlement THEN
--   numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'TranType',numCode);
--  IF numCode = 81000001 THEN
--   OPEN GENCURSOR FOR 
--    SELECT iirs_irs_number "IrsNumber",
--      iirs_notional_amount "NotionalAmount",
--      IIRS_SPOT_REFERENCE "SpotReference",
--      IIRM_SETTLEMENT_DATE "SettlementDate",
--      IIRM_INTSTART_DATE "IntStartDate",
--      IIRM_INTEND_DATE "IntEndDate",
--      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
--      IIRM_SERIAL_NUMBER "SerialNumber",
--      IIRM_LEG_SERIAL "LegSerial",
--      pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
--      IIRL_CURRENCY_CODE "CurrencyCode",
--      nvl(IIRM_INTEREST_AMOUNT,0) "IntAmount",
--      nvl(IIRM_FINAL_RATE,0) "FinalRate",
--      IIRS_RECORD_STATUS "RecordStatus"
--    FROM TRTRAN091
--    LEFT OUTER JOIN TRTRAN091A 
--    ON iirs_irs_number = IIRL_IRS_NUMBER
--    LEFT OUTER JOIN TRTRAN091B
--    ON iirm_irs_number   = iirs_irs_number
--    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND iirl_record_status BETWEEN 10200001 AND 10200004
--    AND iirm_record_status BETWEEN 10200001 AND 10200004
--    AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER
--    WHERE IIRS_DEAL_TYPE = 80800004
--    and IIRL_BUY_SELL =  25300001;
--else
--   OPEN GENCURSOR FOR 
--    SELECT iirs_irs_number "IrsNumber",
--      IIRN_OUTSTANDING_AMOUNT "NotionalAmount",
--      IIRS_SPOT_REFERENCE "SpotReference",
--      IIRN_EFFECTIVE_DATE "EffectiveDate",
--      NULL "IntStartDate",
--      NULL "IntEndDate",
--      0 "NoDays",
--      IIRN_SERIAL_NUMBER "SerialNumber",
--      0 "LegSerial",
--      pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
--      IIRL_CURRENCY_CODE "CurrencyCode",
--      0 "IntAmount",
--      0 "FinalRate",
--      IIRS_RECORD_STATUS "RecordStatus"
--    FROM TRTRAN091
--    LEFT OUTER JOIN TRTRAN091A 
--    ON iirs_irs_number = IIRL_IRS_NUMBER
--    LEFT OUTER JOIN TRTRAN091C
--    ON IIRN_IRS_NUMBER   = iirs_irs_number
--    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND iirl_record_status BETWEEN 10200001 AND 10200004
--    AND IIRN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    where IIRS_DEAL_TYPE = 80800004
--    and IIRL_BUY_SELL =  25300001;
--    --AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER;
--end if;
--  goto process_end;          
--End If;  
--IF numinfotype = gconst.refCCIRSSettlement THEN
--   
--   begin
--      numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/TranType',numCode);
--   exception
--     when others then
--       numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'TranType',numCode);
--   end;
--   
--   begin
--       numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/LegSerial',numCode1);
--       varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/IrsNumber',VarTemp);
--   exception
--     when others then 
--      numCode1 :=0;
--      varTemp :=null;
--   end;   
--
--
--  IF numCode = 81000001 THEN  --	Interest settlement
--
--   OPEN GENCURSOR FOR 
--    SELECT iirs_irs_number "IrsNumber",
--      --iirs_notional_amount "NotionalAmount",
--      iirm_serial_number "SerialNumber",
--      pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirs_irs_number,1) "OutstandingReceive",
--      pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirs_irs_number,2) "OutstandingPayment",
--      IIRS_SPOT_REFERENCE "SpotReference",
--      IIRM_SETTLEMENT_DATE "SettlementDate",
--      IIRM_INTSTART_DATE "IntStartDate",
--      IIRM_INTEND_DATE "IntEndDate",
--      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
--      IIRM_SERIAL_NUMBER "SerialNumber",
--      IIRM_LEG_SERIAL "LegSerial",
--      --pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
--     
--      nvl(IIRM_INTEREST_AMOUNT,0) "IntPayAmount",
--      nvl(IIRM_FINAL_RATE,0) "IntPayFinalRate",
--      
--           (select IIRM_INTEREST_AMOUNT from TRTRAN091B S
--       where iirs_irs_number = IIRM_IRS_NUMBER
--        and IIRM_serial_number =1
--        and s.iirm_leg_serial= m.iirm_leg_serial
--        AND iirM_record_status BETWEEN 10200001 AND 10200004) "IntReceiveAmount",
--      (select IIRM_FINAL_RATE from TRTRAN091B S
--       where iirs_irs_number = IIRM_IRS_NUMBER
--        and IIRM_serial_number =1
--        and s.iirm_leg_serial= m.iirm_leg_serial
--        AND iirM_record_status BETWEEN 10200001 AND 10200004)"IntReceiveFinalRate",
--        
--      IIRS_RECORD_STATUS "RecordStatus",
--     (select IIRL_CURRENCY_CODE from TRTRAN091A
--       where iirs_irs_number = IIRL_IRS_NUMBER
--        and IIRL_serial_number =2
--        AND iirl_record_status BETWEEN 10200001 AND 10200004) "PaymentCurrencyCode",
--      (select IIRL_CURRENCY_CODE from TRTRAN091A
--       where iirs_irs_number = IIRL_IRS_NUMBER
--        and IIRL_serial_number =1
--        AND iirl_record_status BETWEEN 10200001 AND 10200004) "ReceiveCurrencyCode"
--    FROM TRTRAN091
--    LEFT OUTER JOIN TRTRAN091B M
--    ON iirm_irs_number   = iirs_irs_number
--     WHERE IIRS_DEAL_TYPE = 80800004
--     and IIRM_Serial_number= 2 -- Payment
--     and iirm_leg_serial=decode(numCode1,0,iirm_leg_serial,numCode1)
--     and iirs_irs_number =decode(varTemp,null,iirs_irs_number,varTemp)
--    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND iirm_record_status BETWEEN 10200001 AND 10200004;
--    
--else --	Principal settlement
--
--   OPEN GENCURSOR FOR 
--    SELECT iirs_irs_number "IrsNumber",
--      iirn_serial_number "SerialNumber",
--      IIRN_effective_AMOUNT "AmountReceive",
--      IIRN_Payment_Amount "AmountPay",
--      IIRN_OUTSTANDING_Payment "OutstandingPayment",
--      IIRN_OUTSTANDING_AMOUNT "OutstandingReceive",
--      IIRS_SPOT_REFERENCE "SpotReference",
--      IIRN_EFFECTIVE_DATE "EffectiveDate",
--      NULL "IntStartDate",
--      NULL "IntEndDate",
--      0 "NoDays",
--      IIRN_SERIAL_NUMBER "SerialNumber",
--      IIRN_serial_number "LegSerial",
--      0 "IntAmount",
--      0 "FinalRate",
--      IIRS_RECORD_STATUS "RecordStatus",
--     (select IIRL_CURRENCY_CODE from TRTRAN091A
--       where iirs_irs_number = IIRL_IRS_NUMBER
--        and IIRL_serial_number =2
--        AND iirl_record_status BETWEEN 10200001 AND 10200004) "PaymentCurrencyCode",
--      (select IIRL_CURRENCY_CODE from TRTRAN091A
--       where iirs_irs_number = IIRL_IRS_NUMBER
--        and IIRL_serial_number =1
--        AND iirl_record_status BETWEEN 10200001 AND 10200004) "ReceiveCurrencyCode"
--    FROM TRTRAN091
--    LEFT OUTER JOIN TRTRAN091C
--    ON IIRN_IRS_NUMBER   = iirs_irs_number
--    where IIRS_DEAL_TYPE = 80800004
--    and iirn_serial_number=decode(numCode1,0,iirn_serial_number,numCode1)
--    and iirs_irs_number =decode(varTemp,null,iirs_irs_number,varTemp)
--    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND IIRN_RECORD_STATUS BETWEEN 10200001 AND 10200004;
--end if;
--  goto process_end;          
--End If;  

IF numinfotype = gconst.refCCIRSSettlement THEN
   
   begin
      numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/TranType',numCode);
   exception
     when others then
       numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'TranType',numCode);
   end;
   
   begin
       numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/LegSerial',numCode1);
       varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/IrsNumber',VarTemp);
   exception
     when others then 
      numCode1 :=0;
      varTemp :=null;
   end;   


  IF numCode = 81000001 THEN  --	Interest settlement

   OPEN GENCURSOR FOR 
    SELECT iirs_irs_number "IrsNumber",
      --iirs_notional_amount "NotionalAmount",
      iirm_serial_number "SerialNumber",
      pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirs_irs_number,1) "OutstandingReceive",
      pkgirs.fncIRSOutstanding(IIRM_INTSTART_DATE,IIRM_INTEND_DATE,iirs_irs_number,2) "OutstandingPayment",
      IIRS_SPOT_REFERENCE "SpotReference",
      IIRM_SETTLEMENT_DATE "SettlementDate",
      IIRM_INTSTART_DATE "IntStartDate",
      IIRM_INTEND_DATE "IntEndDate",
      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
      IIRM_SERIAL_NUMBER "SerialNumber",
      IIRM_LEG_SERIAL "LegSerial",
      --pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
     
      nvl(IIRM_INTEREST_AMOUNT,0) "IntPayAmount",
      nvl(IIRM_FINAL_RATE,0) "IntPayFinalRate",
      
           (select IIRM_INTEREST_AMOUNT from TRTRAN091B S
       where iirs_irs_number = IIRM_IRS_NUMBER
        and IIRM_serial_number =1
        and s.iirm_leg_serial= m.iirm_leg_serial
        AND iirM_record_status BETWEEN 10200001 AND 10200004) "IntReceiveAmount",
      (select IIRM_FINAL_RATE from TRTRAN091B S
       where iirs_irs_number = IIRM_IRS_NUMBER
        and IIRM_serial_number =1
        and s.iirm_leg_serial= m.iirm_leg_serial
        AND iirM_record_status BETWEEN 10200001 AND 10200004)"IntReceiveFinalRate",
        
      IIRS_RECORD_STATUS "RecordStatus",
     (select IIRL_CURRENCY_CODE from TRTRAN091A
       where iirs_irs_number = IIRL_IRS_NUMBER
        and IIRL_serial_number =2
        AND iirl_record_status BETWEEN 10200001 AND 10200004) "PaymentCurrencyCode",
      (select IIRL_CURRENCY_CODE from TRTRAN091A
       where iirs_irs_number = IIRL_IRS_NUMBER
        and IIRL_serial_number =1
        AND iirl_record_status BETWEEN 10200001 AND 10200004) "ReceiveCurrencyCode",
        IIRS_COUNTER_PARTY "BankCode"
    FROM TRTRAN091
    LEFT OUTER JOIN TRTRAN091B M
    ON iirm_irs_number   = iirs_irs_number
     WHERE IIRS_DEAL_TYPE in( 80800004,80800005,80800006)
     and IIRM_Serial_number= 2 -- Payment
     and iirm_leg_serial=decode(numCode1,0,iirm_leg_serial,numCode1)
     and iirs_irs_number =decode(varTemp,null,iirs_irs_number,varTemp)
    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND iirm_record_status BETWEEN 10200001 AND 10200004;
    
else --	Principal settlement

   OPEN GENCURSOR FOR 
    SELECT iirs_irs_number "IrsNumber",
      iirn_serial_number "SerialNumber",
      IIRN_effective_AMOUNT "AmountReceive",
      IIRN_Payment_Amount "AmountPay",
      IIRN_OUTSTANDING_Payment "OutstandingPayment",
      IIRN_OUTSTANDING_AMOUNT "OutstandingReceive",
      IIRS_SPOT_REFERENCE "SpotReference",
      IIRN_EFFECTIVE_DATE "EffectiveDate",
      NULL "IntStartDate",
      NULL "IntEndDate",
      0 "NoDays",
      IIRN_SERIAL_NUMBER "SerialNumber",
      IIRN_serial_number "LegSerial",
      0 "IntAmount",
      0 "FinalRate",
      IIRS_RECORD_STATUS "RecordStatus",
     (select IIRL_CURRENCY_CODE from TRTRAN091A
       where iirs_irs_number = IIRL_IRS_NUMBER
        and IIRL_serial_number =2
        AND iirl_record_status BETWEEN 10200001 AND 10200004) "PaymentCurrencyCode",
      (select IIRL_CURRENCY_CODE from TRTRAN091A
       where iirs_irs_number = IIRL_IRS_NUMBER
        and IIRL_serial_number =1
        AND iirl_record_status BETWEEN 10200001 AND 10200004) "ReceiveCurrencyCode",
        IIRS_COUNTER_PARTY "BankCode"
    FROM TRTRAN091
    LEFT OUTER JOIN TRTRAN091C
    ON IIRN_IRS_NUMBER   = iirs_irs_number
    where IIRS_DEAL_TYPE in( 80800004,80800005,80800006)
    and iirn_serial_number=decode(numCode1,0,iirn_serial_number,numCode1)
    and iirs_irs_number =decode(varTemp,null,iirs_irs_number,varTemp)
    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND IIRN_RECORD_STATUS BETWEEN 10200001 AND 10200004;
end if;
  goto process_end;          
End If;  
--IF numinfotype = gconst.refCCIrsDetails THEN
--   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
--   numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'SerialNumber',numCode);
--   numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'TranType',numCode);
--   numCode2 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/LegSerial',numCode2);
--  IF numCode = 81000001 THEN
--   OPEN GENCURSOR FOR 
--    SELECT iirs_irs_number "IrsNumber",
--      iirs_notional_amount "NotionalAmount",
--      IIRS_SPOT_REFERENCE "SpotReference",
--      IIRM_SETTLEMENT_DATE "SettlementDate",
--      IIRM_INTSTART_DATE "IntStartDate",
--      IIRM_INTEND_DATE "IntEndDate",
--      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
--      IIRM_SERIAL_NUMBER "SerialNumber",
--      IIRM_LEG_SERIAL "LegSerial",
--      pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
--      IIRL_CURRENCY_CODE "CurrencyCode",
--      nvl(IIRM_INTEREST_AMOUNT,0) "IntAmount1",
--      nvl(IIRM_FINAL_RATE,0) "FinalRate1",
--      IIRS_RECORD_STATUS "RecordStatus"
--    FROM TRTRAN091,TRTRAN091A,TRTRAN091B
--    WHERE iirs_irs_number = IIRL_IRS_NUMBER
--    and iirm_irs_number   = iirs_irs_number
--    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND iirl_record_status BETWEEN 10200001 AND 10200004
--    AND iirm_record_status BETWEEN 10200001 AND 10200004
--    AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER
--    and iirs_irs_number = varTemp
--    and IIRS_DEAL_TYPE = 80800004
--    AND  IIRL_BUY_SELL =  25300002
--    and IIRM_LEG_SERIAL = numCode2;
--else
--   OPEN GENCURSOR FOR 
--    SELECT iirs_irs_number "IrsNumber",
--      IIRN_PAYMENT_AMOUNT "PaymentAmount",
--      IIRS_SPOT_REFERENCE "SpotReference",
--      IIRN_EFFECTIVE_DATE "EffectiveDate",
--      NULL "IntStartDate",
--      NULL "IntEndDate",
--      0 "NoDays",
--      IIRN_SERIAL_NUMBER "SerialNumber",
--      0 "LegSerial",
--      pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
--      IIRL_CURRENCY_CODE "CurrencyCode",
--      0 "IntAmount1",
--      0 "FinalRate1",
--      IIRS_RECORD_STATUS "RecordStatus"
--    FROM TRTRAN091,TRTRAN091A,TRTRAN091C
--    where iirs_irs_number = IIRL_IRS_NUMBER
--    and IIRN_IRS_NUMBER   = iirs_irs_number
--    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND iirl_record_status BETWEEN 10200001 AND 10200004
--    AND IIRN_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND IIRS_DEAL_TYPE = 80800004
--    and iirs_irs_number = varTemp    
--    AND IIRL_BUY_SELL =  25300002
--    and IIRN_SERIAL_NUMBER = numCode1;
--    --AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER;
--end if;
--
--  goto process_end;          
--End If; 
IF numinfotype = gconst.refCCIrsDetails THEN
   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
   numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'SerialNumber',numCode);
   numCode := GCONST.FNCXMLEXTRACT(XMLDOC,'TranType',numCode);
   numCode2 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/LegSerial',numCode2);
  IF numCode = 81000001 THEN
   OPEN GENCURSOR FOR 
    SELECT iirs_irs_number "IrsNumber",
      iirs_notional_amount "NotionalAmount",
      IIRS_SPOT_REFERENCE "SpotReference",
      IIRM_SETTLEMENT_DATE "SettlementDate",
      IIRM_INTSTART_DATE "IntStartDate",
      IIRM_INTEND_DATE "IntEndDate",
      (IIRM_INTEND_DATE - IIRM_INTSTART_DATE) "NoDays",
      IIRM_SERIAL_NUMBER "SerialNumber",
      IIRM_LEG_SERIAL "LegSerial",
      pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
      IIRL_CURRENCY_CODE "CurrencyCode",
      nvl(IIRM_INTEREST_AMOUNT,0) "IntAmount1",
      nvl(IIRM_FINAL_RATE,0) "FinalRate1",
      IIRS_RECORD_STATUS "RecordStatus"
    FROM TRTRAN091,TRTRAN091A,TRTRAN091B
    WHERE iirs_irs_number = IIRL_IRS_NUMBER
    and iirm_irs_number   = iirs_irs_number
    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND iirl_record_status BETWEEN 10200001 AND 10200004
    AND iirm_record_status BETWEEN 10200001 AND 10200004
    AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER
    and iirs_irs_number = varTemp
    and IIRS_DEAL_TYPE in( 80800004,80800005,80800006)
    AND  IIRL_BUY_SELL =  25300002
    and IIRM_LEG_SERIAL = numCode2;
else
   OPEN GENCURSOR FOR 
    SELECT iirs_irs_number "IrsNumber",
      IIRN_PAYMENT_AMOUNT "PaymentAmount",
      IIRS_SPOT_REFERENCE "SpotReference",
      IIRN_EFFECTIVE_DATE "EffectiveDate",
      NULL "IntStartDate",
      NULL "IntEndDate",
      0 "NoDays",
      IIRN_SERIAL_NUMBER "SerialNumber",
      0 "LegSerial",
      pkgreturncursor.fncgetdescription(IIRL_CURRENCY_CODE,2) "Currency",
      IIRL_CURRENCY_CODE "CurrencyCode",
      0 "IntAmount1",
      0 "FinalRate1",
      IIRS_RECORD_STATUS "RecordStatus"
    FROM TRTRAN091,TRTRAN091A,TRTRAN091C
    where iirs_irs_number = IIRL_IRS_NUMBER
    and IIRN_IRS_NUMBER   = iirs_irs_number
    AND IIRS_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND iirl_record_status BETWEEN 10200001 AND 10200004
    AND IIRN_RECORD_STATUS BETWEEN 10200001 AND 10200004
    AND IIRS_DEAL_TYPE in( 80800004,80800005,80800006)
    and iirs_irs_number = varTemp    
    AND IIRL_BUY_SELL =  25300002
    and IIRN_SERIAL_NUMBER = numCode1;
    --AND IIRL_SERIAL_NUMBER = IIRM_SERIAL_NUMBER;
end if;

  goto process_end;          
End If; 


if  numinfotype = gconst.refIrsPaymentCalendar THEN
   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
   open gencursor for
   select iirp_payment_calendar_location CalendarLocation
    from trtran091d
   where iirp_irs_number= varTemp
   and iirp_record_Status not in (10200005,10200006);
  goto process_end;          
End If;  

if  numinfotype = gconst.refIrsFixingCalendar THEN
   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
   open gencursor for
   select iirF_Fixing_calendar_location FixingLocation
    from trtran091E
   where iirf_irs_number= varTemp
   and iirf_record_Status not in (10200005,10200006);

  goto process_end;          
End If;  

if numinfotype = Gconst.refIRSInterestCalculation then 

   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'IrsNumber',VARTEMP);
   numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'SerialNumber',numCode);
   numcustom := GCONST.FNCXMLEXTRACT(XMLDOC,'FinalRate',numCode);
   numCode2 := GCONST.FNCXMLEXTRACT(XMLDOC,'LegSerial',numCode2);
   
   open gencursor for 
       select  pkgIRS.fncIRSIntCalcforperiod(
                   iirm_intStart_date,iirm_intEnd_date,varTemp,numCode1, numcustom,iirl_interest_daysType) InterestAmount
        from trtran091B inner join trtran091A
         on IIRM_IRS_NUMBER= IIRL_IRS_NUMBER
         and IIRM_SERIAL_NUMBER= IIRL_SERIAL_NUMBER
        where IIRM_IRS_NUMBER= varTemp
        and IIRM_Serial_number= 1
        and IIRM_leg_serial=numCode2;
        
  goto process_end;          
End If; 
if numinfotype = Gconst.refIRSHolidayList then 

   varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'FixingCalendar',VARTEMP);
   VarTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'PaymentCalendar',VarTemp1);
   DatTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'ExecuteDate',DatTemp);
   DatTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'ExpiryDate',DatTemp1);
   VarTemp2 := GCONST.FNCXMLEXTRACT(XMLDOC,'Fixing_Payment',VarTemp2);
  
  if VarTemp2 ='Fixing' then
  
   open gencursor for 
        SELECT Hday_location_code LocationCode,Hday_calendar_date CalendarDate,
               hday_day_status DayStatus
        FROM trsystem001 WHERE 
        instr(varTemp,hday_location_code)>0
        and hday_calendar_date between DatTemp and DatTemp1
        and hday_record_Status not in (10200006)
        and hday_day_status in (26400007,26400008,26400009);
  else
       open gencursor for 
        SELECT Hday_location_code LocationCode,Hday_calendar_date CalendarDate,
               hday_day_status DayStatus
        FROM trsystem001 WHERE 
        instr(varTemp1,hday_location_code)>0
        and hday_calendar_date between DatTemp and DatTemp1
        and hday_record_Status not in (10200006)
        and hday_day_status in (26400007,26400008,26400009);
  end if;
  goto process_end;          
End If; 

--IF numinfotype = gconst.refCBFCFORMAT THEN
--  varTemp := GCONST.FNCXMLEXTRACT(XMLDOC,'RunProgram',VARTEMP);
--  select  REVERSE(substr(REVERSE(varTemp),7,3))  into varTemp2 from dual;
--  insert into temp values (varTemp,varTemp);commit;
--     OPEN GENCURSOR FOR 
--   select DEAL_COMPANY_CODE AS COMPANYCODE,
--               pkgreturncursor.fncgetdescription( DEAL_COMPANY_CODE,1) AS COMPLONGDESC,
--                        DEAL_DEAL_NUMBER AS DealNumber,
--                        DEAL_EXECUTE_DATE AS ExecuteDate,
--                        pkgreturncursor.fncgetdescription(DEAL_HEDGE_TRADE,1) AS HEDGETRADE,
--                        pkgreturncursor.fncgetdescription(DEAL_BUY_SELL,1) AS BUYSELL,
--                        pkgreturncursor.fncgetdescription(DEAL_SWAP_OUTRIGHT,1) AS SWAPOUTRIGHT,
--                        pkgreturncursor.fncgetdescription(DEAL_DEAL_TYPE,1) AS DEALTYPE,
--                        pkgreturncursor.fncgetdescription(DEAL_BASE_CURRENCY,2) AS BASECURRENCY,
--                        pkgreturncursor.fncgetdescription(DEAL_OTHER_CURRENCY,2) as OTHERCURRENCY,
--                       pkgreturncursor.fncgetdescription(DEAL_COUNTER_PARTY,1) AS COUNTERPARTY,                        
--                       DEAL_EXCHANGE_RATE AS EXRATE,
--                       DEAL_LOCAL_RATE AS LOCALRATE,
--                       DEAL_BASE_AMOUNT AS BASEAMT,
--                       DEAL_OTHER_AMOUNT AS OTHERAMOUNT,
--                       DEAL_DEALER_REMARKS AS REMARKS,
--                       DEAL_USER_REFERENCE AS USERREF,
--                       CDEL_USER_REFERENCE1 AS USERREF1,
--                       DEAL_SPOT_RATE AS Spot,
--                       DEAL_MARGIN_RATE AS Margin,
--                       DEAL_FORWARD_RATE AS Forward,
--                        pkgreturncursor.fncgetdescription(DEAL_BACKUP_DEAL,1) AS PURPOSE,
--                        pkgreturncursor.fncgetdescription(DEAL_INIT_CODE,1)  AS COMMODITY,
--                     --  pkgreturnreport.fncConvRs(decode(DEAL_OTHER_CURRENCY,'||gconst.INDIANRUPEE||',DEAL_OTHER_AMOUNT,DEAL_AMOUNT_LOCAL)) AS AMTLCL,
--                        DEAL_MATURITY_FROM AS MATURITYFROM,
--                        DEAL_MATURITY_DATE AS MATURITYDATE,LBNK_ADDRESS_1 AS BKADDR1,LBNK_ADDRESS_2 AS BKADDR2,
--                        LBNK_ADDRESS_3 AS BKADDR3,LBNK_ADDRESS_4 AS BKADDR4,LBNK_CONTACT_PERSON AS CTPERSON,
--                        LBNK_LONG_DESCRIPTION AS BANKNAME,
--                        LBNK_PHONE_NUMBERS AS PHNUMBER,
--                        LBNK_ACCOUNT_NUMBER AS ACCNO,
--                        comp_address_1 AS COMPADDR1,
--                        comp_address_2 AS COMPADDR2,
--                        comp_address_3 AS COMPADDR3,
--                        comp_address_4 AS COMPADDR4,
--                        varTemp2 as Num
--                     --  pkgreturnreport.GetSystemDate() as SystemDate ,
--                       --pkgreturnreport.getCompanyName() as CompanyName
--                from    TRTRAN001,TRMASTER306,TRMASTER301
--                where   TRMASTER306.LBNK_PICK_CODE = TRTRAN001.DEAL_COUNTER_PARTY AND
--                TRMASTER301.COMP_COMPANY_CODE=TRTRAN001.DEAL_COMPANY_CODE AND
--                        DEAL_record_status NOT IN(10200006)AND DEAL_DEAL_NUMBER=varTemp;
--    
--       goto process_end;          
--End If; 
          
          

  if numInfoType = GConst.refTradedtls then
    varOperation := 'Extracting Fixed Deposit Details';
    varTemp1 := GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/TradeReference',
              varTemp1, GConst.TYPENODEPATH);
    numTemp := GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/ReverseSerial',
              numTemp, GConst.TYPENODEPATH);

    open GenCursor for
              select BREL_TRADE_REFERENCE "TradeReference", BREL_USER_REFERENCE as "BillReference", 
                  BREL_REFERENCE_DATE as "ReferenceDate",    brel_reversal_fcy "BillAmount",
                  brel_reversal_rate "ExchangeRate",
                  brel_reversal_fcy  "Realised",
                  cdel_cancel_amount "ForwardSettle",
                  cdel_cancel_rate "SettledRate",
                  pkgreturncursor.fncgetdescription(brel_reversal_type, 1) AS "InstrumentType",
                  pkgreturncursor.fncgetdescription(Brel_local_bank, 1) AS "LocalBank",
                  BREL_REFERENCE_DATE "MaturityDate", 0 recordstatus,
                  pkgreturncursor.fncgetdescription(brel_company_code, 1) as "Company",
                  Brel_local_bank as LocalBankCode,
                  brel_reversal_rate "SpotRate",
                  BREL_REFERENCE_DATE "EntryDate",
                  Cdel_trade_Serial "SerialNumber",
                  brel_reversal_type "ReversalCode"
          FROM trtran003,trtran006
          where BREL_TRADE_REFERENCE = varTemp1
          AND CDEL_TRADE_REFERENCE = BREL_TRADE_REFERENCE
          AND BREL_REVERSE_SERIAL = numTemp
          AND CDEL_DELIVERY_SERIAL = BREL_REVERSE_SERIAL
          AND BREL_RECORD_STATUS NOT IN (10200005,10200006)
          and cdel_record_status not in (10200005,10200006);  
    Goto Process_End;
    end if;
    
 if numInfoType = GConst.refMaturityPopulate then
    numcode3 := GConst.fncXMLExtract(xmlDoc, '//Param/NewSet',
              numcode3, GConst.TYPENODEPATH);      
    if numcode3 = 1 then ---New Set
    numCode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'Tenor',numCode1); --GConst.fncXMLExtract(xmlDoc, '//CommandSet//KeyValues/Tenor',
              --numCode1, GConst.TYPENODEPATH);
    numCode2 := GConst.fncXMLExtract(xmlDoc, '//Param/DealCount',
              numCode2, GConst.TYPENODEPATH);
    DatTemp := GConst.fncXMLExtract(xmlDoc, '//Param/DeliveryStart',
              DatTemp, GConst.TYPENODEPATH);
    DatTemp1 := GConst.fncXMLExtract(xmlDoc, '//Param/Settlement',
              DatTemp1, GConst.TYPENODEPATH);
    dattemp2 := GConst.fncXMLExtract(xmlDoc, '//Param/Maturity',
              dattemp2, GConst.TYPENODEPATH);
    numFcy   := GCONST.FNCXMLEXTRACT(XMLDOC,'BaseAmount',numFcy);
    numCode  := GCONST.FNCXMLEXTRACT(XMLDOC,'DeliveryType',numCode);
    numCode4 := GConst.fncXMLExtract(xmlDoc, '//Param/BuySell',
              numCode4, GConst.TYPENODEPATH);
    numCode5 := GConst.fncXMLExtract(xmlDoc, '//Param/OptionType',
              numCode5, GConst.TYPENODEPATH);
    prcOptionMaturity(DatTemp,dattemp2,DatTemp1,numCode1,numFcy,numCode2,numCode,numCode4,numCode5);
    varOperation := 'Extracting Fixed Deposit Details';
    open GenCursor for
      select 
      --rownum "Rownum",
        OPMT_SERIAL_NUMBER "SrNo",
        OPMT_SUBSERIAL_NUMBER"SubSrNo",
        OPMT_AMOUNT_FCY "Amount",
        OPMT_MATURITY_DATE "MaturityDate",
        OPMT_SETTLEMENT_DATE "SettlementDate",
        pkgreturncursor.fncgetdescription(OPMT_BUY_SELL,2) ||'-'||pkgreturncursor.fncgetdescription(OPMT_OPTION_TYPE,2) "OptionType"
      from trsystem966;
     else---Edit ,Delete, View option
      varTemp1 := GConst.fncXMLExtract(xmlDoc, '//Param/DealNumber',
              varTemp1, GConst.TYPENODEPATH);    
      --varTemp1 := GCONST.FNCXMLEXTRACT(XMLDOC,'DealNumber',varTemp1);
      open GenCursor for
      select 
      --rownum "Rownum",
        COSM_SERIAL_NUMBER "SrNo",
        COSM_SUBSERIAL_NUMBER"SubSrNo",
        COSM_AMOUNT_FCY "Amount",
        COSM_MATURITY_DATE "MaturityDate",
        COSM_SETTLEMENT_DATE "SettlementDate",
        pkgreturncursor.fncgetdescription(COSU_BUY_SELL,2)||'-'||pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2)"OptionType"
      from trtran072a ,TRTRAN072
      where COSM_DEAL_NUMBER = varTemp1 and COSM_RECORD_STATUS not in(10200005,10200006)
      AND COSU_DEAL_NUMBER = COSM_DEAL_NUMBER AND COSM_SERIAL_NUMBER = COSU_SERIAL_NUMBER
      AND COSU_RECORD_STATUS NOT IN(10200005,10200006);
    end if;
    Goto Process_End;
    END IF;    
--    if numinfotype = gconst.refdealername then
--        varoperation := 'extracting dealer name from users table';
--        open gencursor for
--        select user_user_name,
--          user_user_id,user_email_id,user_mobile_phone,user_group_code
--        from usermaster WHERE USER_GROUP_CODE = 14200006
--        and user_record_status not in (10200005,10200006);
--        goto process_end;
--     end if;      
  if numinfotype = gconst.refdealername then
        varoperation := 'extracting dealer name from users table';
        
        Begin
        VarReference := gconst.fncxmlextract(xmldoc,'Param/UserId', VarReference);
        Exception 
            when others then 
            VarReference := '0';        
        end;
       
        select user_group_code
          into numcode1
        from usermaster
       where user_record_Status not in (10200005,10200006)
         and USER_USER_ID =varuserid;
 
     if (numcode1=14200006) then
          open gencursor for
          select rownum "Rownum", user_user_id "ID", user_user_name "Name", user_email_id "Email", 
          user_mobile_phone "Contact_Number", user_group_code "Group_Code"
           from usermaster  ma
          WHERE USER_GROUP_CODE=14200006
            and USER_USER_ID =varuserid
           and user_record_status not in (10200005,10200006);
     else
        open gencursor for
       select rownum "Rownum", user_user_id "ID", user_user_name "Name", user_email_id "Email", 
          user_mobile_phone "Contact_Number", user_group_code "Group_Code"
           from usermaster  ma
          WHERE USER_GROUP_CODE=14200006
           and USER_USER_ID = decode(VarReference,'0',USER_USER_ID,VarReference)
           and user_record_status not in (10200005,10200006);
     end if;
     
     goto process_end;
    end if; 

    if numinfotype = gconst.refProdMaturityPopulate then
      numCode2 := GConst.fncXMLExtract(xmlDoc, '//CURRENCYFUTUREPRODUCT//ProductCode',
              numCode2, GConst.TYPENODEPATH); 
              
      DatTemp1 := GConst.fncXMLExtract(xmlDoc, '//CURRENCYFUTUREPRODUCT//EffectiveDate',
              DatTemp1, GConst.TYPENODEPATH);                
    open gencursor for            
      SELECT CPRM_PRODUCT_CODE,CPRM_MATURITY_DATE "MaturityDate" 
        FROM TRMASTER503A WHERE CPRM_PRODUCT_CODE = numCode2
      AND CPRM_EFFECTIVE_DATE = DatTemp1;
    Goto Process_End;
    END IF;  
    
    if numinfotype = gconst.refcheckMatDate then
      DatTemp1 := gconst.fncxmlextract(xmldoc,   'KeyValues/Settledate',   DatTemp1);              
      open gencursor for            
        SELECT CPRM_PRODUCT_CODE,CPRM_MATURITY_DATE "MaturityDate" 
          FROM TRMASTER503A WHERE CPRM_PRODUCT_CODE = numCode2
        AND CPRM_EFFECTIVE_DATE = DatTemp1;
      Goto Process_End;
    END IF;   
    if numinfotype = gconst.refExposureEdit then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);              
      open gencursor for            
        select 
         --fncgetdescription(TRAD_PRODUCT_CATEGORY,1) "Portfolio",
         TRAD_PRODUCT_CATEGORY "Portfolio",
         TRAD_SUBPRODUCT_CODE "Subportfolio",
         TRAD_TRADE_CURRENCY "Currency",
         TRAD_LOCAL_BANK "Bank",
         TRAD_TRADE_FCY "AmountFcy",
         TRAD_REFERENCE_DATE "ReferenceDate",
         TRAD_MATURITY_DATE "DueDate",
         TRAD_USER_REFERENCE "UserRemarks",
         TRAD_TRADE_REMARKS "RequestedBy",
         TRAD_IMPORT_EXPORT "ImportExport",
         TRAD_TRADE_REFERENCE "TradeReference",
         'Edit' "RecStatus",
         TRAD_COMPANY_CODE "Company Code",
         TRAD_LOCATION_CODE "Location Code",
         TRAD_ENTRY_DATE "EntryDate"
        from trtran002 where trad_entry_date = DatTemp1 
          and trad_record_status not in(1020005,10200006);
      Goto Process_End;
    END IF;

   if numinfotype = gconst.refGetExposure then
--      numCode := gconst.fncxmlextract(xmldoc,'KeyValues/ImportExport',   numCode);        
--      numCode3 := gconst.fncxmlextract(xmldoc,'KeyValues/CounterParty',  numCode3);  
--      DatTemp  := gconst.fncxmlextract(xmldoc,'KeyValues/FromDate',  DatTemp);  
--      DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/ToDate',  DatTemp1);
      --dattemp2 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',  dattemp2);   
      
        Begin
        varTemp := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  numCode4);
        Exception 
            when others then 
            varTemp := null;        
        end;
        
                    
       Begin
        numCode2 := gconst.fncxmlextract(xmldoc,'Param/LocationCode', numCode2);  
        Exception 
            when others then 
            numCode2 := 30299999;        
        end;
        
         Begin
        numCode1 := gconst.fncxmlextract(xmldoc,'Param/TradeCurrency',  numCode1); 
        Exception 
            when others then 
            numCode1 := 30499999;        
        end;

         Begin
        numCode := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1); 
        Exception 
            when others then 
            numCode := 30699999;        
        end;
        Begin
        numCode3 := gconst.fncxmlextract(xmldoc,'Param/LocalCurrency',  numCode1); 
        Exception 
            when others then 
            numCode3 := 30499999;        
        end;
        
--        { "LocationCode", RemitRequest.LocationCode.ToString() },
--                    { "TradeCurrency", RemitRequest.TradeCurrency.ToString() },
--                    { "BusinessUnit", RemitRequest.UserPortfolio.ToString() },
--                    { "CounterParty", RemitRequest.LocalBank.ToString() },
--                    { "EntryDate", RemitRequest.EntryDate == null ? DateTime.Now.ToShortDateString() : RemitRequest.EntryDate },
--                    { "LocalCurrency", RemitRequest.LocalCurrency.ToString()},
--                    { "LocationCode", RemitRequest.LocationCode.ToString() },
--                    { "MaturityDate",RemitRequest.MaturityDate.ToString()},
--                    { "MaturityFrom", RemitRequest.MaturityFrom.ToString()}
--                    { "CrossCurrencyDelivery",RemitRequest.OtherCurrencyYesNo.ToString()},

         Begin
        DatTemp := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp1);
        Exception 
            when others then 
            DatTemp :=null;     
        end;
        
       Begin
        DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1);
        Exception 
            when others then 
            DatTemp1 := null;        
        end;
       
       Begin
        numCode6 := gconst.fncxmlextract(xmldoc,'Param/CrossCurrencyDelivery',  numCode4);
        Exception 
            when others then 
            numCode6 := 12400002;        
        end;
        
        Begin
        numCode7 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode4);
        Exception 
            when others then 
            numCode7 := 30199999;        
        end;
        
        Begin
        numCode8 := gconst.fncxmlextract(xmldoc,'Param/ImportExport',  numCode4);
        Exception 
            when others then 
            numCode8 := 25900001;        
        end;
        

     
      open gencursor for            
        SELECT rownum "Rownum", BREL_TRADE_REFERENCE "TradeReference",
          pkgReturnCursor.fncGetDescription(NVL(brel_reversal_type,25999999),1)"ImportExport",
          pkgReturnCursor.fncGetDescription(NVL(BREL_IMPORT_EXPORT,25999999),1) "ImportExport1",
          BREL_REVERSAL_FCY "BillAmount",
          BREL_REVERSAL_FCY-nvl((SELECT sum(cdel_cancel_amount)
            FROM TRTRAN006 
          WHERE CDEL_RECORD_STATUS NOT IN(10200005,10200006)
            and NVL(CDEL_TRADE_REFERENCE,0) || nvl(CDEL_TRADE_SERIAL,0) =   nvl(BREL_TRADE_REFERENCE,0)||nvl(Brel_Reverse_Serial,0)
             AND CDEL_TRADE_REFERENCE IS NOT NULL),0) "TotalAmount",
          pkgReturnCursor.fncGetDescription(NVL(brel_trade_currency,30499999),2)"BaseCurrency",
          pkgReturnCursor.fncGetDescription(NVL(brel_local_currency,30499999),2)"OtherCurrency",
          TRAD_TRADE_RATE "ExchangeRate",
--          0 AS "Spot_CashFcy",
--          0 AS "Spot_CashRate",
--          0 AS "ForwardFcy",
--          0 AS "ForwardRate",
          pkgReturnCursor.fncGetDescription(NVL(brel_local_bank,30699999),2) "Bank",
          pkgReturnCursor.fncGetDescription(NVL(brel_location_code,30299999),2) "Location",
          pkgReturnCursor.fncGetDescription(NVL(BREL_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
          pkgReturnCursor.fncGetDescription(NVL(brel_company_code,30199999),2) "Company",
          TRAD_BILL_DATE "BLDate",
          Trad_Vessel_Name "VesselName",
          Brel_entry_date "EntryDate",
          nvl(BREL_TRANSACTION_DATE,brel_maturity_date) "ValueDate",  
          BREL_REMARKS "Remarks",
          '' "ForwardReference",
          0 "BatchNo",
          0 "EDBenefit",
          0 "EDAmount",
          brel_batch_number "BatchNumber",          
          brel_reversal_type "ImportExportCode",
          brel_trade_currency "CurrencyCode",
          brel_local_currency "OtherCurrencyCode",
          0 "SpotRate",
          brel_company_code "CompanyCode",
          brel_local_bank "LocalBank",
          0 "Status",
          Brel_Reverse_Serial "SerialNumber",
          BREL_LOCATION_CODE "LocationCode",
          '' "UserReference"
        FROM TRTRAN003 inner join TRTRAN002 
        on TRAD_TRADE_REFERENCE = BREL_TRADE_REFERENCE
        WHERE BREL_RECORD_STATUS NOT IN(10200005,10200006)
        AND TRAD_RECORD_STATUS NOT IN(10200005,10200006)
        and (((varTemp is null) and 
        (Trad_company_code = decode(numCode7,30199999,Trad_company_code,numCode7)
        and  Trad_company_code in (select usco_company_code from trsystem022a
           where usco_user_id =varUserid)
        and Trad_Location_code = decode(numCode2,30299999,Trad_company_code,numCode2)
        and Trad_Trade_currency = decode(numCode1,30499999,Trad_company_code,numCode1)
        and TRAD_LOCAL_CURRENCY = decode(numCode3,30499999,TRAD_LOCAL_CURRENCY,numCode3)
        and TRAD_LOCAL_BANK = decode(numCode,30499999,TRAD_LOCAL_BANK,numCode)
        and ((numCode8 = 31700001 and trad_import_export <=25900050) or
            (numCode8 = 31700002 and trad_import_export >=25900050))
        and ((DatTemp1 is null) or  (brel_maturity_date between DatTemp and DatTemp1))))
        or ((varTemp is not null) and (BREL_DELIVERY_BATCH =varTemp)));
        
          --  ((DatTemp2 is null) or  (trad_maturity_date <= DatTemp1)));
        
--        AND to_date(BREL_ENTRY_DATE) = DatTemp2
--        AND BREL_LOCATION_CODE = numCode2
--        AND Brel_Product_Category = numCode4;
--        GROUP BY Brel_entry_date, brel_reversal_type,brel_trade_currency,
--          brel_local_currency, brel_batch_number,brel_company_code,brel_location_code,
--          brel_local_bank,BREL_TRANSACTION_DATE,brel_maturity_date,BREL_REMARKS;          
      Goto Process_End;
    END IF; 

    if numInfoType = GConst.refGetForward then
      varOperation := 'Extracting Deal Information for reversal';
      numcode := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', numcode); 
      numCode1 := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1);  
      numCode2 := GConst.fncXMLExtract(xmldoc,'Param/ImportExport', numCode2);
      numCode3 := GConst.fncXMLExtract(xmldoc,'Param/TradeCurrency', numCode3);
      numCode4 := gconst.fncxmlextract(xmldoc,'Param/BusinessUnit',  numCode4); 
      --numCode5 := GConst.fncXMLExtract(xmldoc,'Param/OtherCurrency', numCode5);
      DatTemp  := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp);  
      DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1);
      dattemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  dattemp2);
      begin 
        vartemp  := gconst.fncxmlextract(xmldoc,'Param/TradeReference',  vartemp); 
      exception 
        when others then
        vartemp := '';
      end;      
      
      begin 
        vartemp1  := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  vartemp); 
      exception 
        when others then
        vartemp1 := '';
      end;    
       
      select nvl(count(*),0) into numCode6 from trtran004,trtran001 
      where HEDG_TRADE_REFERENCE = vartemp 
      and hedg_deal_number = deal_deal_number
      and deal_record_status between 10200001 and 10200004
      and hedg_record_status between 10200001 and 10200004
      and deal_deal_type not in(25400001); 
      if numCode2 =31700001 then
        numCode2 := 25300002;
      else
        numCode2 := 25300001;
      end if;
      if numCode6 = 0 then
        Open GenCursor for
          select rownum "Rownum", deal_dealer_remarks "BankReference", deal_deal_number "DealNumber",
            deal_base_amount "BaseAmount", 
            deal_spot_rate "SpotRate",
            deal_forward_rate "Premium", 
            deal_maturity_date "MaturityDate",
            pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",            
            NVL((select sum(cdel_cancel_amount)
                 from trtran006 a
                 where a.cdel_deal_number = deal_deal_number
                 and a.cdel_deal_serial = deal_serial_number
                 and a.cdel_record_status in (10200001, 10200003,10200004)),0)"UtilizedCancelledAmount",
            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                                              Gconst.Amountfcy, dattemp2) "Outstanding",
            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                                              Gconst.Amountfcy, dattemp2) "OutstandingRunningBalance",                                              
--            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                              Gconst.Amountfcy, dattemp2) "ReverseNow", 
            0 "UtilizationAmount",
            0 "EDBenefit",
            0 "EDAmount",
            deal_exchange_rate "FinalRate", 
            0 "ProfitLoss",
            deal_execute_date "DealBookingDate",            
            deal_margin_rate "MarginRate",
            pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
            pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
            pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
            deal_execute_date "ExecuteDate",
            deal_exchange_rate "ExchangeRate",
            pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
            pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
            deal_buy_sell buySellcode,
            deal_deal_number as "HedgingWith",
            deal_other_amount "HedgedOther", 
            deal_local_rate "OtherRate",                  
            1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
            '0' "BatchNo",
            'NA' "ExposureReference",
            0 as "Status",
            deal_other_currency "OtherCurrencyCode",
            deal_counter_party "CounterPartyCode",
            deal_direct_indirect "DirectIndirect",
            deal_base_currency "BaseCurrencyCode",
            deal_exchange_rate "FinalRateCalculated"
       		from trtran001
          where  deal_Company_Code in
          (select usco_company_code from trsystem022a
           where usco_user_id =varUserid)
          and deal_record_status between 10200001 and 10200004
          and ((vartemp1 is null) and 
          (deal_company_code = numcode
          and deal_base_currency = numcode3 --and deal_other_currency = numcode5
          and deal_deal_type !=25400001
          and deal_process_complete !=12400001
          --and deal_backup_deal = numCode4
          and deal_buy_sell = numcode2
          and deal_maturity_date >=dattemp2
          and deal_execute_date <= dattemp2
          --and deal_maturity_date between DatTemp and DatTemp1
          and deal_counter_party = decode(numcode1,30699999,deal_counter_party,numcode1))
          or ((vartemp1 is not null) and (deal_deal_number in (select cdel_deal_number from trtran006 where cdel_batch_number=vartemp1))))
          order by deal_maturity_date;
          
      else
     
        Open GenCursor for
          select rownum "Rownum", deal_dealer_remarks "BankReference", deal_deal_number "DealNumber",
            deal_base_amount "BaseAmount", 
            deal_spot_rate "SpotRate",
            deal_forward_rate "Premium", 
            deal_maturity_date "MaturityDate",
            pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",            
            NVL((select sum(cdel_cancel_amount)
                 from trtran006 a
                 where a.cdel_deal_number = deal_deal_number
                 and a.cdel_deal_serial = deal_serial_number
                 and a.cdel_record_status in (10200001, 10200003,10200004)),0)"UtilizedCancelledAmount",
            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                                              Gconst.Amountfcy, dattemp2) "Outstanding",
            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                                              Gconst.Amountfcy, dattemp2) "OutstandingRunningBalance",                                              
--            pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--                                              Gconst.Amountfcy, dattemp2) "ReverseNow", 
            0 "UtilizationAmount",
            0 "EDBenefit",
            0 "EDAmount",
            deal_exchange_rate "FinalRate", 
            0 "ProfitLoss",
            deal_execute_date "DealBookingDate",            
            deal_margin_rate "MarginRate",
            pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
            pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
            pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
            deal_execute_date "ExecuteDate",
            deal_exchange_rate "ExchangeRate",
            pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
            pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",                  
            deal_buy_sell buySellcode,
            deal_deal_number as "HedgingWith",
            deal_other_amount "HedgedOther", 
            deal_local_rate "OtherRate",                  
            1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
            '0' "BatchNo",
            'NA' "ExposureReference",
            0 as "Status",
            deal_other_currency "OtherCurrencyCode",
            deal_counter_party "CounterPartyCode",
            deal_direct_indirect "DirectIndirect",
            deal_base_currency "BaseCurrencyCode",
            deal_exchange_rate "FinalRateCalculated"
       		from trtran001,trtran004
          where HEDG_TRADE_REFERENCE = vartemp
          and deal_deal_number = hedg_deal_number
          and deal_Company_Code in
          (select usco_company_code from trsystem022a
           where usco_user_id =varUserid)
          and (((vartemp1 is null) and
          (deal_record_status between 10200001 and 10200004
          and hedg_record_status between 10200001 and 10200004
          and deal_deal_type !=25400001
          and deal_process_complete !=12400001
          and deal_base_currency = numcode3 --and deal_other_currency = numcode5
          and deal_maturity_date >=dattemp2
          and deal_execute_date <= dattemp2))
          or ((vartemp1 is not null)
           and (deal_deal_number in (select cdel_deal_number from trtran006 where cdel_batch_number=vartemp1))))
          order by deal_maturity_date;
      end if;
      Goto Process_End;
    End if; 


   if numInfoType = GConst.refGetForwardCross then
      varOperation := 'Extracting Deal Information for reversal';
      numcode := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', numcode);  
      numCode1 := gconst.fncxmlextract(xmldoc,'Param/CounterParty',  numCode1); 
      numCode2 := GConst.fncXMLExtract(xmldoc,'Param/ImportExport', numCode2);
      numCode3 := GConst.fncXMLExtract(xmldoc,'Param/TradeCurrency', numCode3);
      numCode4 := gconst.fncxmlextract(xmldoc,'Param/BusinessUnit',  numCode4); 
     -- numCode5 := GConst.fncXMLExtract(xmldoc,'Param/OtherCurrency', numCode5);
      DatTemp  := gconst.fncxmlextract(xmldoc,'Param/FromDate',  DatTemp);  
      DatTemp1 := gconst.fncxmlextract(xmldoc,'Param/ToDate',  DatTemp1); 
      dattemp2 := gconst.fncxmlextract(xmldoc,'Param/EntryDate',  dattemp2);      
--      numFcy   := gconst.fncxmlextract(xmldoc,'KeyValues/ReveseAmount',  numFcy);  
--      numspot := gconst.fncxmlextract(xmldoc,'KeyValues/ExchangeRate',  numspot);
      if numCode2 > 25900049 then
        numCode2 := 25300001;
      else
        numCode2 := 25300002;
      end if;
          Open GenCursor for
               select rownum "Rownum", deal_dealer_remarks "TradeReference", deal_deal_number "DealNumber",
                  deal_base_amount "BaseAmount", 
                  NVL((select sum(cdel_cancel_amount)
                        from trtran006 a
                      where a.cdel_deal_number = deal_deal_number
                      and a.cdel_deal_serial = deal_serial_number
                      and a.cdel_record_status in (10200001, 10200003,10200004)),0)"Utilised_Canceled",
                  pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                                                    Gconst.Amountfcy, dattemp2) "Outstanding",
                  pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
                                                    Gconst.Amountfcy, dattemp2) "Outstandingason",                                                                                                  
--                  Round(numFcy * numspot,2)"ReverseNow",                                   
                  0 "UtilizationAmount", 
                  deal_spot_rate "SpotRate",
                  deal_forward_rate "Premium",
                  deal_margin_rate "MarginRate",
                  0 "EDBenefit",
                  0 "EDAmount",
                  deal_exchange_rate "FinalRate",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                  deal_maturity_date "MaturityDate", 
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  deal_execute_date "ExecuteDate",
                  deal_exchange_rate "ExchangeRate",
                  pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",                  
                  deal_other_currency "OtherCurrencyCode",
                  deal_base_currency "BaseCurrencyCode",
                  deal_buy_sell buySellcode,
                  deal_deal_number as "HedgingWith",
                  deal_other_amount "HedgedOther", 
                  deal_local_rate "OtherRate",                  
                  1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",

                  '0' "BatchNo",
                  '' "ExposureReference",
                  0 as "Status",
                  deal_exchange_rate "FinalRateCalculated"
       		from trtran001
                where  deal_Company_Code in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
                and deal_record_status in (10200001, 10200002, 10200003, 10200004)
                and deal_process_complete not in(12400002)
                and deal_company_code = numcode
                and deal_base_currency = numcode3 -- and deal_other_currency = numcode5
                and deal_deal_type not in(25400001)
                and deal_backup_deal = numCode4
                and deal_buy_sell = numcode2
                and deal_maturity_date >=dattemp2
                and deal_execute_date <= dattemp2
                --and deal_maturity_date between DatTemp and DatTemp1
                and deal_counter_party = numcode1
                order by deal_maturity_date;
      Goto Process_End;
    End if; 



   if numInfoType = GConst.refGetForwarddetails then
      Open GenCursor for
        select '' "TradeReference", '' "DealNumber", 0 "BaseAmount", 0 "Utilised_Canceled",
               0 "Outstanding", 0 "ReverseNow", 0 "SpotRate",0 "Premium",0 "MarginRate",
               0 "EDBenefit", 0 "FinalRate",'' "CounterParty",'' "BaseCurrency",'' "OtherCurrency",
               null "MaturityDate",'' "BuySell",null "ExecuteDate",0 "ExchangeRate",null "CompanyName",
               null "DealType",0 OtherCurrencycode,0 buySellcode,'' as "HedgingWith",0 "HedgedOther", 
               0 "OtherRate",1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
              '0' "BatchNo", '' "ExposureReference",0 as "Status", 0 "EDAmount"
       	from dual;
      Goto Process_End;
    End if;      
   if numinfotype = gconst.refExposureLinkDelete then
      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1); 
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
      open gencursor for            
       select 
         pkgReturnCursor.fncGetDescription(nvl(TRAD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_TRADE_CURRENCY,30499999),2) "Currency",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_LOCAL_BANK,30699999),2) "Bank",
         TRAD_TRADE_FCY "AmountFcy",
         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006
         WHERE cdel_batch_number = brel_batch_number
         AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)),0)"SettledAmount",
         BREL_REVERSAL_RATE "ReverseRate",
         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
          AND DEAL_DEAL_TYPE = 25400001
          AND cdel_batch_number = brel_batch_number),0) as "Spot_CashFcy" ,
          BREL_REVERSAL_RATE as "Spot_CashRate",
         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
          AND DEAL_DEAL_TYPE != 25400001
          AND cdel_batch_number = brel_batch_number),0) as "ForwardFcy" ,
         TRAD_REFERENCE_DATE "ReferenceDate",
         TRAD_MATURITY_DATE "DueDate",
         trad_trade_rate "ExchangeRate",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_IMPORT_EXPORT,25999999),1) "ImportExport",
         TRAD_ENTRY_DATE "EntryDate",
         TRAD_TRADE_REFERENCE "TradeReference",
         'Delete' "EditDelete",
         TRAD_COMPANY_CODE "CompanyCode",
         TRAD_LOCATION_CODE "LocationCode",
         TRAD_LOCAL_BANK "LocalBankCode",
         --TRAD_ENTRY_DATE "EntryDate",
         BREL_BATCH_NUMBER "BatchNo",
         0 as "Status",
         brel_reverse_serial "SerialNumber",
         TRAD_USER_REFERENCE "UserRemarks",
         TRAD_TRADE_REMARKS "RequestedBy",
         BREL_DELIVERY_BATCH "DeliveryBatch"
        from trtran002,trtran003 where 
          trad_trade_reference = brel_trade_reference
          and trad_record_status not in(1020005,10200006)
          and brel_record_status not in(1020005,10200006)
          and BREL_DELIVERY_BATCH = varTemp1
          --and brel_batch_number = varTemp1
          --and brel_entry_date = DatTemp1
      UNION ALL
       select 
         pkgReturnCursor.fncGetDescription(nvl(BCRD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
         pkgReturnCursor.fncGetDescription(nvl(BCRD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",
         pkgReturnCursor.fncGetDescription(nvl(BCRD_CURRENCY_CODE,30499999),2) "Currency",
         pkgReturnCursor.fncGetDescription(nvl(BCRD_LOCAL_BANK,30699999),2) "Bank",
         BCRD_SANCTIONED_FCY "AmountFcy",
         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006
         WHERE cdel_batch_number = brel_batch_number
         AND CDEL_RECORD_STATUS NOT IN(10200006,10200005)),0)"SettledAmount",
         BREL_REVERSAL_RATE "ReverseRate",
         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
          AND DEAL_DEAL_TYPE = 25400001
          AND cdel_batch_number = brel_batch_number),0) as "Spot_CashFcy" ,
          BREL_REVERSAL_RATE as "Spot_CashRate",
         NVL((SELECT SUM(CDEL_CANCEL_AMOUNT) FROM TRTRAN006,TRTRAN001 
          WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER
          AND CDEL_RECORD_STATUS NOT IN(10200005,10200006) 
          AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
          AND DEAL_DEAL_TYPE != 25400001
          AND cdel_batch_number = brel_batch_number),0) as "ForwardFcy" ,
         BCRD_SANCTION_DATE "ReferenceDate",
         BCRD_DUE_DATE "DueDate",
         BCRD_CONVERSION_RATE "ExchangeRate",
         pkgReturnCursor.fncGetDescription(nvl(25900073,25999999),1) "ImportExport",
         BCRD_SANCTION_DATE "EntryDate",
         BCRD_BUYERS_CREDIT "TradeReference",
         'Delete' "EditDelete",
         BCRD_COMPANY_CODE "CompanyCode",
         BCRD_LOCATION_CODE "LocationCode",
         BCRD_LOCAL_BANK "LocalBankCode",
         --BCRD_SANCTION_DATE "EntryDate",
         BREL_BATCH_NUMBER "BatchNo",
         0 as "Status",
         brel_reverse_serial "SerialNumber",
         BCRD_SANCTION_REFERENCE "UserRemarks",
         BCRD_LOAN_REMARKS "RequestedBy",
         BREL_DELIVERY_BATCH "DeliveryBatch"
        from trtran045,trtran003 where 
          BCRD_BUYERS_CREDIT = brel_trade_reference
          and bcrd_record_status not in(1020005,10200006)
          and brel_record_status not in(1020005,10200006)
          and BREL_DELIVERY_BATCH = varTemp1;
          --and brel_batch_number = varTemp1;
          --and brel_entry_date = DatTemp1;
      Goto Process_End;
    END IF;  

   if numinfotype = gconst.refDealLinkDelete then
      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1);  
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
      open gencursor for            
               select deal_dealer_remarks "TradeReference", deal_deal_number "DealNumber",
                  deal_exchange_rate "BaseRate",
                  deal_base_amount "BaseAmount", 
                  cdel_cancel_amount "Reversed",
                  0.00 "ReverseNow",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                  deal_other_amount "HedgedOther", 
                  deal_local_rate "OtherRate",
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
                  pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                  deal_other_currency "OtherCurrencycode",deal_buy_sell "buySellcode",deal_deal_number as "HedgingWith",
                  1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                  round(deal_spot_rate,4) "SpotRate",
                  round(deal_forward_rate,4) "Premium",
                  round (deal_margin_rate,4) "MarginRate",
                  0 "EDBenefit",
                  round (deal_exchange_rate,4) "FinalRate",
                  deal_execute_date "ExecuteDate",
                  deal_maturity_date "MaturityDate",
                  cdel_BATCH_NUMBER "BatchNo",
                  '' "ExposureReference",
                  0 as "Status"
       		from trtran001,trtran006
                where  deal_Company_Code in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
                  and deal_deal_number = cdel_deal_number
                  and cdel_record_status not in(10200005,10200006)
                  and cdel_batch_number = varTemp1
                  AND deal_other_currency = 30400003
                  --and hedg_linked_date = DatTemp1
                and deal_record_status not in(10200005,10200006);
                Goto Process_End;
    END IF;     
    
   if numinfotype = gconst.refDealLinkDeletecross then
      --DatTemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/EntryDate',   DatTemp1);  
      --varTemp1 := gconst.fncxmlextract(xmldoc,'Param/BatchNumber',  varTemp1);  
      varTemp1 := gconst.fncxmlextract(xmldoc,'Param/DeliveryBatch',  varTemp1);
      open gencursor for            
               select deal_dealer_remarks "TradeReference", deal_deal_number "DealNumber",
                  deal_exchange_rate "BaseRate",
                  deal_base_amount "BaseAmount", 
                  cdel_cancel_amount "Reversed",
                  0.00 "ReverseNow",
                  pkgReturnCursor.fncGetDescription(deal_base_currency,2) "BaseCurrency",
                  pkgReturnCursor.fncGetDescription(deal_other_currency,2) "OtherCurrency",
                  deal_other_amount "HedgedOther", 
                  deal_local_rate "OtherRate",
                  pkgReturnCursor.fncGetDescription(deal_buy_sell, 1) "BuySell",
                  pkgReturnCursor.fncGetDescription(deal_deal_type,1) "DealType",
                  pkgReturnCursor.fncGetDescription(deal_counter_party,2) "CounterParty",
                  pkgReturnCursor.fncGetDescription(deal_company_code, 2) "CompanyName",
                  deal_other_currency "OtherCurrencycode",deal_buy_sell "buySellcode",deal_deal_number as "HedgingWith",
                  1 as "SerialNumber",0 "SubserialNumber",0 "RecordStatus",
                  round(deal_spot_rate,4) "SpotRate",
                  round(deal_forward_rate,4) "Premium",
                  round (deal_margin_rate,4) "MarginRate",
                  0 "EDBenefit",
                  round (deal_exchange_rate,4) "FinalRate",
                  deal_execute_date "ExecuteDate",
                  deal_maturity_date "MaturityDate",
                  CDEL_BATCH_NUMBER "BatchNo",
                  '' "ExposureReference",
                  0 as "Status"
       		from trtran001,trtran006
                where  deal_Company_Code in
                (select usco_company_code from trsystem022a
                  where usco_user_id =varUserid)
                  and deal_deal_number = cdel_deal_number
                  and CDEL_record_status not in(10200005,10200006)
                  and CDEL_batch_number = varTemp1
                  AND DEAL_DEAL_TYPE != 25400001
                  AND deal_other_currency != 30400003
                  --and hedg_linked_date = DatTemp1
                and deal_record_status not in(10200005,10200006);
                Goto Process_End;
    END IF;           
    -----data upload--
    
 if numinfotype =gconst.REFGETSYNONYMNAME then
OPEN Gencursor FOR 
   SELECT load_data_name,LOAD_SYNONYM_NAME,LOAD_SERIAL_NUMBER 
     from trsystem969
     where load_record_Status not in (10200005,10200006);

    Goto Process_End; 
 end if;

if numinfotype=gconst.REFGETXMLFIELD then
     varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
 Open GenCursor for
       select FLDP_TABLE_SYNONYM  AS SYNONYMNAME,FLDP_TOOLTIP_TEXT AS TOOLTIPTEXT,FLDP_XML_FIELD AS XMLFIELD,
              FLDP_SHOW_YN AS SHOWYN,FLDP_DISPLAY_YN AS DISPALYYN,FLDP_COLUMN_ID AS SERIALNO
        FROM TRSYSTEM999 WHERE FLDP_TABLE_SYNONYM=varTemp AND FLDP_SHOW_YN = 'Y' ORDER BY FLDP_COLUMN_ID;
 Goto Process_End;
end if;

if numinfotype=gconst.REFGETXMLFIELDCLOUD then
     varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
     numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);
     
 Open GenCursor for
      SELECT synonymname,tooltiptext,columnname,xmlfield,datatype,
             columnwidth,pickgroup,showyn,iseditable,displayname,
             serialno,decode(listrange,'0','0',ROWNUM ||'='||listrange) AS listrange 
             FROM  
             ( SELECT locl_data_name  AS synonymname,pkgreturncursor.fncgetdescription(locl_column_editable,1) AS iseditable ,
                 pkgreturncursor.fncgetdescription(locl_data_type,1) AS datatype, 
                 locl_tool_tip AS tooltiptext,locl_destination_column AS columnname,
                 locl_source_column AS xmlfield,  locl_pick_group AS pickgroup ,locl_column_width AS columnwidth ,
                 decode( locl_record_status ,12400001,'True','False') AS showyn, 
                 tr968.locl_display_name AS displayname , locl_column_id AS serialno, nvl(sel2.excelrange,0) AS listrange
      --As per the requirement, this query avoids dependency on TRSYSTEM999
              FROM trsystem968 tr968
             LEFT OUTER JOIN 
          (SELECT t2.pickgroup,t2.excelrange FROM (SELECT t1.shortdescription,t1.longdescription,t1.pickgroup, 
             CASE t1.itemcnt WHEN 1 THEN 'B'||to_number(ROWNUM +1)||':B'||(ROWNUM+t1.totalcnt) ELSE '0' END AS excelrange 
             FROM(   SELECT  t3.pick_short_description  AS shortdescription,
                        t3.pick_long_description AS longdescription,   t3.pick_key_group AS pickgroup,
                        row_number() OVER (PARTITION BY t3.pick_key_group ORDER BY t3.pick_short_description ASC) AS itemcnt,
                        COUNT(*) OVER (PARTITION BY t3.pick_key_group) totalcnt
                  FROM trmaster001 t3
                 WHERE t3.pick_key_group IN 
                 (SELECT DISTINCT locl_pick_group FROM trsystem968 t4 
                    WHERE t4.locl_data_name = vartemp 
                    AND locl_record_status = 12400001 AND locl_pick_group <> 0)
                    AND t3.pick_key_number NOT IN (0) 
                    AND t3.pick_record_status NOT IN (10200005,10200006)) t1 ) t2 
                    --AND decode(t3.pick_company_code,30199999,numcode,t3.pick_company_code)= numcode) t1 ) t2 
            WHERE t2.excelrange <> '0') sel2 
            ON locl_pick_group = sel2.pickgroup
          WHERE tr968.locl_data_name = vartemp 
          AND tr968.locl_record_status = 12400001 ORDER BY tr968.locl_column_id);

--     select SYNONYMNAME,TOOLTIPTEXT,COLUMNNAME,XMLFIELD,PICKGROUP,SHOWYN,DISPALYYN,SERIALNO,decode(LISTRANGE,'0','0',rownum ||'='||LISTRANGE) as LISTRANGE from  ( select FLDP_TABLE_SYNONYM  as SYNONYMNAME,FLDP_TOOLTIP_TEXT as TOOLTIPTEXT,FLDP_COLUMN_NAME as COLUMNNAME,FLDP_XML_FIELD as XMLFIELD,
--FLDP_PICK_GROUP AS PICKGROUP ,  FLDP_SHOW_YN AS SHOWYN,FLDP_DISPLAY_YN AS DISPALYYN,FLDP_COLUMN_ID AS SERIALNO, NVL(SEL2.EXCELRANGE,0) AS LISTRANGE
--from TRSYSTEM999 TR999 left outer join 
--(select T2.PICKGROUP,T2.EXCELRANGE from (select T1.SHORTDESCRIPTION,T1.LONGDESCRIPTION,T1.PICKGROUP, case T1.ITEMCNT when 1 then 'B'||to_number(rownum +1)||':B'||(rownum+T1.TOTALCNT) else '0' end as EXCELRANGE  from(
--select  T3.PICK_SHORT_DESCRIPTION  as SHORTDESCRIPTION,
--T3.PICK_LONG_DESCRIPTION as LONGDESCRIPTION,
--T3.PICK_KEY_GROUP as PICKGROUP,
--ROW_NUMBER() over (partition by T3.PICK_KEY_GROUP order by T3.PICK_SHORT_DESCRIPTION asc) as ITEMCNT,
--count(*) over (partition by T3.PICK_KEY_GROUP) TOTALCNT
--from TRMASTER001 T3
--where T3.PICK_KEY_GROUP in (select distinct FLDP_PICK_GROUP from TRSYSTEM999 T4 where T4.FLDP_TABLE_SYNONYM = varTemp and FLDP_SHOW_YN = 'Y' and FLDP_PICK_GROUP <> 0)
--and T3.PICK_KEY_NUMBER not in (0) 
--and T3.PICK_RECORD_STATUS not in (10200005,10200006) 
--and DECODE(T3.PICK_COMPANY_CODE,30199999,numcode,T3.PICK_COMPANY_CODE)= numcode
--
--) T1 ) T2 where T2.EXCELRANGE <> '0') SEL2 on FLDP_PICK_GROUP = SEL2.PICKGROUP
--where TR999.FLDP_TABLE_SYNONYM = varTemp and TR999.FLDP_SHOW_YN = 'Y' order by TR999.FLDP_COLUMN_ID);
--

 Goto Process_End;
end if;


 if numinfotype =gconst.refgetsynonymdetailscloud then
OPEN Gencursor FOR 
   SELECT  
LOAD_DATA_NAME AS dataname,
LOAD_DATA_FILE AS filename,
LOAD_FILE_PATH AS filepath,
LOAD_BACKUP_FOLDER AS backupfolder,
LOAD_FILE_FORMAT AS fileformat,
LOAD_RUN_PROGRAM AS runprogram,
LOAD_STAGING_TABLE AS firststagingtable,
LOAD_ZIP_STATUS AS iszip,
LOAD_RECORD_STATUS AS recordstatus,
LOAD_SHEET_RANGE AS sheetrange,
LOAD_COMP_QUERY AS compquery,
LOAD_SYNONYM_NAME  AS synonymname,
LOAD_USER_PASSWORD AS userpassword,
LOAD_USER_ID AS userid,
LOAD_SERIAL_NUMBER as serialnumber,
LOAD_STAGING_TABLE_TWO AS secondstagingtable,
LOAD_STAGING_TABLE_ARCHIVE  AS archivestagingtable,
LOAD_PROCESS_WHILE_ERR as processyn
     from trsystem969
     WHERE load_record_Status NOT IN (10200005,10200006)
     and upper(LOAD_SYNONYM_NAME) = upper(varEntity);
    

    Goto Process_End; 
 end if;


if numinfotype=gconst.refbulkuploaddata then
    varOperation := 'Bulk Upload ';
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    select LOAD_RUN_PROGRAM 
     into VarTemp1
    from trsystem969 
    where load_data_name=varTemp;
    
    delete from temp;
    insert into temp values ( 'Begin ' || VarTemp1 || '; end;', 'Begin ' || VarTemp1 || '; end;');
    commit;
    
   execute immediate  'Begin ' || VarTemp1 || '; end;';
    Goto Dummy_cursor;
  end if;


  if numinfotype=gconst.refgetmasterlist then
  
    open Gencursor for
      select distinct pick_short_description ShortDesc, Pick_key_group KeyGroup
      from trmaster001 
      where pick_key_number=0 
        and pick_key_group in (select fldp_pick_group from 
                                trsystem999
                                where fldp_table_synonym =varEntity)
      order by pick_short_description;
      Goto Process_End;
    end if;
--    

 if numinfotype=gconst.refgetmasterdata then
    varOperation := 'Master Data Load ';
     
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);

    open Gencursor for
     select  pick_short_description  "Short Description",
             pick_long_description "Long Description" 
      from trmaster001 
      where pick_key_group= VarTemp 
      and pick_key_number not in (0) 
      and pick_record_status not in (10200005,10200006) 
      and decode(pick_company_code,30199999,numcode,pick_company_code)=numcode; 
    
  Goto Process_End;
  end if;

if numinfotype=gconst.refclearstagingtabledata then
 varOperation := 'Clear Staging Table Data ';
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
     insert into temp values (varTemp,varTemp); commit;
     
    select LOAD_STAGING_TABLE 
      into varTemp1  
     FROM TRSYSTEM969
    where load_data_name=varTemp;
    insert into temp values (' delete from ' || varTemp1 || ' ; Commit;',' delete from ' || varTemp1 || ' ; Commit;'); commit;
    execute immediate ' Begin delete from ' || varTemp1 || '; Commit; end; ';
  
  
    Goto dummy_cursor;
end if;


  If Numinfotype=Gconst.Refvalidatestagingtabledata Then
   varOperation := 'Validate Staging Table Data ';
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    select LOAD_COMP_QUERY 
     into varTemp 
    from trsystem969
    where LOAD_DATA_NAME=varTemp;
    
    open gencursor  for     
    SELECT COUNT(*) as NOOFROWS,SUM(AMOUNTFCY) as AMOUNTFCY 
     FROM TRSTAGING015 ;
    
     Goto Process_End;
  end if;

--RefCursor to fetch master data from trmaster001 added by Rishi
 if numinfotype=gconst.refgetmasterdataCloud then
    varOperation := 'Master Data Load ';
 
   varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);

    open Gencursor for
    
     select t2.ShortDescription,t2.LongDescription 
     from 
       (select t1.ShortDescription,t1.LongDescription,t1.PickGroup,
           case t1.itemcnt when 1 then 'B'||to_number(rownum+1)||':B'||(rownum+t1.totalcnt) else '0' end as excelrange  
       from(
            select  t3.pick_short_description  as ShortDescription,
                  t3.pick_long_description as LongDescription,
                  t3.pick_key_group as PickGroup,
                  ROW_NUMBER() OVER (partition by t3.pick_key_group order BY t3.pick_short_description asc) as itemcnt,
                  count(*) OVER (partition by t3.pick_key_group) totalcnt
            from trmaster001 t3
            where t3.pick_key_group in 
            (select distinct LOCL_PICK_GROUP from TRSYSTEM968 T4 
              where T4.LOCL_DATA_NAME = varTemp and LOCL_RECORD_STATUS = 12400001 and LOCL_PICK_GROUP <> 0)
            and t3.pick_key_number not in (0) 
            And T3.Pick_Record_Status Not In (10200005,10200006) 
            --and decode(t3.pick_company_code,30199999,numcode,t3.pick_company_code)= numcode
            ) t1) t2;
    
-- select t2.ShortDescription,t2.LongDescription from (select t1.ShortDescription,t1.LongDescription,t1.PickGroup, case t1.itemcnt when 1 then 'B'||to_number(rownum+1)||':B'||(rownum+t1.totalcnt) else '0' end as excelrange  
-- from(
--select  t3.pick_short_description  as ShortDescription,
--t3.pick_long_description as LongDescription,
--t3.pick_key_group as PickGroup,
--ROW_NUMBER() OVER (partition by t3.pick_key_group order BY t3.pick_short_description asc) as itemcnt,
--count(*) OVER (partition by t3.pick_key_group) totalcnt
--from trmaster001 t3
--where t3.pick_key_group in (select distinct FLDP_PICK_GROUP from TRSYSTEM999 T4 where T4.FLDP_TABLE_SYNONYM = varTemp and FLDP_SHOW_YN = 'Y' and FLDP_PICK_GROUP <> 0)
--and t3.pick_key_number not in (0) 
--and t3.pick_record_status not in (10200005,10200006) 
--and decode(t3.pick_company_code,30199999,numcode,t3.pick_company_code)= numcode) t1) t2;


    
  Goto Process_End;
  end if;


--RefCursor to fetch file upload details from traudit001 table added by Rishi
 IF numinfotype=gconst.refgetfileuploaddetailscloud THEN
    varOperation := 'Fetch file upload details from audit table';
 
 varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
--    numcode := gconst.fncxmlextract(xmldoc,'Comapny',numcode);

    Open Gencursor For
 Select 
Data_File_Name As FILENAME,
Data_Update_Date As UPDATEDATE,
data_synonym_name AS synonymname,
pkgreturncursor.fncgethumanreadablefilesize(Data_File_Size) As FILESIZE,
Data_File_Modifieddate as FILEMODIFIEDDATE,
Data_Rows_Processed   As ROWSPROCESSED,
Data_Rows_Notprocessed As Rowsnotprocessed,
data_upload_remarks AS uploadremarks,
DATA_KEY_GUID AS FileGuid
from traudit001 where data_synonym_name  = varTemp  order by DATA_UPLOAD_TIMESTAMP desc;
  GOTO process_end;
  end if;


--RefCursor to fetch uploded file details from staging table added by Rishi
 IF numinfotype=gconst.refgetfiledetailscloud THEN
    varOperation := 'Fetch file upload details from archive table';
   varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    VarTemp2 := gconst.fncxmlextract(xmldoc,'FileGuid',VarTemp2);
--select  LOAD_STAGING_TABLE_ARCHIVE  into VarTemp1   
-- from trsystem969
--     WHERE load_record_Status NOT IN (10200005,10200006)
--     AND UPPER(LOAD_SYNONYM_NAME) = UPPER(varTemp);
   sqlQuery :=  'SELECT *  FROM ' || varTemp || '  WHERE GUID = '|| '''' || TRIM(VarTemp2) || '''' ||' ' ;
   --INSERT INTO rtemp (TT) VALUES(sqlQuery); COMMIT;    
  --EXECUTE IMMEDIATE sqlQuery ; 
  
    OPEN Gencursor FOR sqlQuery;
 --Select  * from TRSTAGING015;

   
  Goto Process_End;
  end if;



 if numinfotype=gconst.refgetmasterdata1 then
    varOperation := 'Master Data Load1 ';
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);   
    select min(pick_key_group) into VarTemp1  from trmaster001  where pick_short_description=varTemp;   
  open Gencursor for
   select  pick_short_description  "Short Description",pick_long_description "Long Description" from trmaster001 where 
   pick_key_group=VarTemp1 and pick_key_number not in (0) and pick_record_status not in 10200006;
  Goto Process_End;
  end if;


 if numinfotype=gconst.refValidatestagingtabledata1 then
   varOperation := 'Validate Staging Table Data1 ';
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    select LOAD_COMP_QUERY 
     into varTemp 
    from trsystem969
    where LOAD_DATA_NAME=varTemp;
    
    open gencursor  for     
    SELECT COUNT(*) as NOOFROWS,SUM(AMOUNTFCY) as AMOUNTFCY 
     FROM TRSTAGING016 ;
    
     Goto Process_End;
  end if;
  
  
   IF NUMINFOTYPE=GCONST.REFGETFUTURESDATA THEN    
    VAROPERATION := 'Validate Staging Table Data1 ';
    DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
    Open Gencursor For      
        SELECT  
        PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_BROKER_NAME,2) "BrokerName",
        PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_EXCHANGE_TYPE,2) "Exchange",
        Intc_Expiry_Date "ExpiryDate",
        INTC_BUY_QTY "BuyQty",
        INTC_BUY_RATE "BuyRate",
        Intc_Sell_Qty "SellQty",
        Intc_Sell_Rate "SellRate",
        Intc_Party_Code "PartyCode",
        Pkgreturncursor.Fncgetdescription(Intc_Party_Name,2) "PartyName",
        Intc_Option_Type "OptionType",
        INTC_STRIKE_PRICE "StrikePrice",       
        Pkgreturncursor.Fncgetdescription(Intc_Base_currency,2) "BaseCurrency",
         Pkgreturncursor.Fncgetdescription(Intc_other_currency,2) "OtherCurrency",        
        Intc_Buy_Amount "BuyAmount",       
        Intc_Sell_Amount "SellAmount",
        INTC_NET_QTY "NetQty",  
        INTC_REFSTA_NUMBER "RefNumber",
        'Split' "Status",0 "SrNo",
        Intc_Exchange_Type Exchangecode,
        INTC_BASE_CURRENCY CURRENCYCODE,
        Intc_other_currency OtherCurrencycode,
        INTC_PARTY_NAME PARTYNAMECODE,
        Intc_Broker_Name BrokerCode,
        INTC_PRODUCT_CODE PRODUCTCODE  
    FROM TRTRAN103 WHERE INTC_RECORD_STATUS NOT IN (10200005,10200006)
    and intc_create_date=DatTemp1
    and  intc_refsta_number IN (SELECT intc_refsta_number FROM TRTRAN102 A WHERE intc_record_status NOT IN (10200005,10200006))
    union all
            SELECT  
        PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_BROKER_NAME,2) "BrokerName",
        PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_EXCHANGE_TYPE,2) "Exchange",
        Intc_Expiry_Date "ExpiryDate",
        INTC_BUY_QTY "BuyQty",
        INTC_BUY_RATE "BuyRate",
        Intc_Sell_Qty "SellQty",
        Intc_Sell_Rate "SellRate",
        Intc_Party_Code "PartyCode",
        Pkgreturncursor.Fncgetdescription(Intc_Party_Name,2) "PartyName",
        Intc_Option_Type "OptionType",
        INTC_STRIKE_PRICE "StrikePrice",       
        Pkgreturncursor.Fncgetdescription(Intc_Base_currency,2) "BaseCurrency",
         Pkgreturncursor.Fncgetdescription(Intc_other_currency,2) "OtherCurrency",        
        Intc_Buy_Amount "BuyAmount",       
        Intc_Sell_Amount "SellAmount",
        INTC_NET_QTY "NetQty",  
        INTC_REFSTA_NUMBER "RefNumber",
        'NotSplit' "Status",0 "SrNo",
        Intc_Exchange_Type Exchangecode,
        INTC_BASE_CURRENCY CURRENCYCODE,
        Intc_other_currency OtherCurrencycode,
        INTC_PARTY_NAME PARTYNAMECODE,
        Intc_Broker_Name BrokerCode,
        INTC_PRODUCT_CODE PRODUCTCODE  
    FROM TRTRAN103 WHERE INTC_RECORD_STATUS NOT IN (10200005,10200006)
    and intc_create_date=DatTemp1
    and  intc_refsta_number NOT IN (SELECT intc_refsta_number FROM TRTRAN102 A WHERE intc_record_status NOT IN (10200005,10200006))
    ;
--    AND INTC_REFSTA_NUMBER NOT IN (SELECT INTC_REFSTA_NUMBER FROM TRTRAN102 
--    where INTC_RECORD_STATUS NOT IN (10200005,10200006));
    Goto Process_End;
    END If;
    
      IF NUMINFOTYPE=GCONST.REFLOADFUTURESDATA THEN
   --  VAROPERATION := 'Validate Staging Table Data1 ';
    DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
    Open Gencursor For
    Select        
        PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_EXCHANGE_TYPE,2) "Exchange",
        Pkgreturncursor.Fncgetdescription(Intc_Broker_Name,2) "BrokerName",
        Pkgreturncursor.Fncgetdescription(INTC_BUY_SELL,1) "BuySell",      
        Intc_Quantity "Quantity",
        Intc_Rate "Rate",
        INTC_AMOUNT "Amount",
        to_date(Intc_Expiry_Date,'dd/MM/yy') "ExpiryDate",
         Nvl(Pkgreturncursor.Fncgetdescription(Intc_Classification_Code,2),'') "Classification",  
        Pkgreturncursor.Fncgetdescription(Intc_Base_currency,2) "BaseCurrency",
        Pkgreturncursor.Fncgetdescription(Intc_Other_currency,2) "OtherCurrency",
        Intc_Option_Type "OptionType",
        INTC_STRIKE_PRICE "StrikePrice", 
        Intc_Party_Code "PartyCode",
        Pkgreturncursor.Fncgetdescription(Intc_Party_Name,2) "PartyName",         
        Intc_Reference_Number "Refnumber",
        INTC_REFSTA_NUMBER	"RefStaNumber",
        Intc_Exchange_Type "Exchangecode",
        Intc_Base_currency "Currencycode",
        Intc_Other_currency "OtherCurrencyCode",
        Intc_Party_Name "Partynamecode",    
        INTC_CLASSIFICATION_CODE "ClassificationCode" ,
        Intc_Broker_Name "BrokerCode",
        INTC_BUY_SELL "BuySellCode",
        intc_product_code "ProductCode",
        10200001 "RecordStatus"
    FROM TRTRAN102 WHERE INTC_RECORD_STATUS NOT IN (10200005,10200006)
    -- and Intc_Classification_Code=0;
       and intc_business_unit=0
       and intc_deal_number is null
       and intc_create_date=DatTemp1;
    Goto Process_End;
    END If;
    
     If Numinfotype=Gconst.Refloadfuturedeals Then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
      Open Gencursor For
        Select         
        Pkgreturncursor.Fncgetdescription(Intc_Exchange_Type,2) "Exchange",
        Pkgreturncursor.Fncgetdescription(Intc_Broker_Name,2) "BrokerName",
        Nvl(Pkgreturncursor.Fncgetdescription(Intc_Business_Unit,2),'') "BusinessUnit",
        Nvl(Pkgreturncursor.Fncgetdescription(Intc_Profit_Center,2),'') "ProfitCenter",   
        PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_BUY_SELL,2) "BuySell",
        INTC_QUANTITY "NoOfLots",
        (INTC_QUANTITY*1000) "LotQuantity",
        Intc_Rate "Rate",
        INTC_AMOUNT "Amount",
        TO_DATE(INTC_EXPIRY_DATE,'dd/MM/yy') "ExpiryDate",
        to_date(INTC_EXPIRY_DATE,'dd/MM/yy') "SettlementDate",
        Pkgreturncursor.Fncgetdescription(Intc_base_currency,2) "BaseCurrency",
        Pkgreturncursor.Fncgetdescription(Intc_other_currency,2) "OtherCurrency",
        Intc_Dealer_Name "DealerName",
        INTC_COUNTER_DEALER "CounterDealer",
        NVL(INTC_SPOT_RATE,0) "SpotRate",
        NVL(INTC_FORWARD_RATE,0) "ForwardRate",
        NVL(INTC_MARGIN_RATE,0) "MarginRate",
        NVL(INTC_ALLIN_RATE,0) "All_inRate",
        intc_deal_number "DealNumber",
        Nvl(Pkgreturncursor.Fncgetdescription(Intc_Classification_Code,2),'') "Classification",
        Pkgreturncursor.Fncgetdescription(Intc_Party_Name,2) "PartyName", 
        Intc_Option_Type "OptionType",
        INTC_STRIKE_PRICE "StrikePrice",
        Intc_Party_Code "PartyCode",          
        Intc_Reference_Number "RefNumber",
        INTC_REFSTA_NUMBER	"RefStaNumber",
        INTC_EXCHANGE_TYPE "Exchangecode",
        Intc_base_currency "Currencycode",
        Intc_other_currency "OtherCurrencycode",
        Intc_Party_Name "Partynamecode",    
        Intc_Classification_Code "ClassificationCode" ,
        Intc_Business_Unit  "BusinessUnitCode",
        INTC_PROFIT_CENTER  "ProfitCenterCode",
        INTC_PRODUCT_CODE "ProductCode",
        INTC_BUY_SELL "BuySellCode",
        Intc_Broker_Name "BrokerCode",
        10200001 "RecordStatus"
    FROM TRTRAN102 WHERE INTC_RECORD_STATUS NOT IN (10200005,10200006)
       AND INTC_CREATE_DATE=DATTEMP1
       AND (INTC_QUANTITY)!=0;
       --and intc_Deal_number is null;
    Goto Process_End;
    End If;
    
    
       if numinfotype=gconst.REFGETEXISTFUTUREDATA then
     varOperation := 'Validate Staging Table Data1 ';
    varTemp := gconst.fncxmlextract(xmldoc,'RunProgram',varTemp);
    open gencursor for
    select
          pkgreturncursor.fncgetdescription(intc_exchange_type,2) "Exchange",
          PKGRETURNCURSOR.FNCGETDESCRIPTION(INTC_BROKER_NAME,2) "BrokerName",
          pkgreturncursor.fncgetdescription(intc_buy_sell,2) "BuySell",
          intc_quantity "Quantity",
          intc_rate "Rate",
          intc_amount "Amount",
          intc_expiry_date "ExpiryDate", 
          intc_party_code "PartyCode",
          intc_party_name "PartyName",
          intc_option_type "OptionType",
          intc_strike_Price "StrikePrice",                   
          Intc_base_currency "BaseCurrency",
          intc_other_currency "OtherCurrency",
          intc_refsta_number "RefNumber",          
          '' "Status",
          0 "Srno"
     from trtran102 where intc_refsta_number=varTemp
     and intc_record_status not in (10200005,10200006);
 Goto Process_End;
End If;

-- IF numinfotype = gconst.REFEXPOUTDETAILS THEN
--        varoperation := 'Extracting Linking Details';
--              numcode := gconst.fncxmlextract(xmldoc,'BuySell',numcode);
--              numcode1 :=gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode1);
--              numcode2 :=gconst.fncxmlextract(xmldoc,'OtherCurrency',numcode2);  
--              datTemp :=gconst.fncxmlextract(xmldoc,'ExpiryDate',datTemp);
--           --   numcode3:=gconst.fncxmlextract(xmldoc,'Counterparty',numcode3);
--         Open Gencursor For  
--                  select 
--                  fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_counter_party,2) "CounterParty",
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                   pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "BaseAmount",
--                  0 "CancelAmount",
--                  0 "CancelRate",
--                  0 "SpotRate",
--                  0 "ForwardRate",
--                  0 "ProfitLoss",
--                  pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",   
--                  0 "EDChanges",
--                  deal_maturity_date "CashFlowDate",
--                  DEAL_EXECUTE_DATE "ExecuteDate",
--                  round(nvl(deal_spot_rate,0),4) "SpotRate",
--                  round(nvl(deal_forward_rate,0),4) "ForwardRate",
--                  round (nvl(deal_margin_rate,0),4) "MarginRate",           
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid   
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,                 
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                  deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",
--                  Deal_Hedge_Trade "HedgeTrade",
--                  deal_deal_number "DealNumber",
--                  fncgetdescription(deal_Company_code,2) "Company",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp", 
--                  (select user_user_name 
--                     from usermaster 
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_dealer_remarks "Remarks",                
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Initiator",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "Trader",
--                 Deal_Bank_Reference "BankReference", 
--                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade",
--                deal_Company_code "CompanyCode",
--                deal_other_currency "OtherCurrencyCode",
--                10200001 "RecordStatus",deal_counter_party Counterpartycode, 
--                deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                '' "ReferenceNumber",
--                '' "RemainingAmt"
--         from trtran001
--          where deal_hedge_trade = 26000001 
--          and deal_process_complete = GConst.OPTIONNO 
--          and deal_buy_sell=numcode
--          and deal_base_currency=numcode1
--          and deal_other_currency=numcode2
--          and deal_maturity_date >=datTemp 
--       --   and deal_counter_party= decode(numcode3,30699999,deal_counter_party,numcode3)
--          and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--          and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)>0;
--        GOTO process_end;
--    END IF;

--IF numinfotype = gconst.REFEXPOUTDETAILS THEN
--        varoperation := 'Extracting Linking Details';
--              numcode := gconst.fncxmlextract(xmldoc,'BuySell',numcode);
--              numcode1 :=gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode1);
--              numcode2 :=gconst.fncxmlextract(xmldoc,'OtherCurrency',numcode2);  
--              datTemp :=gconst.fncxmlextract(xmldoc,'ExpiryDate',datTemp);
--           --   numcode3:=gconst.fncxmlextract(xmldoc,'Counterparty',numcode3);
--         Open Gencursor For  
--                  select 
--                  fncgetdescription(deal_buy_sell,1) "BuySell",
--                  fncgetdescription(deal_counter_party,2) "CounterParty",
--                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
--                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
--                   pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "BaseAmount",
--                  0 "CancelAmount",
--                  0 "CancelRate",
--                  0 "SpotRate",
--                  0 "ForwardRate",
--                  0 "MarginRate",
--                  0 "ProfitLoss",
--                  pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",   
--                  0 "EDChanges",
--                  deal_maturity_date "CashFlowDate",
--                  DEAL_EXECUTE_DATE "ExecuteDate",                         
--                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
--                  --added by gouri   to show OutStandingAmount in grid   
--                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
--                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,                 
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
--                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
--                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
--                  --fncRollover(deal_deal_number) "MaturityDate",
--                  deal_maturity_date "MaturityDate",
--                  deal_serial_number "SerialNumber",
--                  Deal_Hedge_Trade "HedgeTrade",
--                  deal_deal_number "DealNumber",
--                  fncgetdescription(deal_Company_code,2) "Company",
--                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
--                  deal_time_stamp "DealTimeStamp", 
--                  (select user_user_name 
--                     from usermaster 
--                    where user_user_id=deal_user_id) "UserName",
--                  deal_dealer_remarks "Remarks",                
--                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
--                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Initiator",
--                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "Trader",
--                 Deal_Bank_Reference "BankReference", 
--                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade",
--                deal_Company_code "CompanyCode",
--                deal_other_currency "OtherCurrencyCode",
--                10200001 "RecordStatus",deal_counter_party Counterpartycode, 
--                deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
--                '' "ReferenceNumber",
--                '' "RemainingAmt",
--                '' DealerName
--         from trtran001
--          where deal_hedge_trade = 26000001 
--          and deal_process_complete = GConst.OPTIONNO 
--          and deal_buy_sell=numcode
--          and deal_base_currency=numcode1
--          and deal_other_currency=numcode2
--          and deal_maturity_date >=datTemp 
--       --   and deal_counter_party= decode(numcode3,30699999,deal_counter_party,numcode3)
--          and deal_Company_Code in( select usco_company_code from trsystem022a
--                                        where usco_user_id =varUserid)
----          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
--          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
--          and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--                  GConst.AMOUNTFCY, datworkdate)>0;
--        GOTO process_end;
--    END IF;

 IF numinfotype = gconst.REFEXPOUTDETAILS THEN
        varoperation := 'Extracting Linking Details';
              numcode := gconst.fncxmlextract(xmldoc,'BuySell',numcode);
              numcode1 :=gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode1);
              numcode2 :=gconst.fncxmlextract(xmldoc,'OtherCurrency',numcode2);  
              datTemp :=gconst.fncxmlextract(xmldoc,'ExpiryDate',datTemp);
              numcode3:=gconst.fncxmlextract(xmldoc,'Counterparty',numcode3);
         Open Gencursor For  
                  select 
                  fncgetdescription(deal_buy_sell,1) "BuySell",                 
                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
                   fncgetdescription(deal_counter_party,2) "CounterParty",
                   pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "BaseAmount",
                  0 "CancelAmount",
                  0 "CancelRate",
                  0 "SpotRate",
                  0 "ForwardRate",
                  0 "MarginRate",
                  0 "ProfitLoss",
                  pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",   
                  0 "EDCharges",
                  deal_maturity_date "CashFlowDate",
                  DEAL_EXECUTE_DATE "ExecuteDate",                         
                 (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
                  --added by gouri   to show OutStandingAmount in grid   
                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
                 -- pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,GConst.AMOUNTFCY,frmDate) OutStandingAmount,                 
                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal",
                  --fncRollover(deal_deal_number) "MaturityDate",
                  deal_maturity_date "MaturityDate",
                  deal_serial_number "SerialNumber",
                  Deal_Hedge_Trade "HedgeTrade",
                  deal_deal_number "DealNumber",
                  fncgetdescription(deal_Company_code,2) "Company",
                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp", 
                  (select user_user_name 
                     from usermaster 
                    where user_user_id=deal_user_id) "UserName",
                  deal_dealer_remarks "Remarks",                
                  '' as "TradeReference",
--		              deal_holding_rate "HoldingRate",
--                  deal_holding_rate1 "HoldingRate1",
                 Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "Initiator",
                 Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "Trader",
                 Deal_Bank_Reference "BankReference", 
                fncgetdescription(Deal_Hedge_Trade,2) "Hedge Trade",
                deal_Company_code "CompanyCode",
                deal_other_currency "OtherCurrencyCode",
                10200001 "RecordStatus",deal_counter_party Counterpartycode, 
                deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
                '' "ReferenceNumber",
                '' "RemainingAmt",
                '' "DealerName",
                '' "CounterDealer"
         from trtran001
          where deal_hedge_trade = 26000001 
          and deal_process_complete = GConst.OPTIONNO 
          and deal_buy_sell=numcode
          and deal_base_currency=numcode1
          and deal_other_currency=numcode2
          and deal_maturity_date >=datTemp 
       --   and deal_counter_party= decode(numcode3,30699999,deal_counter_party,numcode3)
          and deal_Company_Code in( select usco_company_code from trsystem022a
                                        where usco_user_id =varUserid)
--          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
          and deal_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED,gconst.STATUSPOSTCANCEL)
          and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)>0;
        GOTO process_end;
    END IF;
   
--    if numinfotype=gconst.Refgetfxalldata  then
--      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
--    Open Gencursor For
--
--     Select 
--          Pkgreturncursor.Fncgetdescription(64100002,2) "DealingSystem",  
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)),2) "Buysell",
--          to_date(DEALDATE) "TradeDate",  
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)),2) "BaseCurrency",
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)),2) "OtherCurrency", 
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)),2) "CounterParty",
--          BANKNAME "CounterpartyName",
--          to_number(DEALAMOUNT) "BaseAmount" ,   to_number(EXCHANGERATE) "SpotRate",   to_number(EXCHANGERATE) "All_in_Rate",
--          to_date(MATURITYFROMDATE) "DeliveryDate",  to_date( MATURITYDATE) "SettlementDate",
--          nvl(pkgreturncursor.fncgetdescription(Classification_code,2),'') "Classification",
--          '0' "TenorPeriod",    DEALERNAME "TraderName",  COUNTERPARTY_DEAR_NAME "CounterParty_TraderName",
--          DEALTIME "DealTime",  to_date(DEALCONFIRMATIONDATE) "DateConfirmed",DEALCONFIRMATIONTIME "TimeConfirmed",     
--          to_date(DEALDATE) "DealDate",
--          DEALERNAME "TradeId",   
--          BUYSELL Buysell_TCode, BASECURRENCY "BaseCurrency_Tcode",
--          OtherCurrency "OtherCurrency_TCode",
--          REFERENCE_NO "ReferenceNo",Classification_code "ClassificationCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)) "BuySellCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)) "BaseCurrencyCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)) "OtherCurrencyCode", 
--          to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)) "CounterPartyCode",  
--          10200001 "RecordStatus",SOURCEOFDATA "Status",            
--          COUNTERPARTYDEARID "Counter_Dealer_Code"
--      From TRTRAN103B_FXALL_DETAIL
--      where nvl(RecordStatus,'10200001') not in(10200005,10200006)
--      and referencenumber is null
--      and to_date(DEALCREATEDDATE)=DatTemp1
--      union all
--      Select 
--          Pkgreturncursor.Fncgetdescription(64100001,2) "DealingSystem",  
--          Pkgreturncursor.Fncgetdescription(SIDE_BUY_SELL,2) "Buysell",
--          to_date(TRADE_DATE) "TradeDate",  
--          Pkgreturncursor.Fncgetdescription(CURRENCY_1,2) "BaseCurrency",
--          Pkgreturncursor.Fncgetdescription(CURRENCY_2,2) "OtherCurrency", 
--          Pkgreturncursor.Fncgetdescription(fncGetMapping_Tradingsystem(64100001,306,COUNTERPARTY_DEALING_CODE),2) "CounterParty",
--          COUNTERPARTY_NAME "CounterpartyName",
--          AMOUNT_DEALT "BaseAmount" ,   SPOT_BASIS_RATE "SpotRate",   EXCHANGE_RATE_PERIOD_1 "All_in_Rate",
--          to_date(VALUE_DATE_PERIOD_1) "DeliveryDate",  to_date( VALUE_DATE_PERIOD_1) "SettlementDate",
--          nvl(pkgreturncursor.fncgetdescription(Classification_code,2),'') "Classification",
--         '0' "TenorPeriod",    TRADER_NAME "TraderName",  COUNTERPARTY_TRADER_NAME "CounterParty_TraderName",
--          TIME_OF_DEAL "DealTime",  to_date(DATE_CONFIRMED) "DateConfirmed",TIME_CONFIRMED "TimeConfirmed",     
--          to_date(TRADE_DATE) "DealDate",
--          to_char(TRADE_ID) "TradeId",   
--          null Buysell_TCode, null "BaseCurrency_Tcode",
--          null "OtherCurrency_TCode",
--          to_char(TRADE_ID) "ReferenceNo",
--          Classification_code "ClassificationCode",
--          SIDE_BUY_SELL "BuySellCode",
--          CURRENCY_1 "BaseCurrencyCode",
--          CURRENCY_2 "OtherCurrencyCode", 
--          to_number(fncGetMapping_Tradingsystem(64100002,306,COUNTERPARTY_DEALING_CODE)) "CounterPartyCode",  
--          10200001 "RecordStatus",'1' "Status",  
--          COUNTERPARTY_DEALING_CODE "Counter_Dealer_Code"
--      From TRTRAN103A
--      where nvl(RecordStatus,10200001) not in(10200005,10200006)
--      and TRADE_ID is not null
--      and to_date(DEALCREATEDDATE)=DatTemp1;   
--    Goto Process_End;
--    END If;   


if numinfotype=gconst.Refgetfxalldata  then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
    Open Gencursor For
     Select 
          Pkgreturncursor.Fncgetdescription(64100002,2) "DealingSystem",  
          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)),2) "Buysell",
          to_date(DEALDATE) "TradeDate",  
          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)),2) "BaseCurrency",
          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)),2) "OtherCurrency", 
          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)),2) "CounterParty",
          BANKNAME "CounterpartyName",
          to_number(DEALAMOUNT) "BaseAmount" ,   to_number(EXCHANGERATE) "SpotRate",   to_number(EXCHANGERATE) "All_in_Rate",
          to_date(MATURITYFROMDATE) "DeliveryDate",  to_date( MATURITYDATE) "SettlementDate",         
          '0' "TenorPeriod",    DEALERID "TraderName",  COUNTERPARTY_DEAR_NAME "CounterParty_TraderName",
          DEALTIME "DealTime",  to_date(DEALCONFIRMATIONDATE) "DateConfirmed",DEALCONFIRMATIONTIME "TimeConfirmed",     
          to_date(DEALDATE) "DealDate",
          DEALERNAME "TradeId",   
          BUYSELL Buysell_TCode, BASECURRENCY "BaseCurrency_Tcode",
          OtherCurrency "OtherCurrency_TCode",
          REFERENCE_NO "ReferenceNo",
          to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)) "BuySellCode",
          to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)) "BaseCurrencyCode",
          to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)) "OtherCurrencyCode", 
          to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)) "CounterPartyCode",  
          10200001 "RecordStatus",SOURCEOFDATA "Status",            
          COUNTERPARTYDEARID "Counter_Dealer_Code",
          nvl(referencenumber,'') "Average"
      From TRTRAN103B_FXALL_DETAIL
      where nvl(RecordStatus,'10200001') not in(10200005,10200006)     
      and to_date(DEALCREATEDDATE)=DatTemp1
      and referencenumber is null
      union all
      Select 
          Pkgreturncursor.Fncgetdescription(64100001,2) "DealingSystem",  
          Pkgreturncursor.Fncgetdescription(SIDE_BUY_SELL,2) "Buysell",
          to_date(TRADE_DATE) "TradeDate",  
          Pkgreturncursor.Fncgetdescription(CURRENCY_1,2) "BaseCurrency",
          Pkgreturncursor.Fncgetdescription(CURRENCY_2,2) "OtherCurrency", 
          Pkgreturncursor.Fncgetdescription(fncGetMapping_Tradingsystem(64100001,306,COUNTERPARTY_DEALING_CODE),2) "CounterParty",
          COUNTERPARTY_NAME "CounterpartyName",
          AMOUNT_DEALT "BaseAmount" ,   SPOT_BASIS_RATE "SpotRate",   EXCHANGE_RATE_PERIOD_1 "All_in_Rate",
          to_date(VALUE_DATE_PERIOD_1) "DeliveryDate",  to_date( VALUE_DATE_PERIOD_1) "SettlementDate",        
         '0' "TenorPeriod",fncGetMapping_Tradingsystem(64100001,99999,TRADER_NAME) "TraderName",  COUNTERPARTY_TRADER_NAME "CounterParty_TraderName",
          TIME_OF_DEAL "DealTime",  to_date(DATE_CONFIRMED) "DateConfirmed",TIME_CONFIRMED "TimeConfirmed",     
          to_date(TRADE_DATE) "DealDate",
          to_char(TRADE_ID) "TradeId",   
          null Buysell_TCode, null "BaseCurrency_Tcode",
          null "OtherCurrency_TCode",
          to_char(TRADE_ID) "ReferenceNo",       
          SIDE_BUY_SELL "BuySellCode",
          CURRENCY_1 "BaseCurrencyCode",
          CURRENCY_2 "OtherCurrencyCode", 
          to_number(fncGetMapping_Tradingsystem(64100001,306,COUNTERPARTY_DEALING_CODE)) "CounterPartyCode",  
          10200001 "RecordStatus",'1' "Status",  
          COUNTERPARTY_DEALING_CODE "Counter_Dealer_Code",
          nvl(referencenumber,'') "Average"
      From TRTRAN103A
      where nvl(RecordStatus,10200001) not in(10200005,10200006)
      and TRADE_ID is not null     
      and to_date(DEALCREATEDDATE)=DatTemp1 
      and referencenumber is null;   
    Goto Process_End;
    END If;   
    
--  if numinfotype=gconst.refloadfxalldata then
--      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
--    open Gencursor for
--         Select 
--          Pkgreturncursor.Fncgetdescription(64100002,2) "DealingSystem",  
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)),2) "Buysell",
--          to_date(DEALDATE) "TradeDate",
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)),2) "BaseCurrency",
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)),2) "OtherCurrency", 
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)),2) "CounterParty",
--          NVL(Pkgreturncursor.Fncgetdescription(Business_unit,2),'') "BusinessUnit",
--          NVL(Pkgreturncursor.Fncgetdescription(profit_center,2),'') "ProfitCenter", 
--          BANKNAME "CounterpartyName",
--          to_number(DEALAMOUNT) "BaseAmount" ,   to_number(EXCHANGERATE) "SpotRate",   to_number(EXCHANGERATE) "All_in_Rate",
--          to_date(MATURITYFROMDATE) "DeliveryDate",  to_date( MATURITYDATE) "SettlementDate",        
--          nvl(FORWARD_RATE,0) "ForwardRate",
--          nvl(MARGIN,0) "Margin",
--          '0' "TenorPeriod",    DEALERNAME "TraderName",  COUNTERPARTY_DEAR_NAME "CounterParty_TraderName",
--          DEALTIME "DealTime",  to_date(DEALCONFIRMATIONDATE) "DateConfirmed",DEALCONFIRMATIONTIME "TimeConfirmed",     
--          to_date(DEALDATE) "DealDate",
--          DEALERNAME "TradeId",   
--          BUYSELL Buysell_TCode, BASECURRENCY "BaseCurrency_Tcode",
--          OtherCurrency "OtherCurrency_TCode",
--          REFERENCE_NO "ReferenceNo",
--          to_date(MATURITYDATE) "ExpiryDate",
--           Classification_code "ClassificationCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)) "BuySellCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)) "BaseCurrencyCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)) "OtherCurrencyCode", 
--          Business_unit "BusinessUnitCode",
--          profit_center "profitCenterCode",  
--          to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)) "CounterPartyCode",  
--          10200001 "RecordStatus",SOURCEOFDATA "Status",            
--          COUNTERPARTYDEARID "Counter_Dealer_Code",
--          referencenumber "ReferenceNumber"
--      From TRTRAN103B_FXALL_DETAIL
--      where nvl(RecordStatus,'10200001') not in(10200005,10200006)
--      and referencenumber is null
--      and classification_code=64000001
--      and to_date(DEALCREATEDDATE)=DatTemp1
--      union all
--      Select 
--          Pkgreturncursor.Fncgetdescription(64100001,2) "DealingSystem",  
--          Pkgreturncursor.Fncgetdescription(SIDE_BUY_SELL,2) "Buysell",
--          to_date(TRADE_DATE) "TradeDate",  
--          Pkgreturncursor.Fncgetdescription(CURRENCY_1,2) "BaseCurrency",
--          Pkgreturncursor.Fncgetdescription(CURRENCY_2,2) "OtherCurrency", 
--          Pkgreturncursor.Fncgetdescription(fncGetMapping_Tradingsystem(64100001,306,COUNTERPARTY_DEALING_CODE),2) "CounterParty",
--          NVL(Pkgreturncursor.Fncgetdescription(Business_unit,2),'') "BusinessUnit",
--          NVL(Pkgreturncursor.Fncgetdescription(profit_center,2),'') "ProfitCenter", 
--          COUNTERPARTY_NAME "CounterpartyName",
--          AMOUNT_DEALT "BaseAmount" ,   SPOT_BASIS_RATE "SpotRate",   EXCHANGE_RATE_PERIOD_1 "All_in_Rate",
--          to_date(VALUE_DATE_PERIOD_1) "DeliveryDate",  to_date( VALUE_DATE_PERIOD_1) "SettlementDate",
--          nvl(FORWARD_RATE,0) "ForwardRate",
--          nvl(MARGIN,0) "Margin",
--         '0' "TenorPeriod",    TRADER_NAME "TraderName",  COUNTERPARTY_TRADER_NAME "CounterParty_TraderName",
--          TIME_OF_DEAL "DealTime",  to_date(DATE_CONFIRMED) "DateConfirmed",TIME_CONFIRMED "TimeConfirmed",     
--          to_date(TRADE_DATE) "DealDate",
--          to_char(TRADE_ID) "TradeId",   
--          null Buysell_TCode, null "BaseCurrency_Tcode",
--          null "OtherCurrency_TCode",
--          to_char(TRADE_ID) "ReferenceNo", 
--           to_date(VALUE_DATE_PERIOD_1) "ExpiryDate",
--           Classification_code "ClassificationCode",
--          SIDE_BUY_SELL "BuySellCode",
--          CURRENCY_1 "BaseCurrencyCode",
--          CURRENCY_2 "OtherCurrencyCode", 
--          Business_unit "BusinessUnitCode",
--          profit_center "profitCenterCode",  
--          to_number(fncGetMapping_Tradingsystem(64100002,306,COUNTERPARTY_DEALING_CODE)) "CounterPartyCode",  
--          10200001 "RecordStatus",'1' "Status",  
--          COUNTERPARTY_DEALING_CODE "Counter_Dealer_Code",
--          referencenumber "ReferenceNumber"
--      From TRTRAN103A
--      where nvl(RecordStatus,10200001) not in(10200005,10200006)
--      and TRADE_ID is not null
--      and classification_code=64000001
--      and to_date(DEALCREATEDDATE)=DatTemp1; 
--    Goto Process_End;
--    End if;
    
    
if numinfotype=gconst.refloadfxalldata then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
    open Gencursor for
          select 
          Dealing_system "DealingSystem",
          pkgreturncursor.fncgetdescription(BUY_SELL,2) "BuySell",
          pkgreturncursor.fncgetdescription(BASE_CURRENCY,2) "BaseCurrency",
          pkgreturncursor.fncgetdescription(OTHER_CURRENCY,2) "OtherCurrency",
          pkgreturncursor.fncgetdescription(COUNTER_PARTY,2) "CounterParty",
          BASEAMOUNT  "BaseAmount",
          SPOTRATE    "SpotRate",
          EXCHANGERATE "All_in_Rate",
          nvl(pkgreturncursor.fncgetdescription(CLASSIFICATION,2),'') "Classification",
          SETTLEMENT_DATE "SettlementDate",
          DELIVERY_DATE "DeliveryDate",
          DATE_CONFIRMED "DateConfirmed",
          TRADER_NAME "TraderName",
          COUNTERPARTY_TRADER_NAME "CounterParty_TraderName",
          DEAL_NUMBER "DealNumber",
          10200001 "RecordStatus",
          COUNTER_PARTY "CounterPartyCode",
          Classification "ClassificationCode"
          from trtran103a_fxgo  
          WHERE TRADE_DATE=DatTemp1
          and referencenumber is null 
          AND RECORDSTATUS NOT IN (10200005,10200006)
          ;
    Goto Process_End;
    End if;
    
--    if numinfotype=gconst.refloadfutureoutdeals then
--     Open Gencursor For  
--             SELECT        
--        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_EXCHANGE_CODE,2) "Exchange",
--        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_COUNTER_PARTY,2) "BrokerName",
--        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_BUY_SELL,2) "Buysell",       
--       -- CFUT_LOT_NUMBERS "NoOfLots", 
--        pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "NoOfLots", 
--        0 "CancelLot",
--        0 "CancelRate",
--        0 "SpotRate",
--        0 "ForwardRate",
--        0 "ProfitLoss",
--        ROUND(CFUT_EXCHANGE_RATE,4) "Rate",
--        nvl(CPRO_TRADE_UNIT,1000)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",          
-- 
--        cfut_Lot_price "UnitPrice",     --  0 "LotQuantity",      
--         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
--         CFUT_BASE_AMOUNT "TradeAmount",CFUT_MARGIN_AMOUNT "MarginAmount",
--          cfut_execute_date "ExecuteDate",
--         cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
--         TO_DATE(CFUT_MATURITY_DATE,'dd/MM/yy') "MaturityDate",         
--         PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_BACKUP_DEAL,2) "BusinessUnit",
--         PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_INIT_CODE,2) "ProfitCenter",
--         CFUT_DEAL_NUMBER "DealNumber" ,
--         pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
--         PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_HEDGE_TRADE,2) "hedgetrade",
--         CFUT_MARGIN_RATE "MarginRate",
--         Cfut_Product_Code "productCode",10200001 "RecordStatus",       
--         CFUT_DEALER_NAME "DealerName",
--         CFUT_COUNTER_DEALER "CounterDealer",
--         CFUT_BANK_REFERENCE "BankReference",
--          pkgreturncursor.fncgetdescription(Cfut_Company_Code,2) "CompanyCode",       
--         CPRO_TRADE_UNIT "TradeUnit",
--         '' "ReferenceNumber",
--         null "RemainingQty"
--       from trtran061 left outer join trmaster503
--         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
--       where cfut_process_complete= gconst.optionNo
--       and cfut_Company_Code in( select usco_company_code from trsystem022a
--                                    WHERE USCO_USER_ID = VARUSERID )
--          --And Cfut_Exchange_Code= Numcode
----          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
----                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
--            and cfut_hedge_trade in (26000001,26000003)
--               -- or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
--          AND CFUT_RECORD_STATUS NOT IN (10200006, 10200005)
--          and cpro_record_status not in (10200006,10200005);
--
--     Goto Process_End;
--    End if;
   if numinfotype=gconst.refloadfutureoutdeals then
    
     Open Gencursor For  
           SELECT        
        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_EXCHANGE_CODE,2) "Exchange",
        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_COUNTER_PARTY,2) "BrokerName",
        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_INIT_CODE,2) "ProfitCenter",
        PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_BUY_SELL,2) "Buysell",       
       -- CFUT_LOT_NUMBERS "NoOfLots", 
        pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate)  "NoOfLots", 
        0 "CancelLot",       
        0 "SpotRate",
        0 "ForwardRate",
        0 "MarginRate",
        0 "CancelRate",
        0 "ProfitLoss",
        CFUT_EXCHANGE_RATE "Rate",
        nvl(CPRO_TRADE_UNIT,1000)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,GConst.UTILFUTUREDEAL,GConst.AMOUNTFCY, datworkdate) "LotQuantity",          
 
        CFUT_EXCHANGE_RATE "UnitPrice",     --  0 "LotQuantity",      
         -- pkgreturncursor.fncgetdescription(cfut_product_uom,2) "Uom",
         CFUT_BASE_AMOUNT "TradeAmount",CFUT_MARGIN_AMOUNT "MarginAmount",
          cfut_execute_date "ExecuteDate",
         cfut_brokerage_amount "BrokerageAmount",cfut_transaction_cost "TransactionCost",
         TO_DATE(CFUT_MATURITY_DATE,'dd/MM/yy') "MaturityDate",         
         PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_BACKUP_DEAL,2) "BusinessUnit",
         pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
         CFUT_DEAL_NUMBER "DealNumber" ,
         
         PKGRETURNCURSOR.FNCGETDESCRIPTION(CFUT_HEDGE_TRADE,2) "hedgetrade",
        -- CFUT_MARGIN_RATE "MarginRate",
         Cfut_Product_Code "productCode",10200001 "RecordStatus",       
         CFUT_DEALER_NAME "DealerName",
         CFUT_COUNTER_DEALER "CounterDealer",
         CFUT_BANK_REFERENCE "BankReference",
          pkgreturncursor.fncgetdescription(Cfut_Company_Code,2) "CompanyCode",       
         CPRO_TRADE_UNIT "TradeUnit",CFUT_BACKUP_DEAL  BusinessUnitCode,
         '' "ReferenceNumber",
         null "RemainingQty"
       from trtran061 left outer join trmaster503
         on CFUT_PRODUCT_CODE= CPRO_PICK_CODE
       where cfut_process_complete= gconst.optionNo
       and cfut_Company_Code in( select usco_company_code from trsystem022a
                                    WHERE USCO_USER_ID = VARUSERID )
          --And Cfut_Exchange_Code= Numcode
--          and ((varEntity = 'CURRENCYFUTUREDEALCANCEL' and cfut_hedge_trade in (26000001,26000003))
--                or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
            and cfut_hedge_trade in (26000001,26000003)
               -- or (varEntity = 'CURRENCYFUTURETRADDEALCANCEL' and cfut_hedge_trade in (26000002)))
          AND CFUT_RECORD_STATUS NOT IN (10200006, 10200005)
          and cpro_record_status not in (10200006,10200005)
          AND  nvl(CPRO_TRADE_UNIT,1000)* pkgforexprocess.fncGetOutstanding(cfut_deal_number, 0,14,1, datworkdate)!=0;
     Goto Process_End;
    End if;

--   if numinfotype=gconst.refloadcanceldeals then
--      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
--     Open Gencursor For 
--      Select 
--          Pkgreturncursor.Fncgetdescription(64100002,2) "DealingSystem",  
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)),2) "Buysell",
--          to_date(DEALDATE) "TradeDate",
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)),2) "BaseCurrency",
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)),2) "OtherCurrency", 
--          Pkgreturncursor.Fncgetdescription(to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)),2) "CounterParty",
--          BANKNAME "CounterpartyName",
--          to_number(DEALAMOUNT) "BaseAmount" ,   to_number(EXCHANGERATE) "SpotRate",   to_number(EXCHANGERATE) "All_in_Rate",
--          to_date(MATURITYFROMDATE) "DeliveryDate",  to_date( MATURITYDATE) "SettlementDate",        
--          nvl(FORWARD_RATE,0) "ForwardRate",
--          nvl(MARGIN,0) "Margin",
--          '0' "TenorPeriod",    DEALERNAME "TraderName",  COUNTERPARTY_DEAR_NAME "CounterParty_TraderName",
--          DEALTIME "DealTime",  to_date(DEALCONFIRMATIONDATE) "DateConfirmed",DEALCONFIRMATIONTIME "TimeConfirmed",     
--          to_date(DEALDATE) "DealDate",
--          DEALERNAME "TradeId",   
--          BUYSELL Buysell_TCode, BASECURRENCY "BaseCurrency_Tcode",
--          OtherCurrency "OtherCurrency_TCode",
--          REFERENCE_NO "ReferenceNo",
--          to_date(MATURITYDATE) "ExpiryDate",
--           Classification_code "ClassificationCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,253,BUYSELL)) "BuySellCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,304,BASECURRENCY)) "BaseCurrencyCode",
--          to_number(fncGetMapping_Tradingsystem(64100002,304,OTHERCURRENCY)) "OtherCurrencyCode", 
--          to_number(fncGetMapping_Tradingsystem(64100002,306,BANKCODE)) "CounterPartyCode",  
--          10200001 "RecordStatus",SOURCEOFDATA "Status",            
--          COUNTERPARTYDEARID "Counter_Dealer_Code",
--          referencenumber "ReferenceNumber"
--      From TRTRAN103B_FXALL_DETAIL
--      where nvl(RecordStatus,'10200001') not in(10200005,10200006)
--      and referencenumber is null
--      and classification_code=64000002
--      and to_date(DEALCREATEDDATE)=DatTemp1
--      union all
--      Select 
--          Pkgreturncursor.Fncgetdescription(64100001,2) "DealingSystem",  
--          Pkgreturncursor.Fncgetdescription(SIDE_BUY_SELL,2) "Buysell",
--          to_date(TRADE_DATE) "TradeDate",  
--          Pkgreturncursor.Fncgetdescription(CURRENCY_1,2) "BaseCurrency",
--          Pkgreturncursor.Fncgetdescription(CURRENCY_2,2) "OtherCurrency", 
--          Pkgreturncursor.Fncgetdescription(fncGetMapping_Tradingsystem(64100001,306,COUNTERPARTY_DEALING_CODE),2) "CounterParty",
--          COUNTERPARTY_NAME "CounterpartyName",
--          AMOUNT_DEALT "BaseAmount" ,   SPOT_BASIS_RATE "SpotRate",   EXCHANGE_RATE_PERIOD_1 "All_in_Rate",
--          to_date(VALUE_DATE_PERIOD_1) "DeliveryDate",  to_date( VALUE_DATE_PERIOD_1) "SettlementDate",
--          nvl(FORWARD_RATE,0) "ForwardRate",
--          nvl(MARGIN,0) "Margin",
--         '0' "TenorPeriod",    TRADER_NAME "TraderName",  COUNTERPARTY_TRADER_NAME "CounterParty_TraderName",
--          TIME_OF_DEAL "DealTime",  to_date(DATE_CONFIRMED) "DateConfirmed",TIME_CONFIRMED "TimeConfirmed",     
--          to_date(TRADE_DATE) "DealDate",
--          to_char(TRADE_ID) "TradeId",   
--          null Buysell_TCode, null "BaseCurrency_Tcode",
--          null "OtherCurrency_TCode",
--          to_char(TRADE_ID) "ReferenceNo", 
--           to_date(VALUE_DATE_PERIOD_1) "ExpiryDate",
--           Classification_code "ClassificationCode",
--          SIDE_BUY_SELL "BuySellCode",
--          CURRENCY_1 "BaseCurrencyCode",
--          CURRENCY_2 "OtherCurrencyCode",          
--          to_number(fncGetMapping_Tradingsystem(64100002,306,COUNTERPARTY_DEALING_CODE)) "CounterPartyCode",  
--          10200001 "RecordStatus",'1' "Status",  
--          COUNTERPARTY_DEALING_CODE "Counter_Dealer_Code",
--          referencenumber "ReferenceNumber"
--      From TRTRAN103A
--      where nvl(RecordStatus,10200001) not in(10200005,10200006)
--      and TRADE_ID is not null
--      and classification_code=64000002
--      and to_date(DEALCREATEDDATE)=DatTemp1; 
--     Goto Process_End;
--    End if;
  
    if numinfotype=gconst.refloadcanceldeals then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
     Open Gencursor For  
     select 
          Dealing_system "DealingSystem",
          pkgreturncursor.fncgetdescription(BUY_SELL,2) "BuySell",
          pkgreturncursor.fncgetdescription(BASE_CURRENCY,2) "BaseCurrency",
          pkgreturncursor.fncgetdescription(OTHER_CURRENCY,2) "OtherCurrency",
          pkgreturncursor.fncgetdescription(COUNTER_PARTY,2) "CounterParty",
          BASEAMOUNT  "BaseAmount",
          SPOTRATE    "SpotRate",
          EXCHANGERATE "All_in_Rate",
          FORWARD_RATE "ForwardRate",
          MARGIN_RATE "MarginRate",
          nvl(pkgreturncursor.fncgetdescription(BUSINESS_UNIT,2),'') "BusinessUnit",
          nvl(pkgreturncursor.fncgetdescription(PROFIT_CENTER,2),'') "ProfitCenter",
          SETTLEMENT_DATE "SettlementDate",
          DELIVERY_DATE "DeliveryDate",
          DATE_CONFIRMED "DateConfirmed",
          TRADER_NAME "TraderName",
          COUNTERPARTY_TRADER_NAME "CounterParty_TraderName",
          DEAL_NUMBER "DealNumber",
          10200001 "RecordStatus",
          BUSINESS_UNIT "BusinessUnitCode",
          PROFIT_CENTER "ProfitCenterCode",
          COUNTER_PARTY "CounterPartyCode",  
          BUY_SELL "BuySellCode",
          BASE_CURRENCY "BaseCurrencyCode",
          OTHER_CURRENCY "OtherCurrencyCode",
          REFERENCENUMBER "ReferenceNumber",
          classification "Classification"
          from trtran103a_fxgo  
          WHERE TRADE_DATE=DatTemp1
          and classification is not null
          and BASEAMOUNT > 0
          AND RECORDSTATUS NOT IN (10200005,10200006);
     Goto Process_End;
    End if;  
    if numinfotype=gconst.reffwdoutdeals then
           DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
         Open Gencursor For  
              select deal_deal_number "DealNumber",
              deal_execute_date "ExecuteDate",
              pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit",
              pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
              pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
              pkgreturncursor.fncgetdescription(deal_buy_sell,2) "BuySell",                         
              deal_base_amount "Amount",             
              deal_spot_rate "SpotRate",
              deal_forward_rate "ForwardRate",
              deal_margin_rate "MarginRate",
              deal_exchange_rate "Rate",                         
              deal_maturity_from "ExpiryDate",
              deal_maturity_date "SettlementDate", 
              to_date(sysdate,'dd-MON-yy') "ConfirmDate",  
              deal_other_amount "OtherAmount",
              pkgreturncursor.fncgetdescription(deal_hedge_trade,2) "HedgeTrade",
              pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
              pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",
              pkgreturncursor.fncgetdescription(deal_swap_outright,2) "SwapOutright",
              pkgreturncursor.fncgetdescription(deal_deal_type,2) "DealType",             
              pkgreturncursor.fncgetdescription(deal_maturity_code,2) "MaturityCode",                       
              deal_dealer_name "DealerName",
              deal_counter_dealer "CounterDealer",
              deal_complete_date "CompleteDate",
              deal_dealer_remarks "DealerRemarks",
              DEAL_SERIAL_NUMBER "SerialNumber",
              (case when deal_process_complete=12400001 then 'Yes'
              else 'No' end) "ProcessComplete",
              pkgreturncursor.fncgetdescription(deal_company_code,2) "Company",
              pkgreturncursor.fncgetdescription(deal_location_code,2) "Location",
              'NotConfirm' "Status"
              from trtran001 where deal_record_status not in (10200003,10200005,10200006)
              and deal_execute_date=DatTemp1;
       GOTO process_end;
    END IF;
    
--     if numinfotype=gconst.reffwdcanceldeals then
--           DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
--         Open Gencursor For  
--             select deal_deal_number "DealNumber",
--              cdel_cancel_date "CancelDate",
--              pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit", 
--              pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
--              pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
--              (case when deal_buy_sell=25300001 then 
--              pkgreturncursor.fncgetdescription(25300002,2)
--              else
--              pkgreturncursor.fncgetdescription(25300001,2)
--              end)  "BuySell",     
--              --pkgreturncursor.fncgetdescription(deal_buy_sell,2)    "BuySell",    
--              cdel_cancel_amount "Amount",
--              trtran006.cdel_spot_rate "SpotRate",
--              trtran006.cdel_forward_rate "ForwardRate",
--              trtran006.cdel_margin_rate "MarginRate",
--              cdel_cancel_rate "Rate",             
--              deal_maturity_from "ExpiryDate",
--              deal_maturity_date "SettlementDate",             
--              deal_base_amount "BookingAmount",
--              pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
--              Gconst.Amountfcy, DatTemp1)  "OutstandingAmount",
--              deal_execute_date "BookingDate",
--              deal_exchange_rate "BookingRate",
--              to_date(sysdate,'dd-MON-yy') "ConfirmDate",
--              cdel_profit_loss "ProfitLoss", 
--              cdel_other_amount "OtherAmount",                         
--              pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
--              pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",              
--              cdel_edc_charge "EdcCharges",             
--              cdel_cashflow_date "CashflowDate",
--              fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1) "ProfitLossConversionRate",
--              round(cdel_profit_loss / fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1),2) "ConvertedProfitLoss",
--              cdel_dealer_name "DealerName",
--              cdel_counter_dealer "CounterDealer",
--              cdel_dealer_remark "DealerRemarks",
--              CDEL_DEAL_SERIAL "DealSerial",
--              CDEL_REVERSE_SERIAL "ReverseSerial",
--              pkgreturncursor.fncgetdescription(cdel_deal_type,2) "DealType",
--              pkgreturncursor.fncgetdescription(cdel_cancel_type,2) "CancelType",
--              pkgreturncursor.fncgetdescription(deal_company_code,2) "Company",
--              pkgreturncursor.fncgetdescription(deal_location_code,2) "Location",
--              'NotConfirm' "Status"
--              from trtran006 inner join trtran001 b
--              on deal_deal_number=cdel_deal_number 
--              AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
--              AND CDEL_DEAL_TYPE in (26000001,26000003) 
--              and cdel_record_status not in(10200003,10200005,10200006)
--              --AND CDEL_PROFIT_LOSS <> 0 --Ishwarachandra commented if PandL 0 record should come in Bulk confirmation
--              and cdel_cancel_date=DatTemp1;
--       GOTO process_end;
--    END IF;   

  if numinfotype=gconst.reffwdcanceldeals then
           DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
         Open Gencursor For  
             select deal_deal_number "DealNumber",
              cdel_cancel_date "CancelDate",
              pkgreturncursor.fncgetdescription(deal_backup_deal,2) "BusinessUnit", 
              pkgreturncursor.fncgetdescription(deal_init_code,2) "ProfitCenter",
              pkgreturncursor.fncgetdescription(deal_counter_party,2) "CounterParty",
              (case when deal_buy_sell=25300001 then 
              pkgreturncursor.fncgetdescription(25300002,2)
              else
              pkgreturncursor.fncgetdescription(25300001,2)
              end)  "BuySell",     
              --pkgreturncursor.fncgetdescription(deal_buy_sell,2)    "BuySell",    
              cdel_cancel_amount "Amount",
              trtran006.cdel_spot_rate "SpotRate",
              trtran006.cdel_forward_rate "ForwardRate",
              trtran006.cdel_margin_rate "MarginRate",
              cdel_cancel_rate "Rate",             
              deal_maturity_from "ExpiryDate",
              deal_maturity_date "SettlementDate",             
              deal_base_amount "BookingAmount",
              pkgforexprocess.Fncgetoutstanding(Deal_Deal_Number, Deal_Serial_Number,Gconst.Utiltradedeal,
              Gconst.Amountfcy, DatTemp1)  "OutstandingAmount",
              deal_execute_date "BookingDate",
              deal_exchange_rate "BookingRate",
              to_date(sysdate,'dd-MON-yy') "ConfirmDate",
              cdel_profit_loss "ProfitLoss", 
              fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1) "ProfitLossConversionRate",
              round(cdel_profit_loss / fncgetPandLRate(deal_deal_number,CDEL_REVERSE_SERIAL, DatTemp1,1),2) "ConvertedProfitLoss",
              cdel_other_amount "OtherAmount",                         
              pkgreturncursor.fncgetdescription(deal_Base_Currency,2) "BaseCurrency",
              pkgreturncursor.fncgetdescription(deal_other_currency,2) "OtherCurrency",              
              cdel_edc_charge "EdcCharges",             
              cdel_cashflow_date "CashflowDate",             
              cdel_dealer_name "DealerName",
              cdel_counter_dealer "CounterDealer",
              cdel_dealer_remark "DealerRemarks",
              CDEL_DEAL_SERIAL "DealSerial",
              CDEL_REVERSE_SERIAL "ReverseSerial",
              pkgreturncursor.fncgetdescription(cdel_deal_type,2) "DealType",
              pkgreturncursor.fncgetdescription(cdel_cancel_type,2) "CancelType",
              pkgreturncursor.fncgetdescription(deal_company_code,2) "Company",
              pkgreturncursor.fncgetdescription(deal_location_code,2) "Location",
              'NotConfirm' "Status"
              from trtran006 inner join trtran001 b
              on deal_deal_number=cdel_deal_number 
              AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
              AND CDEL_DEAL_TYPE in (26000001,26000003) 
              and cdel_record_status not in(10200003,10200005,10200006)
              --AND CDEL_PROFIT_LOSS <> 0 --Ishwarachandra commented if PandL 0 record should come in Bulk confirmation
              and cdel_cancel_date=DatTemp1;
       GOTO process_end;
    END IF;    
    
    if numinfotype=gconst.reffutureoutdeals then
       DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
         Open Gencursor For   
         select cfut_deal_number "DealNumber",
          cfut_execute_date "ExecuteDate",
          pkgreturncursor.fncgetdescription(cfut_backup_deal,2) "BusinessUnit",          
          pkgreturncursor.fncgetdescription(cfut_init_code,2) "ProfitCenter",
          pkgreturncursor.fncgetdescription(cfut_exchange_code,2) "Exchange",
          pkgreturncursor.fncgetdescription(cfut_counter_party,2) "Broker",
          pkgreturncursor.fncgetdescription(cfut_buy_sell,2) "BuySell",
          cfut_base_amount "Amount",
          cfut_spot_rate "SpotRate",
          cfut_forward_rate "ForwardRate",
          cfut_bank_margin "MarginRate",
          cfut_exchange_rate "Rate",          
          cfut_maturity_date "ExpiryDate",
          cfut_maturity_from "SettlementDate",
          to_date(sysdate,'dd-MON-yy') "ConfirmDate",
          cfut_lot_numbers "NoOfLots",
          cfut_lot_quantity "LotQuantity",
          cfut_other_amount "OtherAmount",
          pkgreturncursor.fncgetdescription(cfut_base_currency,2) "BaseCurrency",
          pkgreturncursor.fncgetdescription(cfut_other_currency,2) "OtherCurrency",          
          CFUT_MATURITY_Date "DeliveryDate",          
          cfut_dealer_name "DealerName",
          cfut_counter_dealer "ConterDealer",
          pkgreturncursor.fncgetdescription(cfut_contract_type,2) "ContractType",
          pkgreturncursor.fncgetdescription(cfut_hedge_trade,2) "HedgeTrade",
          pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
          pkgreturncursor.fncgetdescription(cfut_local_bank,2) "LocalBank",
          pkgreturncursor.fncgetdescription(cfut_company_code,2) "Company",
          pkgreturncursor.fncgetdescription(cfut_location_code,2) "LocationCode",
          pkgreturncursor.fncgetdescription(cfut_process_complete,1) "ProcessComplete",
          'NotConfirm' "Status"
          from trtran061 
          where  cfut_record_status not in (10200003,10200005,10200006)
          and cfut_execute_date=DatTemp1;
    GOTO process_end;
    END IF;
    
    if numinfotype=gconst.reffuturecanceldeals then
       DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
         Open Gencursor For
             select cfrv_deal_number "DealNumber",
              cfrv_execute_date "ExecuteDate",
              pkgreturncursor.fncgetdescription(cfut_backup_deal,2) "BusinessUnit",
              pkgreturncursor.fncgetdescription(cfut_init_code,2) "ProfitCenter",
              pkgreturncursor.fncgetdescription(cfut_exchange_code,2) "Exchange",
              pkgreturncursor.fncgetdescription(cfut_counter_party,2) "Broker",
              (case when cfut_buy_sell=25300001 then 
              pkgreturncursor.fncgetdescription(25300002,2)
              else
              pkgreturncursor.fncgetdescription(25300001,2)
              end)  "BuySell",   
            --  pkgreturncursor.fncgetdescription(cfut_buy_sell,2) "BuySell", 
              cfrv_cancel_amount "Amount",
              cfrv_spot_rate "SpotRate",
              cfrv_forward_rate "ForwardRate",
              cfrv_bank_margin "MarginRate",
              cfRV_exchange_rate "Rate",  
              CFUT_MATURITY_FROM  "ExpiryDate",
              CFUT_MATURITY_DATE "SettlementDate",              
              cfut_base_amount "BookingAmount",
              pkgforexprocess.fncGetOutstanding(cfut_deal_number,0,GConst.UTILFUTUREDEAL, GConst.AMOUNTFCY, DatTemp1) * 1000 "OutstandingAmount",
              cfut_execute_date "BookingDate",
              cfut_exchange_rate "BookingRate",
              to_date(sysdate,'dd-MON-yy') "ConfirmDate",
              cfrv_profit_loss "ProfitLoss",
              cfut_other_amount "OtherAmount",
              cfrv_reverse_lot "CancelLots",
              cfrv_reverse_lot*1000 "LotQuantity",                                                       
              pkgreturncursor.fncgetdescription(cfut_base_currency,2) "BaseCurrency",
              pkgreturncursor.fncgetdescription(cfut_other_currency,2) "OtherCurrency",            
              cfrv_dealer_name "DealerName",
              cfrv_counter_dealer "ConterDealer",
              cfrv_dealer_remarks "DealerRemarks",
              pkgreturncursor.fncgetdescription(cfut_contract_type,2) "ContractType",
              pkgreturncursor.fncgetdescription(cfut_hedge_trade,2) "HedgeTrade",
              pkgreturncursor.fncgetdescription(cfut_product_code,2) "Product",
              pkgreturncursor.fncgetdescription(cfut_local_bank,2) "LocalBank",
              pkgreturncursor.fncgetdescription(cfrv_company_code,2) "Company",
              pkgreturncursor.fncgetdescription(cfut_location_code,2) "LocationCode",
              pkgreturncursor.fncgetdescription(cfut_process_complete,1) "ProcessComplete",
              CFRV_REVERSE_SERIAL "ReverseSerial",
              'NotConfirm' "Status"
              from trtran063 inner join trtran061 
              on CFRV_DEAL_NUMBER=CFUT_DEAL_NUMBER
              and cfut_record_status not in (10200005,10200006)             
              AND CFRV_RECORD_STATUS  IN (10200004,10200001) AND 
              CFRV_DEAL_NUMBER = (SELECT CFUT_DEAL_NUMBER FROM TRTRAN061 WHERE CFUT_DEAL_NUMBER = CFRV_DEAL_NUMBER 
              AND CFUT_HEDGE_TRADE in (26000001,26000003))
              and cfrv_execute_date=DatTemp1;
      GOTO process_end;
    END IF;
    
    if numinfotype=gconst.refoptoutdeals then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
         Open Gencursor For
         select copt_deal_number "DealNumber",
          copt_execute_date "ExecuteDate",
          pkgreturncursor.fncgetdescription(copt_backup_deal,2) "BusinessUnit",
          pkgreturncursor.fncgetdescription(copt_init_code,2) "ProfitCenter",
          pkgreturncursor.fncgetdescription(copt_exchange_code,2) "Exchange",
          pkgreturncursor.fncgetdescription(copt_counter_party,2) "ConnterParty",
          copt_base_amount "Amount",
          copt_other_amount "OtherAmount",
          copt_lot_numbers "NoOfLots",
          copt_lot_quantity "LotQuantity",
          copt_lot_price "LotPrice",
            (select round( avg(cosu_strike_rate),4) from trtran072 
              where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400001) "BC",
           (select avg(cosu_strike_rate) from trtran072 
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300001
               and cosu_option_type=32400002) "BP",
           (select avg(cosu_strike_rate) from trtran072 
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400002) "SP",
           (select avg(cosu_strike_rate) from trtran072 
             where cosu_deal_number=copt_deal_number
               and cosu_buy_sell=25300002
               and cosu_option_type=32400001) "SC",
          copt_expiry_date "ExpiryDate",
          copt_maturity_Date "MaturityDate",
          to_date(sysdate,'dd-MON-yy') "ConfirmDate",
          pkgreturncursor.fncgetdescription(copt_base_currency,2) "BaseCurrency",
          pkgreturncursor.fncgetdescription(copt_other_currency,2) "OtherCurrency",  
          copt_user_reference "UserReference",
          copt_premium_rate "PremiumRate",
          copt_premium_amount "PremiumAmount",
          copt_premium_exrate "PremiumExeRate",
          copt_premium_Local "PremiumLocal",
          copt_premium_valuedate "PremiumValueDate",
          copt_complete_date "CompleteDate",
          copt_deliverystart_date "DeliveryStartDate",
          pkgreturncursor.fncgetdescription(copt_premium_status,2) "PremiumStatus",
          pkgreturncursor.fncgetdescription(copt_hedge_trade,2) "HedgeTrade",
          pkgreturncursor.fncgetdescription(copt_deal_type,2) "DealType",
          pkgreturncursor.fncgetdescription(copt_contract_type,2) "ContractType",
          pkgreturncursor.fncgetdescription(copt_option_style,2) "OptionStyle",
          pkgreturncursor.fncgetdescription(copt_broker_code,2) "Broker",
          pkgreturncursor.fncgetdescription(copt_local_bank,2) "LocalBank",
          pkgreturncursor.fncgetdescription(copt_spread_yn,2) "SpreadYN",
          pkgreturncursor.fncgetdescription(copt_refrate_code,2) "RefRateCode",
          copt_dealer_remark "DelaerRemarks",
          copt_bo_remark "BoRemark",
          copt_dealer_name "DealerName",
          copt_counter_dealer "CounterDealer",
          copt_serial_number "SerialNumber",
          pkgreturncursor.fncgetdescription(copt_company_code,2) "Company",
          pkgreturncursor.fncgetdescription(copt_location_code,2) "Location",
          'NotConfirm' "Status"
          from trtran071 
          where   copt_record_status not in (10200003,10200005,10200006)
          and copt_execute_date=DatTemp1;
      GOTO process_end;
    END IF;
    
    if numinfotype=gconst.refoptcanceldeals then
      DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
         Open Gencursor For
         select corv_deal_number "DealNumber",
          corv_exercise_date "ExecuteDate",
          corv_base_amount "BaseAmount",
          corv_other_amount "OtherAmount",
          corv_exercise_rate "ExerciseRate",
          pkgreturncursor.fncgetdescription(corv_exercise_type,2) "ExerciseType",         
          corv_wash_rate "WashRate",
          corv_rbi_refrate "RBIRate",
          corv_profit_loss "ProfitLoss",
          corv_pandl_spot "PandLSpot",
          corv_pandl_usd "PandLUSD",
          corv_margin_rate "MarginRate",
          corv_settlement_date "SettlementDate",
          to_date(sysdate,'dd-MON-yy') "ConfirmDate",
          corv_dealer_remarks "DelaerRemarks",
          corv_bank_reference "BankReference",
          corv_bo_remark "BoRemark",
          corv_dealer_name "DealerName",
          corv_counter_dealer "CounterDealer",
          pkgreturncursor.fncgetdescription(corv_premium_status,2) "PremiumStatus",         
          corv_serial_number "SerialNumber",
          CORV_REVERSE_SERIAL "ReverseSerial",
          CORV_SUBSERIAL_NUMBER	"SubserialNumber",
          pkgreturncursor.fncgetdescription(corv_company_code,2) "Company",
          'NotConfirm' "Status"
          from trtran073 
          where CORV_RECORD_STATUS  IN (10200004,10200001) 
          AND CORV_DEAL_NUMBER = (SELECT COPT_DEAL_NUMBER FROM TRTRAN071 WHERE COPT_DEAL_NUMBER = CORV_DEAL_NUMBER 
          AND COPT_HEDGE_TRADE in (26000001,26000003))
          and corv_exercise_date=DatTemp1;
    GOTO process_end;
    END IF;
        if numinfotype=gconst.refgetbudgetrate then
       DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
       numcode:=gconst.fncxmlextract(xmldoc,'CurrencyCode',numcode);
         Open Gencursor For
           select nvl(erat_export_budget,0) "ExpBudgetRate",nvl(erat_import_budget,0) "ImpBudgetRate" 
           from TFSYSTEM009 where erat_effective_date=to_date(DatTemp1,'dd-MON-yy')      
           and erat_currency_code=numcode and erat_other_currency=30400003
           and erat_record_status not in (10200005,10200006);

    GOTO process_end;
    END IF;
    
    if numinfotype=gconst.refloadbudgetdata then 
     DatTemp1 := gconst.fncxmlextract(xmldoc,'DataEntryDate',DatTemp1);
     numcode:=gconst.fncxmlextract(xmldoc,'CurrencyCode',numcode);
     numcode1:=gconst.fncxmlextract(xmldoc,'BusinessUnit',numcode1);
     numcode2:=gconst.fncxmlextract(xmldoc,'ImportExport',numcode2);
     varTemp:=gconst.fncxmlextract(xmldoc,'FinancialYear',varTemp);
       Open Gencursor For 
          select pkgreturncursor.fncgetdescription(trad_subproduct_code,2) Product,
          trad_product_quantity Qty,
          trad_product_rate Rate,
          trad_trade_fcy Amount,
          trad_trade_reference TradeReference,
          2 RecordStatus,
          to_char(trad_maturity_from,'MON') MONTHNAME
          from trtran002 where trad_import_export=numcode2
          and trad_trade_currency=numcode
          and trad_product_category=decode(numcode1,33399999,trad_product_category,numcode1)         
          and trad_reference_date between '01-apr-'||substr(varTemp,3,2) and '31-Dec-'||substr(varTemp,6,2)
          and trad_product_quantity!=0
          and trad_trade_fcy>0
          and trad_record_status not in (10200005,10200006);
      GOTO process_end;
    END IF;
    
if numInfoType = Gconst.REFDocumentStorageCOLS then
     varOperation := 'Extract the docuemnt Upload Facility ' || varEntity;
     

     open GenCursor for
       select FLDP_XML_FIELD XMLField,FLDP_COLUMNS_FORIMAGE ColumnsForImage
         from trsystem999 
        where FLDP_TABLE_SYNONYM=varEntity
          and FLDP_COLUMNS_FORIMAGE is not null;
    Goto Process_End;
  end if;

  
  if numInfoType = Gconst.REFDOCUMENTSTORAGE then
     varOperation := 'Extract the docuemnt Upload Facility ' || varEntity;
--     varQuery := '//Entity';
--     varEntity := GConst.fncXMLExtract(xmlDoc, varQuery, varTemp, GConst.TYPENODEPATH);
--      
     open GenCursor for
       select EINF_DOCUMENT_STORAGE from
        trsystem995 where EINF_ENTITY_NAME=varEntity;
    Goto Process_End;
  end if;


  if numInfoType = GConst.REFSCANNEDIMAGESACL then
     varOperation := 'Extracting ACL for user ' || varUserID;
     open gencursor for
      select Actl_program_unit, ACTL_Access_insert AInsert,
      actl_access_edit AUpdate, actl_access_delete ADelete,
      actl_access_view
      from trsystem006 where 
      actl_group_code = (select user_group_code 
                           from trsystem022 
                          where user_user_id=varUserID
                          and user_record_status not in (10200005,10200006))
      and actl_record_Status not in (10200005,10200006)
      and ACTL_Program_unit='SCANNEDIMAGES';
    Goto Process_End;
  end if;  
  

-- if numInfoType = GConst.REFGETIMAGES then
--    VarOperation := 'Extract Images For the Repective Reference';
--    varQuery := '//CommandSet/Entity'; 
--    vartemp := GConst.fncXMLExtract(xmldoc,varQuery,vartemp, GConst.TYPENODEPATH);
--    varQuery := '//CommandSet/EntityNameInclude'; 
--    Numcode1 := GConst.fncXMLExtract(xmldoc,varQuery,Numcode1, GConst.TYPENODEPATH);
--    varQuery := '//CommandSet/SysRefNumber'; 
--    VarReference := GConst.fncXMLExtract(xmldoc,varQuery,vartemp, GConst.TYPENODEPATH);
----    varQuery := '//CommandSet/SerialNumber'; 
----    numcode := GConst.fncXMLExtract(xmldoc,varQuery,numcode, GConst.TYPENODEPATH);
----    
--    open GenCursor for
--      select IMAG_DOCUMENT_REFERENCE "Document Reference", 
--             IMAG_DOCUMENT_SERIAL "DocumentSerial",IMAG_BANK_REFERENCE "Bank_Reference",imag_document_name "DocumentName",
--             imag_document_type "DocumentType",IMAG_ENTITY_NAME "DocumentUploadedStage",
--             IMAG_USER_REMARKS "User_Remarks",imag_document_image as image ,
--             Imag_Reference_Serial As Serial, Imag_Reference_Number "Reference_Number",Imag_Reference_Serial "Reference_Serial"
--        from scannedimages
--        where upper(IMAG_DOCUMENT_REFERENCE)=upper(VarReference)
--        and IMAG_ENTITY_NAME=vartemp
--        --and IMAG_ENTITY_NAME = decode(Numcode1,0,IMAG_ENTITY_NAME,vartemp)
--        And Imag_Record_Status Not In (10200005,10200006);
--       -- and imag_event_type=numcode ;
--  -- end if;  
--    Goto Process_End;
--  end if; 

    if numInfoType = GConst.REFSCRENNAMEEDIT then    
    varOperation := 'Extracting Screen Name from tftran015E';  
     varTemp := '//' || varEntity  || '/ROW/ReferenceNumber';
     
     Varreference:= Gconst.fncXMLExtract(xmldoc,varTemp,Varreference,GConst.TYPENODEPATH); 
    -- insert into temp values(varTemp||Varreference||'Hari');
    Open GenCursor for  
        select           
          distinct CHGA_SCREEN_NAME "ScreenName",          
                  CHGA_SANCTION_APPLIED "SanctionApplied",          
                  CHGA_CURRENCY_CODE "CurrencyCode"
      from trtran015E
            WHERE CHGA_REF_NUMBER=Varreference            
            and chga_record_status not in(10200005,10200006);
      Goto Process_End;
  End if; 
 ---------------------------------------------------------- 
   if numInfoType = GConst.REFCHARGETYPEEDIT then    
    varOperation := 'Extracting Charge Event from tftran015E';
     varTemp := '//' || varEntity  || '/ROW/ReferenceNumber';
     
     Varreference:= Gconst.Fncxmlextract(Xmldoc,Vartemp,Varreference,Gconst.Typenodepath); 
    --  insert into temp values(varTemp||Varreference||'Hari');
    Open GenCursor for  
        select           
            distinct CHGA_CHARGING_EVENT "ChargeEvent"
        from trtran015E
        WHERE CHGA_REF_NUMBER=Varreference            
            and chga_record_status not in(10200005,10200006);
      Goto Process_End;
  End if; 


-----------------------------------
if numInfoType = GConst.REFPERIODTYPEFETCH then    
    varOperation := 'Extracting Grid row details from tftran015d';  
    
     varTemp := '//' || varEntity  || '/ROW/ReferenceNumber';       
     Varreference:= Gconst.fncXMLExtract(xmldoc,varTemp,Varreference,GConst.TYPENODEPATH); 
    Open GenCursor for  
       select 
        CHAR_PERIOD_TYPE "PeriodType",
        CHAR_PERIOD_UPTO "PeriodUpto",
        CHAR_AMOUNT_FROM "AmountFrom",
        CHAR_AMOUNT_UPTO "AmountUpto",
        CHAR_PERCENT_TYPE "PercentType",
        CHAR_CHARGES_AMOUNT "ChargesAmount" 
    from trtran015d 
    where CHAR_REFERENCE_NUMBER=Varreference 
    and (CHAR_PERIOD_TYPE<>23499999 and CHAR_PERCENT_TYPE<>33799999)
    and CHAR_record_status not in(10200005,10200006);
      Goto Process_End;
  End if; 

----------existing-----------------
if numInfoType = GConst.REFBANKCHARGELINKENTITY then    
    varOperation := 'Extracting Entity Name  from tfsystem002 where menu_parent_id=59 i.e Banking Process menu';    
    Open GenCursor for 
         select menu_description as Description,
           menu_program_unit as PUnit
           from trsystem002
           where menu_parent_id in(select menu_menu_id from trsystem002 where menu_parent_id in(400,60))
           and menu_program_unit in (select actl_program_unit from trsystem006
                                      where actl_record_Status not in(10200005,10200006)
                                      and ACTL_GROUP_CODE >= 14200010
                                      and ACTL_GROUP_CODE in (select user_group_code from trsystem022 
                                                               where user_record_Status not in (10200005,10200006)
                                                               and USER_GROUP_CODE>=14200010)) --- assume that 14200010 above are user Groups
                                                        
           and menu_program_unit is not null;
        Goto Process_End;
  End if;
---------------------------------------------------------
  if varEntity = 'BANKCHARGEMASTERNEW' then
        varOperation := 'Extracting browser fields for BANKCHARGEMASTERNEW';
      
        select count(*) into numRecords
          from BANKCHARGEMASTERNEW
          where char_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED);
       if numRecords = 0 then
          Goto Dummy_Cursor;
        end if;
        Open GenCursor for
        select distinct 
                  CHAR_REFERENCE_NUMBER "ReferenceNumber",                 
                  Pkgreturncursor.fncgetdescription(CHAR_BANK_CODE,2) "BankCode",
                  CHAR_EFFECTIVE_DATE "EffectiveDate",
                  Pkgreturncursor.fncgetdescription(CHAR_ACCOUNT_HEAD,1)"AccountHead",
                  Pkgreturncursor.fncgetdescription(CHAR_LIMIT_TYPE,1)"LimitType",
                  list_agg(CHAR_REFERENCE_NUMBER,1) "ScreenName",
                  list_agg(CHAR_REFERENCE_NUMBER,2) "ChargeEvent",
--                  LISTAGG(BANKCHARGELINKING.CHGA_SCREEN_NAME,',') WITHIN GROUP (ORDER BY CHGA_SCREEN_NAME) "ScreenName",
--                  LISTAGG(Pkgreturncursor.fncgetdescription(BANKCHARGELINKING.CHGA_CHARGING_EVENT,2),',') within group (ORDER by CHGA_SCREEN_NAME) "ChargeEvent",
                  Pkgreturncursor.fncgetdescription(CHAR_BILL_EVENT,2) "BillEvent",
                  Pkgreturncursor.fncgetdescription(CHAR_TIMING_EVENT,2) "TimingEvent",
                  Pkgreturncursor.fncgetdescription(CHAR_BASED_ON,2) "BasedOn",
                  Pkgreturncursor.fncgetdescription(CHAR_APPLICABLE_BILL,1) "ApplicableBill",
                  Pkgreturncursor.fncgetdescription(CHAR_PRODUCT_TYPE,1)"ProductType",
                  max(CHAR_SERIAL_NUMBER) "SerialNumber"
            from BANKCHARGEMASTERNEW,BANKCHARGELINKING            
            where BANKCHARGEMASTERNEW.CHAR_REFERENCE_NUMBER=BANKCHARGELINKING.CHGA_REF_NUMBER
            and CHAR_record_status not in (GConst.STATUSINACTIVE,GConst.STATUSDELETED)
            group by CHAR_REFERENCE_NUMBER,CHAR_BANK_CODE,CHAR_EFFECTIVE_DATE,CHAR_ACCOUNT_HEAD,
            CHAR_LIMIT_TYPE,CHAR_APPLICABLE_BILL,CHAR_PRODUCT_TYPE,CHAR_BILL_EVENT,CHAR_TIMING_EVENT,CHAR_BASED_ON
            order by CHAR_REFERENCE_NUMBER,CHAR_EFFECTIVE_DATE;
             Goto Process_End;
      end if;
  
  if numInfoType = GConst.REFBANKCHARGELINKREF then    
    varOperation := 'Extracting Limit References under selected bank from tftran015';
    varTemp := '//' || varEntity  || '/ROW/BankCode';  
    varTemp1 := Gconst.fncXMLExtract(xmldoc,varTemp,varTemp1,GConst.TYPENODEPATH); 
    
    varTemp := '//' || varEntity  || '/ROW/LimitType';  
    numcode := Gconst.fncXMLExtract(xmldoc,varTemp,numcode,GConst.TYPENODEPATH); 
    
    Open GenCursor for
    select  BANK_REFERENCE_NUMBER as LimitRef,
            pkgreturncursor.fncgetdescription(BANK_LOCAL_BANK,1) as Bank,
            BANK_record_type as LimitType,
            pkgreturncursor.fncgetdescription(BANK_record_type,1) as RecordType,
            bank_reference_number as BankRefNo,
            bank_reference_date as Refdate,
           -- bank_limit_tenor||' '||pkgreturncursor.fncgetdescription(bank_tenor_type,1) as Tenor,
            bank_limit_amount as limitamount
            --bank_due_date as duedate  
    from trtran015 
            where bank_local_bank=varTemp1 
            and BANK_record_type=numcode 
            and bank_record_status not in(10200005,10200006)
    union all
      select  '0' as LimitRef,
            pkgreturncursor.fncgetdescription(varTemp1,1) as Bank,
            25400004 as LimitType,
            pkgreturncursor.fncgetdescription(25400004,1) as RecordType,
            'LC Discounting' as BankRefNo,
            sysdate as Refdate,
            --'Not Applicable' as Tenor,
            0 as limitamount
            --sysdate as duedate  
    from dual
    union all
     select  '0' as LimitRef,
            pkgreturncursor.fncgetdescription(varTemp1,1) as Bank,
            25499999 as LimitType,
            pkgreturncursor.fncgetdescription(25499999,1) as RecordType,
            'No Limit' as BankRefNo,
            sysdate as Refdate,
            --'Not Applicable' as Tenor,
            0 as limitamount
            --sysdate as duedate  
    from dual ;
    Goto Process_End;
  End if;
  if numInfoType = GConst.REFBANKCHARGEMASTERGRID then    
    varOperation := 'Extracting data from trtran015D';  
   begin 
   begin
      varQuery:='//' || varEntity  || '/ROW/BankCode';
      numCode := Gconst.fncXMLExtract(xmldoc,varQuery,numCode,GConst.TYPENODEPATH);
      exception 
      when others then      
       numCode :=GConst.fncXMLExtract(xmlDoc, 'KeyValues/BankCode', numCode);
  end;
    exception
      When Others Then
        numCode:=30699999;
    end; 
      begin   
      begin
      varQuery:='//' || varEntity  || '/ROW/LimitType';
      numCode1 := Gconst.fncXMLExtract(xmldoc,varQuery,numCode1,GConst.TYPENODEPATH);
      exception
      when others then
        numCode1 :=GConst.fncXMLExtract(xmlDoc, 'KeyValues/LimitType', numCode1);
        end;
    exception
      when others then
        numCode1:=34699999;
    end;     
     Open GenCursor for
     select 
                pkgreturncursor.fncgetdescription(CHAR_BANK_CODE,1) as "Bank Name",
                CHAR_EFFECTIVE_DATE as "Effective Date",
                pkgreturncursor.fncgetdescription(CHAR_ACCOUNT_HEAD,1) as "Charge Type",
                pkgreturncursor.fncgetdescription(CHAR_LIMIT_TYPE,1) as "Limit Type",
                pkgreturncursor.fncgetdescription(CHAR_APPLICABLE_BILL,1) as "Applicable Bill",
                pkgreturncursor.fncgetdescription(CHAR_BASED_ON,1) as "Based On",
                pkgreturncursor.fncgetdescription(CHAR_TIMING_EVENT,1) as "Timing Event",
                pkgreturncursor.fncgetdescription(CHAR_BILL_EVENT,1) as "Bill Event",
                pkgreturncursor.fncgetdescription(CHAR_CHARGING_EVENT,1) as "Charging Event",
                pkgreturncursor.fncgetdescription(CHAR_PRODUCT_TYPE,1) as "Product Type",
                pkgreturncursor.fncgetdescription(CHAR_PERIOD_TYPE,1) as "Period Type",
                CHAR_PERIOD_UPTO as "Period UpTo",
                CHAR_AMOUNT_FROM as "Amount From",
                CHAR_AMOUNT_UPTO as "Amount Upto",
                pkgreturncursor.fncgetdescription(CHAR_PERCENT_TYPE,1) as "Percent Type",
                CHAR_CHARGES_AMOUNT as "Charges Amount",
                CHAR_SERVICE_TAX as "Service Tax",
                Pkgreturncursor.Fncgetdescription(Char_Rounding_Upto,1) As "Rounding UpTo"
      from trtran015d
      Where Char_Bank_Code=Decode(Numcode,30699999,Char_Bank_Code,0,Char_Bank_Code,Numcode)
      and CHAR_LIMIT_TYPE=decode(numCode1,34699999,CHAR_LIMIT_TYPE,0,CHAR_LIMIT_TYPE,numCode1)
      AND CHAR_RECORD_STATUS not in(10200005,10200006)
      order by pkgreturncursor.fncgetdescription(CHAR_BANK_CODE,1),CHAR_LIMIT_TYPE ;
    
     Goto Process_End;
  End if;
  if numInfoType = GConst.REFFAIRVALUATION then    
     varOperation := 'Extracting Data For FAIR Valuation';  
     begin
        datTemp := Gconst.fncXMLExtract(xmldoc,'FairValuationDate',datTemp);
        exception 
        when others then    
        datTemp := datWorkDate;
     end;
     NUMCODE:= fncProductPnlPopulate(datTemp,varUserID);
     Open GenCursor for
      select DEALNUMBER as "SysDealNumber", DEALSERIAL "SerialNumber",
         pkgreturncursor.fncgetdescription(DEAL_TYPE,2) "BusinessUnit",
         pkgreturncursor.fncgetdescription(COMPANYCODE,2) "Company",
         pkgreturncursor.fncgetdescription(TRADER,2) "ProfitCentre" ,
         MATURITYDATE,pkgreturncursor.fncgetdescription(CURRENCYCODE,2 ) "Currency",
         pkgreturncursor.fncgetdescription(COUNTERPARTY,2) "CounterParty",
         pkgreturncursor.fncgetdescription(BROKERCODE,2) "Broker",
         pkgreturncursor.fncgetdescription(EXCHANGECODE,2) "Exchange",
         EXECUTEDATE "TradeDate",DEALBASEAMOUNT "BaseAmount",
         SPOTRATE "SpotRate", FORWARDRATE "ForwardRate",MARGINRATE "MarginRate",
         EXCHANGERATE "All-InRate", MTMRATE "MTMRate",USERREFERENCE "UserReference",
         nvl(FRWMTM,0)+nvl(FURMTM,0)+ nvl(OPTMTM,0) "FairValue"
    from trsystem983 
    where PROCESSCOMPLETE=12400002
     and Ason_date =datTemp;

     Goto Process_End;
  End if;

    if numinfotype = gconst.REFINFLOWOUTFLOWDETAILS then
    
      numCode := gconst.fncxmlextract(xmldoc,'Param/ImportExport',   numCode);  
      Numcode1 := Gconst.Fncxmlextract(Xmldoc,'Param/TradeCurrency',  Numcode1);  
      numCode4 := gconst.fncxmlextract(xmldoc,'Param/CompanyCode',  numCode4); 
      numCode3 := gconst.fncxmlextract(xmldoc,'Param/LocationCode',  numCode3);  
      Dattemp  := Gconst.Fncxmlextract(Xmldoc,'Param/EntryDate',  Dattemp);
      dattemp1 :=Gconst.Fncxmlextract(Xmldoc,'Param/MaturityFrom',  dattemp1);
      dattemp2 :=Gconst.Fncxmlextract(Xmldoc,'Param/MaturityDate',  dattemp2); 
      Numcode2 := Gconst.Fncxmlextract(Xmldoc,'Param/OtherCurrency',  Numcode2);       
        delete from temp1; commit;
        
--     if numcode=25900073 then 
--       Open Gencursor For    
--           select rownum "Rownum",
--         bcrd_buyers_credit "TradeReference",              
--         pkgReturnCursor.fncGetDescription(nvl(25900073,25900073),1) "ImportExportDesc",  
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(bcrd_local_bank,30699999),2) "Bank",
--         Bcrd_Sanctioned_Fcy "AmountFcy",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "OutstandingAmount",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "SettlementAmount",       
--         bcrd_sanction_date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(BCRD_COMPANY_CODE,1)"Company",
--         bcrd_due_date "DueDate",
--         bcrd_conversion_rate "ExchangeRate",
--         bcrd_sanction_date "EntryDate",
--         BCRD_LOAN_REMARKS "UserRemarks",
--         bcrd_due_date "MaturityFrom",
--         '' "RequestedBy" , 
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
--         Bcrd_Company_Code "CompanyCode",
--         BCRD_LOCATION_CODE "LocationCode",
--         bcrd_local_bank "LocalBankCode",         
--          0 "Status",
--          '.' "BatchNumber"
--          From Trtran045 A
--          where  Bcrd_Process_Complete not in (12400001)
--          And bcrd_Company_Code=decode(Numcode4,30100001,bcrd_Company_Code,Numcode4)
--        --  And bcrd_Location_Code=Numcode3
--          and to_date(bcrd_due_date) between to_date(dattemp1) and to_date(dattemp2)
--         -- And bcrd_Import_Export = decode(numCode,25999999,Trad_Import_Export,numCode)
--          and BCRD_CURRENCY_CODE = decode(Numcode1,30499999,BCRD_CURRENCY_CODE,Numcode1)
--          And bcrd_Record_Status Not In(10200006,10200005) 
--         And Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,to_date(datworkdate))!=0;       
--    elsif numcode in (25900090,25900089) then 
--     open Gencursor for
--         SELECT rownum "Rownum", TLON_LOAN_NUMBER "TradeReference",           
--         DECODE(reps_record_type,1,'Loan Repayment',2,'Interest Payment') "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(TLON_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(TLON_LOCAL_BANK,30699999),2) "Bank",
--         REPS_PRINCIPAL_AMOUNT "AmountFcy",
--         REPS_PRINCIPAL_AMOUNT "OutstandingAmount",
--         REPS_PRINCIPAL_AMOUNT "SettlementAmount",       
--         Tlon_Disbursal_Date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(TLON_COMPANY_CODE,1)"Company",         
--         REPS_INSTALLMENT_DATE "DueDate",
--         TLON_SANCTIONED_RATE "ExchangeRate",
--         TLON_CREATE_DATE "EntryDate",
--         '' "UserRemarks",
--          REPS_INSTALLMENT_DATE "MaturityFrom",
--         '' "RequestedBy" ,
--         ''  "BusinessUnit",'' "ProfitCenter",            
--         TLON_COMPANY_CODE "CompanyCode",
--         TLON_LOCATION_CODE "LocationCode",
--         TLON_LOCAL_BANK "LocalBankCode" ,
--          '.' "BatchNumber"         
--         From Trtran081,TRTRAN081A
--          Where  Tlon_Process_Complete not in (12400001)
--          AND TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
--          AND reps_record_type IN(1,2)
--          AND REPS_RECORD_STATUS NOT IN(10200005,10200006)          
--         and TLON_COMPANY_CODE=decode(Numcode4,30199999,TLON_COMPANY_CODE,Numcode4)
--           and to_date(REPS_INSTALLMENT_DATE) between to_date(dattemp1) and to_date(dattemp2)
--          And Tlon_Record_Status In (Gconst.Statusentry, Gconst.Statusauthorized, Gconst.Statusupdated);
--        --And  Pkgforexprocess.Fncgetoutstanding(Tlon_Bank_Reference,0,12,1,to_date(datworkdate))!=0;
--    Elsif Numcode In (25999999) Then
--        OPEN GENCURSOR FOR
--         select rownum "Rownum", a.*
--           from (select 
--         bcrd_buyers_credit "TradeReference",            
--         pkgReturnCursor.fncGetDescription(nvl(25900073,25900073),1) "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(bcrd_local_bank,30699999),2) "Bank",
--         Bcrd_Sanctioned_Fcy "AmountFcy",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "OutstandingAmount",
--         Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,datworkdate) "SettlementAmount",       
--         bcrd_sanction_date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(BCRD_COMPANY_CODE,1)"Company",         
--         bcrd_due_date "DueDate",
--         bcrd_conversion_rate "ExchangeRate",
--         bcrd_sanction_date "EntryDate",
--         BCRD_LOAN_REMARKS "UserRemarks",
--         bcrd_due_date "MaturityFrom",         
--         '' "RequestedBy" ,
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(BCRD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
--         Bcrd_Company_Code "CompanyCode",
--         BCRD_LOCATION_CODE "LocationCode",
--         bcrd_local_bank "LocalBankCode" ,
--          '.' "BatchNumber"         
--          From Trtran045 A
--          where  Bcrd_Process_Complete =12400002
--          And bcrd_Company_Code=decode(Numcode4,30100001,bcrd_Company_Code,Numcode4)
--          --And bcrd_Location_Code=Numcode3
--          and to_date(bcrd_due_date) between to_date(dattemp1) and to_date(dattemp2)
--         -- And bcrd_Import_Export = decode(numCode,25999999,Trad_Import_Export,numCode)
--          and BCRD_CURRENCY_CODE = decode(Numcode1,30499999,BCRD_CURRENCY_CODE,Numcode1)
--          And bcrd_Record_Status Not In(10200006,10200005) 
--         And Pkgforexprocess.Fncgetoutstanding(Bcrd_Buyers_Credit,0,12,1,to_date(datworkdate))!=0
--         Union All
--         select 
--         TLON_LOAN_NUMBER "TradeReference",           
--         DECODE(reps_record_type,1,'Loan Repayment',2,'Interest Payment') "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(TLON_CURRENCY_CODE,30499999),2) "Currency",
--         Pkgreturncursor.Fncgetdescription(Nvl(TLON_LOCAL_BANK,30699999),2) "Bank",
--         REPS_PRINCIPAL_AMOUNT "AmountFcy",
--         REPS_PRINCIPAL_AMOUNT "OutstandingAmount",
--         REPS_PRINCIPAL_AMOUNT "SettlementAmount",       
--         Tlon_Disbursal_Date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(TLON_COMPANY_CODE,1)"Company",         
--         REPS_INSTALLMENT_DATE "DueDate",
--         TLON_SANCTIONED_RATE "ExchangeRate",
--         TLON_CREATE_DATE "EntryDate",
--         '' "UserRemarks",
--          REPS_INSTALLMENT_DATE "MaturityFrom",        
--         '' "RequestedBy" ,
--         ''  "BusinessUnit",'' "ProfitCenter",            
--         TLON_COMPANY_CODE "CompanyCode",
--         TLON_LOCATION_CODE "LocationCode",
--         TLON_LOCAL_BANK "LocalBankCode" ,
--          '.' "BatchNumber"         
--         From Trtran081,TRTRAN081A
--          Where  Tlon_Process_Complete not in (12400001)
--          AND TLON_LOAN_NUMBER = REPS_LOAN_NUMBER
--          AND reps_record_type in(1,2)
--          AND REPS_RECORD_STATUS NOT IN(10200005,10200006) 
--          and TLON_COMPANY_CODE=decode(Numcode4,30199999,TLON_COMPANY_CODE,Numcode4)
--           and to_date(REPS_INSTALLMENT_DATE) between to_date(dattemp1) and to_date(dattemp2)
--          And Tlon_Record_Status In (Gconst.Statusentry, Gconst.Statusauthorized, Gconst.Statusupdated)
--        --And  Pkgforexprocess.Fncgetoutstanding(Tlon_Bank_Reference,0,12,1,to_date(datworkdate))!=0
--        UNION ALL
--            select 
--         TRAD_TRADE_REFERENCE "TradeReference",               
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_IMPORT_EXPORT,25999999),1) "ImportExportDesc",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_TRADE_CURRENCY,30499999),2) "Currency",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_LOCAL_BANK,30699999),2) "Bank",
--         TRAD_TRADE_FCY "AmountFcy",
--         ----For TOI Use this
--         --TRAD_TRADE_FCY "OutstandingAmount", --Check of TOI
--         --pkgforexprocess.fncGetOutstanding(trad_trade_reference,1,GConst.UTILCONTRACTOS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
--         ---For other client
--         pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
----         (TRAD_TRADE_FCY - 
----         TRAD_TRADE_FCY)"SettledAmount",
----         (TRAD_TRADE_FCY - 
----       pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate))"SettlementAmount",
--         pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate) "SettlementAmount",
--         Trad_Reference_Date "ReferenceDate",
--         pkgReturnCursor.fncGetDescription(TRAD_COMPANY_CODE,1)"Company",         
--         TRAD_MATURITY_DATE "DueDate",
--         trad_trade_rate "ExchangeRate",
--         TRAD_ENTRY_DATE "EntryDate",
--         TRAD_USER_REFERENCE "UserRemarks",
--         trad_maturity_from "MaturityFrom",         
--         TRAD_TRADE_REMARKS "RequestedBy" , 
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
--         pkgReturnCursor.fncGetDescription(nvl(TRAD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
--         TRAD_COMPANY_CODE "CompanyCode",
--         TRAD_LOCATION_CODE "LocationCode",
--         TRAD_LOCAL_BANK "LocalBankCode",
--          '.' "BatchNumber"         
--          from trtran002 where 
--          Trad_Process_Complete not in (12400001)
--          And Trad_Company_Code=decode(Numcode4,30199999,Trad_Company_Code,Numcode4)
--         -- And Trad_Location_Code=Numcode3
--          And Trad_Import_Export = Decode(Numcode,25999999,Trad_Import_Export,Numcode)
--          and TRAD_TRADE_CURRENCY = decode(Numcode1,30499999,TRAD_TRADE_CURRENCY,Numcode1)
--          And Trad_Record_Status Not In(10200006,10200005))a;
--          --And Trad_Maturity_Date Between Dattemp1 And Dattemp2;
--          --AND pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate)!=0;         
--   Else    
       Open Gencursor For    
        select rownum "Rownum",
         TRAD_TRADE_REFERENCE "TradeReference",           
         pkgReturnCursor.fncGetDescription(nvl(TRAD_IMPORT_EXPORT,25999999),1) "ImportExportDesc",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_TRADE_CURRENCY,30499999),2) "Currency",
         pkgReturnCursor.fncGetDescription(TRAD_BUYER_SELLER,2) "Buyer_seller",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_LOCAL_BANK,30699999),2) "Bank",
         TRAD_TRADE_FCY "AmountFcy",
         ----For TOI Use this
         --TRAD_TRADE_FCY "OutstandingAmount", --Check of TOI
         --pkgforexprocess.fncGetOutstanding(trad_trade_reference,1,GConst.UTILCONTRACTOS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
         ---For other client
         pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate)"OutstandingAmount",
--         (TRAD_TRADE_FCY - 
--         TRAD_TRADE_FCY)"SettledAmount",
--         (TRAD_TRADE_FCY - 
--       pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate))"SettlementAmount",
         pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, datworkdate) "SettlementAmount",
         TRAD_REFERENCE_DATE "ReferenceDate",
         pkgReturnCursor.fncGetDescription(TRAD_COMPANY_CODE,1)"Company",         
         TRAD_MATURITY_DATE "DueDate",
         trad_trade_rate "ExchangeRate",
         TRAD_ENTRY_DATE "EntryDate",
         TRAD_USER_REFERENCE "UserRemarks",
         trad_maturity_from "MaturityFrom",         
         TRAD_TRADE_REMARKS "RequestedBy" ,
         pkgReturnCursor.fncGetDescription(nvl(TRAD_PRODUCT_CATEGORY,33399999),2) "BusinessUnit",
         pkgReturnCursor.fncGetDescription(nvl(TRAD_SUBPRODUCT_CODE,33899999),2) "ProfitCenter",         
         TRAD_COMPANY_CODE "CompanyCode",
         TRAD_LOCATION_CODE "LocationCode",
         TRAD_LOCAL_BANK "LocalBankCode",        
          0 "Status",
          '.' "BatchNumber"          
          from trtran002 where 
          Trad_Process_Complete not in (12400001)
          AND Trad_Company_Code=decode(Numcode4,30199999,Trad_Company_Code,Numcode4)
          --And Trad_Location_Code=Numcode3
          And Trad_Import_Export = Decode(Numcode,25999999,Trad_Import_Export,Numcode)
          and TRAD_TRADE_CURRENCY = decode(Numcode1,30499999,TRAD_TRADE_CURRENCY,Numcode1)
          And Trad_Record_Status Not In(10200006,10200005)
          and to_date(TRAD_MATURITY_DATE) between to_date(dattemp1) and to_date(dattemp2)
          AND pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,GConst.AMOUNTFCY, to_date(datworkdate))!=0;
         -- and TRAD_PRODUCT_CATEGORY = numCode4
    --      end if;
        Goto Process_End;
    END IF;   




  
  if numinfotype = gconst.REFRETREIVEDEALS then 
-- Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/TradeReference',   Vartemp);  
-- Numcode1 := Gconst.Fncxmlextract(Xmldoc,'Param/ReverseSerial',  Numcode1);
-- numcode2:=Gconst.Fncxmlextract(Xmldoc,'Param/CompanyCode',  numcode2);
Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/BatchNumber',   Vartemp); 
     Open Gencursor For  
          Select rownum "Rownum",
          BREL_BATCH_NUMBER "BatchNumber",
          Brel_Trade_Reference "TradeReference",
          brel_reverse_serial "ReverseSerial",
          BREL_COMPANY_CODE "CompanyCode",
          fncGetDescription(BREL_COMPANY_CODE,2) "Company",
          Brel_Entry_Date "EntryDate",
          Brel_Reference_Date "ReferenceDate",
          pkgReturnCursor.fncGetDescription(nvl(BREL_LOCAL_BANK,30699999),2) "Bank",
          brel_local_bank "LocalBank",
          Brel_Reversal_Fcy "ReversalFCY",
          Brel_Reversal_Rate "CancelRate",
          Brel_Reversal_Inr "ReversalNR"
          from trtran003 where Brel_Record_Status not in (10200005,10200003,10200006)
          and BREL_BATCH_NUMBER = Vartemp;
          --And Brel_Trade_Reference=Vartemp
          --And Brel_Reverse_Serial=Numcode1
          --and brel_company_code=numcode2;
Goto Process_End;
End If;  


 If numinfotype=gconst.Refedcchargedeals Then 
  DATTEMP1 := GCONST.FNCXMLEXTRACT(XMLDOC,'DataEntryDate',DATTEMP1);
  numcode:=gconst.fncxmlextract(xmldoc,'LocalBank',numcode);
        open gencursor for 
        Select 
        BCAC_VOUCHER_NUMBER "VoucherNumber",
        Bcac_Voucher_Reference "VoucherReference",
        Bcac_Voucher_Date "VoucherDate",
        Pkgreturncursor.Fncgetdescription(Bcac_Crdr_Code,2) "CrDr",
        Pkgreturncursor.Fncgetdescription(Bcac_Local_Bank,2) "Bank",
        Pkgreturncursor.Fncgetdescription(Bcac_Account_Head,2) "AccountHead",
        Pkgreturncursor.Fncgetdescription(Bcac_Voucher_Type,2) "VoucherType",
        Pkgreturncursor.Fncgetdescription(Bcac_Local_Merchant,2) "Merchant",
        Pkgreturncursor.Fncgetdescription(Bcac_Voucher_Currency,2) "Currency",
        Bcac_Voucher_Fcy "VoucherFCY",
        Bcac_Voucher_Rate "VoucherRate",
        Bcac_Voucher_Inr "VoucherINR",       
        Bcac_Voucher_Detail "VoucherDetails",
        Pkgreturncursor.Fncgetdescription(Bcac_Record_Type,2) "RecordType",
        Bcac_Recon_Remarks "Remarks",
        Bcac_Bank_Reference "BankReference",
        bcac_account_number "AccountNumber",
        Cdel_Deal_Serial "DealSerial",
        cdel_reverse_serial "ReverseSerial",
        'NotConfirm' "Status",        
        Bcac_Voucher_Date "CompareDate",
        bcac_company_code "CompanyCode",
        bcac_location_code "LocationCode"
        From Trtran008,Trtran006 Where Cdel_Deal_Number=Bcac_Voucher_Reference
        and bcac_record_status not in (10200005,10200003,10200006)
        and cdel_reverse_serial=Bcac_Reference_Serial
        AND CDEL_RECORD_STATUS NOT IN (10200005,10200006)
        AND CDEL_CANCEL_TYPE=27000002
        and bcac_local_bank=numcode
        and Bcac_Voucher_Date=DatTemp1
        Order By Bcac_Voucher_Reference;
        
    Goto Process_End;
  End If;
if numInfoType = GConst.refmisplaceholder then     
  dattemp := gconst.fncxmlextract(xmldoc,'KeyValues/EffectiveDate',dattemp);
  varQuery:=gconst.fncxmlextract(xmldoc,'KeyValues/RunProgram',varQuery);
   if varQuery='True' then
    Open GenCursor for   
      SELECT palce.PlaceholderType,palce.Placeholdercode,nvl(mis.TotalAmount,0) TotalAmount ,
      mis.EffectiveDate,nvl(mis.RecordStatus,0) RecordStatus from           
          (SELECT pick_long_description PlaceholderType ,pick_key_value Placeholdercode,
           0 TotalAmount ,sysdate EffectiveDate, pick_record_status RecordStatus
           from trmaster001 where pick_key_group=380 and pick_key_number!=0
           and pick_record_status not in (10200005,10200006)) palce
          left outer join
          (select  pkgreturncursor.fncgetdescription(plac_pick_code,1) PlaceholderType,
          plac_pick_code Placeholdercode,nvl(plac_total_amount,0) TotalAmount,
          plac_effective_date EffectiveDate,plac_record_status RecordStatus
          from trtran155 where plac_effective_date=(select max(plac_effective_date) from trtran155)) mis
          on palce.Placeholdercode=mis.Placeholdercode;
    else
     Open GenCursor for   
     SELECT palce.PlaceholderType,palce.Placeholdercode,nvl(mis.TotalAmount,0) TotalAmount,
     mis.EffectiveDate,nvl(mis.RecordStatus,0) RecordStatus
     from           
          (SELECT pick_long_description PlaceholderType ,pick_key_value Placeholdercode,
           0 TotalAmount,sysdate EffectiveDate, pick_record_status RecordStatus
           from trmaster001 where pick_key_group=380 and pick_key_number!=0
           and pick_record_status not in (10200005,10200006)) palce
          left outer join
          (select  pkgreturncursor.fncgetdescription(plac_pick_code,1) PlaceholderType,
          plac_pick_code Placeholdercode,nvl(plac_total_amount,0) TotalAmount,
          plac_effective_date EffectiveDate,plac_record_status RecordStatus
          from trtran155 where plac_effective_date=dattemp) mis
          on palce.Placeholdercode=mis.Placeholdercode;
    end if;
    Goto Process_End;
  End If;  
  if numInfoType = GConst.REFBANKCHARGEABLES then
    varOperation := 'Extracting Bank Charges Calculated';
--    varTemp := GConst.fncXMLExtract(xmlDoc, 'VoucherEvent',varTemp);
--    varQuery := '//' || varEntity  || '/ROW/LocalBank' || varValue;          
--    varTemp1 := GConst.fncXMLExtract(xmlDoc, varQuery,varTemp, GConst.TYPENODEPATH);
--    varQuery := '//' || varEntity  || '/ROW/LimitReference' || varValue;          
--    varDummy := GConst.fncXMLExtract(xmlDoc, varQuery,varTemp, GConst.TYPENODEPATH);
    delete from  tftemp015D;
   -- INSERT INTO TEMP1 VALUES ('CURSOR CALLED');
    PKGFOREXPROCESS.prcgetchargeamount(PARAMDATA, numerror);
--    select aloc_other_reference 
--      into varDummy
--      from tftran015b
--      where aloc_reference_number = varDummy;
  
    open GenCursor for
    select chgc_charge_type ChargeType, chgc_charge_amount ChargeAmount
      from trtemp015D ;
--      where chgc_bank_code = varTemp1
--      and chgc_charge_event = varTemp
--      and chgc_limit_reference = varDummy;
      
    Goto Process_End;
  End if;
    
-- if  numinfotype = gconst.REFBANKACCOUNTNUMBER   then
--       varOperation := 'Extracting Bank Account Number';
--         
--begin    
--        varQuery := '//CommandSet/LocalBank' ;          
--        numCode := GConst.fncXMLExtract(xmlDoc, varQuery,numCode, GConst.TYPENODEPATH);
--     exception   when others then
--         numCode:=0;
--     end ;
--
--        Open GenCursor for
--          SELECT lbbl_account_number AS ACCOUNTNUMBER
--          from trmaster306A
--          WHERE LBBL_BANK_CODE = NUMCODE
--                and lbBL_record_status not in(GConst.STATUSINACTIVE,GConst.STATUSDELETED);
--        Goto Process_End;
--  END IF;


 if numInfoType = GConst.REFGetCurrentAccountNumber then
    varOperation := 'Extracting Account number for the transaction';
    begin  
      varQuery := '//CommandSet/CurrentReferenceNumber' ;          
      VarReference := GConst.fncXMLExtract(xmlDoc, varQuery,VarReference, GConst.TYPENODEPATH);
    exception
      when others then
       VarReference := 'NA';
     end ;
       
    open GenCursor for
      select bcac_account_number 
           ACCOUNTNUMBER
      from trtran008
      where bcac_voucher_reference = VarReference
       and bcac_account_head=24900030
       and bcac_record_status  NOT IN(10200005,10200006);

   Goto Process_End;
  end if;
    if numinfotype = GConst.refGetMTMData then
      numCode := gconst.fncxmlextract(xmldoc,'KeyValues/ContractType',   numCode);  
      DatTemp  := gconst.fncxmlextract(xmldoc,'KeyValues/ExecuteDate',  DatTemp);  
      vartemp1 := gconst.fncxmlextract(xmldoc,'KeyValues/TrialRun',  vartemp1);
      insert into temp values(DatTemp,'DatTemp');
      insert into temp values(numCode,'numCode');
      insert into temp values(vartemp1,'vartemp1');
      DELETE FROM TRSYSTEM983;
      DELETE FROM TRSYSTEM959_TRIAL;commit;
      prcMonthEndMTM(DatTemp,varUserID,vartemp1,numCode);
      open gencursor for  
        SELECT mtmf_execute_date "ExecuteDate",
          mtmf_maturity_date "ExpiryDate",
          mtmf_spot_rate "SpotRate",
          mtmf_premium_rate "Premium",
          mtmf_final_rate "AllinRate",
          mtmf_outstanding_amount "Amount",
          mtmf_premium_amort "Premiumamort",
          mtmf_premium_amount "Premiumamount",
          mtmf_balance_premium "Balancepremium",
          mtmf_spot_mtm "MTMSpotRate",
          mtmf_spot_amount "MTMAmountSpot",
          mtmf_final_mtm "MTMForwardRate",
          mtmf_forward_amount "MTMForwardAmount",
          mtmf_total_pandl "TotalPandL",
          mtmf_hedge_reserve "HedgeReserve",
          pkgreturncursor.fncgetdescription(mtmf_company_code,2)"Company",
          pkgreturncursor.fncgetdescription(mtmf_counter_party,2)"CounterParty",
          pkgreturncursor.fncgetdescription(mtmf_base_currency,2)
          || pkgreturncursor.fncgetdescription(mtmf_Other_currency,2)"CurrencyPair",
          pkgreturncursor.fncgetdescription(mtmf_buy_sell,2)"BuySell",
          mtmf_deal_number "SystemReference",
          mtmf_user_reference "UserReference"
        FROM TRSYSTEM959_TRIAL;
      Goto Process_End;  
    end if;  
   if numInfoType = GConst.refRBIrate then
    --begin  
      DatTemp  := gconst.fncxmlextract(xmldoc,'KeyValues/BillDate',  DatTemp); 
    --exception
    --  when others then
     --  DatTemp := datworkdate;
    -- end ;   
     
      open GenCursor for
        select nvl(fncGetRBIRefRate(DatTemp,30400004),1) RBIRefrate from dual;    
     Goto Process_End;
    end if; 
    if numInfoTYpe = GConst.REFIMAGESCANNING then
    vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1); 
     open GenCursor for  
           SELECT 
           DOUP_DOCUMENT_TYPE DocumentType,
            pkgreturncursor.fncgetdescription(DOUP_DOCUMENT_TYPE,1)DocumentTypeDesc,
            DOUP_SYNONYM_NAME SynonymName,
            DOUP_MENU_DESCRIPRION MenuName           
      from tftran101A
      where DOUP_RECORD_STATUS not in(10200005,10200006)
      AND DOUP_SYNONYM_NAME = vartemp1;
    Goto Process_End;
  End if;
   if numInfoTYpe = GConst.REFIMAGEGRIDDATA then
     vartemp1 := gconst.fncxmlextract(xmldoc,'CommandSet/Entity', vartemp1);
--   Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/TradeReference',   Vartemp);   
    select FLDP_XML_FIELD 
      into  Vartemp2
      from trsystem999
      where fldp_table_synonym =vartemp1
      and FLDP_COLUMNS_FORIMAGE='DocumentReference'
      and rownum=1;
     
      Vartemp := Gconst.Fncxmlextract(Xmldoc,'Param/' || Vartemp2,   Vartemp);   
      
     open GenCursor for  
        select    
          IMAG_REFERENCE_NUMBER ReferenceNumber,
          IMAG_REFERENCE_SERIAL ReferenceSerial,
          --IMAG_REFERENCE_NUMBER || '_' || IMAG_REFERENCE_SERIAL "Unique_ReferenceNumber",
          IMAG_DOCUMENT_SERIAL DocumentSerial,
          IMAG_DOCUMENT_TYPE DocumentType,
          pkgreturncursor.fncgetdescription(IMAG_DOCUMENT_TYPE,2)DocumentTypeDes,
          IMAG_DOCUMENT_NAME DocumentName,
          IMAG_DOCUMENT_IMAGE DocumentImage,
          IMAG_USER_REMARKS UserRemarks,
          IMAG_RECORD_STATUS RecordStatus
      from tftran101
      where imag_record_status not in(10200005,10200006)
      AND IMAG_ENTITY_NAME = vartemp1
      AND IMAG_DOCUMENT_REFERENCE = Vartemp;

    Goto Process_End;
  End if;
 if numInfoTYpe = GConst.REFLIMITDASHBOARD then
     open GenCursor for 
     
     select 'Any' Product, LimitType UnderLying,PPLimitAmount,RunningAmount,inwdcancel,utilized,
        PPLimitAmount-RunningAmount LimitAvalible,
        EffectiveDate,DueDate,Period ,'15-oct-18'  Asondate
     from (
         select pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
          nvl(sum(bank_limit_amount),0) PPLimitAmount,
          fncGetPPLimitUtilise('15-oct-18',25300001,1)  as RunningAmount,
          fncGetPPLimitUtilise('15-oct-18',25300001,2)  AS inwdcancel,
          fncGetPPLimitUtilise('15-oct-18',25300001,3)  AS utilized, 
          bank_effective_date  EffectiveDate,bank_due_date DueDate,
--          to_char(to_date(bank_effective_date,'dd-MON-yy'), 'Mon') || ' to ' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'Mon')
--           || '' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'YY')   Period  
          0 Period
          From trtran015 where bank_limit_type in (31100006)
          and bank_record_status not in (10200005,10200006)
          group by bank_limit_type,bank_effective_date,bank_due_date 
          union all
          select 
          pkgreturncursor.fncgetdescription(bank_limit_type,2) LimitType,
          nvl(sum(bank_limit_amount),0) PPLimitAmount,
          fncGetPPLimitUtilise('15-oct-18',25300002,1)  as RunningAmount,
          fncGetPPLimitUtilise('15-oct-18',25300002,2)  AS inwdcancel,
          fncGetPPLimitUtilise('15-oct-18',25300002,3)  AS utilized ,
          bank_effective_date  EffectiveDate,bank_due_date DueDate,
          0 Period
--          to_char(to_date(bank_effective_date,'dd-MON-yy'), 'Mon') || ' to ' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'Mon')
--           || '' || to_char(to_date(bank_due_date,'dd-MON-yy'), 'YY')   Period              
          From trtran015 where bank_limit_type in (31100005)
          and bank_record_status not in (10200005,10200006)
          group by bank_limit_type,bank_effective_date,bank_due_date) ;
     Goto Process_End;
  End if; 
  if numInfoTYpe = GConst.REFLIMITDRILL then
     BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/Category',vartemp,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp := 'NA';
       End;  
       insert into temp values(vartemp,'IE');commit;
     open GenCursor for 
    select Product,DEALNUMBER,BuySell,LimitType,amount,Company,BusinessUnit,ProfitCenter,Bank,BaseAmount,Exerate,Spot,fwdrate,
    Margin,ExpiryDate,SettlementDate,BookingDate,CancelAmount,CancelDate,Premiumamount,PremiumStatus,InstrumentType,RunnInward,
    BaseCurrency,Othercurrency,ProfitLoss,frmDate,ProcessComplete
    from(
     select  'Any' Product,deal_deal_number DEALNUMBER, pkgreturncursor.fncgetdescription(deal_buy_sell,2)  BuySell,  
     (case when Deal_Buy_Sell=25300001 then 'Import' else 'Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,'15-oct-18')),0) amount,
     pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
     pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
     Deal_base_Amount BaseAmount,deal_exchange_rate Exerate,
     deal_spot_rate Spot,Deal_forward_rate fwdrate,
     deal_margin_rate Margin,deal_maturity_from ExpiryDate,
     deal_maturity_date SettlementDate,deal_execute_date BookingDate,
     null CancelAmount,null CancelDate,Null Premiumamount, null PremiumStatus,
     'Forward' InstrumentType,'Running' RunnInward,
     pkgreturncursor.fncgetdescription(deal_base_currency,2)||pkgreturncursor.fncgetdescription(deal_other_currency,2) BaseCurrency,
     Pkgreturncursor.Fncgetdescription(Deal_Other_Currency,2) Othercurrency,
     null ProfitLoss,'15-oct-18' frmDate,12400002 ProcessComplete
     From Trtran001 
     where ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'15-oct-18')
                          Or Deal_Process_Complete = 12400002)                         
                          And Deal_Hedge_Trade=26000003
                          And Deal_Record_Status Not In (10200005,10200006)
    Union All          
     SELECT  'Any' Product, COPT_DEAL_NUMBER DEALNUMBER,
     pkgreturncursor.fncgetdescription(cosu_buy_sell,2)||pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) BuySell,
      ( case when COSU_BUY_SELL=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,'15-oct-18',NULL,1)),0)   amount,
     pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
     pkgreturncursor.fncgetdescription(copt_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(copt_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
     copt_base_Amount BaseAmount,cosu_strike_rate Exerate,0 Spot, 0 fwdrate,
     copt_margin_rate Margin,copt_expiry_date ExpiryDate,
     copt_maturity_date SettlementDate,copt_execute_date BookingDate,
     null CancelAmount, null CancelDate,Copt_Premium_Amount Premiumamount,
     pkgreturncursor.fncgetdescription(copt_premium_status,2) PremiumStatus,
     'Option' InstrumentType,'Running' RunnInward,
     pkgreturncursor.fncgetdescription(copt_base_currency,2) || pkgreturncursor.fncgetdescription(copt_other_currency,2) BaseCurrency,
     pkgreturncursor.fncgetdescription(copt_other_currency,2) OtherCurrency,
     null ProfitLoss,'15-oct-18' frmDate,12400002 ProcessComplete
     From trtran071 , trtran072
     where  COPT_DEAL_NUMBER = COSU_DEAL_NUMBER
     AND ((copt_PROCESS_COMPLETE = 12400001  and copt_COMPLETE_DATE >'15-oct-18') or copt_PROCESS_COMPLETE = 12400002)
     and (COPT_EXECUTE_DATE <= '15-oct-18')
     and  COPT_RECORD_STATUS not in (10200005,10200006)
     AND cosu_record_status NOT IN (10200005,10200006)
     And Copt_Hedge_Trade=26000003       
     Union All 
     SELECT 'Any' Product,deal_deal_number DEALNUMBER,pkgreturncursor.fncgetdescription(deal_buy_sell,2) BuySell,   
     ( case when Deal_Buy_Sell=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1,'01-apr-18')),0) amount,
     pkgreturncursor.fncgetdescription(deal_company_code,2) Company,
     pkgreturncursor.fncgetdescription(deal_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(deal_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(deal_counter_party,2) Bank,
     Deal_base_Amount BaseAmount,deal_exchange_rate Exerate,deal_spot_rate Spot,
     Deal_forward_rate fwdrate,deal_margin_rate Margin,deal_maturity_from ExpiryDate,
     deal_maturity_date SettlementDate,deal_execute_date BookingDate,
     (case when cdel_cancel_type =27000001 then CDEL_CANCEL_AMOUNT else 0 end) CancelAmount,
     cdel_cancel_date CancelDate, null Premiumamount,Null Premiumstatus,
     'Forward Cancel' Instrumenttype,'Cancelled' RunnInward,
     pkgreturncursor.fncgetdescription(deal_base_currency,2)||pkgreturncursor.fncgetdescription(deal_other_currency,2) BaseCurrency,
     pkgreturncursor.fncgetdescription(deal_other_currency,2) OtherCurrency,
     cdel_profit_loss ProfitLoss,'15-oct-18' frmDate,12400001 ProcessComplete
     FROM TRTRAN006,TRTRAN001
     WHERE DEAL_DEAL_NUMBER = CDEL_DEAL_NUMBER 
     AND deal_hedge_trade=26000003 
     AND DEAL_RECORD_STATUS NOT IN (10200005,10200006) 
     AND cdel_record_status NOT IN (10200005,10200006)
     and cdel_cancel_date  between '01-apr-18' and '15-oct-18'    
     union all
     SELECT 'Any' Product,copt_deal_number DEALNUMBER,
     pkgreturncursor.fncgetdescription(cosu_buy_sell,2)||pkgreturncursor.fncgetdescription(COSU_OPTION_TYPE,2) BuySell,   
     ( case when cosu_Buy_Sell=25300001 then 'PP Limit Import' else 'PP Limit Export' end) LimitType,
     NVL((pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COPT_SERIAL_NUMBER,15,1,'15-oct-18',NULL,1)),0) amount,
     pkgreturncursor.fncgetdescription(copt_company_code,2) Company,
     pkgreturncursor.fncgetdescription(copt_backup_deal,2) BusinessUnit,
     pkgreturncursor.fncgetdescription(copt_init_code,2) ProfitCenter,
     pkgreturncursor.fncgetdescription(copt_counter_party,2) Bank,
     copt_base_Amount BaseAmount,cosu_strike_rate Exerate,0 Spot, 0 fwdrate,0 Margin,COPT_EXPIRY_DATE ExpiryDate,
     copt_maturity_date SettlementDate,copt_execute_date BookingDate,CORV_BASE_AMOUNT CancelAmount,
     CORV_EXERCISE_DATE CancelDate, null Premiumamount,Null Premiumstatus,
     'Option Unwind' Instrumenttype,'Cancelled' RunnInward,
     pkgreturncursor.fncgetdescription(COPT_BASE_CURRENCY,2)|| pkgreturncursor.fncgetdescription(copt_other_currency,2) BaseCurrency,
     pkgreturncursor.fncgetdescription(COPT_OTHER_CURRENCY,2) OtherCurrency,
     PKGFOREXPROCESS.Fncgetprofitlossoptnetpandl(CORV_DEAL_NUMBER, CORV_REVERSE_SERIAL,'15-oct-18') ProfitLoss,
     '15-oct-18' frmDate,12400001 ProcessComplete
     FROM trtran073,trtran071,trtran072
     WHERE copt_DEAL_NUMBER = corv_DEAL_NUMBER 
     and copt_deal_number = cosu_deal_number
     AND copt_hedge_trade=26000003
     AND copt_RECORD_STATUS NOT IN (10200005,10200006) 
     AND corv_record_status NOT IN (10200005,10200006)
     AND cosu_record_status NOT IN (10200005,10200006)
     and CORV_EXERCISE_DATE between '01-apr-18' and '15-oct-18')
     where LimitType=decode(vartemp,'NA',LimitType,vartemp);
      Goto Process_End;
  End if; 
  if numInfoTYpe = GConst.REFBANWISELIMIT then
     open GenCursor for 
      select 'IMPEXP' IMPORTEXPORT,BookingAmount.Company "Company",BookingAmount.Counterparty "Bank",
               decode(BookingAmount.Buysell,'Buy','Import','Sell','Export') "Buysell",
               BookingAmount.BookingAmount/1000000 "BookinAmount",
               CompanyBookingAmount.BookingAmount/1000000  CompanyBookingAmount,
               OverAllBookingAmount.BookingAmount/1000000  OverAllBookingAmount,
               round(BookingAmount.BookingAmount/DECODE(CompanyBookingAmount.BookingAmount,0,1,CompanyBookingAmount.BookingAmount),2)*100 ComapnyLevelPercentage,
               round(CompanyBookingAmount.BookingAmount/DECODE(OverAllBookingAmount.BookingAmount,0,1,OverAllBookingAmount.BookingAmount),2)*100 OverallPercentage,
               '01-APR-18' FromDate,'15-OCT-18' toDate
        from
        (select pkgreturncursor.fncgetdescription(Deal_company_code,1) Company,
              pkgreturncursor.fncgetdescription(deal_counter_Party,2) Counterparty,
              pkgreturncursor.fncgetdescription(deal_buy_sell,1) Buysell,
              sum(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookingAmount
          from trtran001
          where deal_record_status not in (10200005,10200006)
          and deal_process_complete =12400002
          group by Deal_company_code,deal_counter_Party,deal_buy_sell) BookingAmount
          inner join
          (select pkgreturncursor.fncgetdescription(Deal_company_code,1) Company,
              pkgreturncursor.fncgetdescription(deal_buy_sell,1) Buysell,
              sum(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookingAmount
          from trtran001
          where deal_record_status not in (10200005,10200006)
          and deal_process_complete =12400002
          group by Deal_company_code,deal_buy_sell) CompanyBookingAmount
          on BookingAmount.Company=CompanyBookingAmount.Company
          and BookingAmount.Buysell=CompanyBookingAmount.Buysell
          inner join
          (select pkgreturncursor.fncgetdescription(deal_buy_sell,1) Buysell,
              sum(pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,1,1, sysdate)) BookingAmount
          from trtran001
          where deal_record_status not in (10200005,10200006)
          and deal_process_complete =12400002
          group by deal_buy_sell) OverAllBookingAmount
          on  BookingAmount.Buysell=OverAllBookingAmount.Buysell
          Union All  
          select 'OPTIONS' IMPORTEXPORT,optBooking.Company,optBooking.Bank,'Outstanding' Buysell,optBooking.BookinAmount/1000000,
         0 CompanyBookingAmount,OptPrevious.BookinAmount/1000000 OverAllBookingAmount,
         0 ComapnyLevelPercentage, 0 OverallPercentage, '01-APR-18','15-OCT-18'
        from
      (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
             sum(COPT_BASE_AMOUNT) BookinAmount
      From Trtran071
      where copt_record_Status not in (10200005,10200006)
      and copt_process_complete =12400002
      group by COPT_COUNTER_PARTY,copt_company_code)optBooking
      inner join
        (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
                sum(COPT_BASE_AMOUNT) BookinAmount
          from trtran071
          where copt_record_Status not in (10200005,10200006)
           and copt_process_complete =12400002
          group by copt_company_code)OptPrevious
      on optBooking.Company=OptPrevious.Company
      union all
  select 'OPTIONS' IMPORTEXPORT, optBooking.Company,optBooking.Bank,'Booking of '||FNCGETFINANCIALYEAR('15-OCT-18','15-OCT-18',1) Buysell,optBooking.BookinAmount/1000000,
         0 CompanyBookingAmount,OptPrevious.BookinAmount/1000000 OverAllBookingAmount,
         0 ComapnyLevelPercentage, 0 OverallPercentage,'01-APR-18','15-OCT-18'
  from
      (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
             pkgreturncursor.fncgetdescription(COPT_COUNTER_PARTY,2) Bank,
             sum(COPT_BASE_AMOUNT) BookinAmount
      from trtran071
      where copt_record_Status not in (10200005,10200006)
      and COPT_EXECUTE_DATE between '01-APR-18' and '15-OCT-18'
      group by COPT_COUNTER_PARTY,copt_company_code)optBooking
      inner join
        (select pkgreturncursor.fncgetdescription(COPT_Company_code,2) Company,
                sum(COPT_BASE_AMOUNT) BookinAmount
          from trtran071
          where copt_record_Status not in (10200005,10200006)
           and COPT_EXECUTE_DATE between '01-APR-18' and '15-OCT-18'
          group by copt_company_code)OptPrevious
      on optBooking.Company=OptPrevious.Company
    union all      
    SELECT 'IRS' IMPORTEXPORT,
    a.Company Company,a.Bank Bank,a.FinancialYear FinancialYear,a.Amount/1000000 Amount,
    0,B.Amount/1000000 TotalBooking,0,0,'01-APR-18','15-OCT-18' from(
    Select Pkgreturncursor.Fncgetdescription(Iirs_Company_Code,2) Company,
           pkgreturncursor.fncgetdescription(IIRS_COUNTER_PARTY,2) Bank,  sum(IIRS_NOTIONAL_AMOUNT) Amount,
           FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)FinancialYear
     from trtran091 WHERE IIRS_EXECUTE_DATE between '01-APR-18' and '15-OCT-18' 
     AND IIRS_RECORD_STATUS NOT IN(10200005,10200006)
     group by IIRS_COMPANY_CODE, IIRS_COUNTER_PARTY,FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)) A
     inner Join
    (Select Pkgreturncursor.Fncgetdescription(Iirs_Company_Code,2) Company,
           sum(IIRS_NOTIONAL_AMOUNT) Amount,
           FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1)FinancialYear
     from trtran091  WHERE IIRS_EXECUTE_DATE between '01-APR-18' and '15-OCT-18' 
     AND IIRS_RECORD_STATUS NOT IN(10200005,10200006)
     group by IIRS_COMPANY_CODE,FNCGETFINANCIALYEAR(IIRS_EXECUTE_DATE,IIRS_EXECUTE_DATE,1))B 
     on A.Company=B.Company 
     and a.FinancialYear = b.FinancialYear;
        Goto Process_End;
  End if; 
if numInfoTYpe = GConst.REFHEDGESTATUS then
--insert into temp values('Inside REFHEDGESTATUS','Hari');commit;
        BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp := '30199999';
       End;  
        BEGIN
           vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/LocationCode',vartemp2,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp2 := '30299999';
       End;
        BEGIN
           vartemp4:= GConst.fncXMLExtract(xmlDoc,'//Param/Portfolio',vartemp4,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp4 := '33399999';
       End;
        BEGIN
           vartemp5:= GConst.fncXMLExtract(xmlDoc,'//Param/SubPortfolio',vartemp5,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp5 := '33899999';
       End;  
      BEGIN
           vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/InflowOutflow',vartemp1,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp1 := '90200001';
       End;
       Begin       
            vartemp6 :=  GConst.fncXMLExtract(xmlDoc,'//Param/CurrencyPair',vartemp6,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp6 := '25699999';
       End;
insert into temp values(vartemp||vartemp1||vartemp2||vartemp3||vartemp4||vartemp5||vartemp6,'Haritest');commit;
     open GenCursor for 
 select     
      CompanyCode,CurrencyCode,DueMonth,DueDate_monthEnd,round(Budgetfcy,2)Budget,
      round((Budgetlocal/decode(Budgetfcy,0,1,Budgetfcy)),2)  BudgetRate, round(Actual,2)Actual,HedgeFcy HedgeAmount,
      round((HedgeLocal/decode(HedgeFcy,0,1,HedgeFcy)),2)HedgeRate,
      round(MarketRate,6) MarketRate,Amountfcy Amountfcy,Amountlocal Amountlocal
     from( 
     select   CompanyCode,CurrencyCode,DueMonth,DueDate_monthEnd,
      Sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Budget'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountfcy) else 0 end) BudgetFcy,
      sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Budget'
                           and DCIF_INFLOW_OUTFLOW= 90200001)
                           then abs(Amountlocal) else 0 end) Budgetlocal,  
               
     sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Actuals'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountfcy) else 0 end) Actual,
    sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Hedge'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountfcy) else 0 end) HedgeFcy,
                           
    sum(case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
                           where DCIF_RECORD_STATUS not in (10200005,10200006)
                           and DCIF_DASHBOARD_NAME='HedgeStatus'
                           and DCIF_TRANS_TYPE='Hedge'
                           and DCIF_INFLOW_OUTFLOW= 90200001)then abs(Amountlocal) else 0 end) HedgeLocal,
       avg(MTMRateActual) MarketRate,                          
      sum(abs(Amountfcy))Amountfcy,Sum(abs(Amountlocal))Amountlocal
      from (select  posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
         POSN_SUBPRODUCT_CODE SubProductCode,posn_account_code AccountCode,to_char(posn_due_date,'MON-yyyy')DueMonth ,
         last_day(posn_due_date) DueDate_monthEnd,
         Sum(CASE WHEN LENGTH('30400004')>8 THEN ABS(Posn_Revalue_Usd) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
        Sum((CASE WHEN LENGTH('30400004')>8 THEN ABS(POSN_REVALUE_INR) ELSE ABS(Posn_Inr_Value) END))/1000000 Amountlocal,
         avg( POSN_MTM_RATEACTUAL) MTMRateActual
      from trsystem997
      where posn_transaction_amount!=0
      and posn_fcy_rate !=0
        and posn_due_date >='15-Oct-2018'
      group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,
      to_char(posn_due_date,'MON-yyyy'), last_day(posn_due_date)
      )group by CompanyCode,CurrencyCode,DueMonth,DueDate_monthEnd)
--      WHERE CompanyCode=numcode1
--      and CurrencyCode=numcode6
   WHERE instr(vartemp,CompanyCode)>0  
--   and instr(vartemp1,InflowOutflow)>0
--    and instr(vartemp2,LocationCode)>0
--    
--     and instr(vartemp4,Portfolio)>0
--    and instr(vartemp5,SubPortfolio)>0
--    and instr(vartemp6,CurrencyPair)>0
      and BudgetFcy<>0
      order by DueDate_monthEnd;
      
--   select     
--      CompanyCode,CurrencyCode,ProductCode,SubProductCode,AccountCode,DueMonth,DueDate_monthEnd,
--      (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Budget'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then Sum(Amountfcy) else 0 end) Budget,
--      (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Budget'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then round(sum(Amountlocal)/decode(sum(Amountfcy),0,1,sum(Amountfcy)),2) else 0 end) BudgetRate,         
--     (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Actuals'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then sum(Amountfcy) else 0 end) Actual,
--    (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Hedge'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then sum(Amountfcy) else 0 end) HedgeAmount,
--    (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Hedge'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then round(sum(Amountlocal)/decode(sum(Amountfcy),0,1,sum(Amountfcy)),2) else 0 end) HedgeRate,
--    (case when AccountCode in (select DCIF_ACCOUNT_CODE from trmaster901 
--                           where DCIF_RECORD_STATUS not in (10200005,10200006)
--                           and DCIF_DASHBOARD_NAME='HedgeStatus'
--                           and DCIF_TRANS_TYPE='Hedge'
--                           and DCIF_INFLOW_OUTFLOW= 90200001)then round(sum(Amountlocal)/decode(sum(Amountfcy),0,1,sum(Amountfcy)),2) else 0 end) MarketRate,                           
--      sum(Amountfcy)Amountfcy,Sum(Amountlocal)Amountlocal
--      from (select  posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
--         POSN_SUBPRODUCT_CODE SubProductCode,posn_account_code AccountCode,to_char(posn_due_date,'Mon-yyyy')DueMonth ,
--         last_day(posn_due_date) DueDate_monthEnd,
--         Sum(CASE WHEN LENGTH('30400004')>8 THEN ABS(Posn_Revalue_Usd) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
--        Sum((CASE WHEN LENGTH('30400004')>8 THEN ABS(POSN_REVALUE_INR) ELSE ABS(Posn_Inr_Value) END))/1000000 Amountlocal
--      from trsystem997
--      where posn_transaction_amount!=0
--      and posn_fcy_rate !=0
--        
--      group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,
--      to_char(posn_due_date,'Mon-yyyy'), last_day(posn_due_date)
--      )group by CompanyCode,CurrencyCode,ProductCode,SubProductCode,AccountCode,DueMonth,DueDate_monthEnd;
       Goto Process_End;
  End if;  
 if numInfoTYpe = GConst.REFFXSETTLEMENT then
  select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;
     open GenCursor for      
--      select  Sdet.CompanyCode,Sdet.LocationCode,Sdet.SubProductCode,Sdet.ProductCode,
--        Sdet.Buysell, Sdet.CurrencyPair,Sdet.TransMonth,Sdet.MonthEndDate,Sdet.SettlementFCY,
--        Sdet.SettlementRate,Sdet.ProfitLoss,
--        round((((Sdet.SettlementFCY *Sdet.SettlementRate) + 
--        decode(Sdet.Buysell,25300001,Sdet.ProfitLoss,-1*Sdet.ProfitLoss))
--        /Sdet.SettlementFCY),6) SettlementRateWithPnL,
--        Bdet.BudgetFcy,Bdet.BudgetRate, Bdet.BudgetQuote,
--        Forward.ForwardFCY,Forward.ForwardRate,
--        0 FutureFCY, 0.00 FutureRate, 0 OptionFCY,
--        0.00 FuturepnL, 0.00 ForwardPnl, 0.00 OptionPNL
--            from (select deal_company_code CompanyCode,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
--                     DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
--                     pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
--                     to_char(cdel_cancel_date,'Mon-YYYY') TransMonth, 
--                     last_day(cdel_cancel_date)MonthEndDate,
--                     sum(cdel_cancel_amount) SettlementFCY,
--                     round(sum(cdel_cancel_amount * cdel_cancel_rate) / decode(sum(cdel_cancel_amount),0,1,sum(cdel_cancel_amount)),6) SettlementRate,
--                     sum(cdel_profit_loss) ProfitLoss
--                from trtran006 inner join trtran001
--                on cdel_Deal_number= deal_deal_number
--                where cdel_Record_Status not in (10200005,10200006)
--                and deal_record_Status not in (10200005,10200006)
--                and cdel_cancel_date <=datworkdate
--                group by to_char(cdel_cancel_date,'Mon-YYYY'),
--                pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
--                deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_buy_Sell,cdel_cancel_date) SDet
---- 155 for export and 154 for import 
--                    left outer join 
--                    (select trad_company_code CompanyCode ,trad_location_code LocationCode, 33399999 SubProductCode,33899999 ProductCode,
--                      decode(trad_import_export,25900154,25300001,25900155,25300002) Buysell, 
--                      pkgreturncursor.fncgetdescription(trad_trade_currency,2) || '/' || pkgreturncursor.fncgetdescription(trad_local_currency,2) CurrencyPair ,
--                      to_char(trad_maturity_date,'Mon-YYYY') TransMonth,
--                      last_day(trad_maturity_date)MonthEndDate,
--                      sum(trad_trade_fcy) BudgetFcy,round(sum(trad_trade_fcy*trad_trade_Rate)/sum(trad_trade_fcy),6) BudgetRate,
--                      sum(trad_trade_fcy*trad_trade_Rate) BudgetQuote
--                    from trtran002 where trad_import_export in (25900154,25900155)
--                    and trad_maturity_date <=datworkdate
--                    and trad_record_Status not in (10200005,10200006)
--                    group by trad_company_code,trad_location_code, trad_import_export, 
--                    trad_trade_currency,trad_local_currency, to_char(trad_reference_date,'Mon-YYYY'),trad_maturity_date)BDet
--                    on Sdet.CompanyCode=BDet.CompanyCode
--                    and Sdet.LocationCode=nvl(Bdet.LocationCode,30299999)
--                    and Sdet.Buysell=Bdet.Buysell
--                    and Sdet.CurrencyPair=Bdet.CurrencyPair
--                    and Sdet.TransMonth= Bdet.TransMonth
--            left outer join 
--            (select deal_company_code CompanyCode,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
--                 DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
--            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
--              to_char(Deal_maturity_date,'Mon-YYYY') MaturityMonth, 
--              last_day(Deal_maturity_date)MonthEndDate,
--            sum(deal_base_amount) ForwardFCY,
--            round(sum(deal_base_amount * deal_exchange_rate) / decode(sum(deal_base_amount),0,1,sum(deal_base_amount)),6) ForwardRate
--            from trtran001
--            where deal_record_Status not in (10200005,10200006)
--            and deal_Deal_type=25400001
--            and Deal_maturity_date <=datworkdate
--            group by to_char(deal_maturity_date,'Mon-YYYY'),
--            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
--            deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_buy_Sell,Deal_maturity_date) Forward
--            on Sdet.CompanyCode=Forward.CompanyCode
--            and Sdet.LocationCode=nvl(Forward.LocationCode,30299999)
--            and Sdet.Buysell=Forward.Buysell
--            and Sdet.CurrencyPair=Forward.CurrencyPair
--            and Sdet.TransMonth= Forward.MaturityMonth;
 select CompanyCode,LocationCode,SubProductCode,ProductCode,
        Buysell,TransMonth, CurrencyPair,MonthEndDate,
        round(sum(SettlementFCY/numdetail),2) SettlementFCY,
       max(SettlementRate) SettlementRate,round(sum(ProfitLoss/numdetail),2) ProfitLoss,
        max(round((((SettlementFCY *SettlementRate) + decode(Buysell,25300001,ProfitLoss,-1*ProfitLoss))/SettlementFCY),6)) SettlementRateWithPnL,
      round(sum(BudgetFCY/numdetail),2) BudgetFCY ,max(BudgetRate)BudgetRate, round(sum(BudgetQuote/numdetail),2) BudgetQuote ,
       round(sum(ForwardFCY/numdetail),2) ForwardFCY,max(ForwardRate) ForwardRate,
       0 FutureFCY, 0.00 FutureRate, 0 OptionFCY,
       0.00 FuturepnL, 0.00 ForwardPnl, 0.00 OptionPNL,
       round(sum((SettlementFCY * SettlementMTMRate))/
        sum(SettlementFCY),6) SettlementMTMRate
     -- avg(SettlementMTMRate) SettlementMTMRate
       --max(BudgetMTMRate) BudgetMTMRate,max(ForwardMTMRate)ForwardMTMRate
        from(
 select  Sdet.CompanyCode CompanyCode,Sdet.LocationCode LocationCode,Sdet.SubProductCode SubProductCode,Sdet.ProductCode ProductCode,
        Sdet.Buysell Buysell, Sdet.CurrencyPair CurrencyPair,Sdet.TransMonth TransMonth,Sdet.MonthEndDate MonthEndDate,Sdet.SettlementFCY SettlementFCY,
        Sdet.SettlementRate SettlementRate,Sdet.ProfitLoss ProfitLoss,
        round((((Sdet.SettlementFCY *Sdet.SettlementRate) + 
        decode(Sdet.Buysell,25300001,Sdet.ProfitLoss,-1*Sdet.ProfitLoss))
        /Sdet.SettlementFCY),6) SettlementRateWithPnL,
        Bdet.BudgetFcy BudgetFCY,Bdet.BudgetRate BudgetRate, Bdet.BudgetQuote BudgetQuote,
        Forward.ForwardFCY ForwardFCY,Forward.ForwardRate ForwardRate,
        0 FutureFCY, 0.00 FutureRate, 0 OptionFCY,
        0.00 FuturepnL, 0.00 ForwardPnl, 0.00 OptionPNL,SDet.SettlementMTMRate SettlementMTMRate,
--        sum((Sdet.SettlementFCY * SDet.SettlementMTMRate))/
--            sum(Sdet.SettlementFCY) SettlementMTMRate,
            BDet.BudgetMTMRate,Forward.ForwardMTMRate
            from (select deal_company_code CompanyCode, DEAL_DEAL_NUMBER ReferenceNumber,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
                     DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
                     pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
                     to_char(cdel_cancel_date,'Mon-YYYY') TransMonth, 
                     last_day(cdel_cancel_date)MonthEndDate,
                     sum(cdel_cancel_amount) SettlementFCY,
                     round(sum(cdel_cancel_amount * cdel_cancel_rate) / decode(sum(cdel_cancel_amount),0,1,sum(cdel_cancel_amount)),6) SettlementRate,
                     sum(cdel_profit_loss) ProfitLoss,
                     avg(pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                        cdel_cancel_date,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                        cdel_cancel_date,cdel_cancel_date)),
                        cdel_cancel_date)) SettlementMTMRate
                from trtran006 inner join trtran001
                on cdel_Deal_number= deal_deal_number
                where cdel_Record_Status not in (10200005,10200006)
                and deal_record_Status not in (10200005,10200006)
--                and cdel_cancel_date <=datworkdate
--                 and cdel_cancel_date >='01-Apr-18'
                group by to_char(cdel_cancel_date,'Mon-YYYY'),
                pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
                deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_counter_party,
                deal_buy_Sell,cdel_cancel_date,DEAL_DEAL_NUMBER) SDet
-- 155 for export and 154 for import 
                    left outer join 
                    (select trad_company_code CompanyCode ,trad_location_code LocationCode, 33399999 SubProductCode,33899999 ProductCode,
                      decode(trad_import_export,25900154,25300001,25900155,25300002) Buysell, 
                      pkgreturncursor.fncgetdescription(trad_trade_currency,2) || '/' || pkgreturncursor.fncgetdescription(trad_local_currency,2) CurrencyPair ,
                      to_char(trad_maturity_date,'Mon-YYYY') TransMonth,
                      last_day(trad_maturity_date)MonthEndDate,
                      sum(trad_trade_fcy) BudgetFcy,round(sum(trad_trade_fcy*trad_trade_Rate)/sum(trad_trade_fcy),6) BudgetRate,
                      sum(trad_trade_fcy*trad_trade_Rate) BudgetQuote, 
                     45.56 BudgetMTMRate
                    from trtran002 where trad_import_export in (25900154,25900155)
                    and trad_maturity_date <=datworkdate
                    and trad_record_Status not in (10200005,10200006)
                    group by trad_company_code,trad_location_code, trad_import_export, 
                    trad_trade_currency,trad_local_currency, to_char(trad_reference_date,'Mon-YYYY'),trad_maturity_date)BDet
                    on Sdet.CompanyCode=BDet.CompanyCode
                    and Sdet.LocationCode=nvl(Bdet.LocationCode,30299999)
                    and Sdet.Buysell=Bdet.Buysell
                    and Sdet.CurrencyPair=Bdet.CurrencyPair
                    and Sdet.TransMonth= Bdet.TransMonth
            left outer join 
            (select deal_company_code CompanyCode,deal_location_code LocationCode,DEAL_INIT_CODE SubProductCode,
                 DEAL_BACKUP_DEAL ProductCode ,deal_buy_Sell Buysell,
            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2) CurrencyPair ,
              to_char(Deal_maturity_date,'Mon-YYYY') MaturityMonth, 
              last_day(Deal_maturity_date)MonthEndDate,
            sum(deal_base_amount) ForwardFCY,
            round(sum(deal_base_amount * deal_exchange_rate) / decode(sum(deal_base_amount),0,1,sum(deal_base_amount)),6) ForwardRate,
            43.56 ForwardMTMRate
            from trtran001
            where deal_record_Status not in (10200005,10200006)
            and deal_Deal_type in(25400001,25400006)
            --and Deal_maturity_date <=datworkdate
            group by to_char(deal_maturity_date,'Mon-YYYY'),
            pkgreturncursor.fncgetdescription(deal_base_currency,2) || '/' || pkgreturncursor.fncgetdescription(deal_other_currency,2),
            deal_company_code,deal_location_code,DEAL_INIT_CODE,DEAL_BACKUP_DEAL,deal_buy_Sell,Deal_maturity_date) Forward
            on Sdet.CompanyCode=Forward.CompanyCode
            and Sdet.LocationCode=nvl(Forward.LocationCode,30299999)
            and Sdet.Buysell=Forward.Buysell
            and Sdet.CurrencyPair=Forward.CurrencyPair
            and Sdet.TransMonth= Forward.MaturityMonth)
            where CompanyCode=30100001
--            and LocationCode=30200001
--            and Buysell=25300002
--            and BudgetFCY is not null
--            and BudgetRate is not null
            and ProductCode=33300001
            and SubProductCode=33800002
            --and rownum<20
            --and TransMonth in('Apr-2018','May-2018','Aug-2018','Jun-2018','Jul-2018','Sep-2018','Oct-2018','Nov-2018','Dec-2018','Jan-2019','Feb-2019','Mar-2019');
          group by CompanyCode,LocationCode,SubProductCode,ProductCode,
        Buysell,TransMonth, CurrencyPair,MonthEndDate
        order by MonthEndDate;
          Goto Process_End;
  End if;

   if numinfotype=Gconst.REFSTOPLOSS then     
   open gencursor for 
   SELECT SystemReference,Currency,Bank,BuySell,DealerName,ExecuteDate,BaseAmount,OutstandingAmount
  SpotRate,ForwardRate,MarginRate,AllinRate,MaturityDate,Instrument,MTMPandL,MTMRate,BenchMarkType,
  --BuySellCode,
  TakeProfitRate,StopLossRate,TakeProfitPnL,StopLossPnL
  FROM(
  SELECT 
  DEAL_DEAL_NUMBER SystemReference,
  Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2)Currency,
  Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)Bank,
  Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)BuySell,
  DEAL_DEALER_NAME DealerName,
  deal_execute_date ExecuteDate,
  DEAL_BASE_AMOUNT BaseAmount,
  pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'08-nov-18')OutstandingAmount,
  Deal_spot_rate SpotRate,
  Deal_forward_rate ForwardRate,
  deal_margin_rate MarginRate,
  deal_exchange_rate AllinRate,
  deal_maturity_date MaturityDate,
  'FORWARD' Instrument,
  Round(pkgreturnreport.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
            deal_serial_number,1,1,'08-nov-18'),
            pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
            '08-nov-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
            '08-nov-18',deal_maturity_date)),
            deal_maturity_date),
             DEAL_EXCHANGE_RATE, deal_buy_sell) *
            decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
            '08-nov-18',deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
            '08-nov-18',deal_maturity_date),deal_maturity_date)),2)MTMPandL,
            
   Round(pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
            '08-nov-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
            '08-nov-18',deal_maturity_date)),deal_maturity_date),6)MTMRate,
   'ALL' BenchMarkType,
  DEAL_BUY_SELL BuySellCode,
  decode (DEAL_BUY_SELL,25300001,DEAL_EXCHANGE_RATE + 0.50,25300002,DEAL_EXCHANGE_RATE - 0.50)TakeProfitRate,
  decode (DEAL_BUY_SELL,25300001,DEAL_EXCHANGE_RATE - 0.50,25300002,DEAL_EXCHANGE_RATE + 0.50)StopLossRate,
  0 TakeProfitPnL,
   0 StopLossPnL
  FROM TRTRAN001 
   WHERE DEAL_EXECUTE_DATE <= '08-nov-18'
  AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'08-nov-18')
                            or DEAL_PROCESS_COMPLETE = 12400002)
  AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
  UNION ALL
  SELECT 
  CFUT_DEAL_NUMBER SystemReference,
  Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)Currency,
  Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)Bank,
  Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)BuySell,
  CFUT_DEALER_NAME DealerName,
  CFUT_EXECUTE_DATE ExecuteDate,
  CFUT_BASE_AMOUNT BaseAmount,
  (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'08-nov-18' )*1000)OutstandingAmount,
  CFUT_SPOT_RATE SpotRate,
  CFUT_FORWARD_RATE ForwardRate,
  CFUT_BANK_MARGIN MarginRate,
  CFUT_EXCHANGE_RATE AllinRate,
  CFUT_MATURITY_DATE MaturityDate,
  'FUTURES' Instrument,
  ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'08-nov-18' )*1000),
            Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'08-nov-18'),
            Cfut_Exchange_Rate,Cfut_Buy_Sell) *
            Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
            CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '08-nov-18')),2)MTMPandL,
  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'08-nov-18') MTMRate,
  'ALL' BenchMarkType,
  CFUT_BUY_SELL BuySellCode,
  decode (CFUT_BUY_SELL,25300001,CFUT_EXCHANGE_RATE + 0.50,25300002,CFUT_EXCHANGE_RATE - 0.50)TakeProfitRate,
  decode (CFUT_BUY_SELL,25300001,CFUT_EXCHANGE_RATE - 0.50,25300002,CFUT_EXCHANGE_RATE + 0.50)StopLossRate ,
  0 TakeProfitPnL,
   0 StopLossPnL
  FROM TRTRAN061
  WHERE CFUT_EXECUTE_DATE <= datWorkDate
  AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >'08-nov-18')
                            or CFUT_PROCESS_COMPLETE = 12400002)
                            AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
  AND CFUT_RECORD_STATUS NOT IN(10200005,10200006))
  WHERE ((BenchMarkType = 'StopLoss' 
  AND ((BuySellCode = 25300001 and MTMRate <= StopLossRate) OR (BuySellCode = 25300002 and MTMRate >= StopLossRate)))
  OR (BenchMarkType = 'TakeProfit' 
  AND ((BuySellCode = 25300001 and MTMRate >= TakeProfitRate) OR (BuySellCode = 25300002 and MTMRate <= TakeProfitRate)))
  OR  (BenchMarkType = 'ALL'));
     Goto Process_End;
 end if;
 
--  if numinfotype=Gconst.refDashboardPosition then
--     varOperation := 'NOP Dash Board Data Extract';
--    --    prcDealerPostion('05-OCT-18');
--    BEGIN
--           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
--           Exception
--            when others then
--              vartemp := '30100001';
--       End;  
--     varOperation := 'Get Number to convert the Amount FCY into';
--       select nvl(PRMC_Convert_AmountInto,1)
--         into numdetail
--       from trsystem051;
--       
--   open gencursor for 
--    SELECT 
--     Pkgreturncursor.Fncgetdescription(DEPN_CURRENCY_CODE,2)||Pkgreturncursor.Fncgetdescription(DEPN_OTHER_CURRENCY,2)"Currency",
--     DEPN_DEALER_NAME "DealerName",
--     NVL(ROUND(SUM(DEPN_OPEN_POSITION*DEPN_HOLDING_RATE)/SUM(DEPN_OPEN_POSITION),6),0) "HoldingRate",
--     NVL(SUM(DEPN_OPEN_POSITION)/1000000,0) "OpenPosition",
--     NVL(SUM(DEPN_TOTAL_SELL),0)/numdetail "TotalSell",
--     NVL(SUM(DEPN_TOTAL_BUY),0)/numdetail "TotalBuy",
--     NVL(SUM(DEPN_TOTAL_POSITION),0)/numdetail "TotalPostion",
--     NVL(SUM(DEPN_PROFITLOSS_YTD),0)/numdetail "PanLYTD",
--     NVL(SUM(DEPN_MTMPANDL_INR),0)/numdetail "MTMPandL"
--    FROM TRSYSTEM997_DELEARPOSITION
--    where instr(vartemp,DEPN_COMPANY_CODE)>0
--    GROUP BY DEPN_CURRENCY_CODE,DEPN_OTHER_CURRENCY,DEPN_DEALER_NAME;
--     Goto Process_End;
-- end if;
-- 
  if numinfotype=Gconst.refDashboardPosition then
     varOperation := 'NOP Dash Board Data Extract';
    --    prcDealerPostion('05-OCT-18');
    BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
           --vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/UserID',vartemp,GConst.TYPENODEPATH);
           vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/Book',vartemp,GConst.TYPENODEPATH);
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/Strategy',vartemp,GConst.TYPENODEPATH);
          -- vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CompanyCode',vartemp,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp := '30100001';
    End;  
    insert into temp1 values (vartemp,vartemp2);
     insert into temp1 values (vartemp3,varUserID); commit;
    prcDealerPostion (datWorkdate,vartemp,varUserID,vartemp2, vartemp3);
    
     varOperation := 'Get Number to convert the Amount FCY into';
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;

 open gencursor for
    SELECT 
         Pkgreturncursor.Fncgetdescription(DEPN_CURRENCY_CODE,2)||Pkgreturncursor.Fncgetdescription(DEPN_OTHER_CURRENCY,2)"Currency",
         DEPN_DEALER_NAME "DealerName",
         NVL(ROUND(SUM(DEPN_OPEN_POSITION*DEPN_HOLDING_RATE)/SUM(DEPN_OPEN_POSITION),6),0) "HoldingRate",
         NVL(SUM(DEPN_OPEN_POSITION)/numdetail,0) "OpenPosition",
         NVL(SUM(DEPN_TOTAL_SELL),0)/numdetail "TotalSell",
         NVL(SUM(DEPN_TOTAL_BUY),0)/numdetail "TotalBuy",
         NVL(SUM(DEPN_TOTAL_POSITION),0)/numdetail "TotalPostion",
         NVL(SUM(DEPN_MTMPANDL_INR),0)/numdetail "MTMPandL",
         NVL(SUM(DEPN_DTD),0)/numdetail "PLDTD",
         NVL(SUM(DEPN_MTD),0)/numdetail "PLMTD",
         NVL(SUM(DEPN_QTD),0)/numdetail "PLQTD",
         NVL(SUM(DEPN_YTD),0)/numdetail "PLYTD",
         nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_TOTAL_POSITION else 0 end),0)/numdetail FWDPostion,
         nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_TOTAL_POSITION else 0 end),0)/numdetail FURPostion,
         nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_TOTAL_POSITION else 0 end),0)/numdetail OPTPostion,
         nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail MTMFWD,
         nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail MTMFUR,
         nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail MTMOPT,
          nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_YTD else 0 end),0)/numdetail PLFWD,
         nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_YTD else 0 end),0)/numdetail PLFUR,
         nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_YTD else 0 end),0)/numdetail PLOPT
        FROM TRSYSTEM997_DELEARPOSITION
        where DEPN_DEALER_NAME not in ('Pawan')
        GROUP BY DEPN_CURRENCY_CODE,DEPN_OTHER_CURRENCY,DEPN_DEALER_NAME;
     Goto Process_End;
 end if;    
 
    if numinfotype=Gconst.refDashboardBudget then
   
     varOperation := 'Get Number to convert the Amount FCY into';
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;

 open gencursor for
     select DEPN_DEALER_NAME,
           nvl( sum(( case when DEPN_instrument='FORWARD' then DEPN_TOTAL_POSITION else 0 end) 
               * depn_Position_RATE) ,0)/numdetail FWDPostion,
             nvl( sum(( case when DEPN_instrument='FUTURES' then DEPN_TOTAL_POSITION else 0 end)
                * depn_Position_RATE),0)/numdetail FURPostion,
             nvl( sum(( case when DEPN_instrument='OPTIONS' then DEPN_TOTAL_POSITION else 0 end)
               * depn_Position_RATE),0)/numdetail OPTPostion,
              sum(DEPN_TOTAL_POSITION*depn_Position_RATE)/numdetail TotalPosition,
              nvl(DEPN_Dealer_budget,0)/numdetail DealerBudget,
              abs(nvl(DEPN_Dealer_budget,0)- sum(DEPN_TOTAL_POSITION*depn_Position_RATE))/numdetail OverByBudget
--               sum(DEPN_TOTAL_POSITION*depn_Position_RATE) TotalPosition,
--              DEPN_Dealer_budget- sum(DEPN_TOTAL_POSITION*depn_Position_RATE) OverByBudget
   from TRSYSTEM997_DELEARPOSITION
   where DEPN_DEALER_NAME not in ('ALL','Pawan')
   group by DEPN_DEALER_NAME,DEPN_Dealer_budget;
     Goto Process_End;
 end if;
 
     if numinfotype=Gconst.refDashboardDealer then
   
     varOperation := 'Get Number to convert the Amount FCY into';
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;

 open gencursor for
     select DEPN_DEALER_NAME,
            nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail MTMFWD,
            nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail MTMFUR,
            nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail MTMOPT,
            sum(DEPN_MTMPANDL_INR)/numdetail MTMTOT,
            nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_YTD else 0 end),0)/numdetail PLFWD,
            nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_YTD else 0 end),0)/numdetail PLFUR,
            nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_YTD else 0 end),0)/numdetail PLOPT,
            sum(nvl(DEPN_YTD,0))/numdetail PLTOT
   from TRSYSTEM997_DELEARPOSITION
   where DEPN_DEALER_NAME not in ('ALL','Pawan')
   group by DEPN_DEALER_NAME;
     Goto Process_End;
 end if;
 
 
 
 
     if numinfotype=Gconst.refDashboardPortfolio then
   
     varOperation := 'Get Number to convert the Amount FCY into';
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;

 open gencursor for
    select pkgreturncursor.fncgetdescription(DEPN_BACKUP_DEAL,2) Book,
          --  pkgreturncursor.fncgetdescription(DEPN_INIT_CODE,2) Strategy,
           nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_YTD else 0 end) ,0)/numdetail FWDYTD,
           nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_YTD else 0 end),0)/numdetail FURYTD,
           nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_YTD else 0 end),0)/numdetail OPTYTD,
           sum(DEPN_YTD) /numdetail TotalYTD,
           nvl( sum( case when DEPN_instrument='FORWARD' then DEPN_MTMPANDL_INR else 0 end) ,0)/numdetail FWDMTM,
           nvl( sum( case when DEPN_instrument='FUTURES' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail FURMTM,
           nvl( sum( case when DEPN_instrument='OPTIONS' then DEPN_MTMPANDL_INR else 0 end),0)/numdetail OPTMTM,
           sum(DEPN_MTMPANDL_INR) /numdetail TotalMTM
   from TRSYSTEM997_DELEARPOSITION
   where DEPN_DEALER_NAME != 'ALL'
   group by DEPN_BACKUP_DEAL,DEPN_INIT_CODE;
     Goto Process_End;
 end if;
 
  
     
     
--   if numinfotype=Gconst.refDashboardPosition_detail then
--     varOperation := 'NOP Dash Board Data Extract';
--     --'15-oct-18' := trunc('15-oct-18');
--     open gencursor for 
--        SELECT 
--        DEAL_DEAL_NUMBER "SystemReference",
--        Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2)"Currency",
--        Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)"Bank",
--        Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)"BuySell",
--        DEAL_DEALER_NAME "DealerName",
--        deal_execute_date "ExecuteDate",
--        DEAL_BASE_AMOUNT "BaseAmount",
--        pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'15-oct-18')"OutstandingAmount",
--        Deal_spot_rate "SpotRate",
--        Deal_forward_rate "ForwardRate",
--        deal_margin_rate "MarginRate",
--        deal_exchange_rate "AllinRate",
--        deal_maturity_date "MaturityDate",
--        'FORWARD' "Instrument",
--        'OpenPosition' "OpenPosition",
--         pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
--                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date)),
--                  deal_maturity_date)"MTMRate", 
--        ROUND(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
--                  deal_serial_number,1,1,'15-oct-18'),
--                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
--                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date)),
--                  deal_maturity_date),
--                   DEAL_EXCHANGE_RATE, deal_buy_sell),2)"MTMPandL",                  
--         DECODE(deal_other_currency, 30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'15-oct-18',
--         deal_buy_sell,pkgforexprocess.fncAllotMonth (DEAL_COUNTER_PARTY, '15-oct-18', deal_maturity_date),deal_maturity_date))"WashRate",       
--        Round(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
--                  deal_serial_number,1,1,'15-oct-18'),
--                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
--                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date)),
--                  deal_maturity_date),
--                   DEAL_EXCHANGE_RATE, deal_buy_sell) *
--                  decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
--                  '15-oct-18',deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
--                  '15-oct-18',deal_maturity_date),deal_maturity_date)),2)"MTMPandLINR"
--        FROM TRTRAN001 
--         WHERE (((  'OpenPosition' = 'OpenPosition') and  (DEAL_EXECUTE_DATE <= '15-oct-18'))
--                or ((  'Buy' = 'Buy') and  (DEAL_EXECUTE_DATE = '15-oct-18'))
--                or ((  'Sell' = 'Sell') and  (DEAL_EXECUTE_DATE = '15-oct-18')))
--        AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'15-oct-18')
--                                  or DEAL_PROCESS_COMPLETE = 12400002)
--        AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
--        UNION ALL
--        SELECT 
--        CFUT_DEAL_NUMBER "SystemReference",
--        Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)"Currency",
--        Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)"Bank",
--        Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)"BuySell",
--        CFUT_DEALER_NAME "DealerName",
--        CFUT_EXECUTE_DATE "ExecuteDate",
--        CFUT_BASE_AMOUNT "BaseAmount",
--        (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000)"OutstandingAmount",
--        CFUT_SPOT_RATE "SpotRate",
--        CFUT_FORWARD_RATE "ForwardRate",
--        CFUT_BANK_MARGIN "MarginRate",
--        CFUT_EXCHANGE_RATE "AllinRate",
--        CFUT_MATURITY_DATE "MaturityDate",
--        'FUTURES' "Instrument",
--        'OpenPosition' "OpenPosition",
--        Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18') "MTMRate", 
--        Round(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
--                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
--                  Cfut_Exchange_Rate,Cfut_Buy_Sell),2)"MTMPandL",        
--         Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
--                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')) "WashRate",       
--        ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
--                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
--                  Cfut_Exchange_Rate,Cfut_Buy_Sell) *
--                  Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
--                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')),2)"MTMPandL"
--        FROM TRTRAN061
--        WHERE (((  'OpenPosition' = 'OpenPosition') and  (CFUT_EXECUTE_DATE <= '15-oct-18'))
--                or ((  'Buy' = 'Buy') and  (CFUT_EXECUTE_DATE = '15-oct-18'))
--                or ((  'Sell' = 'Sell') and  (CFUT_EXECUTE_DATE = '15-oct-18')))
--        AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >'15-oct-18')
--                                  or CFUT_PROCESS_COMPLETE = 12400002)
--                                  AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
--        AND CFUT_RECORD_STATUS NOT IN(10200005,10200006);
--
--     Goto Process_End;
-- end if;
 if numinfotype=Gconst.refDashboardPosition_detail then
     varOperation := 'Dealer Position Dash Board Data Extract';
     --'15-oct-18' := trunc('15-oct-18');
          BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/Currency',vartemp,GConst.TYPENODEPATH); --currencypair
           Exception
            when others then
              vartemp := 'NA';
       End;
        BEGIN
           vartemp1:= GConst.fncXMLExtract(xmlDoc,'//Param/DealerName',vartemp1,GConst.TYPENODEPATH);--DealerName
           Exception
            when others then
              vartemp1 := 'NA';
       End;
       BEGIN
           vartemp2:= GConst.fncXMLExtract(xmlDoc,'//Param/BuySell',vartemp2,GConst.TYPENODEPATH);--BuySell
           Exception
            when others then
              vartemp2 := 'NA';
       End;
        BEGIN
           vartemp3:= GConst.fncXMLExtract(xmlDoc,'//Param/Position',vartemp3,GConst.TYPENODEPATH);--Openposition
           Exception
            when others then
              vartemp3 := 'NA';
       End;      
       insert into temp values(vartemp||vartemp1||vartemp2||vartemp3,'Haritest');commit;
     open gencursor for 
     select "SystemReference","Currency","Bank","BuySell","DealerName","ExecuteDate","BaseAmount","OutstandingAmount","SpotRate","ForwardRate",
                "MarginRate","AllinRate","MaturityDate","Instrument","OpenPosition","MTMRate","MTMPandL","WashRate","MTMPandLINR" from(
        SELECT 
        DEAL_DEAL_NUMBER "SystemReference",
        Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2)"Currency",
        Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)"Bank",
        Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)"BuySell",
        DEAL_DEALER_NAME "DealerName",
        deal_execute_date "ExecuteDate",
        DEAL_BASE_AMOUNT "BaseAmount",
        pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,'15-oct-18')"OutstandingAmount",
        Deal_spot_rate "SpotRate",
        Deal_forward_rate "ForwardRate",
        deal_margin_rate "MarginRate",
        deal_exchange_rate "AllinRate",
        deal_maturity_date "MaturityDate",
        'FORWARD' "Instrument",
        'OpenPosition' "OpenPosition",
         pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date)),
                  deal_maturity_date)"MTMRate", 
        ROUND(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                  deal_serial_number,1,1,'15-oct-18'),
                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date)),
                  deal_maturity_date),
                   DEAL_EXCHANGE_RATE, deal_buy_sell),2)"MTMPandL",                  
         DECODE(deal_other_currency, 30400003,1, pkgforexprocess.fncgetrate(deal_other_currency, 30400003,'15-oct-18',
         deal_buy_sell,pkgforexprocess.fncAllotMonth (DEAL_COUNTER_PARTY, '15-oct-18', deal_maturity_date),deal_maturity_date))"WashRate",       
        Round(PKGRETURNREPORT.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                  deal_serial_number,1,1,'15-oct-18'),
                  pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                  '15-oct-18',deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date)),
                  deal_maturity_date),
                   DEAL_EXCHANGE_RATE, deal_buy_sell) *
                  decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
                  '15-oct-18',deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
                  '15-oct-18',deal_maturity_date),deal_maturity_date)),2)"MTMPandLINR"
        FROM TRTRAN001 
         WHERE (((  'OpenPosition' = 'OpenPosition') and  (DEAL_EXECUTE_DATE <= '15-oct-18'))
                or ((  'Buy' = 'Buy') and  (DEAL_EXECUTE_DATE = '15-oct-18'))
                or ((  'Sell' = 'Sell') and  (DEAL_EXECUTE_DATE = '15-oct-18')))
        AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >'15-oct-18')
                                  or DEAL_PROCESS_COMPLETE = 12400002)
        AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
        UNION ALL
        SELECT 
        CFUT_DEAL_NUMBER "SystemReference",
        Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)"Currency",
        Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)"Bank",
        Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)"BuySell",
        CFUT_DEALER_NAME "DealerName",
        CFUT_EXECUTE_DATE "ExecuteDate",
        CFUT_BASE_AMOUNT "BaseAmount",
        (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000)"OutstandingAmount",
        CFUT_SPOT_RATE "SpotRate",
        CFUT_FORWARD_RATE "ForwardRate",
        CFUT_BANK_MARGIN "MarginRate",
        CFUT_EXCHANGE_RATE "AllinRate",
        CFUT_MATURITY_DATE "MaturityDate",
        'FUTURES' "Instrument",
        'OpenPosition' "OpenPosition",
        Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18') "MTMRate", 
        Round(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
                  Cfut_Exchange_Rate,Cfut_Buy_Sell),2)"MTMPandL",        
         Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')) "WashRate",       
        ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,'15-oct-18' )*1000),
                  Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,'15-oct-18'),
                  Cfut_Exchange_Rate,Cfut_Buy_Sell) *
                  Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
                  CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, '15-oct-18')),2)"MTMPandL"
        FROM TRTRAN061
        WHERE (((  'OpenPosition' = 'OpenPosition') and  (CFUT_EXECUTE_DATE <= '15-oct-18'))
                or ((  'Buy' = 'Buy') and  (CFUT_EXECUTE_DATE = '15-oct-18'))
                or ((  'Sell' = 'Sell') and  (CFUT_EXECUTE_DATE = '15-oct-18')))
        AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >'15-oct-18')
                                  or CFUT_PROCESS_COMPLETE = 12400002)
                                  AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
        AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)) 
        where  "Currency"=decode(vartemp,'NA',"Currency",vartemp)
            and "OpenPosition"=decode(vartemp3,'NA',"OpenPosition",vartemp3)
            and "BuySell"=decode(vartemp2,'NA',"BuySell",vartemp2)
            and "DealerName"=decode(vartemp1,'NA',"DealerName",vartemp1);
     Goto Process_End;
 end if;
if numinfotype=Gconst.refDealsMonitoring then
     varOperation := 'Deals Monitoring ';
     
     DatWorkDate := trunc(DatWorkDate);
     open gencursor for 
         SELECT SystemReference,Currency,Bank,BuySell,DealerName,ExecuteDate,BaseAmount,OutstandingAmount
              SpotRate,ForwardRate,MarginRate,AllinRate,MaturityDate,Instrument,MTMPandL,MTMRate,BenchMarkType,
              BuySellCode,TakeProfitRate,StopLossRate
              FROM(
              SELECT 
              DEAL_DEAL_NUMBER SystemReference,
              Pkgreturncursor.Fncgetdescription(DEAL_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(DEAL_OTHER_CURRENCY,2) Currency,
              Pkgreturncursor.Fncgetdescription(DEAL_COUNTER_PARTY,2)Bank,
              Pkgreturncursor.Fncgetdescription(DEAL_BUY_SELL,2)BuySell,
              DEAL_DEALER_NAME DealerName,
              deal_execute_date ExecuteDate,
              DEAL_BASE_AMOUNT BaseAmount,
              pkgForexProcess.fncGetOutstanding(deal_deal_number,deal_serial_number,1,1,DatWorkDate)OutstandingAmount,
              Deal_spot_rate SpotRate,
              Deal_forward_rate ForwardRate,
              deal_margin_rate MarginRate,
              deal_exchange_rate AllinRate,
              deal_maturity_date MaturityDate,
              'FORWARD' Instrument,
              Round(pkgreturnreport.fncgetprofitloss(pkgForexProcess.fncGetOutstanding(deal_deal_number,
                        deal_serial_number,1,1,DatWorkDate),
                        pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                        DatWorkDate,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                        DatWorkDate,deal_maturity_date)),
                        deal_maturity_date),
                         DEAL_EXCHANGE_RATE, deal_buy_sell) *
                        decode(deal_other_currency,30400003,1, pkgforexprocess.fncGetRate(deal_other_currency,30400003,
                        DatWorkDate,deal_buy_sell,pkgForexProcess.fncAllotMonth(deal_counter_party,
                        DatWorkDate,deal_maturity_date),deal_maturity_date)),2)MTMPandL,
                        
               Round(pkgforexprocess.fncGetRate(deal_base_currency,deal_other_currency,
                        DatWorkDate,deal_buy_sell,(pkgForexProcess.fncAllotMonth(deal_counter_party,
                        DatWorkDate,deal_maturity_date)),deal_maturity_date),6)MTMRate,
               'ALL' BenchMarkType,
               DEAL_BUY_SELL BuySellCode,
              decode (DEAL_BUY_SELL,25300001,DEAL_EXCHANGE_RATE + 0.50,25300002,DEAL_EXCHANGE_RATE - 0.50)TakeProfitRate,
              decode (DEAL_BUY_SELL,25300001,DEAL_EXCHANGE_RATE - 0.50,25300002,DEAL_EXCHANGE_RATE + 0.50)StopLossRate  
              FROM TRTRAN001 
               WHERE DEAL_EXECUTE_DATE <= DatWorkDate
              AND ((DEAL_PROCESS_COMPLETE = 12400001  and DEAL_COMPLETE_DATE >DatWorkDate)
                                        or DEAL_PROCESS_COMPLETE = 12400002)
              AND DEAL_RECORD_STATUS NOT IN(10200005,10200006)
              UNION ALL
              SELECT 
              CFUT_DEAL_NUMBER SystemReference,
              Pkgreturncursor.Fncgetdescription(CFUT_BASE_CURRENCY,2)||Pkgreturncursor.Fncgetdescription(CFUT_OTHER_CURRENCY,2)Currency,
              Pkgreturncursor.Fncgetdescription(CFUT_EXCHANGE_CODE,2)Bank,
              Pkgreturncursor.Fncgetdescription(CFUT_BUY_SELL,2)BuySell,
              CFUT_DEALER_NAME DealerName,
              CFUT_EXECUTE_DATE ExecuteDate,
              CFUT_BASE_AMOUNT BaseAmount,
              (Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,DatWorkDate )*1000)OutstandingAmount,
              CFUT_SPOT_RATE SpotRate,
              CFUT_FORWARD_RATE ForwardRate,
              CFUT_BANK_MARGIN MarginRate,
              CFUT_EXCHANGE_RATE AllinRate,
              CFUT_MATURITY_DATE MaturityDate,
              'FUTURES' Instrument,
              ROUND(Pkgforexprocess.Fncgetprofitloss((Pkgforexprocess.Fncgetoutstanding(Cfut_Deal_Number, 0,14,1,DatWorkDate )*1000),
                        Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,DatWorkDate),
                        Cfut_Exchange_Rate,Cfut_Buy_Sell) *
                        Decode(Cfut_Other_Currency,30400003,1,Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,
                        CFUT_BASE_CURRENCY,CFUT_OTHER_CURRENCY, DatWorkDate)),2)MTMPandL,
              Pkgforexprocess.Fncfuturemtmrate(Cfut_Maturity_Date,Cfut_Exchange_Code,Cfut_Base_Currency,Cfut_Other_Currency,DatWorkDate) MTMRate,
              'ALL' BenchMarkType,
              CFUT_BUY_SELL BuySellCode,
              decode (CFUT_BUY_SELL,25300001,CFUT_EXCHANGE_RATE + 0.50,25300002,CFUT_EXCHANGE_RATE - 0.50)TakeProfitRate,
              decode (CFUT_BUY_SELL,25300001,CFUT_EXCHANGE_RATE - 0.50,25300002,CFUT_EXCHANGE_RATE + 0.50)StopLossRate    
              FROM TRTRAN061
              WHERE CFUT_EXECUTE_DATE <= DatWorkDate
              AND ((CFUT_PROCESS_COMPLETE = 12400001  and CFUT_COMPLETE_DATE >DatWorkDate)
                                        or CFUT_PROCESS_COMPLETE = 12400002)
                                        AND CFUT_RECORD_STATUS NOT IN(10200005,10200006)
              AND CFUT_RECORD_STATUS NOT IN(10200005,10200006))
              WHERE ((BenchMarkType = 'StopLoss' 
              AND ((BuySellCode = 25300001 and MTMRate <= StopLossRate) OR (BuySellCode = 25300002 and MTMRate >= StopLossRate)))
              OR (BenchMarkType = 'TakeProfit' 
              AND ((BuySellCode = 25300001 and MTMRate >= TakeProfitRate) OR (BuySellCode = 25300002 and MTMRate <= TakeProfitRate)))
              OR  (BenchMarkType = 'ALL'))
              and Rownum=1;

     Goto Process_End;
 end if;

 if numinfotype=gconst.REFPOSITIONGAPVIEWNEW then
    varOperation := 'Extraction Position GAP View';
--    vartemp1 := gconst_tr.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
--    vartemp := gconst_tr.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
--    vartemp3 := gconst_tr.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
--    vartemp4 := gconst_tr.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);
--    vartemp5 := gconst_tr.fncxmlextract(xmldoc, 'LocationCode', vartemp5);
--    numCode1 := gconst_tr.fncxmlextract(xmldoc, 'ConvertInto', numCode1);
--    numCode2 := gconst_tr.fncxmlextract(xmldoc, 'LocalCurrency', numCode2);

--    numError := pkgForexProcess.fncPositionGenerate(varUserID, datWorkDate,
--                 vartemp,vartemp1,vartemp3,vartemp4,vartemp5,
--                 numCode1,numCode2);



  Open GenCursor for  
 select (case when ExposureType='Inflow' then 1 
               when ExposureType='Hedge Sell' then 2 
               when exposureType='Outflow' then 1 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
           (case when ExposureType='Inflow' then 1 
               when ExposureType='Hedge Sell' then 1 
               when exposureType='Outflow' then 2 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
        ExposureType as "ExposureType",
        sum(Forward1) "Forward1",
        Nvl(case when sum(AmountLocal1) > 0 then
        Round(sum(AmountLocal1)/sum(AmountFCY1),6)
        end,0) as "BenchmarkRate1" ,
        Nvl(Round(case when sum(AmountMTMLocal1) > 0 then
        Round(sum(AmountMTMLocal1)/sum(AmountFCY1),6) 
        End,6),0) as "MTMRate1",
        sum(Forward2) "Forward2",
        Nvl(case when sum(AmountLocal2) > 0 then
        Round(sum(AmountLocal2)/sum(AmountFCY2),6) 
        end,0)  as "BenchmarkRate2" ,
        Nvl(case when sum(AmountMTMLocal2) > 0 then        
        Round(sum(AmountMTMLocal2)/sum(AmountFCY2),6) end,0) as "MTMRate2",
        sum(Forward3) "Forward3",
        Nvl(case when sum(AmountLocal3) > 0 then
        Round(sum(AmountLocal3)/sum(AmountFCY3),6) end,0) as "BenchmarkRate3" ,
        Nvl(case when sum(AmountMTMLocal3) > 0 then        
        Round(sum(AmountMTMLocal3)/sum(AmountFCY3),6) end,0) as "MTMRate3",

        sum(Forward4) "Forward4",
        Nvl(case when sum(AmountLocal4) > 0 then        
        Round(sum(AmountLocal4)/sum(AmountFCY4),6) end,0) as "BenchmarkRate4" ,
        Nvl(case when sum(AmountMTMLocal4) > 0 then        
        Round(sum(AmountMTMLocal4)/sum(AmountFCY4),6)end,0) as "MTMRate4",

        sum(Forward5) "Forward5",
        Nvl(case when sum(AmountLocal5) > 0 then          
        Round(sum(AmountLocal5)/sum(AmountFCY5),6) end,0) as "BenchmarkRate5" ,
        Nvl(case when sum(AmountMTMLocal5) > 0 then  
        Round(sum(AmountMTMLocal5)/sum(AmountFCY5),6) end,0) as "MTMRate5",

        sum(Forward6) "Forward6",
        Nvl(case when sum(AmountLocal6) > 0 then 
        Round(sum(AmountLocal6)/sum(AmountFCY6),6) end,0) as "BenchmarkRate6" ,
        Nvl(case when sum(AmountMTMLocal6) > 0 then 
        Round(sum(AmountMTMLocal6)/sum(AmountFCY6),6) end,0) as "MTMRate6",

        sum(Forward7) "Forward7",
        Nvl(case when sum(AmountLocal7) > 0 then 
        Round(sum(AmountLocal7)/sum(AmountFCY7),6) end,0) as "BenchmarkRate7",
        Nvl(case when sum(AmountMTMLocal7) > 0 then 
        Round(sum(AmountMTMLocal7)/sum(AmountFCY7),6) end,0) as "MTMRate7",

        sum(Forward8) "Forward8",
        Nvl(case when sum(AmountLocal8) > 0 then 
        Round(sum(AmountLocal8)/sum(AmountFCY8),6) end,0) as "BenchmarkRate8",
        Nvl(case when sum(AmountMTMLocal8) > 0 then 
        Round(sum(AmountMTMLocal8)/sum(AmountFCY8),6) end,0) as "MTMRate8",    

        sum(Forward9) "Forward9",
        Nvl(case when sum(AmountLocal9) > 0 then 
        Round(sum(AmountLocal9)/sum(AmountFCY9),6) end,0) as "BenchmarkRate9",
        Nvl(case when sum(AmountMTMLocal9) > 0 then 
        Round(sum(AmountMTMLocal9)/sum(AmountFCY9),6) end,0) as "MTMRate9",        

        sum(Forward10) "Forward10",
        Nvl(case when sum(AmountLocal10) > 0 then 
        Round(sum(AmountLocal10)/sum(AmountFCY10),6) end,0) as "BenchmarkRate10",
        Nvl(case when sum(AmountMTMLocal10) > 0 then 
        Round(sum(AmountMTMLocal10)/sum(AmountFCY10),6) end,0) as "MTMRate10",     

        sum(Forward11) "Forward11",
        Nvl(case when sum(AmountLocal11) > 0 then 
        Round(sum(AmountLocal11)/sum(AmountFCY11),6) end,0) as "BenchmarkRate11",
        Nvl(case when sum(AmountMTMLocal11) > 0 then 
        Round(sum(AmountMTMLocal11)/sum(AmountFCY11),6) end,0) as "MTMRate11", 

        sum(Forward12) "Forward12",
        Nvl(case when sum(AmountLocal12) > 0 then 
        Round(sum(AmountLocal12)/sum(AmountFCY12),6) end,0) as "BenchmarkRate12",
        Nvl(case when sum(AmountMTMLocal12) > 0 then 
        Round(sum(AmountMTMLocal12)/sum(AmountFCY12),6) end,0) as "MTMRate12",
        sum(Forward1 + Forward2 + Forward3 + Forward4 + Forward5 + Forward6 +
        Forward7 + Forward8 + Forward9 + Forward10 +Forward11 + Forward12) as "Total"
        from(
    select 
     ExposureType ExposureType ,
      (decode( DueDays,0,AmountFCY,0)) Forward1,
      decode(DueDays,0,AmountLocal,0)AmountLocal1,
      decode(DueDays,0,AmountFCY,0) AmountFCY1,
      decode(DueDays,0,AmountMTMLocal,0)AmountMTMLocal1,

      (decode( DueDays,1,AmountFCY,0)) Forward2,
      decode(DueDays,1,AmountLocal,0)AmountLocal2,
      decode(DueDays,1,AmountFCY,0) AmountFCY2,
      decode(DueDays,1,AmountMTMLocal,0) AmountMTMLocal2,

      (decode( DueDays,2,AmountFCY,0)) Forward3,
      decode( DueDays,2,AmountLocal,0) AmountLocal3,
      decode( DueDays,2,AmountFCY,0) AmountFCY3,
      decode( DueDays,2,AmountMTMLocal,0)AmountMTMLocal3,

      (decode( DueDays,3,AmountFCY,0)) Forward4,
      decode( DueDays,3,AmountLocal,0) AmountLocal4,
      decode( DueDays,3,AmountFCY,0) AmountFCY4,
      decode( DueDays,3,AmountMTMLocal,0)AmountMTMLocal4,

      (decode( DueDays,4,AmountFCY,0)) Forward5,
      decode( DueDays,4,AmountLocal,0)AmountLocal5,
      decode( DueDays,4,AmountFCY,0) AmountFCY5,
      decode( DueDays,4,AmountMTMLocal,0) AmountMTMLocal5,

      (decode( DueDays,5,AmountFCY,0)) Forward6,
      decode( DueDays,5,AmountLocal,0)AmountLocal6,
      decode( DueDays,5,AmountFCY,0) AmountFCY6,
      decode( DueDays,5,AmountMTMLocal,0)AmountMTMLocal6,

      (decode( DueDays,6,AmountFCY,0)) Forward7,
      decode( DueDays,6,AmountLocal,0)AmountLocal7,
      decode( DueDays,6,AmountFCY,0) AmountFCY7,
      decode( DueDays,6,AmountMTMLocal,0)AmountMTMLocal7,

      (decode( DueDays,7,AmountFCY,0)) Forward8,
      decode( DueDays,7,AmountLocal,0)AmountLocal8,
      decode( DueDays,7,AmountFCY,0) AmountFCY8,
      decode( DueDays,7,AmountMTMLocal,0)AmountMTMLocal8,


      (decode( DueDays,8,AmountFCY,0)) Forward9,
      decode( DueDays,8,AmountLocal,0)AmountLocal9,
      decode( DueDays,8,AmountFCY,0) AmountFCY9,
      decode( DueDays,8,AmountMTMLocal,0) AmountMTMLocal9,

      (decode( DueDays,9,AmountFCY,0)) Forward10,
      decode( DueDays,9,AmountLocal,0)AmountLocal10,
      decode( DueDays,9,AmountFCY,0) AmountFCY10,
      decode( DueDays,9,AmountMTMLocal,0)AmountMTMLocal10,

      (decode( DueDays,10,AmountFCY,0)) Forward11,
      decode( DueDays,10,AmountLocal,0)AmountLocal11,
      decode( DueDays,10,AmountFCY,0) AmountFCY11,
      decode( DueDays,10,AmountMTMLocal,0)AmountMTMLocal11,

      (decode( DueDays,11,AmountFCY,0)) Forward12,
      decode( DueDays,11,AmountLocal,0) AmountLocal12, 
      decode( DueDays,11,AmountFCY,0) AmountFCY12,
      decode( DueDays,11,AmountMTMLocal,0)AmountMTMLocal12
    from (select posn_company_code CompanyCode,posn_currency_code CurrencyCode,posn_product_code ProductCode,
         POSN_SUBPRODUCT_CODE SubProductCode,
         Posn_Account_Code Accountcode,
         Sum(CASE WHEN LENGTH(30400004)>8 THEN ABS(Posn_Revalue_Usd) ELSE Abs(Posn_Transaction_Amount) END)/1000000 Amountfcy,
        Sum((CASE WHEN LENGTH(30400004)>8 THEN ABS(POSN_REVALUE_INR) ELSE ABS(Posn_Inr_Value) END))/1000000 Amountlocal,
       nvl(sum((case when length(30400004)>8 then ABS(POSN_REVALUE_INR) else ABS(posn_transaction_amount)*POSN_MTM_RATEACTUAL end)),0)/1000000 AmountMTMLocal,
         (case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
                      else
                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) DueDays,
         (case
           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
           when posn_account_code between 25900001 and 25900050 then  'Inflow'
           --    in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Inflow'
           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                      25900085,25900074,25900075) then 'Hedge Sell'
            when posn_account_code between 25900051 and 25900099 then  'Outflow' end) ExposureType 
          --  in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Outflow' end) ExposureType
  from trsystem997
  where posn_transaction_amount!=0
  and posn_fcy_rate !=0
  AND POSN_ACCOUNT_CODE NOT IN(25900155,25900154,25900020,25900021,25900022,25900023,25900082,25900083,25900084,
                                      25900085,25900075)
 -- and instr(vartemp1,posn_currency_code)>0
 -- and posn_company_code=numcode2
 -- and posn_currency_code=numcode1
 -- and posn_product_code= decode( numcode3,33300000,posn_product_code,numcode3)
 -- and POSN_SUBPRODUCT_CODE= decode( numCode4,33800000,POSN_SUBPRODUCT_CODE,numCode4)

  group by posn_company_code,posn_currency_code,posn_product_code,POSN_SUBPRODUCT_CODE,posn_account_code,(case when (to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))) >=0 then
                         to_number(to_char(posn_due_date,'mm')) - to_number(to_chaR(to_date(datWorkDate),'mm'))
                      else
                        (12- (to_number(to_chaR(to_date(datWorkDate),'mm')) -to_number(to_char(posn_due_date,'mm'))))  end ) ))
  group by ExposureType
  --group by CompanyCode,CurrencyCode,ExposureType,ProductCode,SubProductCode
  ORDER BY 1 ASC;



  goto process_end;

 end if;  

  if numInfoType=gconst.REFPOSITIONGAPVIEWGRIDNEW then

    --insert into temp values  ('Taken Values','FDd') ; commit;

    varOperation := 'Extraction Position GAP View into new grid';
    vartemp1 := gconst.fncxmlextract(xmldoc, 'CurrencyCode', vartemp1);  
    vartemp := gconst.fncxmlextract(xmldoc, 'CompanyCode', vartemp);  
    vartemp3 := gconst.fncxmlextract(xmldoc, 'ProductCode', vartemp3);
    vartemp4 := gconst.fncxmlextract(xmldoc, 'SubProductCode', vartemp4);


       Open GenCursor for  
          select (case when ExposureType='Export' then 1 
               when ExposureType='Hedge Sell' then 2 
               when exposureType='Import' then 1 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureOrder",
           (case when ExposureType='Export' then 1 
               when ExposureType='Hedge Sell' then 1
               when exposureType='Import' then 2 
               when exposureType ='Hedge Buy' then 2 end ) "ExposureSubOrder",
            ExposureType "ExposureType",PKGRETURNCURSOR.fncgetdescription(POSN_COMPANY_CODE,2) "Company",
                  PKGRETURNCURSOR.fncgetdescription(POSN_CURRENCY_CODE,2) "Currency",
                  PKGRETURNCURSOR.fncgetdescription(posn_product_code,2) "Product",
                  PKGRETURNCURSOR.fncgetdescription(POSN_SUBPRODUCT_CODE,2) "SubProduct",
                  PKGRETURNCURSOR.fncgetdescription(POSN_ACCOUNT_CODE,2) "Account",
                  POSN_REFERENCE_NUMBER "ReferenceNumber",
                  POSN_REFERENCE_SERIAL "SerialNumber",
                  POSN_REFERENCE_DATE "ReferenceDate",
                  POSN_DEALER_ID "DealerID",
                  PKGRETURNCURSOR.fncgetdescription(POSN_COUNTER_PARTY,2) "CounterParty",
                  POSN_TRANSACTION_AMOUNT "TransactionAmount",
                  POSN_FCY_RATE "FCYRate",
                  POSN_USD_RATE "USDRate",
                  POSN_INR_VALUE "INRValue",
                  POSN_USD_VALUE "USDValue",
                  POSN_M2M_USDRATE "M2MUSDRate",
                  POSN_M2M_INRRATE "M2MINRRate",
                  POSN_REVALUE_USD "RevalueUSD",
                  POSN_REVALUE_INR "RevalueINR",
                  POSN_POSITION_USD "PositionUSD",
                  POSN_POSITION_INR "PositionINR",
                  POSN_DUE_DATE "DueDate",
                  POSN_MATURITY_MONTH "MaturityMonth",
                  PKGRETURNCURSOR.fncgetdescription(POSN_PRODUCT_CODE,2) "ProductCode",
                  POSN_USER_ID "UserID",
                  to_char(POSN_DUE_DATE,'MON-YY') "DueDate"
                  from (select trsystem997.*,(case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900026) then 'Export'
                           when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
                                                      25900014,25900015,25900011,25900012) then 'Hedge Buy'
                           when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900091) then 'Import'
                           when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                      25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType
                        from trsystem997
                         where posn_transaction_amount!=0
                          and posn_fcy_rate !=0
                          and instr(vartemp1,posn_currency_code)>0);


   --insert into temp values  ('Taken Values','FDd') ; commit;

   Goto Process_End;

  end if;
    if  numInfoType = GConst.RefNOPDashBoard then
   varOperation := 'NOP Dash Board Data Extract';
     numcode := PKGFOREXPROCESS.fncPositionGenerate(varUserid,to_date(trunc(sysdate)));
    --prcNOP_DashBoard();
    BEGIN
           numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode1 := 3;
       End; 
       delete from temp;commit;
       insert into temp values(varUserID||numcode1,'RefNOPDashBoard');commit;
       
       prcNOP_DashBoard('30400004,30400003',numcode1);
    BEGIN
           numcode:= GConst.fncXMLExtract(xmlDoc,'//Param/Category',numcode,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode := 31799999;
       End; 
   --open gencursor for
--     SELECT  POSN_MATURITY_MONTH "MaturityMonth",
--           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) "Inflow",
--           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) "Outflow",
--           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) "Inflow_Hedge",
--           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) "Outflow_Hedge",
--           Sum(NVL(POSN_EXPOSURE_GAP,0)) "Exposure_Gap",
--           Sum(NVL(POSN_HEDGE_GAP,0)) "Hedge_Gap",
--           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) "Inflow_Budget_Rate",
--           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  "Outflow_Budget_Rate",
--           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))))  "Hedge_Buy_Rate",
--           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))))  "Hedge_Sell_Rate",
--           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  "Exposure_Rate",
--           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) "Exposure_Hedge_Rate",
--           POSN_IMPORT_EXPORT "ImportExport"
--        FROM trsystem997_NOP
--        where (POSN_INFLOW_AMOUNT !=0 
--          or POSN_OUTFLOW_AMOUNT !=0 
--          or POSN_INFLOWHEDGE_AMOUNT!=0 
--          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
--          and POSN_MATURITY_MONTH is not null
--        AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
--          group by POSN_MATURITY_MONTH,POSN_IMPORT_EXPORT;

--     SELECT  POSN_MATURITY_MONTH "MaturityMonth",
--           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) "Inflow",
--           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) "Outflow",
--           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) "Inflow_Hedge",
--           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) "Outflow_Hedge",
--           abs(Sum(NVL(POSN_EXPOSURE_GAP,0))) "Exposure_Gap",
--           abs(Sum(NVL(POSN_HEDGE_GAP,0))) "Hedge_Gap",
--           Sum(NVL(POSN_EXPOSURE_GAP,0)) + Sum(NVL(POSN_HEDGE_GAP,0))"OverAllGap",
--           round(case when Sum(NVL(POSN_EXPOSURE_GAP,0)) != 0 and Sum(NVL(POSN_HEDGE_GAP,0)) !=0 then
--           ABS((Sum(NVL(POSN_HEDGE_GAP,0)) / Sum(NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) "HedgeRatio",
--           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) "Inflow_Budget_Rate",
--           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  "Outflow_Budget_Rate",
--           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))))  "Hedge_Buy_Rate",
--           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))))  "Hedge_Sell_Rate",
--           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  "Exposure_Rate",
--           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) "Exposure_Hedge_Rate",
--           avg(POSN_MTM_RATE) MTMRate,
--           decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
--           0 "ImportExport",
--           to_number(posn_month_order) MonthOrder
--        FROM trsystem997_NOP
--        where (POSN_INFLOW_AMOUNT !=0 
--          or POSN_OUTFLOW_AMOUNT !=0 
--          or POSN_INFLOWHEDGE_AMOUNT!=0 
--          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
--          and POSN_MATURITY_MONTH is not null
--          and posn_month_order >= to_char(sysdate,'YYYYMM')
--        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
--          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export
--          ORDER BY to_number(posn_month_order);


       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;
     --   numdetail:=1000000;
       
   open gencursor for
 select MaturityMonth  as "MaturityMonth" ,
       round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
        (case when Inflow_Budget_Rate!=0 then nvl(Inflow_Budget_Rate,MTMRate) else MTMRate end) "Inflow_Budget_Rate",
        (case when Outflow_Budget_Rate!=0 then nvl(Outflow_Budget_Rate,MTMRate) else MTMRate end) "Outflow_Budget_Rate",
        (case when Hedge_Buy_Rate!=0 then nvl(Hedge_Buy_Rate,MTMRate) else MTMRate end) "Hedge_Buy_Rate",
        (case when Hedge_Sell_Rate!=0 then nvl(Hedge_Sell_Rate,MTMRate) else MTMRate end) "Hedge_Sell_Rate",
        (case when Exposure_Rate!=0 then nvl(Exposure_Rate,MTMRate) else MTMRate end) "Exposure_Rate",
        (case when Exposure_Hedge_Rate!=0 then nvl(Exposure_Hedge_Rate,MTMRate) else MTMRate end)  "Exposure_Hedge_Rate",
        MTMRate "MTMRate",ExposureType "ExposureType",ImportExport "ImportExport",
        MonthOrder "MonthOrder",
        round((((MTMRate-Inflow_Budget_Rate)* Inflow)/numdetail),2) "InflowPL",
        round((((Outflow_Budget_Rate-MTMRate)* Outflow)/numdetail),2) "OutflowPL",
        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "InflowHedgePL",
        round((((Hedge_Sell_Rate-MTMRate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
        round(((case when ExposureType='Inflow' then
             (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
             else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
        round(((case when ExposureType='OutFlow' then
         (MTMRate-Exposure_Rate)* OverAllGap
         else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL"
   from(
      SELECT  POSN_MATURITY_MONTH MaturityMonth,
           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,
           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
           abs(Sum(NVL(POSN_EXPOSURE_GAP,0))) Exposure_Gap,
           abs(Sum(NVL(POSN_HEDGE_GAP,0))) Hedge_Gap,
           Sum(NVL(POSN_EXPOSURE_GAP,0)) + Sum(NVL(POSN_HEDGE_GAP,0))OverAllGap,
           round(case when Sum(NVL(POSN_EXPOSURE_GAP,0)) != 0 and Sum(NVL(POSN_HEDGE_GAP,0)) !=0 then
           ABS((Sum(NVL(POSN_HEDGE_GAP,0)) / Sum(NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
           avg(POSN_MTM_RATE) MTMRate,
           decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
           0 ImportExport,
           to_number(posn_month_order) MonthOrder
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0 
          or POSN_OUTFLOW_AMOUNT !=0 
          or POSN_INFLOWHEDGE_AMOUNT!=0 
          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
          and POSN_MATURITY_MONTH is not null
        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
          group by to_number(posn_month_order),POSN_MATURITY_MONTH,POSN_IMPort_export)
          ORDER BY to_number(MonthOrder);
          
      Goto Process_End;
  end if;
  
  
   if numInfoType = GConst.REFFXSUMMARYLOCWISE then
   varOperation := 'FX Summary';  
    BEGIN
           numcode1:= GConst.fncXMLExtract(xmlDoc,'//Param/BasisType',numcode1,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode1 := 4;
       End;  
        --prcNOP_DashBoard(varUserID,numcode1);
    BEGIN
           numcode:= GConst.fncXMLExtract(xmlDoc,'//Param/Category',numcode,GConst.TYPENODEPATH);
           Exception
           when others then
           numcode := 31799999;
    End; 
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;
   open gencursor for
 select  round((Inflow/numdetail),2) "Inflow",round(Outflow/numdetail,2) "Outflow",
        round((Inflow_Hedge/numdetail),2) "Inflow_Hedge" ,
        round((Outflow_Hedge/numdetail),2) "Outflow_Hedge" ,
        round((Exposure_Gap/numdetail),2) "Exposure_Gap",
        round((Hedge_Gap/numdetail),2) "Hedge_Gap",
        round((OverAllGap/numdetail),2) "OverAllGap" ,HedgeRatio "HedgeRatio",
        round(Inflow_Budget_Rate,4) "Inflow_Budget_Rate",round(Outflow_Budget_Rate,4) "Outflow_Budget_Rate",
        round(nvl(Hedge_Buy_Rate,MTMRATE),2) "Hedge_Buy_Rate", round(nvl(Hedge_Sell_Rate,MTMRATE),4) "Hedge_Sell_Rate",
        round(Exposure_Rate,4) "Exposure_Rate",round(Exposure_Hedge_Rate,4) "Exposure_Hedge_Rate",
        round(MTMRate,4) "MTMRate",
        --ExposureType "ExposureType",
        ImportExport "ImportExport",       
        round((((MTMRate-Inflow_Budget_Rate)* Inflow)/numdetail),2) "InflowPL",
        round((((Outflow_Budget_Rate-MTMRate)* Outflow)/numdetail),2) "OutflowPL",
        round((((MTMRate-Hedge_Buy_Rate)* Outflow_Hedge)/numdetail),2) "InflowHedgePL",
        round((((Hedge_Sell_Rate-MTMRate)* Outflow_Hedge)/numdetail),2) "OutflowHedgePL",
--        round(((case when ExposureType='Inflow' then
--             (MTMRate-Exposure_Hedge_Rate)* Hedge_Gap
--             else (Exposure_Hedge_Rate-MTMRate)* Hedge_Gap end)/numdetail),2) "HedgeGapPL",
--        round(((case when ExposureType='OutFlow' then
--         (MTMRate-Exposure_Rate)* OverAllGap
        -- else (Exposure_Rate-MTMRate)* OverAllGap end)/numdetail),2) "OverAllGapPL",
          Location1 "Location1"
   from(
      SELECT  
           sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))) Inflow,
           Sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))) Outflow,
           Sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))) Inflow_Hedge,
           Sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))) Outflow_Hedge,
           abs(Sum(NVL(POSN_EXPOSURE_GAP,0))) Exposure_Gap,
           abs(Sum(NVL(POSN_HEDGE_GAP,0))) Hedge_Gap,
           Sum(NVL(POSN_EXPOSURE_GAP,0)) + Sum(NVL(POSN_HEDGE_GAP,0))OverAllGap,
           round(case when Sum(NVL(POSN_EXPOSURE_GAP,0)) != 0 and Sum(NVL(POSN_HEDGE_GAP,0)) !=0 then
           ABS((Sum(NVL(POSN_HEDGE_GAP,0)) / Sum(NVL(POSN_EXPOSURE_GAP,0))))*100 else 0 end) HedgeRatio,
           Sum( NVL(POSN_INFLOW_RATE,0)*ABS(NVL(POSN_INFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOW_AMOUNT,0)))) Inflow_Budget_Rate,
           Sum( NVL(POSN_OUTFLOW_RATE,0)*ABS(NVL(POSN_OUTFLOW_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOW_AMOUNT,0))))  Outflow_Budget_Rate,
           Sum( NVL(POSN_HEDGEBUY_RATE,0)*ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_INFLOWHEDGE_AMOUNT,0)))) Hedge_Buy_Rate,
           Sum( NVL(POSN_HEDGESELL_RATE,0)*ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))/Decode(sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0))),0,1,sum(ABS(NVL(POSN_OUTFLOWHEDGE_AMOUNT,0)))) Hedge_Sell_Rate,
           Sum( NVL(POSN_EXPOSURE_RATE,0)*ABS(NVL(POSN_EXPOSURE_GAP,0)))/Decode(sum(ABS(NVL(POSN_EXPOSURE_GAP,0))),0,1,sum(ABS(NVL(POSN_EXPOSURE_GAP,0))))  Exposure_Rate,
           Sum( NVL(POSN_OVERALLHEDGE_RATE,0)*ABS(NVL(POSN_HEDGE_GAP,0)))/Decode(sum(ABS(NVL(POSN_HEDGE_GAP,0))),0,1,sum(ABS(NVL(POSN_HEDGE_GAP,0)))) Exposure_Hedge_Rate,
           avg(POSN_MTM_RATE) MTMRate,
           --decode(POSN_IMPort_export,25300001,'OutFlow','Inflow') ExposureType,
           0 ImportExport,          
           pkgreturncursor.fncgetdescription(POSN_LOCATION_CODE,2) Location1
        FROM trsystem997_NOP
        where (POSN_INFLOW_AMOUNT !=0 
          or POSN_OUTFLOW_AMOUNT !=0 
          or POSN_INFLOWHEDGE_AMOUNT!=0 
          or POSN_OUTFLOWHEDGE_AMOUNT!=0)
          --and POSN_MATURITY_MONTH is not null
        --temp commented by hari  and posn_month_order >= to_char(sysdate,'YYYYMM')
        --AND POSN_IMPORT_EXPORT=decode(numcode,31799999,POSN_IMPORT_EXPORT,numcode)
          group by POSN_LOCATION_CODE);
          
      Goto Process_End;
  end if;
----------------------------------------------------------------------
    if numInfoType = GConst.REFFXSUMMARYFWDOPT then
   varOperation := 'FX Summary Forward Vs Options';     
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;
   open gencursor for
  SELECT  TO_CHAR(Posn_due_date,'MON-YYYY') MaturityMonth,
   round(sum((case when length('30400004,30400003')< 8 then abs(POSN_USD_VALUE) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
    'FWDBUY' BuySell,
    'FWD'TransactionType,   
    round(sum(abs(POSN_FCY_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate    
    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
                                                    where erel_entity_type=919 and erel_main_entity=91900005 )b
                                                    on a.posn_account_code=b.erel_entity_relation                                                    
                             where posn_transaction_amount!=0
                             and posn_due_date >= SYSDATE
                              and posn_fcy_rate !=0
                              and b.erel_main_entity in (91900005)
    GROUP BY TO_CHAR(Posn_due_date,'MON-YYYY'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity 
    union all
         SELECT  TO_CHAR(Posn_due_date,'MON-YYYY') MaturityMonth,
   round(sum((case when length('30400004,30400003') < 8 then abs(POSN_USD_VALUE) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'FWDSell' BuySell,
    'FWD'TransactionType,
    round(sum(abs(POSN_FCY_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
                                                    where erel_entity_type=919 and erel_main_entity=91900006)b
                                                    on a.posn_account_code=b.erel_entity_relation                                                    
                             where posn_transaction_amount!=0
                             and posn_due_date >= SYSDATE
                              and posn_fcy_rate !=0
                              and b.erel_main_entity in (91900006)
    GROUP BY TO_CHAR(Posn_due_date,'MON-YYYY'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity   
       union all
         SELECT  TO_CHAR(Posn_due_date,'MON-YYYY') MaturityMonth,
   round(sum((case when length('30400004,30400003')<8 then abs(POSN_USD_VALUE) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'OPTBUY' BuySell,
    'OPT'TransactionType ,
     round(sum(abs(POSN_FCY_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
                                                    where erel_entity_type=919 and erel_main_entity=91900007)b
                                                    on a.posn_account_code=b.erel_entity_relation                                                    
                             where posn_transaction_amount!=0
                             and posn_due_date >= SYSDATE
                              and posn_fcy_rate !=0
                              and b.erel_main_entity in (91900007)
    GROUP BY TO_CHAR(Posn_due_date,'MON-YYYY'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity 
    
       union all
         SELECT  TO_CHAR(Posn_due_date,'MON-YYYY') MaturityMonth,
   round(sum((case when length('30400004,30400003')<8 then abs(POSN_USD_VALUE) else abs(posn_transaction_amount) end))/numdetail,2) Amount,
    TO_CHAR(Posn_due_date,'YYYYMM')MonthOrder,
     'OPTSELL' BuySell,
    'OPT'TransactionType  ,
     round(sum(abs(POSN_FCY_RATE*posn_transaction_amount))/SUM(abs(posn_transaction_amount)),2) CoveredRate 
    from trsystem997 a left outer join (select erel_entity_relation,erel_main_entity from trsystem008 
                                                    where erel_entity_type=919 and erel_main_entity=91900008 )b
                                                    on a.posn_account_code=b.erel_entity_relation                                                    
                             where posn_transaction_amount!=0
                             and posn_due_date >= SYSDATE
                              and posn_fcy_rate !=0
                              and b.erel_main_entity in (91900008)
    GROUP BY TO_CHAR(Posn_due_date,'MON-YYYY'), TO_CHAR(Posn_due_date,'YYYYMM'),b.erel_main_entity 
    ORDER BY 1;
          
      Goto Process_End;
  end if;
    if numinfotype=Gconst.RefNOPDashBoard_Details then
     varOperation := 'NOP Dash Board Data Extract';
        BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/Category',vartemp,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp := 'NOV-19';
       End; 
       DELETE FROM TEMP;COMMIT;
       INSERT INTO TEMP VALUES(vartemp,'HARITEST');COMMIT;
   open gencursor for
   SELECT pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) "Company",
          pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) "Currency",
          pkgreturncursor.fncgetdescription(posn_product_code,2) "Product",
          pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) "SubProduct",
          pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,2) "Account",
          POSN_REFERENCE_NUMBER "ReferenceNumber",
          POSN_REFERENCE_SERIAL "SerialNumber",
          POSN_REFERENCE_DATE "ReferenceDate",
          POSN_DEALER_ID "DealerID",
          pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) "CounterParty",
          POSN_TRANSACTION_AMOUNT "TransactionAmount",
          POSN_FCY_RATE "FCYRate",
          POSN_USD_RATE "USDRate",
          POSN_INR_VALUE "INRValue",
          POSN_USD_VALUE "USDValue",
          POSN_M2M_USDRATE "M2MUSDRate",
          POSN_M2M_INRRATE "M2MINRRate",
          POSN_REVALUE_USD "RevalueUSD",
          POSN_REVALUE_INR "RevalueINR",
          POSN_POSITION_USD "PositionUSD",
          POSN_POSITION_INR "PositionINR",
          POSN_DUE_DATE "DueDate",
          POSN_MATURITY_MONTH "MaturityMonth",
          pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) "ProductCode",
          POSN_USER_ID "UserID" 
        FROM TRSYSTEM997
       where instr(UPPER(vartemp),to_char(POSN_DUE_DATE,'MON-YYYY'))>0;    
      Goto Process_End;
  end if;
      if  numInfoType = GConst.REFHEDGESTATUSDRILL then 
   open gencursor for
  select 
            PKGRETURNCURSOR.FNCGETDESCRIPTION(COMPANYCODE,2) Company,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(DEAL_TYPE,2)DealType,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(BUYSELLCODE,2)BuySell,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(TRADER,2) Trader,
            DEALNUMBER,
            EXECUTEDATE,
            MATURITYDATE,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(CURRENCYCODE,2)Currency,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(FORCURRENCY,2)ForeignCurrency,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(COUNTERPARTY,2)Counterparty,EXCHANGERATE,
            DEALBASEAMOUNT,
            OUTSTANDINGAMOUNT,
            DEALREMARKS,
            USERREFERENCE,
            SPOTRATE,
            FORWARDRATE,
            MARGINRATE,
            DESCRIPTION,
            EXPIRYDATE,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(BROKERCODE,2)Broker,
            MTMRATE,
            CONFIRMDATE,
            DEALTIMESTAMP,
            DEALERNMAE,
            ENTERDBY,
            PKGRETURNCURSOR.FNCGETDESCRIPTION(TRANSACTIONTYPE,2) TransactionType,
            FRWDFINALMTM,
            MTMSPOT,
            MTMPREMIUM
         from trsystem983
         where ason_date='15-OCT-18'
         and DESCRIPTION='Forward'
         and BUYSELLCODE=25300001
         and PROCESSCOMPLETE=12400002;
       Goto Process_End;
  end if;
if  numInfoType = GConst.REFHEDGESTATUSDRILLSUB then 
BEGIN
           vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/Category',vartemp,GConst.TYPENODEPATH);
           Exception
            when others then
              vartemp := 'NA';
       End; 
open gencursor for
        select Company,CURRENCY,ACCOUNTCODE,REFNUM,REFDATE,BANK,TRANSAMT,FCYRATE,INRAMNT,M2MINRRATE,DUEDATE,MaturityMonth,
            PRODUCT,HT,FORCURRENCY,SUBPRODUCT,ExposureType,TransType from(
    select  pkgreturncursor.fncgetdescription(POSN_COMPANY_CODE,2) AS Company,
         pkgreturncursor.fncgetdescription(POSN_CURRENCY_CODE,2) AS CURRENCY,
         pkgreturncursor.fncgetdescription(POSN_ACCOUNT_CODE,1) AS ACCOUNTCODE,
         POSN_REFERENCE_NUMBER AS REFNUM,
         POSN_REFERENCE_DATE AS REFDATE,
         pkgreturncursor.fncgetdescription(POSN_COUNTER_PARTY,2) AS BANK,
         ( case when (posn_product_code in 33300004 and posn_currency_code in 30400004
                  and posn_subproduct_code in (
                  33800055,33800056,33800057)) 
                       then -(posn_transaction_amount)
         else  (posn_transaction_amount) end) AS TRANSAMT,
         POSN_FCY_RATE AS FCYRATE,
         POSN_INR_VALUE AS INRAMNT,
         POSN_M2M_INRRATE AS M2MINRRATE,
         POSN_DUE_DATE AS DUEDATE,
         to_char(to_date(POSN_DUE_DATE),'MON-YYYY') MaturityMonth,
         pkgreturncursor.fncgetdescription(POSN_PRODUCT_CODE,2) AS PRODUCT,
         POSN_HEDGE_TRADE AS HT,
         pkgreturncursor.fncgetdescription(POSN_FOR_CURRENCY,2) AS FORCURRENCY,
         pkgreturncursor.fncgetdescription(POSN_SUBPRODUCT_CODE,2) AS SUBPRODUCT,
        (case when posn_account_code in (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Export'
        when posn_account_code in (25900018,25900019,25900020,25900021,25900022,25900023,
        25900014,25900015,25900011,25900012) then 'Hedge Buy'
        when posn_account_code in (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Import'
        when posn_account_code in (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
        25900085,25900074,25900075) then 'Hedge Sell' end) ExposureType,
        (case  when posn_account_code in
        (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,25900025) then 'Commitments'
               when posn_account_code in
        (25900018,25900019,25900020,25900021,25900022,25900023,25900014,25900015,25900011,25900012) then 'Hedged'
               when posn_account_code in
        (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086,25900087) then 'Commitments'
               when posn_account_code in
        (25900061,25900062,25900078,25900079,25900082,25900083,25900084,25900085,25900074,25900075) then 'Hedged'
               end)   TransType        
        From Trsystem997)
       where MaturityMonth=decode(vartemp,'NA',MaturityMonth,vartemp);
              Goto Process_End;
  end if;   
  
  if  numInfoType = GConst.REFGRIDSCHEMA then   
     vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CursorType',vartemp,GConst.TYPENODEPATH);
    open gencursor for 
        select GRID_CURSOR_NAME "CursorName",
                Grid_Cursor_Number CursorNumber, 
                --pkgreturncursor.fncgetdescription(GRID_LANGUAGE_CODE,2) LanguageCode,--- en English French fr 903
                GRID_COLUMN_NAME ColumnName,
                pkgreturncursor.fncgetdescription(GRID_COLUMN_TYPE,2) ColumnType , -- New Pick Code --STRING, NUMBER, DATE ColumnDataType 904
                GRID_DISPLAY_NAME DisplayName,
                pkgreturncursor.fncgetdescription(Nvl(GRID_DISPLAY_YN,12400002),2) DisplayYN,
                to_char(nvl(GRID_COLUMN_WIDTH,100)) Width,
                pkgreturncursor.fncgetdescription(nvl(GRID_AGGREGATE_YN,12400002),2) AggregateYN,
                GRID_AGGREGATE_FUNCTION AggregateFunction, -- New Pick Code -- SUM, AVG, Etc.. -905
                pkgreturncursor.fncgetdescription(nvl(GRID_EDITABLE_YN,12400002),2) EditableYN,
                nvl(GRID_Decimal_scale,'0') FormatString
                from TRSYSTEM999C
                where instr(vartemp,Grid_Cursor_Number)>0;
        Goto Process_End;
    end if;     

 
 
  if  numInfoType = GConst.refRiskMonitoring then   
    -- vartemp:= GConst.fncXMLExtract(xmlDoc,'//Param/CursorType',vartemp,GConst.TYPENODEPATH);
    open gencursor for 
      select pkgreturncursor.fncgetdescription(RiskTriggered.RiskType,1) RiskType,
            RiskTriggered.Triggered,
           (case when (RiskTriggered.Triggered < EarlierTriggered.Earlier) then 
           EarlierTriggered.Earlier-RiskTriggered.Triggered else 0 end) ActionaTaken,
           RiskTriggered.Triggered - (case when (RiskTriggered.Triggered < EarlierTriggered.Earlier) then 
           EarlierTriggered.Earlier-RiskTriggered.Triggered else 0 end)
           PendingForAction
            from (select rdel_risk_type RiskType,count(*) Triggered
            from trtran011
            group by rdel_risk_type) RiskTriggered
            left outer join
            (select rdel_risk_type RiskType,count(*) Earlier
            from trtran011
            group by rdel_risk_type) EarlierTriggered
            on RiskTriggered.RiskType= EarlierTriggered.RiskType;
        Goto Process_End;
    end if; 
  if numinfoType=Gconst.refRiskMonitoring_detail then
    open gencursor for 
          SELECT  rdel_risk_reference RiskReference, rdel_deal_number DealNumber,    rdel_serial_number "SerialNumber",
            pkgreturncursor.fncgetdescription(rdel_risk_type,1) RiskType,
            rdel_risk_date RiskDate,  rdel_limit_usd "Limit", rdel_amount_excess ExcessAmount,
            rdel_action_taken Action, rdel_stake_holder stakeHolders,
            rdel_location_code "Location",rdel_company_code Company, rdel_product_code Book,
            rdel_subproduct_code Strategy
        FROM  trtran011;
        Goto Process_End;
    end if; 
 -- added by manjunath reddy on 02/04/2019 to take care for returing the transaction data in other than add load 
 if numinfoType=Gconst.REFGETLOADDATA then
 -- insert into rtemp(TT,TT2) values ('Get Loan Data ',numinfoType); commit;
   vartemp4:= PKGMASTERMAINTENANCE.fncBuildQuery(ParamData);
   delete from temp; commit;
   insert into temp values ('1',ParamData);
   insert into temp values ('Get  Data',vartemp4); commit;
   
   open gencursor for vartemp4;
        Goto Process_End;
 end if; 
 
  -- added by Rishi on 10/04/2019 to take care of grid from 
 if numinfoType=Gconst.CURSORGRIDTEST then
 -- insert into rtemp(TT,TT2) values ('CURSORGRIDTEST ','Welcome'); commit;
  -- vartemp4:= PKGMASTERMAINTENANCE.fncBuildQuery(ParamData);
  -- delete from rtemp; commit;
  -- insert into rtemp(TT,TT2) values ('1',ParamData);
  -- insert into rtemp(TT,TT2) values ('Get  Data',varTemp); commit;
   
   open gencursor for 
   select  PICK_LONG_DESCRIPTION,PICK_KEY_VALUE from trmaster001 where PICK_KEY_GROUP = 323;
        Goto Process_End;
 end if; 
 
 IF NUMINFOTYPE=GCONST.REFGETDIRECTINDIRECT THEN
  begin
    numcode:= GCONST.FNCXMLEXTRACT(XMLDOC,'BaseCurrency',numcode);
  exception
  when others then
    numcode := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/BaseCurrency',numcode);
  end ;  
  begin 
    numcode1:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',numcode1);
    exception
  when others then
    numcode1 := GCONST.FNCXMLEXTRACT(XMLDOC,'KeyValues/OtherCurrency',numcode1);
  end ; 
  
    begin  
      SELECT 
        NVL(CNDI_DIRECT_INDIRECT,12400001) INTO numcode2 
      FROM TRMASTER304A
      WHERE CNDI_RECORD_STATUS NOT IN(10200005,10200006)
      AND CNDI_BASE_CURRENCY        = numcode
      AND CNDI_OTHER_CURRENCY       = numcode1;
    exception
      when others then
       numcode2 := 12400001;
     end ;  
   open gencursor for 
    SELECT to_char(numcode2) "DirectIndirect" FROM DUAL;
  GOTO PROCESS_END;
 END IF; 
 

   IF NUMINFOTYPE=GCONST.refUserDataFormat THEN
 
     open gencursor for 
      SELECT FORMAT_PICK_CODE PickCode,
             FORMAT_DATA_TYPE DataType,
             FORMAT_FORMAT_STRING FormatString,
             nvl(FORMAT_DECIMAL_SCALE,0) DecimalScale
      FROM TRGLOBALMAS914 inner join trsystem022
       on FORMAT_PICK_CODE=nvl(USER_FORMAT_CODE,91499999)
       where User_user_id=varUserId
       and User_record_status not in (10200005,10200006)
       and FORMAT_record_status not in (10200005,10200006);

  GOTO PROCESS_END;
 END IF; 
 if numinfoType = Gconst.refEntityTABList then
      open gencursor for 
      SELECT TABS_TAB_CODE TabCode,
            pkgreturncursor.fncgetdescription(TABS_TAB_CODE,1) TabName,
            TABS_ORDER_SEQUENCE OrderSequence,
            TABS_VALIDATION_ON_ADD ValidationOnAdd,
            TABS_VALIDATION_ON_EDIT ValidationOnEdit,
            TABS_VALIDATION_ON_CONFIRM ValidationOnConfirm
      FROM TRSYSTEM999E 
       where TABS_PROGRAM_UNIT=varEntity
       and TABS_RECORD_STATUS not in (10200005,10200006);

  GOTO PROCESS_END;
 end if;
 
 if numinfotype = Gconst.REFPROGRAMUNITVALIDATION then
    open gencursor for 
        select VALD_PROGRAM_UNIT ProgramUnit ,VALD_VALIDATION_NAME ValidationName,
            VALD_VALIDATION_DISPLAYMESSAGE  DisplayMessage,VALD_ADD_ACTION ADD_APPLICABLE ,
            VALD_EDIT_ACTION EDIT_APPLICABLE, VALD_CONFIRM_ACTION CONFIRM_APPLICABLE
        from TRSYSTEM999F
        where VALD_PROGRAM_UNIT= 'HEDGEDEALREGISTER'
        and VALD_USER_GROUP in 
            (select USER_GROUP_CODE from TRSYSTEM022
               where User_record_status not in (10200005,10200006)
               and USER_USER_ID='admin')
        and VALD_RECORD_STATUS not in (10200005,10200006)
        union all 
        select VALD_PROGRAM_UNIT ProgramUnit ,VALD_VALIDATION_NAME ValidationName,
            VALD_VALIDATION_DISPLAYMESSAGE  DisplayMessage,VALD_ADD_ACTION ADD_APPLICABLE ,
            VALD_EDIT_ACTION EDIT_APPLICABLE, VALD_CONFIRM_ACTION CONFIRM_APPLICABLE
        from TRSYSTEM999F
        where VALD_PROGRAM_UNIT= 'HEDGEDEALREGISTER'
        and VALD_USER_GROUP=14299999
        and VALD_RECORD_STATUS not in (10200005,10200006);

  GOTO PROCESS_END;
 end if;
 
  --Added by Rishi for user alert messages on 31-Aug-2019
  if numinfotype = Gconst.REFUSERALERTS then
    open gencursor for 
     SELECT ALRT_TITLE as "AlertTitle",
            ALRT_MESSAGE AS "Message",
            ALRT_NOOF_TRANSACTION AS "NoofTransaction",
            ALRT_REFERENCE_NUMBER "ReferenceNumber",
            Pkgreturncursor.Fncgetdescription(Alrt_Alert_TYPE,1) "AlertTypeDescription",
            Alrt_Alert_TYPE "AlertType",
            ALRT_RISK_LEVEL "RiskLevel",
            Pkgreturncursor.Fncgetdescription(ALRT_RISK_LEVEL,1) "AlertLevelDescription"
        from tralert001 
        where alrt_record_status not in (10200005,10200006)
          and instr(alrt_user_IDs,varUserId)>0;

  GOTO PROCESS_END;
 end if;
 
 if numinfoType = Gconst.REFUSERALERTS_Details then
      NumCode:=gconst.fncxmlextract(xmldoc,'Param/AlertType',NumCode);
      VarTemp:=gconst.fncxmlextract(xmldoc,'Param/ReferenceNumber',VarTemp);
      
      open gencursor for 
     SELECT MAIL_BANK_NAME as "Bank", MAIL_CURRENCY_NAME as "Currency",
            MAIL_TRANSACTION_TYPE "TransType",MAIL_EXECUTE_DATE "ExecuteDate",
            MAIL_SUPPLIER_NAME "SupplierName", MAIL_BUY_SELL "BuySell",
            MAIL_OPTION_TYPE "OptionType",
            MAIL_AMOUNT_FCY "Amount",
            MAIL_EXCHANGE_RATE "ExchangeRate",
            MAIL_INTEREST_AMOUNT "InterestAmount", MAIL_REPAYMENT_AMOUNT "RepaymentAmount",
            MAIL_DUE_DATE "MaturityDate", MAIL_REFERENCE_NUMBER "ReferenceNumber",
            MAIL_BACKUP_DEAL "Prortfolio", MAIL_INIT_CODE "SubPortfolio",       
            MAIL_EXCHANGE_CODE "Exchange",MAIL_ALERT_REFERENCE AlertReference
        from Trsystem960
        where  mail_alert_reference=VarTemp;
        

  GOTO PROCESS_END;
 end if;
 -- For Forward Rollover 
 
  if numinfotype=gconst.REFROLLOVERDELETE then

          BEGIN           

           varTemp := gconst.fncxmlextract(xmldoc,'DealNumber',varTemp);

         EXCEPTION

           WHEN OTHERS THEN

             VARTEMP:=NULL ;

         END;

           BEGIN           

           varTemp1 := gconst.fncxmlextract(xmldoc,'ReferenceNummber',varTemp1);

         EXCEPTION

           WHEN OTHERS THEN

             VARTEMP1:=NULL ;

         END;

     update trtran001ra set DEAR_RECORD_STATUS =10200006  where  DEAR_REFERENCE_NUMBER =varTemp;

     update trtran001rb set DEAB_RECORD_STATUS =10200006  where  DEAB_REFERENCE_NUMBER =varTemp;

     update trtran006 set cdel_RECORD_STATUS =10200006  where  CDEL_ROLLOVER_REFERENCE =varTemp;

 

update trtran001 set deal_process_complete =12400002 , deal_complete_date=null where deal_deal_number=(select cdel_deal_number from

trtran006 where CDEL_ROLLOVER_REFERENCE=varTemp);

OPEN GENCURSOR FOR

  SELECT 1 FROM DUAL;

    Goto Process_End;

  end if;
  
 if numinfotype=gconst.REFROLLOVERFORWARD then
  
  
      numaction:=gconst.fncxmlextract(xmldoc,'ActionMode',vartemp);
      numcode:= gconst.fncxmlextract(xmldoc,'CompanyCode',numcode);
      NUMCODE1:= GCONST.FNCXMLEXTRACT(XMLDOC,'LocationCode',NUMCODE1);
      numcode2:= gconst.fncxmlextract(xmldoc,'BackupDeal',numcode2);
      numcode3:= gconst.fncxmlextract(xmldoc,'InitCode',numcode3);
      numcode4:= gconst.fncxmlextract(xmldoc,'BaseCurrency',numcode4);
      NUMCODE5:= GCONST.FNCXMLEXTRACT(XMLDOC,'OtherCurrency',NUMCODE5);
      Dattemp:= gconst.fncxmlextract(xmldoc,'MaturityFrom',Dattemp);
      NUMCODE6:=GCONST.FNCXMLEXTRACT(XMLDOC,'CounterParty',NUMCODE6);   
      numcode8:=gconst.fncxmlextract(xmldoc,'BuySell',numcode8);
      
      BEGIN            
           varTemp := gconst.fncxmlextract(xmldoc,'DealNumber',varTemp);
         EXCEPTION
           WHEN OTHERS THEN
             VARTEMP:=NULL ;
         END;
  IF NUMACTION IN (101) THEN  
  open gencursor for
      select      rownum "Rownum", deal_deal_number "DealNumber",  
                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
                  DEAL_EXECUTE_DATE "ExecuteDate",
                  deal_base_amount "BaseAmount",               
                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "AdjustingAmount",
                    (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
                  round(nvl(deal_spot_rate,0),4) "SpotRate",
                  round(nvl(deal_forward_rate,0),4) "FrwRate",
                  round (nvl(deal_margin_rate,0),4) "MarginRate",
                  pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
                  Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
		              fncgetdescription(deal_counter_party,2) "CounterParty",
                  fncgetdescription(deal_buy_sell,1) "BuySell",                  
		              Deal_maturity_from "ExpiryDate", 
                  deal_maturity_date "DeliveryDate", 
                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal", 
                  Deal_Hedge_Trade "HedgeTradeCode",                  
                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp", 
                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode, 
                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
                 Deal_Bank_Reference "BankReference", 
                fncgetdescription(Deal_Hedge_Trade,2) "HedgeTrade",
                deal_dealer_name "DealerName",
                DEAL_COUNTER_DEALER "CounterDealer",
                deal_dealer_remarks "DealerRemarks",
                deal_company_code "CompanyCode",
                deal_location_code "LocationCode",
                Deal_Backup_Deal "BackupDealCode",
                Deal_Init_Code "InitCode",
                0 "ProfitLoss",
                0 "ConvertedPandL",
                0 "EarlyDeliveryCharges",
                deal_maturity_date "CashFlowDate",
                0 "NetPresentValue",
                0 "IRRRate"
         from trtran001
          where deal_hedge_trade in(gconst.HEDGEDEAL,GCONST.FTDEAL)
          and deal_process_complete = GConst.OPTIONNO 
           and deal_Company_Code in( select usco_company_code from trsystem022a
                                        WHERE USCO_USER_ID =VARUSERID)
           and deal_company_code=decode(numcode,30199999,deal_company_code,numcode)
           and deal_location_code=decode(numcode1,30299999,deal_location_code,numcode1)
           and deal_backup_deal=decode(numcode2,33399999,deal_backup_deal,numcode2)
           and deal_init_code=decode(numcode3,33899999,deal_init_code,numcode3)
           and deal_base_currency=decode(numcode4,30499999,deal_base_currency,numcode4)
           and deal_other_currency=decode(numcode5,30499999,deal_other_currency,numcode5)
           and deal_counter_party=decode(numcode6,30699999,deal_counter_party,numcode6)
           and deal_buy_sell=decode(numcode8,25399999,deal_buy_sell,numcode8)
           and deal_maturity_date=Dattemp
--          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
          AND DEAL_RECORD_STATUS NOT IN (GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL);
 else
  open gencursor for      
       select     rownum "Rownum", deal_deal_number "DealNumber",  
                  fncgetdescription(deal_base_currency,2) "BaseCurrency", 
                  fncgetdescription(deal_other_currency,2) "OtherCurrency",
                  DEAL_EXECUTE_DATE "ExecuteDate",
                  deal_base_amount "BaseAmount",               
                  pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "OutStandingAmount",
                    pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate) "AdjustingAmount",
                    (deal_base_amount-nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
                  GConst.AMOUNTFCY, datworkdate)),0)) "AdjustedAmount",
                  round(nvl(deal_spot_rate,0),4) "SpotRate",
                  round(nvl(deal_forward_rate,0),4) "FrwRate",
                  round (nvl(deal_margin_rate,0),4) "MarginRate",
                  pkgreturncursor.fncRollover(deal_deal_number,2) "ExchangeRate",
                  Pkgreturncursor.Fncgetdescription(Deal_Backup_Deal,2) "BusinessUnit",
                  Pkgreturncursor.Fncgetdescription(Deal_Init_Code,2) "ProfitCentre",
		              fncgetdescription(deal_counter_party,2) "CounterParty",
                  fncgetdescription(deal_buy_sell,1) "BuySell",                  
		              Deal_maturity_from "ExpiryDate", 
                  deal_maturity_date "DeliveryDate", 
                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "OtherAmount",nvl(deal_local_rate,0) "LocalRate", 
                  pkgreturnreport.FNCCONVRS(nvl((pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
                  GConst.AMOUNTINR, datworkdate)),0)) "AmountLocal", 
                  Deal_Hedge_Trade "HedgeTrade",                  
                  fncgetdescription(deal_swap_outright,1) "SwapOutright",fncgetdescription(deal_deal_type,1) "DealType",
                  deal_time_stamp "DealTimeStamp", 
                  deal_other_currency "OtherCurrencyCode",deal_dealer_remarks "Remarks",
                  deal_record_status "RecordStatus",deal_counter_party Counterpartycode, 
                  deal_base_currency "BaseCurrencyCode",Deal_buy_sell as "BuySellCode",
                 Deal_Bank_Reference "BankReference", 
                FNCGETDESCRIPTION(DEAL_HEDGE_TRADE,2) "Hedge Trade",
                deal_dealer_name "DealerName",
                DEAL_COUNTER_DEALER "CounterDealer",
                deal_dealer_remarks "DealerRemarks",
                   deal_company_code "CompanyCode",
                deal_location_code "LocationCode",
                Deal_Backup_Deal "BackupDealCode",
                Deal_Init_Code "InitCode",
                0 "ProfitLoss",
                0 "ConvertedPandL",
                CDEL_EDC_CHARGE "EarlyDeliveryCharges",
                CDEL_CASHFLOW_DATE "CashFlowDate",
                CDEL_NPV_VALUE "NetPresentValue",
                CDEL_IRR_RATE "IRRRate"
         FROM TRTRAN001  
          LEFT OUTER JOIN trtran006 
         ON cdel_deal_number=DEAL_DEAL_NUMBER
         and CDEL_ROLLOVER_REFERENCE=vartemp
          WHERE DEAL_HEDGE_TRADE IN(GCONST.HEDGEDEAL,GCONST.FTDEAL)
         -- and deal_process_complete = GConst.OPTIONNO 
           and deal_Company_Code in( select usco_company_code from trsystem022a
                                        WHERE USCO_USER_ID =VARUSERID)
--          and deal_deal_number not in(select cdel_deal_number from trtran006 where cdel_deal_type=numcode)
          AND DEAL_RECORD_STATUS NOT IN (GCONST.STATUSINACTIVE,GCONST.STATUSDELETED,GCONST.STATUSPOSTCANCEL)
           AND DEAL_DEAL_NUMBER IN (SELECT cdel_deal_number FROM trtran006 WHERE 
           CDEL_ROLLOVER_REFERENCE=vartemp AND cdel_record_status NOT IN (10200005,10200006))
          ;
          
  End if;
      Goto Process_End;
  End If;
    
   if numinfotype = gconst.REFMONTHLYSETTLEMENT then
   varOperation := 'Monthly Settlement Dashboard';     
       select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;  
      if (to_char(to_date(datworkdate),'MM') < 4) then
              tempDate:= '01-apr-' || to_char(to_number(to_char(to_date(datworkdate),'YYYY'))-1);
              dattemp1:= '31-MAR-' ||to_char(to_date(datworkdate),'YYYY');
              tempvar:= 'FY'|| to_char(to_number(to_char(to_date(datworkdate),'YY'))-1) || '-' || to_char(to_date(datworkdate),'YY');
         else
          tempDate:= '01-apr-' || to_char(to_date(datworkdate),'YYYY');
        dattemp1:= '31-MAR-' || to_char(to_number(to_char(to_date(datworkdate),'YYYY'))+1);
         tempvar:= 'FY'|| to_char(to_date(datworkdate),'YY') || '-' || to_char(to_number(to_char(to_date(datworkdate),'YY'))+1);
       end if;
 -- numRecords:=2;
  --numError :=  pkgforexprocess.FNCPOSITIONGENERATE(varUserID,to_date(datworkdate));commit;
  -- pkgreportprograms.prcFxForcastReportPopulate(to_date(datworkdate));   
   open gencursor for
             select  MaturityMonth,datDateAsOn,BaseAmount,
             BASEAMOUNTINR,Nvl(GAINLOSS,0) GAINLOSS, WTDAVGRATE,
             WTDAVGBASEAMOUNT,WTDAVGRATE1,
             (WTDAVGRATE1-WTDAVGRATE)*BaseAmount CashratePandL,
             Cashamountfcy,Cashamountinr,Frwdamountfcy,Frwdamountinr,Round(Spotrate,2) As Spotrate,
             Srno
      from (  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
              avg(SpotRate)SpotRate,SrNo
      from (select  to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
              to_date(datworkdate) datDateAsOn,
--              (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--               Else Round(Sum(Cdel_Cancel_Amount)/1000000,2) End) Baseamount,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              --sum(cdel_cancel_amount*cdel_cancel_RATE) - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              -
--              sum(CASE WHEN cdel_cancel_type = 27000002
--                  THEN CDEL_PROFIT_LOSS end)
              Pandl.pandl  GAINLOSS,
                round  ((sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),1,tempDate,to_date(datworkdate)) SpotRate,
                          2 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (select to_char(cdel_cancel_DATE,'YYYYMM') MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                              sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                        --  and  deal_backup_deal=33300001
                          and cdel_cancel_date  between tempDate and to_date(datworkdate)
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_cancel_type=27000001
                          and cdel_record_status not in (10200005,10200006)
                          group by to_char(cdel_cancel_DATE,'YYYYMM') ) PandL
                    On Pandl.Maturitymonth = To_Char(Cdel_Cancel_Date,'YYYYMM')
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        --and trad_product_category =33300001
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  between tempDate and to_date(datworkdate)
                        And Deal_Base_Currency=30400004
                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
                   group by to_char(cdel_cancel_DATE,'YYYYMM'),cdel_COMPANY_CODE,deal_base_CURRENCY,to_char(cdel_cancel_DATE,'YYYYMM'),
                              to_char(cdel_cancel_DATE,'MON-yy'),pandl.pandl
                              union all 
            SELECT  to_char(trad_maturity_date,'MON-yy') MaturityMonth,
                         to_char(trad_maturity_date,'YYYYMM') MonthOrder,
                     to_date(datworkdate) datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            2 SrNo
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                          and brel_entry_date between  tempDate and to_date(datworkdate)
                          AND brel_trade_reference    = loln_trade_reference
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          --and trad_product_category =33300001
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   to_char(trad_maturity_date,'MON-yy'),
                                      to_char(trad_maturity_date,'YYYYMM'),trad_company_code,trad_trade_currency) 
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo)
                              UNION ALL
             ( select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
              sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
              avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
              sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
              sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
              avg(SpotRate)SpotRate,SrNo FROM (           
                     select  --to_char(cdel_cancel_DATE,'MON-yy')
                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1)  MaturityMonth,
                   --to_char(cdel_cancel_DATE,'YYYYMM')
                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MonthOrder,
                      to_date(datworkdate) datDateAsOn,
--                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR,
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              --sum(cdel_cancel_amount*cdel_cancel_RATE)  - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              -
--              sum(CASE WHEN cdel_cancel_type = 27000002
--                  THEN CDEL_PROFIT_LOSS end)BASEAMOUNTINR, 
                      Pandl.pandl  GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (Nvl(Pandl.Pandl,0)/1000000))/Sum(Cdel_Cancel_Amount/1000000),2) Wtdavgrate,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate) SpotRate,
                          1 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (select fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                      sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                          --and  deal_backup_deal=33300001
                          and cdel_cancel_date  < tempDate
                          and cdel_cancel_date > '31-MAR-2017'
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_record_status not in (10200005,10200006)                          
                          and cdel_cancel_type=27000001
                          group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,'YYYYMM')
                          ) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                        --and trad_product_category =33300001
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date  < tempDate
                        and cdel_cancel_date > '31-MAR-2017'
                        and deal_base_currency=30400004
                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
                   group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
                   cdel_COMPANY_CODE,deal_base_CURRENCY,
                   --to_char(cdel_cancel_DATE,'YYYYMM'),
                   fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),3,tempDate,tempDate),
                    --          to_char(cdel_cancel_DATE,'MON-yy')
                              pandl.pandl
                                       union all 
            SELECT   fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1) MaturityMonth,
                          fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2) MonthOrder,
                     to_date(datworkdate) datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            1 SrNo
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference
                         -- and brel_entry_date between  tempDate and to_date(datworkdate)
                          AND brel_trade_reference    = loln_trade_reference
                           and trad_maturity_date  < tempDate
                        and trad_maturity_date > '31-MAR-2017'
                        and trad_trade_currency=30400004
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                         -- and trad_product_category =33300001
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1),
                                      fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2),trad_company_code,trad_trade_currency)
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo  )                            
              UNION ALL
                  (select MaturityMonth, MonthOrder,datDateAsOn,sum(Baseamount)Baseamount,
                  sum(BASEAMOUNTINR)BASEAMOUNTINR,sum(GAINLOSS)GAINLOSS,avg(WTDAVGRATE)WTDAVGRATE,
                  avg(WTDAVGBASEAMOUNT)WTDAVGBASEAMOUNT,avg(WTDAVGRATE1)WTDAVGRATE1,
                  sum(CashAmountFcy)CashAmountFcy,sum(CashAmountINR)CashAmountINR,
                  sum(FrwdAmountFcy)FrwdAmountFcy,sum(FrwdAmountINR)FrwdAmountINR,
                  avg(SpotRate)SpotRate,SrNo FROM (                
                      select  --to_char(cdel_cancel_DATE,'MON-yy')
                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1)  MaturityMonth,
                   --to_char(cdel_cancel_DATE,'YYYYMM')
                      fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MonthOrder,
                     to_date(datworkdate) datDateAsOn,
--                      (case when round(sum(cdel_cancel_amount)/1000000,2)=0.00 then null 
--                        else round(sum(cdel_cancel_amount)/1000000,2) end) BaseAmount,
--                      round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              (Case When sum(Cdel_Cancel_Amount) =0.00 Then Null 
               Else sum(Cdel_Cancel_Amount) End) Baseamount,               
              --round(sum(cdel_cancel_amount*cdel_cancel_RATE)/1000000,2)BASEAMOUNTINR, 
              --sum(cdel_cancel_amount*cdel_cancel_RATE)  - nvl(Pandl.Pandl,0) BASEAMOUNTINR, 
              sum(cdel_cancel_amount*cdel_cancel_RATE) BASEAMOUNTINR, 
--              -
--              sum(CASE WHEN cdel_cancel_type = 27000002
--                  THEN CDEL_PROFIT_LOSS end)BASEAMOUNTINR,
                      Pandl.pandl GAINLOSS,
                      round  (  (sum(cdel_cancel_amount * cdel_cancel_RATE/1000000) - 
                           (nvl(pandl.pandl,0)/1000000))/sum(cdel_cancel_amount/1000000),2) WTDAVGRATE,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))/1000000,2) AS WTDAVGBASEAMOUNT,
                  round(sum(cdel_cancel_amount* Pkgforexprocess.Fncgetrate
                  (DEAL_BASE_CURRENCY,30400003,cdel_cancel_date,deal_buy_sell,0,null))
                  / sum(cdel_cancel_amount),2) AS     WTDAVGRATE1,
                  sum(case when Deal_Deal_Type = 25400001 then
                      cdel_cancel_amount/1000000
                  end) as CashAmountFcy,
                  sum(case when Deal_Deal_Type = 25400001 then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end) as CashAmountINR,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      cdel_cancel_amount/1000000
                  end) as FrwdAmountFcy,
                  sum(case when Deal_Deal_Type not in(25400001) then
                      (cdel_cancel_amount*cdel_cancel_RATE)/1000000
                  end )as FrwdAmountINR,
                  fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,to_date(datworkdate)) SpotRate,
                          3 SrNo
               from    trtran002 inner join trtran006 a1
                       on trad_trade_reference=cdel_trade_reference
                       inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                       left outer join 
                      (select fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2) MaturityMonth,sum(CDEL_PROFIT_LOSS)  Pandl,
                      sum(cdel_cancel_amount) as FwdAmount
                        from trtran006 a2, trtran001 b2
                       where cdel_deal_number= deal_deal_number
                         -- And  Deal_Backup_Deal=33300001
                          and cdel_cancel_date between tempDate and to_date(datworkdate)
                          --and cdel_cancel_date > '31-MAR-2014'
                          and deal_base_currency=30400004
                          and deal_other_currency =30400003
                          and cdel_cancel_type=27000001
                          and cdel_record_status not in (10200005,10200006)
                          group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)--to_char(cdel_cancel_DATE,'YYYYMM')
                          ) PandL
                    on PandL.MaturityMonth = fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2)
                       where cdel_RECORD_STATUS not in(10200005,10200006) 
                        and deal_RECORD_STATUS not in(10200005,10200006 ) 
                       -- and trad_product_category =33300001
                        and trad_record_status in (10200005,10200001,10200003,10200004)
                        --and trad_product_category=33300001 
                        and cdel_trade_reference is not null 
                       -- and cdel_cancel_type =27000001
                        and cdel_cancel_date between tempDate and to_date(datworkdate)
                        --and cdel_cancel_date > '31-MAR-2014'
                        and deal_base_currency=30400004
                     --   AND CDEL_CANCEL_DATE <='30-APR-17'
                     
                   group by fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,1),--to_char(cdel_cancel_DATE,'YYYYMM'),
                   cdel_COMPANY_CODE,deal_base_CURRENCY
                   --to_char(cdel_cancel_DATE,'YYYYMM'),
                   ,fncGetFinancialYear(to_date(datworkdate),cdel_cancel_DATE,2),
                   fncGetSpotRate(to_char(cdel_cancel_DATE,'YYYYMM'),2,tempDate,to_date(datworkdate)),
                    --          to_char(cdel_cancel_DATE,'MON-yy')
                              pandl.pandl
                                                  union all 
            SELECT  fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1) MaturityMonth,
                         fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2) MonthOrder,
                     to_date(datworkdate) datDateAsOn,
                          round(sum(LOLN_ADJUSTED_FCY),2)      AS Baseamount,                         
                          round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE),2)  AS BaseAmountinr ,
                          0 GAINLOSS,
                           round(sum(LOLN_ADJUSTED_FCY * BCRD_SPOT_RATE/1000000)/Sum(LOLN_ADJUSTED_FCY/1000000),2) Wtdavgrate,
                           0 WTDAVGBASEAMOUNT,0 WTDAVGRATE1, 0 CashAmountFcy,0 CashAmountINR,
                           0 FrwdAmountFcy,0 FrwdAmountINR, 0 SpotRate,
                            3 SrNo
                          FROM trtran002,trtran003,
                               trtran010,TRTRAN045
                          where  trad_trade_reference  = brel_trade_reference                         
                          AND brel_trade_reference    = loln_trade_reference
                            and trad_maturity_date between tempDate and to_date(datworkdate)              
                          and trad_trade_currency=30400004
                          AND trad_record_status NOT IN(10200006)
                          AND trad_import_export NOT IN(25900025)
                          AND brel_record_status NOT IN(10200006)
                          AND LOLN_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          AND LOLN_LOAN_NUMBER = BCRD_BUYERS_CREDIT
                          --and trad_product_category =33300001
                          AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
                          group by   fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,1),
                                      fncGetFinancialYear(to_date(datworkdate),trad_maturity_date,2),trad_company_code,trad_trade_currency)
                                      group by MaturityMonth,MonthOrder,datDateAsOn,SrNo)           
                              )
                    Order by  MonthOrder,MaturityMonth,SrNo; 
   Goto Process_End;
  end if;
  
-----------------------------------------------------------------------------

 if numinfoType = Gconst.RefGetSynonymsList then
      
      open gencursor for 
      select Distinct(FLDP_TABLE_SYNONYM) "SYNONYMS", MENU_DESCRIPTION "MENUDESCRIPTION"
          FROM TRSYSTEM999, TRSYSTEM002
          WHERE FLDP_TABLE_SYNONYM = MENU_PROGRAM_UNIT
          and FLDP_TABLE_SYNONYM in (select actl_program_unit 
                                      from trsystem006
                                      where actl_record_status not in (10200005,10200006)
                                      and (case when actl_user_id = '.' then varUserid else actl_user_id end) = varUserid
                                      and actl_group_code =(select user_group_code from trsystem022
                                                              where user_user_id = varUserid
                                                              and USER_RECORD_STATUS not in  (10200005,10200006)))
          order by MENUDESCRIPTION;            

  GOTO PROCESS_END;
 end if;
 
 -----------------------------------------------------------------------------------
 
  if numinfoType = Gconst.RefGetSynonymScreenData then
      varOperation := 'Extracting 999 Table Details';
      varTemp := gconst.fncXMLExtract(xmldoc,'Param/SynonymName', varTemp); 
      open gencursor for 
        select to_char(rownum) "Rownum", FLDP_TABLE_SYNONYM "Synonym",FLDP_COLUMN_NAME "ColumnName", 
        FLDP_XML_FIELD "XMLField", FLDP_DATA_TYPE "DataType", 
        to_char(NVL(FLDP_DISPLAY_YN,12400002)) "DisplayYN", to_char(NVL(FLDP_SHOW_YN,12400002)) "ShowYN",
        to_char(NVL(FLDP_TEXT_CASE,92200002)) "TextCase", to_char(FLDP_TEXT_FORMAT_Code) "TextFormat", 
        FLDP_TOOLTIP_TEXT "TooltipText", FLDP_DEFAULT_VALUE "DefaultValue", 
        to_char(NVL(FLDP_DESCRIPTION_TYPE,92100002)) "DescriptionType", FLDP_LABEL_TEXT "LabelText", 
        to_char(NVL(FLDP_ENABLE_DISABLE,12400002)) "Editable", to_char(NVL(FLDP_ENABLE_DISABLE_EDIT,12400002)) "EditableInEditMode",
        to_char(NVL(FLDP_MANDATORY_FIELD,12400002)) "Required", FLDP_FIELD_SORT "SortingOrder",
        to_char(NVL(FLDP_HOLIDAY_CHECK,12400002)) "HolidayCheck", FLDP_PICK_GROUP "PickGroup"
        from TRSYSTEM999 left outer join TRGLOBALMAS914
          on FORMAT_DATA_TYPE =FLDP_TEXT_FORMAT_CODE
          and FORMAT_record_status not in (10200005,10200006)
          where FLDP_TABLE_SYNONYM = varTemp
          and FLDP_SHOW_YN = '12400001'
          order by FLDP_FIELD_SORT;  

  GOTO PROCESS_END;
 end if;

-----------------------------------------------------------------------------
-- FOR DMS 
if numinfoType = Gconst.REFDMSSYNONYMS then      
      open gencursor for 
      select distinct MENU_DESCRIPTION "MENUDESCRIPTION", MENU_PROGRAM_UNIT "SYNONYM"
      from tftran101 inner join trsystem002
        on imag_entity_name = menu_program_unit
        where imag_record_status not in (10200005,10200006)
        and menu_record_status not in (10200005,10200006)
        and menu_program_unit in (select actl_program_unit from trsystem006 where
                            (case when  actl_user_id='.' then 'Demo' else  actl_user_id  end)='Demo'
                          and actl_group_code = (select user_group_code from trsystem022
                          where user_user_id='Demo' and User_record_Status not in (10200005,10200006)));          

  GOTO PROCESS_END;
 end if;
 
 ----------------------------------------------------------------------------
if numinfoType = Gconst.REFDMSDETAILS then  


    
      varOperation := 'Extracting DMS Details';
      --varTemp := gconst.fncXMLExtract(xmldoc,'Param/EventEntityName', varTemp);
      begin
        varTemp1 := gconst.fncXMLExtract(xmldoc,'Param/DocumentReference', varTemp1);
      exception
        when others then
        vartemp1:= null;
      end;
      begin
          varTemp2 := gconst.fncXMLExtract(xmldoc,'Param/DocumentName', varTemp2);
      exception
        when others then
          varTemp2:=null;
      end;
      
       begin
        varcom := gconst.fncXMLExtract(xmldoc,'Param/CompanyCode', varcom);
      exception
        when others then
        varcom:= null;
      end;
      begin
          varloc := gconst.fncXMLExtract(xmldoc,'Param/LocationCode', varloc);
      exception
        when others then
          varloc:=null;
      end;
       begin
        varbank := gconst.fncXMLExtract(xmldoc,'Param/BankCode', varbank);
      exception
        when others then
        varbank:= null;
      end;
      begin
          vardoctype := gconst.fncXMLExtract(xmldoc,'Param/DocumentType', vardoctype);
      exception
        when others then
          vardoctype:=null;
      end;
       begin
          vardocentity := gconst.fncXMLExtract(xmldoc,'Param/EventEntityName', vardocentity);
      exception
        when others then
          vardocentity:=null;
      end;
      --numcode:= gconst.fncxmlextract(xmldoc,'Param/CompanyCode',numcode);
      --numcode1:= GCONST.fncxmlextract(xmldoc,'Param/LocationCode',numcode1);
      --numcode2:= gconst.fncxmlextract(xmldoc,'Param/BankCode',numcode2);
      --numcode3:= gconst.fncxmlextract(xmldoc,'Param/DocumentType',numcode3);
      
      open gencursor for      
     
select 
         IMAG_COMPANY_CODE "CompanyCode",
         IMAG_LOCATION_CODE "LocationCode",
         IMAG_BANK_CODE "BankCode",
         IMAG_DOCUMENT_TYPE "DocumentType",
         IMAG_ENTITY_NAME "EventEntityName",
         IMAG_DOCUMENT_REFERENCE "DocumentReference",
         IMAG_DOCUMENT_NAME "DocumentName",        
         IMAG_REFERENCE_NUMBER "ReferenceNumber",
         IMAG_DOCUMENT_IMAGE "DocumentImage"
      from tftran101     
      
       where imag_record_status not in (10200005,10200006)
       and 
       (((varcom is not null) 
              and instr(gconst.fncxmlextract(xmldoc,'Param/CompanyCode',varcom), IMAG_COMPANY_CODE)>0)
              or (varcom is null))
     --  instr(gconst.fncxmlextract(xmldoc,'Param/CompanyCode',varTemp), IMAG_COMPANY_CODE)>0
     and
     (((varloc is not null) 
              and instr(GCONST.fncxmlextract(xmldoc,'Param/LocationCode',varloc), IMAG_LOCATION_CODE)>0)
              or (varloc is null))
     --  and instr(GCONST.fncxmlextract(xmldoc,'Param/LocationCode',varTemp), IMAG_LOCATION_CODE)>0
     and
     (((varbank is not null) 
              and instr(GCONST.fncxmlextract(xmldoc,'Param/BankCode',varbank), IMAG_BANK_CODE)>0)
              or (varbank is null))
      --  and instr(GCONST.fncxmlextract(xmldoc,'Param/BankCode',varTemp), IMAG_BANK_CODE)>0
      and
      (((vardoctype is not null) 
              and instr(gconst.fncxmlextract(xmldoc,'Param/DocumentType',vardoctype), IMAG_DOCUMENT_TYPE)>0)
              or (vardoctype is null))
       -- and instr(gconst.fncxmlextract(xmldoc,'Param/DocumentType',varTemp), IMAG_DOCUMENT_TYPE)>0
      and  
        (((vardocentity is not null) 
              and instr(gconst.fncxmlextract(xmldoc,'Param/EventEntityName',vardocentity), IMAG_ENTITY_NAME)>0)
              or (vardocentity is null))
      -- and instr(gconst.fncxmlextract(xmldoc,'Param/EventEntityName',varTemp), IMAG_ENTITY_NAME)>0
        and (((varTemp1 is not null) 
              and (IMAG_DOCUMENT_REFERENCE like '%' || varTemp1 || '%'))
              or (varTemp1 is null))
        and (((varTemp2 is not null) 
              and (IMAG_DOCUMENT_NAME like '%' || varTemp2 || '%'))
              or (varTemp2 is null));
        --and imag_record_status not in (10200005,10200006);
GOTO PROCESS_END;
 end if;
------------------------------------------------------------------------------
   if numinfotype = gconst.REFFXSETTLEMENTNEW then  
   select 
            to_date('01-04-'||EXTRACT (YEAR FROM ADD_MONTHS (datworkdate, -3)),'dd-mm-yyyy'),
            to_date('31-03-'||EXTRACT (YEAR FROM ADD_MONTHS (datworkdate,  9)),'dd-mm-yyyy') into dattemp,dattemp1
      from dual; 
 select nvl(PRMC_Convert_AmountInto,1)
         into numdetail
       from trsystem051;      
open gencursor for  
select Settlement.MaturityMonth, Settlement.MonthOrder,dattemp1 datDateAsOn,
        pkgreturncursor.fncgetdescription(Settlement.BaseCurrency,2)BaseCurrency,
        pkgreturncursor.fncgetdescription(Settlement.OtherCurrency,2)OtherCurrency,
        pkgreturncursor.fncgetdescription(Settlement.BaseCurrency,2)||'/'||pkgreturncursor.fncgetdescription(Settlement.OtherCurrency,2) CurrencyPair,
        round(SettlementBasemount/numdetail,2)SettlementBasemount,round(FWDCancelamount/numdetail,2)FWDCancelamount,
        round(SettlementBasemountLocal/numdetail,2)SettlementBasemountLocal,round(EarlyDeliveryPnL/numdetail,2)EarlyDeliveryPnL,
        round(FRDCancelPnL/numdetail,2)FRDCancelPnL,
        round(RollOverFWDCancelPnL/numdetail,2)RollOverFWDCancelPnL,round(Fut.CancelPnL/numdetail,2)FutCancelPnL,
        
        round(Opt.CancelPnL/numdetail,2)OptCancelPnL,round(Fut.RolloverPnL/numdetail,2)FutRolloverPnL,
        round(Opt.RollOverPnL/numdetail,2)OptRollOverPnL,
        round((EarlyDeliveryPnL+FRDCancelPnL+
        RollOverFWDCancelPnL+Fut.CancelPnL+Opt.CancelPnL +
        Fut.RolloverPnL + Opt.RollOverPnL)/numdetail,2) TotalPnL,
        round((SettlementBasemountLocal/numdetail)/ 
        (case when (SettlementBasemount/numdetail)=0 then 1 else (SettlementBasemount/numdetail) end),6)SettlementRate,
        round(((SettlementBasemountLocal+EarlyDeliveryPnL+FRDCancelPnL+
        RollOverFWDCancelPnL+Fut.CancelPnL +Opt.CancelPnL +Fut.RolloverPnL +
        Opt.RollOverPnL)/numdetail)/(case when (SettlementBasemount/numdetail)=0 then 1 else (SettlementBasemount/numdetail) end),6)SettlementRate_withPnL,        
        round((CashSettlementLocal/numdetail)/(case when (SettlementBasemount/numdetail)=0 then 1 else (SettlementBasemount/numdetail) end),6) CashRateonSettlement,
        decode(Settlement.InflowOutflow,'Outflow','Outflow',Settlement.InflowOutflow,'Inflow','Inflow',       
        FUT.InflowOutflow,'Outflow','Outflow',FUT.InflowOutflow,'Inflow','Inflow',
        OPT.InflowOutflow,'Outflow','Outflow',OPT.InflowOutflow,'Inflow','Inflow')InflowOutflow
      from (select  to_char(cdel_cancel_DATE,'MON-yy') MaturityMonth,
                   to_char(cdel_cancel_DATE,'YYYYMM') MonthOrder,
                   DEAL_BASE_CURRENCY BaseCurrency,deal_other_currency OtherCurrency,
                   sum(Case When CDEL_Cancel_TYPE=27000002 then Cdel_Cancel_Amount else 0 end  ) SettlementBasemount,
                   sum(Case When CDEL_Cancel_TYPE=27000001 then Cdel_Cancel_Amount else 0 end  ) FWDCancelamount,
                   sum((Case When CDEL_Cancel_TYPE=27000002 then Cdel_Cancel_Amount else 0 end  )*cdel_cancel_RATE) SettlementBasemountLocal, 
--                   sum((Case When CDEL_DEAL_TYPEC=27000002 then Cdel_Cancel_Amount else 0 end  )*cdel_cancel_RATE/
--                       sum(Case When CDEL_DEAL_TYPEC=27000002 then Cdel_Cancel_Amount else 0 end  )) SettlWeightedRate, 
                   sum(Case When CDEL_Cancel_TYPE=27000001 then Cdel_Profit_loss else 0 end  ) EarlyDeliveryPnL,
                    sum(Case When CDEL_Cancel_TYPE=27000002 then Cdel_Profit_loss else 0 end  ) FRDCancelPnL,
                    0 RollOverFWDCancelPnL, 
--                  sum(((Case When CDEL_Cancel_TYPE=27000002 then Cdel_Cancel_Amount else 0 end  )* Pkgforexprocess.Fncgetrate
--                  (DEAL_BASE_CURRENCY,Deal_other_currency,cdel_cancel_date,deal_buy_sell,0,null,0,81500005))) 
                  0 AS CashSettlementLocal,
                  decode(deal_buy_sell,25300001,'Outflow','Inflow') InflowOutflow
                 from  trtran006  inner join trtran001 b1
                       on cdel_deal_number= deal_deal_number
                  where cdel_cancel_date BETWEEN dattemp AND dattemp1                 
                  --and deal_buy_sell=25300002
                   and cdel_record_status not in (10200005,10200006)
                   and deal_record_status not in (10200005,10200006)                   
                  group by  DEAL_BASE_CURRENCY,deal_other_currency,
                  to_char(cdel_cancel_DATE,'MON-yy'),
                   to_char(cdel_cancel_DATE,'YYYYMM'),deal_buy_sell)Settlement
              left outer join 
              (SELECT TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM') MonthOrder,
                        SUM(Cfrv_Profit_Loss) CancelPnL,
                        SUM(CFRV_CANCEL_AMOUNT) AS FwdAmount,
                        0 RollOverPnL,
                        cfut_base_currency BaseCurrency,
                        cfut_other_currency OtherCurrency,
                        decode(CFUT_BUY_SELL,25300001,'Outflow','Inflow')InflowOutflow
                      FROM Trtran063 a2,
                        Trtran061 b2
                      WHERE Cfrv_Deal_Number= cfut_deal_number
                      AND CFRV_EXECUTE_DATE BETWEEN dattemp AND dattemp1
                      --and CFUT_BUY_SELL=25300002
                      AND cfrv_record_status NOT IN (10200005,10200006)
                      and Cfut_Record_Status NOT IN (10200005,10200006)
                      GROUP BY TO_CHAR(CFRV_EXECUTE_DATE,'YYYYMM'),
                        cfut_base_currency,cfut_other_currency,CFUT_BUY_SELL)FUT
                   on FUT.BaseCurrency=Settlement.BaseCurrency
                  and FUT.OtherCurrency=Settlement.OtherCurrency
                  and FUT.MonthOrder=Settlement.MonthOrder
                  and FUT.InflowOutflow=Settlement.InflowOutflow
            Left outer join  
                  (SELECT TO_CHAR(corv_exercise_date,'YYYYMM') MonthOrder,
                              SUM(corv_pandl_usd) CancelPnL,
                              0 RollOverPnL,
                              SUM(0) AS FwdAmount,
                              copt_base_currency BaseCurrency,
                               COPT_other_currency OtherCurrency,
                               ( case
                               -- when cosu_buy_sell = 25300001 and cosu_option_type = 32400002 then 'Outflow'
                                when cosu_buy_sell = 25300001 and cosu_option_type = 32400001 then 'Outflow'
                                --when cosu_buy_sell = 25300002 and cosu_option_type = 32400002 then 'Outflow'
                                when cosu_buy_sell = 25300002 and cosu_option_type = 32400001 then 'Inflow'
                              End ) InflowOutflow
                      FROM Trtran073 a2,
                        Trtran071 b2,
                        trtran072 C2
                      WHERE copt_deal_number = corv_deal_number
                      and Copt_Deal_Number=Cosu_Deal_Number
                      AND corv_exercise_date BETWEEN dattemp AND dattemp1
                      AND copt_record_status NOT IN (10200005,10200006)
                      and corv_Record_Status NOT IN (10200005,10200006)
                      And Cosu_Record_Status Not In (10200005,10200006)
                      GROUP BY TO_CHAR(corv_exercise_date,'YYYYMM'),
                        copt_base_currency,COPT_other_currency,cosu_buy_sell,cosu_option_type) OPT
                   on OPT.BaseCurrency=Settlement.BaseCurrency
                  and OPT.OtherCurrency=Settlement.OtherCurrency
                  and OPT.MonthOrder=Settlement.MonthOrder
                  and OPT.InflowOutflow=Settlement.InflowOutflow
                  where Settlement.SettlementBasemount>0;
  Goto Process_End;
  End if;  
<< dummy_cursor >>


  
    varoperation := 'opening a dummy cursor';

    open gencursor for
      select '0' as "records"
       from dual;

<< process_end >>
    numerror := 0;
    varerror := ' : successful operation';
    numrecords := numinfotype;
    errordata := gconst.fncreturnerror('retcursor',   varmessage,   1,   numerror,   varoperation,   varerror);
   
exception
    when error_occurred then
        numrecordsets := 0;
        numerror := numinfotype;
        errordata := gconst.fncreturnerror('retcursor',   varmessage,   0,   numerror,   varoperation,   varerror);
        -- raise_application_error(-20101, errordata);
    when others then
        numrecordsets := 0;
        numerror := numinfotype;
        varerror := sqlerrm || ' - ' || varerror;
        errordata := gconst.fncreturnerror('retcursor',   varmessage,   0,   numerror,   varoperation,   varerror);
    end;
    

    
end;
-- pkgreturncursor
/