CREATE OR REPLACE PACKAGE BODY "TEST_VSTSRedgate"."PKGREPORTPROGRAMS" AS 

PROCEDURE            PRCCALCULATEGAPEXPOSURE
                     ( DATDATEASON IN DATE, 
                       GAPCALTYPE IN NUMBER,
                       PRODUCTCODE IN NUMBER,
                       SUBPRODUCTCODE IN NUMBER)
                       AS
  NUMERROR NUMBER(10);
  VAROPERATION        GCONST.GVAROPERATION%TYPE;
  VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
  VARERROR            GCONST.GVARERROR%TYPE;

BEGIN




 
 IF ((GAPCALTYPE= 1) OR (GAPCALTYPE= 3)) THEN 
     
     DELETE FROM TRSYSTEM970 
     WHERE HEDG_CALCULATION_TYPE='OUTSTANDING' 
       AND HEDG_DATE_ASON=DATDATEASON;
     
     INSERT INTO TRSYSTEM970  (HEDG_CALCULATION_TYPE,HEDG_DATE_ASON, HEDG_COMPANY_CODE,
                               HEDG_CURRENCY_CODE,HEDG_PRODUCT_CODE,
                               HEDG_SUBPRODUCT_CODE,HEDG_EXPOSURE_TYPE,
                            HEDG_MON_FORWARD1,HEDG_BENCHMARK_RATE1,HEDG_MTM_RATE1,
                            HEDG_MON_FORWARD2,HEDG_BENCHMARK_RATE2,HEDG_MTM_RATE2,
                            HEDG_MON_FORWARD3,HEDG_BENCHMARK_RATE3,HEDG_MTM_RATE3,
                            HEDG_MON_FORWARD4,HEDG_BENCHMARK_RATE4,HEDG_MTM_RATE4,
                            HEDG_MON_FORWARD5,HEDG_BENCHMARK_RATE5,HEDG_MTM_RATE5,
                            HEDG_MON_FORWARD6,HEDG_BENCHMARK_RATE6,HEDG_MTM_RATE6,
                            HEDG_MON_FORWARD7,HEDG_BENCHMARK_RATE7,HEDG_MTM_RATE7,
                            HEDG_MON_FORWARD8,HEDG_BENCHMARK_RATE8,HEDG_MTM_RATE8,
                            HEDG_MON_FORWARD9,HEDG_BENCHMARK_RATE9,HEDG_MTM_RATE9,
                            HEDG_MON_FORWARD10,HEDG_BENCHMARK_RATE10,HEDG_MTM_RATE10,
                            HEDG_MON_FORWARD11,HEDG_BENCHMARK_RATE11,HEDG_MTM_RATE11,
                            HEDG_MON_FORWARD12,HEDG_BENCHMARK_RATE12,HEDG_MTM_RATE12) 
                            
                            SELECT 'OUTSTANDING',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,
                                    SUBPRODUCT, EXPOSURETYPE,
                                    AMOUNTFCY0,AMOUNTLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTMTMLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTFCY1,AMOUNTLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTMTMLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTFCY2,AMOUNTLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTMTMLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTFCY3,AMOUNTLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTMTMLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTFCY4,AMOUNTLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTMTMLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTFCY5,AMOUNTLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTMTMLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTFCY6,AMOUNTLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTMTMLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTFCY7,AMOUNTLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTMTMLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTFCY8,AMOUNTLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTMTMLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTFCY9,AMOUNTLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTMTMLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTFCY10,AMOUNTLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTMTMLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTFCY11,AMOUNTLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11),
                                    AMOUNTMTMLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11)
                                    FROM
                                    (
                            SELECT 'OUTSTANDING',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,
                                    SUBPRODUCT, EXPOSURETYPE,
                            (SUM(DECODE( DUEDAYS,0,AMOUNTFCY,0))) AMOUNTFCY0,
                            ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTLOCAL,0)),6) AMOUNTLOCAL0,
                            ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL0,
                            (SUM(DECODE( DUEDAYS,1,AMOUNTFCY,0))) AMOUNTFCY1,
                            ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTLOCAL,0)),6)AMOUNTLOCAL1,
                            ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL1,
                            (SUM(DECODE( DUEDAYS,2,AMOUNTFCY,0))) AMOUNTFCY2,
                            ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTLOCAL,0)),6)AMOUNTLOCAL2,
                            ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL2,
                            (SUM(DECODE( DUEDAYS,3,AMOUNTFCY,0))) AMOUNTFCY3,
                            ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTLOCAL,0)),6) AMOUNTLOCAL3,
                            ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL3,
                            (SUM(DECODE( DUEDAYS,4,AMOUNTFCY,0))) AMOUNTFCY4,
                            ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTLOCAL,0)) ,6) AMOUNTLOCAL4,
                            ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL4,
                            (SUM(DECODE( DUEDAYS,5,AMOUNTFCY,0))) AMOUNTFCY5,
                            ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTLOCAL,0)),6) AMOUNTLOCAL5,
                            ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL5,
                            (SUM(DECODE( DUEDAYS,6,AMOUNTFCY,0))) AMOUNTFCY6,
                            ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTLOCAL,0)),6) AMOUNTLOCAL6,
                            ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL6,
                            (SUM(DECODE( DUEDAYS,7,AMOUNTFCY,0))) AMOUNTFCY7,
                            ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTLOCAL,0)),6) AMOUNTLOCAL7,
                            ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTMTMLOCAL,0)),6)  AMOUNTMTMLOCAL7,
                            (SUM(DECODE( DUEDAYS,8,AMOUNTFCY,0))) AMOUNTFCY8,
                            ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTLOCAL,0)),6) AMOUNTLOCAL8,
                            ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL8,
                            (SUM(DECODE( DUEDAYS,9,AMOUNTFCY,0))) AMOUNTFCY9,
                            ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTLOCAL,0)),6) AMOUNTLOCAL9,
                            ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL9,
                            (SUM(DECODE( DUEDAYS,10,AMOUNTFCY,0))) AMOUNTFCY10,
                            ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTLOCAL,0)),6) AMOUNTLOCAL10,
                            ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL10,
                            SUM(CASE WHEN DUEDAYS>=11 THEN AMOUNTFCY ELSE 0 END) AMOUNTFCY11,
                            ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTLOCAL,0)),6) AMOUNTLOCAL11,
                            ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL11
                  FROM (SELECT POSN_COMPANY_CODE COMPANYCODE,POSN_CURRENCY_CODE CURRENCYCODE,
                          POSN_PRODUCT_CODE PRODUCTCODE,POSN_SUBPRODUCT_CODE SUBPRODUCT,
                               POSN_ACCOUNT_CODE ACCOUNTCODE,
                              SUM(CASE WHEN (POSN_PRODUCT_CODE IN 33300004 
                  AND POSN_SUBPRODUCT_CODE IN (
                  33800055,33800056,33800057)) 
                       THEN -(POSN_TRANSACTION_AMOUNT)
                  ELSE  (ABS(POSN_TRANSACTION_AMOUNT))
                  
                  END) AMOUNTFCY,
                              SUM((CASE WHEN (POSN_PRODUCT_CODE IN 33300004 
                  AND POSN_SUBPRODUCT_CODE IN (
                  33800055,33800056,33800057)) 
                       THEN -(POSN_TRANSACTION_AMOUNT)
                  ELSE  ABS(POSN_TRANSACTION_AMOUNT)
                  
                  END*POSN_FCY_RATE)) AMOUNTLOCAL,
                             NVL(SUM(POSN_M2M_INRRATE*CASE WHEN (POSN_PRODUCT_CODE IN 33300004 
                  AND POSN_SUBPRODUCT_CODE IN (
                  33800055,33800056,33800057)) 
                       THEN -(POSN_TRANSACTION_AMOUNT)
                  ELSE  (ABS(POSN_TRANSACTION_AMOUNT))
                  
                  END),0) AMOUNTMTMLOCAL,
                              (CASE  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYmm')) < TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'YYYYmm'))) THEN 
                                       -1
                                    WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))) >=0 THEN
                                           TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))
                                        ELSE
                                          (12- (TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm')) -TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm'))))  END ) DUEDAYS,
                               (CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) THEN 'Export'
                                 WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                            25900014,25900015,25900011,25900012) THEN 'Hedge Buy'
                                 WHEN POSN_ACCOUNT_CODE IN (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) THEN 'Import'
                                 WHEN POSN_ACCOUNT_CODE IN (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                            25900085,25900074,25900075) THEN 'Hedge Sell' END) EXPOSURETYPE
                        FROM TRSYSTEM997
                        WHERE POSN_TRANSACTION_AMOUNT!=0
                        AND POSN_FCY_RATE !=0
                        AND POSN_PRODUCT_CODE =DECODE(PRODUCTCODE,33399999,POSN_PRODUCT_CODE,PRODUCTCODE)
                        AND POSN_SUBPRODUCT_CODE=DECODE(SUBPRODUCTCODE,33899999,POSN_SUBPRODUCT_CODE,SUBPRODUCTCODE)
                        GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE,
                                 POSN_SUBPRODUCT_CODE,POSN_ACCOUNT_CODE,
                                 (CASE  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYmm')) < TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'YYYYmm'))) THEN 
                                       -1
                                    WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))) >=0 THEN
                                           TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))
                                        ELSE
                                          (12- (TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm')) -TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm'))))  END ))
                GROUP BY COMPANYCODE,CURRENCYCODE,PRODUCTCODE,SUBPRODUCT,EXPOSURETYPE
                );
END IF; 


IF ((GAPCALTYPE= 2) OR (GAPCALTYPE= 3))  THEN 
     
     DELETE FROM TRSYSTEM970 
     WHERE HEDG_CALCULATION_TYPE='CANCELLED' 
       AND HEDG_DATE_ASON=DATDATEASON;


   INSERT INTO TRSYSTEM970 (HEDG_CALCULATION_TYPE,HEDG_DATE_ASON, HEDG_COMPANY_CODE,
                               HEDG_CURRENCY_CODE,HEDG_PRODUCT_CODE,
                               HEDG_SUBPRODUCT_CODE,HEDG_EXPOSURE_TYPE,
                            HEDG_MON_FORWARD1,HEDG_BENCHMARK_RATE1,HEDG_MTM_RATE1,
                            HEDG_MON_FORWARD2,HEDG_BENCHMARK_RATE2,HEDG_MTM_RATE2,
                            HEDG_MON_FORWARD3,HEDG_BENCHMARK_RATE3,HEDG_MTM_RATE3,
                            HEDG_MON_FORWARD4,HEDG_BENCHMARK_RATE4,HEDG_MTM_RATE4,
                            HEDG_MON_FORWARD5,HEDG_BENCHMARK_RATE5,HEDG_MTM_RATE5,
                            HEDG_MON_FORWARD6,HEDG_BENCHMARK_RATE6,HEDG_MTM_RATE6,
                            HEDG_MON_FORWARD7,HEDG_BENCHMARK_RATE7,HEDG_MTM_RATE7,
                            HEDG_MON_FORWARD8,HEDG_BENCHMARK_RATE8,HEDG_MTM_RATE8,
                            HEDG_MON_FORWARD9,HEDG_BENCHMARK_RATE9,HEDG_MTM_RATE9,
                            HEDG_MON_FORWARD10,HEDG_BENCHMARK_RATE10,HEDG_MTM_RATE10,
                            HEDG_MON_FORWARD11,HEDG_BENCHMARK_RATE11,HEDG_MTM_RATE11,
                            HEDG_MON_FORWARD12,HEDG_BENCHMARK_RATE12,HEDG_MTM_RATE12) 
                            SELECT 'CANCELLED',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,
                                    SUBPRODUCTCODE, EXPOSURETYPE,
                                    AMOUNTFCY0,AMOUNTLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTMTMLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTFCY1,AMOUNTLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTMTMLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTFCY2,AMOUNTLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTMTMLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTFCY3,AMOUNTLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTMTMLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTFCY4,AMOUNTLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTMTMLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTFCY5,AMOUNTLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTMTMLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTFCY0,AMOUNTLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTMTMLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTFCY7,AMOUNTLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTMTMLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTFCY8,AMOUNTLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTMTMLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTFCY9,AMOUNTLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTMTMLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTFCY10,AMOUNTLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTMTMLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTFCY11,AMOUNTLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11),
                                    AMOUNTMTMLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11)
                                    FROM
                                    (
                            SELECT 'CANCELLED',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,
                                    SUBPRODUCTCODE, EXPOSURETYPE,
                      (SUM(DECODE( DUEDAYS,0,AMOUNTFCY,0))) AMOUNTFCY0,
                      ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTLOCAL,0)),6) AMOUNTLOCAL0,
                      ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL0,
                      (SUM(DECODE( DUEDAYS,1,AMOUNTFCY,0))) AMOUNTFCY1,
                      ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTLOCAL,0)),6)AMOUNTLOCAL1,
                      ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL1,
                      (SUM(DECODE( DUEDAYS,2,AMOUNTFCY,0))) AMOUNTFCY2,
                      ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTLOCAL,0)),6)AMOUNTLOCAL2,
                      ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL2,
                      (SUM(DECODE( DUEDAYS,3,AMOUNTFCY,0))) AMOUNTFCY3,
                      ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTLOCAL,0)),6) AMOUNTLOCAL3,
                      ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL3,
                      (SUM(DECODE( DUEDAYS,4,AMOUNTFCY,0))) AMOUNTFCY4,
                      ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTLOCAL,0)) ,6) AMOUNTLOCAL4,
                      ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL4,
                      (SUM(DECODE( DUEDAYS,5,AMOUNTFCY,0))) AMOUNTFCY5,
                      ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTLOCAL,0)),6) AMOUNTLOCAL5,
                      ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL5,
                      (SUM(DECODE( DUEDAYS,6,AMOUNTFCY,0))) AMOUNTFCY6,
                      ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTLOCAL,0)),6) AMOUNTLOCAL6,
                      ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL6,
                      (SUM(DECODE( DUEDAYS,7,AMOUNTFCY,0))) AMOUNTFCY7,
                      ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTLOCAL,0)),6) AMOUNTLOCAL7,
                      ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTMTMLOCAL,0)),6)  AMOUNTMTMLOCAL7,
                      (SUM(DECODE( DUEDAYS,8,AMOUNTFCY,0))) AMOUNTFCY8,
                      ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTLOCAL,0)),6) AMOUNTLOCAL8,
                      ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL8,
                      (SUM(DECODE( DUEDAYS,9,AMOUNTFCY,0))) AMOUNTFCY9,
                      ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTLOCAL,0)),6) AMOUNTLOCAL9,
                      ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL9,
                      (SUM(DECODE( DUEDAYS,10,AMOUNTFCY,0))) AMOUNTFCY10,
                      ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTLOCAL,0)),6) AMOUNTLOCAL10,
                      ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL10,
                      (SUM(DECODE( DUEDAYS,11,AMOUNTFCY,0))) AMOUNTFCY11,
                      ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTLOCAL,0)),6) AMOUNTLOCAL11,
                      ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL11
              FROM ( SELECT DEAL_COMPANY_CODE COMPANYCODE,DEAL_BASE_CURRENCY CURRENCYCODE,
                            DEAL_BACKUP_DEAL PRODUCTCODE, DEAL_INIT_CODE SUBPRODUCTCODE,
                            DECODE(DEAL_BUY_SELL,25300001,25900012,25300002,25900062) ACCOUNTCODE,
                            SUM(DEAL_BASE_AMOUNT) AMOUNTFCY, SUM(DEAL_BASE_AMOUNT* DEAL_EXCHANGE_RATE) AMOUNTLOCAL,
                            0  AMOUNTMTMLOCAL,
                            (CASE WHEN (TO_NUMBER(TO_CHAR(DEAL_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))) >=0 
                            THEN
                            TO_NUMBER(TO_CHAR(DEAL_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))
                            ELSE
                            (12- (TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm')) -TO_NUMBER(TO_CHAR(DEAL_MATURITY_DATE,'mm')))) 
                            END ) DUEDAYS,
                            DECODE (DEAL_BUY_SELL,25300001,'Hedge Buy',25300002,'Hedge Sell') EXPOSURETYPE
                      FROM TRTRAN001, TRTRAN006
                     WHERE DEAL_DEAL_NUMBER= CDEL_DEAL_NUMBER
                      AND DEAL_EXECUTE_DATE >='01-apr-2012'
                      AND DEAL_BACKUP_DEAL =DECODE(PRODUCTCODE,33399999,DEAL_BACKUP_DEAL,PRODUCTCODE)
                      AND DEAL_INIT_CODE=DECODE(SUBPRODUCTCODE,33899999,DEAL_INIT_CODE,SUBPRODUCTCODE)
                    
                    
                      AND DEAL_RECORD_STATUS NOT IN(12400005,12400006)
                      AND CDEL_RECORD_STATUS NOT IN (12400005,12400006)
                    GROUP BY DEAL_COMPANY_CODE ,DEAL_BASE_CURRENCY,DEAL_BACKUP_DEAL ,DEAL_INIT_CODE,
                    DECODE(DEAL_BUY_SELL,25300001,25900012,25300002,25900062),
                    (CASE WHEN (TO_NUMBER(TO_CHAR(DEAL_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))) >=0 
                    THEN
                     TO_NUMBER(TO_CHAR(DEAL_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))
                    ELSE
                    (12- (TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm')) -TO_NUMBER(TO_CHAR(DEAL_MATURITY_DATE,'mm')))) 
                    END),
                    DECODE(DEAL_BUY_SELL,25300001,'Hedge Buy',25300002,'Hedge Sell')
    
      UNION ALL
     
     SELECT  TRAD_COMPANY_CODE  COMPANYCODE,
     TRTRAN002.TRAD_TRADE_CURRENCY CURRENCYCODE,
     TRTRAN002.TRAD_PRODUCT_CODE PRODUCTCODE,
     TRTRAN002.TRAD_SUBPRODUCT_CODE SUBPRODUCTCODE, 
     TRTRAN002.TRAD_IMPORT_EXPORT ACCOUNTCODE,
      SUM(TRTRAN006.CDEL_CANCEL_AMOUNT) AMOUNTFCY ,
      SUM(TRTRAN006.CDEL_CANCEL_AMOUNT*TRTRAN006.CDEL_CANCEL_RATE) AMOUNTLOCAL,
          0 AMOUNTMTMLOCAL,
          
      (CASE WHEN (TO_NUMBER(TO_CHAR(TRTRAN002.TRAD_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))) >=0 
      THEN
      TO_NUMBER(TO_CHAR(TRTRAN002.TRAD_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))
      ELSE
      (12- (TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm')) -TO_NUMBER(TO_CHAR(TRTRAN002.TRAD_MATURITY_DATE,'mm')))) 
      END ) DUEDAYS,
      (CASE WHEN TRAD_IMPORT_EXPORT < 25900050 THEN 'export' ELSE 'import' END) EXPOSURETYPE
            FROM TRTRAN003, TRTRAN002,TRTRAN006
            WHERE BREL_TRADE_REFERENCE=TRAD_TRADE_REFERENCE
                 AND CDEL_TRADE_REFERENCE= BREL_TRADE_REFERENCE
                 AND ((TRAD_PROCESS_COMPLETE=12400002)
     
                  OR (TRAD_COMPLETE_DATE <=SYSDATE AND
     TRAD_PROCESS_COMPLETE=12400001))
                 AND BREL_ENTRY_DATE >='01-apr-2012'
                 AND TRAD_PRODUCT_CODE =DECODE(PRODUCTCODE,33399999,TRAD_PRODUCT_CODE,PRODUCTCODE)
                 AND TRAD_SUBPRODUCT_CODE=DECODE(SUBPRODUCTCODE,33899999,TRAD_SUBPRODUCT_CODE,SUBPRODUCTCODE)
                 
         
         
                 AND TRAD_RECORD_STATUS NOT IN (10200005,10200006)
                 AND BREL_RECORD_STATUS NOT IN (10200005,10200006)
                 AND CDEL_RECORD_STATUS NOT IN (10200005,10200006)
     GROUP BY TRAD_COMPANY_CODE, TRAD_TRADE_CURRENCY, TRAD_PRODUCT_CODE,TRAD_SUBPRODUCT_CODE,
     TRAD_IMPORT_EXPORT,
     (CASE WHEN (TO_NUMBER(TO_CHAR(TRAD_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))) >=0 
      THEN
      TO_NUMBER(TO_CHAR(TRAD_MATURITY_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm'))
      ELSE
      (12- (TO_NUMBER(TO_CHAR(TO_DATE('01-apr-2013'),'mm')) -TO_NUMBER(TO_CHAR(TRAD_MATURITY_DATE,'mm')))) 
      END ),
      (CASE WHEN TRAD_IMPORT_EXPORT < 25900050 THEN 'export' ELSE 'import' END))
      
      
    GROUP BY COMPANYCODE,CURRENCYCODE,PRODUCTCODE,SUBPRODUCTCODE,EXPOSURETYPE
    );
  END IF; 

  
  
  
  IF ((GAPCALTYPE= 4) ) THEN 
     
     DELETE FROM TRSYSTEM970 
     WHERE HEDG_CALCULATION_TYPE='USDEquivalent' 
       AND HEDG_DATE_ASON=DATDATEASON;
     
     INSERT INTO TRSYSTEM970  (HEDG_CALCULATION_TYPE,HEDG_DATE_ASON, HEDG_COMPANY_CODE,
                               HEDG_CURRENCY_CODE,HEDG_PRODUCT_CODE,

                               HEDG_EXPOSURE_TYPE,
                            HEDG_MON_FORWARD1,HEDG_BENCHMARK_RATE1,HEDG_MTM_RATE1,
                            HEDG_MON_FORWARD2,HEDG_BENCHMARK_RATE2,HEDG_MTM_RATE2,
                            HEDG_MON_FORWARD3,HEDG_BENCHMARK_RATE3,HEDG_MTM_RATE3,
                            HEDG_MON_FORWARD4,HEDG_BENCHMARK_RATE4,HEDG_MTM_RATE4,
                            HEDG_MON_FORWARD5,HEDG_BENCHMARK_RATE5,HEDG_MTM_RATE5,
                            HEDG_MON_FORWARD6,HEDG_BENCHMARK_RATE6,HEDG_MTM_RATE6,
                            HEDG_MON_FORWARD7,HEDG_BENCHMARK_RATE7,HEDG_MTM_RATE7,
                            HEDG_MON_FORWARD8,HEDG_BENCHMARK_RATE8,HEDG_MTM_RATE8,
                            HEDG_MON_FORWARD9,HEDG_BENCHMARK_RATE9,HEDG_MTM_RATE9,
                            HEDG_MON_FORWARD10,HEDG_BENCHMARK_RATE10,HEDG_MTM_RATE10,
                            HEDG_MON_FORWARD11,HEDG_BENCHMARK_RATE11,HEDG_MTM_RATE11,
                            HEDG_MON_FORWARD12,HEDG_BENCHMARK_RATE12,HEDG_MTM_RATE12) 
                            
                            SELECT 'USDEquivalent',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,

                                    EXPOSURETYPE,
                                    AMOUNTFCY0,AMOUNTLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTMTMLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTFCY1,AMOUNTLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTMTMLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTFCY2,AMOUNTLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTMTMLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTFCY3,AMOUNTLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTMTMLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTFCY4,AMOUNTLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTMTMLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTFCY5,AMOUNTLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTMTMLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTFCY6,AMOUNTLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTMTMLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTFCY7,AMOUNTLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTMTMLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTFCY8,AMOUNTLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTMTMLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTFCY9,AMOUNTLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTMTMLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTFCY10,AMOUNTLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTMTMLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTFCY11,AMOUNTLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11),
                                    AMOUNTMTMLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11)
                                    FROM
                                    (
                            SELECT 'USDEquivalent',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,

                                      EXPOSURETYPE,
          (SUM(DECODE( DUEDAYS,0,AMOUNTFCY,0))) AMOUNTFCY0,
          ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTLOCAL,0)),6) AMOUNTLOCAL0,
          ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL0,
          (SUM(DECODE( DUEDAYS,1,AMOUNTFCY,0))) AMOUNTFCY1,
          ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTLOCAL,0)),6)AMOUNTLOCAL1,
          ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL1,
          (SUM(DECODE( DUEDAYS,2,AMOUNTFCY,0))) AMOUNTFCY2,
          ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTLOCAL,0)),6)AMOUNTLOCAL2,
          ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL2,
          (SUM(DECODE( DUEDAYS,3,AMOUNTFCY,0))) AMOUNTFCY3,
          ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTLOCAL,0)),6) AMOUNTLOCAL3,
          ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL3,
          (SUM(DECODE( DUEDAYS,4,AMOUNTFCY,0))) AMOUNTFCY4,
          ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTLOCAL,0)) ,6) AMOUNTLOCAL4,
          ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL4,
          (SUM(DECODE( DUEDAYS,5,AMOUNTFCY,0))) AMOUNTFCY5,
          ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTLOCAL,0)),6) AMOUNTLOCAL5,
          ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL5,
          (SUM(DECODE( DUEDAYS,6,AMOUNTFCY,0))) AMOUNTFCY6,
          ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTLOCAL,0)),6) AMOUNTLOCAL6,
          ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL6,
          (SUM(DECODE( DUEDAYS,7,AMOUNTFCY,0))) AMOUNTFCY7,
          ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTLOCAL,0)),6) AMOUNTLOCAL7,
          ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTMTMLOCAL,0)),6)  AMOUNTMTMLOCAL7,
          (SUM(DECODE( DUEDAYS,8,AMOUNTFCY,0))) AMOUNTFCY8,
          ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTLOCAL,0)),6) AMOUNTLOCAL8,
          ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL8,
          (SUM(DECODE( DUEDAYS,9,AMOUNTFCY,0))) AMOUNTFCY9,
          ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTLOCAL,0)),6) AMOUNTLOCAL9,
          ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL9,
          (SUM(DECODE( DUEDAYS,10,AMOUNTFCY,0))) AMOUNTFCY10,
          ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTLOCAL,0)),6) AMOUNTLOCAL10,
          ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL10,
          SUM(CASE WHEN DUEDAYS>=11 THEN AMOUNTFCY ELSE 0 END) AMOUNTFCY11,
          ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTLOCAL,0)),6) AMOUNTLOCAL11,
          ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL11
          
     
   
   
        FROM (SELECT POSN_COMPANY_CODE COMPANYCODE,30400004 CURRENCYCODE,
        POSN_PRODUCT_CODE PRODUCTCODE,

             POSN_ACCOUNT_CODE ACCOUNTCODE,

































                  
                  SUM(POSN_REVALUE_USD)AMOUNTFCY,
                                        

































                  
                 SUM( POSN_REVALUE_USD * ROUND(POSN_FCY_RATE/POSN_USD_RATE,4)) AMOUNTLOCAL,
                 







                  SUM(POSN_M2M_INRRATE * POSN_REVALUE_USD )AMOUNTMTMLOCAL,




            (CASE  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYmm')) < TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'YYYYmm'))) THEN 
                     -1
                  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))) >=0 THEN
                         TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))
                      ELSE
                        (12- (TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm')) -TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm'))))  END ) DUEDAYS,
             (CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                             25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) THEN 'Import'
               WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                          25900014,25900015,25900011,25900012,
                                          25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                          25900085,25900074,25900075) THEN 'Hedge Buy'
              
            
              
                                          END) EXPOSURETYPE
      FROM TRSYSTEM997
      WHERE POSN_REVALUE_USD!=0
      AND POSN_FCY_RATE !=0
      AND POSN_PRODUCT_CODE= DECODE(PRODUCTCODE,33399999,POSN_PRODUCT_CODE,PRODUCTCODE)
      
      GROUP BY POSN_COMPANY_CODE,30400004,POSN_PRODUCT_CODE,

               POSN_ACCOUNT_CODE,            (CASE  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYmm')) < TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'YYYYmm'))) THEN 
                     -1
                  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))) >=0 THEN
                         TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))
                      ELSE
                        (12- (TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm')) -TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm'))))  END ))
      GROUP BY COMPANYCODE,CURRENCYCODE,PRODUCTCODE,

               EXPOSURETYPE
      );
      
END IF;

 IF (GAPCALTYPE=5) THEN 
     
     DELETE FROM TRSYSTEM970 
     WHERE HEDG_CALCULATION_TYPE='HSTATPRODUCTWISE' 
       AND HEDG_DATE_ASON=DATDATEASON;
     
     INSERT INTO TRSYSTEM970  (HEDG_CALCULATION_TYPE,HEDG_DATE_ASON, HEDG_COMPANY_CODE,
                               HEDG_CURRENCY_CODE,HEDG_PRODUCT_CODE,
                               HEDG_SUBPRODUCT_CODE,HEDG_EXPOSURE_TYPE,
                            HEDG_MON_FORWARD1,HEDG_BENCHMARK_RATE1,HEDG_MTM_RATE1,
                            HEDG_MON_FORWARD2,HEDG_BENCHMARK_RATE2,HEDG_MTM_RATE2,
                            HEDG_MON_FORWARD3,HEDG_BENCHMARK_RATE3,HEDG_MTM_RATE3,
                            HEDG_MON_FORWARD4,HEDG_BENCHMARK_RATE4,HEDG_MTM_RATE4,
                            HEDG_MON_FORWARD5,HEDG_BENCHMARK_RATE5,HEDG_MTM_RATE5,
                            HEDG_MON_FORWARD6,HEDG_BENCHMARK_RATE6,HEDG_MTM_RATE6,
                            HEDG_MON_FORWARD7,HEDG_BENCHMARK_RATE7,HEDG_MTM_RATE7,
                            HEDG_MON_FORWARD8,HEDG_BENCHMARK_RATE8,HEDG_MTM_RATE8,
                            HEDG_MON_FORWARD9,HEDG_BENCHMARK_RATE9,HEDG_MTM_RATE9,
                            HEDG_MON_FORWARD10,HEDG_BENCHMARK_RATE10,HEDG_MTM_RATE10,
                            HEDG_MON_FORWARD11,HEDG_BENCHMARK_RATE11,HEDG_MTM_RATE11,
                            HEDG_MON_FORWARD12,HEDG_BENCHMARK_RATE12,HEDG_MTM_RATE12) 
                            
                            SELECT 'HSTATPRODUCTWISE',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,
                                    33899999, EXPOSURETYPE,
                                    AMOUNTFCY0,AMOUNTLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTMTMLOCAL0/ DECODE(AMOUNTFCY0,0,1,AMOUNTFCY0),
                                    AMOUNTFCY1,AMOUNTLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTMTMLOCAL1/ DECODE(AMOUNTFCY1,0,1,AMOUNTFCY1),
                                    AMOUNTFCY2,AMOUNTLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTMTMLOCAL2/ DECODE(AMOUNTFCY2,0,1,AMOUNTFCY2),
                                    AMOUNTFCY3,AMOUNTLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTMTMLOCAL3/ DECODE(AMOUNTFCY3,0,1,AMOUNTFCY3),
                                    AMOUNTFCY4,AMOUNTLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTMTMLOCAL4/ DECODE(AMOUNTFCY4,0,1,AMOUNTFCY4),
                                    AMOUNTFCY5,AMOUNTLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTMTMLOCAL5/ DECODE(AMOUNTFCY5,0,1,AMOUNTFCY5),
                                    AMOUNTFCY6,AMOUNTLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTMTMLOCAL6/ DECODE(AMOUNTFCY6,0,1,AMOUNTFCY6),
                                    AMOUNTFCY7,AMOUNTLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTMTMLOCAL7/ DECODE(AMOUNTFCY7,0,1,AMOUNTFCY7),
                                    AMOUNTFCY8,AMOUNTLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTMTMLOCAL8/ DECODE(AMOUNTFCY8,0,1,AMOUNTFCY8),
                                    AMOUNTFCY9,AMOUNTLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTMTMLOCAL9/ DECODE(AMOUNTFCY9,0,1,AMOUNTFCY9),
                                    AMOUNTFCY10,AMOUNTLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTMTMLOCAL10/ DECODE(AMOUNTFCY10,0,1,AMOUNTFCY10),
                                    AMOUNTFCY11,AMOUNTLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11),
                                    AMOUNTMTMLOCAL11/ DECODE(AMOUNTFCY11,0,1,AMOUNTFCY11)
                                    FROM
                                    (
                            SELECT 'HSTATPRODUCTWISE',DATDATEASON, COMPANYCODE,
                                    CURRENCYCODE,PRODUCTCODE,
                                     EXPOSURETYPE,
                            (SUM(DECODE( DUEDAYS,0,AMOUNTFCY,0))) AMOUNTFCY0,
                            ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTLOCAL,0)),6) AMOUNTLOCAL0,
                            ROUND(SUM(DECODE( DUEDAYS,0,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL0,
                            (SUM(DECODE( DUEDAYS,1,AMOUNTFCY,0))) AMOUNTFCY1,
                            ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTLOCAL,0)),6)AMOUNTLOCAL1,
                            ROUND(SUM(DECODE( DUEDAYS,1,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL1,
                            (SUM(DECODE( DUEDAYS,2,AMOUNTFCY,0))) AMOUNTFCY2,
                            ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTLOCAL,0)),6)AMOUNTLOCAL2,
                            ROUND(SUM(DECODE( DUEDAYS,2,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL2,
                            (SUM(DECODE( DUEDAYS,3,AMOUNTFCY,0))) AMOUNTFCY3,
                            ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTLOCAL,0)),6) AMOUNTLOCAL3,
                            ROUND(SUM(DECODE( DUEDAYS,3,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL3,
                            (SUM(DECODE( DUEDAYS,4,AMOUNTFCY,0))) AMOUNTFCY4,
                            ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTLOCAL,0)) ,6) AMOUNTLOCAL4,
                            ROUND(SUM(DECODE( DUEDAYS,4,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL4,
                            (SUM(DECODE( DUEDAYS,5,AMOUNTFCY,0))) AMOUNTFCY5,
                            ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTLOCAL,0)),6) AMOUNTLOCAL5,
                            ROUND(SUM(DECODE( DUEDAYS,5,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL5,
                            (SUM(DECODE( DUEDAYS,6,AMOUNTFCY,0))) AMOUNTFCY6,
                            ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTLOCAL,0)),6) AMOUNTLOCAL6,
                            ROUND(SUM(DECODE( DUEDAYS,6,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL6,
                            (SUM(DECODE( DUEDAYS,7,AMOUNTFCY,0))) AMOUNTFCY7,
                            ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTLOCAL,0)),6) AMOUNTLOCAL7,
                            ROUND(SUM(DECODE( DUEDAYS,7,AMOUNTMTMLOCAL,0)),6)  AMOUNTMTMLOCAL7,
                            (SUM(DECODE( DUEDAYS,8,AMOUNTFCY,0))) AMOUNTFCY8,
                            ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTLOCAL,0)),6) AMOUNTLOCAL8,
                            ROUND(SUM(DECODE( DUEDAYS,8,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL8,
                            (SUM(DECODE( DUEDAYS,9,AMOUNTFCY,0))) AMOUNTFCY9,
                            ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTLOCAL,0)),6) AMOUNTLOCAL9,
                            ROUND(SUM(DECODE( DUEDAYS,9,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL9,
                            (SUM(DECODE( DUEDAYS,10,AMOUNTFCY,0))) AMOUNTFCY10,
                            ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTLOCAL,0)),6) AMOUNTLOCAL10,
                            ROUND(SUM(DECODE( DUEDAYS,10,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL10,
                            SUM(CASE WHEN DUEDAYS>=11 THEN AMOUNTFCY ELSE 0 END) AMOUNTFCY11,
                            ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTLOCAL,0)),6) AMOUNTLOCAL11,
                            ROUND(SUM(DECODE( DUEDAYS,11,AMOUNTMTMLOCAL,0)),6) AMOUNTMTMLOCAL11
                  FROM (SELECT POSN_COMPANY_CODE COMPANYCODE,POSN_CURRENCY_CODE CURRENCYCODE,
                          POSN_PRODUCT_CODE PRODUCTCODE,
                               POSN_ACCOUNT_CODE ACCOUNTCODE,







                  SUM(POSN_TRANSACTION_AMOUNT)AMOUNTFCY,







                  SUM(POSN_TRANSACTION_AMOUNT * POSN_FCY_RATE)AMOUNTLOCAL,







                  SUM(POSN_M2M_INRRATE * POSN_TRANSACTION_AMOUNT) AMOUNTMTMLOCAL,
                  (CASE  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYmm')) < TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'YYYYmm'))) THEN 
                                       -1
                                    WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))) >=0 THEN
                                           TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))
                                        ELSE
                                          (12- (TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm')) -TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm'))))  END ) DUEDAYS,
                               (CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024) THEN 'Export'
                                 WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                            25900014,25900015,25900011,25900012) THEN 'Hedge Buy'
                                 WHEN POSN_ACCOUNT_CODE IN (25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) THEN 'Import'
                                 WHEN POSN_ACCOUNT_CODE IN (25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                            25900085,25900074,25900075) THEN 'Hedge Sell' END) EXPOSURETYPE
                        FROM TRSYSTEM997
                        WHERE POSN_TRANSACTION_AMOUNT!=0
                        AND POSN_FCY_RATE !=0
                        AND POSN_PRODUCT_CODE =DECODE(PRODUCTCODE,33399999,POSN_PRODUCT_CODE,PRODUCTCODE)
                        
                        GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE,
                                 POSN_ACCOUNT_CODE,
                                 (CASE  WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYmm')) < TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'YYYYmm'))) THEN 
                                       -1
                                    WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))) >=0 THEN
                                           TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')) - TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm'))
                                        ELSE
                                          (12- (TO_NUMBER(TO_CHAR(TO_DATE(DATDATEASON),'mm')) -TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'mm')))) END ))
                GROUP BY COMPANYCODE,CURRENCYCODE,PRODUCTCODE,EXPOSURETYPE
                );

END IF; 
       COMMIT;
       
         EXCEPTION
    WHEN OTHERS THEN
      NUMERROR := SQLCODE;
      VARERROR := SQLERRM;
      VARERROR := GCONST.FNCRETURNERROR('prcHedgeStatusReportPopulate', NUMERROR, VARMESSAGE, 
                      VAROPERATION, VARERROR);


      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);  
       
        END PRCCALCULATEGAPEXPOSURE;



PROCEDURE PRCHEDGESTATUSREPORTPOPULATE(
             VARUSERID IN VARCHAR,
             FRMDATE IN DATE,
             PRODUCTCODE IN NUMBER,
             SUBPRODUCTCODE IN NUMBER)
AS
  NUMERROR NUMBER(10);
  VAROPERATION        GCONST.GVAROPERATION%TYPE;
  VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
  VARERROR            GCONST.GVARERROR%TYPE;
BEGIN 

    NUMERROR := PKGFOREXPROCESS.FNCPOSITIONGENERATE(VARUSERID,FRMDATE);COMMIT;    
      
    PRCCALCULATEGAPEXPOSURE(FRMDATE,1,PRODUCTCODE,SUBPRODUCTCODE);
     DELETE FROM  REPORT_HEDGESTATUS;
      INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
      SELECT 1 DISPLAYORDER,'Exposure' TRANSTYPE,
                   HEDG_PRODUCT_CODE PRODUCTCODE,
                   HEDG_SUBPRODUCT_CODE SUBPRODUCTCODE,
                   HEDG_COMPANY_CODE COMPANY,
                   HEDG_CURRENCY_CODE CURRENCYCODE,
                   HEDG_MON_FORWARD1 FORWARD1,
                   HEDG_MON_FORWARD2 FORWARD2,
                   HEDG_MON_FORWARD3 FORWARD3,
                   HEDG_MON_FORWARD4 FORWARD4,
                   HEDG_MON_FORWARD5 FORWARD5,
                   HEDG_MON_FORWARD6 FORWARD6,
                   HEDG_MON_FORWARD7 FORWARD7,
                   HEDG_MON_FORWARD8 FORWARD8,
                   HEDG_MON_FORWARD9 FORWARD9,
                   HEDG_MON_FORWARD10 FORWARD10,
                   HEDG_MON_FORWARD11 FORWARD11,
                   HEDG_MON_FORWARD12 FORWARD12
           FROM TRSYSTEM970
           WHERE HEDG_EXPOSURE_TYPE IN ('Import','Export')  AND HEDG_CALCULATION_TYPE='OUTSTANDING'
            AND HEDG_DATE_ASON=FRMDATE;
            

      INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
      SELECT 2 DISPLAYORDER,'Hedged' TRANSTYPE, 
                HEDG_PRODUCT_CODE PRODUCTCODE,
                HEDG_SUBPRODUCT_CODE SUBPRODUCTCODE,
                 HEDG_COMPANY_CODE  COMPANY,
                  HEDG_CURRENCY_CODE  CURRENCYCODE,
                 HEDG_MON_FORWARD1 FORWARD1,
                 HEDG_MON_FORWARD2 FORWARD2,
                 HEDG_MON_FORWARD3 FORWARD3,
                 HEDG_MON_FORWARD4 FORWARD4,
                 HEDG_MON_FORWARD5 FORWARD5,
                 HEDG_MON_FORWARD6 FORWARD6,
                 HEDG_MON_FORWARD7 FORWARD7,
                 HEDG_MON_FORWARD8 FORWARD8,
                 HEDG_MON_FORWARD9 FORWARD9,
                 HEDG_MON_FORWARD10 FORWARD10,
                 HEDG_MON_FORWARD11 FORWARD11,
                 HEDG_MON_FORWARD12 FORWARD12
        FROM TRSYSTEM970
         WHERE HEDG_EXPOSURE_TYPE IN('Hedge Buy','Hedge Sell') AND HEDG_CALCULATION_TYPE='OUTSTANDING' 
         AND HEDG_DATE_ASON=FRMDATE;
         

      INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
        SELECT 4 DISPLAYORDER,'Hedged Rate' TRANSTYPE,  
                  HEDG_PRODUCT_CODE  PRODUCTCODE,
                  HEDG_SUBPRODUCT_CODE  SUBPRODUCTCODE,
                  HEDG_COMPANY_CODE  COMPANY,
                  HEDG_CURRENCY_CODE  CURRENCYCODE,
                 HEDG_BENCHMARK_RATE1 FORWARD1,
                 HEDG_BENCHMARK_RATE2 FORWARD2,
                 HEDG_BENCHMARK_RATE3 FORWARD3,
                 HEDG_BENCHMARK_RATE4 FORWARD4,
                 HEDG_BENCHMARK_RATE5 FORWARD5,
                 HEDG_BENCHMARK_RATE6 FORWARD6,
                 HEDG_BENCHMARK_RATE7 FORWARD7,
                 HEDG_BENCHMARK_RATE8 FORWARD8,
                 HEDG_BENCHMARK_RATE9 FORWARD9,
                 HEDG_BENCHMARK_RATE10 FORWARD10,
                 HEDG_BENCHMARK_RATE11 FORWARD11,
                 HEDG_BENCHMARK_RATE12 FORWARD12
        FROM TRSYSTEM970
        WHERE HEDG_EXPOSURE_TYPE IN('Hedge Buy','Hedge Sell') AND HEDG_CALCULATION_TYPE='OUTSTANDING' 
        AND HEDG_DATE_ASON=FRMDATE;
        

      INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
         SELECT 3 DISPLAYORDER,' % Hedged' TRANSTYPE,
                NVL(EXPOSURE.PRODUCTCODE,HEDGE.PRODUCTCODE) PRODUCTCODE,
                NVL(EXPOSURE.SUBPRODUCTCODE,HEDGE.SUBPRODUCTCODE) SUBPRODUCTCODE,
                NVL(EXPOSURE.COMPANY,HEDGE.COMPANY) COMPANY ,
                NVL(EXPOSURE.CURRENCYCODE,HEDGE.CURRENCYCODE)CURRENCYCODE,
              
                (CASE WHEN(EXPOSURE.FORWARD1 IS NULL ) OR (EXPOSURE.FORWARD1=0) THEN 0 
                ELSE (HEDGE.FORWARD1/NVL(EXPOSURE.FORWARD1,1))END)*100  FORWARD1,
                (CASE WHEN(EXPOSURE.FORWARD2 IS NULL ) OR (EXPOSURE.FORWARD2=0) THEN 0
                ELSE (HEDGE.FORWARD2/NVL(EXPOSURE.FORWARD2,1))END)*100  FORWARD2,
                (CASE WHEN(EXPOSURE.FORWARD3 IS NULL ) OR (EXPOSURE.FORWARD3=0) THEN 0
                ELSE (HEDGE.FORWARD3/NVL(EXPOSURE.FORWARD3,1))END)*100  FORWARD3,
                (CASE WHEN(EXPOSURE.FORWARD4 IS NULL ) OR (EXPOSURE.FORWARD4=0) THEN 0
                ELSE (HEDGE.FORWARD4/NVL(EXPOSURE.FORWARD4,1))END)*100  FORWARD4,
                (CASE WHEN(EXPOSURE.FORWARD5 IS NULL ) OR (EXPOSURE.FORWARD5=0) THEN 0
                ELSE (HEDGE.FORWARD5/NVL(EXPOSURE.FORWARD5,1))END)*100  FORWARD5,
                (CASE WHEN(EXPOSURE.FORWARD6 IS NULL ) OR (EXPOSURE.FORWARD6=0) THEN 0
                ELSE (HEDGE.FORWARD6/NVL(EXPOSURE.FORWARD6,1))END)*100  FORWARD6,
                (CASE WHEN(EXPOSURE.FORWARD7 IS NULL ) OR (EXPOSURE.FORWARD7=0) THEN 0
                ELSE (HEDGE.FORWARD7/NVL(EXPOSURE.FORWARD7,1))END)*100  FORWARD7,
                (CASE WHEN(EXPOSURE.FORWARD8 IS NULL ) OR (EXPOSURE.FORWARD8=0) THEN 0
                ELSE (HEDGE.FORWARD8/NVL(EXPOSURE.FORWARD8,1))END)*100  FORWARD8,
                (CASE WHEN(EXPOSURE.FORWARD9 IS NULL ) OR (EXPOSURE.FORWARD9=0) THEN 0
                ELSE (HEDGE.FORWARD9/NVL(EXPOSURE.FORWARD9,1))END)*100  FORWARD9,
                (CASE WHEN(EXPOSURE.FORWARD10 IS NULL ) OR (EXPOSURE.FORWARD10=0) THEN 0
                ELSE (HEDGE.FORWARD10/NVL(EXPOSURE.FORWARD10,1))END)*100  FORWARD10,
                (CASE WHEN(EXPOSURE.FORWARD11 IS NULL ) OR (EXPOSURE.FORWARD11=0) THEN 0
                ELSE (HEDGE.FORWARD11/NVL(EXPOSURE.FORWARD11,1))END)*100  FORWARD11,
                (CASE WHEN(EXPOSURE.FORWARD12 IS NULL ) OR (EXPOSURE.FORWARD12=0) THEN 0
                ELSE (HEDGE.FORWARD12/NVL(EXPOSURE.FORWARD12,1))END)*100  FORWARD12
        FROM  (SELECT  *  FROM REPORT_HEDGESTATUS
                WHERE TRANSTYPE='Exposure')EXPOSURE  FULL OUTER JOIN
              (SELECT * FROM REPORT_HEDGESTATUS
                WHERE TRANSTYPE ='Hedged')HEDGE 
          ON HEDGE.PRODUCTCODE= EXPOSURE.PRODUCTCODE
           AND HEDGE.SUBPRODUCTCODE= EXPOSURE.SUBPRODUCTCODE
           AND HEDGE.COMPANY= EXPOSURE.COMPANY
           AND HEDGE.CURRENCYCODE= EXPOSURE.CURRENCYCODE;
          
          
          
        INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)

          SELECT 5 DISPLAYORDER,'% Hedge - Policy ( '|| FNCGETRISKLIMITS(21000017,HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,FRMDATE) || ')' TRANSTYPE, 
            HEDG_PRODUCT_CODE  PRODUCTCODE, 
            HEDG_SUBPRODUCT_CODE  SUBPRODUCTCODE,
            HEDG_COMPANY_CODE  COMPANY,
            HEDG_CURRENCY_CODE  CURRENCYCODE,
           
                 HPOLICY FORWARD1, HPOLICY FORWARD2,HPOLICY FORWARD3,
                 HPOLICY FORWARD4,HPOLICY FORWARD5,HPOLICY FORWARD6,
                 HPOLICY FORWARD7,HPOLICY FORWARD8,HPOLICY FORWARD9,
                 HPOLICY FORWARD10,HPOLICY FORWARD11, HPOLICY FORWARD12
         FROM (SELECT DISTINCT HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
                      HEDG_CURRENCY_CODE,( SELECT RISK_LIMIT_PERCENT 
                              FROM TRSYSTEM012
                             WHERE RISK_RISK_TYPE=21000017
                               AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                                 AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                                AND RISK_SUBPRODUCT_CODE=HEDG_SUBPRODUCT_CODE
                                                                  )
                               AND RISK_SUBPRODUCT_CODE=HEDG_SUBPRODUCT_CODE) HPOLICY 
               FROM  TRSYSTEM970
               WHERE HEDG_EXPOSURE_TYPE IN('Import','Export') 
                AND HEDG_CALCULATION_TYPE='OUTSTANDING'
                AND HEDG_DATE_ASON=FRMDATE)D;    
  

     
      INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
            
        SELECT 7 DISPLAYORDER,'Unhedged Exposure (100%)' TRANSTYPE,
                 NVL(EXPOSURE.PRODUCTCODE,HEDGE.PRODUCTCODE) PRODUCTCODE,
                 NVL(EXPOSURE.SUBPRODUCTCODE,HEDGE.SUBPRODUCTCODE) SUBPRODUCTCODE,
                 NVL(EXPOSURE.COMPANY,HEDGE.COMPANY) COMPANY ,
                 NVL(EXPOSURE.CURRENCYCODE,HEDGE.CURRENCYCODE)CURRENCYCODE,
                 (NVL(EXPOSURE.FORWARD1,0)- NVL(HEDGE.FORWARD1,0)) FORWARD1,
                 (NVL(EXPOSURE.FORWARD2,0)- NVL(HEDGE.FORWARD2,0)) FORWARD2,
                 (NVL(EXPOSURE.FORWARD3,0)- NVL(HEDGE.FORWARD3,0)) FORWARD3,
                 (NVL(EXPOSURE.FORWARD4,0)- NVL(HEDGE.FORWARD4,0)) FORWARD4,
                 (NVL(EXPOSURE.FORWARD5,0)- NVL(HEDGE.FORWARD5,0)) FORWARD5,
                 (NVL(EXPOSURE.FORWARD6,0)- NVL(HEDGE.FORWARD6,0)) FORWARD6,
                 (NVL(EXPOSURE.FORWARD7,0)- NVL(HEDGE.FORWARD7,0)) FORWARD7,
                 (NVL(EXPOSURE.FORWARD8,0)- NVL(HEDGE.FORWARD8,0)) FORWARD8,
                 (NVL(EXPOSURE.FORWARD9,0)- NVL(HEDGE.FORWARD9,0)) FORWARD9,
                 (NVL(EXPOSURE.FORWARD10,0)- NVL(HEDGE.FORWARD10,0)) FORWARD10,
                 (NVL(EXPOSURE.FORWARD11,0)- NVL(HEDGE.FORWARD11,0)) FORWARD11,
                 (NVL(EXPOSURE.FORWARD12,0)- NVL(HEDGE.FORWARD12,0)) FORWARD12
        FROM  (SELECT  *  FROM REPORT_HEDGESTATUS
                WHERE TRANSTYPE='Exposure')EXPOSURE  FULL OUTER JOIN
              (SELECT * FROM REPORT_HEDGESTATUS
                WHERE TRANSTYPE ='Hedged')HEDGE 
          ON HEDGE.PRODUCTCODE= EXPOSURE.PRODUCTCODE
           AND HEDGE.SUBPRODUCTCODE= EXPOSURE.SUBPRODUCTCODE
           AND HEDGE.COMPANY= EXPOSURE.COMPANY
           AND HEDGE.CURRENCYCODE= EXPOSURE.CURRENCYCODE;

      INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
            
      SELECT   6 DISPLAYORDER,'Addt Cover Against Policy ( ' || HPOLICY.HPOLICY || ' %)' TRANSTYPE,
                 HEDGEPER.PRODUCTCODE, HEDGEPER.SUBPRODUCTCODE, HEDGEPER.COMPANY,
                 HEDGEPER.CURRENCYCODE,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD1)* EXPOSURE.FORWARD1)/100 FORWARD1,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD2)* EXPOSURE.FORWARD2)/100 FORWARD2,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD3)* EXPOSURE.FORWARD3)/100 FORWARD3,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD4)* EXPOSURE.FORWARD4)/100 FORWARD4,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD5)* EXPOSURE.FORWARD5)/100 FORWARD5,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD6)* EXPOSURE.FORWARD6)/100 FORWARD6,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD7)* EXPOSURE.FORWARD7)/100 FORWARD7,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD8)* EXPOSURE.FORWARD8)/100 FORWARD8,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD9)* EXPOSURE.FORWARD9)/100 FORWARD9,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD10)* EXPOSURE.FORWARD10)/100 FORWARD10,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD11)* EXPOSURE.FORWARD12)/100 FORWARD11,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD12)* EXPOSURE.FORWARD12)/100 FORWARD12
            FROM 
            ( SELECT * FROM REPORT_HEDGESTATUS 
               WHERE TRANSTYPE=' % Hedged') HEDGEPER INNER JOIN 
            (SELECT DISTINCT HEDG_PRODUCT_CODE PRODUCTCODE,HEDG_SUBPRODUCT_CODE SUBPRODUCTCODE,HEDG_COMPANY_CODE COMPANY,
                          HEDG_CURRENCY_CODE CURRENCYCODE,( SELECT RISK_LIMIT_PERCENT 
                                  FROM TRSYSTEM012
                                 WHERE RISK_RISK_TYPE=21000017
                                   AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                    AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                                  AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                                                AND  RISK_EFFECTIVE_DATE<= FRMDATE
                                                                  AND RISK_SUBPRODUCT_CODE=HEDG_SUBPRODUCT_CODE
                                                                  )
                                   AND RISK_SUBPRODUCT_CODE=HEDG_SUBPRODUCT_CODE) HPOLICY 
                   FROM  TRSYSTEM970
                   WHERE HEDG_EXPOSURE_TYPE IN('Import','Export') 
                    AND HEDG_CALCULATION_TYPE='OUTSTANDING') HPOLICY      
               ON HEDGEPER.PRODUCTCODE= HPOLICY.PRODUCTCODE
               AND HEDGEPER.SUBPRODUCTCODE= HPOLICY.SUBPRODUCTCODE
               AND HEDGEPER.COMPANY= HPOLICY.COMPANY
               AND HEDGEPER.CURRENCYCODE= HPOLICY.CURRENCYCODE
           INNER JOIN 
             ( SELECT * FROM REPORT_HEDGESTATUS
                WHERE TRANSTYPE='Exposure') EXPOSURE
             ON HEDGEPER.PRODUCTCODE= EXPOSURE.PRODUCTCODE
               AND HEDGEPER.SUBPRODUCTCODE= EXPOSURE.SUBPRODUCTCODE
               AND HEDGEPER.COMPANY= EXPOSURE.COMPANY
               AND HEDGEPER.CURRENCYCODE= EXPOSURE.CURRENCYCODE ;
                
        
        
        INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 1 , 'Exposure', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =1);
         
        
        
        INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 2 , 'Hedged', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =2);

       INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 3 , ' % Hedged', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =3);

       INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 4 , 'Hedged Rate', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =4);
                  
        INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 5 , '% Hedge - Policy', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =5);

       INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 6 , 'Addt Cover Against Policy ', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
      
          AND DISPLAYORDER =6);

       INSERT INTO REPORT_HEDGESTATUS(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 7 , 'Unhedged Exposure (100%)', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_HEDGESTATUS MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_HEDGESTATUS SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
          AND MAINT.SUBPRODUCTCODE= SUBT.SUBPRODUCTCODE
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
        
          AND DISPLAYORDER =7);
         

        
         UPDATE REPORT_HEDGESTATUS SET TOTAL =
                 (SELECT (CASE WHEN (TRANSTYPE='Exposure') OR (TRANSTYPE='Hedged') OR (TRANSTYPE='Unhedged Exposure (100%)') OR (TRANSTYPE LIKE 'Addt Cover Against Policy%') THEN 
                 ROUND((FORWARD1+FORWARD2+FORWARD3+FORWARD4+FORWARD5+FORWARD6+FORWARD7+FORWARD8+FORWARD9+FORWARD10+FORWARD11+FORWARD12 )/1000000,2)
                  WHEN (TRANSTYPE=' % Hedged') THEN
                         FNCGETHEDGEPERCENT(FRMDATE,'OUTSTANDING',PRODUCTCODE,SUBPRODUCTCODE,CURRENCYCODE)
                         
                 WHEN INSTR(TRANSTYPE, '% Hedge - Policy') >0 THEN 
                    RISK_LIMIT_PERCENT
                 WHEN (TRANSTYPE='Hedged Rate') THEN 
                          FNCGETHEDGEINGRATEAVG(FRMDATE,'OUTSTANDING',PRODUCTCODE,SUBPRODUCTCODE,CURRENCYCODE)


                   ELSE NULL 
                   END ) FROM REPORT_HEDGESTATUS A LEFT OUTER JOIN 
                                 TRSYSTEM012 A
                          ON RISK_RISK_TYPE=21000017
                         AND RISK_PRODUCT_CODE=PRODUCTCODE
                        
                        AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE
                   WHERE REPORT_HEDGESTATUS.PRODUCTCODE= A.PRODUCTCODE
                     AND REPORT_HEDGESTATUS.SUBPRODUCTCODE= A.SUBPRODUCTCODE
                     AND REPORT_HEDGESTATUS.CURRENCYCODE= A.CURRENCYCODE
                      AND  A.RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012 B
                                                                  WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                                AND B.RISK_PRODUCT_CODE=A.RISK_PRODUCT_CODE
                                                                AND  B.RISK_EFFECTIVE_DATE<= FRMDATE
                                                                 AND B.RISK_SUBPRODUCT_CODE=A.RISK_SUBPRODUCT_CODE
                                                                  )
                     AND REPORT_HEDGESTATUS.TRANSTYPE= A.TRANSTYPE);


         
        UPDATE REPORT_HEDGESTATUS  SET FORWARD1=ROUND((FORWARD1/1000000),2),
               FORWARD2 = ROUND(FORWARD2/1000000,2),
               FORWARD3=ROUND(FORWARD3/1000000,2),
               FORWARD4 =ROUND(FORWARD4/1000000,2),
               FORWARD5 = ROUND(FORWARD5/1000000,2),
               FORWARD6 =ROUND(FORWARD6/1000000,2),
               FORWARD7 =ROUND(FORWARD7/1000000,2),
               FORWARD8 =ROUND(FORWARD8/1000000,2),
               FORWARD9 =ROUND(FORWARD9/1000000,2),
               FORWARD10 = ROUND(FORWARD10/1000000,2),
               FORWARD11 =ROUND(FORWARD11/1000000,2),
               FORWARD12 = ROUND(FORWARD12/1000000,2)
        WHERE DISPLAYORDER IN ( 1,2,6,7);
  
          
        VAROPERATION :='updating trsystem012 Rate  into Report_HedgeStatus';
           UPDATE REPORT_HEDGESTATUS SET LIMITRANGE =   (SELECT       
                    RISK_LIMIT_PERCENT  || ( CASE WHEN (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) THEN 
                                                     ' - ' ||  RISK_FLUCT_ALLOWED || ' %' ELSE ' %' END) 
                    FROM TRSYSTEM012
                    WHERE   RISK_RISK_TYPE=21000017
                     AND RISK_PRODUCT_CODE=PRODUCTCODE
                        AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                              AND RISK_PRODUCT_CODE=PRODUCTCODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                                  AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE
                                                                  )
                     AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE);
  
           UPDATE REPORT_HEDGESTATUS SET LIMITPERCENT =   (SELECT  RISK_LIMIT_PERCENT
                    FROM TRSYSTEM012
                    WHERE   RISK_RISK_TYPE=21000017
                     AND RISK_PRODUCT_CODE=PRODUCTCODE
                      AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                              AND RISK_PRODUCT_CODE=PRODUCTCODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                                  AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE
                                                                  )
                     AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE);

         UPDATE REPORT_HEDGESTATUS SET FLUCTALLOWED =   (SELECT RISK_FLUCT_ALLOWED
                    FROM TRSYSTEM012
                    WHERE   RISK_RISK_TYPE=21000017
                     AND RISK_PRODUCT_CODE=PRODUCTCODE
                       AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                              AND RISK_PRODUCT_CODE=PRODUCTCODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                                  AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE
                                                                  )
                     AND RISK_SUBPRODUCT_CODE=SUBPRODUCTCODE);
          
          
  COMMIT;
      EXCEPTION
    WHEN OTHERS THEN
      NUMERROR := SQLCODE;
      VARERROR := SQLERRM;
      VARERROR := GCONST.FNCRETURNERROR('prcHedgeStatusReportPopulate', NUMERROR, VARMESSAGE, 
                      VAROPERATION, VARERROR);


      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);    
 END PRCHEDGESTATUSREPORTPOPULATE; 

 
 PROCEDURE PRCFXFORCASTREPORTPOPULATE(
               FRMDATE IN DATE)
 AS
 TEMPDATE DATE;
 DATTEMP DATE;
 TEMP VARCHAR(20);
 SERIALNUMBER VARCHAR(20);
  NUMERROR NUMBER;
 VAROPERATION        GCONST.GVAROPERATION%TYPE;
 VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
 VARERROR            GCONST.GVARERROR%TYPE;
BEGIN

VARMESSAGE:='prcFxForcastReportPopulate';
DELETE FROM REPORT_FXFORCAST;

    IF (TO_CHAR(FRMDATE,'MM') <=3) THEN

                  TEMPDATE:= '01-apr-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-1);
                  DATTEMP:= '31-MAR-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-0);
                  TEMP:= 'FY'|| TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-1) || '-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-0);
                  SERIALNUMBER:=' ( '|| TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-1) || '-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-0) ||' )';
      ELSE
                  TEMPDATE:= '01-apr-' ||TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-0);
                  DATTEMP:= '31-MAR-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))+1);
                  TEMP:='FY'|| TO_CHAR(FRMDATE,'YY') || '-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))+1);
                  SERIALNUMBER:=' ( '|| TO_CHAR(FRMDATE,'YY') || '-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))+1) || ' )';

     END IF;

       
VAROPERATION:= 'Calculate  Hedge Exposure';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)

          SELECT  1 DISPLAYORDER,
                           'Hedge Exposure' STATUS,POSN_COMPANY_CODE,
                           TO_CHAR(POSN_DUE_DATE,'MON-yy') MATURITYMONTH,
                           TO_CHAR(POSN_DUE_DATE,'YYYYMM') MATURITYMONTHDATE,POSN_CURRENCY_CODE ,
                          ROUND(SUM(POSN_TRANSACTION_AMOUNT),2) AMOUNTFCY1,
                          SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AMOUNTLOCAL1,
                          (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) DATATYPE
              FROM TRSYSTEM997
              WHERE POSN_TRANSACTION_AMOUNT!=0
              AND POSN_FCY_RATE !=0
              AND POSN_PRODUCT_CODE=33300001
              AND POSN_CURRENCY_CODE=30400004
              AND POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                        25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                        25900085,25900074,25900075)
              GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE,
                    TO_CHAR(POSN_DUE_DATE,'MON-yy'), TO_CHAR(POSN_DUE_DATE,'YYYYMM'),
                    (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) ;

VAROPERATION:= 'Calculate  Hedge Rate';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
            SELECT 2 DISPLAYORDER, 'Hedge Rate' STATUS,
                   POSN_COMPANY_CODE, TO_CHAR(POSN_DUE_DATE,'MON-yy') MATURITYMONTH,
                   TO_CHAR(POSN_DUE_DATE,'YYYYMM') MATURITYMONTHDATE,POSN_CURRENCY_CODE,
                          ROUND(SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ 
                                DECODE(SUM(POSN_TRANSACTION_AMOUNT),0,1,SUM(POSN_TRANSACTION_AMOUNT)),2) AMOUNTFCY1,
                           SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) AMOUNTLOCAL1,
                           (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) DATATYPE
              FROM TRSYSTEM997
              WHERE POSN_TRANSACTION_AMOUNT!=0
              AND POSN_FCY_RATE !=0
              AND POSN_PRODUCT_CODE=33300001
             
             AND POSN_CURRENCY_CODE=30400004
              AND POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                          25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                          25900085,25900074,25900075)
              GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE,
                    TO_CHAR(POSN_DUE_DATE,'MON-yy'), TO_CHAR(POSN_DUE_DATE,'YYYYMM') ,
                    (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) ;

VAROPERATION:= 'Calculate  Unhedged Exposure';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
                      

































        SELECT 3 DISPLAYORDER,
                           'Unhedged Exposure' STATUS,POSN_COMPANY_CODE,
                           TO_CHAR(POSN_DUE_DATE,'MON-yy') MATURITYMONTH,
                           TO_CHAR(POSN_DUE_DATE,'YYYYMM') MATURITYMONTHDATE,POSN_CURRENCY_CODE,
                         (( SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                                                25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) 
                                      THEN POSN_TRANSACTION_AMOUNT ELSE 0 END ) -
                          SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                          25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                          25900085,25900074,25900075) THEN POSN_TRANSACTION_AMOUNT ELSE 0 END))) AMOUNTFCY1,                    
                         ( SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                                                25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) 
                                      THEN POSN_TRANSACTION_AMOUNT * POSN_FCY_RATE ELSE 0 END )-
                                      
                          (SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                          25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                          25900085,25900074,25900075) THEN POSN_TRANSACTION_AMOUNT* POSN_FCY_RATE ELSE 0 END)))  AMOUNTLOCAL1,
                                              
                         (CASE WHEN FRMDATE > POSN_DUE_DATE THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) DATATYPE
              FROM TRSYSTEM997
              WHERE POSN_TRANSACTION_AMOUNT!=0
              AND POSN_FCY_RATE !=0
              AND POSN_PRODUCT_CODE=33300001
              AND POSN_CURRENCY_CODE=30400004
              GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE,
                    TO_CHAR(POSN_DUE_DATE,'MON-yy'), TO_CHAR(POSN_DUE_DATE,'YYYYMM'),
                    (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) ;



VAROPERATION:= 'Calculate  Unhedged Forward Rate';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)

      SELECT DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTLOCAL1/AMOUNTFCY1 ,
                      AMOUNTLOCAL1 ,DATATYPE
      FROM   
      (SELECT  4 DISPLAYORDER,
                    'Unhedged Forward Rate' STATUS,POSN_COMPANY_CODE  COMPANYCODE,
                   TO_CHAR(POSN_DUE_DATE,'MON-yy') MATURITYMONTH,
                   TO_CHAR(POSN_DUE_DATE,'YYYYMM') MATURITYMONTHDATE,POSN_CURRENCY_CODE CURRENCYCODE,



            (SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                                  25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) 
                        THEN POSN_TRANSACTION_AMOUNT * POSN_FCY_RATE ELSE 0 END )-
                        
            (SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                            25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                            25900085,25900074,25900075) THEN POSN_TRANSACTION_AMOUNT* POSN_FCY_RATE ELSE 0 END)))AMOUNTLOCAL1 ,
            ((SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                                    25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) 
              THEN POSN_TRANSACTION_AMOUNT ELSE 0 END ) -
             SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                    25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                   25900085,25900074,25900075) 
                        THEN POSN_TRANSACTION_AMOUNT ELSE 0 END))) AMOUNTFCY1,                    
              (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END) DATATYPE
              FROM TRSYSTEM997
              WHERE POSN_TRANSACTION_AMOUNT!=0
              AND POSN_FCY_RATE !=0
              AND POSN_PRODUCT_CODE=33300001
              AND POSN_CURRENCY_CODE=30400004
              GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE,
                    TO_CHAR(POSN_DUE_DATE,'MON-yy'), TO_CHAR(POSN_DUE_DATE,'YYYYMM'),
                    (CASE WHEN FRMDATE > POSN_DUE_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YYYYMM'))BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                               ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(POSN_DUE_DATE,'YY'))+1)||')' END)) ;
            

VAROPERATION:= 'Calculate  NP Payment';
       
      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
                      
              SELECT 5 DISPLAYORDER, 'NP Payment' STATUS,
                              COMPANYCODE,MATURITYMONTH,MATURITYMONTHDATE,CURRENCYCODE,
                              (AMOUNTFCY1) AMOUNTFCY,
                              (AMOUNTLOCAL1)AMOUNTLOCAL,
                              DATATYPE                              
                    FROM (
                    SELECT    CDEL_COMPANY_CODE  COMPANYCODE,
                              TO_CHAR(CDEL_CANCEL_DATE,'MON-yy') MATURITYMONTH,
                              TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM') MATURITYMONTHDATE,
                              DEAL_BASE_CURRENCY CURRENCYCODE,
                              SUM(CDEL_CANCEL_AMOUNT) AMOUNTFCY1,
                              SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE) 
                              - NVL(PANDL.PANDL,0) AMOUNTLOCAL1,
                              (CASE WHEN FRMDATE >= CDEL_CANCEL_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM')) BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                              ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(CDEL_CANCEL_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(CDEL_CANCEL_DATE,'YY'))+1)||')' END) DATATYPE
                      FROM TRTRAN006 B INNER JOIN TRTRAN002 A
                            ON A.TRAD_TRADE_REFERENCE=B.CDEL_TRADE_REFERENCE 
                            INNER JOIN TRTRAN001 C
                            ON B.CDEL_DEAL_NUMBER=C.DEAL_DEAL_NUMBER LEFT OUTER JOIN
                              (SELECT TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM') MATURITYMONTH,SUM(CDEL_PROFIT_LOSS)  PANDL 
                                FROM TRTRAN006 A2, TRTRAN001 B2
                               WHERE CDEL_DEAL_NUMBER= DEAL_DEAL_NUMBER
                                 AND  DEAL_BACKUP_DEAL=33300001
                                 
                                  AND CDEL_CANCEL_DATE BETWEEN TEMPDATE AND FRMDATE
                                  AND DEAL_BASE_CURRENCY=30400004
                                  AND DEAL_OTHER_CURRENCY =30400003
                                  AND CDEL_CANCEL_TYPE=27000001
                                  GROUP BY TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM') ) PANDL
                                ON PANDL.MATURITYMONTH= TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM')
                                    WHERE 
                                    A.TRAD_PRODUCT_CATEGORY=33300001 
                                    AND C.DEAL_BACKUP_DEAL=33300001 
                                    AND B.CDEL_CANCEL_DATE BETWEEN TEMPDATE AND FRMDATE
                                    AND B.CDEL_RECORD_STATUS NOT IN(10200006,10200005) 
                                    AND CDEL_TRADE_REFERENCE IS NOT NULL 
                                    AND DEAL_BASE_CURRENCY=30400004
                                    AND DEAL_RECORD_STATUS NOT IN(10200005,10200006 ) 
                                    
                                   
                        AND CDEL_CANCEL_DATE <= FRMDATE
                     GROUP BY CDEL_COMPANY_CODE,DEAL_BASE_CURRENCY,TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM'),
                              TO_CHAR(CDEL_CANCEL_DATE,'MON-yy'),PANDL.PANDL,
                             (CASE WHEN FRMDATE >= CDEL_CANCEL_DATE  THEN 'Actual'
                               WHEN (TO_NUMBER(TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM')) BETWEEN TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'01') AND TO_NUMBER(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))||'03')) THEN 'Projected' || SERIALNUMBER
                              ELSE 'Projected ' ||'('|| TO_CHAR(TO_NUMBER(TO_CHAR(CDEL_CANCEL_DATE,'YY')))||'-' || TO_CHAR(TO_NUMBER(TO_CHAR(CDEL_CANCEL_DATE,'YY'))+1)||')' END) 
                 UNION ALL   
                  SELECT COMPANYCODE,MATURITYMONTH,MATURITYMONTHDATE,CURRENCYCODE,
                              SUM(AMOUNTFCY) AMOUNTFCY, 
                              SUM(AMOUNTLOCAL) AMOUNTLOCAL,
                              
                              DATATYPE                              
                   FROM REPORT_FXFORCAST
                  WHERE DISPLAYORDER IN (1,3)
                  GROUP BY COMPANYCODE,MATURITYMONTH,MATURITYMONTHDATE,CURRENCYCODE,DATATYPE);




























                 







































VAROPERATION:= 'Calculate  Wt. Avg. Rate';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
                      








                          SELECT  6 DISPLAYORDER, 'Wt. Avg. Rate' STATUS,
                              COMPANYCODE,MATURITYMONTH,MATURITYMONTHDATE,CURRENCYCODE,
                              (SUM(AMOUNTLOCAL)/SUM(DECODE(AMOUNTFCY,0,1,AMOUNTFCY))) AMOUNTFCY,
                              (SUM(AMOUNTLOCAL)) AMOUNTLOCAL,
                              DATATYPE  FROM                
                              (SELECT 6 DISPLAYORDER, 'Wt. Avg. Rate' STATUS,
                              COMPANYCODE,MATURITYMONTH,MATURITYMONTHDATE,CURRENCYCODE,
                              AMOUNTFCY -
                              NVL((SELECT SUM(A.AMOUNTFCY)                            
                                FROM REPORT_FXFORCAST A
                                WHERE A.DISPLAYORDER IN (3)
                                AND A.AMOUNTFCY < 0 AND A.MATURITYMONTH = B.MATURITYMONTH
                                AND A.MATURITYMONTHDATE = B.MATURITYMONTHDATE AND A.DATATYPE = B.DATATYPE
                               AND A.COMPANYCODE=B.COMPANYCODE AND A.CURRENCYCODE = B.CURRENCYCODE),0)
                               AMOUNTFCY,
                              AMOUNTLOCAL
                              -
                               NVL((SELECT SUM(A.AMOUNTLOCAL)                            
                                FROM REPORT_FXFORCAST A
                                WHERE A.DISPLAYORDER IN (3)
                                AND A.AMOUNTFCY < 0 AND A.MATURITYMONTH = B.MATURITYMONTH
                                AND A.MATURITYMONTHDATE = B.MATURITYMONTHDATE AND A.DATATYPE = B.DATATYPE
                               AND A.COMPANYCODE=B.COMPANYCODE AND A.CURRENCYCODE = B.CURRENCYCODE),0)
                              AS AMOUNTLOCAL,
                              DATATYPE                              
               FROM REPORT_FXFORCAST B
              WHERE B.DISPLAYORDER=5)   GROUP BY COMPANYCODE,MATURITYMONTH,MATURITYMONTHDATE,CURRENCYCODE,DISPLAYORDER,STATUS,DATATYPE  ;



VAROPERATION:= 'Calculate TOTAL Wt. Avg. Rate';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
          SELECT 7 DISPLAYORDER, 'TOTAL Wt. Avg. Rate' STATUS,
                        COMPANYCODE, TO_CHAR(MAX(TO_DATE('01-' ||MATURITYMONTH)),'MON-yy') MATURITYMONTH,
                        TO_CHAR(MAX(TO_DATE('01-' || MATURITYMONTH)),'YYYYMM') MATURITYMONTHDATE,CURRENCYCODE,
                       ROUND( SUM(AMOUNTLOCAL)/DECODE(SUM(AMOUNTFCY),0,1,SUM(AMOUNTFCY)),2) AMOUNTFCY,ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL,
                       DATATYPE
              FROM REPORT_FXFORCAST
              WHERE DISPLAYORDER=5                              
              GROUP BY COMPANYCODE,CURRENCYCODE,DATATYPE;   



VAROPERATION:= 'Calculate Total:Total NP Payments';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
          SELECT 8 DISPLAYORDER, 'Total NP payments' STATUS,
                        COMPANYCODE, TO_CHAR(MAX(TO_DATE('01-' || MATURITYMONTH)),'MON-yy') MATURITYMONTH,
                        TO_CHAR(MAX(TO_DATE('01-' || MATURITYMONTH)),'YYYYMM') MATURITYMONTHDATE,CURRENCYCODE,
                       ROUND(SUM(AMOUNTFCY),2) AMOUNTFCY,ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL,
                       DATATYPE
              FROM REPORT_FXFORCAST
              WHERE DISPLAYORDER=5                              
              GROUP BY COMPANYCODE,CURRENCYCODE,DATATYPE;              
              

 COMMIT;
 DATTEMP:= ADD_MONTHS(DATTEMP,24);
    
    VAROPERATION:= 'Calculate Total:1';  

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
          SELECT       DISPLAYORDER, STATUS STATUS,
                        COMPANYCODE, 'Total' MATURITYMONTH,
                        TO_CHAR(DATTEMP,'YYYYMM') MATURITYMONTHDATE,CURRENCYCODE,
                       ROUND(SUM(AMOUNTFCY),2) AMOUNTFCY,ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL,
                       'Total'
              FROM REPORT_FXFORCAST
              WHERE DISPLAYORDER IN (1,3,5,8)  
              GROUP BY COMPANYCODE,CURRENCYCODE,DISPLAYORDER,STATUS;

     
    VAROPERATION:= 'Calculate Total:2';

      INSERT INTO REPORT_FXFORCAST (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL ,DATATYPE)
          SELECT      DECODE(DISPLAYORDER,1,2,3,4,5,6,8,7),
                      DECODE(STATUS,'Hedge Exposure','Hedge Rate','Unhedged Exposure','Unhedged Forward Rate',
                                    'NP Payment','Wt. Avg. Rate','Total NP payments','TOTAL Wt. Avg. Rate') ,
                        COMPANYCODE, 'Total' MATURITYMONTH,
                        TO_CHAR(DATTEMP,'YYYYMM') MATURITYMONTHDATE,CURRENCYCODE,
                       ROUND(SUM(AMOUNTLOCAL)/DECODE(SUM(AMOUNTFCY),0,1,SUM(AMOUNTFCY)),2) AMOUNTFCY,ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL,
                       'Total'
              FROM REPORT_FXFORCAST
              WHERE DISPLAYORDER IN (1,3,5,8)    
              AND MATURITYMONTH !='Total'
              GROUP BY COMPANYCODE,CURRENCYCODE,DISPLAYORDER,STATUS,DATTEMP;        
          
    
    COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
      NUMERROR := SQLCODE;
      VARERROR := SQLERRM;
      VARERROR := GCONST.FNCRETURNERROR('prcFxForcastReportPopulate', NUMERROR, VARMESSAGE, 
                      VAROPERATION, VARERROR);


      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);    
 END PRCFXFORCASTREPORTPOPULATE;
 PROCEDURE PRCFOREXSUMPRODWISEPOPULATE(
             VARUSERID IN VARCHAR,
             FRMDATE IN DATE,
             PRODUCTCODE IN NUMBER,
             SUBPRODUCTCODE IN NUMBER)
AS
  NUMERROR NUMBER(10);
  VAROPERATION        GCONST.GVAROPERATION%TYPE;
  VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
  VARERROR            GCONST.GVARERROR%TYPE;
BEGIN 
       NUMERROR :=  PKGFOREXPROCESS.FNCPOSITIONGENERATE(VARUSERID,FRMDATE);COMMIT;   
      
        PKGREPORTPROGRAMS.PRCCALCULATEGAPEXPOSURE(FRMDATE,5,PRODUCTCODE,33899999);
        
          DELETE FROM  REPORT_FOREXSUMMARYPRODUCTWISE;

 VAROPERATION :='Inserting Exposure from trsystem970 temp table';
 

      INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
      SELECT 1 DISPLAYORDER,'Exposure' TRANSTYPE,
                   HEDG_PRODUCT_CODE PRODUCTCODE,
                   33899999,
                   HEDG_COMPANY_CODE COMPANY,
                   HEDG_CURRENCY_CODE CURRENCYCODE,
                   SUM(HEDG_MON_FORWARD1)FORWARD1,
                   SUM(HEDG_MON_FORWARD2)FORWARD2,
                   SUM(HEDG_MON_FORWARD3)FORWARD3,
                   SUM(HEDG_MON_FORWARD4)FORWARD4,
                   SUM(HEDG_MON_FORWARD5)FORWARD5,
                   SUM(HEDG_MON_FORWARD6)FORWARD6,
                   SUM(HEDG_MON_FORWARD7)FORWARD7,
                   SUM(HEDG_MON_FORWARD8)FORWARD8,
                   SUM(HEDG_MON_FORWARD9)FORWARD9,
                   SUM(HEDG_MON_FORWARD10)FORWARD10,
                   SUM(HEDG_MON_FORWARD11)FORWARD11,
                   SUM(HEDG_MON_FORWARD12)FORWARD12
























           FROM TRSYSTEM970
           WHERE HEDG_EXPOSURE_TYPE IN ('Import','Export')  AND HEDG_CALCULATION_TYPE='HSTATPRODUCTWISE'
            AND HEDG_DATE_ASON=FRMDATE
            GROUP BY HEDG_PRODUCT_CODE,HEDG_COMPANY_CODE ,HEDG_CURRENCY_CODE;
            

      INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
      SELECT 2 DISPLAYORDER,'Hedged' TRANSTYPE, 
                HEDG_PRODUCT_CODE PRODUCTCODE,
                33899999 SUBPRODUCTCODE,
                 HEDG_COMPANY_CODE  COMPANY,
                  HEDG_CURRENCY_CODE  CURRENCYCODE,
                   SUM(HEDG_MON_FORWARD1)FORWARD1,
                   SUM(HEDG_MON_FORWARD2)FORWARD2,
                   SUM(HEDG_MON_FORWARD3)FORWARD3,
                   SUM(HEDG_MON_FORWARD4)FORWARD4,
                   SUM(HEDG_MON_FORWARD5)FORWARD5,
                   SUM(HEDG_MON_FORWARD6)FORWARD6,
                   SUM(HEDG_MON_FORWARD7)FORWARD7,
                   SUM(HEDG_MON_FORWARD8)FORWARD8,
                   SUM(HEDG_MON_FORWARD9)FORWARD9,
                   SUM(HEDG_MON_FORWARD10)FORWARD10,
                   SUM(HEDG_MON_FORWARD11)FORWARD11,
                   SUM(HEDG_MON_FORWARD12)FORWARD12

























        FROM TRSYSTEM970
         WHERE HEDG_EXPOSURE_TYPE IN('Hedge Buy','Hedge Sell') AND HEDG_CALCULATION_TYPE='HSTATPRODUCTWISE' 
         AND HEDG_DATE_ASON=FRMDATE
         GROUP BY HEDG_PRODUCT_CODE,HEDG_COMPANY_CODE,HEDG_CURRENCY_CODE;





















































         

 VAROPERATION :='Inserting Hedged Rate from trsystem970 temp table';
 
      INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
        SELECT 4 DISPLAYORDER,'Hedged Rate' TRANSTYPE,  
                  HEDG_PRODUCT_CODE  PRODUCTCODE,
                  HEDG_SUBPRODUCT_CODE  SUBPRODUCTCODE,
                  HEDG_COMPANY_CODE  COMPANY,
                  HEDG_CURRENCY_CODE  CURRENCYCODE,
                 HEDG_BENCHMARK_RATE1 FORWARD1,
                 HEDG_BENCHMARK_RATE2 FORWARD2,
                 HEDG_BENCHMARK_RATE3 FORWARD3,
                 HEDG_BENCHMARK_RATE4 FORWARD4,
                 HEDG_BENCHMARK_RATE5 FORWARD5,
                 HEDG_BENCHMARK_RATE6 FORWARD6,
                 HEDG_BENCHMARK_RATE7 FORWARD7,
                 HEDG_BENCHMARK_RATE8 FORWARD8,
                 HEDG_BENCHMARK_RATE9 FORWARD9,
                 HEDG_BENCHMARK_RATE10 FORWARD10,
                 HEDG_BENCHMARK_RATE11 FORWARD11,
                 HEDG_BENCHMARK_RATE12 FORWARD12
        FROM TRSYSTEM970
        WHERE HEDG_EXPOSURE_TYPE IN('Hedge Buy','Hedge Sell') AND HEDG_CALCULATION_TYPE='HSTATPRODUCTWISE' 
        AND HEDG_DATE_ASON=FRMDATE;
        

 VAROPERATION :='Inserting % Hedged Rate from FOREXSUMMARYPRODUCTWISE temp table';
 
      INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
         SELECT 3 DISPLAYORDER,' % Hedged' TRANSTYPE,
                NVL(EXPOSURE.PRODUCTCODE,HEDGE.PRODUCTCODE) PRODUCTCODE,
                NVL(EXPOSURE.SUBPRODUCTCODE,HEDGE.SUBPRODUCTCODE) SUBPRODUCTCODE,
                NVL(EXPOSURE.COMPANY,HEDGE.COMPANY) COMPANY ,
                NVL(EXPOSURE.CURRENCYCODE,HEDGE.CURRENCYCODE)CURRENCYCODE,
              
                (CASE WHEN(EXPOSURE.FORWARD1 IS NULL ) OR (EXPOSURE.FORWARD1=0) THEN 0 
                ELSE (HEDGE.FORWARD1/NVL(EXPOSURE.FORWARD1,1))END)*100  FORWARD1,
                (CASE WHEN(EXPOSURE.FORWARD2 IS NULL ) OR (EXPOSURE.FORWARD2=0) THEN 0
                ELSE (HEDGE.FORWARD2/NVL(EXPOSURE.FORWARD2,1))END)*100  FORWARD2,
                (CASE WHEN(EXPOSURE.FORWARD3 IS NULL ) OR (EXPOSURE.FORWARD3=0) THEN 0
                ELSE (HEDGE.FORWARD3/NVL(EXPOSURE.FORWARD3,1))END)*100  FORWARD3,
                (CASE WHEN(EXPOSURE.FORWARD4 IS NULL ) OR (EXPOSURE.FORWARD4=0) THEN 0
                ELSE (HEDGE.FORWARD4/NVL(EXPOSURE.FORWARD4,1))END)*100  FORWARD4,
                (CASE WHEN(EXPOSURE.FORWARD5 IS NULL ) OR (EXPOSURE.FORWARD5=0) THEN 0
                ELSE (HEDGE.FORWARD5/NVL(EXPOSURE.FORWARD5,1))END)*100  FORWARD5,
                (CASE WHEN(EXPOSURE.FORWARD6 IS NULL ) OR (EXPOSURE.FORWARD6=0) THEN 0
                ELSE (HEDGE.FORWARD6/NVL(EXPOSURE.FORWARD6,1))END)*100  FORWARD6,
                (CASE WHEN(EXPOSURE.FORWARD7 IS NULL ) OR (EXPOSURE.FORWARD7=0) THEN 0
                ELSE (HEDGE.FORWARD7/NVL(EXPOSURE.FORWARD7,1))END)*100  FORWARD7,
                (CASE WHEN(EXPOSURE.FORWARD8 IS NULL ) OR (EXPOSURE.FORWARD8=0) THEN 0
                ELSE (HEDGE.FORWARD8/NVL(EXPOSURE.FORWARD8,1))END)*100  FORWARD8,
                (CASE WHEN(EXPOSURE.FORWARD9 IS NULL ) OR (EXPOSURE.FORWARD9=0) THEN 0
                ELSE (HEDGE.FORWARD9/NVL(EXPOSURE.FORWARD9,1))END)*100  FORWARD9,
                (CASE WHEN(EXPOSURE.FORWARD10 IS NULL ) OR (EXPOSURE.FORWARD10=0) THEN 0
                ELSE (HEDGE.FORWARD10/NVL(EXPOSURE.FORWARD10,1))END)*100  FORWARD10,
                (CASE WHEN(EXPOSURE.FORWARD11 IS NULL ) OR (EXPOSURE.FORWARD11=0) THEN 0
                ELSE (HEDGE.FORWARD11/NVL(EXPOSURE.FORWARD11,1))END)*100  FORWARD11,
                (CASE WHEN(EXPOSURE.FORWARD12 IS NULL ) OR (EXPOSURE.FORWARD12=0) THEN 0
                ELSE (HEDGE.FORWARD12/NVL(EXPOSURE.FORWARD12,1))END)*100  FORWARD12
        FROM  (SELECT  *  FROM REPORT_FOREXSUMMARYPRODUCTWISE
                WHERE TRANSTYPE='Exposure')EXPOSURE  FULL OUTER JOIN
              (SELECT * FROM REPORT_FOREXSUMMARYPRODUCTWISE
                WHERE TRANSTYPE ='Hedged')HEDGE 
          ON HEDGE.PRODUCTCODE= EXPOSURE.PRODUCTCODE
         
           AND HEDGE.COMPANY= EXPOSURE.COMPANY
           AND HEDGE.CURRENCYCODE= EXPOSURE.CURRENCYCODE;
          
          
   VAROPERATION :='Inserting Hedge - Policy  from FOREXSUMMARYPRODUCTWISE temp table';
          
        INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)

          SELECT 5 DISPLAYORDER,'% Hedge - Policy ( '|| FNCGETRISKLIMITS(21000017,HEDG_PRODUCT_CODE,NULL,FRMDATE) || ')' TRANSTYPE, 
            HEDG_PRODUCT_CODE  PRODUCTCODE, 
            HEDG_SUBPRODUCT_CODE  SUBPRODUCTCODE,
            HEDG_COMPANY_CODE  COMPANY,
            HEDG_CURRENCY_CODE  CURRENCYCODE,
           
                 HPOLICY FORWARD1, HPOLICY FORWARD2,HPOLICY FORWARD3,
                 HPOLICY FORWARD4,HPOLICY FORWARD5,HPOLICY FORWARD6,
                 HPOLICY FORWARD7,HPOLICY FORWARD8,HPOLICY FORWARD9,
                 HPOLICY FORWARD10,HPOLICY FORWARD11, HPOLICY FORWARD12
         FROM (SELECT DISTINCT HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
                      HEDG_CURRENCY_CODE,( SELECT AVG(RISK_LIMIT_PERCENT) 
                              FROM TRSYSTEM012
                             WHERE RISK_RISK_TYPE=21000017
                               AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                                 AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                             
                                                                  )
                            
                               ) HPOLICY 
               FROM  TRSYSTEM970
               WHERE HEDG_EXPOSURE_TYPE IN('Import','Export') 
                AND HEDG_CALCULATION_TYPE='HSTATPRODUCTWISE'
                AND HEDG_DATE_ASON=FRMDATE)D;    
  

    VAROPERATION :='Inserting Unhedged Exposure (100%)  from FOREXSUMMARYPRODUCTWISE temp table';
    
      INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
            
        SELECT 7 DISPLAYORDER,'Unhedged Exposure (100%)' TRANSTYPE,
                 NVL(EXPOSURE.PRODUCTCODE,HEDGE.PRODUCTCODE) PRODUCTCODE,
                 NVL(EXPOSURE.SUBPRODUCTCODE,HEDGE.SUBPRODUCTCODE) SUBPRODUCTCODE,
                 NVL(EXPOSURE.COMPANY,HEDGE.COMPANY) COMPANY ,
                 NVL(EXPOSURE.CURRENCYCODE,HEDGE.CURRENCYCODE)CURRENCYCODE,
                 (NVL(EXPOSURE.FORWARD1,0)- NVL(HEDGE.FORWARD1,0)) FORWARD1,
                 (NVL(EXPOSURE.FORWARD2,0)- NVL(HEDGE.FORWARD2,0)) FORWARD2,
                 (NVL(EXPOSURE.FORWARD3,0)- NVL(HEDGE.FORWARD3,0)) FORWARD3,
                 (NVL(EXPOSURE.FORWARD4,0)- NVL(HEDGE.FORWARD4,0)) FORWARD4,
                 (NVL(EXPOSURE.FORWARD5,0)- NVL(HEDGE.FORWARD5,0)) FORWARD5,
                 (NVL(EXPOSURE.FORWARD6,0)- NVL(HEDGE.FORWARD6,0)) FORWARD6,
                 (NVL(EXPOSURE.FORWARD7,0)- NVL(HEDGE.FORWARD7,0)) FORWARD7,
                 (NVL(EXPOSURE.FORWARD8,0)- NVL(HEDGE.FORWARD8,0)) FORWARD8,
                 (NVL(EXPOSURE.FORWARD9,0)- NVL(HEDGE.FORWARD9,0)) FORWARD9,
                 (NVL(EXPOSURE.FORWARD10,0)- NVL(HEDGE.FORWARD10,0)) FORWARD10,
                 (NVL(EXPOSURE.FORWARD11,0)- NVL(HEDGE.FORWARD11,0)) FORWARD11,
                 (NVL(EXPOSURE.FORWARD12,0)- NVL(HEDGE.FORWARD12,0)) FORWARD12
        FROM  (SELECT  *  FROM REPORT_FOREXSUMMARYPRODUCTWISE
                WHERE TRANSTYPE='Exposure')EXPOSURE  FULL OUTER JOIN
              (SELECT * FROM REPORT_FOREXSUMMARYPRODUCTWISE
                WHERE TRANSTYPE ='Hedged')HEDGE 
          ON HEDGE.PRODUCTCODE= EXPOSURE.PRODUCTCODE
         
           AND HEDGE.COMPANY= EXPOSURE.COMPANY
           AND HEDGE.CURRENCYCODE= EXPOSURE.CURRENCYCODE;

 VAROPERATION :='Inserting Addt Cover Against Policy (60%) from FOREXSUMMARYPRODUCTWISE temp table';
 
 
      INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE,FORWARD1,FORWARD2,
            FORWARD3,FORWARD4,FORWARD5,FORWARD6,FORWARD7,FORWARD8,
            FORWARD9,FORWARD10,FORWARD11,FORWARD12)
            
      SELECT   6 DISPLAYORDER,'Addt Cover Against Policy ( ' || HPOLICY.HPOLICY || ' %)' TRANSTYPE,
                 HEDGEPER.PRODUCTCODE, HEDGEPER.SUBPRODUCTCODE, HEDGEPER.COMPANY,
                 HEDGEPER.CURRENCYCODE,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD1)* EXPOSURE.FORWARD1)/100 FORWARD1,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD2)* EXPOSURE.FORWARD2)/100 FORWARD2,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD3)* EXPOSURE.FORWARD3)/100 FORWARD3,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD4)* EXPOSURE.FORWARD4)/100 FORWARD4,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD5)* EXPOSURE.FORWARD5)/100 FORWARD5,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD6)* EXPOSURE.FORWARD6)/100 FORWARD6,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD7)* EXPOSURE.FORWARD7)/100 FORWARD7,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD8)* EXPOSURE.FORWARD8)/100 FORWARD8,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD9)* EXPOSURE.FORWARD9)/100 FORWARD9,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD10)* EXPOSURE.FORWARD10)/100 FORWARD10,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD11)* EXPOSURE.FORWARD12)/100 FORWARD11,
                 ((HPOLICY.HPOLICY-HEDGEPER.FORWARD12)* EXPOSURE.FORWARD12)/100 FORWARD12
            FROM 
            ( SELECT * FROM REPORT_FOREXSUMMARYPRODUCTWISE 
               WHERE TRANSTYPE=' % Hedged') HEDGEPER INNER JOIN 
            (SELECT DISTINCT HEDG_PRODUCT_CODE PRODUCTCODE,HEDG_SUBPRODUCT_CODE SUBPRODUCTCODE,HEDG_COMPANY_CODE COMPANY,
                          HEDG_CURRENCY_CODE CURRENCYCODE,( SELECT AVG(RISK_LIMIT_PERCENT) 
                                  FROM TRSYSTEM012
                                 WHERE RISK_RISK_TYPE=21000017
                                   AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                    AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                                  AND RISK_PRODUCT_CODE=HEDG_PRODUCT_CODE
                                                                AND  RISK_EFFECTIVE_DATE<= FRMDATE
                                                                
                                                                  )
                                  
                                  ) HPOLICY 
                   FROM  TRSYSTEM970
                   WHERE HEDG_EXPOSURE_TYPE IN('Import','Export') 
                    AND HEDG_CALCULATION_TYPE='HSTATPRODUCTWISE') HPOLICY      
               ON HEDGEPER.PRODUCTCODE= HPOLICY.PRODUCTCODE
             
               AND HEDGEPER.COMPANY= HPOLICY.COMPANY
               AND HEDGEPER.CURRENCYCODE= HPOLICY.CURRENCYCODE
           INNER JOIN 
             ( SELECT * FROM REPORT_FOREXSUMMARYPRODUCTWISE
                WHERE TRANSTYPE='Exposure') EXPOSURE
             ON HEDGEPER.PRODUCTCODE= EXPOSURE.PRODUCTCODE
            
               AND HEDGEPER.COMPANY= EXPOSURE.COMPANY
               AND HEDGEPER.CURRENCYCODE= EXPOSURE.CURRENCYCODE ;
                
        
   VAROPERATION :='Setp 7';
       
        INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 1 , 'Exposure', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
      
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =1);
         
        
 VAROPERATION :='Setp 8';
        
        INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 2 , 'Hedged', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
       
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =2);

 VAROPERATION :='Setp 9';
 
       INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 3 , ' % Hedged', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
    
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =3);
          
 VAROPERATION :='Setp 10';
 
       INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 4 , 'Hedged Rate', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
     
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =4);

 VAROPERATION :='Setp 11';
 
                   
        INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 5 , '% Hedge - Policy', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
       
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
          AND DISPLAYORDER =5);
 VAROPERATION :='Setp 12';
 
       INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 6 , 'Addt Cover Against Policy ', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
      
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
      
          AND DISPLAYORDER =6);

 VAROPERATION :='Setp 13';
 
       INSERT INTO REPORT_FOREXSUMMARYPRODUCTWISE(DISPLAYORDER,TRANSTYPE,PRODUCTCODE,
            SUBPRODUCTCODE,COMPANY,CURRENCYCODE)
       SELECT DISTINCT 7 , 'Unhedged Exposure (100%)', PRODUCTCODE,SUBPRODUCTCODE, 
               COMPANY,CURRENCYCODE
          FROM REPORT_FOREXSUMMARYPRODUCTWISE MAINT
         WHERE NOT EXISTS
        (SELECT PRODUCTCODE,SUBPRODUCTCODE 
         FROM REPORT_FOREXSUMMARYPRODUCTWISE SUBT
        WHERE MAINT.PRODUCTCODE= SUBT.PRODUCTCODE
     
          AND MAINT.CURRENCYCODE= SUBT.CURRENCYCODE
          AND MAINT.COMPANY= SUBT.COMPANY
        
          AND DISPLAYORDER =7);
    
     VAROPERATION :='Setp 14';
      
         
        UPDATE REPORT_FOREXSUMMARYPRODUCTWISE  SET FORWARD1=ROUND((FORWARD1/1000000),2),
               FORWARD2 = ROUND(FORWARD2/1000000,2),
               FORWARD3=ROUND(FORWARD3/1000000,2),
               FORWARD4 =ROUND(FORWARD4/1000000,2),
               FORWARD5 = ROUND(FORWARD5/1000000,2),
               FORWARD6 =ROUND(FORWARD6/1000000,2),
               FORWARD7 =ROUND(FORWARD7/1000000,2),
               FORWARD8 =ROUND(FORWARD8/1000000,2),
               FORWARD9 =ROUND(FORWARD9/1000000,2),
               FORWARD10 = ROUND(FORWARD10/1000000,2),
               FORWARD11 =ROUND(FORWARD11/1000000,2),
               FORWARD12 = ROUND(FORWARD12/1000000,2)
        WHERE DISPLAYORDER IN ( 1,2,6,7);
  
 VAROPERATION :='Setp 15';
         COMMIT;
         UPDATE REPORT_FOREXSUMMARYPRODUCTWISE SET TOTAL =
                 (SELECT (CASE WHEN (TRANSTYPE='Exposure') OR (TRANSTYPE='Hedged') 
                     OR (TRANSTYPE='Unhedged Exposure (100%)') 
                     OR (TRANSTYPE LIKE 'Addt Cover Against Policy%') THEN 
                 (FORWARD1+FORWARD2+FORWARD3+FORWARD4+FORWARD5+FORWARD6+FORWARD7+FORWARD8+FORWARD9+FORWARD10+FORWARD11+FORWARD12 )
                  WHEN (TRANSTYPE=' % Hedged') THEN
                         FNCGETHEDGEPERCENT(FRMDATE,'HSTATPRODUCTWISE',PRODUCTCODE,NULL,CURRENCYCODE)
                         
                 WHEN INSTR(TRANSTYPE, '% Hedge - Policy') >0 THEN 
                    B.LIMITPERCENT
                 WHEN (TRANSTYPE='Hedged Rate') THEN 
                          FNCGETHEDGEINGRATEAVG(FRMDATE,'HSTATPRODUCTWISE',PRODUCTCODE,NULL,CURRENCYCODE)


                   ELSE NULL 
                   END ) FROM REPORT_FOREXSUMMARYPRODUCTWISE A LEFT OUTER JOIN 
                               (SELECT RISK_PRODUCT_CODE,AVG(RISK_LIMIT_PERCENT) LIMITPERCENT
                               
                               FROM TRSYSTEM012 A  
                               WHERE RISK_RISK_TYPE=21000017
                                
                               AND A.RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012 B
                                                                  WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                                AND B.RISK_PRODUCT_CODE=A.RISK_PRODUCT_CODE
                                                                AND  B.RISK_EFFECTIVE_DATE<= FRMDATE
                                                            
                                                                  )
                                    GROUP BY RISK_PRODUCT_CODE) B
                        
                         ON B.RISK_PRODUCT_CODE=A.PRODUCTCODE 
                      
                   WHERE REPORT_FOREXSUMMARYPRODUCTWISE.PRODUCTCODE= A.PRODUCTCODE
                     AND REPORT_FOREXSUMMARYPRODUCTWISE.SUBPRODUCTCODE= A.SUBPRODUCTCODE
                     AND REPORT_FOREXSUMMARYPRODUCTWISE.CURRENCYCODE= A.CURRENCYCODE
                     AND REPORT_FOREXSUMMARYPRODUCTWISE.TRANSTYPE= A.TRANSTYPE);
        
        VAROPERATION :='updating trsystem012 Rate  into Report_HedgeStatus';
           UPDATE REPORT_FOREXSUMMARYPRODUCTWISE SET LIMITRANGE =   (SELECT       
                    AVG(RISK_LIMIT_PERCENT)  || ( CASE WHEN (AVG(RISK_LIMIT_PERCENT) != AVG(RISK_FLUCT_ALLOWED)) THEN 
                                                     ' - ' ||  AVG(RISK_FLUCT_ALLOWED) || ' %' ELSE ' %' END) 
                    FROM TRSYSTEM012
                    WHERE   RISK_RISK_TYPE=21000017
                     AND RISK_PRODUCT_CODE=PRODUCTCODE
                        AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                              AND RISK_PRODUCT_CODE=PRODUCTCODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                             
                                                                  )
                   
                     );
  VAROPERATION :='Setp 16';
  
           UPDATE REPORT_FOREXSUMMARYPRODUCTWISE SET LIMITPERCENT =   (SELECT  AVG(RISK_LIMIT_PERCENT)
                    FROM TRSYSTEM012
                    WHERE   RISK_RISK_TYPE=21000017
                     AND RISK_PRODUCT_CODE=PRODUCTCODE
                      AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                              AND RISK_PRODUCT_CODE=PRODUCTCODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                                
                                                                  )
                 
                     );

 VAROPERATION :='Setp 17';
 
         UPDATE REPORT_FOREXSUMMARYPRODUCTWISE SET FLUCTALLOWED =   (SELECT AVG(RISK_FLUCT_ALLOWED)
                    FROM TRSYSTEM012
                    WHERE   RISK_RISK_TYPE=21000017
                     AND RISK_PRODUCT_CODE=PRODUCTCODE
                       AND  RISK_EFFECTIVE_DATE = (SELECT MAX(RISK_EFFECTIVE_DATE) 
                                                                 FROM TRSYSTEM012
                                                                WHERE  
                                                                RISK_RISK_TYPE=21000017
                                                              AND RISK_PRODUCT_CODE=PRODUCTCODE
                                                                AND RISK_EFFECTIVE_DATE<= FRMDATE
                                                               
                                                                  )
                   
                     );
          
          
  COMMIT;

      EXCEPTION
    WHEN OTHERS THEN
      NUMERROR := SQLCODE;
      VARERROR := SQLERRM;
      VARERROR := GCONST.FNCRETURNERROR('prcforexsumprodwisePopulate', NUMERROR, VARMESSAGE, 
                      VAROPERATION, VARERROR);


      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);    
 END PRCFOREXSUMPRODWISEPOPULATE;
 
 
PROCEDURE PRCREPORT_M_YEARLYEXP
 ( FRMDATE IN DATE,
   TEMPDATE IN DATE,
   DATTEMP IN DATE)
 AS
 TOTALPANDL NUMBER(15,2);
 NUMERROR NUMBER;
 VAROPERATION        GCONST.GVAROPERATION%TYPE;
 VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
 VARERROR            GCONST.GVARERROR%TYPE;
 BEGIN 
    DELETE FROM  REPORT_MONTHLYREPORT_YEARLYEXP; COMMIT;
    VAROPERATION:= 'Process Start of Cal Yearly Exp'; 
      SELECT SUM(CDEL_PROFIT_LOSS)  
        INTO TOTALPANDL
        FROM TRTRAN006 A2, TRTRAN001 B2
       WHERE CDEL_DEAL_NUMBER= DEAL_DEAL_NUMBER
          AND  DEAL_BACKUP_DEAL=33300001
          AND  CDEL_CANCEL_DATE BETWEEN TEMPDATE AND FRMDATE
         
          AND DEAL_BASE_CURRENCY=30400004
          AND DEAL_OTHER_CURRENCY =30400003
          AND CDEL_CANCEL_TYPE=27000001;
   
   VAROPERATION:= 'Step1 Settled Exposure';                               
      INSERT INTO REPORT_MONTHLYREPORT_YEARLYEXP( ORDER1,
      STATUS1 , TYPEOFTRANS1,COMPANYCODE,
       CURRENCYCODE ,BASEAMOUNT1 ,BASEAMOUNTINR,EXCHANGERATE)
       
       SELECT '1' ORDER1, 'Settled Exposure (A)' STATUS1,'Settled Exposure (A)' TYPEOFTRANS1, 
            CDEL_COMPANY_CODE  COMPANYCODE1, DEAL_BASE_CURRENCY CURRENCYCODE,
            SUM(CDEL_CANCEL_AMOUNT) BASEAMOUNT1,
            (SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE)-NVL(TOTALPANDL,0)) BASEAMOUNTINR,
             ROUND((SUM(CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE)- NVL(TOTALPANDL,0))/ SUM(CDEL_CANCEL_AMOUNT),2) EXCHANGERATE1
       FROM TRTRAN006 B LEFT OUTER JOIN 
            TRTRAN001 C ON B.CDEL_DEAL_NUMBER=C.DEAL_DEAL_NUMBER
             LEFT OUTER JOIN  TRTRAN002 A 
            ON A.TRAD_TRADE_REFERENCE=B.CDEL_TRADE_REFERENCE
        WHERE A.TRAD_PRODUCT_CATEGORY=33300001 
        AND C.DEAL_BACKUP_DEAL=33300001 
        AND B.CDEL_CANCEL_DATE BETWEEN TEMPDATE AND FRMDATE
        AND B.CDEL_RECORD_STATUS NOT IN(10200006,10200005) 
        
        AND B.CDEL_TRADE_REFERENCE IS NOT NULL 
         AND C.DEAL_BASE_CURRENCY=30400004
      GROUP BY CDEL_COMPANY_CODE,DEAL_BASE_CURRENCY;
 
    VAROPERATION:= 'Step2 Hedge Exposure';   
    
      INSERT INTO REPORT_MONTHLYREPORT_YEARLYEXP( ORDER1,
      STATUS1 , TYPEOFTRANS1,COMPANYCODE,
       CURRENCYCODE ,BASEAMOUNT1 ,BASEAMOUNTINR,EXCHANGERATE)
       
       SELECT '2' ORDER1, 'Hedged Exposure (B)' STATUS1, 'Hedged Exposure (B)' TYPEOFTRANS1, 
                    POSN_COMPANY_CODE  COMPANYCODE,
                    POSN_CURRENCY_CODE CURRENCYCODE,
                    SUM(POSN_TRANSACTION_AMOUNT) BASEAMOUNT1,
                    SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE) BASEAMOUNTINR,
                    ROUND(SUM(POSN_TRANSACTION_AMOUNT*POSN_FCY_RATE)/ SUM(POSN_TRANSACTION_AMOUNT),2) EXCHANGERATE1
        FROM TRSYSTEM997
        WHERE POSN_TRANSACTION_AMOUNT!=0
        AND POSN_FCY_RATE !=0
        AND POSN_PRODUCT_CODE=33300001
        AND POSN_DUE_DATE  BETWEEN TEMPDATE AND DATTEMP
        AND POSN_ACCOUNT_CODE IN (25900011,25900012,25900061,25900062) 
        GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE;
              
      VAROPERATION:= 'Step4 unHedge Exposure';             
      INSERT INTO REPORT_MONTHLYREPORT_YEARLYEXP( ORDER1,
         STATUS1 , TYPEOFTRANS1,COMPANYCODE,
         CURRENCYCODE ,BASEAMOUNT1 ,BASEAMOUNTINR,EXCHANGERATE)
         
         
          SELECT '4' ORDER1,'Un Hedged Exposure (C)' STATUS1, 'Un Hedged Exposure (C)' TYPEOFTRANS1, 
              COMPANYCODE,CURRENCYCODE, AMOUNTFCY1, AMOUNTLOCAL1,
              ROUND(AMOUNTLOCAL1/AMOUNTFCY1,2) 
          FROM 
              (SELECT 3 DISPLAYORDER,
                                 'Unhedged Exposure' STATUS,POSN_COMPANY_CODE COMPANYCODE,POSN_CURRENCY_CODE CURRENCYCODE,
                               ((SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                                                      25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) 
                                            THEN POSN_TRANSACTION_AMOUNT ELSE 0 END ) -
                                SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                                25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                                25900085,25900074,25900075) THEN POSN_TRANSACTION_AMOUNT ELSE 0 END))) AMOUNTFCY1,                    
                               ((SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900001,25900002,25900003,25900004,25900005,25900013,25900017,25900024,
                                                                      25900051,25900052,25900053,25900071,25900072,25900073,25900077,25900086) 
                                            THEN POSN_TRANSACTION_AMOUNT * (PKGFOREXPROCESS.FNCGETRATE(POSN_CURRENCY_CODE,30400003,FRMDATE,0,0, LAST_DAY(POSN_DUE_DATE),0)) ELSE 0 END ) -
                                SUM ( CASE WHEN POSN_ACCOUNT_CODE IN (25900018,25900019,25900020,25900021,25900022,25900023,
                                                                25900014,25900015,25900011,25900012,25900061,25900062,25900078,25900079,25900082,25900083,25900084,
                                                                25900085,25900074,25900075) THEN POSN_TRANSACTION_AMOUNT* 
                                                    PKGFOREXPROCESS.FNCGETRATE(POSN_CURRENCY_CODE,30400003,FRMDATE,0,0, LAST_DAY(POSN_DUE_DATE),0) ELSE 0 END)))  AMOUNTLOCAL1
                         FROM TRSYSTEM997
                    WHERE POSN_TRANSACTION_AMOUNT!=0
                    AND POSN_FCY_RATE !=0
                    AND POSN_PRODUCT_CODE=33300001
                    GROUP BY POSN_COMPANY_CODE,POSN_CURRENCY_CODE,POSN_PRODUCT_CODE) A;

        VAROPERATION:= 'Step3 Settled  Exposure'; 
        
     INSERT INTO REPORT_MONTHLYREPORT_YEARLYEXP( ORDER1,
         STATUS1 , TYPEOFTRANS1,COMPANYCODE,
         CURRENCYCODE ,BASEAMOUNT1 ,BASEAMOUNTINR,EXCHANGERATE)    
         
    SELECT '3' ORDER1,'Settled  Exposure (A+B)' , 'Settled  Exposure (A+B)',COMPANYCODE,
         CURRENCYCODE, SUM (BASEAMOUNT1),
         SUM(BASEAMOUNTINR), SUM(BASEAMOUNTINR)/ SUM (BASEAMOUNT1)
      FROM REPORT_MONTHLYREPORT_YEARLYEXP
    WHERE STATUS1 IN ('Hedged Exposure (B)','Settled Exposure (A)')
    GROUP BY COMPANYCODE, CURRENCYCODE;
    
          VAROPERATION:= 'Step5 Excepted Exposure (A+B+C)'; 
          
     INSERT INTO REPORT_MONTHLYREPORT_YEARLYEXP( ORDER1,
         STATUS1 , TYPEOFTRANS1,COMPANYCODE,
         CURRENCYCODE ,BASEAMOUNT1 ,BASEAMOUNTINR,EXCHANGERATE)    
         
    SELECT '5' ORDER1,'Excepted Exposure (A+B+C)' , 'Excepted Exposure (A+B+C)',COMPANYCODE,
         CURRENCYCODE, SUM (BASEAMOUNT1),
         SUM(BASEAMOUNTINR), SUM(BASEAMOUNTINR)/ SUM (BASEAMOUNT1)
      FROM REPORT_MONTHLYREPORT_YEARLYEXP
      WHERE STATUS1 IN ('Settled  Exposure (A+B)','Un Hedged Exposure (C)')
       GROUP BY COMPANYCODE, CURRENCYCODE;
      
      
     UPDATE  REPORT_MONTHLYREPORT_YEARLYEXP SET BASEAMOUNT1=ROUND( BASEAMOUNT1/1000000,2),
                                BASEAMOUNTINR=ROUND(BASEAMOUNTINR/1000000,2);
      
   
    COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
      NUMERROR := SQLCODE;
      VARERROR := SQLERRM;
      VARERROR := GCONST.FNCRETURNERROR('prcreport_M_yearlyexp', NUMERROR, VARMESSAGE, 
                      VAROPERATION, VARERROR);


      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);             
 END PRCREPORT_M_YEARLYEXP;






































































































































































PROCEDURE PRCFXFORCASTRPTPOPULATEPREYEAR(
            FRMDATE IN DATE)
AS
  TEMPDATE DATE;
  DATTEMP DATE;
  TEMP VARCHAR(30);
  NUMERROR NUMBER;
  VAROPERATION        GCONST.GVAROPERATION%TYPE;
  VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
  VARERROR            GCONST.GVARERROR%TYPE;
BEGIN 
   
  DELETE FROM REPORT_FXFORCAST_PREYEAR;

      IF (TO_CHAR(FRMDATE,'MM') <=3) THEN

                    TEMPDATE:= '01-apr-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-2);
                    DATTEMP:= '31-MAR-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-1);
                    TEMP:= 'FY'|| TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-2) || '-' || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-1);
        ELSE
                    TEMPDATE:= '01-apr-' ||TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-1);
                    DATTEMP:= '31-MAR-' || TO_CHAR(FRMDATE,'YYYY');
                    TEMP:='FY'||TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YY'))-1) || '-' || TO_CHAR(FRMDATE,'YY');
       END IF;

      INSERT INTO REPORT_FXFORCAST_PREYEAR (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL)
    
                       SELECT 1,'NP Payment' ,CDEL_COMPANY_CODE,
                              TO_CHAR(CDEL_CANCEL_DATE,'MON-yy') MATURITYMONTH,
                              TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM') MATURITYMONTHDATE,
                              DEAL_BASE_CURRENCY CURRENCYCODE,
                              ROUND(SUM(CDEL_CANCEL_AMOUNT),2) AMOUNTFCY1,
                              
                               ROUND(SUM((CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE)),2) AMOUNTLOCAL1
                      FROM TRTRAN006 LEFT OUTER JOIN  TRTRAN001 
                      ON CDEL_DEAL_NUMBER= DEAL_DEAL_NUMBER 
                      LEFT OUTER JOIN  TRTRAN002 ON   TRAD_TRADE_REFERENCE=CDEL_TRADE_REFERENCE
                       WHERE   CDEL_RECORD_STATUS NOT IN(10200005,10200006 ) 
                        AND DEAL_BACKUP_DEAL=33300001
                        AND CDEL_TRADE_REFERENCE IS NOT NULL 
                        AND CDEL_CANCEL_TYPE =27000002
                        AND CDEL_CANCEL_DATE  BETWEEN TEMPDATE AND DATTEMP
                        AND DEAL_BASE_CURRENCY=30400004
                        AND TRAD_PRODUCT_CATEGORY =33300001
                        
                        AND TRAD_PRODUCT_CATEGORY=33300001 
                     GROUP BY CDEL_COMPANY_CODE,DEAL_BASE_CURRENCY,TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM'),
                              TO_CHAR(CDEL_CANCEL_DATE,'MON-yy'),
                               
                              TO_CHAR(TO_CHAR(FRMDATE,'dd-MON-')) || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-1);   

      INSERT INTO REPORT_FXFORCAST_PREYEAR (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL)

                      SELECT 2,'Weighted Avg Rate' STATUS,
                              CDEL_COMPANY_CODE COMPANYCODE,
                              TO_CHAR(CDEL_CANCEL_DATE,'MON-yy') MATURITYMONTH,
                              TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM') MATURITYMONTHDATE,
                              DEAL_BASE_CURRENCY CURRENCYCODE,


                              ROUND(SUM((CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE))/SUM(CDEL_CANCEL_AMOUNT),2) AMOUNTFCY1,
                              SUM((CDEL_CANCEL_AMOUNT*CDEL_CANCEL_RATE)) AMOUNTLOCAL1
                      FROM TRTRAN006 LEFT OUTER JOIN  TRTRAN001 
                      ON CDEL_DEAL_NUMBER= DEAL_DEAL_NUMBER 
                       WHERE   CDEL_RECORD_STATUS NOT IN(10200005,10200006 ) 
                        AND DEAL_BACKUP_DEAL=33300001
                        AND CDEL_TRADE_REFERENCE IS NOT NULL 
                        AND CDEL_CANCEL_TYPE =27000002
                        AND CDEL_CANCEL_DATE  BETWEEN TEMPDATE AND DATTEMP
                        AND DEAL_BASE_CURRENCY=30400004
                     GROUP BY CDEL_COMPANY_CODE,DEAL_BASE_CURRENCY,TO_CHAR(CDEL_CANCEL_DATE,'YYYYMM'),
                              TO_CHAR(CDEL_CANCEL_DATE,'MON-yy'),
                               
                              TO_CHAR(TO_CHAR(FRMDATE,'dd-MON-')) || TO_CHAR(TO_NUMBER(TO_CHAR(FRMDATE,'YYYY'))-1);
                              
      

                  
                    INSERT INTO REPORT_FXFORCAST_PREYEAR (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL)
                     SELECT 3,'USD/INRCashRate', NULL AS COMPANYCODE,
                           TO_CHAR(D.DRAT_EFFECTIVE_DATE,'MON') || '-'|| TO_CHAR(D.DRAT_EFFECTIVE_DATE,'yy') MATURITYMONTH,
                           TO_CHAR(D.DRAT_EFFECTIVE_DATE,'YYYYMM') MATURITYMONTHDATE,
                           DRAT_CURRENCY_CODE CURRENCYCODE,
                           ROUND(AVG(DRAT_SPOT_BID+DRAT_SPOT_ASK)/2,2) AMOUNTFCY,
                           NULL AMOUNTLOCAL
                           FROM TRTRAN012 D
                           WHERE DRAT_CURRENCY_CODE=30400004
                             AND DRAT_FOR_CURRENCY=30400003
                             AND DRAT_SERIAL_NUMBER= (SELECT MAX(DRAT_SERIAL_NUMBER)
                                                      FROM TRTRAN012
                                                      WHERE DRAT_CURRENCY_CODE=D.DRAT_CURRENCY_CODE
                                                      AND DRAT_FOR_CURRENCY=D.DRAT_FOR_CURRENCY
                                                      AND DRAT_EFFECTIVE_DATE= D.DRAT_EFFECTIVE_DATE)
                            AND DRAT_EFFECTIVE_DATE BETWEEN TEMPDATE AND DATTEMP
                      GROUP  BY TO_CHAR(D.DRAT_EFFECTIVE_DATE,'YYYYMM'),
                      
                       TO_CHAR(D.DRAT_EFFECTIVE_DATE,'MON') || '-'|| TO_CHAR(D.DRAT_EFFECTIVE_DATE,'yy'),DRAT_CURRENCY_CODE;
                              
        DATTEMP:= ADD_MONTHS(DATTEMP,1);
          
       
         
       INSERT INTO REPORT_FXFORCAST_PREYEAR (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL)
                 SELECT  1,'NP Payment' ,COMPANYCODE,
                         'Total' MATURITYMONTH,
                         TO_CHAR(DATTEMP,'YYYYMM') MATURITYMONTHDATE,
                         CURRENCYCODE, ROUND(SUM(AMOUNTFCY),2) AMOUNTFCY1,
                        ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL1 
                  FROM REPORT_FXFORCAST_PREYEAR
                 WHERE STATUS ='NP Payment'
                 GROUP BY COMPANYCODE,DATTEMP,CURRENCYCODE;

       INSERT INTO REPORT_FXFORCAST_PREYEAR (DISPLAYORDER,STATUS,COMPANYCODE,
                      MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                      AMOUNTLOCAL)
                 SELECT  2,'Weighted Avg Rate' ,COMPANYCODE,
                         'Total' MATURITYMONTH,
                         TO_CHAR(DATTEMP,'YYYYMM') MATURITYMONTHDATE,
                         CURRENCYCODE, ROUND(SUM(AMOUNTLOCAL)/SUM(AMOUNTFCY),2) AMOUNTFCY1,
                        ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL1 
                  FROM REPORT_FXFORCAST_PREYEAR
                 WHERE STATUS ='NP Payment'
                  GROUP BY COMPANYCODE,DATTEMP,CURRENCYCODE;
                 
       UPDATE REPORT_FXFORCAST_PREYEAR SET AMOUNTFCY= ROUND(AMOUNTFCY/1000000,2)
        WHERE DISPLAYORDER=1;
        

 

        INSERT INTO REPORT_FXFORCAST_PREYEAR (DISPLAYORDER,STATUS,COMPANYCODE,
                  MATURITYMONTH, MATURITYMONTHDATE,CURRENCYCODE, AMOUNTFCY ,
                  AMOUNTLOCAL)
            SELECT  3,'USD/INRCashRate' ,AMOUNT.COMPANYCODE,
                     'Total' MATURITYMONTH,
                     AMOUNT.DATTEMP MATURITYMONTHDATE,AMOUNT.CURRENCYCODE,
                     SUM(AMOUNT.AMOUNTFCY1*RATE.AMOUNTFCY1)/SUM(AMOUNT.AMOUNTFCY1),0
              FROM 
             (SELECT COMPANYCODE,TO_CHAR(DATTEMP,'YYYYMM') DATTEMP,CURRENCYCODE,
                     ROUND(SUM(AMOUNTFCY),2) AMOUNTFCY1,
                     ROUND(SUM(AMOUNTLOCAL),2) AMOUNTLOCAL1 
              FROM REPORT_FXFORCAST_PREYEAR
             WHERE STATUS ='NP Payment'
              GROUP BY COMPANYCODE,DATTEMP,CURRENCYCODE) AMOUNT INNER JOIN  
             (SELECT COMPANYCODE,TO_CHAR(DATTEMP,'YYYYMM') DATTEMP,
                     CURRENCYCODE, AVG(AMOUNTFCY) AMOUNTFCY1,
                     0 AMOUNTLOCAL1 
              FROM REPORT_FXFORCAST_PREYEAR
             WHERE STATUS ='USD/INRCashRate'
              GROUP BY COMPANYCODE,DATTEMP,CURRENCYCODE) RATE  
            ON AMOUNT.DATTEMP=RATE.DATTEMP
            AND AMOUNT.CURRENCYCODE= RATE.CURRENCYCODE
            GROUP BY AMOUNT.COMPANYCODE,AMOUNT.DATTEMP,AMOUNT.CURRENCYCODE;
                 


      
      
     COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
      NUMERROR := SQLCODE;
      VARERROR := SQLERRM;
      VARERROR := GCONST.FNCRETURNERROR('prcFxForcastRptPopulatePreYear', NUMERROR, VARMESSAGE, 
                      VAROPERATION, VARERROR);


      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);         
END  PRCFXFORCASTRPTPOPULATEPREYEAR;




procedure prcHedgeStatusUSDRptPopulate(
             varUserid in varchar,
             frmDate in date,
             ProductCode in number,
             SubProductCode in number)
as
  numError number(10);
  varOperation        GConst.gvarOperation%Type;
  varMessage          GConst.gvarMessage%Type;
  varError            GConst.gvarError%Type;
begin 

    numError := pkgforexprocess.FNCPOSITIONGENERATE(varUserID,frmDate);commit;    
      
    PRCCALCULATEGAPEXPOSURE(frmDate,4,33399999,33899999);

   -- PRCCALCULATEGAPEXPOSURE(frmDate,1);
  
--    select  to_char(to_date(frmDate),'dd-MM-yyyy') as FromDate,
--                        to_char(to_date(frmDate),'dd-MM-yyyy') as ToDate,
--                        sysdate as SystemDate,
--                        pkgreturnreport.getCompanyName('SK123') as CompanyName,
--                        DisplayOrder, TransType, ProductCode,SubProductCode,
--                         pkgreturncursor.fncgetdescription(ProductCode,2) Product,
--                         pkgreturncursor.fncgetdescription(SubProductCode,2) SubProduct, 
--                         pkgreturncursor.fncgetdescription(Company,2) Company, 
--                         pkgreturncursor.fncgetdescription(CurrencyCode,2) Currency,
--                  Forward1 ,
--                  Forward2 , 
--                  Forward3 ,
--                  Forward4 ,
--                  Forward5 ,
--                  Forward6 ,
--                  Forward7 ,
--                  Forward8 ,
--                  Forward9 ,
--                  Forward10 ,
--                  Forward11 ,
--                  Forward12, 
--                 (case when (TransType='Exposure') or (TransType='Hedged') or (TransType='Unhedged Exposure') Then 
--                 (Forward1+Forward2+Forward3+Forward4+Forward5+Forward6+Forward7+Forward8+Forward9+Forward10+Forward11+Forward12 )
--                  when (TransType=' % Hedged') then
--                         fncGetHedgePercent(frmDate,'OUTSTANDING',ProductCode,SubProductCode,CurrencyCode)
--                         
--                 when instr(TransType, '% Hedge - Policy') >0 then 
--                    RISK_LIMIT_PERCENT
--                 when (TransType='Hedging Rate') then 
--                          fncgethedgeingrateavg(frmDate,'OUTSTANDING',ProductCode,SubProductCode,CurrencyCode)
--                 when (TransType='Addt Cover Against Policy ') then
--                          fncgetaddtcovertotal(frmDate,'OUTSTANDING',ProductCode,SubProductCode,CurrencyCode)
--                   else null 
--                   end ) as Total, RISK_LIMIT_PERCENT  || ( case when (RISK_LIMIT_PERCENT != RISK_FLUCT_ALLOWED) then 
--                                                     ' - ' ||  RISK_FLUCT_ALLOWED || ' %' else ' %' end) LimitRange,
--                 RISK_LIMIT_PERCENT LimitPercent, 
--                 RISK_FLUCT_ALLOWED FluctAllowed                                                    
--           from (
     delete from  Report_HedgeStatus;
     
      insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
      select 1 DisplayOrder,'Exposure' TransType,
                   HEDG_PRODUCT_CODE ProductCode,
                   HEDG_SUBPRODUCT_CODE SubProductCode,
                   HEDG_COMPANY_CODE Company,
                   HEDG_CURRENCY_CODE CurrencyCode,
                   HEDG_MON_Forward1 Forward1,
                   HEDG_MON_Forward2 Forward2,
                   HEDG_MON_Forward3 Forward3,
                   HEDG_MON_Forward4 Forward4,
                   HEDG_MON_Forward5 Forward5,
                   HEDG_MON_Forward6 Forward6,
                   HEDG_MON_Forward7 Forward7,
                   HEDG_MON_Forward8 Forward8,
                   HEDG_MON_Forward9 Forward9,
                   HEDG_MON_Forward10 Forward10,
                   HEDG_MON_Forward11 Forward11,
                   HEDG_MON_Forward12 Forward12
           from trsystem970
           where hedg_exposure_type in ('Import','Export')  and HEDG_CALCULATION_TYPE='USDEquivalent'
            and HEDG_DATE_ASON=frmDate;
            
--       union all 
      insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
      select 2 DisplayOrder,'Hedged' TransType, 
                HEDG_PRODUCT_CODE ProductCode,
                HEDG_SUBPRODUCT_CODE SubProductCode,
                 HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 HEDG_MON_Forward1 Forward1,
                 HEDG_MON_Forward2 Forward2,
                 HEDG_MON_Forward3 Forward3,
                 HEDG_MON_Forward4 Forward4,
                 HEDG_MON_Forward5 Forward5,
                 HEDG_MON_Forward6 Forward6,
                 HEDG_MON_Forward7 Forward7,
                 HEDG_MON_Forward8 Forward8,
                 HEDG_MON_Forward9 Forward9,
                 HEDG_MON_Forward10 Forward10,
                 HEDG_MON_Forward11 Forward11,
                 HEDG_MON_Forward12 Forward12
        from trsystem970
         where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
         and HEDG_DATE_ASON=frmDate;
         
--       union All 
      insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
        select 4 DisplayOrder,'Hedged Rate' TransType,  
                  HEDG_PRODUCT_CODE  ProductCode,
                  HEDG_SUBPRODUCT_CODE  SubProductCode,
                  HEDG_COMPANY_CODE  Company,
                  HEDG_CURRENCY_CODE  CurrencyCode,
                 HEDG_BENCHMARK_RATE1 Forward1,
                 hedg_benchmark_rate2 Forward2,
                 hedg_benchmark_rate3 Forward3,
                 hedg_benchmark_rate4 Forward4,
                 hedg_benchmark_rate5 Forward5,
                 hedg_benchmark_rate6 Forward6,
                 hedg_benchmark_rate7 Forward7,
                 hedg_benchmark_rate8 Forward8,
                 HEDG_BENCHMARK_RATE9 Forward9,
                 hedg_benchmark_rate10 Forward10,
                 hedg_benchmark_rate11 Forward11,
                 HEDG_BENCHMARK_RATE12 Forward12
        from trsystem970
        where hedg_exposure_type in('Hedge Buy','Hedge Sell') and HEDG_CALCULATION_TYPE='USDEquivalent' 
        and HEDG_DATE_ASON=frmDate;
        
--     union all
      insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
         select 3 DisplayOrder,' % Hedged' TransType,
                nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
                nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
                nvl(Exposure.Company,Hedge.Company) Company ,
                nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
              --null CurrencyCode,
                (case when(exposure.Forward1 is null ) or (exposure.Forward1=0) then 0 
                else (hedge.Forward1/nvl(exposure.Forward1,1))end)*100  Forward1,
                (case when(exposure.Forward2 is null ) or (exposure.Forward2=0) then 0
                else (hedge.Forward2/nvl(exposure.Forward2,1))end)*100  Forward2,
                (case when(exposure.Forward3 is null ) or (exposure.Forward3=0) then 0
                else (hedge.Forward3/nvl(exposure.Forward3,1))end)*100  Forward3,
                (case when(exposure.Forward4 is null ) or (exposure.Forward4=0) then 0
                else (hedge.Forward4/nvl(exposure.Forward4,1))end)*100  Forward4,
                (case when(exposure.Forward5 is null ) or (exposure.Forward5=0) then 0
                else (hedge.Forward5/nvl(exposure.Forward5,1))end)*100  Forward5,
                (case when(exposure.Forward6 is null ) or (exposure.Forward6=0) then 0
                else (hedge.Forward6/nvl(exposure.Forward6,1))end)*100  Forward6,
                (case when(exposure.Forward7 is null ) or (exposure.Forward7=0) then 0
                else (hedge.Forward7/nvl(exposure.Forward7,1))end)*100  Forward7,
                (case when(exposure.Forward8 is null ) or (exposure.Forward8=0) then 0
                else (hedge.Forward8/nvl(exposure.Forward8,1))end)*100  Forward8,
                (case when(exposure.Forward9 is null ) or (exposure.Forward9=0) then 0
                else (hedge.Forward9/nvl(exposure.Forward9,1))end)*100  Forward9,
                (case when(exposure.Forward10 is null ) or (exposure.Forward10=0) then 0
                else (hedge.Forward10/nvl(exposure.Forward10,1))end)*100  Forward10,
                (case when(exposure.Forward11 is null ) or (exposure.Forward11=0) then 0
                else (hedge.Forward11/nvl(exposure.Forward11,1))end)*100  Forward11,
                (case when(exposure.Forward12 is null ) or (exposure.Forward12=0) then 0
                else (hedge.Forward12/nvl(exposure.Forward12,1))end)*100  Forward12
        from  (select  *  from Report_HedgeStatus
                where Transtype='Exposure')Exposure  full outer join
              (select * from Report_hedgeStatus
                where TransType ='Hedged')Hedge 
          on Hedge.ProductCode= Exposure.ProductCode
          -- and Hedge.SubProductCode= Exposure.SubProductCode
           and Hedge.Company= Exposure.Company
           and Hedge.CurrencyCode= Exposure.CurrencyCode;
          -- order by Product,SubProduct,Company, Currency,DisplayOrder
          
          
        insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)

          select 5 DisplayOrder,'% Hedge - Policy ( '|| fncGetRiskLimits(21000017,HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,frmdate) || ')' TransType, 
            HEDG_PRODUCT_CODE  ProductCode, 
            HEDG_SUBPRODUCT_CODE  SubProductCode,
            HEDG_COMPANY_CODE  Company,
            HEDG_CURRENCY_CODE  CurrencyCode,
           --- CurrencyCode,
                 Hpolicy Forward1, Hpolicy Forward2,Hpolicy Forward3,
                 Hpolicy Forward4,Hpolicy Forward5,Hpolicy Forward6,
                 Hpolicy Forward7,Hpolicy Forward8,Hpolicy Forward9,
                 Hpolicy Forward10,Hpolicy Forward11, Hpolicy Forward12
         from (select distinct HEDG_PRODUCT_CODE,HEDG_SUBPRODUCT_CODE,HEDG_COMPANY_CODE,
                      HEDG_CURRENCY_CODE,( select max(RISK_LIMIT_PERCENT) 
                              from trsystem012
                             where risk_risk_type=21000017
                               and risk_product_code=HEDG_PRODUCT_CODE
                                and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                 and risk_product_code=HEDG_PRODUCT_CODE
                                                                and risk_effective_date<= frmdate
                                                                --and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
                                                                  )) Hpolicy 
                               --and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
               from  trsystem970
               where hedg_exposure_type in('Import','Export') 
                and HEDG_CALCULATION_TYPE='USDEquivalent'
                and HEDG_DATE_ASON=frmDate)d;    
  

     
      insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
            
        select 8 DisplayOrder,'Unhedged Exposure (100%)' TransType,
                 nvl(Exposure.ProductCode,Hedge.ProductCode) ProductCode,
                 nvl(Exposure.SubProductCode,Hedge.SubProductCode) SubProductCode,
                 nvl(Exposure.Company,Hedge.Company) Company ,
                 nvl(Exposure.CurrencyCode,hedge.CurrencyCode)CurrencyCode,
                 (nvl(exposure.Forward1,0)- nvl(hedge.Forward1,0)) Forward1,
                 (nvl(exposure.Forward2,0)- nvl(hedge.Forward2,0)) Forward2,
                 (nvl(exposure.Forward3,0)- nvl(hedge.Forward3,0)) Forward3,
                 (nvl(exposure.Forward4,0)- nvl(hedge.Forward4,0)) Forward4,
                 (nvl(exposure.Forward5,0)- nvl(hedge.Forward5,0)) Forward5,
                 (nvl(exposure.Forward6,0)- nvl(hedge.Forward6,0)) Forward6,
                 (nvl(exposure.Forward7,0)- nvl(hedge.Forward7,0)) Forward7,
                 (nvl(exposure.Forward8,0)- nvl(hedge.Forward8,0)) Forward8,
                 (nvl(exposure.Forward9,0)- nvl(hedge.Forward9,0)) Forward9,
                 (nvl(exposure.Forward10,0)- nvl(hedge.Forward10,0)) Forward10,
                 (nvl(exposure.Forward11,0)- nvl(hedge.Forward11,0)) Forward11,
                 (nvl(exposure.Forward12,0)- nvl(hedge.Forward12,0)) Forward12
        from  (select  *  from Report_HedgeStatus
                where Transtype='Exposure')Exposure  full outer join
              (select * from Report_hedgeStatus
                where TransType ='Hedged')Hedge 
          on Hedge.ProductCode= Exposure.ProductCode
           --and Hedge.SubProductCode= Exposure.SubProductCode
           and Hedge.Company= Exposure.Company
           and Hedge.CurrencyCode= Exposure.CurrencyCode;

      insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
            
      select   7 DisplayOrder,'Addt Cover Against Policy ( ' || Hpolicy.Hpolicy || ' %)' TransType,
                 HedgePer.ProductCode, HedgePer.SubProductCode, HedgePer.Company,
                 HedgePer.CurrencyCode,
--               (case ((Hpolicy.Hpolicy-HedgePer.Forward1) * Exposure.Forward1)/100 end) Forward1,
--                (case ((Hpolicy.Hpolicy-HedgePer.Forward2) * Exposure.Forward2)/100 end) Forward2,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward3) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward3) * Exposure.Forward3)/100 end) Forward3,    
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward4) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward4) * Exposure.Forward4)/100 end) Forward4,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward5) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward5) * Exposure.Forward5)/100 end) Forward5,    
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward6) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward6) * Exposure.Forward6)/100 end) Forward6,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward7) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward7) * Exposure.Forward7)/100 end) Forward7,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward8) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward8) * Exposure.Forward8)/100 end) Forward8, 
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward9) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward9) * Exposure.Forward9)/100 end) Forward9,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward10) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward10) * Exposure.Forward10)/100 end) Forward10,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward11) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward11) * Exposure.Forward11)/100 end) Forward11,
--                (case when (Hpolicy.Hpolicy-HedgePer.Forward12) <0 then 0 
--                   else ((Hpolicy.Hpolicy-HedgePer.Forward12) * Exposure.Forward12)/100 end) Forward12   
                 ((Hpolicy.Hpolicy-HedgePer.Forward1)* Exposure.Forward1)/100 Forward1,
                 ((Hpolicy.Hpolicy-HedgePer.Forward2)* Exposure.Forward2)/100 Forward2,
                 ((Hpolicy.Hpolicy-HedgePer.Forward3)* Exposure.Forward3)/100 Forward3,
                 ((Hpolicy.Hpolicy-HedgePer.Forward4)* Exposure.Forward4)/100 Forward4,
                 ((Hpolicy.Hpolicy-HedgePer.Forward5)* Exposure.Forward5)/100 Forward5,
                 ((Hpolicy.Hpolicy-HedgePer.Forward6)* Exposure.Forward6)/100 Forward6,
                 ((Hpolicy.Hpolicy-HedgePer.Forward7)* Exposure.Forward7)/100 Forward7,
                 ((Hpolicy.Hpolicy-HedgePer.Forward8)* Exposure.Forward8)/100 Forward8,
                 ((Hpolicy.Hpolicy-HedgePer.Forward9)* Exposure.Forward9)/100 Forward9,
                 ((Hpolicy.Hpolicy-HedgePer.Forward10)* Exposure.Forward10)/100 Forward10,
                 ((Hpolicy.Hpolicy-HedgePer.Forward11)* Exposure.Forward12)/100 Forward11,
                 ((Hpolicy.Hpolicy-HedgePer.Forward12)* Exposure.Forward12)/100 Forward12
            from 
            ( Select * from report_hedgeStatus 
               where TransType=' % Hedged') HedgePer inner join 
            (select distinct HEDG_PRODUCT_CODE ProductCode,HEDG_SUBPRODUCT_CODE SubProductCode,HEDG_COMPANY_CODE Company,
                          HEDG_CURRENCY_CODE CurrencyCode,( select max(RISK_LIMIT_PERCENT) 
                                  from trsystem012
                                 where risk_risk_type=21000017
                                   and risk_product_code=HEDG_PRODUCT_CODE
                                    and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                and risk_product_code=HEDG_PRODUCT_CODE
                                                                and  risk_effective_date<= frmdate
                                                                 -- and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
                                                                  )) Hpolicy 
                                   --and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
                   from  trsystem970
                   where hedg_exposure_type in('Import','Export') 
                    and HEDG_CALCULATION_TYPE='USDEquivalent') HPolicy      
               on HedgePer.ProductCode= HPolicy.ProductCode
              -- and HedgePer.SubProductCode= HPolicy.SubProductCode
               and HedgePer.Company= HPolicy.Company
               and HedgePer.CurrencyCode= HPolicy.CurrencyCode
           inner join 
             ( select * from report_hedgestatus
                where transtype='Exposure') exposure
             on HedgePer.ProductCode= Exposure.ProductCode
              -- and HedgePer.SubProductCode= Exposure.SubProductCode
               and HedgePer.Company= Exposure.Company
               and HedgePer.CurrencyCode= Exposure.CurrencyCode ;
 
         insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode,Forward1,Forward2,
            Forward3,forward4,forward5,Forward6,forward7,forward8,
            Forward9,forward10,forward11,Forward12)
            
               select 6 DisplayOrder,'Forward Rate Monthwise' TransType, 
              ProductCode,
              SubProductCode,
              Company,
            30400004  CurrencyCode,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),0)),0) Forward1,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),1)),0) Forward2,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),2) ),0) Forward3,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),3)),0) Forward4,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),4)),0) Forward5,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),5)),0) Forward6,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),6)),0) Forward7,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),7)),0) Forward8,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),8)),0) Forward9,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),9)),0) Forward10,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),10)),0) Forward11,
                 pkgforexprocess.fncGetRate(30400004,30400003,
                               frmDate,25300001,0,last_day(add_months(to_date(frmDate),11)),0) Forward12                              
           from (select Distinct   ProductCode , SubProductCode , Company  from Report_HedgeStatus);
               
        --varOperation:='Insert dummy records';     
        
        insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 1 , 'Exposure', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
         -- and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
          and displayorder =1);
         
        --varOperation:='Insert dummy records';     
        
        insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 2 , 'Hedged', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
       --   and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
          and displayorder =2);

       insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 3 , ' % Hedged', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
         -- and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
          and displayorder =3);

       insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 4 , 'Hedged Rate', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X' 
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
         -- and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
          and displayorder =4);
                  
        insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 5 , '% Hedge - Policy', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
        --  and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
          and displayorder =5);

       insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 6 , 'Forward Rate Monthwise', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
        --  and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
      --    and maint.CurrencyCode= subt.currencyCode
          and displayorder =6);
          
       insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 7 , 'Addt Cover Against Policy ', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
        --  and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
      --    and maint.CurrencyCode= subt.currencyCode
          and displayorder =7);

       insert into Report_HedgeStatus(DisplayOrder,TransType,ProductCode,
            SubProductCode,Company,CurrencyCode)
       select distinct 8 , 'Unhedged Exposure (100%)', ProductCode,SubProductCode, 
               Company,CurrencyCode
          from report_hedgestatus maint
         where not exists
        (select 'X'
         from report_hedgestatus subt
        where maint.productcode= subt.ProductCode
      --    and maint.subproductcode= subt.subProductCode
          and maint.currencycode= subt.currencycode
          and maint.Company= subt.Company
        --  and maint.CurrencyCode= subt.currencyCode
          and displayorder =8);
--         

        
         update report_hedgestatus set total =
                 (select (case when (TransType='Exposure') or (TransType='Hedged') or (TransType='Unhedged Exposure (100%)') or (TransType like 'Addt Cover Against Policy%') Then 
                 round((Forward1+Forward2+Forward3+Forward4+Forward5+Forward6+Forward7+Forward8+Forward9+Forward10+Forward11+Forward12 )/1000000,2)
                  when (TransType=' % Hedged') then
                           fncGetHedgePercent(frmDate,'USDEquivalent',ProductCode,null,CurrencyCode)
                         
                 when instr(TransType, '% Hedge - Policy') >0 then 
                    b.RISK_LIMIT_PERCENT
                 when (TransType='Hedged Rate') then 
                           fncgethedgeingrateavg(frmDate,'USDEquivalent',ProductCode,null,CurrencyCode)
--                 when (TransType='Addt Cover Against Policy ') then
--                          fncgetaddtcovertotal(frmDate,'OUTSTANDING',ProductCode,SubProductCode,CurrencyCode)
                   else null 
                   end ) from report_hedgestatus a left outer join 
                                 ( select risk_product_code,max(RISK_LIMIT_PERCENT) RISK_LIMIT_PERCENT
                                  from trsystem012 b
                                 where risk_risk_type=21000017
                                  -- and risk_product_code=HEDG_PRODUCT_CODE
                                    and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                                and risk_product_code=b.risk_product_code
                                                                and  risk_effective_date<= frmdate
                                                                 -- and risk_subproduct_code=HEDG_SUBPRODUCT_CODE
                                                                  )
                                   group by risk_product_code ) b
                         -- on risk_risk_type=21000017
                         on b.risk_product_code=a.ProductCode
                        
                       -- and risk_subproduct_code=SubProductCode
                   where report_hedgestatus.ProductCode= a.ProductCode
                      and report_hedgestatus.DisplayOrder= a.DisplayOrder  
                     --and report_hedgestatus.SubProductCode= a.SubProductCode
                     --and report_hedgestatus.CurrencyCode= a.CurrencyCode
                     and report_hedgestatus.Transtype= a.TRANSTYPE);


         --order by productCode,subproductCode ;
        update report_hedgestatus  set Forward1=Round((Forward1/1000000),2),
               Forward2 = round(Forward2/1000000,2),
               Forward3=Round(Forward3/1000000,2),
               Forward4 =round(Forward4/1000000,2),
               Forward5 = round(Forward5/1000000,2),
               Forward6 =round(Forward6/1000000,2),
               Forward7 =round(Forward7/1000000,2),
               Forward8 =Round(Forward8/1000000,2),
               Forward9 =Round(Forward9/1000000,2),
               Forward10 = Round(Forward10/1000000,2),
               Forward11 =Round(Forward11/1000000,2),
               Forward12 = round(Forward12/1000000,2)
        where displayorder in ( 1,2,7,8);
  
          
       varoperation :='updating trsystem012 Rate  into Report_HedgeStatus';
           update report_hedgestatus set limitRange =   (select       
                    avg(RISK_LIMIT_PERCENT)  || ( case when (max(RISK_LIMIT_PERCENT) != max(RISK_FLUCT_ALLOWED)) then 
                                                     ' - ' ||  max(RISK_FLUCT_ALLOWED) || ' %' else ' %' end) 
                    from trsystem012
                    where   risk_risk_type=21000017
                     and risk_product_code=ProductCode
                        and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                              and risk_product_code=ProductCode
                                                                and risk_effective_date<= frmdate
                                                                  --and risk_subproduct_code=SubProductCode
                                                                  ));
                     --and risk_subproduct_code=SubProductCode);
  
           update report_hedgestatus set limitPercent =   (select  max(RISK_LIMIT_PERCENT)
                    from trsystem012
                    where   risk_risk_type=21000017
                     and risk_product_code=ProductCode
                      and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                              and risk_product_code=ProductCode
                                                                and risk_effective_date<= frmdate
                                                                 -- and risk_subproduct_code=SubProductCode
                                                                  ));
                     --and risk_subproduct_code=SubProductCode);

         update report_hedgestatus set FLUCTAllowed =   (select max(RISK_FLUCT_ALLOWED)
                    from trsystem012
                    where   risk_risk_type=21000017
                     and risk_product_code=ProductCode
                       and  risk_effective_date = (select max(risk_effective_date) 
                                                                 from trsystem012
                                                                where  
                                                                risk_risk_type=21000017
                                                              and risk_product_code=ProductCode
                                                                and risk_effective_date<= frmdate
                                                                 -- and risk_subproduct_code=SubProductCode
                                                                  ));
                  --   and risk_subproduct_code=SubProductCode);

          
  commit;
      Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('prcHedgeStatusUSDRptPopulate', numError, varMessage, 
                      varOperation, varError);


      
      Raise_Application_Error(-20101, Varerror);    
 end prcHedgeStatusUSDRptPopulate; 
                                      
END PKGREPORTPROGRAMS;
/