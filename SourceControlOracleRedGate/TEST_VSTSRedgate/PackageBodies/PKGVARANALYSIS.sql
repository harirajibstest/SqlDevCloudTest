CREATE OR REPLACE PACKAGE BODY "TEST_VSTSRedgate"."PKGVARANALYSIS" AS

function FNCGETDUEDAT(numlocationcode in number ,DATWORKDATE IN DATE ,datgetrate in date ,DATDUEDATE IN DATE) 
RETURN DATE 
AS
numdays NUMBER(3);
DATTEMP DATE;
NUMHOLIDAY NUMBER(2);
DATMATURITYDATE DATE;

BEGIN

SELECT  DATDUEDATE-DATWORKDATE INTO NUMDAYS FROM DUAL;

SELECT datgetrate + numdays into dattemp from dual  ;

SELECT COUNT(*) INTO NUMHOLIDAY FROM TRSYSTEM001
  WHERE HDAY_LOCATION_CODE = NUMLOCATIONCODE
    AND HDAY_CALENDAR_DATE BETWEEN DATTEMP and DATGETRATE
    AND HDAY_DAY_STATUS IN (26400007,26400008,26400009)
    AND HDAY_RECORD_STATUS IN (10200001,10200002,10200003,10200004);

SELECT DATTEMP -NUMHOLIDAY INTO DATMATURITYDATE FROM DUAL;
 
 RETURN DATMATURITYDATE;
 
EXCEPTION
WHEN OTHERS THEN
  return DATDUEDATE;
END FNCGETDUEDAT;



FUNCTION GETRATEINDEX(DATWORKDATE IN DATE ,DATfromDATE in date default null )
RETURN NUMBER AS
 PRAGMA AUTONOMOUS_TRANSACTION;
 NUMERROR            NUMBER;
 numSerial           number(5);
 VAROPERATION        GCONST.GVAROPERATION%TYPE;
 VARMESSAGE          GCONST.GVARMESSAGE%TYPE;
 VARERROR            GCONST.GVARERROR%TYPE;
 DATSTARTDATE        date;
 DATRATEMISSING      DATE;
 DATRATEAVAILABLE    DATE;
 numaddmuturityperiod number(2);
 
 BEGIN
 if DATfromDATE is null then
    DATSTARTDATE:=DATWORKDATE;
 else
    DATSTARTDATE:=DATfromDATE;
 end if;
   VARMESSAGE :='Deleting old Rate index available in TRTRAN012Indx table';
   ---select nvl(max(DRAT_EFFECTIVE_DATE),to_date('01/01/2007','dd/mm/yyyy'))+ 1 into DATSTARTDATE from TRTRAN012Indx;
   delete from TRTRAN012Indx where DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATWORKDATE ;
   
   VARMESSAGE :='Inserting latest Currency Rate index into TRTRAN012Indx table';
       INSERT INTO TRTRAN012Indx ( DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_AS_ONDATE,dRAT_DUE_DATEADD,
              DRAT_SERIAL_NUMBER)
       SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE c,DRAT_EFFECTIVE_DATE b,0,max(DRAT_SERIAL_NUMBER)
            FROM TRTRAN012  
            WHERE  DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATWORKDATE
               AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
            group by DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE      
            ORDER BY DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE ;
 
 COMMIT;  
   VARMESSAGE :='Inserting latest Rate  OF LAST DATE  IF RATE IS NOT UPLOADED into TRTRAN012 table';
   
   FOR CURRATE IN (SELECT HDAY_CALENDAR_DATE  FROM TRSYSTEM001 
                       WHERE HDAY_LOCATION_CODE = 30299999
                       AND HDAY_CALENDAR_DATE BETWEEN DATSTARTDATE AND DATWORKDATE
                       and HDAY_CALENDAR_DATE not in (select DRAT_EFFECTIVE_DATE from TRTRAN012Indx)
                       AND HDAY_DAY_STATUS NOT IN (26400007,26400008,26400009)
                       AND HDAY_RECORD_STATUS IN (10200001,10200002,10200003,10200004))
   LOOP
 ---  FETCH CURRATE.HDAY_CALENDAR_DATE INTO DATRATEMISSING ;
 ---  EXIT WHEN CURRATE%NOTFOUND ;
       DATRATEMISSING:=CURRATE.HDAY_CALENDAR_DATE;
       SELECT MAX (DRAT_EFFECTIVE_DATE) INTO DATRATEAVAILABLE FROM TRTRAN012
        WHERE DRAT_EFFECTIVE_DATE < DATRATEMISSING;
       
       SELECT DATRATEMISSING -DATRATEAVAILABLE INTO NUMADDMUTURITYPERIOD FROM DUAL ; --checking the holiday in between
        
          INSERT INTO TRTRAN012Indx ( DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_AS_ONDATE,dRAT_DUE_DATEADD,
              DRAT_SERIAL_NUMBER)
           SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DATRATEMISSING,DATRATEAVAILABLE,NUMADDMUTURITYPERIOD,MAX(DRAT_SERIAL_NUMBER)
           FROM TRTRAN012  
           WHERE  DRAT_EFFECTIVE_DATE =DATRATEAVAILABLE
               AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
            group by DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE      
            ORDER BY DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE ;
   
   end loop;

   
COMMIT;
numSerial :=1;
return numSerial;
 
 EXCEPTION
 
 WHEN OTHERS THEN
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Rateindxcalc', numError, varMessage, 
                      varOperation, varError);
      ROLLBACK;                      
      raise_application_error(-20101, varError);                      
      RETURN NUMERROR;
 END GETRATEINDEX;
--FUNCTION FNCGETposition(Datstartdate in date,Datenddate in date)
-- RETURN NUMBER AS
-- PRAGMA AUTONOMOUS_TRANSACTION;
--  NUMERROR            NUMBER;
--  numSerial           number(5);
--  VAROPERATION        GCONST.GVAROPERATION%TYPE;
--  VARMESSAGE         VARCHAR2(2000);-- GCONST.GVARMESSAGE%TYPE;
--  VARERROR            VARCHAR2(4000);-- GCONST.GVARERROR%TYPE;
-- -- DATWORKDATE         DATE;
--  NUMCHANGETYPE       NUMBER(8);
--  NUMCHANGEVALUE      NUMBER(15,6);
--  NUMPRICETYPE        NUMBER(8);
--  NUMSTRESSTYPE       NUMBER(8);
--  L_ERRORS              NUMBER(8);
--  RNUM                NUMBER(5);
--  --DATSTARTDATE        DATE;
-- -- DATENDDATE          DATE;
--  FETCH_SIZE NUMBER(2);
--  uncommitted number(5);
--   dml_errors EXCEPTION;
--    PRAGMA EXCEPTION_INIT(DML_ERRORS, -24381);
--    
--   CURSOR CURGETEFFECTIVEDATE IS
--   SELECT DRAT_EFFECTIVE_DATE ,MAX(DRAT_SERIAL_NUMBER) DRAT_SERIAL_NUMBER FROM TRTRAN012INDX
--      where DRAT_EFFECTIVE_DATE between Datstartdate and Datenddate
--      GROUP BY DRAT_EFFECTIVE_DATE;
--   
--   TYPE TDATRATE IS TABLE OF CURGETEFFECTIVEDATE%ROWTYPE;
--   
--   DATRATE TDATRATE;
--
-- BEGIN
-- 
--
--   DELETE FROM TRSYSTEM976; 
--   COMMIT;
--   NUMSERIAL:=PKGVARANALYSIS.GETRATEINDEX(Datenddate);
--   
--       
--   VARMESSAGE :='Get latest effective date from TRTRAN012INDX table';
--   FETCH_SIZE :=10;
--   open Curgeteffectivedate;
--   loop 
--      fetch Curgeteffectivedate   bulk collect  into datrate LIMIT FETCH_SIZE ; 
-- 
--   begin
--   VARMESSAGE :='Inserting data into trsystem976';
--    
--    
--        FORALL I IN 1 .. DATRATE.count save exceptions
--            
--          INSERT INTO TRSYSTEM976 
--            (EFFE_COMPANY_CODE,EFFE_AMOUNT_FCY,EFFE_AMOUNT_MTMPL,EFFE_REF_DATE,EFFE_CURRENCY_CODE,EFFE_FOR_CURRENCY,
--            EFFE_CLOSE_DATE,EFFE_ASON_DATE,EFFE_COST_RATE,EFFE_EFFE_RATE,EFFE_TRADE_REFRENCE,EFFE_DEAL_NUMBER, 
--            EFFE_BALANCE_FCY,EFFE_DESCRIPTION,EFFE_CROSS_RATE,EFFE_BUY_SELL)
--     (     SELECT trad_company_code,Hedg_Hedged_Fcy,0,TRAD_REFERENCE_DATE,TRAD_TRADE_CURRENCY,DEAL_OTHER_CURRENCY,
--                TRAD_MATURITY_DATE,DATRATE(I).DRAT_EFFECTIVE_DATE,TRAD_TRADE_RATE,DEAL_EXCHANGE_RATE,TRAD_TRADE_REFERENCE, HEDG_DEAL_NUMBER,
--                0,'OPEN HEDGE',0,DECODE(SIGN(25900050 - trad_import_export),1 , 25300002,-1,25300001)
--               
--          FROM Trtran004,Trtran002,trtran001
--          WHERE Trad_Trade_Reference = Hedg_Trade_Reference
--                AND Trad_Process_Complete  = 12400002
--                AND Hedg_Record_Status    IN(10200001,10200002,10200003,10200004)
--                AND HEDG_DEAL_NUMBER = DEAL_DEAL_NUMBER
--                AND DEAL_RECORD_STATUS IN(10200001,10200002,10200003,10200004)
--                AND TRAD_REFERENCE_DATE <= DATRATE(i).DRAT_EFFECTIVE_DATE
---------OPEN UNHEDGE-----------------------------------------------------------------          
--  UNION ALL
--      SELECT
--        TRAD_COMPANY_CODE,
--        (pkgforexprocess.fncGetOutstanding(Trad_Trade_Reference,0,0,1,DATRATE(i).DRAT_EFFECTIVE_DATE)- 
--        nvl((SELECT NVL(SUM(HEDG_HEDGED_FCY),0) FROM trtran004
--        WHERE HEDG_TRADE_REFERENCE = trad_trade_reference AND Hedg_Record_Status NOT IN (10200005,10200006,10200012) ),0)),
--        0,TRAD_REFERENCE_DATE,TRAD_TRADE_CURRENCY,30400003,TRAD_MATURITY_DATE,DATRATE(I).DRAT_EFFECTIVE_DATE,TRAD_TRADE_RATE,
--        Pkgvaranalysis.Fncgetrate(TRAD_TRADE_CURRENCY,30400003,DATRATE(i).DRAT_EFFECTIVE_DATE,DECODE(SIGN(25900050 - trad_import_export),1 , 25300002,-1,25300001),Trad_Maturity_Date,DATRATE(i).DRAT_SERIAL_NUMBER),
--        TRAD_TRADE_REFERENCE,
--        NULL,
--        pkgforexprocess.fncGetOutstanding(TRAD_TRADE_REFERENCE,0,0,1,DATRATE(I).DRAT_EFFECTIVE_DATE),
--        'OPEN UNHEDGE', 0,DECODE(SIGN(25900050 - trad_import_export),1 , 25300002,-1,25300001)
--        
--    FROM Trtran002 WHERE
--    TRAD_RECORD_STATUS NOT IN(10200005,10200006,10200012) AND
--                ((TRAD_PROCESS_COMPLETE = 12400001  AND trad_complete_date > DATRATE(i).DRAT_EFFECTIVE_DATE) or TRAD_PROCESS_COMPLETE = 12400002)
--        AND trad_entry_date <= DATRATE(i).DRAT_EFFECTIVE_DATE
--    UNION
--    SELECT BCRD_COMPANY_CODE,BCRD_SANCTIONED_FCY, 0,BCRD_SANCTION_DATE,BCRD_CURRENCY_CODE,30400003,BCRD_DUE_DATE,DATRATE(i).DRAT_EFFECTIVE_DATE,
--         BCRD_CONVERSION_RATE,
--         Pkgvaranalysis.Fncgetrate(BCRD_CURRENCY_CODE,30400003,DATRATE(i).DRAT_EFFECTIVE_DATE,0,BCRD_DUE_DATE,DATRATE(i).DRAT_SERIAL_NUMBER),
--         BCRD_BUYERS_CREDIT,NULL,BCRD_SANCTIONED_FCY,'OPEN UNHEDGE',0,25300001
--    FROM trtran045 WHERE BCRD_PROCESS_COMPLETE = 12400002 AND BCRD_RECORD_STATUS BETWEEN 10200001 AND 10200004
--    AND BCRD_SANCTION_DATE <=DATRATE(i).DRAT_EFFECTIVE_DATE
--
---------FC DELIVERY--------------------------------------------
--  UNION ALL
--      SELECT 
--        Trad_Company_Code,CDEL_CANCEL_AMOUNT,0,TRAD_REFERENCE_DATE,TRAD_TRADE_CURRENCY,30400003,
--        TRAD_MATURITY_DATE,DATRATE(I).DRAT_EFFECTIVE_DATE,TRAD_TRADE_RATE,CDEL_CANCEL_RATE,TRAD_TRADE_REFERENCE,CDEL_DEAL_NUMBER,
--        0,'FC DELIVERY',0,DECODE(SIGN(25900050 - trad_import_export),1 , 25300002,-1,25300001)
--             
--    FROM 
--      trtran006,trtran002,trtran001
--      WHERE CDEL_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
--      AND cdel_deal_number = deal_deal_number
--      AND cdel_cancel_date BETWEEN datstartdate AND DATRATE(i).DRAT_EFFECTIVE_DATE
--      AND DEAL_DEAL_TYPE NOT IN(25400001)
--
-------------CASH SETTLE---------------------------------------
--   UNION ALL
--   SELECT 
--      Trad_Company_Code,CDEL_CANCEL_AMOUNT,0,TRAD_REFERENCE_DATE,TRAD_TRADE_CURRENCY,30400003,
--      TRAD_MATURITY_DATE,DATRATE(I).DRAT_EFFECTIVE_DATE,TRAD_TRADE_RATE,CDEL_CANCEL_RATE,TRAD_TRADE_REFERENCE,CDEL_DEAL_NUMBER,
--      0,'CASH SETTLE',0,DECODE(SIGN(25900050 - trad_import_export),1 , 25300002,-1,25300001)
--      
--    FROM trtran006,trtran002,trtran001
--    WHERE CDEL_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
--    AND CDEL_DEAL_NUMBER = DEAL_DEAL_NUMBER
--    AND DEAL_DEAL_TYPE = 25400001 
--    AND CDEL_CANCEL_DATE BETWEEN datstartdate AND DATRATE(i).DRAT_EFFECTIVE_DATE
---------------------------------------------FC CNCEL---------------
--   UNION ALL
--    SELECT DEAL_COMPANY_CODE,CDEL_CANCEL_AMOUNT,CDEL_PROFIT_LOSS,DEAL_EXECUTE_DATE,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,
--           CDEL_CANCEL_DATE,DATRATE(i).DRAT_EFFECTIVE_DATE,DEAL_EXCHANGE_RATE,CDEL_CANCEL_RATE,NULL,DEAL_DEAL_NUMBER,
--           0,'FC CNCEL',0,DEAL_BUY_SELL
--    FROM trtran006,trtran001
--    WHERE CDEL_CANCEL_DATE BETWEEN datstartdate AND DATRATE(i).DRAT_EFFECTIVE_DATE
--    AND cdel_deal_number = deal_deal_number
--    AND DEAL_HEDGE_TRADE = 26000001
-----------------------------------HEDGE MTM---------------
--     UNION ALL
--     
--     SELECT COMPANYCODE,balancefcy,MTMPANDLINR,DEALDATE,CURRENCYCODE,OTHERCODE,MATURITY,DATRATE(i).DRAT_EFFECTIVE_DATE,EXRATE,M2MRATE,
--        NULL,DEALNUMBER,balancefcy,'CURRENCY FORWARD',0,BUYSELLCODE
--    FROM vewReportForward  WHERE  
--    ((status = 12400001 AND completedate > DATRATE(i).DRAT_EFFECTIVE_DATE) or status = 12400002)
--    AND dealdate <= DATRATE(i).DRAT_EFFECTIVE_DATE 
--    AND hedgeCode = 26000001
--    ---------------------------'CURRENCY FUTURE' ---------------------------------
--      UNION ALL
--        SELECT COMPANYCODE,balancefcy,MTMPANDL,DEALDATE,CURRENCYCODE,OTHERCODE,MATURITY,DATRATE(i).DRAT_EFFECTIVE_DATE,EXRATE,M2MRATE,
--        NULL,DEALNUMBER,balancefcy,'CURRENCY FUTURE',0,BUYSELLCODE
--    FROM vewReportFuture  WHERE 
--    ((status = 12400001 AND completedate > DATRATE(i).DRAT_EFFECTIVE_DATE) or status = 12400002) AND
--     dealdate <= DATRATE(i).DRAT_EFFECTIVE_DATE 
--    UNION
--    SELECT COMPANYCODE,CANCELAMOUNT,PANDLFCY,DEALDATE,CURRENCYCODE,OTHERCODE,MATURITY,DATRATE(i).DRAT_EFFECTIVE_DATE,EXRATE,ROUND(CANCELRATE,4),
--        NULL,DEALNUMBER,0,'REALIZED FUTURE',0,BUYSELLCODE
--    FROM vewReportFuture  WHERE 
--    canceldate BETWEEN datstartdate AND DATRATE(i).DRAT_EFFECTIVE_DATE
--    ------------------'CURRENCY OPTION'-------------------
--   UNION ALL
--    SELECT COPT_COMPANY_CODE,COPT_BASE_AMOUNT,pkgForexProcess.fncGetOptionMTM(copt_deal_number,DATRATE(i).DRAT_EFFECTIVE_DATE,'N'),
--        COPT_EXECUTE_DATE,COPT_BASE_CURRENCY,COPT_OTHER_CURRENCY,COPT_MATURITY_DATE,DATRATE(i).DRAT_EFFECTIVE_DATE,COPT_LOT_PRICE,0,NULL,COPT_DEAL_NUMBER,
--        COPT_BASE_AMOUNT,'CURRENCY OPTION',0,0
--    FROM trtran071 WHERE COPT_EXECUTE_DATE <= DATRATE(i).DRAT_EFFECTIVE_DATE 
--    AND ((copt_PROCESS_COMPLETE = 12400001  AND copt_COMPLETE_DATE >DATRATE(i).DRAT_EFFECTIVE_DATE) or copt_PROCESS_COMPLETE = 12400002)
--    AND COPT_RECORD_STATUS IN(10200001,10200002,10200003,10200004)
--    UNION  
--    SELECT COPT_COMPANY_CODE,COPT_BASE_AMOUNT,nvl( Pkgforexprocess.FncgetprofitlossoptnetpANDl(CORV_DEAL_NUMBER,CORV_SERIAL_NUMBER),0),
--        COPT_EXECUTE_DATE,COPT_BASE_CURRENCY,COPT_OTHER_CURRENCY,COPT_MATURITY_DATE,DATRATE(i).DRAT_EFFECTIVE_DATE,COPT_LOT_PRICE,0,NULL,COPT_DEAL_NUMBER,
--        COPT_BASE_AMOUNT,'REALIZE OPTION',0,0
--    FROM trtran073,trtran071 
--    WHERE 
--    corv_exercise_date  BETWEEN datstartdate AND DATRATE(i).DRAT_EFFECTIVE_DATE
--    AND COPT_DEAL_NUMBER = CORV_DEAL_NUMBER --AND COPT_HEDGE_TRADE = 26000001
--    AND CORV_RECORD_STATUS IN(10200001,10200002,10200003,10200004));
--      
--                     -- FOR I IN 1.. DATRATE.COUNT
--             --   LOOP
--                --    UNCOMMITTED := UNCOMMITTED + SQL%BULK_ROWCOUNT(I) ; 
--                 --   INSERT INTO TEMP VALUES('VARCNT' ,UNCOMMITTED); COMMIT;
--             --       IF UNCOMMITTED >= 5000 THEN 
--                       COMMIT ;
--                          INSERT INTO TEMP VALUES('VAR' ,'COMMITED'); COMMIT;
--           ---            UNCOMMITTED := 0;
--             --       END IF ; 
--        --       END LOOP; 
--   EXCEPTION   
--      WHEN DML_ERRORS THEN
--      L_ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
--       INSERT INTO TEMP VALUES('ERRCNT' ,L_ERRORS); COMMIT;              
--                FOR I IN 1 .. L_ERRORS
--                loop
--                    NUMERROR := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
--                    VARMESSAGE   := SQLERRM(-NUMERROR); 
--                    VAROPERATION   := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
--                    VARERROR := GCONST.FNCRETURNERROR('VarAnalysis', NUMERROR, VARMESSAGE, 
--                                  VAROPERATION, VARERROR);
--                    INSERT INTO TEMP VALUES('VARERR' ,VARERROR); COMMIT;              
--                end loop;
--       
--  END;
--    
--      EXIT WHEN DATRATE.COUNT < FETCH_SIZE ; 
--       
--      
--  end loop ; 
--  commit ; 
--  CLOSE CURGETEFFECTIVEDATE; 
--  
--COMMIT;
--numSerial :=1;
--return numSerial;
-- 
-- EXCEPTION
-- 
-- WHEN OTHERS THEN
--      numError := SQLCODE;
--      varError := SQLERRM;
--      varError := GConst.fncReturnError('Stresscal', numError, varMessage, 
--                      varOperation, varError);
--      ROLLBACK;                      
--      raise_application_error(-20101, varError);                      
--      RETURN NUMERROR;
--
-- END ;
 FUNCTION FNCGETVAR(UserID IN VARCHAR2 ,datfromdate in date,Datworkdate in date)
 RETURN NUMBER AS
 PRAGMA AUTONOMOUS_TRANSACTION;
  NUMERROR            NUMBER;
  numSerial           number(5);
  VAROPERATION        GCONST.GVAROPERATION%TYPE;
  VARMESSAGE         VARCHAR2(2000);-- GCONST.GVARMESSAGE%TYPE;
  VARERROR            VARCHAR2(4000);-- GCONST.GVARERROR%TYPE;
 -- DATWORKDATE         DATE;
  NUMCHANGETYPE       NUMBER(8);
  NUMCHANGEVALUE      NUMBER(15,6);
  NUMPRICETYPE        NUMBER(8);
  NUMSTRESSTYPE       NUMBER(8);
  L_ERRORS              NUMBER(8);
  RNUM                NUMBER(5);
  DATSTARTDATE        DATE;
  DATENDDATE          DATE;
  FETCH_SIZE NUMBER(2);
  uncommitted number(5);
   dml_errors EXCEPTION;
    PRAGMA EXCEPTION_INIT(DML_ERRORS, -24381);
    
   CURSOR CURGETEFFECTIVEDATE IS
   SELECT DRAT_EFFECTIVE_DATE ,MAX(DRAT_SERIAL_NUMBER) DRAT_SERIAL_NUMBER FROM TRTRAN012INDX 
       where /*drat_due_dateadd=0 and */ DRAT_EFFECTIVE_DATE between datfromdate and Datworkdate 
       GROUP BY DRAT_EFFECTIVE_DATE;
   TYPE TDATRATE IS TABLE OF CURGETEFFECTIVEDATE%ROWTYPE;
   DATRATE TDATRATE;

 BEGIN
 

   DELETE FROM TRSYSTEM997B; 
   COMMIT;
   NUMSERIAL:=PKGVARANALYSIS.GETRATEINDEX(DATWORKDATE,datfromdate);
   NUMSERIAL :=pkgvaranalysis.fncStressPositionGenerate(UserID ,DATWORKDATE,'VARANALYSIS' ,30199999,30499999,33399999,33899999);
    
   VARMESSAGE :='Get latest effective date from TRTRAN012INDX table';
   FETCH_SIZE :=10;
   open Curgeteffectivedate;
   loop 
      fetch Curgeteffectivedate   bulk collect  into datrate LIMIT FETCH_SIZE ; 
 
  -- begin
   VARMESSAGE :='Inserting data into trsystem997B';
    
   
      --  FORALL I IN 1 .. DATRATE.count save exceptions
              
       FOR I IN 1 .. DATRATE.count
        LOOP
        BEGIN
           INSERT INTO TRSYSTEM997B
                  SELECT  /*+ RULE */  POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_ACCOUNT_CODE,POSN_USER_ID,POSN_REFERENCE_NUMBER,
                         POSN_REFERENCE_SERIAL,datrate(i).DRAT_EFFECTIVE_DATE,POSN_DEALER_ID,POSN_COUNTER_PARTY,POSN_TRANSACTION_AMOUNT,POSN_FCY_RATE,
                         POSN_USD_RATE,POSN_INR_VALUE,POSN_USD_VALUE,POSN_MTM_FCYRATE,POSN_MTM_LOCALRATE,POSN_REVALUE_USD,POSN_REVALUE_INR,
                         POSN_POSITION_USD,POSN_POSITION_INR,POSN_DUE_DATE,POSN_MATURITY_MONTH,POSN_PRODUCT_CODE,POSN_HEDGE_TRADE,
                         POSN_ASSET_LIABILITY,POSN_FOR_CURRENCY,POSN_SUBPRODUCT_CODE,
                         Pkgvaranalysis.Fncgetrate(POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY, DATRATE(I).DRAT_EFFECTIVE_DATE,DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  FNCGETDUEDAT(30299999, DATWORKDATE,DATRATE(I).DRAT_EFFECTIVE_DATE,POSN_DUE_DATE), DATRATE(I).DRAT_SERIAL_NUMBER),
                         DECODE(POSN_OTHER_CURRENCY,30400003,1,Pkgvaranalysis.Fncgetrate(POSN_OTHER_CURRENCY,30400003, DATRATE(I).DRAT_EFFECTIVE_DATE, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  FNCGETDUEDAT(30299999, DATWORKDATE,DATRATE(I).DRAT_EFFECTIVE_DATE,POSN_DUE_DATE),DATRATE(I).DRAT_SERIAL_NUMBER)),
                         POSN_MTM_PNL,POSN_MTM_PNLLOCAL,POSN_MTM_PNL,POSN_MTM_PNLLOCAL,POSN_REFERENCE_DATE,0,Datworkdate 
                  FROM TRSYSTEM997A 
                  where POSN_ACCOUNT_CODE not in (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE)
                union
                 SELECT  /*+ RULE */  POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_ACCOUNT_CODE,POSN_USER_ID,POSN_REFERENCE_NUMBER,
                       POSN_REFERENCE_SERIAL,datrate(i).DRAT_EFFECTIVE_DATE,POSN_DEALER_ID,POSN_COUNTER_PARTY,POSN_TRANSACTION_AMOUNT,POSN_FCY_RATE,
                       POSN_USD_RATE,POSN_INR_VALUE,POSN_USD_VALUE,POSN_MTM_FCYRATE,POSN_MTM_LOCALRATE,POSN_REVALUE_USD,POSN_REVALUE_INR,
                       POSN_POSITION_USD,POSN_POSITION_INR,POSN_DUE_DATE,POSN_MATURITY_MONTH,POSN_PRODUCT_CODE,POSN_HEDGE_TRADE,
                       POSN_ASSET_LIABILITY,POSN_FOR_CURRENCY,POSN_SUBPRODUCT_CODE,
                        pkgvaranalysis.fncSTRESSFutureMTMRate( posn_due_date, posn_counter_party,  posn_base_currency ,posn_other_currency,DATRATE(I).DRAT_EFFECTIVE_DATE,Datworkdate),
                       DECODE(POSN_OTHER_CURRENCY,30400003,1,Pkgvaranalysis.Fncgetrate(POSN_OTHER_CURRENCY,30400003, DATRATE(I).DRAT_EFFECTIVE_DATE, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  FNCGETDUEDAT(30299999, DATWORKDATE,DATRATE(I).DRAT_EFFECTIVE_DATE,POSN_DUE_DATE),DATRATE(I).DRAT_SERIAL_NUMBER)),
                       POSN_MTM_PNL,POSN_MTM_PNLLOCAL,0,0,POSN_REFERENCE_DATE,0,Datworkdate 
                FROM TRSYSTEM997A 
                where POSN_ACCOUNT_CODE  in (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE);
                                       
          EXCEPTION  
            WHEN OTHERS THEN
                numError := SQLCODE;
                varError := SQLERRM;
          END;
          END LOOP; 
          COMMIT ;
  
 /*  EXCEPTION   
      WHEN DML_ERRORS THEN
      L_ERRORS := SQL%BULK_EXCEPTIONS.COUNT;
       INSERT INTO TEMP VALUES('ERRCNT' ,L_ERRORS); COMMIT;              
                FOR I IN 1 .. L_ERRORS
                loop
                    NUMERROR := SQL%BULK_EXCEPTIONS(I).ERROR_CODE;
                    VARMESSAGE   := SQLERRM(-NUMERROR); 
                    VAROPERATION   := SQL%BULK_EXCEPTIONS(I).ERROR_INDEX;
                    VARERROR := GCONST.FNCRETURNERROR('VarAnalysis', NUMERROR, VARMESSAGE, 
                                  VAROPERATION, VARERROR);
                    INSERT INTO TEMP VALUES('VARERR' ,VARERROR); COMMIT;              
                end loop;
       
    END; */
    
      EXIT WHEN DATRATE.COUNT < FETCH_SIZE ; 
       
      
  end loop ; 
  commit ; 
  CLOSE CURGETEFFECTIVEDATE; 
  
  /*UPDATE TRSYSTEM997A
          SET POSN_STRESS_PNL =pkgforexprocess.fncGetOptionMTM( posn_reference_number ,posn_reference_date ,'N' ),
            POSN_STRESS_PNLLOCAL= pkgforexprocess.fncGetOptionMTM( posn_reference_number ,posn_reference_date,'N' )   
   
     where posn_account_code  in 
              (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE); */

  UPDATE TRSYSTEM997B SET POSN_STRESS_PNL = DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_STRESS_FCYRATE) ,0),
                                    -1, NVL(POSN_TRANSACTION_AMOUNT*(POSN_STRESS_FCYRATE -POSN_FCY_RATE) ,0)) ,           
                          POSN_STRESS_PNLLOCAL = DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_STRESS_FCYRATE)*POSN_STRESS_LOCALRATE ,0),
                                    -1, NVL(POSN_TRANSACTION_AMOUNT*(POSN_STRESS_FCYRATE -POSN_FCY_RATE)* POSN_STRESS_LOCALRATE ,0))
      where posn_account_code not in 
              (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);

                                 
COMMIT;
  VARMESSAGE :='Deleting data from trsystem997C for '|| Datworkdate ;
  delete from TRSYSTEM997C where posn_var_date=Datworkdate;
  
  VARMESSAGE :='Inserting data into trsystem997C';
  
  INSERT INTO TRSYSTEM997C 
            SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,
                   POSN_REFERENCE_DATE,POSN_COUNTER_PARTY,POSN_PRODUCT_CODE,POSN_HEDGE_TRADE,
                   POSN_SUBPRODUCT_CODE,SUM(NVL(POSN_STRESS_PNLLOCAL,0)),0 FROM TRSYSTEM997B
            group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_BASE_CURRENCY, 
                   POSN_OTHER_CURRENCY, POSN_REFERENCE_DATE, POSN_COUNTER_PARTY,
                   POSN_PRODUCT_CODE, POSN_HEDGE_TRADE, POSN_SUBPRODUCT_CODE ;
  
   VARMESSAGE :='deleting data into trsystem997E';
   
    delete from TRSYSTEM997e where var_var_date=Datworkdate;
   
    VARMESSAGE :='Inserting data into trsystem997E';
  --company wise
  INSERT INTO TRSYSTEM997E (var_report_type,Var_VAR_DATE ,Var_COMPANY_CODE ,Var_BASE_CURRENCY,Var_OTHER_CURRENCY,
                             Var_REFERENCE_DATE,Var_PRODUCT_CODE,Var_SUBPRODUCT_CODE,Var_VAR_AMT,Var_VAR_DESC)
   select 'COMPANYWISE' ,POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,0,POSNPNL,95 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_REFERENCE_DATE ORDER BY 3 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE )
  union
  select 'COMPANYWISE',POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,0,POSNPNL,97.5 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_REFERENCE_DATE ORDER BY 3 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 2.5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE )
   union
    select 'COMPANYWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,0,POSNPNL,99 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_REFERENCE_DATE ORDER BY 3 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 1) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE ) 
     union
    select 'COMPANYWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,0,POSNPNL,100 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_REFERENCE_DATE ORDER BY 3 ASC) A ) B
      WHERE RNUM= 1 and b.posn_var_date=Datworkdate   ;
      
  ----company  and currency wise
  
    INSERT INTO TRSYSTEM997E (var_report_type,Var_VAR_DATE ,Var_COMPANY_CODE ,Var_BASE_CURRENCY,Var_OTHER_CURRENCY,
                             Var_REFERENCE_DATE,Var_PRODUCT_CODE,Var_SUBPRODUCT_CODE,Var_VAR_AMT,Var_VAR_DESC)
    select 'CURRENCYWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,posn_REFERENCE_DATE,0,0,POSNPNL,95 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_BASE_CURRENCY, POSN_OTHER_CURRENCY, POSN_REFERENCE_DATE ORDER BY 5 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and  d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_BASE_CURRENCY=b.POSN_BASE_CURRENCY and
            d.POSN_OTHER_CURRENCY=b.POSN_OTHER_CURRENCY)
 UNION
  select 'CURRENCYWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,posn_REFERENCE_DATE,0,0,POSNPNL,97.5 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_BASE_CURRENCY, POSN_OTHER_CURRENCY, POSN_REFERENCE_DATE ORDER BY 5 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 2.5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and  d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_BASE_CURRENCY=b.POSN_BASE_CURRENCY and
            d.POSN_OTHER_CURRENCY=b.POSN_OTHER_CURRENCY)
  UNION
   select 'CURRENCYWISE',POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,posn_REFERENCE_DATE,0,0,POSNPNL,99
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_BASE_CURRENCY, POSN_OTHER_CURRENCY, POSN_REFERENCE_DATE ORDER BY 5 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 1) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
       WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_BASE_CURRENCY=b.POSN_BASE_CURRENCY and
            d.POSN_OTHER_CURRENCY=b.POSN_OTHER_CURRENCY)
       UNION
   select 'CURRENCYWISE',POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,posn_REFERENCE_DATE,0,0,POSNPNL,100
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_BASE_CURRENCY,A.POSN_OTHER_CURRENCY ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_BASE_CURRENCY,POSN_OTHER_CURRENCY,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_BASE_CURRENCY, POSN_OTHER_CURRENCY, POSN_REFERENCE_DATE ORDER BY 5 ASC) A ) B
      WHERE b.posn_var_date=Datworkdate and RNUM= 1   ;
      --COMPANY AND PRODUCT WISE
       INSERT INTO TRSYSTEM997E (var_report_type,Var_VAR_DATE ,Var_COMPANY_CODE ,Var_BASE_CURRENCY,Var_OTHER_CURRENCY,
                             Var_REFERENCE_DATE,Var_PRODUCT_CODE,Var_SUBPRODUCT_CODE,Var_VAR_AMT,Var_VAR_DESC)
   select 'PRODUCTWISE',POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,POSN_PRODUCT_CODE,0,POSNPNL,95 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_PRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_PRODUCT_CODE=b.POSN_PRODUCT_CODE )
 UNION
   select 'PRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,POSN_PRODUCT_CODE,0,POSNPNL,97.5 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_PRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 2.5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_PRODUCT_CODE=b.POSN_PRODUCT_CODE )
  UNION
    select 'PRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,POSN_PRODUCT_CODE,0,POSNPNL,99 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_PRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 1) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_PRODUCT_CODE=b.POSN_PRODUCT_CODE )
  UNION
   select 'PRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,POSN_PRODUCT_CODE,0,POSNPNL,100
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE,0,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_PRODUCT_CODE,0 ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_PRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_PRODUCT_CODE,POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE b.posn_var_date=Datworkdate and  RNUM= 1     ; 

     --COMPANY AND SUB PRODUCT WISE
       INSERT INTO TRSYSTEM997E (var_report_type,Var_VAR_DATE ,Var_COMPANY_CODE ,Var_BASE_CURRENCY,Var_OTHER_CURRENCY,
                             Var_REFERENCE_DATE,Var_PRODUCT_CODE,Var_SUBPRODUCT_CODE,Var_VAR_AMT,Var_VAR_DESC)
   select 'SUBPRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,POSN_SUBPRODUCT_CODE,POSNPNL,95 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_SUBPRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_SUBPRODUCT_CODE=b.POSN_SUBPRODUCT_CODE )
 UNION
   select 'SUBPRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,POSN_SUBPRODUCT_CODE,POSNPNL,97.5 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_SUBPRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 5) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_SUBPRODUCT_CODE=b.POSN_SUBPRODUCT_CODE )
  UNION
    select 'SUBPRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,POSN_SUBPRODUCT_CODE,POSNPNL,99 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_SUBPRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 1) FROM 
      (SELECT  DISTINCT POSN_VAR_DATE ,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE b.posn_var_date=Datworkdate and d.POSN_VAR_DATE = B.POSN_VAR_DATE and d.POSN_COMPANY_CODE=b.POSN_COMPANY_CODE and d.POSN_SUBPRODUCT_CODE=b.POSN_SUBPRODUCT_CODE )
  UNION
   select 'SUBPRODUCTWISE', POSN_VAR_DATE,POSN_COMPANY_CODE,0,0,posn_REFERENCE_DATE,0,POSN_SUBPRODUCT_CODE,POSNPNL,100 
     from (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE,a.POSN_COMPANY_CODE,A.POSN_SUBPRODUCT_CODE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_COMPANY_CODE,POSN_SUBPRODUCT_CODE,POSN_REFERENCE_DATE ,SUM(NVL(POSN_PNL_DIFFAMT,0)) POSNPNL FROM TRSYSTEM997C
                  group by POSN_VAR_DATE, POSN_COMPANY_CODE, POSN_SUBPRODUCT_CODE, POSN_REFERENCE_DATE ORDER BY 4 ASC) A ) B
      WHERE b.posn_var_date=Datworkdate and RNUM= 1 ; 


  
 /* UPDATE TRSYSTEM997C SET POSN_VAR_DESC =95
    WHERE POSN_REFERENCE_DATE= (SELECT B.POSN_REFERENCE_DATE FROM
    (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_REFERENCE_DATE ,SUM(POSN_PNL_DIFFAMT) POSNPNL FROM TRSYSTEM997C
                  GROUP BY POSN_VAR_DATE, POSN_REFERENCE_DATE ORDER BY 2 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 5) FROM (SELECT  DISTINCT POSN_VAR_DATE ,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE d.POSN_VAR_DATE = B.POSN_VAR_DATE )) ;            
    
    UPDATE TRSYSTEM997C SET POSN_VAR_DESC =97.5
    WHERE POSN_REFERENCE_DATE= (SELECT B.POSN_REFERENCE_DATE FROM
    (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_REFERENCE_DATE ,SUM(POSN_PNL_DIFFAMT) POSNPNL FROM TRSYSTEM997C
                  GROUP BY POSN_VAR_DATE, POSN_REFERENCE_DATE ORDER BY 2 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 2.5) FROM (SELECT  DISTINCT POSN_VAR_DATE ,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE d.POSN_VAR_DATE = B.POSN_VAR_DATE )) ;  
    
    UPDATE TRSYSTEM997C SET POSN_VAR_DESC =99
    WHERE POSN_REFERENCE_DATE= (SELECT B.POSN_REFERENCE_DATE FROM
    (SELECT A.POSN_VAR_DATE,A.POSN_REFERENCE_DATE ,A.POSNPNL ,
         ROW_NUMBER() OVER( PARTITION BY  A.POSN_VAR_DATE ORDER BY A.POSNPNL ASC) rnum FROM
          (SELECT POSN_VAR_DATE,POSN_REFERENCE_DATE ,SUM(POSN_PNL_DIFFAMT) POSNPNL FROM TRSYSTEM997C
                  GROUP BY POSN_VAR_DATE, POSN_REFERENCE_DATE ORDER BY 2 ASC) A ) B
      WHERE RNUM= (SELECT ROUND((COUNT(*)/100)* 1) FROM (SELECT  DISTINCT POSN_VAR_DATE ,POSN_REFERENCE_DATE FROM TRSYSTEM997C ) D 
      WHERE d.POSN_VAR_DATE = B.POSN_VAR_DATE )) ; */

   

COMMIT;
numSerial :=1;
return numSerial;
 
 EXCEPTION
 
 WHEN OTHERS THEN
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Stresscal', numError, varMessage, 
                      varOperation, varError);
      ROLLBACK;                      
      raise_application_error(-20101, varError);                      
      RETURN NUMERROR;

 END ;
Function fncPositionGenerate
    ( UserID in varchar2,
      AsonDate in date)
    return number 
    is
  
    PRAGMA AUTONOMOUS_TRANSACTION;

    datTemp         date;
    numError        number;
    varOperation    GConst.gvarOperation%type;
    varMessage      GConst.gvarMessage%type;
    VARERROR        GCONST.GVARERROR%TYPE;
    VARCOMPANYCODE VARCHAR2(200);
    datpositionworkdate DATE;
Begin
    numError := 0;
       
   
     VARMESSAGE := 'Generating Position Figures for date: ' || ASONDATE;
     
    VARCOMPANYCODE :='';
   /* SELECT MAX(HDAY_CALENDAR_DATE) INTO DATPOSITIONWORKDATE FROM TRSYSTEM001 
      WHERE HDAY_CALENDAR_DATE <=ASONDATE 
        AND HDAY_LOCATION_CODE =30299999 AND HDAY_DAY_STATUS IN (26400004,26400005) ; */
    DATPOSITIONWORKDATE :=AsonDate ;   
    
    VAROPERATION := 'Deleting records for TRSYSTEM997D ';
    delete from  TRSYSTEM997D where posn_mtm_date= AsonDate;
------------ Underlyings in Trtran002 ------------------------    
    VAROPERATION := 'Inserting records for Underlying Details';
--    INSERT INTO TRSYSTEM997D
--    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
--     posn_reference_number, posn_reference_serial, posn_reference_date,
--     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
--     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
--     posn_counter_party, posn_due_date, posn_maturity_month,
--     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
--     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
--     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,posn_contract_no)
--    select datpositionworkdate,trad_company_code, trad_trade_currency,30400003,
--    trad_import_export,trad_trade_reference, 0, trad_entry_date,
--      pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILCONTRACTOS,
--        GConst.AMOUNTFCY, datpositionworkdate) 
----        -  nvl((Select 
----         sum(brel_reversal_fcy)
----        From Trtran002 a ,Trtran003 b
----        Where a.Trad_Trade_Reference=b.brel_Trade_Reference
----        And a.Trad_Contract_No=m.Trad_Contract_No
----        and to_char(b.brel_entry_date,'yyyymm')= to_char(m.trad_maturity_date,'yyyymm')
----        and b.brel_entry_date <=datpositionworkdate
----        And a.Trad_Record_Status In (10200005)
----        And b.Brel_Record_Status Not In (10200005,10200006)),0)
--        tradefcy,trad_trade_rate,0,
--      pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILCONTRACTOS,
--        GCONST.AMOUNTINR, datpositionworkdate) TRADEINR, 0, USERID, NULL,TRAD_LOCAL_BANK,  
--      trad_maturity_date,pkgforexprocess.fncAllotMonth(datpositionworkdate, trad_maturity_date),
--      'E', DECODE(SIGN(25900050 - TRAD_IMPORT_EXPORT),-1,'L','A'), 30400003,
--      TRAD_PRODUCT_CATEGORY,TRAD_SUBPRODUCT_CODE,TRAD_SPOT_RATE ,
--      TRAD_FORWARD_RATE,TRAD_MARGIN_RATE,12400002,TRAD_TRADE_REFERENCE,
--      TRAD_USER_REFERENCE,trad_trade_remarks,trad_contract_no
--      from trtran002 m
--      WHERE trad_reference_date <= datpositionworkdate and ---added by prasanta
--      (TRAD_COMPLETE_DATE IS NULL OR TRAD_COMPLETE_DATE > datpositionworkdate)
--     -- and to_char(trad_company_code) in (VARCOMPANYCODE)
--      and trad_record_status in
--      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);
      INSERT INTO TRSYSTEM997D
    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,posn_contract_no)
    select datpositionworkdate,trad_company_code, trad_trade_currency,30400003,
    trad_import_export,trad_trade_reference, 0, trad_entry_date,
      pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
        GConst.AMOUNTFCY, datpositionworkdate) -  nvl((Select 
         sum(brel_reversal_fcy)
        From Trtran002 a ,Trtran003 b
        Where a.Trad_Trade_Reference=b.brel_Trade_Reference
        And a.Trad_Contract_No=m.Trad_Contract_No
        and to_char(b.brel_entry_date,'yyyymm')= to_char(m.trad_maturity_date,'yyyymm')
        And a.Trad_Record_Status In (10200005)
        And b.Brel_Record_Status Not In (10200005,10200006)),0)
        tradefcy,trad_trade_rate,0,
      pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
        GCONST.AMOUNTINR, datpositionworkdate) TRADEINR, 0, USERID, NULL,TRAD_LOCAL_BANK,  
      trad_maturity_date,pkgforexprocess.fncAllotMonth(datpositionworkdate, trad_maturity_date),
      'E', DECODE(SIGN(25900050 - TRAD_IMPORT_EXPORT),-1,'L','A'), 30400003,
      TRAD_PRODUCT_CATEGORY,TRAD_SUBPRODUCT_CODE,TRAD_SPOT_RATE ,
      TRAD_FORWARD_RATE,TRAD_MARGIN_RATE,12400002,TRAD_TRADE_REFERENCE,
      TRAD_USER_REFERENCE,trad_trade_remarks,trad_contract_no
      from trtran002 m
      WHERE trad_reference_date <= datpositionworkdate and ---added by prasanta
      (TRAD_COMPLETE_DATE IS NULL OR TRAD_COMPLETE_DATE > datpositionworkdate)
     -- and to_char(trad_company_code) in (VARCOMPANYCODE)
      and trad_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);
 
      numError := SQl%ROWCOUNT; 
     
------ Trade Deals in trtran001 -----------------------------      
    VAROPERATION := 'Inserting records for Trade Forward Deals';
    
--    INSERT INTO TRSYSTEM997D
--    (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
--     posn_reference_number, posn_reference_serial, posn_reference_date,
--     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
--     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
--     posn_counter_party, posn_due_date, posn_maturity_month,
--     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
--     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
--     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,POSN_BROKER_CODE,POSN_MATURITY_FROM)
--    select datpositionworkdate,deal_company_code CompanyCode, deal_base_currency,deal_other_currency,
--        decode(deal_buy_sell, GConst.PURCHASEDEAL, GConst.FORWARDTRADEBUY,  
--            GConst.SALEDEAL, GConst.FORWARDTRADESALE) AccountCode,
--      deal_deal_number, deal_serial_number, deal_execute_date,
--      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--        GConst.AMOUNTFCY, datpositionworkdate) tradefcy, deal_exchange_rate, deal_local_rate,
--     -- decode(deal_other_currency, GConst.INDIANRUPEE, deal_exchange_rate, deal_local_rate)  
--       -- deal_exchange_rate,0,
--      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--        GConst.AMOUNTINR, datpositionworkdate) tradeinr,0,
--      UserID, deal_user_id, deal_counter_party, deal_maturity_date,
--      pkgforexprocess.fncAllotMonth(deal_counter_party, datpositionworkdate, deal_maturity_date),
--      'T', DECODE(DEAL_BUY_SELL, GCONST.PURCHASEDEAL, 'A','L'), DEAL_OTHER_CURRENCY,
--      deal_backup_deal,deal_init_code,DEAL_SPOT_RATE ,DEAL_FORWARD_RATE,DEAL_MARGIN_RATE,12400002,
--      NULL,DEAL_USER_REFERENCE,DEAL_DEALER_REMARKS,deal_counter_party,deal_maturity_from
--      FROM TRTRAN001
--      WHERE deal_execute_date <=datpositionworkdate and ---added by prasanta
--      ((deal_complete_date is null) or (deal_complete_date > datpositionworkdate)) 
--      AND DEAL_HEDGE_TRADE = GCONST.TRADEDEAL
--     -- and to_char(deal_company_code) in (VARCOMPANYCODE)
--      AND DEAL_RECORD_STATUS IN
--      (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);

    VAROPERATION := 'Inserting Hedge Deals for Forwards';
    INSERT INTO TRSYSTEM997D
    (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency,
    posn_account_code,posn_reference_number, posn_reference_serial,
    posn_reference_date, posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,POSN_BROKER_CODE,POSN_MATURITY_FROM)
    select datpositionworkdate,deal_company_code CompanyCode, deal_base_currency,deal_other_currency,
       decode(deal_buy_sell, GConst.PURCHASEDEAL, GConst.FORWARDHEDGEBUY,
            GConst.SALEDEAL, GConst.FORWARDHEDGESALE) AccountCode,
      deal_deal_number, 0 , deal_execute_date,
     pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
        GConst.AMOUNTFCY, datpositionworkdate) tradefcy, deal_exchange_rate,deal_local_rate,
      --decode(deal_other_currency, GConst.INDIANRUPEE, deal_exchange_rate, deal_local_rate),  
       -- 0,
      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
        GConst.AMOUNTINR, datpositionworkdate) tradeinr,0,
      UserID, deal_user_id, deal_counter_party, deal_maturity_date,
      pkgforexprocess.fncAllotMonth(deal_counter_party, datpositionworkdate, 
        pkgReturnCursor.fncRollover(deal_deal_number)),
      'H', DECODE(DEAL_BUY_SELL, GCONST.PURCHASEDEAL, 'A','L'),DEAL_OTHER_CURRENCY,
       deal_backup_deal,deal_init_code,DEAL_SPOT_RATE ,DEAL_FORWARD_RATE,DEAL_MARGIN_RATE,12400002,
      NULL,DEAL_USER_REFERENCE,Deal_Dealer_Remarks,deal_counter_party,deal_maturity_from
      from trtran001
      where ((deal_complete_date is null) or (deal_complete_date > datpositionworkdate))
      and deal_execute_date <= datpositionworkdate
      AND DEAL_HEDGE_TRADE IN (GCONST.HEDGEDEAL, GCONST.FTDEAL)
     -- and to_char(deal_company_code) in (VARCOMPANYCODE)
      /*and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
        GConst.AMOUNTFCY, datpositionworkdate) >0*/
      and deal_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);
      
    VAROPERATION := 'Inserting records for FCY Loans';
    INSERT INTO TRSYSTEM997D
    (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS)
    select datpositionworkdate ,fcln_company_code, fcln_currency_code,30400003, 
      decode(fcln_loan_type, GConst.LOANBUYERSCREDIT, GConst.TRADEBUYERCREDIT, 
      GConst.LOANPCFC, GConst.TRADEPCFC, GConst.LOANPSCFC, GConst.TRADEPSCFC),
      fcln_loan_number, 0, fcln_sanction_date,
      pkgforexprocess.fncGetOutstanding(fcln_loan_number, 0,GConst.UTILFCYLOAN,
        GConst.AMOUNTFCY, datpositionworkdate) fcln_sanctioned_fcy,fcln_conversion_rate,0, 
      pkgforexprocess.fncGetOutstanding(fcln_loan_number, 0,GConst.UTILFCYLOAN,
        GConst.AMOUNTINR, datpositionworkdate) fcln_sanctioned_inr,0, 
      UserID, null, fcln_local_bank, fcln_maturity_to,
      pkgforexprocess.fncAllotMonth(datpositionworkdate, fcln_maturity_to),'E','L',30400003,
      FCLN_PRODUCT_CATEGORY,FCLN_SUBPRODUCT_CODE,12400002,NULL,Fcln_Bank_Reference,Fcln_Loan_Remarks
      FROM TRTRAN005
      WHERE fcln_sanction_date <=datpositionworkdate and ----added by Prasanta
      ((FCLN_COMPLETE_DATE IS NULL) OR (FCLN_COMPLETE_DATE > datpositionworkdate))
    --  and to_char(fcln_company_code) in (VARCOMPANYCODE)
      and fcln_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
      and fcln_loan_type not in (GConst.LOANBUYERSCREDIT);

     VAROPERATION := 'Inserting records for Buyers Credit';
    INSERT INTO TRSYSTEM997D
    (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS)
    select datpositionworkdate,bcrd_company_code, bcrd_currency_code, 30400003,
           GConst.TRADEBUYERCREDIT, bcrd_buyers_credit, 0, bcrd_sanction_date,
      pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit, 0,GConst.UTILBCRLOAN,
        GConst.AMOUNTFCY, datpositionworkdate) bcrd_sanctioned_fcy,bcrd_conversion_rate,0, 
      pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit, 0,GConst.UTILBCRLOAN,
        GConst.AMOUNTINR, datpositionworkdate) bcrd_sanctioned_inr,0, 
      UserID, null, bcrd_local_bank, bcrd_due_date,
      pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, BCRD_DUE_DATE), 'E','L',30400003,
      33300003,33800003,BCRD_SPOT_RATE ,BCRD_FORWARD_RATE,BCRD_MARGIN_RATE,12400002,
      NULL,Bcrd_Sanction_Reference,Bcrd_Loan_Remarks
      from BuyersCredit
      WHERE ((BCRD_COMPLETION_DATE IS NULL) OR (BCRD_COMPLETION_DATE > datpositionworkdate))
     -- and to_char(bcrd_company_code) in (VARCOMPANYCODE)
      and bcrd_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
  
  
    VAROPERATION := 'Insert Money Module Data in to Assests ';---exposure
    INSERT INTO TRSYSTEM997D
     (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
      posn_counter_party, posn_due_date, posn_maturity_month,
      POSN_PRODUCT_CODE,posn_process_complete)
     select datpositionworkdate,mdel_company_code, mdel_currency_code,30400003,
      decode( 24900011,24900011,Gconst.MONEYBORROWING,Gconst.TRADEBUYERCREDIT),
      mdel_deal_number, 0, mdel_execute_date,
      mdel_deal_amount,mdel_exchange_rate,mdel_exchange_rate, 
      mdel_amount_local,0,UserID, null,
      mdel_counter_party, mdel_due_date,1,24900011,12400002
      from trtran031
      where 
      --((mdel_complete_date is null) or (mdel_complete_date > datpositionworkdate))
      MDEL_PROCESS_COMPLETE= GCONST.OPTIONNO
   --   and to_char(mdel_company_code) in (VARCOMPANYCODE)
      and mdel_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);


      
varOperation := 'Insert Commodity Module in to Assests '; --exposure
-- posn_transaction_amount     No of LOts
-- posn_fcy_rate               Lot Price
-- posn_usd_rate               Lot Size
-- posn_inr_value              Transaction Amount
-- posn_m2m_inrrate            M2M Lot Price
-- posn_revalue_inr            Tansaction Amount For M2m Rate
-- posn_position_inr           Profit loss 

    INSERT INTO TRSYSTEM997D
     (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency,
     posn_account_code, posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      POSN_USER_ID, POSN_DEALER_ID,POSN_COUNTER_PARTY, POSN_DUE_DATE, 
      POSN_MATURITY_MONTH, POSN_PRODUCT_CODE,posn_MTM_FCYrate,posn_process_complete)
     select datpositionworkdate,cmdl_company_code, cmdl_currency_code, 30400003,
      decode(cmdl_hedge_trade,gconst.HEDGEDEAL,decode(cmdl_buy_sell,Gconst.PURCHASEDEAL,Gconst.COMMODITYHEDGEBUY,
             Gconst.SALEDEAL,Gconst.COMMODITYHEDGESALE),gconst.TRADEDEAL,
            decode(cmdl_buy_sell,Gconst.PURCHASEDEAL,Gconst.COMMODITYTRADEBUY,Gconst.SALEDEAL,Gconst.COMMODITYTRADESALE)),
      cmdl_deal_number, 0, cmdl_execute_date,
      pkgforexprocess.fncGetOutstanding(cmdl_deal_number, 0,GConst.UTILCOMMODITYDEAL,
      GConst.AMOUNTFCY, datpositionworkdate),pkgforexprocess.fncCommDealRate(cmdl_deal_number),(cmdl_product_quantity/cmdl_lot_numbers) ,
      UserID, null, cmdl_exchange_code, cmdl_maturity_date,1,cmdl_product_code,
      pkgforexprocess.fncCommodityMTMRate(cmdl_maturity_date,cmdl_exchange_code,cmdl_product_code,datpositionworkdate),12400002
      from trtran051
      where ((cmdl_complete_date is null) or (cmdl_complete_date > datpositionworkdate))
      AND CMDL_PROCESS_COMPLETE= GCONST.OPTIONNO
   --   and to_char(cmdl_company_code) in (VARCOMPANYCODE)
      and cmdl_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);

    VAROPERATION := 'Inserting Currency Futures';
    INSERT INTO TRSYSTEM997D
     (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      posn_user_id, posn_dealer_id,
      POSN_COUNTER_PARTY, POSN_DUE_DATE, POSN_MATURITY_MONTH, POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,
      posn_MTM_FCYrate,POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,posn_process_complete,
      POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,POSN_BROKER_CODE,POSN_MATURITY_FROM)
     select datpositionworkdate,cfut_company_code, cfut_base_currency, cfut_other_currency,
      decode(cfut_hedge_trade,gconst.HEDGEDEAL,decode(cfut_buy_sell,Gconst.PURCHASEDEAL,Gconst.CFHEDGEBUY,
             Gconst.SALEDEAL,Gconst.CFHEDGESALE),GCONST.FTDEAL ,
            DECODE(CFUT_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.CFHEDGEBUY,Gconst.SALEDEAL,Gconst.CFHEDGESALE)),
      cfut_deal_number, 0, cfut_execute_date, 
      pkgforexprocess.fncGetOutstanding(CFUT_DEAL_NUMBER, 0,GCONST.UTILFUTUREDEAL, GCONST.AMOUNTFCY, datpositionworkdate) * 1000,
      CFUT_EXCHANGE_RATE, DECODE(CFUT_BASE_CURRENCY, 30400004, pkgforexprocess.FNCFUTUREDEALRATE(CFUT_DEAL_NUMBER),
      pkgforexprocess.Fncgetrate(CFUT_BASE_CURRENCY,30400003,datpositionworkdate,cfut_buy_sell,0,  cfut_maturity_date)),
      UserID, cfut_user_id, cfut_exchange_code, cfut_maturity_date,
      pkgforexprocess.fncAllotMonth(datpositionworkdate, cfut_maturity_date),
      /*decode(cfut_hedge_trade,gconst.HEDGEDEAL,decode(cfut_buy_sell,Gconst.PURCHASEDEAL,Gconst.CFHEDGEBUY,
             Gconst.SALEDEAL,Gconst.CFHEDGESALE),gconst.TRADEDEAL,
            DECODE(CFUT_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.CFTRADEBUY,GCONST.SALEDEAL,GCONST.CFTRADESALE)),*/
       CFUT_BACKUP_DEAL ,CFUT_INIT_CODE,      
      pkgforexprocess.fncFutureDealRate(cfut_deal_number), decode(cfut_hedge_trade,GConst.TRADEDEAL,'TF','HF'),
      decode(cfut_buy_sell, Gconst.PURCHASEDEAL, 'A','L'),cfut_other_currency,12400002,
      NULL,Cfut_User_Reference,Cfut_Dealer_Remark,CFUT_COUNTER_PARTY,cfut_maturity_from
      from trtran061
      where cfut_execute_date <=   datpositionworkdate
      and (( cfut_process_complete =  Gconst.optionYes and cfut_complete_date > datpositionworkdate)
       OR cfut_process_complete= Gconst.optionNO)
      and cfut_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GCONST.STATUSAPREUTHORIZATION);

varOperation := 'Insert Currency Options Module in to Assests ';

    INSERT INTO TRSYSTEM997D
     (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      POSN_USER_ID, POSN_DEALER_ID, POSN_COUNTER_PARTY, POSN_DUE_DATE, 
      posn_maturity_month, posn_product_code,posn_subproduct_code,posn_MTM_FCYrate,
      POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,posn_process_complete,Posn_Mtm_Pnl,
      POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,POSN_BROKER_CODE,POSN_OPTION_TYPE,
      POSN_MATURITY_FROM,POSN_PREMIUM_STATUS,POSN_PREMIUM_AMOUNT)
     select datpositionworkdate,copt_company_code, copt_base_currency, copt_other_currency,
      decode(copt_hedge_trade,gconst.HEDGEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY, Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),
        gconst.FTDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY, Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),         
        gconst.TRADEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLTRADEBUY, Gconst.SALEDEAL,Gconst.COCALLTRADESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTTRADEBUY, Gconst.SALEDEAL,Gconst.COPUTTRADESALE))),
      copt_deal_number, cosu_serial_number, copt_execute_date,
      pkgForexProcess.fncGetOutstanding(COPT_DEAL_NUMBER,COSU_SERIAL_NUMBER,GConst.UTILOPTIONHEDGEDEAL,1,datpositionworkdate,null,COSU_SERIAL_NUMBER),
      cosu_strike_rate,cosu_strike_rate,
      --(copt_lot_quantity/copt_lot_numbers),fncFutureDealRate(cfut_deal_number),(cfut_lot_quantity/cfut_lot_numbers) ,
      UserID, null, case when COPT_CONTRACT_TYPE = 32800001 then
      copt_broker_code else copt_counter_party end, 
      copt_maturity_date, pkgforexprocess.fncAllotMonth(datpositionworkdate, copt_maturity_date),
      /*decode(copt_hedge_trade,gconst.HEDGEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY,Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),gconst.TRADEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLTRADEBUY,Gconst.SALEDEAL,Gconst.COCALLTRADESALE),Gconst.OptionPut,        
        DECODE(COSU_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.COPUTTRADEBUY, GCONST.SALEDEAL,GCONST.COPUTTRADESALE))),*/
        
        COPT_BACKUP_DEAL ,COPT_INIT_CODE,COSU_STRIKE_RATE,
      decode(copt_hedge_trade,gconst.TRADEDEAL,'TO','HO'),
      case 
      when cosu_buy_sell = GConst.SALEDEAL and cosu_option_type = GConst.OptionPut then 'A'
      when cosu_buy_sell = Gconst.PURCHASEDEAL and cosu_option_type = Gconst.OptionCall then 'A'
      when cosu_buy_sell = Gconst.SALEDEAL and cosu_option_type = Gconst.OptionCall then 'L'
      when cosu_buy_sell = GConst.PURCHASEDEAL and cosu_option_type = GConst.OptionPut then 'L'
      end, copt_other_currency ,12400002,
      pkgForexProcess.fncGetOptionMTM(copt_deal_number,datpositionworkdate,'N'),
      NULL,Copt_User_Reference,Copt_Dealer_Remark,
      case when COPT_CONTRACT_TYPE = 32800001 then
      copt_broker_code
      else copt_counter_party end,COSU_OPTION_TYPE,copt_expiry_date,COPT_PREMIUM_STATUS,
      CASE WHEN COPT_PREMIUM_STATUS = 33200002 THEN ABS(COPT_PREMIUM_AMOUNT)*-1 ELSE COPT_PREMIUM_AMOUNT END
      from trtran071 right outer join trtran072
      on copt_deal_number=cosu_deal_number
      WHERE  COPT_execute_date <=   datpositionworkdate
      AND ((COPT_COMPLETE_DATE IS NULL) OR (COPT_COMPLETE_DATE > datpositionworkdate))
    --  and to_char(copt_company_code) in (VARCOMPANYCODE)
      and copt_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GCONST.STATUSAPREUTHORIZATION);

---------FC DELIVERY--------------
INSERT INTO TRSYSTEM997D
    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     POSN_REFERENCE_NUMBER, POSN_REFERENCE_SERIAL, POSN_REFERENCE_DATE,
     posn_transaction_amount,POSN_CANCEL_PNL, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_CANCEL_RATE,POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,posn_contract_no)

  SELECT DATPOSITIONWORKDATE,TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY,DEAL_OTHER_CURRENCY,TRAD_IMPORT_EXPORT,
        DEAL_DEAL_NUMBER,DEAL_SERIAL_NUMBER, deal_execute_date,CDEL_CANCEL_AMOUNT,NVL(CDEL_PROFIT_LOSS,0),Trad_Trade_Rate,
        0,DECODE(DEAL_OTHER_CURRENCY ,30400003,CDEL_OTHER_AMOUNT,CDEL_CANCEL_INR),0, USERID, NULL,TRAD_LOCAL_BANK,  
        DEAL_MATURITY_DATE,pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, TRAD_MATURITY_DATE),
        'EFC', DECODE(SIGN(25900050 - TRAD_IMPORT_EXPORT),-1,'L','A'),30400003,
        trad_product_category,trad_subproduct_code,A.CDEL_SPOT_RATE,A.CDEL_FORWARD_RATE, A.CDEL_MARGIN_RATE,12400001,
        CDEL_CANCEL_RATE,Cdel_Trade_Reference,Trad_User_Reference,Deal_Dealer_Remarks,trad_contract_no
   FROM 
      trtran006 A,trtran002,trtran001
      WHERE CDEL_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
      AND CDEL_DEAL_NUMBER = DEAL_DEAL_NUMBER
      and cdel_cancel_type=27000002
      AND CDEL_CANCEL_DATE = DATPOSITIONWORKDATE
      and cdel_record_status  between 10200001 and 10200004
      AND DEAL_RECORD_STATUS  BETWEEN 10200001 AND 10200004
      AND TRAD_RECORD_STATUS  BETWEEN 10200001 AND 10200004
      AND DEAL_DEAL_TYPE NOT IN(25400001)
  union all
  SELECT DATPOSITIONWORKDATE,BCRD_COMPANY_CODE,BCRD_CURRENCY_CODE,30400003,GConst.TRADEBUYERCREDIT,
        DEAL_DEAL_NUMBER,DEAL_SERIAL_NUMBER, deal_execute_date,CDEL_CANCEL_AMOUNT,NVL(CDEL_PROFIT_LOSS,0),BCRD_CONVERSION_RATE,
        0,DECODE(DEAL_OTHER_CURRENCY ,30400003,CDEL_OTHER_AMOUNT,CDEL_CANCEL_INR),0, USERID, NULL,bcrd_local_bank,  
        DEAL_MATURITY_DATE,pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, BCRD_DUE_DATE),
        'EFC','L',30400003,
        0,0,a.CDEL_SPOT_RATE,a.CDEL_FORWARD_RATE,a.CDEL_MARGIN_RATE,12400001,
        CDEL_CANCEL_RATE,Cdel_Trade_Reference,Bcrd_Sanction_Reference,Deal_Dealer_Remarks,'0'
    FROM 
      trtran006 a,trtran045,trtran001
      WHERE CDEL_TRADE_REFERENCE = BCRD_BUYERS_CREDIT
      AND cdel_deal_number = deal_deal_number
      AND cdel_cancel_date = DATPOSITIONWORKDATE
      and cdel_record_status  between 10200001 and 10200004
      and deal_record_status  between 10200001 and 10200004
      and BCRD_RECORD_STATUS  between 10200001 and 10200004      
      AND DEAL_DEAL_TYPE NOT IN(25400001);


-------------CASH SETTLE---------------------------------------
   INSERT INTO TRSYSTEM997D
    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     POSN_REFERENCE_NUMBER, POSN_REFERENCE_SERIAL, POSN_REFERENCE_DATE,
     posn_transaction_amount,POSN_CANCEL_PNL, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_CANCEL_RATE,POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS,posn_contract_no)

  SELECT DATPOSITIONWORKDATE,TRAD_COMPANY_CODE,TRAD_TRADE_CURRENCY,30400003,TRAD_IMPORT_EXPORT,
        DEAL_DEAL_NUMBER,DEAL_SERIAL_NUMBER, deal_execute_date,CDEL_CANCEL_AMOUNT,NVL(CDEL_PROFIT_LOSS,0),trad_trade_rate,0,
         decode(deal_other_currency ,30400003,cdel_other_amount,cdel_cancel_inr),0, USERID, NULL,TRAD_LOCAL_BANK,  
      TRAD_MATURITY_DATE,pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, TRAD_MATURITY_DATE),
      'ECS', DECODE(SIGN(25900050 - TRAD_IMPORT_EXPORT),-1,'L','A'),30400003,
      trad_product_category,trad_subproduct_code,A.CDEL_SPOT_RATE,A.CDEL_FORWARD_RATE,A.CDEL_MARGIN_RATE,12400001,
      Cdel_Cancel_Rate,Cdel_Trade_Reference,Trad_User_Reference,Deal_Dealer_Remarks,trad_contract_no
   FROM 
      trtran006 A,trtran002,trtran001
      WHERE CDEL_TRADE_REFERENCE = TRAD_TRADE_REFERENCE
      AND CDEL_DEAL_NUMBER = DEAL_DEAL_NUMBER
      and cdel_cancel_type=27000002
      AND CDEL_CANCEL_DATE = DATPOSITIONWORKDATE
      and cdel_record_status  between 10200001 and 10200004
      AND DEAL_RECORD_STATUS  BETWEEN 10200001 AND 10200004
      AND TRAD_RECORD_STATUS  BETWEEN 10200001 AND 10200004
      AND DEAL_DEAL_TYPE =25400001
      union all
        SELECT DATPOSITIONWORKDATE,BCRD_COMPANY_CODE,BCRD_CURRENCY_CODE,30400003,GConst.TRADEBUYERCREDIT,
        DEAL_DEAL_NUMBER,DEAL_SERIAL_NUMBER, deal_execute_date,CDEL_CANCEL_AMOUNT,NVL(CDEL_PROFIT_LOSS,0),BCRD_CONVERSION_RATE,
        0,DECODE(DEAL_OTHER_CURRENCY ,30400003,CDEL_OTHER_AMOUNT,CDEL_CANCEL_INR),0, USERID, NULL,bcrd_local_bank,  
        DEAL_MATURITY_DATE,pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, BCRD_DUE_DATE),
        'ECS','L',30400003,
        0,0,a.CDEL_SPOT_RATE,a.CDEL_FORWARD_RATE,a.CDEL_MARGIN_RATE,12400001,
        CDEL_CANCEL_RATE,Cdel_Trade_Reference,Bcrd_Sanction_Reference,Deal_Dealer_Remarks,'0'
    FROM 
      trtran006 a,trtran045,trtran001
      WHERE CDEL_TRADE_REFERENCE = BCRD_BUYERS_CREDIT
      AND cdel_deal_number = deal_deal_number
      AND cdel_cancel_date = DATPOSITIONWORKDATE
      and cdel_record_status  between 10200001 and 10200004
      and deal_record_status  between 10200001 and 10200004
      and BCRD_RECORD_STATUS  between 10200001 and 10200004      
      AND DEAL_DEAL_TYPE =25400001;


-------------------------------------------FC CNCEL------------------
--    INSERT INTO TRSYSTEM997D
--    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
--     POSN_REFERENCE_NUMBER, POSN_REFERENCE_SERIAL, POSN_REFERENCE_DATE,
--     posn_transaction_amount,POSN_CANCEL_PNL, posn_fcy_rate, posn_usd_rate,
--     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
--     posn_counter_party, posn_due_date, posn_maturity_month,
--     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
--     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
--     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS)
--
--  SELECT DATPOSITIONWORKDATE,DEAL_COMPANY_CODE,DEAL_BASE_CURRENCY,DEAL_OTHER_CURRENCY,
--         DECODE(DEAL_BUY_SELL, GCONST.PURCHASEDEAL, GCONST.FORWARDTRADEBUY,  
--         GCONST.SALEDEAL, GCONST.FORWARDTRADESALE) ACCOUNTCODE,
--         DEAL_DEAL_NUMBER,DEAL_SERIAL_NUMBER, deal_execute_date,CDEL_CANCEL_AMOUNT,CDEL_PROFIT_LOSS,
--         CDEL_CANCEL_RATE,0, DECODE(DEAL_OTHER_CURRENCY ,30400003,CDEL_OTHER_AMOUNT,CDEL_CANCEL_INR),0,
--         USERID, NULL,DEAL_COUNTER_PARTY, DEAL_MATURITY_DATE,pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, DEAL_MATURITY_DATE),
--         DECODE(DEAL_HEDGE_TRADE,26000002 ,'TC','HC') , DECODE(DEAL_BUY_SELL, GCONST.PURCHASEDEAL, 'A','L'),
--         DEAL_OTHER_CURRENCY, deal_backup_deal,deal_init_code,A.CDEL_SPOT_RATE,A.CDEL_FORWARD_RATE,A.CDEL_MARGIN_RATE,12400001,
--         NULL,Deal_User_Reference,Deal_Dealer_Remarks
--   FROM 
--      trtran006 A,trtran001
--      WHERE CDEL_DEAL_NUMBER = DEAL_DEAL_NUMBER
--      AND CDEL_CANCEL_DATE = DATPOSITIONWORKDATE
--      and cdel_cancel_type=27000001
--      AND CDEL_RECORD_STATUS  BETWEEN 10200001 AND 10200004
--      AND DEAL_RECORD_STATUS  BETWEEN 10200001 AND 10200004;
      
      -------------Feature Cancel------------------------
  INSERT INTO TRSYSTEM997D
    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     POSN_REFERENCE_NUMBER, POSN_REFERENCE_SERIAL, POSN_REFERENCE_DATE,
     posn_transaction_amount,POSN_CANCEL_PNL, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,
     POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS)

  SELECT DATPOSITIONWORKDATE,CFUT_COMPANY_CODE, CFUT_BASE_CURRENCY, CFUT_OTHER_CURRENCY,
            decode(cfut_hedge_trade,gconst.HEDGEDEAL,decode(cfut_buy_sell,Gconst.PURCHASEDEAL,Gconst.CFHEDGEBUY,
            Gconst.SALEDEAL,Gconst.CFHEDGESALE),GCONST.FTDEAL ,
            DECODE(CFUT_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.CFHEDGEBUY,GCONST.SALEDEAL,GCONST.CFHEDGESALE)),
            CFUT_DEAL_NUMBER, 0, CFUT_EXECUTE_DATE, CFRV_REVERSE_LOT *1000,CFRV_PROFIT_LOSS,
            CFUT_EXCHANGE_RATE,0, cfrv_reverse_lot* CFUT_EXCHANGE_RATE*1000,0,
            USERID, NULL,CFUT_COUNTER_PARTY, CFUT_MATURITY_DATE,pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, CFUT_MATURITY_DATE),
            DECODE(CFUT_HEDGE_TRADE,26000002 ,'TFC','HFC') , DECODE(CFUT_BUY_SELL, GCONST.PURCHASEDEAL, 'A','L'),
            CFUT_OTHER_CURRENCY,
            /*DECODE(CFUT_HEDGE_TRADE,GCONST.HEDGEDEAL,DECODE(CFUT_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.CFHEDGEBUY,
                         Gconst.SALEDEAL,Gconst.CFHEDGESALE),gconst.TRADEDEAL,
                        DECODE(CFUT_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.CFTRADEBUY,GCONST.SALEDEAL,GCONST.CFTRADESALE)),*/
            CFUT_backup_deal ,CFUT_INIT_CODE,0,0,0,12400001,
            NULL,Cfut_User_Reference,Cfut_Dealer_Remark
   FROM TRTRAN061,TRTRAN063
      WHERE  CFUT_DEAL_NUMBER = CFRV_DEAL_NUMBER
        AND  CFRV_RECORD_STATUS BETWEEN 10200001 AND 10200004
        and CFRV_EXECUTE_DATE = DATPOSITIONWORKDATE;
     
   -------------Option Cancel------------------------
   
 INSERT INTO TRSYSTEM997D
    (posn_mtm_date ,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     POSN_REFERENCE_NUMBER, POSN_REFERENCE_SERIAL, POSN_REFERENCE_DATE,
     posn_transaction_amount,POSN_CANCEL_PNL, posn_fcy_rate, posn_usd_rate,
     POSN_INR_VALUE, POSN_USD_VALUE, POSN_USER_ID, POSN_DEALER_ID,
     posn_counter_party, posn_due_date, posn_maturity_month,POSN_PRODUCT_CODE,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,POSN_FORWARD_RATE,
     POSN_MARGIN_RATE,posn_process_complete,POSN_TRADE_REFERENCE,
     POSN_USER_REFERENCE,POSN_USER_REMARKS)

  SELECT datpositionworkdate,copt_company_code, copt_base_currency, copt_other_currency,
      decode(copt_hedge_trade,gconst.HEDGEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY, Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),gconst.TRADEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLTRADEBUY, Gconst.SALEDEAL,Gconst.COCALLTRADESALE),Gconst.OptionPut,
        DECODE(COSU_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.COPUTTRADEBUY, GCONST.SALEDEAL,GCONST.COPUTTRADESALE))),
        COPT_DEAL_NUMBER, COrv_SERIAL_NUMBER, COPT_EXECUTE_DATE,CORV_BASE_AMOUNT,nvl( Pkgforexprocess.FncgetprofitlossoptnetpANDl(CORV_DEAL_NUMBER,CORV_SERIAL_NUMBER),0),
        corv_exercise_rate,0, 0,0, --updated expercise rate but this is 0 in database
        UserID, null, copt_counter_party, copt_maturity_date, pkgforexprocess.fncAllotMonth(datpositionworkdate, copt_maturity_date),
       /*decode(copt_hedge_trade,gconst.HEDGEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY,Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),gconst.TRADEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLTRADEBUY,Gconst.SALEDEAL,Gconst.COCALLTRADESALE),Gconst.OptionPut,        
        DECODE(COSU_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.COPUTTRADEBUY, GCONST.SALEDEAL,GCONST.COPUTTRADESALE))),*/
        copt_backup_deal,
      decode(copt_hedge_trade,gconst.TRADEDEAL,'TOC','HOC'),
      case 
      when cosu_buy_sell = GConst.SALEDEAL and cosu_option_type = GConst.OptionPut then 'A'
      when cosu_buy_sell = Gconst.PURCHASEDEAL and cosu_option_type = Gconst.OptionCall then 'A'
      when cosu_buy_sell = Gconst.SALEDEAL and cosu_option_type = Gconst.OptionCall then 'L'
      WHEN COSU_BUY_SELL = GCONST.PURCHASEDEAL AND COSU_OPTION_TYPE = GCONST.OPTIONPUT THEN 'L'
      end, copt_other_currency, copt_init_code,0,0,0,12400001,
      NULL,Copt_User_Reference,Copt_Dealer_Remark
   FROM 
      TRTRAN071 ,TRTRAN073 ,trtran072
      WHERE COPT_DEAL_NUMBER = CORV_DEAL_NUMBER
        --and COpt_SERIAL_NUMBER=COrv_SERIAL_NUMBER   
        and copt_deal_number=cosu_deal_number(+)
      AND CORV_SETTLEMENT_DATE = DATPOSITIONWORKDATE
      AND CORV_RECORD_STATUS  BETWEEN 10200001 AND 10200004;
      
  -------------Loan Cancel------------------------ 

       VAROPERATION := 'Inserting records for FCY Loans Cancel';
    INSERT INTO TRSYSTEM997D
    (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS)
    select datpositionworkdate ,fcln_company_code, fcln_currency_code,30400003, 
      decode(fcln_loan_type, GConst.LOANBUYERSCREDIT, GConst.TRADEBUYERCREDIT, 
      GConst.LOANPCFC, GConst.TRADEPCFC, GConst.LOANPSCFC, GConst.TRADEPSCFC),
      fcln_loan_number, 0, fcln_sanction_date,
      brel_reversal_fcy,brel_reversal_rate,0, brel_reversal_inr,0, 
      UserID, null, fcln_local_bank, fcln_maturity_to,
      pkgforexprocess.fncAllotMonth(datpositionworkdate, fcln_maturity_to),'ELC','L',30400003,
      FCLN_PRODUCT_CATEGORY,FCLN_SUBPRODUCT_CODE,12400001,
      NULL,Fcln_Bank_Reference,Fcln_Loan_Remarks
      FROM TRTRAN005,trtran003
      WHERE 
      fcln_company_code=brel_company_code
      and fcln_loan_number=brel_trade_reference
      and brel_reversal_type=25800057   --loan closure
      and Brel_entry_DATE = datpositionworkdate
     and brel_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GCONST.STATUSAPREUTHORIZATION)
      and fcln_loan_type not in (GConst.LOANBUYERSCREDIT);
 
-------------Buyer's credit Cancel------------------------
     
     VAROPERATION := 'Inserting records for Buyers Credit Cancel';
    INSERT INTO TRSYSTEM997D
    (posn_mtm_date,posn_company_code, posn_currency_code,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     POSN_HEDGE_TRADE, POSN_ASSET_LIABILITY, POSN_FOR_CURRENCY,
     POSN_PRODUCT_CODE,POSN_SUBPRODUCT_CODE,POSN_SPOT_RATE ,
     POSN_FORWARD_RATE,POSN_MARGIN_RATE,posn_process_complete,
     POSN_TRADE_REFERENCE,POSN_USER_REFERENCE,POSN_USER_REMARKS)
    select datpositionworkdate,bcrd_company_code, bcrd_currency_code, 30400003,
           GConst.TRADEBUYERCREDIT, bcrd_buyers_credit, 0, bcrd_sanction_date,
      brel_reversal_fcy,brel_reversal_rate,0, brel_reversal_inr,0, 
      UserID, null, bcrd_local_bank, bcrd_due_date,
      pkgforexprocess.fncAllotMonth(DATPOSITIONWORKDATE, BCRD_DUE_DATE), 'EBCC','L',30400003,
      33300003,33800003,BCRD_SPOT_RATE ,BCRD_FORWARD_RATE,BCRD_MARGIN_RATE,12400001,
      NULL,Bcrd_Sanction_Reference,Bcrd_Loan_Remarks
      from BuyersCredit,TRTRAN003
      WHERE bcrd_company_code=brel_company_code
      and bcrd_buyers_credit=brel_trade_reference
      and brel_reversal_type=25800057   --loan closure
      and Brel_entry_DATE = datpositionworkdate
      and brel_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GCONST.STATUSAPREUTHORIZATION);


   
--    ------------------------------------------------------------------
--- Update by Prateek/Abhijeet for Back Date ed USD Equlient on 08th Dec 2014

  varOperation := 'Calculating M2M Rates for Forward Rates';
  update trsystem997D
      SET POSN_MTM_FCYRATE =  pkgforexprocess.FNCGETRATE
                   (posn_currency_CODE,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),0,  posn_due_date),
          POSN_MTM_LocalRATE =  decode(posn_other_currency,30400003,1,pkgforexprocess.fncGetRate
               (posn_other_currency,30400003, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),0,  posn_due_date)),
          posn_usd_rate = pkgforexprocess.fncGetRate
                (posn_currency_CODE, 30400004, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),0,  posn_due_date)
                
--  varOperation := 'Calculating M2M Rates for Forward Rates';
--  update trsystem997D
--      SET POSN_MTM_FCYRATE =  pkgforexprocess.FNCGETRATE
--                   (posn_currency_CODE,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),0,  posn_due_date),
--          POSN_MTM_LocalRATE =  decode(posn_other_currency,30400003,1,pkgforexprocess.fncGetRate
--               (posn_other_currency,30400003, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),0,  posn_due_date)),
--          posn_usd_rate = pkgforexprocess.fncGetRate
--                (posn_currency_CODE, 30400003, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),0,  posn_due_date)
          
    where  posn_mtm_date=datpositionworkdate 
     and posn_account_code not in 
              (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE,
               Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE,gconst.FORWARDHEDGEBUY,gconst.FORWARDHEDGESALE);
   
     varOperation := 'Calculating M2M Rates for Forward Hedge buy/sale Rates';
    update trsystem997D
      SET POSN_MTM_FCYRATE =  pkgforexprocess.FNCGETRATE
                   (posn_currency_CODE,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002),0,  posn_due_date),
          POSN_MTM_LocalRATE =  decode(posn_other_currency,30400003,1,pkgforexprocess.fncGetRate
               (posn_other_currency,30400003, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002),0,  posn_due_date)),
          posn_usd_rate = pkgforexprocess.fncGetRate
                (posn_currency_CODE, 30400004, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002),0,  posn_due_date)
          
    where  posn_mtm_date=datpositionworkdate 
     and posn_account_code  in (gconst.FORWARDHEDGEBUY,gconst.FORWARDHEDGESALE);
    
   varOperation := 'Calculating M2M Rates for Future Rates';
    update trsystem997d
      set POSN_MTM_FCYRATE =  pkgforexprocess.fncFutureMTMRate( posn_due_date, posn_counter_party,  posn_currency_code ,posn_other_currency,AsonDate),
          POSN_MTM_LocalRATE =  1
      where  posn_mtm_date=datpositionworkdate and posn_account_code  in (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE);

   ------Need to check below queries  Prasanta
   
      varOperation := 'Calculating M2M Rates for Option rates';
   
    update trsystem997d
     set /* POSN_MTM_FCYRATE =  pkgforexprocess.fncGetRate
      (posn_base_currency,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  posn_due_date), */
      POSN_MTM_LocalRATE =  1 
     where posn_mtm_date=datpositionworkdate and posn_account_code  in 
              (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);
   
    varOperation := 'Calculating M2M Rates for Commodity rates';
    -----
    varOperation := 'Calculating M2M Rates for Money Module rates';
    ---
    
   varOperation := 'Calculate Total Tansaction amount ';
    update trsystem997D
      set posn_inr_value = posn_transaction_amount * posn_fcy_rate -- * posn_usd_rate,
      --posn_revalue_inr = posn_transaction_amount *  posn_m2m_inrrate -- *posn_usd_rate 
      where posn_mtm_date=datpositionworkdate and  posn_inr_value is null; 

  
   varOperation := 'Updating Revalued INR';
     
    update trsystem997D
      set posn_revalue_inr = 
        round(posn_transaction_amount * posn_mtm_Localrate*POSN_MTM_FCYRATE,0),
        posn_revalue_usd =
        round((posn_transaction_amount * posn_usd_rate) ,2),
        posn_position_inr = 
        decode(sign(25900050 - posn_account_code), -1,
        posn_inr_value-round(posn_transaction_amount * posn_mtm_localrate*POSN_MTM_FCYRATE,0) ,
        1,  round(posn_transaction_amount * posn_mtm_Localrate*POSN_MTM_FCYRATE,0)-posn_inr_value)
      where posn_mtm_date=datpositionworkdate and posn_due_date >= datpositionworkdate ;
  
          

  /*  VAROPERATION := 'Calculate Profit  According to M2m Rate';
    update trsystem997D
      set posn_position_inr =decode(sign(25900050 - posn_account_code), 1,
      posn_inr_value-posn_revalue_inr,-1, posn_revalue_inr-posn_inr_value)
      where posn_mtm_date=datpositionworkdate and posn_product_code is not null; */
    
--      varOperation := 'Test error';
--     update trsystem997
--      set POSN_USD_VALUE = posn_transaction_amount * posn_fcy_rate
--      where posn_mtm_date=datpositionworkdate and posn_product_code is not null;
      
--    UPDATE TRSYSTEM997D
--      set posn_position_usd = round(posn_position_inr / decode(nvl(posn_usd_rate,0),0,1,posn_usd_rate),2)
--     -- posn_revalue_usd = round((posn_transaction_amount * posn_m2m_inrrate) / decode(nvl(posn_usd_rate,0), 0,1,1),2)
--      where posn_mtm_date=datpositionworkdate and posn_product_code is not null;
    
    update trsystem997D
      SET POSN_PRODUCT_CODE= POSN_ACCOUNT_CODE
      where posn_mtm_date=datpositionworkdate and posn_product_code is null;
      
    commit;
    return numError;
Exception    
  
  when others then
      Rollback;
      VARERROR := SQLERRM;
      varerror := 'PositionGen1: ' || varmessage || varoperation || varerror;
      raise_application_error(-20101,   varerror);
     

      return -1;
END FNCPOSITIONGENERATE;

Function fncGetRate
    ( CurrencyCode in Number,
      ForCurrency in Number,
      AsonDate in Date,
      BidAsk in Number,
      DueDate in Date := null,
      RateSerial in Number := 0,duedateadd in number :=0)
      Return Number
      is
--  Created on 11/04/08 -- Modifield on 09/10/08
--  The Assumption is that the for currency will be either USD or INR
    RATEEXISTS          CONSTANT number(1) := 1;
    RATEDONOTEXIST      CONSTANT number(1) := 2;
    PRAGMA AUTONOMOUS_TRANSACTION;
    numError            number;
    numFlag             number(1);
    numRecords          number(2);
    numMonth            number(2);
    numSerial           number(5);
    numSerial1          number(5);
    numRate             number(15,6);
    numRate1            number(15,6);
    numBase             number(8);
    numBase1            number(8);
    NUMBIDASK           NUMBER(8);
    VARTYPE             VARCHAR2(500);
    VARTYPE1            VARCHAR2(500);
    VARTYPE2            VARCHAR2(500);
    varType3            varchar2(500);
    numSpot             number(15,6);
    numPrem             number(15,6);
    numPrem1            number(15,6);
    numPrem2            number(15,6); 
    varQuery            varchar2(4000);
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
    datAsOn             date;
    datAsOn1            date;
    datTemp             date;
--    datTemp1             date;
    
    datStart            date;
    datLast             date;
    datSpot             date;
    numTotalDays        number(5);
    numActualDays       number(5);
    NUMRATETYPE         NUMBER(5);
    noofmonths          number(3);
    numeffdate          date;
    numnewserial        number(5);
    numdueadd          number(3);
Begin    
    numError := 0;
    numRate := 0;
    numRecords := 0;
    numBidAsk := BidAsk;

    
    varMessage := 'Getting Rate ' || CurrencyCode || ' For: ' || ForCurrency ||
      ' Date: ' || AsonDate;
      
      
    varOperation := 'Getting Rate Type for Base Currency';
    select NVL(cncy_principal_yn, GConst.OPTIONNO)
      into numBase
      from trmaster304
      where cncy_pick_code = CurrencyCode;

    varOperation := 'Getting Rate Type for Other Currency';
    select NVL(cncy_principal_yn, GConst.OPTIONNO)
      into numBase1
      from trmaster304
      where cncy_pick_code = ForCurrency;
--  If effective date is null, check for the latest date;

    if AsonDate is null then  
      varOperation := 'Getting the Latest Date for Exchange rate';
      if ForCurrency = GConst.USDOLLAR then
        select max(drat_effective_date)
          into datAsOn
          from trtran012
          where drat_currency_code = 
          decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
          and drat_for_currency = 
            decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
          and drat_record_status in          
            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      elsif ForCurrency = GConst.INDIANRUPEE then
         select max(drat_effective_date)
          into datAsOn
          from trtran012
          where drat_currency_code = CurrencyCode
          and drat_for_currency = ForCurrency 
          and drat_record_status in          
            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      else
        select max(drat_effective_date)
          into datAson
          from trtran012
          where drat_currency_code = CurrencyCode
          and drat_for_currency = GConst.USDOLLAR;
          
        select max(drat_effective_date)
          into datAson1
          from trtran012
          where drat_currency_code = ForCurrency
          and drat_for_currency = GConst.USDOLLAR;
      end if;
    
    else
      if AsonDate > DueDate then
        return 0;
      end if;
      datAsOn := AsonDate;
    End if;
    
   /* varOperation := 'Checking whether  rate exists for the date';
    numRecords := 0;
    select count(*)
      into numRecords
      from trtran012
      where drat_currency_code = 
      decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
      and drat_for_currency = 
        decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
      and drat_effective_date = datAsOn
      and drat_record_status in          
        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
   
    if numRecords = 0 then
      varError := 'No Exchange Rates for Currency: ' || CurrencyCode || ' for the date: ' || datAsOn;
      numError := -20101;
      raise_application_error(numError, varError);
    
      
    End if; */
    
    if NVL(RateSerial,0) = 0 then
    
      if ForCurrency = GConst.USDOLLAR then
        select NVL(max(drat_serial_number),0)
          into numSerial
          from trtran012
          where drat_currency_code = 
          decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
          and drat_for_currency = 
            decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
          and drat_effective_date = datAsOn
          and drat_record_status in          
            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      elsif ForCurrency = GConst.INDIANRUPEE then
         select NVL(max(drat_serial_number),0)
          into numSerial
          from trtran012
          where drat_currency_code = CurrencyCode
          and drat_for_currency = ForCurrency 
          and drat_effective_date = datAsOn
          and drat_record_status in          
            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      else
        select NVL(max(drat_serial_number),0)
          into numSerial
          from trtran012
          where drat_currency_code = CurrencyCode
          and drat_for_currency = GConst.USDOLLAR
          and drat_effective_date = datAsOn;
          
        select NVL(max(drat_serial_number),0)
          into numSerial1
          from trtran012
          where drat_currency_code = ForCurrency
          and drat_for_currency = GConst.USDOLLAR
          and drat_effective_date = datAsOn1;
      end if;
    
    else
      numSerial := RateSerial;
      numSerial1 := RateSerial;
    End if;
    
    varOperation := 'Checking whether Rate Exists'||numBase ||CurrencyCode||datAsOn ||numSerial ;
    numRecords := 0;
    select count(*)
      into numRecords
      from trtran012
      where drat_currency_code =
        decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
      and drat_for_currency = 
        decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
      and drat_record_status in          
        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
      and drat_effective_date = datAsOn
      and drat_serial_number = numSerial;

     
     numdueadd :=duedateadd;
    if numRecords = 0 then
     begin
          select drat_as_ondate,drat_due_Dateadd,drat_serial_number 
             into  numeffdate,numdueadd ,numnewserial    
          from trtran012indx 
              where drat_currency_code=decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)  
              and   drat_for_currency= decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
              and  drat_effective_date=asondate;
      exception 
          when others then 
            varError := 'No Exchange Rates for Currency: ' || numBase || CurrencyCode || ' for date: ' || datAsOn;
            numError := -20101;
            raise_application_error(numError, varError);
      end; 
      datAsOn :=numeffdate;
      numserial:=numnewserial;
    end if;
    NUMRATETYPE:=0;
    if nvl(duedateadd,0) >0 then
       datSpot:= pkgforexprocess.fncgetcurrspotdate(CurrencyCode,ForCurrency, asondate) + nvl(numdueadd,0) ;
    else
       datSpot:= pkgforexprocess.fncgetcurrspotdate(CurrencyCode,ForCurrency, asondate) ; 
    end if;
    if DueDate is null then
      numRateType := 0;
    else      
      if DueDate <= datSpot then
         numRateType:=0;
      ELSE
    --  SELECT DECODE( SIGN(MONTHS_BETWEEN(DUEDATE ,DATSPOT) -12),1,MONTHS_BETWEEN(DUEDATE ,DATSPOT) +1 ,12) INTO NOOFMONTHS FROM DUAL;
      
      for numsub in 1..50
      Loop
        numRateType := numRateType + 1;
        if (currencycode=30400004) and (forcurrency=30400003) then
            if numsub=1 then
              datTemp :=last_day(datSpot);
            ELSE
              datTemp := last_day(add_months(datspot,numsub-1 )); 
            end if;
        else
          datTemp := add_months(datSpot, numSub);
        end if;
        if datTemp >= DueDate then
          exit;
        end if;
        
      End Loop;
  
    end if;
    end if;
    
   
 
   if ForCurrency in (GConst.USDOLLAR, GConst.INDIANRUPEE) then
     IF NUMBIDASK = GCONST.PURCHASEDEAL THEN
     
        select 'drat_spot_bid',
          decode(numRateType,
           0, ',drat_spot_bid', 1, ',drat_month1_bid',2, ',drat_month2_bid',3, ',drat_month3_bid',
           4, ',drat_month4_bid',5, ',drat_month5_bid', 6, ',drat_month6_bid', 7, ',drat_month7_bid',
           8, ',drat_month8_bid',9, ',drat_month9_bid', 10, ',drat_month10_bid',
           11, ',drat_month11_bid',12, ',drat_month12_bid', ',drat_month12_bid + ((drat_month12_bid - drat_month11_bid)*(' || numRateType||'-12))' ), --First Discount
          decode(numRateType, 
           0, ',drat_spot_bid', 1, ',drat_spot_bid',2, ',drat_month1_bid',3, ',drat_month2_bid',
           4, ',drat_month3_bid',5, ',drat_month4_bid', 6, ',drat_month5_bid', 7, ',drat_month6_bid',
           8, ',drat_month7_bid',9, ',drat_month8_bid', 10, ',drat_month9_bid',
           11, ',drat_month10_bid',12, ',drat_month11_bid', ',drat_month11_bid+((drat_month12_bid - drat_month11_bid)*(' || numRateType||'-12))'), --Second Discount 
          decode(numRateType,
            0, ',drat_spot_bid', 1, ',drat_spot_bid',2, ',drat_spot_bid',3, ',drat_month1_bid',
            4, ',drat_month2_bid',5, ',drat_month3_bid', 6, ',drat_month4_bid', 7, ',drat_month5_bid',
            8, ',drat_month6_bid',9, ',drat_month7_bid', 10, ',drat_month8_bid',
            11, ',drat_month9_bid',12, ',drat_month10_bid',',drat_month10_bid+((drat_month12_bid-drat_month11_bid)*(' || numRateType||'-12))' )  --Thired DisCount
          into varType,varType1,varType2,VarType3
          FROM DUAL;
           
      elsif numBidAsk = GConst.SALEDEAL then
        select 'drat_spot_ask',
          decode(numRateType,
           0, ',drat_spot_ask', 1, ',drat_month1_ask',2, ',drat_month2_ask', 3, ',drat_month3_ask',
           4, ',drat_month4_ask', 5, ',drat_month5_ask', 6, ',drat_month6_ask',7, ',drat_month7_ask',
           8, ',drat_month8_ask', 9, ',drat_month9_ask',10, ',drat_month10_ask',
           11, ',drat_month11_ask',12, ',drat_month12_ask',',drat_month12_ask' ||'+' ||'((' ||'drat_month12_ask' ||'-' ||'drat_month11_ask'||')'||'*' ||'(' || numRateType||'-'|| 12 ||'))'),  --First Preamum
         decode(numRateType,
           0, ',drat_spot_ask', 1, ',drat_spot_ask',2, ',drat_month1_ask', 3, ',drat_month2_ask',
           4, ',drat_month3_ask', 5, ',drat_month4_ask', 6, ',drat_month5_ask',7, ',drat_month6_ask',
           8, ',drat_month7_ask', 9, ',drat_month8_ask',10, ',drat_month9_ask',
           11, ',drat_month10_ask',12, ',drat_month11_ask',',drat_month11_ask' ||'+' ||'((' ||'drat_month12_ask' ||'-' ||'drat_month11_ask'||')'||'*' ||'(' || numRateType||'-'|| 12 ||'))') ,  --Second Preamum
         decode(numRateType,
           0, ',drat_spot_ask', 1, ',drat_spot_ask',2, ',drat_spot_ask', 3, ',drat_month1_ask',
           4, ',drat_month2_ask', 5, ',drat_month3_ask', 6, ',drat_month4_ask',7, ',drat_month5_ask',
           8, ',drat_month6_ask', 9, ',drat_month7_ask',10, ',drat_month8_ask',
           11, ',drat_month9_ask',12, ',drat_month10_ask',',drat_month10_ask' ||'+' ||'((' ||'drat_month12_ask' ||'-' ||'drat_month11_ask'||')'||'*' ||'(' || numRateType||'-'|| 12 ||'))')   --Thired Preamum           
         into varType,varType1,varType2,VarType3
         FROM DUAL;
         
         

      else
        select decode(numRateType,
          0, 'round((drat_spot_bid + drat_spot_ask)/2,4)',
          1, 'round((drat_month1_bid + drat_month1_ask)/2,4)',
          2, 'round((drat_month2_bid + drat_month2_ask)/2,4)',
          3, 'round((drat_month3_bid + drat_month3_ask)/2,4)',
          4, 'round((drat_month4_bid + drat_month4_ask)/2,4)',
          5, 'round((drat_month5_bid + drat_month5_ask)/2,4)',
          6, 'round((drat_month6_bid + drat_month6_ask)/2,4)',
          7, 'round((drat_month7_bid + drat_month7_ask)/2,4)',
          8, 'round((drat_month8_bid + drat_month8_ask)/2,4)',
          9, 'round((drat_month9_bid + drat_month9_ask)/2,4)',
          10, 'round((drat_month10_bid + drat_month10_ask)/2,4)',
          11, 'round((drat_month11_bid + drat_month11_ask)/2,4)',
          12, 'round((drat_month12_bid + drat_month12_ask)/2,4)',
              'round((drat_month12_bid +((drat_month12_bid-drat_month11_bid) * (numRateType-12)) + drat_month12_ask +((drat_month12_ask-drat_month11_ask) * (numRateType-12)))/2,4)') 
          into varType
          from dual;
      end if;
      
  
    VAROPERATION := 'Building query to get rate';
   -- insert into temp values (varQuery,varQuery);
   -- commit;
    varQuery := 'select ' || varType || varType1 || varType2 || VarType3 ; 
    
    if ForCurrency = GConst.USDOLLAR then 
    
      if numBase = GConst.OPTIONYES then
        varQuery := varQuery || ' from trtran012 where';
        varQuery := varQuery || ' drat_currency_code = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_for_currency = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
      else
        varQuery := varQuery || ' from trtran012 where drat_for_currency = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_currency_code = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
      end if;
      
    elsif ForCurrency = GConst.INDIANRUPEE then
        varQuery := varQuery || ' from trtran012 where drat_currency_code = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_for_currency = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
    else
        varQuery := varQuery || ' from trtran012 where drat_currency_code = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_for_currency = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
    END IF;
     INSERT INTO TEMP VALUES (varQuery,varQuery);
   COMMIT;
        Goto Process_End;    
  
  ELSE
  
    numRate := fncGetRate(CurrencyCode, GConst.USDOLLAR, datAsOn,
                  NUMBIDASK,  DUEDATE, NUMSERIAL,numdueadd);
    numRate1 := fncGetRate(ForCurrency, GConst.USDOLLAR, datAsOn,
                  numBidAsk,  DueDate, numSerial1,numdueadd);


    if  ((numBase1 =GConst.OPTIONYES  ) and (numBase =GConst.OPTIONYES  ) )then
        numRate := round(numRate / numRate1, 6);
    else
      if numBase1 = GConst.OPTIONYES  then
        numRate := round(numRate / numRate1, 6);
      else
        numRate := round(numRate / numRate1, 6);
      end if;
    end if;
    
    return numRate;
  End if;

<<Process_End>>



   if numBidAsk =0 then
      Execute immediate varQuery into numRate;
      return numRate;
   END IF;
 

     varOperation := 'Executing query to get rate';
     INSERT INTO TEMP VALUES(VARQUERY,VARQUERY);COMMIT;
     
      EXECUTE IMMEDIATE VARQUERY INTO NUMSPOT,NUMPREM2,NUMPREM1,NUMPREM;    
      declare 
            numLastDay number(6);
            numtemp number(15,6);
            numMaturity number(6);
            numStart number(6);
            
       begin
           
-- For USD Forward Rates we have to take Month Ending As Last date 
-- For All Other Currencies We Have to Take Spot Date to One Month as Last Date
               numTotalDays:=1;
               numActualDays:=1;
                if ((CurrencyCode = GConst.USDOLLAR) and (ForCurrency =GConst.INDIANRUPEE)) then
                  if numRateType=1 then 
                  
                    datStart :=datSpot;
                    datLast := Last_day(add_months(datSpot,numRateType-1));
                    numTotalDays :=datStart-datLast;
                    numActualDays:=datStart-DueDate;
                  elsif numRateType > 1 then 
                  
                    numTotalDays :=to_number(to_char(last_day(DueDate),'DD'));
                    numActualDays:=to_number(to_char(DueDate,'DD'));
                  end if;
                else
                  if numRateType=1 then 
                    datStart :=datSpot;
                    datLast := add_months(datSpot,numRateType);
                    numTotalDays :=datStart-datLast;
                    numActualDays:=datStart-DueDate;
                  elsif numRateType > 1 then
                    datStart :=add_months(datSpot,numRateType-1);
                    datLast := add_months(datSpot,numRateType);
                    numTotalDays :=datStart-datLast;
                    numActualDays:=datStart-DueDate;
                  end if;
                   
                end if;
                varOperation := 'Calculating rate';
                 numtemp := (((numPrem2-numPrem1)/numTotalDays)*numActualDays);
                 numRate := numPrem1 +numtemp;
          exception
          when others then
      --      numRate:=numRate;
            numError := SQLCODE;
            varError := SQLERRM;
            varError := GConst.fncReturnError('GetRate', numError, varMessage, 
                            varOperation, varError);
            raise_application_error(-20101, varError);    
            numRate := 0.00;
          end;
    
    
      if numBase = GConst.OPTIONNO and ForCurrency = GConst.USDOLLAR then
        numRate := round(1 / numRate, 6);
      end if;
    return numRate;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('GetRate', numError, varMessage, 
                      varOperation, varError);
      raise_application_error(-20101, varError);    
      numRate := 0.00;
      RETURN NUMRATE;
END FNCGETRATE;
FUNCTION FIRSTPOSITION( USERID IN VARCHAR2) RETURN NUMBER
IS

NUMERROR NUMBER;
VARERROR VARCHAR2(400);
VAROPERATION  VARCHAR2(400);
VARMESSAGE  VARCHAR2(400);

BEGIN
Numerror :=0;
FOR CURRATE IN (SELECT HDAY_CALENDAR_DATE  FROM TRSYSTEM001 
                       WHERE HDAY_LOCATION_CODE = 30299999
                       AND HDAY_DAY_STATUS =26400005
                       AND HDAY_CALENDAR_DATE >'01-APR-2014'
                       AND HDAY_RECORD_STATUS IN (10200001,10200002,10200003,10200004))
LOOP
  BEGIN
       NUMERROR:= PKGVARANALYSIS.FNCPOSITIONGENERATE(USERID ,CURRATE.HDAY_CALENDAR_DATE);
  EXCEPTION
    WHEN OTHERS THEN
     VARERROR := SQLERRM;
  END;
END LOOP;

RETURN NUMERROR ;

EXCEPTION
  WHEN OTHERS THEN
   --   numError := SQLCODE;
      VARERROR := SQLERRM;
      varError := GConst.fncReturnError('AutoPositionGen', numError, varMessage, 
                      varOperation, varError);
      RAISE_APPLICATION_ERROR(-20101, VARERROR);    
      RETURN numError;
   
END FIRSTPOSITION;
FUNCTION Fncpopulatestressrate(varreferencenumber in varchar2 ,Datworkdate in date)
 RETURN NUMBER AS
 PRAGMA AUTONOMOUS_TRANSACTION;
  NUMERROR            NUMBER;
  numSerial           number(5);
  varOperation        GConst.gvarOperation%Type;
  varMessage          GConst.gvarMessage%Type;
  VARERROR            GCONST.GVARERROR%TYPE;
 -- DATWORKDATE         DATE;
  NUMCHANGETYPE       NUMBER(8);
  NUMCHANGEVALUE      NUMBER(15,6);
  NUMPRICETYPE        NUMBER(8);
  NUMSTRESSTYPE       NUMBER(8);
  DATSTARTDATE        DATE;
  datenddate          date;
  EXPGETRATE          EXCEPTION;
  
 BEGIN
 
 DELETE FROM TRTRAN012A ;  ----will change to Temporary table
 DELETE FROM TRTRAN012B ;  ----will change to Temporary table
 DELETE FROM TRTRAN012C ;  ----will change to Temporary table
 DELETE FROM TRTRAN064A ; 
 DELETE FROM TRTRAN064B ; 
 DELETE FROM TRTRAN064C ; 
 COMMIT; 

 VARMESSAGE :='Getting Stress Reference Number from Trsystem060 table';
 SELECT STRE_STRESS_TYPE,STRE_CHANGE_TYPE,STRE_PRICE_TYPE ,
        STRE_START_DATE,STRE_END_DATE--,Datworkdate
        INTO NUMSTRESSTYPE ,NUMCHANGETYPE,NUMPRICETYPE,
              datstartdate,datenddate --,DATWORKDATE
  FROM TRsystem060 WHERE STRE_REFERENCE_NUMBER = varreferencenumber ;
  
  
   
 varMessage :='Getting Currency rate serial from TRTRAN012 table';
IF NUMPRICETYPE = 37700001 THEN--GCONST.DAYBEGINPRICE THEN
  --  NUMSERIAL := 1;
    INSERT INTO TRTRAN012A (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
              DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
              DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
              DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
              DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE )                                                                                                                                                                              

    SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
          DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,'DAY BEGIN PRICE',
          DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
          DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
          DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
          DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
          DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
          DRAT_MONTH12_ASK,DRAT_CREATE_DATE
    FROM TRTRAN012 WHERE  DRAT_EFFECTIVE_DATE=DATWORKDATE
           AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(min(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                              WHERE  a.DRAT_EFFECTIVE_DATE=DATWORKDATE
                              and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                              and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
           group by a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
           AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
  
  varMessage :='Getting Currency rate serial from TRTRAN064A table';
  Insert into TRTRAN064A (CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
  select CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,'DAY BEGIN PRICE',
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME
    from trtran064 where  CFMM_EFFECTIVE_DATE=(SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064 WHERE CFMM_EFFECTIVE_DATE<=DATWORKDATE)  
                   and  (CFMM_EFFECTIVE_DATE,CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY, CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EXPIRY_MONTH, CFMM_SERIAL_NUMBER) in 
                           ( select a.CFMM_EFFECTIVE_DATE, a.CFMM_BASE_CURRENCY,a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE,a.CFMM_INSTRUMENT_TYPE,a.CFMM_EXPIRY_MONTH, nvl(min(a.CFMM_SERIAL_NUMBER),0)
                                 from trtran064 a where a.CFMM_EFFECTIVE_DATE=DATWORKDATE
                                 and  CFMM_BASE_CURRENCY=a.CFMM_BASE_CURRENCY and CFMM_OTHER_CURRENCY=a.CFMM_OTHER_CURRENCY
                                 and  CFMM_EXCHANGE_CODE=a.CFMM_EXCHANGE_CODE and CFMM_INSTRUMENT_TYPE=a.CFMM_INSTRUMENT_TYPE
                                 and  CFMM_EXPIRY_MONTH=a.CFMM_EXPIRY_MONTH
                                 and a.CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                                 group by a.CFMM_EFFECTIVE_DATE, a.CFMM_BASE_CURRENCY, a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_EXPIRY_MONTH)
                  and CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
  
ELSIF NUMPRICETYPE = 37700002 THEN---GCONST.DAYENDPRICE THEN
  VARMESSAGE :='Getting latest Currency Rate Serial from TRTRAN012 table';
  SELECT nvl(MAX(DRAT_SERIAL_NUMBER),0) INTO NUMSERIAL FROM TRTRAN012 
    WHERE  DRAT_EFFECTIVE_DATE=DATWORKDATE
        AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
  
  IF NUMSERIAL=0 THEN 
    raise EXPGETRATE ;
 END IF;
  
  VARMESSAGE :='Inserting latest Currency Rate to TRTRAN012A table';
  INSERT INTO TRTRAN012A (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
              DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
              DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
              DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
              DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE )                                                                                                                                                                              

  SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
          DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,'LATEST PRICE',
          DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
          DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
          DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
          DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
          DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
          DRAT_MONTH12_ASK,DRAT_CREATE_DATE
  FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE=DATWORKDATE
    AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
                        (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                          WHERE  a.DRAT_EFFECTIVE_DATE=DATWORKDATE
                          and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                          and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                          AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                          group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
   AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
 
  VARMESSAGE :='Getting latest Currency Rate Serial from TRTRAN064 table';
  SELECT nvl(MAX(CFMM_SERIAL_NUMBER),0) INTO NUMSERIAL FROM TRTRAN064 
      WHERE  CFMM_EFFECTIVE_DATE=DATWORKDATE
        AND CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
       
  IF NUMSERIAL=0 THEN 
    raise EXPGETRATE ;
 END IF;
 
  varMessage :='Inserting latest Currency Rate to TRTRAN064A table';
  Insert into TRTRAN064A (CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
  select CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,'DAY END PRICE',
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME
    from trtran064 
      where CFMM_EFFECTIVE_DATE=(SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064 WHERE CFMM_EFFECTIVE_DATE<=DATWORKDATE)    
       and  (cfmm_effective_date,CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY, CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EXPIRY_MONTH, CFMM_SERIAL_NUMBER) in 
              (select a.cfmm_effective_date,a.CFMM_BASE_CURRENCY,a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE,a.CFMM_INSTRUMENT_TYPE,a.CFMM_EXPIRY_MONTH, nvl(max(a.CFMM_SERIAL_NUMBER),0)
               from trtran064 a where a.CFMM_EFFECTIVE_DATE=DATWORKDATE
               and  CFMM_BASE_CURRENCY=a.CFMM_BASE_CURRENCY and CFMM_OTHER_CURRENCY=a.CFMM_OTHER_CURRENCY
               and  CFMM_EXCHANGE_CODE=a.CFMM_EXCHANGE_CODE and CFMM_INSTRUMENT_TYPE=a.CFMM_INSTRUMENT_TYPE
               and  CFMM_EXPIRY_MONTH=a.CFMM_EXPIRY_MONTH
               and a.CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
               group by a.cfmm_effective_date, a.CFMM_BASE_CURRENCY, a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_EXPIRY_MONTH)
        and CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);

 
ELSIF NUMPRICETYPE = 37700003 THEN---GCONST.DAYAVGPRICE THEN
 VARMESSAGE :='Inserting Average Currency Rate to TRTRAN012A table';
  INSERT INTO TRTRAN012A (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
              DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
              DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
              DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
              DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE )                                                                                                                                                                              

  SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DATWORKDATE,1,
    to_char(SYSTIMESTAMP,'HH24:MI:SS'),to_char(SYSTIMESTAMP,'DD/MM/YYYY HH24:MI:SS') ,'AVERAGE RATE',AVG(DRAT_SPOT_BID),
    AVG(DRAT_SPOT_ASK),AVG(DRAT_MONTH1_BID),AVG(DRAT_MONTH1_ASK),
    AVG(DRAT_MONTH2_BID),AVG(DRAT_MONTH2_ASK),AVG(DRAT_MONTH3_BID),
    AVG(DRAT_MONTH3_ASK),AVG(DRAT_MONTH4_BID),AVG(DRAT_MONTH4_ASK),
    AVG(DRAT_MONTH5_BID),AVG(DRAT_MONTH5_ASK),AVG(DRAT_MONTH6_BID),
    AVG(DRAT_MONTH6_ASK),AVG(DRAT_MONTH7_BID),AVG(DRAT_MONTH7_ASK),
    AVG(DRAT_MONTH8_BID),AVG(DRAT_MONTH8_ASK),AVG(DRAT_MONTH9_BID),
    AVG(DRAT_MONTH9_ASK),AVG(DRAT_MONTH10_BID),AVG(DRAT_MONTH10_ASK),
    AVG(DRAT_MONTH11_BID),AVG(DRAT_MONTH11_ASK),AVG(DRAT_MONTH12_BID),
    AVG(DRAT_MONTH12_ASK),DATWORKDATE
  FROM TRTRAN012   WHERE DRAT_EFFECTIVE_DATE=DATWORKDATE
      AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED) 
    GROUP BY DRAT_CURRENCY_CODE, DRAT_FOR_CURRENCY;
  
  varMessage :='Inserting Average Currency Rate to TRTRAN064A table';
  Insert into TRTRAN064A (CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
  select DATWORKDATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,1,avg(CFMM_OPENING_RATE),
              avg(CFMM_HIGH_RATE),avg(CFMM_LOW_RATE),avg(CFMM_CLOSING_RATE),'AVG PRICE',
              AVG(CFMM_BID_RATE),AVG(CFMM_ASK_RATE),AVG(CFMM_OPEN_INTEREST),AVG(CFMM_VOLUME)
    from trtran064 where  CFMM_EFFECTIVE_DATE=(SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064 WHERE CFMM_EFFECTIVE_DATE<=DATWORKDATE)    
                   and  CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED) 
      GROUP BY CFMM_EFFECTIVE_DATE, CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH ;
 
ELSIF NUMPRICETYPE = 37700004 THEN---GCONST.DAYMAXPRICE THEN
  VARMESSAGE :='Inserting Maximum Currency Rate to TRTRAN012A table';
  INSERT INTO TRTRAN012A (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
              DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
              DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
              DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
              DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE )                                                                                                                                                                              

  SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DATWORKDATE,1,
         TO_CHAR(SYSTIMESTAMP,'HH24:MI:SS'),to_char(SYSTIMESTAMP,'DD/MM/YYYY HH24:MI:SS'),
         'MAXIMUM RATE',MAX(DRAT_SPOT_BID),
          MAX(DRAT_SPOT_ASK),MAX(DRAT_MONTH1_BID),MAX(DRAT_MONTH1_ASK),
          MAX(DRAT_MONTH2_BID),MAX(DRAT_MONTH2_ASK),MAX(DRAT_MONTH3_BID),
          MAX(DRAT_MONTH3_ASK),MAX(DRAT_MONTH4_BID),MAX(DRAT_MONTH4_ASK),
          MAX(DRAT_MONTH5_BID),MAX(DRAT_MONTH5_ASK),MAX(DRAT_MONTH6_BID),
          MAX(DRAT_MONTH6_ASK),MAX(DRAT_MONTH7_BID),MAX(DRAT_MONTH7_ASK),
          MAX(DRAT_MONTH8_BID),MAX(DRAT_MONTH8_ASK),MAX(DRAT_MONTH9_BID),
          MAX(DRAT_MONTH9_ASK),MAX(DRAT_MONTH10_BID),MAX(DRAT_MONTH10_ASK),
          MAX(DRAT_MONTH11_BID),MAX(DRAT_MONTH11_ASK),MAX(DRAT_MONTH12_BID),
          MAX(DRAT_MONTH12_ASK),DATWORKDATE
  FROM TRTRAN012   
      WHERE DRAT_EFFECTIVE_DATE=DATWORKDATE
      AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
      GROUP BY DRAT_CURRENCY_CODE, DRAT_FOR_CURRENCY;
 
  varMessage :='Inserting Day Max Currency Rate to TRTRAN064A table';
  Insert into TRTRAN064A (CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
  select DATWORKDATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,1,max(CFMM_OPENING_RATE),
              max(CFMM_HIGH_RATE),max(CFMM_LOW_RATE),max(CFMM_CLOSING_RATE),'MAX PRICE',
              max(CFMM_BID_RATE),max(CFMM_ASK_RATE),max(CFMM_OPEN_INTEREST),max(CFMM_VOLUME)
    from trtran064 where  CFMM_EFFECTIVE_DATE=(SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064 WHERE CFMM_EFFECTIVE_DATE<=DATWORKDATE)    
                   and  CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED) 
      GROUP BY CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH ;
  
ELSIF NUMPRICETYPE = 37700005 THEN--GCONST.DAYMINPRICE THEN

 VARMESSAGE :='Inserting Minimun Currency Rate to TRTRAN012A table';
  INSERT INTO TRTRAN012A (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
              DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
              DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
              DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
              DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE )                                                                                                                                                                              

  SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DATWORKDATE,1,
    TO_CHAR(SYSTIMESTAMP,'HH24:MI:SS'),TO_CHAR(SYSTIMESTAMP,'DD/MM/YYYY HH24:MI:SS') ,
    'MINIMUM PRICE',MIN(DRAT_SPOT_BID),
    MIN(DRAT_SPOT_ASK),MIN(DRAT_MONTH1_BID),MIN(DRAT_MONTH1_ASK),
    MIN(DRAT_MONTH2_BID),MIN(DRAT_MONTH2_ASK),MIN(DRAT_MONTH3_BID),
    MIN(DRAT_MONTH3_ASK),MIN(DRAT_MONTH4_BID),MIN(DRAT_MONTH4_ASK),
    MIN(DRAT_MONTH5_BID),MIN(DRAT_MONTH5_ASK),MIN(DRAT_MONTH6_BID),
    MIN(DRAT_MONTH6_ASK),MIN(DRAT_MONTH7_BID),MIN(DRAT_MONTH7_ASK),
    MIN(DRAT_MONTH8_BID),MIN(DRAT_MONTH8_ASK),MIN(DRAT_MONTH9_BID),
    MIN(DRAT_MONTH9_ASK),MIN(DRAT_MONTH10_BID),MIN(DRAT_MONTH10_ASK),
    MIN(DRAT_MONTH11_BID),MIN(DRAT_MONTH11_ASK),MIN(DRAT_MONTH12_BID),
    MIN(DRAT_MONTH12_ASK),DATWORKDATE
  FROM TRTRAN012   WHERE DRAT_EFFECTIVE_DATE=DATWORKDATE
      AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED) 
  GROUP BY DRAT_CURRENCY_CODE, DRAT_FOR_CURRENCY;
  
  varMessage :='Inserting Day Min Currency Rate to TRTRAN064A table';
  Insert into TRTRAN064A (CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
  select DATWORKDATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,1,MIN(CFMM_OPENING_RATE),
              MIN(CFMM_HIGH_RATE),MIN(CFMM_LOW_RATE),MIN(CFMM_CLOSING_RATE),'MIN PRICE',
              MIN(CFMM_BID_RATE),MIN(CFMM_ASK_RATE),MIN(CFMM_OPEN_INTEREST),MIN(CFMM_VOLUME)
    from trtran064 where  CFMM_EFFECTIVE_DATE=(SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064 WHERE CFMM_EFFECTIVE_DATE<=DATWORKDATE)    
                   and  CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED) 
      GROUP BY CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH ;

END IF;

varMessage :='Inserting Data into TRTRAN012C table';
INSERT INTO TRTRAN012C (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
            DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
            DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
            DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
            DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
            DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE )                                                                                                                                                                              
SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
        DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
        DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
        DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,
        DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK, DRAT_MONTH10_BID,DRAT_MONTH10_ASK,                                                                                                                                                                          
        DRAT_MONTH11_BID, DRAT_MONTH11_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE                                                                                                                                                                            
  FROM TRTRAN012A;

 varMessage :='Inserting Data into TRTRAN064C table';
 Insert into TRTRAN064C (CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
 select CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME 
    FROM TRTRAN064A ;
    
COMMIT;

IF NUMSTRESSTYPE in (37500001,37500002,37500003) then -----stress analysis

    IF  NUMSTRESSTYPE=37500001 and NUMCHANGETYPE =37600002  THEN ---gconst.changepercentage ---company level
    
    
      VARMESSAGE :='Getting Change Rate from TRSYSTEM061 table';
      SELECT STRE_PRICE_CHANGE INTO NUMCHANGEVALUE
         FROM TRSYSTEM061 WHERE STRE_REFERENCE_NUMBER = varreferencenumber;
        
      
      VARMESSAGE :='Updating Currency Rate to TRTRAN012A table for Company level and Percentage wise';
    
      UPDATE TRTRAN012A SET
        DRAT_SPOT_BID=round(DRAT_SPOT_BID + ( DRAT_SPOT_BID*NUMCHANGEVALUE/100), 6),
        DRAT_SPOT_ASK =round(DRAT_SPOT_ASK+ ( DRAT_SPOT_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH1_BID=round(DRAT_MONTH1_BID + ( DRAT_MONTH1_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH1_ASK=round(DRAT_MONTH1_ASK + ( DRAT_MONTH1_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH2_BID=round(DRAT_MONTH2_BID + ( DRAT_MONTH2_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH2_ASK=round(DRAT_MONTH2_ASK+ ( DRAT_MONTH2_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH3_BID=round(DRAT_MONTH3_BID+ ( DRAT_MONTH3_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH3_ASK=round(DRAT_MONTH3_ASK+ ( DRAT_MONTH3_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH4_BID=round(DRAT_MONTH4_BID+ ( DRAT_MONTH4_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH4_ASK=round(DRAT_MONTH4_ASK+ ( DRAT_MONTH4_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH5_BID=round(DRAT_MONTH5_BID+ ( DRAT_MONTH5_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH5_ASK=round(DRAT_MONTH5_ASK+ ( DRAT_MONTH5_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH6_BID=round(DRAT_MONTH6_BID+ ( DRAT_MONTH6_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH6_ASK=round(DRAT_MONTH6_ASK+ ( DRAT_MONTH6_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH7_BID=round(DRAT_MONTH7_BID+ ( DRAT_MONTH7_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH7_ASK=round(DRAT_MONTH7_ASK+ ( DRAT_MONTH7_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH8_BID=round(DRAT_MONTH8_BID+ ( DRAT_MONTH8_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH8_ASK=round(DRAT_MONTH8_ASK+ ( DRAT_MONTH8_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH9_BID=round(DRAT_MONTH9_BID+ ( DRAT_MONTH9_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH9_ASK=round(DRAT_MONTH9_ASK+ ( DRAT_MONTH9_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH10_BID=round(DRAT_MONTH10_BID+ ( DRAT_MONTH10_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH10_ASK=round(DRAT_MONTH10_ASK+ ( DRAT_MONTH10_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH11_BID=round(DRAT_MONTH11_BID+ ( DRAT_MONTH11_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH11_ASK=round(DRAT_MONTH11_ASK+ ( DRAT_MONTH11_ASK*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH12_BID=ROUND(DRAT_MONTH12_BID+ ( DRAT_MONTH12_BID*NUMCHANGEVALUE/100), 6),
        DRAT_MONTH12_ASK=ROUND(DRAT_MONTH12_ASK+ ( DRAT_MONTH12_ASK*NUMCHANGEVALUE/100), 6);
        
       VARMESSAGE :='Updating Currency Rate to TRTRAN064A table for Company level and Percentage wise';
    
      UPDATE trtran064A SET
          CFMM_OPENING_RATE=round(CFMM_OPENING_RATE + ( CFMM_OPENING_RATE*NUMCHANGEVALUE/100), 6),
          CFMM_HIGH_RATE=round(CFMM_HIGH_RATE + ( CFMM_HIGH_RATE*NUMCHANGEVALUE/100), 6),
          CFMM_LOW_RATE=round(CFMM_LOW_RATE + ( CFMM_LOW_RATE*NUMCHANGEVALUE/100), 6),
          CFMM_CLOSING_RATE=round(CFMM_CLOSING_RATE + ( CFMM_CLOSING_RATE*NUMCHANGEVALUE/100), 6),
          CFMM_BID_RATE=round(CFMM_BID_RATE + ( CFMM_BID_RATE*NUMCHANGEVALUE/100), 6),
          CFMM_ASK_RATE=round(CFMM_ASK_RATE + ( CFMM_ASK_RATE*NUMCHANGEVALUE/100), 6),
          CFMM_OPEN_INTEREST=round(CFMM_OPEN_INTEREST + ( CFMM_OPEN_INTEREST*NUMCHANGEVALUE/100), 6) ;        
  
    ELSIF  NUMSTRESSTYPE=37500001 AND NUMCHANGETYPE=37600001  THEN ---gconst.changeabsolute  --Company level
    
        VARMESSAGE :='Updating Currency Rate to TRTRAN012A table for Company level and Absolute wise';
       
        UPDATE TRTRAN012A SET
          DRAT_SPOT_BID=DRAT_SPOT_BID + NUMCHANGEVALUE,
          DRAT_SPOT_ASK =DRAT_SPOT_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH1_BID=DRAT_MONTH1_BID + NUMCHANGEVALUE,
          DRAT_MONTH1_ASK=DRAT_MONTH1_ASK + NUMCHANGEVALUE,
          DRAT_MONTH2_BID=DRAT_MONTH2_BID + NUMCHANGEVALUE,
          DRAT_MONTH2_ASK=DRAT_MONTH2_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH3_BID=DRAT_MONTH3_BID+ NUMCHANGEVALUE,
          DRAT_MONTH3_ASK=DRAT_MONTH3_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH4_BID=DRAT_MONTH4_BID+ NUMCHANGEVALUE,
          DRAT_MONTH4_ASK=DRAT_MONTH4_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH5_BID=DRAT_MONTH5_BID+ NUMCHANGEVALUE,
          DRAT_MONTH5_ASK=DRAT_MONTH5_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH6_BID=DRAT_MONTH6_BID+ NUMCHANGEVALUE,
          DRAT_MONTH6_ASK=DRAT_MONTH6_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH7_BID=DRAT_MONTH7_BID+ NUMCHANGEVALUE,
          DRAT_MONTH7_ASK=DRAT_MONTH7_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH8_BID=DRAT_MONTH8_BID+ NUMCHANGEVALUE,
          DRAT_MONTH8_ASK=DRAT_MONTH8_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH9_BID=DRAT_MONTH9_BID+ NUMCHANGEVALUE,
          DRAT_MONTH9_ASK=DRAT_MONTH9_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH10_BID=DRAT_MONTH10_BID+ NUMCHANGEVALUE,
          DRAT_MONTH10_ASK=DRAT_MONTH10_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH11_BID=DRAT_MONTH11_BID+ NUMCHANGEVALUE,
          DRAT_MONTH11_ASK=DRAT_MONTH11_ASK+ NUMCHANGEVALUE,
          DRAT_MONTH12_BID=DRAT_MONTH12_BID+ NUMCHANGEVALUE,
          DRAT_MONTH12_ASK=DRAT_MONTH12_ASK+ NUMCHANGEVALUE ;
  
         VARMESSAGE :='Updating Currency Rate to TRTRAN064A table for Company level and Absolute wise';
            
          UPDATE TRTRAN064A SET    
            CFMM_OPENING_RATE=CFMM_OPENING_RATE + NUMCHANGEVALUE,
            CFMM_HIGH_RATE=CFMM_HIGH_RATE + NUMCHANGEVALUE,
            CFMM_LOW_RATE=CFMM_LOW_RATE + NUMCHANGEVALUE,
            CFMM_CLOSING_RATE=CFMM_CLOSING_RATE + NUMCHANGEVALUE,
            CFMM_BID_RATE=CFMM_BID_RATE + NUMCHANGEVALUE,
            CFMM_ASK_RATE=CFMM_ASK_RATE + NUMCHANGEVALUE,
            CFMM_OPEN_INTEREST=CFMM_OPEN_INTEREST + NUMCHANGEVALUE ;
        
     ELSIF  NUMSTRESSTYPE=37500002 AND NUMCHANGETYPE =37600001  THEN ---gconst.Absolute ---full term
       
        VARMESSAGE :='Updating Currency Rate to TRTRAN012A table for Full Term and Absolute wise';
        MERGE INTO  TRTRAN012A B USING (SELECT STRE_BASE_CURRENCY ,STRE_OTHER_CURRENCY, 
                                            STRE_PRICE_CHANGE FROM TRSYSTEM061
                                        WHERE STRE_REFERENCE_NUMBER =varreferencenumber ) C
           ON (B.DRAT_CURRENCY_CODE =C.STRE_BASE_CURRENCY 
                AND B.DRAT_FOR_CURRENCY=C.STRE_OTHER_CURRENCY )
        WHEN MATCHED THEN UPDATE SET b.DRAT_SPOT_BID=b.DRAT_SPOT_BID + C.STRE_PRICE_CHANGE,
                                   b.DRAT_SPOT_ASK =b.DRAT_SPOT_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH1_BID=b.DRAT_MONTH1_BID + C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH1_ASK=b.DRAT_MONTH1_ASK + C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH2_BID=b.DRAT_MONTH2_BID + C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH2_ASK=b.DRAT_MONTH2_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH3_BID=b.DRAT_MONTH3_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH3_ASK=b.DRAT_MONTH3_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH4_BID=b.DRAT_MONTH4_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH4_ASK=b.DRAT_MONTH4_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH5_BID=b.DRAT_MONTH5_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH5_ASK=b.DRAT_MONTH5_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH6_BID=b.DRAT_MONTH6_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH6_ASK=b.DRAT_MONTH6_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH7_BID=b.DRAT_MONTH7_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH7_ASK=b.DRAT_MONTH7_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH8_BID=b.DRAT_MONTH8_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH8_ASK=b.DRAT_MONTH8_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH9_BID=b.DRAT_MONTH9_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH9_ASK=b.DRAT_MONTH9_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH10_BID=b.DRAT_MONTH10_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH10_ASK=b.DRAT_MONTH10_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH11_BID=b.DRAT_MONTH11_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH11_ASK=b.DRAT_MONTH11_ASK+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH12_BID=b.DRAT_MONTH12_BID+ C.STRE_PRICE_CHANGE,
                                   b.DRAT_MONTH12_ASK=b.DRAT_MONTH12_ASK+ C.STRE_PRICE_CHANGE ;
    
      VARMESSAGE :='Updating Currency Rate to TRTRAN064A table for Full Term and Absolute wise';
      
      MERGE INTO  TRTRAN064A B USING (SELECT STRE_BASE_CURRENCY ,STRE_OTHER_CURRENCY, 
                                            STRE_PRICE_CHANGE FROM TRSYSTEM061
                                        WHERE STRE_REFERENCE_NUMBER =varreferencenumber ) C
           ON (B.CFMM_BASE_CURRENCY =C.STRE_BASE_CURRENCY 
                AND B.CFMM_OTHER_CURRENCY=C.STRE_OTHER_CURRENCY )
       WHEN MATCHED THEN UPDATE SET B.CFMM_OPENING_RATE=B.CFMM_OPENING_RATE + C.STRE_PRICE_CHANGE,
                                  B.CFMM_HIGH_RATE=B.CFMM_HIGH_RATE + C.STRE_PRICE_CHANGE,
                                  B.CFMM_LOW_RATE=B.CFMM_LOW_RATE + C.STRE_PRICE_CHANGE,
                                  B.CFMM_CLOSING_RATE=B.CFMM_CLOSING_RATE + C.STRE_PRICE_CHANGE,
                                  B.CFMM_BID_RATE=B.CFMM_BID_RATE + C.STRE_PRICE_CHANGE,
                                  B.CFMM_ASK_RATE=B.CFMM_ASK_RATE + C.STRE_PRICE_CHANGE,
                                  B.CFMM_OPEN_INTEREST=B.CFMM_OPEN_INTEREST + C.STRE_PRICE_CHANGE ;


              

    ELSIF  NUMSTRESSTYPE=37500002  and NUMCHANGETYPE =37600002 THEN ---gconst.changepercentage ---full term
     
       VARMESSAGE :='Updating Currency Rate to TRTRAN012A table for Full Term and Percentage wise';
       
      MERGE INTO  TRTRAN012A B USING (SELECT STRE_BASE_CURRENCY ,STRE_OTHER_CURRENCY, STRE_PRICE_CHANGE FROM TRSYSTEM061 WHERE
                                       STRE_REFERENCE_NUMBER =varreferencenumber) C
           ON (B.DRAT_CURRENCY_CODE =C.STRE_BASE_CURRENCY 
                AND B.DRAT_FOR_CURRENCY=C.STRE_OTHER_CURRENCY   )
      WHEN MATCHED THEN UPDATE SET B.DRAT_SPOT_BID= ROUND(B.DRAT_SPOT_BID + ( B.DRAT_SPOT_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_SPOT_ASK =round(B.DRAT_SPOT_ASK+ ( B.DRAT_SPOT_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH1_BID=round(B.DRAT_MONTH1_BID + ( B.DRAT_MONTH1_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH1_ASK=round(B.DRAT_MONTH1_ASK + ( B.DRAT_MONTH1_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH2_BID=round(B.DRAT_MONTH2_BID + ( B.DRAT_MONTH2_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH2_ASK=round(B.DRAT_MONTH2_ASK+ ( B.DRAT_MONTH2_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH3_BID=round(B.DRAT_MONTH3_BID+ ( B.DRAT_MONTH3_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH3_ASK=round(B.DRAT_MONTH3_ASK+ ( B.DRAT_MONTH3_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH4_BID=round(B.DRAT_MONTH4_BID+ ( B.DRAT_MONTH4_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH4_ASK=round(B.DRAT_MONTH4_ASK+ ( B.DRAT_MONTH4_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH5_BID=round(B.DRAT_MONTH5_BID+ ( B.DRAT_MONTH5_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH5_ASK=round(B.DRAT_MONTH5_ASK+ ( B.DRAT_MONTH5_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH6_BID=round(B.DRAT_MONTH6_BID+ ( B.DRAT_MONTH6_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH6_ASK=round(B.DRAT_MONTH6_ASK+ ( B.DRAT_MONTH6_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH7_BID=round(B.DRAT_MONTH7_BID+ ( B.DRAT_MONTH7_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH7_ASK=round(B.DRAT_MONTH7_ASK+ ( B.DRAT_MONTH7_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH8_BID=round(B.DRAT_MONTH8_BID+ ( B.DRAT_MONTH8_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH8_ASK=round(B.DRAT_MONTH8_ASK+ ( B.DRAT_MONTH8_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH9_BID=round(B.DRAT_MONTH9_BID+ ( B.DRAT_MONTH9_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH9_ASK=round(B.DRAT_MONTH9_ASK+ ( B.DRAT_MONTH9_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH10_BID=round(B.DRAT_MONTH10_BID+ ( B.DRAT_MONTH10_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH10_ASK=round(B.DRAT_MONTH10_ASK+ ( B.DRAT_MONTH10_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH11_BID=round(B.DRAT_MONTH11_BID+ ( B.DRAT_MONTH11_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH11_ASK=round(B.DRAT_MONTH11_ASK+ ( B.DRAT_MONTH11_ASK*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH12_BID=ROUND(B.DRAT_MONTH12_BID+ ( B.DRAT_MONTH12_BID*C.STRE_PRICE_CHANGE/100), 6),
                                    B.DRAT_MONTH12_ASK=ROUND(B.DRAT_MONTH12_ASK+ ( B.DRAT_MONTH12_ASK*C.STRE_PRICE_CHANGE/100), 6);
                   
      VARMESSAGE :='Updating Currency Rate to TRTRAN064A table for Full Term and Percentage wise';
      
      MERGE INTO  TRTRAN064A B USING (SELECT STRE_BASE_CURRENCY ,STRE_OTHER_CURRENCY, 
                                            STRE_PRICE_CHANGE FROM TRSYSTEM061
                                        WHERE STRE_REFERENCE_NUMBER =varreferencenumber ) C
           ON (B.CFMM_BASE_CURRENCY =C.STRE_BASE_CURRENCY 
                AND B.CFMM_OTHER_CURRENCY=C.STRE_OTHER_CURRENCY )
       WHEN MATCHED THEN UPDATE SET  B.CFMM_OPENING_RATE=round(B.CFMM_OPENING_RATE + ( B.CFMM_OPENING_RATE*C.STRE_PRICE_CHANGE/100), 6),
                                     B.CFMM_HIGH_RATE=round(B.CFMM_HIGH_RATE + ( B.CFMM_HIGH_RATE*C.STRE_PRICE_CHANGE/100), 6),
                                     B.CFMM_LOW_RATE=round(B.CFMM_LOW_RATE + ( B.CFMM_LOW_RATE*C.STRE_PRICE_CHANGE/100), 6),
                                     B.CFMM_CLOSING_RATE=round(B.CFMM_CLOSING_RATE + ( B.CFMM_CLOSING_RATE*C.STRE_PRICE_CHANGE/100), 6),
                                     B.CFMM_BID_RATE=round(B.CFMM_BID_RATE + ( B.CFMM_BID_RATE*C.STRE_PRICE_CHANGE/100), 6),
                                     B.CFMM_ASK_RATE=round(B.CFMM_ASK_RATE + ( B.CFMM_ASK_RATE*C.STRE_PRICE_CHANGE/100), 6),
                                     B.CFMM_OPEN_INTEREST=round(B.CFMM_OPEN_INTEREST + ( B.CFMM_OPEN_INTEREST*C.STRE_PRICE_CHANGE/100), 6) ;        

         
    ELSIF  NUMSTRESSTYPE=37500003 AND NUMCHANGETYPE =37600002 THEN ---gconst.changepercentage ---part term
       VARMESSAGE :='updating Currency Rate to TRTRAN012A table for Part term and Percentage wise';
      FOR CURGETPARTTERM IN (SELECT STRE_BASE_CURRENCY ,STRE_OTHER_CURRENCY,
                                  nvl( STRE_PRICE_CHANGE,0) STRE_PRICE_CHANGE, nvl(STRE_FORWARD_MONTH, 99) STRE_FORWARD_MONTH
                            FROM TRSYSTEM061 WHERE STRE_REFERENCE_NUMBER =varreferencenumber)
      LOOP
        
          IF CURGETPARTTERM.STRE_FORWARD_MONTH =0 THEN
            UPDATE TRTRAN012A SET
                  DRAT_SPOT_BID=round(DRAT_SPOT_BID + ( DRAT_SPOT_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                  DRAT_SPOT_ASK =ROUND(DRAT_SPOT_ASK+ ( DRAT_SPOT_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
            WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
            
              
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =1 THEN
             UPDATE TRTRAN012A SET
                  DRAT_MONTH1_BID=round(DRAT_MONTH1_BID + ( DRAT_MONTH1_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                  DRAT_MONTH1_ASK=ROUND(DRAT_MONTH1_ASK + ( DRAT_MONTH1_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
             WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
                  
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =2 THEN
              UPDATE TRTRAN012A SET      
                     DRAT_MONTH2_BID=ROUND(DRAT_MONTH2_BID + ( DRAT_MONTH2_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                     DRAT_MONTH2_ASK=ROUND(DRAT_MONTH2_ASK+ ( DRAT_MONTH2_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
               WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                    AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
                  
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =3 THEN
            UPDATE TRTRAN012A SET      
                  DRAT_MONTH3_BID=round(DRAT_MONTH3_BID+ ( DRAT_MONTH3_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                  DRAT_MONTH3_ASK=ROUND(DRAT_MONTH3_ASK+ ( DRAT_MONTH3_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
            WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
            
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =4 THEN
            UPDATE TRTRAN012A SET
                   DRAT_MONTH4_BID=ROUND(DRAT_MONTH4_BID+ ( DRAT_MONTH4_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                   DRAT_MONTH4_ASK=round(DRAT_MONTH4_ASK+ ( DRAT_MONTH4_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
            WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =5 THEN
            UPDATE TRTRAN012A SET
                DRAT_MONTH5_BID=round(DRAT_MONTH5_BID+ ( DRAT_MONTH5_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                DRAT_MONTH5_ASK=ROUND(DRAT_MONTH5_ASK+ ( DRAT_MONTH5_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
                WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =6 THEN
             UPDATE TRTRAN012A SET
                    DRAT_MONTH6_BID=round(DRAT_MONTH6_BID+ ( DRAT_MONTH6_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                    DRAT_MONTH6_ASK=round(DRAT_MONTH6_ASK+ ( DRAT_MONTH6_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                    AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =7 THEN
              UPDATE TRTRAN012A SET
                  DRAT_MONTH7_BID=round(DRAT_MONTH7_BID+ ( DRAT_MONTH7_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                  DRAT_MONTH7_ASK=round(DRAT_MONTH7_ASK+ ( DRAT_MONTH7_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
           ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =8 THEN
               UPDATE TRTRAN012A SET
                    DRAT_MONTH8_BID=round(DRAT_MONTH8_BID+ ( DRAT_MONTH8_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                    DRAT_MONTH8_ASK=round(DRAT_MONTH8_ASK+ ( DRAT_MONTH8_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =9 THEN
             UPDATE TRTRAN012A SET
                    DRAT_MONTH9_BID=round(DRAT_MONTH9_BID+ ( DRAT_MONTH9_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                    DRAT_MONTH9_ASK=ROUND(DRAT_MONTH9_ASK+ ( DRAT_MONTH9_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =10 THEN
             UPDATE TRTRAN012A SET
                DRAT_MONTH10_BID=round(DRAT_MONTH10_BID+ ( DRAT_MONTH10_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                DRAT_MONTH10_ASK=round(DRAT_MONTH10_ASK+ ( DRAT_MONTH10_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
             WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =11 THEN
             UPDATE TRTRAN012A SET
                  DRAT_MONTH11_BID=round(DRAT_MONTH11_BID+ ( DRAT_MONTH11_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                  DRAT_MONTH11_ASK=ROUND(DRAT_MONTH11_ASK+ ( DRAT_MONTH11_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =12 THEN
              UPDATE TRTRAN012A SET
                 DRAT_MONTH12_BID=ROUND(DRAT_MONTH12_BID+ ( DRAT_MONTH12_BID*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6),
                 DRAT_MONTH12_ASK=ROUND(DRAT_MONTH12_ASK+ ( DRAT_MONTH12_ASK*CURGETPARTTERM.STRE_PRICE_CHANGE/100), 6)
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          END IF;
            
      END LOOP;
    
    
    ELSIF NUMCHANGETYPE =37600001 AND NUMSTRESSTYPE=37500003 THEN ---gconst.absolute ---Part term
      
      VARMESSAGE :='updating Currency Rate to TRTRAN012A table for Part Term and Absolute wise';
      
      FOR CURGETPARTTERM IN (SELECT STRE_BASE_CURRENCY ,STRE_OTHER_CURRENCY,
                                 nvl( STRE_PRICE_CHANGE,0) STRE_PRICE_CHANGE, nvl(STRE_FORWARD_MONTH, 99) STRE_FORWARD_MONTH
                            FROM TRSYSTEM061 WHERE STRE_REFERENCE_NUMBER =varreferencenumber)
      LOOP
        
          IF CURGETPARTTERM.STRE_FORWARD_MONTH =0 THEN
            UPDATE TRTRAN012A SET
                  DRAT_SPOT_BID=DRAT_SPOT_BID + CURGETPARTTERM.STRE_PRICE_CHANGE,
                  DRAT_SPOT_ASK =DRAT_SPOT_ASK+ CURGETPARTTERM.STRE_PRICE_CHANGE
            WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
            
              
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =1 THEN
             UPDATE TRTRAN012A SET
                  DRAT_MONTH1_BID=DRAT_MONTH1_BID + CURGETPARTTERM.STRE_PRICE_CHANGE,
                  DRAT_MONTH1_ASK=DRAT_MONTH1_ASK + CURGETPARTTERM.STRE_PRICE_CHANGE
             WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
                  
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =2 THEN
              UPDATE TRTRAN012A SET      
                     DRAT_MONTH2_BID=DRAT_MONTH2_BID + CURGETPARTTERM.STRE_PRICE_CHANGE,
                     DRAT_MONTH2_ASK=DRAT_MONTH2_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
               WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                    AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
                  
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =3 THEN
            UPDATE TRTRAN012A SET      
                  DRAT_MONTH3_BID=DRAT_MONTH3_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                  DRAT_MONTH3_ASK=DRAT_MONTH3_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
            WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
            
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =4 THEN
            UPDATE TRTRAN012A SET
                   DRAT_MONTH4_BID=DRAT_MONTH4_BID + CURGETPARTTERM.STRE_PRICE_CHANGE,
                   DRAT_MONTH4_ASK=DRAT_MONTH4_ASK + CURGETPARTTERM.STRE_PRICE_CHANGE
            WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =5 THEN
            UPDATE TRTRAN012A SET
                DRAT_MONTH5_BID=DRAT_MONTH5_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                DRAT_MONTH5_ASK=DRAT_MONTH5_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
                WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =6 THEN
             UPDATE TRTRAN012A SET
                    DRAT_MONTH6_BID=DRAT_MONTH6_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                    DRAT_MONTH6_ASK=DRAT_MONTH6_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                    AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =7 THEN
              UPDATE TRTRAN012A SET
                  DRAT_MONTH7_BID=DRAT_MONTH7_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                  DRAT_MONTH7_ASK=DRAT_MONTH7_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
           ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =8 THEN
               UPDATE TRTRAN012A SET
                    DRAT_MONTH8_BID=DRAT_MONTH8_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                    DRAT_MONTH8_ASK=DRAT_MONTH8_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =9 THEN
             UPDATE TRTRAN012A SET
                    DRAT_MONTH9_BID=DRAT_MONTH9_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                    DRAT_MONTH9_ASK=DRAT_MONTH9_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =10 THEN
             UPDATE TRTRAN012A SET
                DRAT_MONTH10_BID=DRAT_MONTH10_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                DRAT_MONTH10_ASK=DRAT_MONTH10_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
             WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =11 THEN
             UPDATE TRTRAN012A SET
                  DRAT_MONTH11_BID=DRAT_MONTH11_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                  DRAT_MONTH11_ASK=DRAT_MONTH11_ASK+ CURGETPARTTERM.STRE_PRICE_CHANGE
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          ELSIF CURGETPARTTERM.STRE_FORWARD_MONTH =12 THEN
              UPDATE TRTRAN012A SET
                 DRAT_MONTH12_BID=DRAT_MONTH12_BID+  CURGETPARTTERM.STRE_PRICE_CHANGE,
                 DRAT_MONTH12_ASK=DRAT_MONTH12_ASK+  CURGETPARTTERM.STRE_PRICE_CHANGE
              WHERE DRAT_CURRENCY_CODE =CURGETPARTTERM.STRE_BASE_CURRENCY
                  AND DRAT_FOR_CURRENCY =CURGETPARTTERM.STRE_OTHER_CURRENCY ;
        
          END IF;
            
      END LOOP;  
    END IF;
    COMMIT;
    NUMSERIAL :=1;
    return numSerial;
 END IF;   
 if   numstresstype =37500004 then --Scenario Analysis 
     IF NUMPRICETYPE = 37700001 THEN--GCONST.DAYBEGINPRICE THEN
       VARMESSAGE :='Inserting latest Currency Rate of Day Begin Price to TRTRAN012B table';
       -- NUMSERIAL := 1;
        INSERT INTO TRTRAN012B ( DRAT_ROW_NUMBER ,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
              DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,
              DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
              DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
              DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
              DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
              DRAT_MONTH12_ASK,DRAT_CREATE_DATE)
       SELECT ROWNUM, b.DRAT_CURRENCY_CODE,b.DRAT_FOR_CURRENCY,b.DRAT_EFFECTIVE_DATE,
              b.DRAT_SERIAL_NUMBER,b.DRAT_RATE_TIME,b.DRAT_TIME_STAMP,'DAY BEGIN PRICE',
              b.DRAT_SPOT_BID,b.DRAT_SPOT_ASK,b.DRAT_MONTH1_BID,b.DRAT_MONTH1_ASK,b.DRAT_MONTH2_BID,
              b.DRAT_MONTH2_ASK,b.DRAT_MONTH3_BID,b.DRAT_MONTH3_ASK,b.DRAT_MONTH4_BID,b.DRAT_MONTH4_ASK,
              b.DRAT_MONTH5_BID,b.DRAT_MONTH5_ASK,b.DRAT_MONTH6_BID,b.DRAT_MONTH6_ASK,b.DRAT_MONTH7_BID,
              b.DRAT_MONTH7_ASK,b.DRAT_MONTH8_BID,b.DRAT_MONTH8_ASK,b.DRAT_MONTH9_BID,b.DRAT_MONTH9_ASK,
              b.DRAT_MONTH10_BID,b.DRAT_MONTH10_ASK,b.DRAT_MONTH11_BID,b.DRAT_MONTH11_ASK,b.DRAT_MONTH12_BID,
              b.DRAT_MONTH12_ASK,b.DRAT_CREATE_DATE 
          FROM (SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
                        DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,'DAY BEGIN PRICE',
                        DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
                        DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
                        DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
                        DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
                        DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
                        DRAT_MONTH12_ASK,DRAT_CREATE_DATE 
                  FROM TRTRAN012
                  WHERE  DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                   AND (DRAT_EFFECTIVE_DATE,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
                            (SELECT a.DRAT_EFFECTIVE_DATE,a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(min(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                              WHERE  a.DRAT_EFFECTIVE_DATE=DRAT_EFFECTIVE_DATE
                                and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                                and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                                AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                            group by a.DRAT_EFFECTIVE_DATE, a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
                  AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                  order by drat_currency_code,drat_for_currency,drat_effective_date) B ;

        VARMESSAGE :='Inserting latest Currency Rate of Day Begin Price to TRTRAN064B table';
        
        INSERT INTO TRTRAN064B (CFMM_ROW_NUMBER ,CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
       SELECT ROWNUM,B.CFMM_EFFECTIVE_DATE,B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_BASE_CURRENCY,
              B.CFMM_OTHER_CURRENCY,MONTHS_BETWEEN(LAST_DAY(B.CFMM_EXPIRY_MONTH),LAST_DAY(B.CFMM_EFFECTIVE_DATE)) CFMM_RATE_MONTH,B.CFMM_EXPIRY_MONTH,B.CFMM_SERIAL_NUMBER,B.CFMM_OPENING_RATE,
              B.CFMM_HIGH_RATE,B.CFMM_LOW_RATE,B.CFMM_CLOSING_RATE,'DAY BEGIN PRICE',
              B.CFMM_BID_RATE,B.CFMM_ASK_RATE,B.CFMM_OPEN_INTEREST,B.CFMM_VOLUME
          FROM (SELECT  CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
                    CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
                    CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,'DAY BEGIN PRICE',
                    CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME 
                  FROM TRTRAN064 
                  WHERE  CFMM_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                   and  (CFMM_EFFECTIVE_DATE,CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY, CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EXPIRY_MONTH, CFMM_SERIAL_NUMBER) in 
                        (select a.CFMM_EFFECTIVE_DATE,a.CFMM_BASE_CURRENCY,a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE,a.CFMM_INSTRUMENT_TYPE,a.CFMM_EXPIRY_MONTH, nvl(min(a.CFMM_SERIAL_NUMBER),0)
                             from trtran064 a 
                             where a.CFMM_EFFECTIVE_DATE=CFMM_EFFECTIVE_DATE
                             and CFMM_BASE_CURRENCY=a.CFMM_BASE_CURRENCY and CFMM_OTHER_CURRENCY=a.CFMM_OTHER_CURRENCY
                             and  CFMM_EXCHANGE_CODE=a.CFMM_EXCHANGE_CODE and CFMM_INSTRUMENT_TYPE=a.CFMM_INSTRUMENT_TYPE
                             and  CFMM_EXPIRY_MONTH=a.CFMM_EXPIRY_MONTH
                             and a.CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                             group by a.CFMM_EFFECTIVE_DATE, a.CFMM_BASE_CURRENCY, a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_EXPIRY_MONTH)
                     and CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                     order by CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EFFECTIVE_DATE) B ;

    ELSIF NUMPRICETYPE = 37700002 THEN---GCONST.DAYENDPRICE THEN
           
       VARMESSAGE :='Inserting latest Currency Rate of Dayend Price to TRTRAN012B table';
       INSERT INTO TRTRAN012B ( DRAT_ROW_NUMBER ,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
              DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,
              DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
              DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
              DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
              DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
              DRAT_MONTH12_ASK,DRAT_CREATE_DATE)
       SELECT ROWNUM, b.DRAT_CURRENCY_CODE,b.DRAT_FOR_CURRENCY,b.DRAT_EFFECTIVE_DATE,
              b.DRAT_SERIAL_NUMBER,b.DRAT_RATE_TIME,b.DRAT_TIME_STAMP,'DAY END PRICE',
              b.DRAT_SPOT_BID,b.DRAT_SPOT_ASK,b.DRAT_MONTH1_BID,b.DRAT_MONTH1_ASK,b.DRAT_MONTH2_BID,
              b.DRAT_MONTH2_ASK,b.DRAT_MONTH3_BID,b.DRAT_MONTH3_ASK,b.DRAT_MONTH4_BID,b.DRAT_MONTH4_ASK,
              b.DRAT_MONTH5_BID,b.DRAT_MONTH5_ASK,b.DRAT_MONTH6_BID,b.DRAT_MONTH6_ASK,b.DRAT_MONTH7_BID,
              b.DRAT_MONTH7_ASK,b.DRAT_MONTH8_BID,b.DRAT_MONTH8_ASK,b.DRAT_MONTH9_BID,b.DRAT_MONTH9_ASK,
              b.DRAT_MONTH10_BID,b.DRAT_MONTH10_ASK,b.DRAT_MONTH11_BID,b.DRAT_MONTH11_ASK,b.DRAT_MONTH12_BID,
              b.DRAT_MONTH12_ASK,b.DRAT_CREATE_DATE 
          FROM (SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
                        DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,'DAY END PRICE',
                        DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
                        DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
                        DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
                        DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
                        DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
                        DRAT_MONTH12_ASK,DRAT_CREATE_DATE 
                  FROM TRTRAN012 
                  WHERE  DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                   AND (DRAT_EFFECTIVE_DATE,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
                            (SELECT a.DRAT_EFFECTIVE_DATE,a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(max(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                              WHERE  a.DRAT_EFFECTIVE_DATE=DRAT_EFFECTIVE_DATE
                                and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                                and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                                AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                            group by a.DRAT_EFFECTIVE_DATE, a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
                  AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                  order by drat_currency_code,drat_for_currency,drat_effective_date) B ;

        VARMESSAGE :='Inserting latest Currency Rate of Dayend Price to TRTRAN064B table';
        
        INSERT INTO TRTRAN064B (CFMM_ROW_NUMBER ,CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
       SELECT ROWNUM,B.CFMM_EFFECTIVE_DATE,B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_BASE_CURRENCY,
              B.CFMM_OTHER_CURRENCY,MONTHS_BETWEEN(LAST_DAY(B.CFMM_EXPIRY_MONTH),LAST_DAY(B.CFMM_EFFECTIVE_DATE)) CFMM_RATE_MONTH,B.CFMM_EXPIRY_MONTH,B.CFMM_SERIAL_NUMBER,B.CFMM_OPENING_RATE,
              B.CFMM_HIGH_RATE,B.CFMM_LOW_RATE,B.CFMM_CLOSING_RATE,'DAY END PRICE',
              B.CFMM_BID_RATE,B.CFMM_ASK_RATE,B.CFMM_OPEN_INTEREST,B.CFMM_VOLUME
          FROM (SELECT  CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
                    CFMM_OTHER_CURRENCY, CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
                    CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,'DAY END PRICE',
                    CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME 
                  FROM TRTRAN064 
                  WHERE  CFMM_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                  and  (CFMM_EFFECTIVE_DATE,CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY, CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EXPIRY_MONTH, CFMM_SERIAL_NUMBER) in 
                        (select a.CFMM_EFFECTIVE_DATE,a.CFMM_BASE_CURRENCY,a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE,a.CFMM_INSTRUMENT_TYPE,a.CFMM_EXPIRY_MONTH, nvl(max(a.CFMM_SERIAL_NUMBER),0)
                             from trtran064 a 
                             where a.CFMM_EFFECTIVE_DATE=CFMM_EFFECTIVE_DATE
                             and CFMM_BASE_CURRENCY=a.CFMM_BASE_CURRENCY and CFMM_OTHER_CURRENCY=a.CFMM_OTHER_CURRENCY
                             and  CFMM_EXCHANGE_CODE=a.CFMM_EXCHANGE_CODE and CFMM_INSTRUMENT_TYPE=a.CFMM_INSTRUMENT_TYPE
                             and  CFMM_EXPIRY_MONTH=a.CFMM_EXPIRY_MONTH
                             and a.CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                             group by a.CFMM_EFFECTIVE_DATE, a.CFMM_BASE_CURRENCY, a.CFMM_OTHER_CURRENCY, a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_EXPIRY_MONTH)
                  AND CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                  order by CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EFFECTIVE_DATE) B ;

     
    ELSIF NUMPRICETYPE = 37700003 THEN---GCONST.DAYAVGPRICE THEN
     VARMESSAGE :='Inserting Average Currency Rate to TRTRAN012B table';
     
        INSERT INTO TRTRAN012B ( DRAT_ROW_NUMBER ,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
              DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,
              DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
              DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
              DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
              DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
              DRAT_MONTH12_ASK,DRAT_CREATE_DATE)
       SELECT ROWNUM, b.DRAT_CURRENCY_CODE,b.DRAT_FOR_CURRENCY,b.DRAT_EFFECTIVE_DATE,
              b.DRAT_SERIAL_NUMBER,b.DRAT_RATE_TIME,b.DRAT_TIME_STAMP,'AVERAGE PRICE',
              b.DRAT_SPOT_BID,b.DRAT_SPOT_ASK,b.DRAT_MONTH1_BID,b.DRAT_MONTH1_ASK,b.DRAT_MONTH2_BID,
              b.DRAT_MONTH2_ASK,b.DRAT_MONTH3_BID,b.DRAT_MONTH3_ASK,b.DRAT_MONTH4_BID,b.DRAT_MONTH4_ASK,
              b.DRAT_MONTH5_BID,b.DRAT_MONTH5_ASK,b.DRAT_MONTH6_BID,b.DRAT_MONTH6_ASK,b.DRAT_MONTH7_BID,
              b.DRAT_MONTH7_ASK,b.DRAT_MONTH8_BID,b.DRAT_MONTH8_ASK,b.DRAT_MONTH9_BID,b.DRAT_MONTH9_ASK,
              B.DRAT_MONTH10_BID,B.DRAT_MONTH10_ASK,B.DRAT_MONTH11_BID,B.DRAT_MONTH11_ASK,B.DRAT_MONTH12_BID,
              B.DRAT_MONTH12_ASK,DATWORKDATE 
          FROM ( SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,1 DRAT_SERIAL_NUMBER,
                        TO_CHAR(SYSTIMESTAMP,'HH24:MI') DRAT_RATE_TIME,
                        TO_CHAR(SYSTIMESTAMP,'DD/MM/YYYY HH24:MI:SS') DRAT_TIME_STAMP ,
                        AVG(DRAT_SPOT_BID) DRAT_SPOT_BID, AVG(DRAT_SPOT_ASK) DRAT_SPOT_ASK,
                        AVG(DRAT_MONTH1_BID) DRAT_MONTH1_BID ,AVG(DRAT_MONTH1_ASK) DRAT_MONTH1_ASK,
                        AVG(DRAT_MONTH2_BID) DRAT_MONTH2_BID,AVG(DRAT_MONTH2_ASK) DRAT_MONTH2_ASK,
                        AVG(DRAT_MONTH3_BID) DRAT_MONTH3_BID,AVG(DRAT_MONTH3_ASK) DRAT_MONTH3_ASK,
                        AVG(DRAT_MONTH4_BID) DRAT_MONTH4_BID,AVG(DRAT_MONTH4_ASK) DRAT_MONTH4_ASK,
                        AVG(DRAT_MONTH5_BID) DRAT_MONTH5_BID ,AVG(DRAT_MONTH5_ASK) DRAT_MONTH5_ASK,
                        AVG(DRAT_MONTH6_BID) DRAT_MONTH6_BID, AVG(DRAT_MONTH6_ASK) DRAT_MONTH6_ASK,
                        AVG(DRAT_MONTH7_BID) DRAT_MONTH7_BID,AVG(DRAT_MONTH7_ASK) DRAT_MONTH7_ASK,
                        AVG(DRAT_MONTH8_BID) DRAT_MONTH8_BID,AVG(DRAT_MONTH8_ASK) DRAT_MONTH8_ASK,
                        AVG(DRAT_MONTH9_BID) DRAT_MONTH9_BID, AVG(DRAT_MONTH9_ASK) DRAT_MONTH9_ASK,
                        AVG(DRAT_MONTH10_BID) DRAT_MONTH10_BID,AVG(DRAT_MONTH10_ASK) DRAT_MONTH10_ASK,
                        AVG(DRAT_MONTH11_BID)  DRAT_MONTH11_BID,AVG(DRAT_MONTH11_ASK) DRAT_MONTH11_ASK,
                        AVG(DRAT_MONTH12_BID) DRAT_MONTH12_BID, AVG(DRAT_MONTH12_ASK) DRAT_MONTH12_ASK
              FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                              GROUP BY DRAT_CURRENCY_CODE, DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE
                              ORDER BY DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE) B ;

       VARMESSAGE :='Inserting Currency Rate of Day Avg Price into TRTRAN064B';
        
        INSERT INTO TRTRAN064B (CFMM_ROW_NUMBER ,CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
        SELECT ROWNUM,B.CFMM_EFFECTIVE_DATE,B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_BASE_CURRENCY,
              B.CFMM_OTHER_CURRENCY,MONTHS_BETWEEN(LAST_DAY(B.CFMM_EXPIRY_MONTH),LAST_DAY(B.CFMM_EFFECTIVE_DATE)) CFMM_RATE_MONTH , B.CFMM_EXPIRY_MONTH, 1,B.CFMM_OPENING_RATE,
              B.CFMM_HIGH_RATE,B.CFMM_LOW_RATE,B.CFMM_CLOSING_RATE,'AVERAGE PRICE',
              B.CFMM_BID_RATE,B.CFMM_ASK_RATE,B.CFMM_OPEN_INTEREST,B.CFMM_VOLUME
          FROM (SELECT  CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
                    CFMM_OTHER_CURRENCY, CFMM_EXPIRY_MONTH,1,AVG(CFMM_OPENING_RATE) CFMM_OPENING_RATE,
                    AVG(CFMM_HIGH_RATE) CFMM_HIGH_RATE,AVG(CFMM_LOW_RATE) CFMM_LOW_RATE,AVG(CFMM_CLOSING_RATE) CFMM_CLOSING_RATE,'AVERAGE PRICE',
                    AVG(CFMM_BID_RATE) CFMM_BID_RATE,AVG(CFMM_ASK_RATE) CFMM_ASK_RATE,AVG(CFMM_OPEN_INTEREST) CFMM_OPEN_INTEREST,AVG(CFMM_VOLUME) CFMM_VOLUME
                  FROM  TRTRAN064   
                  WHERE  CFMM_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                  AND CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                  group by CFMM_EFFECTIVE_DATE, CFMM_EXCHANGE_CODE, CFMM_INSTRUMENT_TYPE, CFMM_BASE_CURRENCY, CFMM_OTHER_CURRENCY, CFMM_EXPIRY_MONTH
                  ORDER by CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EFFECTIVE_DATE) B ;

        
    ELSIF NUMPRICETYPE = 37700004 THEN---GCONST.DAYMAXPRICE THEN
      VARMESSAGE :='Inserting Maximum Currency Rate to TRTRAN012B table';
       INSERT INTO TRTRAN012B ( DRAT_ROW_NUMBER ,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
              DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,
              DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
              DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
              DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
              DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
              DRAT_MONTH12_ASK,DRAT_CREATE_DATE)
       SELECT ROWNUM, B.DRAT_CURRENCY_CODE,B.DRAT_FOR_CURRENCY,B.DRAT_EFFECTIVE_DATE,
              b.DRAT_SERIAL_NUMBER,b.DRAT_RATE_TIME,b.DRAT_TIME_STAMP,'Maximum Rate',
              b.DRAT_SPOT_BID,b.DRAT_SPOT_ASK,b.DRAT_MONTH1_BID,b.DRAT_MONTH1_ASK,b.DRAT_MONTH2_BID,
              b.DRAT_MONTH2_ASK,b.DRAT_MONTH3_BID,b.DRAT_MONTH3_ASK,b.DRAT_MONTH4_BID,b.DRAT_MONTH4_ASK,
              b.DRAT_MONTH5_BID,b.DRAT_MONTH5_ASK,b.DRAT_MONTH6_BID,b.DRAT_MONTH6_ASK,b.DRAT_MONTH7_BID,
              b.DRAT_MONTH7_ASK,b.DRAT_MONTH8_BID,b.DRAT_MONTH8_ASK,b.DRAT_MONTH9_BID,b.DRAT_MONTH9_ASK,
              B.DRAT_MONTH10_BID,B.DRAT_MONTH10_ASK,B.DRAT_MONTH11_BID,B.DRAT_MONTH11_ASK,B.DRAT_MONTH12_BID,
              B.DRAT_MONTH12_ASK,DATWORKDATE 
          FROM ( SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,1 DRAT_SERIAL_NUMBER,
                        TO_CHAR(SYSTIMESTAMP,'HH24:MI') DRAT_RATE_TIME,
                        TO_CHAR(SYSTIMESTAMP,'DD/MM/YYYY HH24:MI:SS') DRAT_TIME_STAMP ,
                        max(DRAT_SPOT_BID) DRAT_SPOT_BID, max(DRAT_SPOT_ASK) DRAT_SPOT_ASK,
                        max(DRAT_MONTH1_BID) DRAT_MONTH1_BID ,max(DRAT_MONTH1_ASK) DRAT_MONTH1_ASK,
                        max(DRAT_MONTH2_BID) DRAT_MONTH2_BID,max(DRAT_MONTH2_ASK) DRAT_MONTH2_ASK,
                        max(DRAT_MONTH3_BID) DRAT_MONTH3_BID,max(DRAT_MONTH3_ASK) DRAT_MONTH3_ASK,
                        max(DRAT_MONTH4_BID) DRAT_MONTH4_BID,max(DRAT_MONTH4_ASK) DRAT_MONTH4_ASK,
                        max(DRAT_MONTH5_BID) DRAT_MONTH5_BID ,max(DRAT_MONTH5_ASK) DRAT_MONTH5_ASK,
                        max(DRAT_MONTH6_BID) DRAT_MONTH6_BID, max(DRAT_MONTH6_ASK) DRAT_MONTH6_ASK,
                        max(DRAT_MONTH7_BID) DRAT_MONTH7_BID,max(DRAT_MONTH7_ASK) DRAT_MONTH7_ASK,
                        max(DRAT_MONTH8_BID) DRAT_MONTH8_BID,max(DRAT_MONTH8_ASK) DRAT_MONTH8_ASK,
                        max(DRAT_MONTH9_BID) DRAT_MONTH9_BID, max(DRAT_MONTH9_ASK) DRAT_MONTH9_ASK,
                        max(DRAT_MONTH10_BID) DRAT_MONTH10_BID,max(DRAT_MONTH10_ASK) DRAT_MONTH10_ASK,
                        max(DRAT_MONTH11_BID)  DRAT_MONTH11_BID,max(DRAT_MONTH11_ASK) DRAT_MONTH11_ASK,
                        max(DRAT_MONTH12_BID) DRAT_MONTH12_BID, max(DRAT_MONTH12_ASK) DRAT_MONTH12_ASK
              FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                                     AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                              GROUP BY DRAT_CURRENCY_CODE, DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE
                              ORDER BY DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE) B ;
        
        VARMESSAGE :='Inserting Currency Rate of Day Maximum Price into TRTRAN064B';
        
        INSERT INTO TRTRAN064B (CFMM_ROW_NUMBER ,CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
        SELECT ROWNUM,B.CFMM_EFFECTIVE_DATE,B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_BASE_CURRENCY,
              B.CFMM_OTHER_CURRENCY,MONTHS_BETWEEN(LAST_DAY(B.CFMM_EXPIRY_MONTH),LAST_DAY(B.CFMM_EFFECTIVE_DATE)) CFMM_RATE_MONTH , B.CFMM_EXPIRY_MONTH, 1,B.CFMM_OPENING_RATE,
              B.CFMM_HIGH_RATE,B.CFMM_LOW_RATE,B.CFMM_CLOSING_RATE,'MAXIMUM PRICE',
              B.CFMM_BID_RATE,B.CFMM_ASK_RATE,B.CFMM_OPEN_INTEREST,B.CFMM_VOLUME
          FROM (SELECT  CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
                    CFMM_OTHER_CURRENCY,CFMM_EXPIRY_MONTH,1,MAX(CFMM_OPENING_RATE) CFMM_OPENING_RATE,
                    MAX(CFMM_HIGH_RATE) CFMM_HIGH_RATE,MAX(CFMM_LOW_RATE) CFMM_LOW_RATE,MAX(CFMM_CLOSING_RATE) CFMM_CLOSING_RATE,'MAXIMUM PRICE',
                    MAX(CFMM_BID_RATE) CFMM_BID_RATE,MAX(CFMM_ASK_RATE) CFMM_ASK_RATE,MAX(CFMM_OPEN_INTEREST) CFMM_OPEN_INTEREST,MAX(CFMM_VOLUME) CFMM_VOLUME
                  FROM TRTRAN064
                  WHERE  CFMM_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                  AND CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                  group by CFMM_EFFECTIVE_DATE, CFMM_EXCHANGE_CODE, CFMM_INSTRUMENT_TYPE, CFMM_BASE_CURRENCY, CFMM_OTHER_CURRENCY, CFMM_EXPIRY_MONTH
                  order by CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EFFECTIVE_DATE) B ;

      
    ELSIF NUMPRICETYPE = 37700005 THEN--GCONST.DAYMINPRICE THEN
    
     VARMESSAGE :='Inserting Minimun Currency Rate to TRTRAN012B table';
        INSERT INTO TRTRAN012B ( DRAT_ROW_NUMBER ,DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,
              DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,
              DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,DRAT_MONTH2_BID,
              DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,
              DRAT_MONTH5_BID,DRAT_MONTH5_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,DRAT_MONTH7_BID,
              DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH9_BID,DRAT_MONTH9_ASK,
              DRAT_MONTH10_BID,DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK,DRAT_MONTH12_BID,
              DRAT_MONTH12_ASK,DRAT_CREATE_DATE)
        SELECT ROWNUM, B.DRAT_CURRENCY_CODE,B.DRAT_FOR_CURRENCY,B.DRAT_EFFECTIVE_DATE,
              b.DRAT_SERIAL_NUMBER,b.DRAT_RATE_TIME,b.DRAT_TIME_STAMP,'Minimum Rate',
              b.DRAT_SPOT_BID,b.DRAT_SPOT_ASK,b.DRAT_MONTH1_BID,b.DRAT_MONTH1_ASK,b.DRAT_MONTH2_BID,
              b.DRAT_MONTH2_ASK,b.DRAT_MONTH3_BID,b.DRAT_MONTH3_ASK,b.DRAT_MONTH4_BID,b.DRAT_MONTH4_ASK,
              b.DRAT_MONTH5_BID,b.DRAT_MONTH5_ASK,b.DRAT_MONTH6_BID,b.DRAT_MONTH6_ASK,b.DRAT_MONTH7_BID,
              b.DRAT_MONTH7_ASK,b.DRAT_MONTH8_BID,b.DRAT_MONTH8_ASK,b.DRAT_MONTH9_BID,b.DRAT_MONTH9_ASK,
              B.DRAT_MONTH10_BID,B.DRAT_MONTH10_ASK,B.DRAT_MONTH11_BID,B.DRAT_MONTH11_ASK,B.DRAT_MONTH12_BID,
              B.DRAT_MONTH12_ASK,DATWORKDATE 
          FROM ( SELECT DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,1 DRAT_SERIAL_NUMBER,
                        TO_CHAR(SYSTIMESTAMP,'HH24:MI') DRAT_RATE_TIME,
                        TO_CHAR(SYSTIMESTAMP,'DD/MM/YYYY HH24:MI:SS') DRAT_TIME_STAMP ,
                        min(DRAT_SPOT_BID) DRAT_SPOT_BID, min(DRAT_SPOT_ASK) DRAT_SPOT_ASK,
                        min(DRAT_MONTH1_BID) DRAT_MONTH1_BID ,min(DRAT_MONTH1_ASK) DRAT_MONTH1_ASK,
                        min(DRAT_MONTH2_BID) DRAT_MONTH2_BID,min(DRAT_MONTH2_ASK) DRAT_MONTH2_ASK,
                        min(DRAT_MONTH3_BID) DRAT_MONTH3_BID,min(DRAT_MONTH3_ASK) DRAT_MONTH3_ASK,
                        min(DRAT_MONTH4_BID) DRAT_MONTH4_BID,min(DRAT_MONTH4_ASK) DRAT_MONTH4_ASK,
                        min(DRAT_MONTH5_BID) DRAT_MONTH5_BID ,min(DRAT_MONTH5_ASK) DRAT_MONTH5_ASK,
                        min(DRAT_MONTH6_BID) DRAT_MONTH6_BID, min(DRAT_MONTH6_ASK) DRAT_MONTH6_ASK,
                        min(DRAT_MONTH7_BID) DRAT_MONTH7_BID,min(DRAT_MONTH7_ASK) DRAT_MONTH7_ASK,
                        min(DRAT_MONTH8_BID) DRAT_MONTH8_BID,min(DRAT_MONTH8_ASK) DRAT_MONTH8_ASK,
                        min(DRAT_MONTH9_BID) DRAT_MONTH9_BID, min(DRAT_MONTH9_ASK) DRAT_MONTH9_ASK,
                        min(DRAT_MONTH10_BID) DRAT_MONTH10_BID,min(DRAT_MONTH10_ASK) DRAT_MONTH10_ASK,
                        min(DRAT_MONTH11_BID)  DRAT_MONTH11_BID,min(DRAT_MONTH11_ASK) DRAT_MONTH11_ASK,
                        min(DRAT_MONTH12_BID) DRAT_MONTH12_BID, min(DRAT_MONTH12_ASK) DRAT_MONTH12_ASK
              FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                               AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                              GROUP BY DRAT_CURRENCY_CODE, DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE
                              ORDER BY DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE) B ;

    VARMESSAGE :='Inserting Currency Rate of Day Minimum Price into TRTRAN064B';
        
        INSERT INTO TRTRAN064B (CFMM_ROW_NUMBER ,CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
              CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH,CFMM_EXPIRY_MONTH,CFMM_SERIAL_NUMBER,CFMM_OPENING_RATE,
              CFMM_HIGH_RATE,CFMM_LOW_RATE,CFMM_CLOSING_RATE,CFMM_RATE_TIME,
              CFMM_BID_RATE,CFMM_ASK_RATE,CFMM_OPEN_INTEREST,CFMM_VOLUME)
        SELECT ROWNUM,B.CFMM_EFFECTIVE_DATE,B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_BASE_CURRENCY,
              B.CFMM_OTHER_CURRENCY, MONTHS_BETWEEN(LAST_DAY(B.CFMM_EXPIRY_MONTH),LAST_DAY(B.CFMM_EFFECTIVE_DATE)) CFMM_RATE_MONTH , B.CFMM_EXPIRY_MONTH, 1,B.CFMM_OPENING_RATE,
              B.CFMM_HIGH_RATE,B.CFMM_LOW_RATE,B.CFMM_CLOSING_RATE,'MINIMUM PRICE',
              B.CFMM_BID_RATE,B.CFMM_ASK_RATE,B.CFMM_OPEN_INTEREST,B.CFMM_VOLUME
          FROM (SELECT  CFMM_EFFECTIVE_DATE,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_BASE_CURRENCY,
                    CFMM_OTHER_CURRENCY, CFMM_EXPIRY_MONTH,1,min(CFMM_OPENING_RATE) CFMM_OPENING_RATE,
                    min(CFMM_HIGH_RATE) CFMM_HIGH_RATE,min(CFMM_LOW_RATE) CFMM_LOW_RATE,min(CFMM_CLOSING_RATE) CFMM_CLOSING_RATE,'MINIMUM PRICE',
                    min(CFMM_BID_RATE) CFMM_BID_RATE,min(CFMM_ASK_RATE) CFMM_ASK_RATE,min(CFMM_OPEN_INTEREST) CFMM_OPEN_INTEREST,min(CFMM_VOLUME) CFMM_VOLUME
                  FROM  TRTRAN064   
                  WHERE  CFMM_EFFECTIVE_DATE BETWEEN DATSTARTDATE AND DATENDDATE
                  AND CFMM_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                group by CFMM_EFFECTIVE_DATE, CFMM_EXCHANGE_CODE, CFMM_INSTRUMENT_TYPE, CFMM_BASE_CURRENCY, CFMM_OTHER_CURRENCY, CFMM_EXPIRY_MONTH
                   order by CFMM_BASE_CURRENCY,CFMM_OTHER_CURRENCY,CFMM_EXCHANGE_CODE,CFMM_INSTRUMENT_TYPE,CFMM_EFFECTIVE_DATE) B ;

    END IF;
    commit;
    
    IF   NUMCHANGETYPE =37600003 THEN ----change between start date and end date
        
         VARMESSAGE :='Deleting data from TRTRAN012B table';
        
         DELETE FROM TRTRAN012B WHERE DRAT_EFFECTIVE_DATE NOT IN (DATSTARTDATE,DATENDDATE);
         COMMIT;
         VARMESSAGE :='Deleting data from TRTRAN064B table';
        
         DELETE FROM TRTRAN064B WHERE CFMM_EFFECTIVE_DATE NOT IN 
                     (SELECT MAX(CFMM_EFFECTIVE_DATE) FROM TRTRAN064B  WHERE CFMM_EFFECTIVE_DATE<= DATSTARTDATE
                      UNION
                      SELECT MAX(CFMM_EFFECTIVE_DATE) FROM TRTRAN064B  WHERE CFMM_EFFECTIVE_DATE<= DATENDDATE
                                                                                                            );
         COMMIT;
         
          VARMESSAGE :='Inserting data into TRTRAN012B based on the Change between Start and End Date';
         
          merge   into trtran012A c using( SELECT  A.DRAT_CURRENCY_CODE,A.DRAT_FOR_CURRENCY,
              (B.DRAT_SPOT_BID-A.DRAT_SPOT_BID) DRAT_SPOT_BID,
              (B.DRAT_SPOT_ASK -A.DRAT_SPOT_ASK) DRAT_SPOT_ASK,
              (B.DRAT_MONTH1_BID-A.DRAT_MONTH1_BID) DRAT_MONTH1_BID,
              (B.DRAT_MONTH1_ASK -A.DRAT_MONTH1_ASK) DRAT_MONTH1_ASK ,
              (B.DRAT_MONTH2_BID -A.DRAT_MONTH2_BID) DRAT_MONTH2_BID,
              (B.DRAT_MONTH2_ASK -A.DRAT_MONTH2_ASK) DRAT_MONTH2_ASK,
              (B.DRAT_MONTH3_BID -A.DRAT_MONTH3_BID) DRAT_MONTH3_BID,
              (B.DRAT_MONTH3_ASK- A.DRAT_MONTH3_ASK) DRAT_MONTH3_ASK,
              (B.DRAT_MONTH4_BID -A.DRAT_MONTH4_BID) DRAT_MONTH4_BID,
              (B.DRAT_MONTH4_ASK -A.DRAT_MONTH4_ASK) DRAT_MONTH4_ASK,
              (B.DRAT_MONTH5_BID-A.DRAT_MONTH5_BID) DRAT_MONTH5_BID,
              (B.DRAT_MONTH5_ASK -A.DRAT_MONTH5_ASK) DRAT_MONTH5_ASK,
              (B.DRAT_MONTH6_BID -A.DRAT_MONTH6_BID) DRAT_MONTH6_BID,
              (B.DRAT_MONTH6_ASK -A.DRAT_MONTH6_ASK) DRAT_MONTH6_ASK,
              (B.DRAT_MONTH7_BID-A.DRAT_MONTH7_BID) DRAT_MONTH7_BID,
              (B.DRAT_MONTH7_ASK - A.DRAT_MONTH7_ASK) DRAT_MONTH7_ASK,
              (B.DRAT_MONTH8_BID - A.DRAT_MONTH8_BID) DRAT_MONTH8_BID,
              (B.DRAT_MONTH8_ASK -A.DRAT_MONTH8_ASK)  DRAT_MONTH8_ASK,
              (B.DRAT_MONTH9_BID -A.DRAT_MONTH9_BID)  DRAT_MONTH9_BID,
              (B.DRAT_MONTH9_ASK -A.DRAT_MONTH9_ASK)  DRAT_MONTH9_ASK,
              (B.DRAT_MONTH10_BID -A.DRAT_MONTH10_BID) DRAT_MONTH10_BID,
              (B.DRAT_MONTH10_ASK -A.DRAT_MONTH10_ASK) DRAT_MONTH10_ASK,
              (B.DRAT_MONTH11_BID -A.DRAT_MONTH11_BID) DRAT_MONTH11_BID,
              (B.DRAT_MONTH11_ASK -A.DRAT_MONTH11_ASK) DRAT_MONTH11_ASK,
              (B.DRAT_MONTH12_BID -A.DRAT_MONTH12_BID) DRAT_MONTH12_BID,
              (b.DRAT_MONTH12_ASK -a.DRAT_MONTH12_ASK) DRAT_MONTH12_ASK
             FROM TRTRAN012B A , TRTRAN012B B
              WHERE A.DRAT_CURRENCY_CODE =B.DRAT_CURRENCY_CODE AND
              A.DRAT_FOR_CURRENCY =B.DRAT_FOR_CURRENCY AND A.DRAT_EFFECTIVE_DATE= DATSTARTDATE
              AND B.DRAT_EFFECTIVE_DATE= datenddate) D
       ON (C.DRAT_CURRENCY_CODE =D.DRAT_CURRENCY_CODE AND
              C.DRAT_FOR_CURRENCY =D.DRAT_FOR_CURRENCY )
       WHEN MATCHED THEN UPDATE SET
              C.DRAT_SPOT_BID=C.DRAT_SPOT_BID+D.DRAT_SPOT_BID,
              c.DRAT_SPOT_ASK =c.DRAT_SPOT_ASK + d.DRAT_SPOT_ASK,
              c.DRAT_MONTH1_BID=c.DRAT_MONTH1_BID+ d.DRAT_MONTH1_BID,
              C.DRAT_MONTH1_ASK =C.DRAT_MONTH1_ASK+ D.DRAT_MONTH1_ASK ,
              c.DRAT_MONTH2_BID =c.DRAT_MONTH2_BID+ d.DRAT_MONTH2_BID,
              c.DRAT_MONTH2_ASK =c.DRAT_MONTH2_ASK+ d.DRAT_MONTH2_ASK,
              c.DRAT_MONTH3_BID =c.DRAT_MONTH3_BID+ d.DRAT_MONTH3_BID,
              c.DRAT_MONTH3_ASK =c.DRAT_MONTH3_ASK+ d.DRAT_MONTH3_ASK,
              c.DRAT_MONTH4_BID =c.DRAT_MONTH4_BID+ d.DRAT_MONTH4_BID,
              c.DRAT_MONTH4_ASK =c.DRAT_MONTH4_ASK+ d.DRAT_MONTH4_ASK,
              c.DRAT_MONTH5_BID=c.DRAT_MONTH5_BID+ d.DRAT_MONTH5_BID,
              c.DRAT_MONTH5_ASK =c.DRAT_MONTH5_ASK+ d.DRAT_MONTH5_ASK,
              c.DRAT_MONTH6_BID =c.DRAT_MONTH6_BID+ d.DRAT_MONTH6_BID,
              c.DRAT_MONTH6_ASK =c.DRAT_MONTH6_ASK+ d.DRAT_MONTH6_ASK,
              C.DRAT_MONTH7_BID=C.DRAT_MONTH7_BID+ D.DRAT_MONTH7_BID,
              c.DRAT_MONTH7_ASK = c.DRAT_MONTH7_ASK+ d.DRAT_MONTH7_ASK,
              c.DRAT_MONTH8_BID = c.DRAT_MONTH8_BID+ d.DRAT_MONTH8_BID,
              c.DRAT_MONTH8_ASK =c.DRAT_MONTH8_ASK+ d.DRAT_MONTH8_ASK,
              c.DRAT_MONTH9_BID =c.DRAT_MONTH9_BID+ d.DRAT_MONTH9_BID,
              C.DRAT_MONTH9_ASK =C.DRAT_MONTH9_ASK+ D.DRAT_MONTH9_ASK,
              c.DRAT_MONTH10_BID =c.DRAT_MONTH10_BID+ d.DRAT_MONTH10_BID,
              c.DRAT_MONTH10_ASK =c.DRAT_MONTH10_ASK+ d.DRAT_MONTH10_ASK,
              c.DRAT_MONTH11_BID =c.DRAT_MONTH11_BID+ d.DRAT_MONTH11_BID,
              c.DRAT_MONTH11_ASK =c.DRAT_MONTH11_ASK+ d.DRAT_MONTH11_ASK,
              C.DRAT_MONTH12_BID =C.DRAT_MONTH12_BID+ D.DRAT_MONTH12_BID,
              C.DRAT_MONTH12_ASK =C.DRAT_MONTH12_ASK+ D.DRAT_MONTH12_ASK ;
              
       VARMESSAGE :='Inserting data into TRTRAN064B based on the Change between Start and End Date';
         
          MERGE INTO trtran064A c using( SELECT  A.CFMM_BASE_CURRENCY,A.CFMM_OTHER_CURRENCY,
               A.CFMM_EXCHANGE_CODE,A.CFMM_INSTRUMENT_TYPE,A.CFMM_RATE_MONTH,A.CFMM_EXPIRY_MONTH,
              (B.CFMM_OPENING_RATE-A.CFMM_OPENING_RATE) CFMM_OPENING_RATE,
              (B.CFMM_HIGH_RATE - A.CFMM_HIGH_RATE) CFMM_HIGH_RATE,
              (B.CFMM_LOW_RATE- A.CFMM_LOW_RATE) CFMM_LOW_RATE,
              (B.CFMM_CLOSING_RATE- A.CFMM_CLOSING_RATE) CFMM_CLOSING_RATE ,
              (B.CFMM_BID_RATE- A.CFMM_BID_RATE) CFMM_BID_RATE,
              (B.CFMM_ASK_RATE- A.CFMM_ASK_RATE) CFMM_ASK_RATE,
              (B.CFMM_OPEN_INTEREST- A.CFMM_OPEN_INTEREST) CFMM_OPEN_INTEREST,
              (B.CFMM_VOLUME- A.CFMM_VOLUME) CFMM_VOLUME
           FROM TRTRAN064B A , TRTRAN064B B
              WHERE A.CFMM_BASE_CURRENCY =B.CFMM_BASE_CURRENCY 
                AND A.CFMM_OTHER_CURRENCY =B.CFMM_OTHER_CURRENCY
                AND A.CFMM_EXCHANGE_CODE= B.CFMM_EXCHANGE_CODE
                AND A.CFMM_INSTRUMENT_TYPE=B.CFMM_INSTRUMENT_TYPE
                AND MONTHS_BETWEEN(LAST_DAY(a.CFMM_EXPIRY_MONTH),LAST_DAY(a.CFMM_EFFECTIVE_DATE)) =MONTHS_BETWEEN(LAST_DAY(b.CFMM_EXPIRY_MONTH),LAST_DAY(b.CFMM_EFFECTIVE_DATE))
                AND A.CFMM_EFFECTIVE_DATE= (SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064B WHERE CFMM_EFFECTIVE_DATE<=DATSTARTDATE)  
                AND B.CFMM_EFFECTIVE_DATE= (SELECT MAX(CFMM_EFFECTIVE_DATE) FROM trtran064B WHERE CFMM_EFFECTIVE_DATE<=datenddate)) D
           ON  (C.CFMM_BASE_CURRENCY =D.CFMM_BASE_CURRENCY 
                AND C.CFMM_OTHER_CURRENCY =D.CFMM_OTHER_CURRENCY
                AND C.CFMM_EXCHANGE_CODE= D.CFMM_EXCHANGE_CODE
                AND C.CFMM_INSTRUMENT_TYPE=D.CFMM_INSTRUMENT_TYPE
                AND MONTHS_BETWEEN(LAST_DAY(C.CFMM_EXPIRY_MONTH),LAST_DAY(C.CFMM_EFFECTIVE_DATE)) =D.CFMM_RATE_MONTH)
       WHEN MATCHED THEN UPDATE SET
              C.CFMM_OPENING_RATE=C.CFMM_OPENING_RATE+D.CFMM_OPENING_RATE,
              c.CFMM_HIGH_RATE =c.CFMM_HIGH_RATE + d.CFMM_HIGH_RATE,
              c.CFMM_LOW_RATE=c.CFMM_LOW_RATE+ d.CFMM_LOW_RATE,
              C.CFMM_CLOSING_RATE =C.CFMM_CLOSING_RATE+ D.CFMM_CLOSING_RATE ,
              c.CFMM_BID_RATE =c.CFMM_BID_RATE+ d.CFMM_BID_RATE,
              c.CFMM_ASK_RATE =c.CFMM_ASK_RATE+ d.CFMM_ASK_RATE,
              c.CFMM_OPEN_INTEREST =c.CFMM_OPEN_INTEREST+ d.CFMM_OPEN_INTEREST,
              c.CFMM_VOLUME =c.CFMM_VOLUME+ d.CFMM_VOLUME ;
                                  
     
        ELSIF   NUMCHANGETYPE =37600004 THEN --------  standard deviation
          
           VARMESSAGE :='Inserting data into TRTRAN012B based on the STD Change between Start and End Date';
          MERGE INTO  TRTRAN012A MG USING (
               SELECT  B.DRAT_CURRENCY_CODE,B.DRAT_FOR_CURRENCY,
                      ROUND( stddev (B.DRAT_SPOT_BID), 6) DRAT_SPOT_BID,   ROUND( stddev(B.DRAT_SPOT_ASK), 6) DRAT_SPOT_ASK,
                      ROUND( stddev(B.DRAT_MONTH1_BID), 6) DRAT_MONTH1_BID,  ROUND( stddev(B.DRAT_MONTH1_ASK), 6) DRAT_MONTH1_ASK ,
                      ROUND( stddev(B.DRAT_MONTH2_BID), 6) DRAT_MONTH2_BID,  ROUND( stddev(B.DRAT_MONTH2_ASK), 6) DRAT_MONTH2_ASK ,
                      ROUND( stddev(B.DRAT_MONTH3_BID), 6) DRAT_MONTH3_BID,  ROUND( stddev(B.DRAT_MONTH3_ASK), 6) DRAT_MONTH3_ASK,
                      ROUND( stddev(B.DRAT_MONTH4_BID), 6) DRAT_MONTH4_BID,  ROUND( stddev(B.DRAT_MONTH4_ASK), 6) DRAT_MONTH4_ASK,
                      ROUND( stddev(B.DRAT_MONTH5_BID), 6) DRAT_MONTH5_BID,  ROUND( stddev(B.DRAT_MONTH5_ASK), 6) DRAT_MONTH5_ASK,
                      ROUND( stddev(B.DRAT_MONTH6_BID), 6) DRAT_MONTH6_BID,  ROUND( stddev(B.DRAT_MONTH6_ASK), 6) DRAT_MONTH6_ASK,
                      ROUND( stddev(B.DRAT_MONTH7_BID), 6) DRAT_MONTH7_BID,  ROUND( stddev(B.DRAT_MONTH7_ASK), 6) DRAT_MONTH7_ASK,
                      ROUND( stddev(B.DRAT_MONTH8_BID), 6) DRAT_MONTH8_BID,  ROUND( stddev(B.DRAT_MONTH8_ASK), 6) DRAT_MONTH8_ASK,
                      ROUND( stddev(B.DRAT_MONTH9_BID), 6) DRAT_MONTH9_BID,  ROUND( stddev(B.DRAT_MONTH9_ASK), 6) DRAT_MONTH9_ASK,
                      ROUND( stddev(B.DRAT_MONTH10_BID), 6) DRAT_MONTH10_BID, ROUND( stddev(B.DRAT_MONTH10_ASK), 6) DRAT_MONTH10_ASK,
                      ROUND( stddev(B.DRAT_MONTH11_BID), 6) DRAT_MONTH11_BID, ROUND( stddev(B.DRAT_MONTH11_ASK), 6) DRAT_MONTH11_ASK,
                      ROUND( stddev(B.DRAT_MONTH12_BID), 6) DRAT_MONTH12_BID, ROUND( stddev(B.DRAT_MONTH12_ASK), 6) DRAT_MONTH12_ASK 
              FROM 
                 (SELECT A.DRAT_CURRENCY_CODE,A.DRAT_FOR_CURRENCY,A.DRAT_ROW_NUMBER,
                        (A.DRAT_SPOT_BID- LAG(a.DRAT_SPOT_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_BID,
                        (A.DRAT_SPOT_ASK -LAG(a.DRAT_SPOT_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_ASK,
                        (A.DRAT_MONTH1_BID-LAG(a.DRAT_MONTH1_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_BID,
                        (A.DRAT_MONTH1_ASK -LAG(a.DRAT_MONTH1_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_ASK ,
                        (A.DRAT_MONTH2_BID -LAG(a.DRAT_MONTH2_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_BID,
                        (A.DRAT_MONTH2_ASK -LAG(a.DRAT_MONTH2_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_ASK,
                        (A.DRAT_MONTH3_BID -LAG(a.DRAT_MONTH3_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_BID,
                        (A.DRAT_MONTH3_ASK- LAG(a.DRAT_MONTH3_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_ASK,
                        (A.DRAT_MONTH4_BID -LAG(a.DRAT_MONTH4_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_BID,
                        (A.DRAT_MONTH4_ASK -LAG(a.DRAT_MONTH4_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_ASK,
                        (A.DRAT_MONTH5_BID-LAG(a.DRAT_MONTH5_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_BID,
                        (A.DRAT_MONTH5_ASK -LAG(a.DRAT_MONTH5_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_ASK,
                        (A.DRAT_MONTH6_BID -LAG(a.DRAT_MONTH6_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH6_BID,
                        (A.DRAT_MONTH6_ASK -LAG(A.DRAT_MONTH6_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH6_ASK,
                        (A.DRAT_MONTH7_BID-LAG(A.DRAT_MONTH7_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_BID,
                        (A.DRAT_MONTH7_ASK - LAG(A.DRAT_MONTH7_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_ASK,
                        (A.DRAT_MONTH8_BID - LAG(A.DRAT_MONTH8_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH8_BID,
                        (A.DRAT_MONTH8_ASK - LAG(A.DRAT_MONTH8_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH8_ASK,
                        (A.DRAT_MONTH9_BID - LAG(A.DRAT_MONTH9_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_BID,
                        (A.DRAT_MONTH9_ASK -LAG(A.DRAT_MONTH9_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_ASK,
                        (A.DRAT_MONTH10_BID -LAG(A.DRAT_MONTH10_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_BID,
                        (A.DRAT_MONTH10_ASK -LAG(A.DRAT_MONTH10_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_ASK,
                        (A.DRAT_MONTH11_BID -LAG(A.DRAT_MONTH11_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_BID,
                        (A.DRAT_MONTH11_ASK -LAG(A.DRAT_MONTH11_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_ASK,
                        (A.DRAT_MONTH12_BID -LAG(A.DRAT_MONTH12_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_BID,
                        (A.DRAT_MONTH12_ASK -LAG(A.DRAT_MONTH12_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_ASK 
                    FROM  TRTRAN012B A) B WHERE B.DRAT_ROW_NUMBER NOT IN (SELECT  MIN (D.DRAT_ROW_NUMBER) FROM TRTRAN012B D
                                                                        GROUP BY D.DRAT_CURRENCY_CODE, D.DRAT_FOR_CURRENCY )
                 GROUP BY B.DRAT_CURRENCY_CODE, B.DRAT_FOR_CURRENCY) MG1
         ON (MG.DRAT_CURRENCY_CODE =MG1.DRAT_CURRENCY_CODE 
             AND MG.DRAT_FOR_CURRENCY=MG1.DRAT_FOR_CURRENCY   )
         WHEN MATCHED THEN UPDATE SET  mg.DRAT_SPOT_BID= ROUND( mg.DRAT_SPOT_BID +     MG1.DRAT_SPOT_BID, 6),
                                       mg.DRAT_SPOT_ASK =round( mg.DRAT_SPOT_ASK+      mg1.DRAT_SPOT_ASK, 6),
                                       mg.DRAT_MONTH1_BID=round( mg.DRAT_MONTH1_BID +  mg1.DRAT_MONTH1_BID, 6),
                                       mg.DRAT_MONTH1_ASK=round( mg.DRAT_MONTH1_ASK +  mg1.DRAT_MONTH1_ASK, 6),
                                       mg.DRAT_MONTH2_BID=round( mg.DRAT_MONTH2_BID +  mg1.DRAT_MONTH2_BID, 6),
                                       mg.DRAT_MONTH2_ASK=round( mg.DRAT_MONTH2_ASK+  mg1.DRAT_MONTH2_ASK, 6),
                                       mg.DRAT_MONTH3_BID=round( mg.DRAT_MONTH3_BID+  mg1.DRAT_MONTH3_BID, 6),
                                       mg.DRAT_MONTH3_ASK=round( mg.DRAT_MONTH3_ASK+  mg1.DRAT_MONTH3_ASK, 6),
                                       mg.DRAT_MONTH4_BID=round( mg.DRAT_MONTH4_BID+  mg1.DRAT_MONTH4_BID, 6),
                                       mg.DRAT_MONTH4_ASK=round( mg.DRAT_MONTH4_ASK+  mg1.DRAT_MONTH4_ASK, 6),
                                       mg.DRAT_MONTH5_BID=round( mg.DRAT_MONTH5_BID+  mg1.DRAT_MONTH5_BID, 6),
                                       mg.DRAT_MONTH5_ASK=round( mg.DRAT_MONTH5_ASK+  mg1.DRAT_MONTH5_ASK, 6),
                                       mg.DRAT_MONTH6_BID=round( mg.DRAT_MONTH6_BID+  mg1.DRAT_MONTH6_BID, 6),
                                       mg.DRAT_MONTH6_ASK=round( mg.DRAT_MONTH6_ASK+  mg1.DRAT_MONTH6_ASK, 6),
                                       mg.DRAT_MONTH7_BID=round( mg.DRAT_MONTH7_BID+  mg1.DRAT_MONTH7_BID, 6),
                                       mg.DRAT_MONTH7_ASK=round( mg.DRAT_MONTH7_ASK+  mg1.DRAT_MONTH7_ASK, 6),
                                       mg.DRAT_MONTH8_BID=round( mg.DRAT_MONTH8_BID+  mg1.DRAT_MONTH8_BID, 6),
                                       mg.DRAT_MONTH8_ASK=round( mg.DRAT_MONTH8_ASK+  mg1.DRAT_MONTH8_ASK, 6),
                                       mg.DRAT_MONTH9_BID=round( mg.DRAT_MONTH9_BID+  mg1.DRAT_MONTH9_BID, 6),
                                       mg.DRAT_MONTH9_ASK=round( mg.DRAT_MONTH9_ASK+  mg1.DRAT_MONTH9_ASK, 6),
                                       mg.DRAT_MONTH10_BID=round( mg.DRAT_MONTH10_BID+  mg1.DRAT_MONTH10_BID, 6),
                                       mg.DRAT_MONTH10_ASK=round( mg.DRAT_MONTH10_ASK+  mg1.DRAT_MONTH10_ASK, 6),
                                       mg.DRAT_MONTH11_BID=round( mg.DRAT_MONTH11_BID+  mg1.DRAT_MONTH11_BID, 6),
                                       mg.DRAT_MONTH11_ASK=round( mg.DRAT_MONTH11_ASK+  mg1.DRAT_MONTH11_ASK, 6),
                                       mg.DRAT_MONTH12_BID=ROUND( mg.DRAT_MONTH12_BID+  mg1.DRAT_MONTH12_BID, 6),
                                       MG.DRAT_MONTH12_ASK=ROUND( MG.DRAT_MONTH12_ASK+  MG1.DRAT_MONTH12_ASK, 6);
 
            VARMESSAGE :='Inserting data into TRTRAN064B based on the STD Change between Start and End Date';
             MERGE INTO  TRTRAN064A MG USING (
               SELECT  B.CFMM_BASE_CURRENCY,B.CFMM_OTHER_CURRENCY,
                    B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_RATE_MONTH,
                    ROUND(STDDEV(B.CFMM_OPENING_RATE),6) CFMM_OPENING_RATE,
                    ROUND(STDDEV(B.CFMM_HIGH_RATE),6) CFMM_HIGH_RATE,
                    ROUND(STDDEV(B.CFMM_LOW_RATE),6) CFMM_LOW_RATE,
                    ROUND(STDDEV(B.CFMM_CLOSING_RATE),6) CFMM_CLOSING_RATE ,
                    ROUND(STDDEV(B.CFMM_BID_RATE),6) CFMM_BID_RATE,
                    ROUND(STDDEV(B.CFMM_ASK_RATE),6) CFMM_ASK_RATE,
                    ROUND(STDDEV(B.CFMM_OPEN_INTEREST),6) CFMM_OPEN_INTEREST,
                    ROUND(STDDEV(B.CFMM_VOLUME),6) CFMM_VOLUME                      
               FROM 
                 (SELECT  A.CFMM_BASE_CURRENCY,A.CFMM_OTHER_CURRENCY, A.CFMM_EXCHANGE_CODE,
                          A.CFMM_INSTRUMENT_TYPE,A.CFMM_RATE_MONTH,A.CFMM_ROW_NUMBER,
                        (A.CFMM_OPENING_RATE- LAG(a.CFMM_OPENING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPENING_RATE,
                        (A.CFMM_HIGH_RATE -LAG(a.CFMM_HIGH_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_HIGH_RATE,
                        (A.CFMM_LOW_RATE-LAG(a.CFMM_LOW_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_LOW_RATE,
                        (A.CFMM_CLOSING_RATE -LAG(a.CFMM_CLOSING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_CLOSING_RATE ,
                        (A.CFMM_BID_RATE -LAG(a.CFMM_BID_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_BID_RATE,
                        (A.CFMM_ASK_RATE -LAG(A.CFMM_ASK_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_ASK_RATE, 
                        (A.CFMM_OPEN_INTEREST -LAG(A.CFMM_OPEN_INTEREST,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPEN_INTEREST, 
                        (A.CFMM_VOLUME -LAG(A.CFMM_VOLUME,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_VOLUME
                    FROM  TRTRAN064B A) B 
                    WHERE B.CFMM_ROW_NUMBER NOT IN 
                                   (SELECT  MIN (D.CFMM_ROW_NUMBER) FROM TRTRAN064B D
                                        GROUP BY D.CFMM_EXCHANGE_CODE, D.CFMM_INSTRUMENT_TYPE, D.CFMM_BASE_CURRENCY, 
                                                 D.CFMM_OTHER_CURRENCY, D.CFMM_RATE_MONTH )
                                        
                    GROUP BY B.CFMM_EXCHANGE_CODE, B.CFMM_INSTRUMENT_TYPE, B.CFMM_BASE_CURRENCY, 
                                            B.CFMM_OTHER_CURRENCY, B.CFMM_RATE_MONTH) MG1
         ON (MG.CFMM_BASE_CURRENCY =MG1.CFMM_BASE_CURRENCY 
                AND MG.CFMM_OTHER_CURRENCY =MG1.CFMM_OTHER_CURRENCY
                AND MG.CFMM_EXCHANGE_CODE= MG1.CFMM_EXCHANGE_CODE
                AND MG.CFMM_INSTRUMENT_TYPE=MG1.CFMM_INSTRUMENT_TYPE
                AND  MONTHS_BETWEEN(LAST_DAY(MG.CFMM_EXPIRY_MONTH),LAST_DAY(MG.CFMM_EFFECTIVE_DATE))=MG1.CFMM_RATE_MONTH ) 
         WHEN MATCHED THEN UPDATE SET  
              MG.CFMM_OPENING_RATE=ROUND(MG.CFMM_OPENING_RATE+MG1.CFMM_OPENING_RATE,6),
              MG.CFMM_HIGH_RATE =ROUND(MG.CFMM_HIGH_RATE + MG1.CFMM_HIGH_RATE,6),
              MG.CFMM_LOW_RATE=ROUND(MG.CFMM_LOW_RATE+ MG1.CFMM_LOW_RATE,6),
              MG.CFMM_CLOSING_RATE =ROUND(MG.CFMM_CLOSING_RATE+ MG1.CFMM_CLOSING_RATE ,6),
              MG.CFMM_BID_RATE =ROUND(MG.CFMM_BID_RATE+ MG1.CFMM_BID_RATE,6),
              MG.CFMM_ASK_RATE =ROUND(MG.CFMM_ASK_RATE+ MG1.CFMM_ASK_RATE,6),
              MG.CFMM_OPEN_INTEREST =ROUND(MG.CFMM_OPEN_INTEREST+ MG1.CFMM_OPEN_INTEREST,6),
              MG.CFMM_VOLUME =ROUND(MG.CFMM_VOLUME+ MG1.CFMM_VOLUME ,6) ;

       
        ELSIF   NUMCHANGETYPE =37600005 THEN -------- avg change
                                                    
         VARMESSAGE :='Inserting data into TRTRAN012B based on the Average Change between Start and End Date';
         MERGE INTO  TRTRAN012A mg USING (
                SELECT  B.DRAT_CURRENCY_CODE,B.DRAT_FOR_CURRENCY,
                      ROUND((sum (B.DRAT_SPOT_BID)/(count(*)+1)), 6) DRAT_SPOT_BID,   ROUND((sum(B.DRAT_SPOT_ASK)/(count(*)+1)), 6) DRAT_SPOT_ASK,
                      ROUND((sum(B.DRAT_MONTH1_BID)/(count(*)+1)), 6) DRAT_MONTH1_BID,  ROUND((sum(B.DRAT_MONTH1_ASK)/(count(*)+1)), 6) DRAT_MONTH1_ASK ,
                      ROUND((sum(B.DRAT_MONTH2_BID)/(count(*)+1)), 6) DRAT_MONTH2_BID,  ROUND((sum(B.DRAT_MONTH2_ASK)/(count(*)+1)), 6) DRAT_MONTH2_ASK ,
                      ROUND((sum(B.DRAT_MONTH3_BID)/(count(*)+1)), 6) DRAT_MONTH3_BID,  ROUND((sum(B.DRAT_MONTH3_ASK)/(count(*)+1)), 6) DRAT_MONTH3_ASK,
                      ROUND((sum(B.DRAT_MONTH4_BID)/(count(*)+1)), 6) DRAT_MONTH4_BID,  ROUND((sum(B.DRAT_MONTH4_ASK)/(count(*)+1)), 6) DRAT_MONTH4_ASK,
                      ROUND((sum(B.DRAT_MONTH5_BID)/(count(*)+1)), 6) DRAT_MONTH5_BID,  ROUND((sum(B.DRAT_MONTH5_ASK)/(count(*)+1)), 6) DRAT_MONTH5_ASK,
                      ROUND((sum(B.DRAT_MONTH6_BID)/(count(*)+1)), 6) DRAT_MONTH6_BID,  ROUND((sum(B.DRAT_MONTH6_ASK)/(count(*)+1)), 6) DRAT_MONTH6_ASK,
                      ROUND((sum(B.DRAT_MONTH7_BID)/(count(*)+1)), 6) DRAT_MONTH7_BID,  ROUND((sum(B.DRAT_MONTH7_ASK)/(count(*)+1)), 6) DRAT_MONTH7_ASK,
                      ROUND((sum(B.DRAT_MONTH8_BID)/(count(*)+1)), 6) DRAT_MONTH8_BID,  ROUND((sum(B.DRAT_MONTH8_ASK)/(count(*)+1)), 6) DRAT_MONTH8_ASK,
                      ROUND((sum(B.DRAT_MONTH9_BID)/(count(*)+1)), 6) DRAT_MONTH9_BID,  ROUND((sum(B.DRAT_MONTH9_ASK)/(count(*)+1)), 6) DRAT_MONTH9_ASK,
                      ROUND((sum(B.DRAT_MONTH10_BID)/(count(*)+1)), 6) DRAT_MONTH10_BID, ROUND((sum(B.DRAT_MONTH10_ASK)/(count(*)+1)), 6) DRAT_MONTH10_ASK,
                      ROUND((sum(B.DRAT_MONTH11_BID)/(count(*)+1)), 6) DRAT_MONTH11_BID, ROUND((sum(B.DRAT_MONTH11_ASK)/(count(*)+1)), 6) DRAT_MONTH11_ASK,
                      ROUND((SUM(B.DRAT_MONTH12_BID)/(COUNT(*)+1)), 6) DRAT_MONTH12_BID, ROUND((SUM(B.DRAT_MONTH12_ASK)/(COUNT(*)+1)), 6) DRAT_MONTH12_ASK
                FROM 
                 (SELECT A.DRAT_CURRENCY_CODE,A.DRAT_FOR_CURRENCY,A.DRAT_ROW_NUMBER,
                        (A.DRAT_SPOT_BID- LAG(a.DRAT_SPOT_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_BID,
                        (A.DRAT_SPOT_ASK -LAG(a.DRAT_SPOT_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_ASK,
                        (A.DRAT_MONTH1_BID-LAG(a.DRAT_MONTH1_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_BID,
                        (A.DRAT_MONTH1_ASK -LAG(a.DRAT_MONTH1_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_ASK ,
                        (A.DRAT_MONTH2_BID -LAG(a.DRAT_MONTH2_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_BID,
                        (A.DRAT_MONTH2_ASK -LAG(a.DRAT_MONTH2_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_ASK,
                        (A.DRAT_MONTH3_BID -LAG(a.DRAT_MONTH3_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_BID,
                        (A.DRAT_MONTH3_ASK- LAG(a.DRAT_MONTH3_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_ASK,
                        (A.DRAT_MONTH4_BID -LAG(a.DRAT_MONTH4_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_BID,
                        (A.DRAT_MONTH4_ASK -LAG(a.DRAT_MONTH4_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_ASK,
                        (A.DRAT_MONTH5_BID-LAG(a.DRAT_MONTH5_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_BID,
                        (A.DRAT_MONTH5_ASK -LAG(a.DRAT_MONTH5_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_ASK,
                        (A.DRAT_MONTH6_BID -LAG(a.DRAT_MONTH6_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH6_BID,
                        (A.DRAT_MONTH6_ASK -LAG(A.DRAT_MONTH6_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH6_ASK,
                        (A.DRAT_MONTH7_BID-LAG(A.DRAT_MONTH7_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_BID,
                        (A.DRAT_MONTH7_ASK - LAG(A.DRAT_MONTH7_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_ASK,
                        (A.DRAT_MONTH8_BID - LAG(A.DRAT_MONTH8_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH8_BID,
                        (A.DRAT_MONTH8_ASK - LAG(A.DRAT_MONTH8_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH8_ASK,
                        (A.DRAT_MONTH9_BID - LAG(A.DRAT_MONTH9_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_BID,
                        (A.DRAT_MONTH9_ASK -LAG(A.DRAT_MONTH9_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_ASK,
                        (A.DRAT_MONTH10_BID -LAG(A.DRAT_MONTH10_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_BID,
                        (A.DRAT_MONTH10_ASK -LAG(A.DRAT_MONTH10_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_ASK,
                        (A.DRAT_MONTH11_BID -LAG(A.DRAT_MONTH11_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_BID,
                        (A.DRAT_MONTH11_ASK -LAG(A.DRAT_MONTH11_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_ASK,
                        (A.DRAT_MONTH12_BID -LAG(A.DRAT_MONTH12_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_BID,
                        (A.DRAT_MONTH12_ASK -LAG(A.DRAT_MONTH12_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_ASK 
                    FROM  TRTRAN012B A) B WHERE B.DRAT_ROW_NUMBER NOT IN (SELECT  MIN (D.DRAT_ROW_NUMBER) FROM TRTRAN012B D
                                                                        GROUP BY D.DRAT_CURRENCY_CODE, D.DRAT_FOR_CURRENCY )
                 GROUP BY B.DRAT_CURRENCY_CODE, B.DRAT_FOR_CURRENCY) MG1 
         ON (MG.DRAT_CURRENCY_CODE =MG1.DRAT_CURRENCY_CODE 
         AND MG.DRAT_FOR_CURRENCY=MG1.DRAT_FOR_CURRENCY   )
         WHEN MATCHED THEN UPDATE SET  mg.DRAT_SPOT_BID= ROUND( mg.DRAT_SPOT_BID +     MG1.DRAT_SPOT_BID, 6),
                                       mg.DRAT_SPOT_ASK =round( mg.DRAT_SPOT_ASK+      mg1.DRAT_SPOT_ASK, 6),
                                       mg.DRAT_MONTH1_BID=round( mg.DRAT_MONTH1_BID +  mg1.DRAT_MONTH1_BID, 6),
                                       mg.DRAT_MONTH1_ASK=round( mg.DRAT_MONTH1_ASK +  mg1.DRAT_MONTH1_ASK, 6),
                                       mg.DRAT_MONTH2_BID=round( mg.DRAT_MONTH2_BID +  mg1.DRAT_MONTH2_BID, 6),
                                       mg.DRAT_MONTH2_ASK=round( mg.DRAT_MONTH2_ASK+  mg1.DRAT_MONTH2_ASK, 6),
                                       mg.DRAT_MONTH3_BID=round( mg.DRAT_MONTH3_BID+  mg1.DRAT_MONTH3_BID, 6),
                                       mg.DRAT_MONTH3_ASK=round( mg.DRAT_MONTH3_ASK+  mg1.DRAT_MONTH3_ASK, 6),
                                       mg.DRAT_MONTH4_BID=round( mg.DRAT_MONTH4_BID+  mg1.DRAT_MONTH4_BID, 6),
                                       mg.DRAT_MONTH4_ASK=round( mg.DRAT_MONTH4_ASK+  mg1.DRAT_MONTH4_ASK, 6),
                                       mg.DRAT_MONTH5_BID=round( mg.DRAT_MONTH5_BID+  mg1.DRAT_MONTH5_BID, 6),
                                       mg.DRAT_MONTH5_ASK=round( mg.DRAT_MONTH5_ASK+  mg1.DRAT_MONTH5_ASK, 6),
                                       mg.DRAT_MONTH6_BID=round( mg.DRAT_MONTH6_BID+  mg1.DRAT_MONTH6_BID, 6),
                                       mg.DRAT_MONTH6_ASK=round( mg.DRAT_MONTH6_ASK+  mg1.DRAT_MONTH6_ASK, 6),
                                       mg.DRAT_MONTH7_BID=round( mg.DRAT_MONTH7_BID+  mg1.DRAT_MONTH7_BID, 6),
                                       mg.DRAT_MONTH7_ASK=round( mg.DRAT_MONTH7_ASK+  mg1.DRAT_MONTH7_ASK, 6),
                                       mg.DRAT_MONTH8_BID=round( mg.DRAT_MONTH8_BID+  mg1.DRAT_MONTH8_BID, 6),
                                       mg.DRAT_MONTH8_ASK=round( mg.DRAT_MONTH8_ASK+  mg1.DRAT_MONTH8_ASK, 6),
                                       mg.DRAT_MONTH9_BID=round( mg.DRAT_MONTH9_BID+  mg1.DRAT_MONTH9_BID, 6),
                                       mg.DRAT_MONTH9_ASK=round( mg.DRAT_MONTH9_ASK+  mg1.DRAT_MONTH9_ASK, 6),
                                       mg.DRAT_MONTH10_BID=round( mg.DRAT_MONTH10_BID+  mg1.DRAT_MONTH10_BID, 6),
                                       mg.DRAT_MONTH10_ASK=round( mg.DRAT_MONTH10_ASK+  mg1.DRAT_MONTH10_ASK, 6),
                                       mg.DRAT_MONTH11_BID=round( mg.DRAT_MONTH11_BID+  mg1.DRAT_MONTH11_BID, 6),
                                       mg.DRAT_MONTH11_ASK=round( mg.DRAT_MONTH11_ASK+  mg1.DRAT_MONTH11_ASK, 6),
                                       mg.DRAT_MONTH12_BID=ROUND( mg.DRAT_MONTH12_BID+  mg1.DRAT_MONTH12_BID, 6),
                                       mg.DRAT_MONTH12_ASK=ROUND( mg.DRAT_MONTH12_ASK+  mg1.DRAT_MONTH12_ASK, 6);

           VARMESSAGE :='Inserting data into TRTRAN064B based on the Average Change between Start and End Date';
          
           MERGE INTO  TRTRAN064A MG USING (
               SELECT  B.CFMM_BASE_CURRENCY,B.CFMM_OTHER_CURRENCY,
                    B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_RATE_MONTH,
                    ROUND((SUM(B.CFMM_OPENING_RATE)/(count(*)+1)),6) CFMM_OPENING_RATE,
                    ROUND((SUM(B.CFMM_HIGH_RATE)/(count(*)+1)),6) CFMM_HIGH_RATE,
                    ROUND((SUM(B.CFMM_LOW_RATE)/(count(*)+1)),6) CFMM_LOW_RATE,
                    ROUND((SUM(B.CFMM_CLOSING_RATE)/(count(*)+1)),6) CFMM_CLOSING_RATE ,
                    ROUND((SUM(B.CFMM_BID_RATE)/(count(*)+1)),6) CFMM_BID_RATE,
                    ROUND((SUM(B.CFMM_ASK_RATE)/(count(*)+1)),6) CFMM_ASK_RATE,
                    ROUND((SUM(B.CFMM_OPEN_INTEREST)/(count(*)+1)),6) CFMM_OPEN_INTEREST,
                    ROUND((SUM(B.CFMM_VOLUME)/(count(*)+1)),6) CFMM_VOLUME                      
               FROM 
                 (SELECT  A.CFMM_BASE_CURRENCY,A.CFMM_OTHER_CURRENCY, A.CFMM_EXCHANGE_CODE,
                          A.CFMM_INSTRUMENT_TYPE,A.CFMM_RATE_MONTH ,A.CFMM_ROW_NUMBER,
                        (A.CFMM_OPENING_RATE- LAG(a.CFMM_OPENING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPENING_RATE,
                        (A.CFMM_HIGH_RATE -LAG(a.CFMM_HIGH_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_HIGH_RATE,
                        (A.CFMM_LOW_RATE-LAG(a.CFMM_LOW_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_LOW_RATE,
                        (A.CFMM_CLOSING_RATE -LAG(a.CFMM_CLOSING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_CLOSING_RATE ,
                        (A.CFMM_BID_RATE -LAG(a.CFMM_BID_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_BID_RATE,
                        (A.CFMM_ASK_RATE -LAG(A.CFMM_ASK_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_ASK_RATE, 
                        (A.CFMM_OPEN_INTEREST -LAG(A.CFMM_OPEN_INTEREST,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPEN_INTEREST, 
                        (A.CFMM_VOLUME -LAG(A.CFMM_VOLUME,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_VOLUME
                    FROM  TRTRAN064B A) B 
                    WHERE B.CFMM_ROW_NUMBER NOT IN 
                                   (SELECT  MIN (D.CFMM_ROW_NUMBER) FROM TRTRAN064B D
                                        GROUP BY D.CFMM_EXCHANGE_CODE, D.CFMM_INSTRUMENT_TYPE, D.CFMM_BASE_CURRENCY, 
                                                 D.CFMM_OTHER_CURRENCY, D.CFMM_RATE_MONTH )
                                        
                    group by B.CFMM_BASE_CURRENCY, B.CFMM_OTHER_CURRENCY, B.CFMM_EXCHANGE_CODE, B.CFMM_INSTRUMENT_TYPE, B.CFMM_RATE_MONTH) MG1
         ON (MG.CFMM_BASE_CURRENCY =MG1.CFMM_BASE_CURRENCY 
                AND MG.CFMM_OTHER_CURRENCY =MG1.CFMM_OTHER_CURRENCY
                AND MG.CFMM_EXCHANGE_CODE= MG1.CFMM_EXCHANGE_CODE
                AND MG.CFMM_INSTRUMENT_TYPE=MG1.CFMM_INSTRUMENT_TYPE
                AND MONTHS_BETWEEN(LAST_DAY(MG.CFMM_EXPIRY_MONTH),LAST_DAY(MG.CFMM_EFFECTIVE_DATE))=MG1.CFMM_RATE_MONTH ) 
         WHEN MATCHED THEN UPDATE SET  
              MG.CFMM_OPENING_RATE=ROUND(MG.CFMM_OPENING_RATE+MG1.CFMM_OPENING_RATE,6),
              MG.CFMM_HIGH_RATE =ROUND(MG.CFMM_HIGH_RATE + MG1.CFMM_HIGH_RATE,6),
              MG.CFMM_LOW_RATE=ROUND(MG.CFMM_LOW_RATE+ MG1.CFMM_LOW_RATE,6),
              MG.CFMM_CLOSING_RATE =ROUND(MG.CFMM_CLOSING_RATE+ MG1.CFMM_CLOSING_RATE ,6),
              MG.CFMM_BID_RATE =ROUND(MG.CFMM_BID_RATE+ MG1.CFMM_BID_RATE,6),
              MG.CFMM_ASK_RATE =ROUND(MG.CFMM_ASK_RATE+ MG1.CFMM_ASK_RATE,6),
              MG.CFMM_OPEN_INTEREST =ROUND(MG.CFMM_OPEN_INTEREST+ MG1.CFMM_OPEN_INTEREST,6),
              MG.CFMM_VOLUME =ROUND(MG.CFMM_VOLUME+ MG1.CFMM_VOLUME ,6) ;
                                       
        ELSIF   NUMCHANGETYPE =37600006 THEN --------START date- end date  min change
          
           VARMESSAGE :='Inserting data into TRTRAN012B based on the Min Change between Start and End Date';
           
           MERGE INTO  TRTRAN012A mg USING (
                SELECT  B.DRAT_CURRENCY_CODE,B.DRAT_FOR_CURRENCY,
                      ROUND(MIN (B.DRAT_SPOT_BID), 6) DRAT_SPOT_BID,   ROUND(MIN(B.DRAT_SPOT_ASK), 6) DRAT_SPOT_ASK,
                      ROUND(MIN(B.DRAT_MONTH1_BID), 6) DRAT_MONTH1_BID,  ROUND(MIN(B.DRAT_MONTH1_ASK), 6) DRAT_MONTH1_ASK ,
                      ROUND(MIN(B.DRAT_MONTH2_BID), 6) DRAT_MONTH2_BID,  ROUND(MIN(B.DRAT_MONTH2_ASK), 6) DRAT_MONTH2_ASK ,
                      ROUND(MIN(B.DRAT_MONTH3_BID), 6) DRAT_MONTH3_BID,  ROUND(MIN(B.DRAT_MONTH3_ASK), 6) DRAT_MONTH3_ASK,
                      ROUND(MIN(B.DRAT_MONTH4_BID), 6) DRAT_MONTH4_BID,  ROUND(MIN(B.DRAT_MONTH4_ASK), 6) DRAT_MONTH4_ASK,
                      ROUND(MIN(B.DRAT_MONTH5_BID), 6) DRAT_MONTH5_BID,  ROUND(MIN(B.DRAT_MONTH5_ASK), 6) DRAT_MONTH5_ASK,
                      ROUND(MIN(B.DRAT_MONTH6_BID), 6) DRAT_MONTH6_BID,  ROUND(MIN(B.DRAT_MONTH6_ASK), 6) DRAT_MONTH6_ASK,
                      ROUND(MIN(B.DRAT_MONTH7_BID), 6) DRAT_MONTH7_BID,  ROUND(MIN(B.DRAT_MONTH7_ASK), 6) DRAT_MONTH7_ASK,
                      ROUND(MIN(B.DRAT_MONTH8_BID), 6) DRAT_MONTH8_BID,  ROUND(MIN(B.DRAT_MONTH8_ASK), 6) DRAT_MONTH8_ASK,
                      ROUND(MIN(B.DRAT_MONTH9_BID), 6) DRAT_MONTH9_BID,  ROUND(MIN(B.DRAT_MONTH9_ASK), 6) DRAT_MONTH9_ASK,
                      ROUND(MIN(B.DRAT_MONTH10_BID), 6) DRAT_MONTH10_BID, ROUND(MIN(B.DRAT_MONTH10_ASK), 6) DRAT_MONTH10_ASK,
                      ROUND(MIN(B.DRAT_MONTH11_BID), 6) DRAT_MONTH11_BID, ROUND(MIN(B.DRAT_MONTH11_ASK), 6) DRAT_MONTH11_ASK,
                      Round(min(b.DRAT_MONTH12_BID), 6) DRAT_MONTH12_BID, Round(min(b.DRAT_MONTH12_ASK), 6) DRAT_MONTH12_ASK 
                FROM 
                 (SELECT A.DRAT_CURRENCY_CODE,A.DRAT_FOR_CURRENCY,A.DRAT_ROW_NUMBER,
                        (A.DRAT_SPOT_BID- LAG(a.DRAT_SPOT_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_BID,
                        (A.DRAT_SPOT_ASK -LAG(a.DRAT_SPOT_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_ASK,
                        (A.DRAT_MONTH1_BID-LAG(a.DRAT_MONTH1_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_BID,
                        (A.DRAT_MONTH1_ASK -LAG(a.DRAT_MONTH1_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_ASK ,
                        (A.DRAT_MONTH2_BID -LAG(a.DRAT_MONTH2_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_BID,
                        (A.DRAT_MONTH2_ASK -LAG(a.DRAT_MONTH2_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_ASK,
                        (A.DRAT_MONTH3_BID -LAG(a.DRAT_MONTH3_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_BID,
                        (A.DRAT_MONTH3_ASK- LAG(a.DRAT_MONTH3_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_ASK,
                        (A.DRAT_MONTH4_BID -LAG(a.DRAT_MONTH4_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_BID,
                        (A.DRAT_MONTH4_ASK -LAG(a.DRAT_MONTH4_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_ASK,
                        (A.DRAT_MONTH5_BID-LAG(a.DRAT_MONTH5_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_BID,
                        (A.DRAT_MONTH5_ASK -LAG(a.DRAT_MONTH5_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_ASK,
                        (A.DRAT_MONTH6_BID -LAG(a.DRAT_MONTH6_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH6_BID,
                        (A.DRAT_MONTH6_ASK -LAG(A.DRAT_MONTH6_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH6_ASK,
                        (A.DRAT_MONTH7_BID-LAG(A.DRAT_MONTH7_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_BID,
                        (A.DRAT_MONTH7_ASK - LAG(A.DRAT_MONTH7_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_ASK,
                        (A.DRAT_MONTH8_BID - LAG(A.DRAT_MONTH8_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH8_BID,
                        (A.DRAT_MONTH8_ASK - LAG(A.DRAT_MONTH8_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH8_ASK,
                        (A.DRAT_MONTH9_BID - LAG(A.DRAT_MONTH9_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_BID,
                        (A.DRAT_MONTH9_ASK -LAG(A.DRAT_MONTH9_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_ASK,
                        (A.DRAT_MONTH10_BID -LAG(A.DRAT_MONTH10_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_BID,
                        (A.DRAT_MONTH10_ASK -LAG(A.DRAT_MONTH10_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_ASK,
                        (A.DRAT_MONTH11_BID -LAG(A.DRAT_MONTH11_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_BID,
                        (A.DRAT_MONTH11_ASK -LAG(A.DRAT_MONTH11_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_ASK,
                        (A.DRAT_MONTH12_BID -LAG(A.DRAT_MONTH12_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_BID,
                        (A.DRAT_MONTH12_ASK -LAG(a.DRAT_MONTH12_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH12_ASK 
                 FROM  TRTRAN012B A) B WHERE B.DRAT_ROW_NUMBER NOT IN (SELECT  MIN (D.DRAT_ROW_NUMBER) FROM TRTRAN012B D
                                                                        GROUP BY D.DRAT_CURRENCY_CODE, D.DRAT_FOR_CURRENCY )
                 GROUP BY B.DRAT_CURRENCY_CODE, B.DRAT_FOR_CURRENCY) mg1
        ON (MG.DRAT_CURRENCY_CODE =MG1.DRAT_CURRENCY_CODE 
             AND MG.DRAT_FOR_CURRENCY=MG1.DRAT_FOR_CURRENCY   )
         WHEN MATCHED THEN UPDATE SET  mg.DRAT_SPOT_BID= ROUND( mg.DRAT_SPOT_BID +     MG1.DRAT_SPOT_BID, 6),
                                       mg.DRAT_SPOT_ASK =round( mg.DRAT_SPOT_ASK+      mg1.DRAT_SPOT_ASK, 6),
                                       mg.DRAT_MONTH1_BID=round( mg.DRAT_MONTH1_BID +  mg1.DRAT_MONTH1_BID, 6),
                                       mg.DRAT_MONTH1_ASK=round( mg.DRAT_MONTH1_ASK +  mg1.DRAT_MONTH1_ASK, 6),
                                       mg.DRAT_MONTH2_BID=round( mg.DRAT_MONTH2_BID +  mg1.DRAT_MONTH2_BID, 6),
                                       mg.DRAT_MONTH2_ASK=round( mg.DRAT_MONTH2_ASK+  mg1.DRAT_MONTH2_ASK, 6),
                                       mg.DRAT_MONTH3_BID=round( mg.DRAT_MONTH3_BID+  mg1.DRAT_MONTH3_BID, 6),
                                       mg.DRAT_MONTH3_ASK=round( mg.DRAT_MONTH3_ASK+  mg1.DRAT_MONTH3_ASK, 6),
                                       mg.DRAT_MONTH4_BID=round( mg.DRAT_MONTH4_BID+  mg1.DRAT_MONTH4_BID, 6),
                                       mg.DRAT_MONTH4_ASK=round( mg.DRAT_MONTH4_ASK+  mg1.DRAT_MONTH4_ASK, 6),
                                       mg.DRAT_MONTH5_BID=round( mg.DRAT_MONTH5_BID+  mg1.DRAT_MONTH5_BID, 6),
                                       mg.DRAT_MONTH5_ASK=round( mg.DRAT_MONTH5_ASK+  mg1.DRAT_MONTH5_ASK, 6),
                                       mg.DRAT_MONTH6_BID=round( mg.DRAT_MONTH6_BID+  mg1.DRAT_MONTH6_BID, 6),
                                       mg.DRAT_MONTH6_ASK=round( mg.DRAT_MONTH6_ASK+  mg1.DRAT_MONTH6_ASK, 6),
                                       mg.DRAT_MONTH7_BID=round( mg.DRAT_MONTH7_BID+  mg1.DRAT_MONTH7_BID, 6),
                                       mg.DRAT_MONTH7_ASK=round( mg.DRAT_MONTH7_ASK+  mg1.DRAT_MONTH7_ASK, 6),
                                       mg.DRAT_MONTH8_BID=round( mg.DRAT_MONTH8_BID+  mg1.DRAT_MONTH8_BID, 6),
                                       mg.DRAT_MONTH8_ASK=round( mg.DRAT_MONTH8_ASK+  mg1.DRAT_MONTH8_ASK, 6),
                                       mg.DRAT_MONTH9_BID=round( mg.DRAT_MONTH9_BID+  mg1.DRAT_MONTH9_BID, 6),
                                       mg.DRAT_MONTH9_ASK=round( mg.DRAT_MONTH9_ASK+  mg1.DRAT_MONTH9_ASK, 6),
                                       mg.DRAT_MONTH10_BID=round( mg.DRAT_MONTH10_BID+  mg1.DRAT_MONTH10_BID, 6),
                                       mg.DRAT_MONTH10_ASK=round( mg.DRAT_MONTH10_ASK+  mg1.DRAT_MONTH10_ASK, 6),
                                       mg.DRAT_MONTH11_BID=round( mg.DRAT_MONTH11_BID+  mg1.DRAT_MONTH11_BID, 6),
                                       mg.DRAT_MONTH11_ASK=round( mg.DRAT_MONTH11_ASK+  mg1.DRAT_MONTH11_ASK, 6),
                                       mg.DRAT_MONTH12_BID=ROUND( mg.DRAT_MONTH12_BID+  mg1.DRAT_MONTH12_BID, 6),
                                       MG.DRAT_MONTH12_ASK=ROUND( MG.DRAT_MONTH12_ASK+  MG1.DRAT_MONTH12_ASK, 6);
 
          VARMESSAGE :='Inserting data into TRTRAN064B based on the Min Change between Start and End Date';
          MERGE INTO  TRTRAN064A MG USING (
               SELECT  B.CFMM_BASE_CURRENCY,B.CFMM_OTHER_CURRENCY,
                    B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_RATE_MONTH,
                    ROUND(MIN(B.CFMM_OPENING_RATE),6) CFMM_OPENING_RATE,
                    ROUND(MIN(B.CFMM_HIGH_RATE),6) CFMM_HIGH_RATE,
                    ROUND(MIN(B.CFMM_LOW_RATE),6) CFMM_LOW_RATE,
                    ROUND(MIN(B.CFMM_CLOSING_RATE),6) CFMM_CLOSING_RATE ,
                    ROUND(MIN(B.CFMM_BID_RATE),6) CFMM_BID_RATE,
                    ROUND(MIN(B.CFMM_ASK_RATE),6) CFMM_ASK_RATE,
                    ROUND(MIN(B.CFMM_OPEN_INTEREST),6) CFMM_OPEN_INTEREST,
                    ROUND(MIN(B.CFMM_VOLUME),6) CFMM_VOLUME                      
               FROM 
                 (SELECT  A.CFMM_BASE_CURRENCY,A.CFMM_OTHER_CURRENCY, A.CFMM_EXCHANGE_CODE,
                          A.CFMM_INSTRUMENT_TYPE,A.CFMM_RATE_MONTH ,A.CFMM_ROW_NUMBER,
                        (A.CFMM_OPENING_RATE- LAG(a.CFMM_OPENING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPENING_RATE,
                        (A.CFMM_HIGH_RATE -LAG(a.CFMM_HIGH_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_HIGH_RATE,
                        (A.CFMM_LOW_RATE-LAG(a.CFMM_LOW_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_LOW_RATE,
                        (A.CFMM_CLOSING_RATE -LAG(a.CFMM_CLOSING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_CLOSING_RATE ,
                        (A.CFMM_BID_RATE -LAG(a.CFMM_BID_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_BID_RATE,
                        (A.CFMM_ASK_RATE -LAG(A.CFMM_ASK_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_ASK_RATE, 
                        (A.CFMM_OPEN_INTEREST -LAG(A.CFMM_OPEN_INTEREST,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPEN_INTEREST, 
                        (A.CFMM_VOLUME -LAG(A.CFMM_VOLUME,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_VOLUME
                    FROM  TRTRAN064B A) B 
                    WHERE B.CFMM_ROW_NUMBER NOT IN 
                                   (SELECT  MIN (D.CFMM_ROW_NUMBER) FROM TRTRAN064B D
                                        GROUP BY D.CFMM_EXCHANGE_CODE, D.CFMM_INSTRUMENT_TYPE, D.CFMM_BASE_CURRENCY, 
                                                 D.CFMM_OTHER_CURRENCY, D.CFMM_RATE_MONTH )
                                        
                    GROUP BY B.CFMM_EXCHANGE_CODE, B.CFMM_INSTRUMENT_TYPE, B.CFMM_BASE_CURRENCY, 
                                            B.CFMM_OTHER_CURRENCY, B.CFMM_RATE_MONTH) MG1
         ON (MG.CFMM_BASE_CURRENCY =MG1.CFMM_BASE_CURRENCY 
                AND MG.CFMM_OTHER_CURRENCY =MG1.CFMM_OTHER_CURRENCY
                AND MG.CFMM_EXCHANGE_CODE= MG1.CFMM_EXCHANGE_CODE
                AND MG.CFMM_INSTRUMENT_TYPE=MG1.CFMM_INSTRUMENT_TYPE
               AND MONTHS_BETWEEN(LAST_DAY(MG.CFMM_EXPIRY_MONTH),LAST_DAY(MG.CFMM_EFFECTIVE_DATE))=MG1.CFMM_RATE_MONTH ) 
         WHEN MATCHED THEN UPDATE SET  
              MG.CFMM_OPENING_RATE=ROUND(MG.CFMM_OPENING_RATE+MG1.CFMM_OPENING_RATE,6),
              MG.CFMM_HIGH_RATE =ROUND(MG.CFMM_HIGH_RATE + MG1.CFMM_HIGH_RATE,6),
              MG.CFMM_LOW_RATE=ROUND(MG.CFMM_LOW_RATE+ MG1.CFMM_LOW_RATE,6),
              MG.CFMM_CLOSING_RATE =ROUND(MG.CFMM_CLOSING_RATE+ MG1.CFMM_CLOSING_RATE ,6),
              MG.CFMM_BID_RATE =ROUND(MG.CFMM_BID_RATE+ MG1.CFMM_BID_RATE,6),
              MG.CFMM_ASK_RATE =ROUND(MG.CFMM_ASK_RATE+ MG1.CFMM_ASK_RATE,6),
              MG.CFMM_OPEN_INTEREST =ROUND(MG.CFMM_OPEN_INTEREST+ MG1.CFMM_OPEN_INTEREST,6),
              MG.CFMM_VOLUME =ROUND(MG.CFMM_VOLUME+ MG1.CFMM_VOLUME ,6) ;
                                       
      
        ELSIF   NUMCHANGETYPE =37600007 THEN -------- max change
            VARMESSAGE :='Inserting data into TRTRAN012B table on the Max Change between Start and End Date';
           MERGE INTO  TRTRAN012A mg USING (
              SELECT  B.DRAT_CURRENCY_CODE,B.DRAT_FOR_CURRENCY,
                      ROUND(max (B.DRAT_SPOT_BID), 6) DRAT_SPOT_BID,   ROUND(max(B.DRAT_SPOT_ASK), 6) DRAT_SPOT_ASK,
                      ROUND(max(B.DRAT_MONTH1_BID), 6) DRAT_MONTH1_BID,  ROUND(max(B.DRAT_MONTH1_ASK), 6) DRAT_MONTH1_ASK ,
                      ROUND(max(B.DRAT_MONTH2_BID), 6) DRAT_MONTH2_BID,  ROUND(max(B.DRAT_MONTH2_ASK), 6) DRAT_MONTH2_ASK ,
                      ROUND(max(B.DRAT_MONTH3_BID), 6) DRAT_MONTH3_BID,  ROUND(max(B.DRAT_MONTH3_ASK), 6) DRAT_MONTH3_ASK,
                      ROUND(max(B.DRAT_MONTH4_BID), 6) DRAT_MONTH4_BID,  ROUND(max(B.DRAT_MONTH4_ASK), 6) DRAT_MONTH4_ASK,
                      ROUND(max(B.DRAT_MONTH5_BID), 6) DRAT_MONTH5_BID,  ROUND(max(B.DRAT_MONTH5_ASK), 6) DRAT_MONTH5_ASK,
                      ROUND(max(B.DRAT_MONTH6_BID), 6) DRAT_MONTH6_BID,  ROUND(max(B.DRAT_MONTH6_ASK), 6) DRAT_MONTH6_ASK,
                      ROUND(max(B.DRAT_MONTH7_BID), 6) DRAT_MONTH7_BID,  ROUND(max(B.DRAT_MONTH7_ASK), 6) DRAT_MONTH7_ASK,
                      ROUND(max(B.DRAT_MONTH8_BID), 6) DRAT_MONTH8_BID,  ROUND(max(B.DRAT_MONTH8_ASK), 6) DRAT_MONTH8_ASK,
                      ROUND(max(B.DRAT_MONTH9_BID), 6) DRAT_MONTH9_BID,  ROUND(max(B.DRAT_MONTH9_ASK), 6) DRAT_MONTH9_ASK,
                      ROUND(max(B.DRAT_MONTH10_BID), 6) DRAT_MONTH10_BID, ROUND(max(B.DRAT_MONTH10_ASK), 6) DRAT_MONTH10_ASK,
                      ROUND(max(B.DRAT_MONTH11_BID), 6) DRAT_MONTH11_BID, ROUND(max(B.DRAT_MONTH11_ASK), 6) DRAT_MONTH11_ASK,
                      ROUND(max(B.DRAT_MONTH12_BID), 6) DRAT_MONTH12_BID, ROUND(max(B.DRAT_MONTH12_ASK), 6) DRAT_MONTH12_ASK 
              FROM 
                 (SELECT A.DRAT_CURRENCY_CODE,A.DRAT_FOR_CURRENCY,A.DRAT_ROW_NUMBER,
                        (A.DRAT_SPOT_BID- LAG(a.DRAT_SPOT_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_BID,
                        (A.DRAT_SPOT_ASK -LAG(a.DRAT_SPOT_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_SPOT_ASK,
                        (A.DRAT_MONTH1_BID-LAG(a.DRAT_MONTH1_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_BID,
                        (A.DRAT_MONTH1_ASK -LAG(a.DRAT_MONTH1_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH1_ASK ,
                        (A.DRAT_MONTH2_BID -LAG(a.DRAT_MONTH2_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_BID,
                        (A.DRAT_MONTH2_ASK -LAG(a.DRAT_MONTH2_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH2_ASK,
                        (A.DRAT_MONTH3_BID -LAG(a.DRAT_MONTH3_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_BID,
                        (A.DRAT_MONTH3_ASK- LAG(a.DRAT_MONTH3_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH3_ASK,
                        (A.DRAT_MONTH4_BID -LAG(a.DRAT_MONTH4_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_BID,
                        (A.DRAT_MONTH4_ASK -LAG(a.DRAT_MONTH4_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH4_ASK,
                        (A.DRAT_MONTH5_BID-LAG(a.DRAT_MONTH5_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_BID,
                        (A.DRAT_MONTH5_ASK -LAG(a.DRAT_MONTH5_ASK,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH5_ASK,
                        (A.DRAT_MONTH6_BID -LAG(a.DRAT_MONTH6_BID,1,0) OVER (ORDER BY a.DRAT_ROW_NUMBER)) DRAT_MONTH6_BID,
                        (A.DRAT_MONTH6_ASK -LAG(A.DRAT_MONTH6_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH6_ASK,
                        (A.DRAT_MONTH7_BID-LAG(A.DRAT_MONTH7_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_BID,
                        (A.DRAT_MONTH7_ASK - LAG(A.DRAT_MONTH7_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH7_ASK,
                        (A.DRAT_MONTH8_BID - LAG(A.DRAT_MONTH8_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH8_BID,
                        (A.DRAT_MONTH8_ASK - LAG(A.DRAT_MONTH8_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH8_ASK,
                        (A.DRAT_MONTH9_BID - LAG(A.DRAT_MONTH9_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_BID,
                        (A.DRAT_MONTH9_ASK -LAG(A.DRAT_MONTH9_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER))  DRAT_MONTH9_ASK,
                        (A.DRAT_MONTH10_BID -LAG(A.DRAT_MONTH10_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_BID,
                        (A.DRAT_MONTH10_ASK -LAG(A.DRAT_MONTH10_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH10_ASK,
                        (A.DRAT_MONTH11_BID -LAG(A.DRAT_MONTH11_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_BID,
                        (A.DRAT_MONTH11_ASK -LAG(A.DRAT_MONTH11_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH11_ASK,
                        (A.DRAT_MONTH12_BID -LAG(A.DRAT_MONTH12_BID,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_BID,
                        (A.DRAT_MONTH12_ASK -LAG(A.DRAT_MONTH12_ASK,1,0) OVER (ORDER BY A.DRAT_ROW_NUMBER)) DRAT_MONTH12_ASK 
                    FROM  TRTRAN012B A) B WHERE B.DRAT_ROW_NUMBER NOT IN (SELECT  MIN (D.DRAT_ROW_NUMBER) FROM TRTRAN012B D
                                                                        GROUP BY D.DRAT_CURRENCY_CODE, D.DRAT_FOR_CURRENCY )
                 GROUP BY B.DRAT_CURRENCY_CODE, B.DRAT_FOR_CURRENCY) MG1
         ON (MG.DRAT_CURRENCY_CODE =MG1.DRAT_CURRENCY_CODE 
             AND MG.DRAT_FOR_CURRENCY=MG1.DRAT_FOR_CURRENCY   )
         WHEN MATCHED THEN UPDATE SET  mg.DRAT_SPOT_BID= ROUND( mg.DRAT_SPOT_BID +     MG1.DRAT_SPOT_BID, 6),
                                       mg.DRAT_SPOT_ASK =round( mg.DRAT_SPOT_ASK+      mg1.DRAT_SPOT_ASK, 6),
                                       mg.DRAT_MONTH1_BID=round( mg.DRAT_MONTH1_BID +  mg1.DRAT_MONTH1_BID, 6),
                                       mg.DRAT_MONTH1_ASK=round( mg.DRAT_MONTH1_ASK +  mg1.DRAT_MONTH1_ASK, 6),
                                       mg.DRAT_MONTH2_BID=round( mg.DRAT_MONTH2_BID +  mg1.DRAT_MONTH2_BID, 6),
                                       mg.DRAT_MONTH2_ASK=round( mg.DRAT_MONTH2_ASK+  mg1.DRAT_MONTH2_ASK, 6),
                                       mg.DRAT_MONTH3_BID=round( mg.DRAT_MONTH3_BID+  mg1.DRAT_MONTH3_BID, 6),
                                       mg.DRAT_MONTH3_ASK=round( mg.DRAT_MONTH3_ASK+  mg1.DRAT_MONTH3_ASK, 6),
                                       mg.DRAT_MONTH4_BID=round( mg.DRAT_MONTH4_BID+  mg1.DRAT_MONTH4_BID, 6),
                                       mg.DRAT_MONTH4_ASK=round( mg.DRAT_MONTH4_ASK+  mg1.DRAT_MONTH4_ASK, 6),
                                       mg.DRAT_MONTH5_BID=round( mg.DRAT_MONTH5_BID+  mg1.DRAT_MONTH5_BID, 6),
                                       mg.DRAT_MONTH5_ASK=round( mg.DRAT_MONTH5_ASK+  mg1.DRAT_MONTH5_ASK, 6),
                                       mg.DRAT_MONTH6_BID=round( mg.DRAT_MONTH6_BID+  mg1.DRAT_MONTH6_BID, 6),
                                       mg.DRAT_MONTH6_ASK=round( mg.DRAT_MONTH6_ASK+  mg1.DRAT_MONTH6_ASK, 6),
                                       mg.DRAT_MONTH7_BID=round( mg.DRAT_MONTH7_BID+  mg1.DRAT_MONTH7_BID, 6),
                                       mg.DRAT_MONTH7_ASK=round( mg.DRAT_MONTH7_ASK+  mg1.DRAT_MONTH7_ASK, 6),
                                       mg.DRAT_MONTH8_BID=round( mg.DRAT_MONTH8_BID+  mg1.DRAT_MONTH8_BID, 6),
                                       mg.DRAT_MONTH8_ASK=round( mg.DRAT_MONTH8_ASK+  mg1.DRAT_MONTH8_ASK, 6),
                                       mg.DRAT_MONTH9_BID=round( mg.DRAT_MONTH9_BID+  mg1.DRAT_MONTH9_BID, 6),
                                       mg.DRAT_MONTH9_ASK=round( mg.DRAT_MONTH9_ASK+  mg1.DRAT_MONTH9_ASK, 6),
                                       mg.DRAT_MONTH10_BID=round( mg.DRAT_MONTH10_BID+  mg1.DRAT_MONTH10_BID, 6),
                                       mg.DRAT_MONTH10_ASK=round( mg.DRAT_MONTH10_ASK+  mg1.DRAT_MONTH10_ASK, 6),
                                       mg.DRAT_MONTH11_BID=round( mg.DRAT_MONTH11_BID+  mg1.DRAT_MONTH11_BID, 6),
                                       mg.DRAT_MONTH11_ASK=round( mg.DRAT_MONTH11_ASK+  mg1.DRAT_MONTH11_ASK, 6),
                                       mg.DRAT_MONTH12_BID=ROUND( mg.DRAT_MONTH12_BID+  mg1.DRAT_MONTH12_BID, 6),
                                       MG.DRAT_MONTH12_ASK=ROUND( MG.DRAT_MONTH12_ASK+  MG1.DRAT_MONTH12_ASK, 6);
 
          VARMESSAGE :='Inserting data into TRTRAN064B table on the Max Change between Start and End Date';
          MERGE INTO  TRTRAN064A MG USING (
               SELECT  B.CFMM_BASE_CURRENCY,B.CFMM_OTHER_CURRENCY,
                    B.CFMM_EXCHANGE_CODE,B.CFMM_INSTRUMENT_TYPE,B.CFMM_RATE_MONTH,
                    ROUND(MAX(B.CFMM_OPENING_RATE),6) CFMM_OPENING_RATE,
                    ROUND(MAX(B.CFMM_HIGH_RATE),6) CFMM_HIGH_RATE,
                    ROUND(MAX(B.CFMM_LOW_RATE),6) CFMM_LOW_RATE,
                    ROUND(MAX(B.CFMM_CLOSING_RATE),6) CFMM_CLOSING_RATE ,
                    ROUND(MAX(B.CFMM_BID_RATE),6) CFMM_BID_RATE,
                    ROUND(MAX(B.CFMM_ASK_RATE),6) CFMM_ASK_RATE,
                    ROUND(MAX(B.CFMM_OPEN_INTEREST),6) CFMM_OPEN_INTEREST,
                    ROUND(MAX(B.CFMM_VOLUME),6) CFMM_VOLUME                      
               FROM 
                 (SELECT  A.CFMM_BASE_CURRENCY,A.CFMM_OTHER_CURRENCY, A.CFMM_EXCHANGE_CODE,
                          A.CFMM_INSTRUMENT_TYPE,A.CFMM_RATE_MONTH ,A.CFMM_ROW_NUMBER,
                        (A.CFMM_OPENING_RATE- LAG(a.CFMM_OPENING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPENING_RATE,
                        (A.CFMM_HIGH_RATE -LAG(a.CFMM_HIGH_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_HIGH_RATE,
                        (A.CFMM_LOW_RATE-LAG(a.CFMM_LOW_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_LOW_RATE,
                        (A.CFMM_CLOSING_RATE -LAG(a.CFMM_CLOSING_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_CLOSING_RATE ,
                        (A.CFMM_BID_RATE -LAG(a.CFMM_BID_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_BID_RATE,
                        (A.CFMM_ASK_RATE -LAG(A.CFMM_ASK_RATE,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_ASK_RATE, 
                        (A.CFMM_OPEN_INTEREST -LAG(A.CFMM_OPEN_INTEREST,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_OPEN_INTEREST, 
                        (A.CFMM_VOLUME -LAG(A.CFMM_VOLUME,1,0) OVER (partition by a.CFMM_EXCHANGE_CODE, a.CFMM_INSTRUMENT_TYPE, a.CFMM_BASE_CURRENCY, 
                                            a.CFMM_OTHER_CURRENCY,CFMM_RATE_MONTH ORDER BY a.CFMM_ROW_NUMBER)) CFMM_VOLUME
                    FROM  TRTRAN064B A) B 
                    WHERE B.CFMM_ROW_NUMBER NOT IN 
                                   (SELECT  MIN (D.CFMM_ROW_NUMBER) FROM TRTRAN064B D
                                        GROUP BY D.CFMM_EXCHANGE_CODE, D.CFMM_INSTRUMENT_TYPE, D.CFMM_BASE_CURRENCY, 
                                                 D.CFMM_OTHER_CURRENCY, D.CFMM_RATE_MONTH )
                                        
                    GROUP BY B.CFMM_EXCHANGE_CODE, B.CFMM_INSTRUMENT_TYPE, B.CFMM_BASE_CURRENCY, 
                                            B.CFMM_OTHER_CURRENCY, B.CFMM_RATE_MONTH) MG1
         ON (MG.CFMM_BASE_CURRENCY =MG1.CFMM_BASE_CURRENCY 
                AND MG.CFMM_OTHER_CURRENCY =MG1.CFMM_OTHER_CURRENCY
                AND MG.CFMM_EXCHANGE_CODE= MG1.CFMM_EXCHANGE_CODE
                AND MG.CFMM_INSTRUMENT_TYPE=MG1.CFMM_INSTRUMENT_TYPE
                AND MONTHS_BETWEEN(LAST_DAY(MG.CFMM_EXPIRY_MONTH),LAST_DAY(MG.CFMM_EFFECTIVE_DATE))=MG1.CFMM_RATE_MONTH ) 
         WHEN MATCHED THEN UPDATE SET  
              MG.CFMM_OPENING_RATE=ROUND(MG.CFMM_OPENING_RATE+MG1.CFMM_OPENING_RATE,6),
              MG.CFMM_HIGH_RATE =ROUND(MG.CFMM_HIGH_RATE + MG1.CFMM_HIGH_RATE,6),
              MG.CFMM_LOW_RATE=ROUND(MG.CFMM_LOW_RATE+ MG1.CFMM_LOW_RATE,6),
              MG.CFMM_CLOSING_RATE =ROUND(MG.CFMM_CLOSING_RATE+ MG1.CFMM_CLOSING_RATE ,6),
              MG.CFMM_BID_RATE =ROUND(MG.CFMM_BID_RATE+ MG1.CFMM_BID_RATE,6),
              MG.CFMM_ASK_RATE =ROUND(MG.CFMM_ASK_RATE+ MG1.CFMM_ASK_RATE,6),
              MG.CFMM_OPEN_INTEREST =ROUND(MG.CFMM_OPEN_INTEREST+ MG1.CFMM_OPEN_INTEREST,6),
              MG.CFMM_VOLUME =ROUND(MG.CFMM_VOLUME+ MG1.CFMM_VOLUME ,6) ;
                                       
        
        END IF;
         commit;
        numSerial :=1;
        RETURN NUMSERIAL;

END IF;

COMMIT;
numSerial :=1;
return numSerial;
 
 EXCEPTION
 WHEN EXPGETRATE THEN
      NUMERROR := 1;
      varError := 'Rate not Found';
      varError := GConst.fncReturnError('Stresscal', numError, varMessage, 
                      varOperation, varError);
      ROLLBACK;                      
      RAISE_APPLICATION_ERROR(-20101, VARERROR);                      
      RETURN NUMERROR;
 WHEN OTHERS THEN
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('Stresscal', numError, varMessage, 
                      varOperation, varError);
      ROLLBACK;                      
      raise_application_error(-20101, varError);                      
      RETURN NUMERROR;

 END Fncpopulatestressrate;
 Function fncStressPositionGenerate
    ( USERID IN VARCHAR2,  ASONDATE IN DATE, STRESSREFERENCENUMBER IN VARCHAR2,
    VARCOMPCODE VARCHAR2 DEFAULT '30199999' ,  VARCURCODE VARCHAR2 DEFAULT '30499999' ,
    VARPRODCODE VARCHAR2 DEFAULT '33399999' ,VARSUBPRODCODE VARCHAR2 DEFAULT '33899999' )
     return number 
    is
  
    PRAGMA AUTONOMOUS_TRANSACTION;
--  Created on 19/03/08
    datToday        date;
    datTemp         date;
    numError        number;
    varOperation    GConst.gvarOperation%type;
    varMessage      GConst.gvarMessage%type;
    varError        GConst.gvarError%type;
--    Type tpPosition is ref cursor return trsystem997%ROWTYPE;
--    curTermLoan     tpPosition;
--    recPosition     trsystem997%ROWTYPE;
Begin
    numError := 0;
    varMessage := 'Generating Position Figures for date: ' || AsonDate;
    datToday := AsonDate;
    
    VAROPERATION := 'Deleting Old Records from A  File';
    delete from trsystem997A; 
------------ Underlyings in Trtran002 ------------------------    
    varOperation := 'Inserting records for Underlying Details';
    insert into trsystem997A
    (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     posn_hedge_trade, posn_asset_liability, posn_for_currency,
     posn_product_code,posn_subproduct_code)
    select trad_company_code, trad_trade_currency,30400003, trad_import_export,
      trad_trade_reference, 0, trad_entry_date,
      pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
        GConst.AMOUNTFCY, AsonDate) -  nvl((Select 
         sum(brel_reversal_fcy)
        From Trtran002 a ,Trtran003 b
        Where a.Trad_Trade_Reference=b.brel_Trade_Reference
        And a.Trad_Contract_No=m.Trad_Contract_No
        and to_char(A.Trad_Entry_Date,'yyyymm')= to_char(m.trad_maturity_date,'yyyymm')
        And a.Trad_Record_Status In (10200005,10200006)
        And b.Brel_Record_Status Not In (10200005,10200006)),0)
        tradefcy,trad_trade_rate,0,
      pkgforexprocess.fncGetOutstanding(trad_trade_reference,0,GConst.UTILEXPORTS,
        GConst.AMOUNTINR, AsonDate) tradeinr, 0, UserID, null,TRAD_LOCAL_BANK,  
      trad_maturity_date,pkgforexprocess.fncAllotMonth(AsonDate, trad_maturity_date),
      'H', decode(sign(25900050 - trad_import_export),-1,'L','A'), 30400003,
      trad_product_category,trad_subproduct_code
      from trtran002 m
      WHERE (TRAD_COMPANY_CODE = DECODE(VARCOMPCODE,'30199999' ,TRAD_COMPANY_CODE) OR
             INSTR(VARCOMPCODE ,TRAD_COMPANY_CODE) >0)
      AND (trad_trade_currency = DECODE(varcurcode,'30499999' ,trad_trade_currency) OR
             INSTR(VARCURCODE ,TRAD_TRADE_CURRENCY) >0) 
      AND   (NVL(TRAD_product_category,0) = DECODE(VARPRODCODE,'33399999' ,NVL(TRAD_product_category,0)) OR
             INSTR(VARPRODCODE ,NVL(TRAD_PRODUCT_CATEGORY,0)) >0) 
      AND   (NVL(TRAD_subproduct_CODE,0) = DECODE(VARSUBPRODCODE,'33899999' ,NVL(TRAD_subproduct_CODE,0)) OR
             INSTR(VARSUBPRODCODE ,NVL(TRAD_SUBPRODUCT_CODE,0)) >0) 
      and      (trad_complete_date is null or trad_complete_date > AsonDate)
      and trad_company_code in 
      (select usco_company_code 
        from trsystem022a 
        where usco_user_id =UserID)
      and trad_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);
 
      numError := SQl%ROWCOUNT; 
     
------ Trade Deals in trtran001 -----------------------------      
--    varOperation := 'Inserting records for Trade Forward Deals';
--    insert into trsystem997A
--    (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
--     posn_reference_number, posn_reference_serial, posn_reference_date,
--     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
--     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
--     posn_counter_party, posn_due_date, posn_maturity_month,
--     posn_hedge_trade, posn_asset_liability, posn_for_currency,
--     posn_product_code,posn_subproduct_code)
--    select deal_company_code CompanyCode, deal_base_currency,deal_other_currency,
--        decode(deal_buy_sell, GConst.PURCHASEDEAL, GConst.FORWARDTRADEBUY,  
--            GConst.SALEDEAL, GConst.FORWARDTRADESALE) AccountCode,
--      deal_deal_number, deal_serial_number, deal_execute_date,
--      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--        GConst.AMOUNTFCY, AsonDate) tradefcy, deal_exchange_rate, deal_local_rate,
--     -- decode(deal_other_currency, GConst.INDIANRUPEE, deal_exchange_rate, deal_local_rate)  
--      --  deal_exchange_rate,0,
--      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
--        GConst.AMOUNTINR, AsonDate) tradeinr,0,
--      UserID, deal_user_id, deal_counter_party, deal_maturity_date,
--      pkgforexprocess.fncAllotMonth(deal_counter_party, AsonDate, deal_maturity_date),
--      'T', decode(deal_buy_sell, GConst.PURCHASEDEAL, 'A','L'), deal_other_currency,
--      deal_backup_deal,deal_init_code
--      from trtran001
--      WHERE  (deal_company_code = DECODE(VARCOMPCODE,'30199999' ,deal_company_code) OR
--             INSTR(VARCOMPCODE ,deal_company_code) >0)
--      AND (deal_base_currency = DECODE(varcurcode,'30499999' ,deal_base_currency) OR
--             INSTR(VARCURCODE ,deal_base_currency) >0) 
--      AND   (NVL(deal_backup_deal,0) = DECODE(VARPRODCODE,'33399999' ,NVL(deal_backup_deal,0)) OR
--             INSTR(VARPRODCODE ,NVL(deal_backup_deal,0)) >0) 
--       AND   (NVL(DEAL_INIT_CODE,0) = DECODE(VARSUBPRODCODE,'33899999' ,NVL(DEAL_INIT_CODE,0)) OR
--             INSTR(VARSUBPRODCODE ,NVL(deal_init_code,0)) >0) AND
--      ((deal_complete_date is null) or (deal_complete_date > AsonDate)) 
--      and deal_hedge_trade = GConst.TRADEDEAL
--      and deal_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
--      and deal_record_status in
--      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);

--    union
----  Cross Currency Trade Deals in Trtran001
--    select deal_company_code CompanyCode, deal_other_currency,
--       decode(deal_buy_sell, GConst.PURCHASEDEAL, GConst.FORWARDTRADESALE,  
--            GConst.SALEDEAL, GConst.FORWARDTRADEBUY) AccountCode,
--      deal_deal_number, deal_serial_number, deal_execute_date,
--      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADECROSS,
--        GConst.AMOUNTFCY, AsonDate) tradefcy, round(deal_amount_local / deal_other_amount,4),0,
--      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADECROSS,
--        GConst.AMOUNTINR, AsonDate) tradeinr,0,
--      UserID, deal_user_id, deal_counter_party, deal_maturity_date,
--      pkgforexprocess.fncAllotMonth(deal_counter_party, AsonDate, deal_maturity_date),
--      'T', decode(deal_buy_sell, GConst.PURCHASEDEAL, 'L','A') ,deal_base_currency,
--       deal_backup_deal,deal_init_code
--      from trtran001
--      where deal_other_currency != GConst.INDIANRUPEE
--      and deal_hedge_trade = GConst.TRADEDEAL
--      and deal_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
--      and ((deal_complete_date is null) or (deal_complete_date > AsonDate)) 
--      and deal_record_status in
--      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      

--      
    varOperation := 'Inserting Hedge Deals for Forwards';
    insert into trsystem997A
    (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     posn_hedge_trade, posn_asset_liability, posn_for_currency,
     posn_product_code,posn_subproduct_code)
    select deal_company_code CompanyCode, deal_base_currency,deal_other_currency,
       decode(deal_buy_sell, GConst.PURCHASEDEAL, GConst.FORWARDHEDGEBUY,
            GConst.SALEDEAL, GConst.FORWARDHEDGESALE) AccountCode,
      deal_deal_number, 0 , deal_execute_date,
     pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
        GConst.AMOUNTFCY, AsonDate) tradefcy, deal_exchange_rate,deal_local_rate,
      --decode(deal_other_currency, GConst.INDIANRUPEE, deal_exchange_rate, deal_local_rate),  
      --  0,
      pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILTRADEDEAL,
        GConst.AMOUNTINR, AsonDate) tradeinr,0,
      UserID, deal_user_id, deal_counter_party, deal_maturity_date,
      pkgforexprocess.fncAllotMonth(deal_counter_party, AsonDate, 
        pkgReturnCursor.fncRollover(deal_deal_number)),
      'H', decode(deal_buy_sell, GConst.PURCHASEDEAL, 'A','L'),deal_other_currency,
       deal_backup_deal,deal_init_code

      from trtran001
      WHERE  (deal_company_code = DECODE(VARCOMPCODE,'30199999' ,deal_company_code) OR
             INSTR(VARCOMPCODE ,deal_company_code) >0)
      AND (deal_base_currency = DECODE(varcurcode,'30499999' ,deal_base_currency) OR
             INSTR(VARCURCODE ,deal_base_currency) >0) 
      AND   (NVL(deal_backup_deal,0) = DECODE(VARPRODCODE,'33399999' ,NVL(deal_backup_deal,0)) OR
             INSTR(VARPRODCODE ,NVL(deal_backup_deal,0)) >0) 
       AND   (NVL(DEAL_INIT_CODE,0) = DECODE(VARSUBPRODCODE,'33899999' ,NVL(DEAL_INIT_CODE,0)) OR
             INSTR(VARSUBPRODCODE ,NVL(deal_init_code,0)) >0) AND
      ((deal_complete_date is null) or (deal_complete_date > AsonDate))
      and deal_execute_date <= AsonDate
      and deal_hedge_trade in (GConst.HEDGEDEAL, GCONST.FTDEAL)
      and deal_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
      /*and pkgforexprocess.fncGetOutstanding(deal_deal_number, deal_serial_number,GConst.UTILHEDGEDEAL,
        GConst.AMOUNTFCY, AsonDate) >0*/
      and deal_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);
    
    varOperation := 'Inserting records for FCY Loans';
    insert into trsystem997A
    (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     posn_hedge_trade, posn_asset_liability, posn_for_currency,
     posn_product_code,posn_subproduct_code)
    select fcln_company_code, fcln_currency_code, 30400003,
      decode(fcln_loan_type, GConst.LOANBUYERSCREDIT, GConst.TRADEBUYERCREDIT, 
      GConst.LOANPCFC, GConst.TRADEPCFC, GConst.LOANPSCFC, GConst.TRADEPSCFC),
      fcln_loan_number, 0, fcln_sanction_date,
      pkgforexprocess.fncGetOutstanding(fcln_loan_number, 0,GConst.UTILFCYLOAN,
        GConst.AMOUNTFCY, AsonDate) fcln_sanctioned_fcy,fcln_conversion_rate,0, 
      pkgforexprocess.fncGetOutstanding(fcln_loan_number, 0,GConst.UTILFCYLOAN,
        GConst.AMOUNTINR, AsonDate) fcln_sanctioned_inr,0, 
      UserID, null, fcln_local_bank, fcln_maturity_to,
      pkgforexprocess.fncAllotMonth(AsonDate, fcln_maturity_to),'H','L',30400003,
      FCLN_PRODUCT_CATEGORY,FCLN_SUBPRODUCT_CODE
      from trtran005
      WHERE (fcln_company_code = DECODE(VARCOMPCODE,'30199999' ,fcln_company_code) OR
             INSTR(VARCOMPCODE ,fcln_company_code) >0)
      AND (FCLN_CURRENCY_CODE = DECODE(VARCURCODE,'30499999' ,FCLN_CURRENCY_CODE) OR
             INSTR(VARCURCODE ,FCLN_CURRENCY_CODE) >0) 
      and ((fcln_complete_date is null) or (fcln_complete_date > AsonDate))
      and fcln_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
      and fcln_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION)
      and fcln_loan_type not in (GConst.LOANBUYERSCREDIT);
 ---kumar.h updates 0n 12/05/09  for buyers credit 
     varOperation := 'Inserting records for Buyers Credit';
    insert into trsystem997A
    (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
     posn_reference_number, posn_reference_serial, posn_reference_date,
     posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
     posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
     posn_counter_party, posn_due_date, posn_maturity_month,
     posn_hedge_trade, posn_asset_liability, posn_for_currency,
     posn_product_code,posn_subproduct_code)
    select bcrd_company_code, bcrd_currency_code,30400003, 
           GConst.TRADEBUYERCREDIT, 
           bcrd_buyers_credit, 0, bcrd_sanction_date,
      pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit, 0,GConst.UTILBCRLOAN,
        GConst.AMOUNTFCY, AsonDate) bcrd_sanctioned_fcy,bcrd_conversion_rate,0, 
      pkgforexprocess.fncGetOutstanding(bcrd_buyers_credit, 0,GConst.UTILBCRLOAN,
        GConst.AMOUNTINR, AsonDate) bcrd_sanctioned_inr,0, 
      UserID, null, bcrd_local_bank, bcrd_due_date,
      pkgforexprocess.fncAllotMonth(AsonDate, bcrd_due_date), 'H','L',30400003,
      33300003,33800003
      from BuyersCredit
      WHERE (bcrd_company_code = DECODE(VARCOMPCODE,'30199999' ,bcrd_company_code) OR
             INSTR(VARCOMPCODE ,bcrd_company_code) >0)
      AND (bcrd_currency_code = DECODE(VARCURCODE,'30499999' ,bcrd_currency_code) OR
             INSTR(VARCURCODE ,BCRD_CURRENCY_CODE) >0) 
      AND ((bcrd_completion_date is null) or (bcrd_completion_date > AsonDate))
      and bcrd_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
      and bcrd_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);

     ---kumar.h updates 0n 12/05/09  for buyers credit   
--------------------------------------------------Money Module Added by Manjunath Reddy  on 09-04-2009----------------------------------
--24900011        Short Term Borrowing
  varOperation := 'Insert Money Module Data in to Assests ';
    insert into trsystem997A
     (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      posn_inr_value, posn_usd_value, posn_user_id, posn_dealer_id,
      posn_counter_party, posn_due_date, posn_maturity_month,
      posn_product_code)
     select mdel_company_code, mdel_currency_code,30400003,
      decode( 24900011,24900011,Gconst.MONEYBORROWING,Gconst.TRADEBUYERCREDIT),
      mdel_deal_number, 0, mdel_execute_date,
      mdel_deal_amount,mdel_exchange_rate,mdel_exchange_rate, 
      mdel_amount_local,0,UserID, null,
      mdel_counter_party, mdel_due_date,1,24900011
      from trtran031
      where 
      --((mdel_complete_date is null) or (mdel_complete_date > AsonDate))
      (mdel_company_code = DECODE(VARCOMPCODE,'30199999' ,mdel_company_code) OR
             INSTR(VARCOMPCODE ,mdel_company_code) >0)
      AND (mdel_currency_code = DECODE(VARCURCODE,'30499999' ,mdel_currency_code) OR
             INSTR(VARCURCODE ,MDEL_CURRENCY_CODE) >0)            
      and  mdel_process_complete= Gconst.optionNO
      and mdel_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
      and mdel_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);



      
----------------------------------------------------Commodity Added by Manjunath Reddy  on 09-04-2009----------------------------------
varOperation := 'Insert Commodity Module in to Assests ';
-- posn_transaction_amount     No of LOts
-- posn_fcy_rate               Lot Price
-- posn_usd_rate               Lot Size
-- posn_inr_value              Transaction Amount
-- posn_m2m_inrrate            M2M Lot Price
-- posn_revalue_inr            Tansaction Amount For M2m Rate
-- posn_position_inr           Profit loss 

    insert into trsystem997A
     (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      posn_user_id, posn_dealer_id,
      posn_counter_party, posn_due_date, posn_maturity_month, posn_product_code,
      posn_MTM_FCYrate)
     select cmdl_company_code, cmdl_currency_code, 30400003,
      decode(cmdl_hedge_trade,gconst.HEDGEDEAL,decode(cmdl_buy_sell,Gconst.PURCHASEDEAL,Gconst.COMMODITYHEDGEBUY,
             Gconst.SALEDEAL,Gconst.COMMODITYHEDGESALE),gconst.TRADEDEAL,
            decode(cmdl_buy_sell,Gconst.PURCHASEDEAL,Gconst.COMMODITYTRADEBUY,Gconst.SALEDEAL,Gconst.COMMODITYTRADESALE)),
      cmdl_deal_number, 0, cmdl_execute_date,
      PKGFOREXPROCESS.FNCGETOUTSTANDING(CMDL_DEAL_NUMBER, 0,GCONST.UTILCOMMODITYDEAL,
      GConst.AMOUNTFCY, AsonDate),pkgforexprocess.fncCommDealRate(cmdl_deal_number),(cmdl_product_quantity/cmdl_lot_numbers) ,
      UserID, null, cmdl_exchange_code, cmdl_maturity_date,1,cmdl_product_code,
      pkgforexprocess.fncCommodityMTMRate(cmdl_maturity_date,cmdl_exchange_code,cmdl_product_code,AsonDate)
      from trtran051
      WHERE (cmdl_company_code = DECODE(VARCOMPCODE,'30199999' ,cmdl_company_code) OR
             INSTR(VARCOMPCODE ,cmdl_company_code) >0)
      AND (cmdl_currency_code = DECODE(VARCURCODE,'30499999' ,cmdl_currency_code) OR
             INSTR(VARCURCODE ,CMDL_CURRENCY_CODE) >0)  
      and ((cmdl_complete_date is null) or (cmdl_complete_date > AsonDate))
      and cmdl_process_complete= Gconst.optionNO
      and cmdl_company_code in (select usco_company_code from trsystem022a where usco_user_id =UserID)
      and cmdl_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);


----------------------------------------------------Currency Futures Added by Manjunath Reddy  on 10-06-2011----------------------------------
    varOperation := 'Inserting Currency Futures';
   insert into trsystem997A
     (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      posn_user_id, posn_dealer_id,
      posn_counter_party, posn_due_date, posn_maturity_month, posn_product_code,posn_subproduct_code,
      posn_mTm_FCYrate,posn_hedge_trade, posn_asset_liability, posn_for_currency)
     select cfut_company_code, cfut_base_currency, cfut_other_currency,
      decode(cfut_hedge_trade,gconst.HEDGEDEAL,decode(cfut_buy_sell,Gconst.PURCHASEDEAL,Gconst.CFHEDGEBUY,
             Gconst.SALEDEAL,Gconst.CFHEDGESALE),GCONST.FTDEAL ,
            DECODE(CFUT_BUY_SELL,GCONST.PURCHASEDEAL,GCONST.CFHEDGEBUY,Gconst.SALEDEAL,Gconst.CFHEDGESALE)),
      Cfut_Deal_Number, 0, Cfut_Execute_Date, 
      PKGFOREXPROCESS.Fncgetoutstanding(Cfut_Deal_Number, 0,Gconst.Utilfuturedeal, Gconst.Amountfcy, Asondate) * 1000,
      Cfut_Exchange_Rate, Decode(Cfut_Base_Currency, 30400004, PKGFOREXPROCESS.Fncfuturedealrate(Cfut_Deal_Number),
      PKGFOREXPROCESS.fncGetRate(30400004,30400003,AsonDate,cfut_buy_sell, PKGFOREXPROCESS.fncAllotMonth(AsonDate, cfut_maturity_date), cfut_maturity_date)),
      Userid, Cfut_User_Id, Cfut_Exchange_Code, Cfut_Maturity_Date,
      PKGFOREXPROCESS.fncAllotMonth(AsonDate, cfut_maturity_date),
      /*decode(cfut_hedge_trade,gconst.HEDGEDEAL,decode(cfut_buy_sell,Gconst.PURCHASEDEAL,Gconst.CFHEDGEBUY,
             Gconst.SALEDEAL,Gconst.CFHEDGESALE),gconst.TRADEDEAL,
            Decode(Cfut_Buy_Sell,Gconst.Purchasedeal,Gconst.Cftradebuy,Gconst.Saledeal,Gconst.Cftradesale)),*/
      CFUT_BACKUP_DEAL ,CFUT_INIT_CODE, 0, decode(cfut_hedge_trade,GConst.TRADEDEAL,'T','H'),
      decode(cfut_buy_sell, Gconst.PURCHASEDEAL, 'A','L'),cfut_other_currency      
      from trtran061
      WHERE (cfut_company_code = DECODE(VARCOMPCODE,'30199999' ,cfut_company_code) OR
             INSTR(VARCOMPCODE ,cfut_company_code) >0)
      AND (cfut_base_currency = DECODE(VARCURCODE,'30499999' ,cfut_base_currency) OR
             INSTR(VARCURCODE ,CFUT_BASE_CURRENCY) >0)  
      AND   (NVL(CFUT_BACKUP_DEAL,0) = DECODE(VARPRODCODE,'33399999' ,NVL(CFUT_BACKUP_DEAL,0)) OR
             INSTR(VARPRODCODE ,NVL(CFUT_BACKUP_DEAL,0)) >0) 
       AND   (NVL(CFUT_INIT_CODE,0) = DECODE(VARSUBPRODCODE,'33899999' ,NVL(CFUT_INIT_CODE,0)) OR
             INSTR(VARSUBPRODCODE ,NVL(CFUT_INIT_CODE,0)) >0)        
      and   ((cfut_complete_date is null ) or (cfut_complete_date > AsonDate))
      and cfut_record_status in
      (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED,GConst.STATUSAPREUTHORIZATION);

   
----------------------------------------------------Currency Options Added by Manjunath Reddy  on 18-06-2011----------------------------------
varOperation := 'Insert Currency Options Module in to Assests ';

 /*  insert into trsystem997A
     (posn_company_code, posn_base_currency,posn_other_currency, posn_account_code,
      posn_reference_number, posn_reference_serial, posn_reference_date,
      posn_transaction_amount, posn_fcy_rate, posn_usd_rate,
      posn_user_id, posn_dealer_id, posn_counter_party, posn_due_date, 
      posn_maturity_month, posn_product_code,posn_subproduct_code,posn_mtm_fcyrate,
      posn_hedge_trade, posn_asset_liability, posn_for_currency)
     select copt_company_code, copt_base_currency, copt_other_currency,
      decode(copt_hedge_trade,gconst.HEDGEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY, Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),gconst.TRADEDEAL,
        decode(cosu_option_type,Gconst.OptionCall,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLTRADEBUY, Gconst.SALEDEAL,Gconst.COCALLTRADESALE),Gconst.OptionPut,
        decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTTRADEBUY, Gconst.SALEDEAL,Gconst.COPUTTRADESALE))),
      copt_deal_number, cosu_serial_number, copt_execute_date,
      copt_base_amount,cosu_strike_rate,cosu_strike_rate,
      --(copt_lot_quantity/copt_lot_numbers),fncFutureDealRate(cfut_deal_number),(cfut_lot_quantity/cfut_lot_numbers) ,
      UserID, null, copt_counter_party, copt_maturity_date, pkgforexprocess.fncAllotMonth(AsonDate, copt_maturity_date),
      --decode(copt_hedge_trade,gconst.HEDGEDEAL,
       -- decode(cosu_option_type,Gconst.OptionCall,
       -- decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLHEDGEBUY,Gconst.SALEDEAL,Gconst.COCALLHEDGESALE),Gconst.OptionPut,
       -- decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTHEDGEBUY,Gconst.SALEDEAL,Gconst.COPUTHEDGESALE)),gconst.TRADEDEAL,
       -- decode(cosu_option_type,Gconst.OptionCall,
       -- decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COCALLTRADEBUY,Gconst.SALEDEAL,Gconst.COCALLTRADESALE),Gconst.OptionPut,        
       -- decode(cosu_buy_sell,Gconst.PURCHASEDEAL,Gconst.COPUTTRADEBUY, Gconst.SALEDEAL,Gconst.COPUTTRADESALE))),
         COPT_BACKUP_DEAL ,COPT_INIT_CODE,cosu_strike_rate,
      decode(copt_hedge_trade,gconst.TRADEDEAL,'T','H'),
      case 
      when cosu_buy_sell = GConst.SALEDEAL and cosu_option_type = GConst.OptionPut then 'A'
      when cosu_buy_sell = Gconst.PURCHASEDEAL and cosu_option_type = Gconst.OptionCall then 'A'
      when cosu_buy_sell = Gconst.SALEDEAL and cosu_option_type = Gconst.OptionCall then 'L'
      when cosu_buy_sell = GConst.PURCHASEDEAL and cosu_option_type = GConst.OptionPut then 'L'
      end, copt_other_currency
      from trtran071 right outer join trtran072
      on copt_deal_number=cosu_deal_number
      WHERE (copt_company_code = DECODE(VARCOMPCODE,'30199999' ,copt_company_code) OR
             INSTR(VARCOMPCODE ,copt_company_code) >0)
      AND (copt_base_currency = DECODE(VARCURCODE,'30499999' ,copt_base_currency) OR
             INSTR(VARCURCODE ,copt_base_currency) >0) 
       AND   (NVL(COPT_BACKUP_DEAL,0) = DECODE(VARPRODCODE,'33399999' ,NVL(COPT_BACKUP_DEAL,0)) OR
             INSTR(VARPRODCODE ,NVL(COPT_BACKUP_DEAL,0)) >0) 
       AND   (NVL(COPT_INIT_CODE,0) = DECODE(VARSUBPRODCODE,'33899999' ,NVL(COPT_INIT_CODE,0)) OR
             INSTR(VARSUBPRODCODE ,NVL(COPT_INIT_CODE,0)) >0)        
      and  ((copt_complete_date is null) or (copt_complete_date > AsonDate))
      and copt_company_code in 
      (select usco_company_code 
        from trsystem022a 
        where usco_user_id =UserID)
      and copt_record_status in (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED); */

    varOperation := 'Calculating M2M Rates for forward rates';
    update trsystem997A
      set POSN_MTM_FCYRATE =  fncGetRate
          (posn_base_currency,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  posn_due_date),
          POSN_MTM_LocalRATE =  decode(posn_other_currency,30400003,1,fncGetRate
          (posn_other_currency,30400003, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  posn_due_date)),
          posn_usd_rate = fncGetRate
          (posn_base_currency, 30400004, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  posn_due_date)
   where posn_account_code not in 
              (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE,
               Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE,gconst.FORWARDHEDGEBUY,gconst.FORWARDHEDGESALE); 
 
    varOperation := 'Calculating M2M Rates for forward Hedge buy/sale rates';
    update trsystem997A
      set POSN_MTM_FCYRATE =  fncGetRate
          (posn_base_currency,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002),  posn_due_date),
          POSN_MTM_LocalRATE =  decode(posn_other_currency,30400003,1,fncGetRate
          (posn_other_currency,30400003, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002),  posn_due_date)),
          posn_usd_rate = fncGetRate
          (posn_base_currency, 30400004, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002),  posn_due_date)
   where posn_account_code  in (gconst.FORWARDHEDGEBUY,gconst.FORWARDHEDGESALE); 
 
    varOperation := 'Calculating M2M Rates for Future rates';
    update trsystem997A
      set POSN_MTM_FCYRATE =  pkgforexprocess.fncFutureMTMRate( posn_due_date,
             posn_counter_party,  posn_base_currency ,posn_other_currency,AsonDate),
          POSN_MTM_LocalRATE =  1
      where posn_account_code  in (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE);

      varOperation := 'Calculating M2M Rates for Option rates';
   -- update trsystem997A
   --   set /* POSN_MTM_FCYRATE =  fncGetRate
   --   (posn_base_currency,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001),  posn_due_date), */
   --   POSN_MTM_LocalRATE =  1 
    -- where posn_account_code  in 
     --         (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
     ---          Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);
  
      
  update trsystem997A
      set posn_revalue_inr = 
        round(posn_transaction_amount * posn_mtm_Localrate,0),
        posn_revalue_usd =
        round((posn_transaction_amount * posn_usd_rate) ,2),
        posn_position_inr = 
        decode(sign(25900050 - posn_account_code), 1,
        round(posn_transaction_amount * posn_mtm_localrate,0) - posn_inr_value,
        -1, posn_inr_value - round(posn_transaction_amount * posn_mtm_Localrate,0));
  
    varOperation := 'Calculate Total Tansaction amount  ';
    update trsystem997A
      set posn_inr_value = posn_transaction_amount * posn_fcy_rate -- * posn_usd_rate,
      --posn_revalue_inr = posn_transaction_amount *  posn_m2m_inrrate -- *posn_usd_rate 
      where posn_product_code is not null;
      

    varOperation := 'Calculate Profit  According to M2m Rate';
    update trsystem997A
      set posn_position_inr =decode(sign(25900050 - posn_account_code), 1,
      posn_inr_value-posn_revalue_inr,-1, posn_revalue_inr-posn_inr_value)
      where posn_product_code is not null; 
    
      varOperation := 'Test error';
    UPDATE TRSYSTEM997A
      set posn_position_usd = round(posn_position_inr / decode(nvl(posn_usd_rate,0),0,1,posn_usd_rate),2)
     -- posn_revalue_usd = round((posn_transaction_amount * posn_m2m_inrrate) / decode(nvl(posn_usd_rate,0), 0,1,1),2)
      where posn_product_code is not null; 
    
    update trsystem997A
      set posn_product_code= posn_account_code
      where posn_product_code is null;
--
DELETE from trsystem997a WHERE POSN_TRANSACTION_AMOUNT=0 or posn_due_date <= asondate;

IF Stressreferencenumber = 'VARANALYSIS' THEN
  UPDATE TRSYSTEM997A
       SET POSN_MTM_PNL = DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),-1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_MTM_FCYRATE) ,0),
                                       1,NVL(POSN_TRANSACTION_AMOUNT*(POSN_MTM_FCYRATE -POSN_FCY_RATE) ,0)) ,
              POSN_MTM_PNLLOCAL= DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),-1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_MTM_FCYRATE)*POSN_MTM_LOCALRATE ,0),
                                          1, NVL(POSN_TRANSACTION_AMOUNT*(POSN_MTM_FCYRATE -POSN_FCY_RATE)* POSN_MTM_LOCALRATE ,0)); 
         
   /*  where posn_account_code not in 
           (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
            Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);
  
  UPDATE TRSYSTEM997A
          SET POSN_MTM_PNL = pkgforexprocess.fncGetOptionMTM( posn_reference_number ,AsonDate  ,'N' ),
            POSN_MTM_PNLLOCAL= pkgforexprocess.fncGetOptionMTM( posn_reference_number ,AsonDate,'N' )   
          
     where posn_account_code  in 
              (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE); */

  
 END IF;                                         

IF Stressreferencenumber <> 'VARANALYSIS' THEN
     Varoperation := 'Calculating Stress Rates ';
     numError :=pkgvaranalysis.Fncpopulatestressrate(Stressreferencenumber ,AsonDate);
      DELETE from trsystem997a WHERE POSN_TRANSACTION_AMOUNT=0 or posn_due_date <= asondate;
      Varoperation := 'Updating Stress Rates For FORWARDS ';
        update trsystem997A
          set POSN_STRESS_FCYRATE =  fncStressGetRate
          (posn_base_currency,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001), posn_maturity_month, posn_due_date),
          POSN_STRESS_LOCALRATE =  DECODE(POSN_OTHER_CURRENCY,30400003,1,FNCSTRESSGETRATE
          (POSN_OTHER_CURRENCY,30400003, ASONDATE, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300002,-1,25300001), POSN_MATURITY_MONTH, POSN_DUE_DATE))
         where posn_account_code not in 
              (gconst.FORWARDHEDGEBUY,gconst.FORWARDHEDGESALE,
               Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE,
               Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);
      
        Varoperation := 'Updating Stress Rates For FORWARDS Hedge Buy/Sale ';
        update trsystem997A
          set POSN_STRESS_FCYRATE =  fncStressGetRate
          (posn_base_currency,posn_other_currency, AsonDate, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002), posn_maturity_month, posn_due_date),
          POSN_STRESS_LOCALRATE =  DECODE(POSN_OTHER_CURRENCY,30400003,1,FNCSTRESSGETRATE
          (POSN_OTHER_CURRENCY,30400003, ASONDATE, DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),1 , 25300001,-1,25300002), POSN_MATURITY_MONTH, POSN_DUE_DATE))
        where posn_account_code  in (gconst.FORWARDHEDGEBUY,gconst.FORWARDHEDGESALE);  
             
        Varoperation := 'Updating Stress Rates For Futures ';
         update trsystem997A
          set POSN_STRESS_FCYRATE = fncSTRESSFutureMTMRate(posn_due_date ,POSN_COUNTER_PARTY, posn_base_currency,posn_other_currency, AsonDate  ),
          POSN_STRESS_LOCALRATE =  1
        where posn_account_code in 
              (Gconst.CFHEDGEBUY,Gconst.CFHEDGESALE,
               Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);

         
         VAROPERATION := 'Calculating MTM PnL and Stress PnL Rates';
         
         UPDATE TRSYSTEM997A
          SET POSN_MTM_PNL = DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),-1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_MTM_FCYRATE) ,0),
                                       1,NVL(POSN_TRANSACTION_AMOUNT*(POSN_MTM_FCYRATE -POSN_FCY_RATE) ,0)) ,
               POSN_MTM_PNLLOCAL= DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),-1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_MTM_FCYRATE)*POSN_MTM_LOCALRATE ,0),
                                          1, NVL(POSN_TRANSACTION_AMOUNT*(POSN_MTM_FCYRATE -POSN_FCY_RATE)* POSN_MTM_LOCALRATE ,0)) ,
               POSN_STRESS_PNL= DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),-1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_STRESS_FCYRATE) ,0),
                                         1, NVL(POSN_TRANSACTION_AMOUNT*(POSN_STRESS_FCYRATE -POSN_FCY_RATE) ,0)) ,           
               POSN_STRESS_PNLLOCAL=DECODE(SIGN(25900050 - POSN_ACCOUNT_CODE),-1 , NVL(POSN_TRANSACTION_AMOUNT*(POSN_FCY_RATE -POSN_STRESS_FCYRATE)*POSN_STRESS_LOCALRATE ,0),
                                         1, NVL(POSN_TRANSACTION_AMOUNT*(POSN_STRESS_FCYRATE -POSN_FCY_RATE)* POSN_STRESS_LOCALRATE ,0)) 
         where posn_account_code not in 
              (Gconst.COCALLHEDGEBUY,Gconst.COCALLHEDGESALE,Gconst.COPUTHEDGEBUY,Gconst.COPUTHEDGESALE,
               Gconst.COCALLTRADEBUY,Gconst.COCALLTRADESALE,Gconst.COPUTTRADEBUY,Gconst.COPUTTRADESALE);
 
    
END IF;

      
    commit;
    return numError;
Exception    
  
  when others then
      varError := SQLERRM;
      varerror := 'PositionGen: ' || varmessage || varoperation || varerror;
      raise_application_error(-20101,   varerror);
      Rollback;

      return -1;
END FNCSTRESSPOSITIONGENERATE;
Function fncStressGetRate
    ( CurrencyCode in Number,
      ForCurrency in Number,
      AsonDate in Date,
      BidAsk in Number,
      RateType in number := 0,
      DueDate in Date := null,
      RateSerial in Number := 0)
      Return Number
      is
--  Created on 11/04/08 -- Modifield on 09/10/08
--  The Assumption is that the for currency will be either USD or INR
    RATEEXISTS          CONSTANT number(1) := 1;
    RATEDONOTEXIST      CONSTANT number(1) := 2;
    PRAGMA AUTONOMOUS_TRANSACTION;
    numError            number;
    numFlag             number(1);
    numRecords          number(2);
    numMonth            number(2);
    numSerial           number(5);
    numSerial1          number(5);
    numRate             number(15,6);
    numRate1            number(15,6);
    numBase             number(8);
    numBase1            number(8);
    numBidAsk           number(8);
    varType             varchar2(50);
    varType1            varchar2(50);
    varType2            varchar2(50);
    varType3            varchar2(50);
    numSpot             number(15,6);
    numPrem             number(15,6);
    numPrem1            number(15,6);
    numPrem2            number(15,6); 
    varQuery            varchar2(4000);
    varOperation        GConst.gvarOperation%Type;
    varMessage          GConst.gvarMessage%Type;
    varError            GConst.gvarError%Type;
    datAsOn             date;
    datAsOn1            date;
    datTemp             date;
--    datTemp1             date;
    
    datStart            date;
    datLast             date;
    datSpot             date;
    numTotalDays        number(5);
    numActualDays       number(5);
    numRateType         Number(5);
Begin    
    numError := 0;
    numRate := 0;
    numRecords := 0;
    numBidAsk := BidAsk;
-- The following condition is kept for older version of the code
-- where if duedate is not null mean rates are picked up

--    if DueDate is null then
--      numBidAsk := 0;
--    End if;      
    
    varMessage := 'Getting Rate ' || CurrencyCode || ' For: ' || ForCurrency ||
      ' Date: ' || AsonDate;
      
    varOperation := 'Getting Rate Type for Base Currency';
    select NVL(cncy_principal_yn, GConst.OPTIONNO)
      into numBase
      from trmaster304
      where cncy_pick_code = CurrencyCode;

    varOperation := 'Getting Rate Type for Other Currency';
    select NVL(cncy_principal_yn, GConst.OPTIONNO)
      into numBase1
      from trmaster304
      where cncy_pick_code = ForCurrency;
--  If effective date is null, check for the latest date;

    if AsonDate is null then  
      varOperation := 'Getting the Latest Date for Exchange rate';
      if ForCurrency = GConst.USDOLLAR then
        select max(drat_effective_date)
          into datAsOn
          from trtran012A
          where drat_currency_code = 
          decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
          and drat_for_currency = 
            decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode);
--          and drat_record_status in          
--            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      elsif ForCurrency = GConst.INDIANRUPEE then
         select max(drat_effective_date)
          into datAsOn
          from trtran012A
          where drat_currency_code = CurrencyCode
          and drat_for_currency = ForCurrency ;
--          and drat_record_status in          
--            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      else
        select max(drat_effective_date)
          into datAson
          from trtran012A
          where drat_currency_code = CurrencyCode
          and drat_for_currency = GConst.USDOLLAR;
          
        select max(drat_effective_date)
          into datAson1
          from trtran012A
          where drat_currency_code = ForCurrency
          and drat_for_currency = GConst.USDOLLAR;
      end if;
    
    else
      datAsOn := AsonDate;
    End if;
    
    varOperation := 'Checking whether  rate exists for the date';
    numRecords := 0;
    select count(*)
      into numRecords
      from trtran012A
      where drat_currency_code = 
      decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
      and drat_for_currency = 
        decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
      and drat_effective_date = datAsOn;
--      and drat_record_status in          
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
   
    if numRecords = 0 then
      varError := 'No Exchange Rates for Currency: ' || CurrencyCode || ' for the date: ' || datAsOn;
      numError := -20101;
      raise_application_error(numError, varError);
    
      
    End if;
    
    if RateSerial = 0 then
    
      if ForCurrency = GConst.USDOLLAR then
        select NVL(max(drat_serial_number),0)
          into numSerial
          from trtran012A
          where drat_currency_code = 
          decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
          and drat_for_currency = 
            decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
          and drat_effective_date = datAsOn;
--          and drat_record_status in          
--            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      elsif ForCurrency = GConst.INDIANRUPEE then
         select NVL(max(drat_serial_number),0)
          into numSerial
          from trtran012A
          where drat_currency_code = CurrencyCode
          and drat_for_currency = ForCurrency 
          and drat_effective_date = datAsOn;
--          and drat_record_status in          
--            (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED);
      else
        select NVL(max(drat_serial_number),0)
          into numSerial
          from trtran012A
          where drat_currency_code = CurrencyCode
          and drat_for_currency = GConst.USDOLLAR
          and drat_effective_date = datAsOn;
          
        select NVL(max(drat_serial_number),0)
          into numSerial1
          from trtran012A
          where drat_currency_code = ForCurrency
          and drat_for_currency = GConst.USDOLLAR
          and drat_effective_date = datAsOn1;
      end if;
    
    else
      numSerial := RateSerial;
      numSerial1 := RateSerial;
    End if;
    
    varOperation := 'Checking whether Rate Exists'||numBase ||CurrencyCode||datAsOn ||numSerial ;
    numRecords := 0;
    select count(*)
      into numRecords
      from trtran012A
      where drat_currency_code =
        decode(numBase, GConst.OPTIONYES, CurrencyCode, GConst.USDOLLAR)
      and drat_for_currency = 
        decode(numBase, GConst.OPTIONYES, GConst.USDOLLAR, CurrencyCode)
--      and drat_record_status in          
--        (GConst.STATUSENTRY, Gconst.STATUSAUTHORIZED, GConst.STATUSUPDATED)
      and drat_effective_date = datAsOn
      and drat_serial_number = numSerial;

     
     
    if numRecords = 0 then
      varError := 'No Exchange Rates for Currency: ' || numBase || CurrencyCode || ' for date: ' || datAsOn;
      numError := -20101;
      raise_application_error(numError, varError);
    end if;
    NUMRATETYPE:=0;
     datSpot:= pkgforexprocess.fncgetcurrspotdate(CurrencyCode,ForCurrency, asondate);
    
    if DueDate is null then
      numRateType := 0;
    else      
      if DueDate <= datSpot then
         numRateType:=0;
      else
    
      for numsub in 1..50
      Loop
        numRateType := numRateType + 1;
        if (currencycode=30400004) and (forcurrency=30400003) then
            if numsub=1 then
              datTemp :=last_day(datSpot);
            else
              datTemp := last_day(add_months(datspot,numsub-1));
            end if;
        else
          datTemp := add_months(datSpot, numSub);
        end if;
        if datTemp >= DueDate then
          exit;
        end if;
        
      End Loop;
  --        numRateType:=numRateType-1;
    end if;
    end if;
    
   
   
   if ForCurrency in (GConst.USDOLLAR, GConst.INDIANRUPEE) then
     if numBidAsk = GConst.PURCHASEDEAL then
        select 'drat_spot_bid',
          decode(numRateType,
           0, ',drat_spot_bid', 1, ',drat_month1_bid',2, ',drat_month2_bid',3, ',drat_month3_bid',
           4, ',drat_month4_bid',5, ',drat_month5_bid', 6, ',drat_month6_bid', 7, ',drat_month7_bid',
           8, ',drat_month8_bid',9, ',drat_month9_bid', 10, ',drat_month10_bid',
           11, ',drat_month11_bid',12, ',drat_month12_bid'), --First Discount
          decode(numRateType, 
           0, ',drat_spot_bid', 1, ',drat_spot_bid',2, ',drat_month1_bid',3, ',drat_month2_bid',
           4, ',drat_month3_bid',5, ',drat_month4_bid', 6, ',drat_month5_bid', 7, ',drat_month6_bid',
           8, ',drat_month7_bid',9, ',drat_month8_bid', 10, ',drat_month9_bid',
           11, ',drat_month10_bid',12, ',drat_month11_bid'), --Second Discount 
          decode(numRateType,
            0, ',drat_spot_bid', 1, ',drat_spot_bid',2, ',drat_spot_bid',3, ',drat_month1_bid',
            4, ',drat_month2_bid',5, ',drat_month3_bid', 6, ',drat_month4_bid', 7, ',drat_month5_bid',
            8, ',drat_month6_bid',9, ',drat_month7_bid', 10, ',drat_month8_bid',
            11, ',drat_month9_bid',12, ',drat_month10_bid')  --Thired DisCount

          into varType,varType1,varType2,VarType3
          from dual;
      elsif numBidAsk = GConst.SALEDEAL then
        select 'drat_spot_ask',
          decode(numRateType,
           0, ',drat_spot_ask', 1, ',drat_month1_ask',2, ',drat_month2_ask', 3, ',drat_month3_ask',
           4, ',drat_month4_ask', 5, ',drat_month5_ask', 6, ',drat_month6_ask',7, ',drat_month7_ask',
           8, ',drat_month8_ask', 9, ',drat_month9_ask',10, ',drat_month10_ask',
           11, ',drat_month11_ask',12, ',drat_month12_ask'),  --First Preamum
         decode(numRateType,
           0, ',drat_spot_ask', 1, ',drat_spot_ask',2, ',drat_month1_ask', 3, ',drat_month2_ask',
           4, ',drat_month3_ask', 5, ',drat_month4_ask', 6, ',drat_month5_ask',7, ',drat_month6_ask',
           8, ',drat_month7_ask', 9, ',drat_month8_ask',10, ',drat_month9_ask',
           11, ',drat_month10_ask',12, ',drat_month11_ask') ,  --Second Preamum
         decode(numRateType,
           0, ',drat_spot_ask', 1, ',drat_spot_ask',2, ',drat_spot_ask', 3, ',drat_month1_ask',
           4, ',drat_month2_ask', 5, ',drat_month3_ask', 6, ',drat_month4_ask',7, ',drat_month5_ask',
           8, ',drat_month6_ask', 9, ',drat_month7_ask',10, ',drat_month8_ask',
           11, ',drat_month9_ask',12, ',drat_month10_ask')   --Thired Preamum           
         into varType,varType1,varType2,VarType3
         from dual;
      else
        select decode(numRateType,
          0, 'round((drat_spot_bid + drat_spot_ask)/2,4)',
          1, 'round((drat_month1_bid + drat_month1_ask)/2,4)',
          2, 'round((drat_month2_bid + drat_month2_ask)/2,4)',
          3, 'round((drat_month3_bid + drat_month3_ask)/2,4)',
          4, 'round((drat_month4_bid + drat_month4_ask)/2,4)',
          5, 'round((drat_month5_bid + drat_month5_ask)/2,4)',
          6, 'round((drat_month6_bid + drat_month6_ask)/2,4)',
          7, 'round((drat_month7_bid + drat_month7_ask)/2,4)',
          8, 'round((drat_month8_bid + drat_month8_ask)/2,4)',
          9, 'round((drat_month9_bid + drat_month9_ask)/2,4)',
          10, 'round((drat_month10_bid + drat_month10_ask)/2,4)',
          11, 'round((drat_month11_bid + drat_month11_ask)/2,4)',
          12, 'round((drat_month12_bid + drat_month12_ask)/2,4)') 
--         decode(RateType,
--          0, ',round((drat_spot_bid + drat_spot_ask)/2,4)',
--          1, ',round((drat_spot_bid + drat_spot_ask)/2,4)',
--          2, ',round((drat_month1_bid + drat_month1_ask)/2,4)',
--          3, ',round((drat_month2_bid + drat_month2_ask)/2,4)',
--          4, ',round((drat_month3_bid + drat_month3_ask)/2,4)',
--          5, ',round((drat_month4_bid + drat_month4_ask)/2,4)',
--          6, ',round((drat_month5_bid + drat_month5_ask)/2,4)',
--          7, ',round((drat_month6_bid + drat_month6_ask)/2,4)',
--          8, ',round((drat_month7_bid + drat_month7_ask)/2,4)',
--          9, ',round((drat_month8_bid + drat_month8_ask)/2,4)',
--          10, ',round((drat_month9_bid + drat_month9_ask)/2,4)',
--          11, ',round((drat_month10_bid + drat_month10_ask)/2,4)',
--          12, ',round((drat_month11_bid + drat_month11_ask)/2,4)')
          into varType
          from dual;
      end if;
      
      
    varOperation := 'Building query to get rate';
    insert into temp values (varQuery,varQuery);
    commit;
    varQuery := 'select ' || varType || varType1 || varType2 || VarType3 ; 
    
    if ForCurrency = GConst.USDOLLAR then 
    
      if numBase = GConst.OPTIONYES then
        varQuery := varQuery || ' from trtran012A where';
        varQuery := varQuery || ' drat_currency_code = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_for_currency = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
      else
        varQuery := varQuery || ' from trtran012A where drat_for_currency = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_currency_code = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
      end if;
      
    elsif ForCurrency = GConst.INDIANRUPEE then
        varQuery := varQuery || ' from trtran012A where drat_currency_code = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_for_currency = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || datAsOn || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
    else
        varQuery := varQuery || ' from trtran012A where drat_currency_code = ' || CurrencyCode;
        varQuery := varQuery || ' and drat_for_currency = ' || ForCurrency;
        varQuery := varQuery || ' and drat_effective_date = ' || '''' || AsonDate || '''';
        varQuery := varQuery || ' and drat_serial_number = ' || numSerial;
    End if;
        Goto Process_End;    
  
  else
    numRate := fncStressGetRate(CurrencyCode, GConst.USDOLLAR, datAsOn,
                  numBidAsk, RateType, DueDate, numSerial);
    numRate1 := fncStressGetRate(ForCurrency, GConst.USDOLLAR, datAsOn,
                  numBidAsk, RateType, DueDate, numSerial1);

--    if numBase1 = GConst.OPTIONYES  then
--      numRate := round(numRate / numRate1, 4);
--    else
--      numRate := round(numRate * numRate1, 4);      
--    end if;
    if  ((numBase1 =GConst.OPTIONYES  ) and (numBase =GConst.OPTIONYES  ) )then
        numRate := round(numRate / numRate1, 4);
    else
      if numBase1 = GConst.OPTIONYES  then
        numRate := round(numRate / numRate1, 4);
      else
        numRate := round(numRate / numRate1, 4);
      end if;
    end if;
    
    return numRate;
  End if;

<<Process_End>>

-- Modified By Manjunath Reddy on 10-nov-2008

   if numBidAsk =0 then
      Execute immediate varQuery into numRate;
      return numRate;
   end if;

     varOperation := 'Executing query to get rate';
      Execute immediate varQuery into numSpot,numPrem2,numPrem1,numPrem;    
    
          declare 
            numLastDay number(6);
            numtemp number(15,6);
            numMaturity number(6);
            numStart number(6);
            
          begin
           
-- For USD Forward Rates we have to take Month Ending As Last date 
-- For All Other Currencies We Have to Take Spot Date to One Month as Last Date
               numTotalDays:=1;
               numActualDays:=1;
                if ((CurrencyCode = GConst.USDOLLAR) and (ForCurrency =GConst.INDIANRUPEE)) then
                  if numRateType=1 then 
                    --numStart := to_number(to_char(datSpot,'DD'));
                    datStart :=datSpot;
                    datLast := Last_day(add_months(datSpot,numRateType-1));
                    numTotalDays :=datStart-datLast;
                    numActualDays:=datStart-DueDate;
                  elsif numRateType > 1 then 
                    --datStart :=add_months(datSpot,numRateType-1);
                    --datLast := Last_day(add_months(datSpot,numRateType));
                    numTotalDays :=to_number(to_char(last_day(DueDate),'DD'));
                    numActualDays:=to_number(to_char(DueDate,'DD'));
                  end if;
                else
                  if numRateType=1 then 
                    datStart :=datSpot;
                    datLast := add_months(datSpot,numRateType);
                    numTotalDays :=datStart-datLast;
                    numActualDays:=datStart-DueDate;
                  elsif numRateType > 1 then
                    datStart :=add_months(datSpot,numRateType-1);
                    datLast := add_months(datSpot,numRateType);
                    numTotalDays :=datStart-datLast;
                    numActualDays:=datStart-DueDate;
                  end if;
                   
                end if;
                varOperation := 'Calculating rate';
                --numRate := numSpot + ((numPrem1-numPrem)+((((numPrem2-numPrem1)-(numPrem1-numPrem))/numTotalDays)*numActualDays));
               -- numtemp := ((((numPrem2-numPrem1)-(numPrem1-numPrem))/numTotalDays)*numActualDays);
                 numtemp := (((numPrem2-numPrem1)/numTotalDays)*numActualDays);
               -- numRate := numPrem2 + ((numPrem1-numPrem)+numtemp);
                  numRate := numPrem1 +numtemp;
          exception
          when others then
      --      numRate:=numRate;
            numError := SQLCODE;
            varError := SQLERRM;
            varError := GConst.fncReturnError('GetRate', numError, varMessage, 
                            varOperation, varError);
            raise_application_error(-20101, varError);    
            numRate := 0.00;
          end;
    
    
      if numBase = GConst.OPTIONNO and ForCurrency = GConst.USDOLLAR then
        numRate := round(1 / numRate, 4);
      end if;
    return numRate;
Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('GetRate', numError, varMessage, 
                      varOperation, varError);
      raise_application_error(-20101, varError);    
      numRate := 0.00;
      return numRate;
End fncStressGetRate;

function fncSTRESSFutureMTMRate(
             DealMaturityDate in date,
             Exchangecode in number,
             BaseCurrency in number,
             OtherCurrency in number,
             asondate in date ,rundate in date default null  ) 
             RETURN number 
   is 
   nummtmrate     number(15,6); 
   maxdate        date;
   datnewmatdate date;
 begin
   if rundate is null then
 
         select max(cfmm_effective_date ) into maxdate
          from  trtran064A
          where cfmm_base_currency=BaseCurrency
            and cfmm_other_currency=OtherCurrency
            and cfmm_exchange_code=ExchangeCode 
            and cfmm_expiry_month=DealMaturityDate 
            and cfmm_effective_date <= asondate;   
        
       
         select cfmm_closing_rate into nummtmrate  
         from trtran064A
         where cfmm_base_currency=BaseCurrency
         and cfmm_other_currency=OtherCurrency
         and  cfmm_exchange_code=ExchangeCode
         and  cfmm_expiry_month=DealMaturityDate   
         and  cfmm_serial_number = (select max(cfmm_serial_number) 
                                    from trtran064A
                                     where cfmm_base_currency=BaseCurrency
                                       and cfmm_other_currency=OtherCurrency
                                       and  cfmm_exchange_code=ExchangeCode
                                       and  cfmm_expiry_month=DealMaturityDate
                                       and cfmm_effective_date=maxdate)
          and cfmm_effective_date=maxdate ; 
    else
         datnewmatdate :=last_day(add_months(DealMaturityDate , months_between(last_day(asondate),last_day(rundate))));
       
         select max(cfmm_effective_date ) into maxdate
            from  trtran064
            where cfmm_base_currency=BaseCurrency
              and cfmm_other_currency=OtherCurrency
              and cfmm_exchange_code=ExchangeCode 
              and last_day(cfmm_expiry_month)=datnewmatdate 
              and cfmm_effective_date <= asondate;   
        
       
         select cfmm_closing_rate into nummtmrate  
         from trtran064
         where cfmm_base_currency=BaseCurrency
         and cfmm_other_currency=OtherCurrency
         and  cfmm_exchange_code=ExchangeCode
         and last_day(cfmm_expiry_month)=datnewmatdate  
         and  cfmm_serial_number = (select max(cfmm_serial_number) 
                                    from trtran064
                                     where cfmm_base_currency=BaseCurrency
                                       and cfmm_other_currency=OtherCurrency
                                       and  cfmm_exchange_code=ExchangeCode
                                       and last_day(cfmm_expiry_month)=datnewmatdate 
                                       and cfmm_effective_date=maxdate)
          and cfmm_effective_date=maxdate ; 
          
    end if;
                                  
 return nummtmrate;
 exception
    when No_data_found then 
      nummtmrate:=0.00;
   return nummtmrate;
 end fncSTRESSFutureMTMRate;

function fncpopulateratealert(DATWORKDATE in date)
return number
as
pragma AUTONOMOUS_TRANSACTION;
   
 varOperation  GConst.gvarOperation%type;
    varMessage    gconst.gvarMessage%type;
    varError      gconst.gvarError%type;
     MAIL_BODY         VARCHAR2(32000);
     MAIL_FROM         VARCHAR2(100); 
     MAIL_TO           VARCHAR2(100); 
     MAIL_CC            VARCHAR2(100) :=''; 
     MAIL_BCC           VARCHAR2(100) :='';
     STRSTRING        VARCHAR2(32000);
     DATlastDATE      date;
begin

--     MAIL_FROM:='fx.treasury@timesgroup.com';
--     MAIL_TO:='neha.gupta4@timesgroup.com'||',' ||'siddharama.kullolli@timesgroup.com' ;
--     MAIL_CC :='prateek.mathur@ibsfintech.com' ||','||'nilesh.atal@ibsfintech.com';
     --MAIL_BCC :='prasanta.panda@ibsfintech.com' ;     
     MAIL_BODY := 'Forward rates have not been uploaded for following currency pairs.Please find Details as below.';
     STRSTRING :='';

     
    varMessage := 'Sending mail for Rate has not been uploaded for currency pairs ';
    select max(DRAT_EFFECTIVE_DATE) into DATlastDATE  from TRTRAN012 where DRAT_EFFECTIVE_DATE < DATWORKDATE;
    
for CURDATA in (SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY
     FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE=DATlastDATE
        AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
                            (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                              WHERE  a.DRAT_EFFECTIVE_DATE=DATlastDATE
                              and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                              and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                              group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
       AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
    minus
    SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY
              
      FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE=DATWORKDATE
        AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
                            (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                              WHERE  a.DRAT_EFFECTIVE_DATE=DATWORKDATE
                              and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                              and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                              group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
       AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED))
   
   loop
      STRSTRING:=STRSTRING ||chr(13)||chr(10)|| pkgreturncursor.fncgetdescription(CURDATA.DRAT_CURRENCY_CODE,2) ||'/' ||pkgreturncursor.fncgetdescription(CURDATA.DRAT_FOR_CURRENCY,2) ||chr(13)||chr(10);
      
      insert into trtran012 (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
          DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
          DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,
          DRAT_MONTH9_BID,DRAT_MONTH9_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE,DRAT_ADD_DATE,
          DRAT_ENTRY_DETAIL,DRAT_RECORD_STATUS,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,DRAT_MONTH5_BID,
          DRAT_MONTH5_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH10_BID,
          DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK)
      select DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,datworkdate,99,DRAT_RATE_TIME,
        to_char(systimestamp,'dd/mm/yyyy hh24:mi:ssff'),DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
        DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,
        DRAT_MONTH9_BID,DRAT_MONTH9_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,datworkdate,datworkdate,
        DRAT_ENTRY_DETAIL,DRAT_RECORD_STATUS,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,DRAT_MONTH5_BID,
        DRAT_MONTH5_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH10_BID,
        DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK
      from trtran012 where DRAT_EFFECTIVE_DATE = DATlastDATE
               and DRAT_CURRENCY_CODE =curdata.DRAT_CURRENCY_CODE
               and DRAT_FOR_CURRENCY=curdata.DRAT_FOR_CURRENCY
               AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
                            (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
                              WHERE  a.DRAT_EFFECTIVE_DATE=DATlastDATE
                              and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
                              and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
                              group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
       AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
      
   end loop;
  commit;
     
     
       if length(nvl(STRSTRING,1)) < 6 then
            MAIL_BODY :=' No Data Found To Process.';
            
       else
             STRSTRING :=STRSTRING ||chr(13)||chr(10)|| 'Latest rate (of '|| DATlastDATE ||' ) have been updated for above currency pairs.'; 
             MAIL_BODY :=MAIL_BODY || chr(13)|| CHR(10) || STRSTRING;
             
           /*  UTL_MAIL.SEND(SENDER     => MAIL_FROM ,
                RECIPIENTS => MAIL_TO,
                CC         => mail_CC ,
                BCC        => MAIL_BCC,
                SUBJECT    => 'Forward Rates upload issue as on '|| DATWORKDATE ||' '||to_char(systimestamp ,'hh24:mi:ss'),
                MESSAGE    => mail_body ) ; */  
       end if;
          
return 0;
exception
when no_data_found then
return 0;
when others then
varError:=varMessage || sqlerrm;
raise_application_error(-20001,varError);
return 1;
end fncpopulateratealert;
procedure prcpopulateratealert(DatdayOpenDate in date :=null)
as
pragma AUTONOMOUS_TRANSACTION;
   
     varOperation  GConst.gvarOperation%type;
     varMessage    gconst.gvarMessage%type;
     varError      gconst.gvarError%type;
     numerror      number;
     numRows      number;
     MAIL_BODY         VARCHAR2(32000);
     MAIL_FROM         VARCHAR2(100); 
     MAIL_TO           VARCHAR2(100); 
     MAIL_CC            VARCHAR2(100) :=''; 
     MAIL_BCC           VARCHAR2(100) :='';
     STRSTRING        VARCHAR2(32000);
     DATlastDATE      date;
     DATWORKDATE     date;
     numsrnumber    number;
begin

     MAIL_FROM:='prasanta.panda@ibsfintech.com';
     MAIL_TO:='Prateek.mathur@ibsfintech.com'||',' ||'nilesh.atal@ibsfintech.com' ;
     MAIL_CC :='manjureddy.jr@gmail.com' ||','||'manjunath@ibsfintech.com' ;
     MAIL_BCC :='prasanta.panda@ibsfintech.com' ;     
     MAIL_BODY := 'Forward rates have not been uploaded for following currency pairs.Please find Details as below.';
     STRSTRING :='';
     
     
    varMessage := 'Sending mail for Rate has not been uploaded for currency pairs ';
    
    varOperation:= 'Çhecking the Rates';
    
   --- insert into temp2 values('Çhecking the Rates ' || DatdayOpenDate);
  if DatdayOpenDate is not null then 
     DATWORKDATE :=DatdayOpenDate;
  else
     begin  
      SELECT max(HDAY_CALENDAR_DATE) 
        INTO DATWORKDATE
        FROM TRSYSTEM001
        WHERE HDAY_LOCATION_CODE = 30299999
            AND HDAY_DAY_STATUS IN (26400002)
            AND HDAY_RECORD_STATUS IN (10200001,10200002,10200003,10200004);
     exception 
       when no_data_found then 
          DATWORKDATE:= null;
     end;
   end if;
 -- insert into temp2 values('After Date is selected ' || DatdayOpenDate); 
--    
--    select max(DRAT_EFFECTIVE_DATE) into DATlastDATE  
--      from TRTRAN012 where DRAT_EFFECTIVE_DATE < DATWORKDATE;
--    
--    select nvl(max(DRAT_SERIAL_NUMBER),1) into numsrnumber  
--     from TRTRAN012 where DRAT_EFFECTIVE_DATE = DATWORKDATE;
--     
--for CURDATA in (SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY
--                 FROM TRTRAN012  
--                WHERE  DRAT_EFFECTIVE_DATE=DATlastDATE
--                  AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
--                       (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
--                              WHERE  a.DRAT_EFFECTIVE_DATE=DATlastDATE
--                              and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
--                              and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
--                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
--                              group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
--                  AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
--                minus
--                SELECT  DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY
--                  FROM TRTRAN012  WHERE  DRAT_EFFECTIVE_DATE=DATWORKDATE
--                    AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
--                                        (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
--                                          WHERE  a.DRAT_EFFECTIVE_DATE=DATWORKDATE
--                                          and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
--                                          and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
--                                          AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
--                                          group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
--                   AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED))
--               
--   loop
--      STRSTRING:=STRSTRING ||chr(13)||chr(10)|| pkgreturncursor.fncgetdescription(CURDATA.DRAT_CURRENCY_CODE,2) ||'/' ||pkgreturncursor.fncgetdescription(CURDATA.DRAT_FOR_CURRENCY,2) ||chr(13)||chr(10);
--      
--      insert into trtran012 (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
--          DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
--          DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,
--          DRAT_MONTH9_BID,DRAT_MONTH9_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE,DRAT_ADD_DATE,
--          DRAT_ENTRY_DETAIL,DRAT_RECORD_STATUS,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,DRAT_MONTH5_BID,
--          DRAT_MONTH5_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH10_BID,
--          DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK)
--      select DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,datworkdate,numsrnumber,DRAT_RATE_TIME,
--        to_char(systimestamp,'dd/mm/yyyy hh24:mi:ssff'),DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
--        DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,
--        DRAT_MONTH9_BID,DRAT_MONTH9_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,datworkdate,datworkdate,
--        DRAT_ENTRY_DETAIL,DRAT_RECORD_STATUS,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,DRAT_MONTH5_BID,
--        DRAT_MONTH5_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH10_BID,
--        DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK
--      from trtran012 where DRAT_EFFECTIVE_DATE = DATlastDATE
--               and DRAT_CURRENCY_CODE =curdata.DRAT_CURRENCY_CODE
--               and DRAT_FOR_CURRENCY=curdata.DRAT_FOR_CURRENCY
--               AND (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_SERIAL_NUMBER) in 
--                            (SELECT a.DRAT_CURRENCY_CODE,a.DRAT_FOR_CURRENCY,nvl(MAX(DRAT_SERIAL_NUMBER),0) FROM TRTRAN012 a 
--                              WHERE  a.DRAT_EFFECTIVE_DATE=DATlastDATE
--                              and DRAT_CURRENCY_CODE=a.DRAT_CURRENCY_CODE
--                              and DRAT_FOR_CURRENCY=a.DRAT_FOR_CURRENCY
--                              AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED)
--                              group by  a.DRAT_EFFECTIVE_DATE ,a.DRAT_CURRENCY_CODE, a.DRAT_FOR_CURRENCY )                 
--       AND DRAT_RECORD_STATUS IN (GCONST.STATUSENTRY, GCONST.STATUSAUTHORIZED, GCONST.STATUSUPDATED);
--      
--   end loop;

--  select count (*) into numRows
--       from trtran012 m inner join
--         (select DRAT_EFFECTIVE_DATE EffectiveDate, max(drat_serial_number) serialnumber,
--               drat_currency_code CurrencyCode,drat_for_currency forCurrency
--          from trtran012 M
--          where drat_record_status not in (10200005,10200006)
--           and drat_effective_date = (select MAX(DRAT_EFFECTIVE_DATE) EffectiveDate 
--                                        from trtran012 s
--                                        where drat_record_status not in (10200005,10200006)
--                                        and s.drat_currency_code= m.drat_currency_code
--                                        and s.drat_for_currency= m.drat_for_currency
--                                        and s.DRAT_EFFECTIVE_DATE < DATWORKDATE
--                                      group by drat_currency_code, drat_for_currency)
--           and not exists
--            (select 'x'from trtran012 V
--              where v.drat_currency_code=  m.drat_currency_code
--             AND v.drat_for_currency= m.drat_for_currency
--             AND v.DRAT_EFFECTIVE_DATE = DATWORKDATE)
--          group by drat_currency_code, drat_for_currency,DRAT_EFFECTIVE_DATE
--          ) Curr
--       on m.drat_currency_code= Curr.CurrencyCode
--        aND M.drat_for_currency= Curr.forCurrency
--        AND M.DRAT_EFFECTIVE_DATE = Curr.EffectiveDate
--        and m.DRAT_SERIAL_NUMBER = curr.SerialNumber;
--        
-- insert into temp2 values('Before Data has been inserted ' || DATWORKDATE);
 
  varOperation:= 'Inserting Rates';
   insert into trtran012 (DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,DRAT_EFFECTIVE_DATE,DRAT_SERIAL_NUMBER,DRAT_RATE_TIME,
          DRAT_TIME_STAMP,DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
          DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,
          DRAT_MONTH9_BID,DRAT_MONTH9_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE,DRAT_ADD_DATE,
          DRAT_ENTRY_DETAIL,DRAT_RECORD_STATUS,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,DRAT_MONTH5_BID,
          DRAT_MONTH5_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH10_BID,
          DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK)
  select DRAT_CURRENCY_CODE,DRAT_FOR_CURRENCY,datworkdate,0,DRAT_RATE_TIME,
          to_char(systimestamp,'dd/mm/yyyy hh24:mi:ssff'),DRAT_RATE_DESCRIPTION,DRAT_SPOT_BID,DRAT_SPOT_ASK,DRAT_MONTH1_BID,DRAT_MONTH1_ASK,
          DRAT_MONTH2_BID,DRAT_MONTH2_ASK,DRAT_MONTH3_BID,DRAT_MONTH3_ASK,DRAT_MONTH6_BID,DRAT_MONTH6_ASK,
          DRAT_MONTH9_BID,DRAT_MONTH9_ASK,DRAT_MONTH12_BID,DRAT_MONTH12_ASK,DRAT_CREATE_DATE,datworkdate,
          DRAT_ENTRY_DETAIL,DRAT_RECORD_STATUS,DRAT_MONTH4_BID,DRAT_MONTH4_ASK,DRAT_MONTH5_BID,
          DRAT_MONTH5_ASK,DRAT_MONTH7_BID,DRAT_MONTH7_ASK,DRAT_MONTH8_BID,DRAT_MONTH8_ASK,DRAT_MONTH10_BID,
          DRAT_MONTH10_ASK,DRAT_MONTH11_BID,DRAT_MONTH11_ASK
       from trtran012 m inner join
         (select DRAT_EFFECTIVE_DATE EffectiveDate, max(drat_serial_number) serialnumber,
               drat_currency_code CurrencyCode,drat_for_currency forCurrency
          from trtran012 M
          where drat_record_status not in (10200005,10200006)
            and DRAT_SPOT_BID is not null
              and DRAT_SPOT_ASK is not null and DRAT_MONTH1_BID is not null
              and DRAT_MONTH2_BID is not null and DRAT_MONTH2_ASK is not null
              and DRAT_MONTH3_BID is not null and DRAT_MONTH3_ASK is not null
              and DRAT_MONTH6_BID  is not null and DRAT_MONTH6_ASK  is not null
              and DRAT_MONTH9_BID  is not null and DRAT_MONTH9_ASK  is not null
              and DRAT_MONTH12_BID  is not null and DRAT_MONTH12_ASK  is not null
              and DRAT_MONTH4_BID  is not null and DRAT_MONTH4_ASK  is not null
              and DRAT_MONTH5_BID  is not null and DRAT_MONTH5_ASK  is not null
              and DRAT_MONTH7_BID  is not null and DRAT_MONTH7_ASK  is not null
              and DRAT_MONTH8_BID  is not null and DRAT_MONTH8_ASK  is not null
              and DRAT_MONTH10_BID  is not null and DRAT_MONTH10_ASK  is not null
              and DRAT_MONTH11_BID  is not null and DRAT_MONTH11_ASK  is not null
          
           and drat_effective_date = (select MAX(DRAT_EFFECTIVE_DATE) EffectiveDate 
                                        from trtran012 s
                                        where drat_record_status not in (10200005,10200006)
                                        and s.drat_currency_code= m.drat_currency_code
                                        and s.drat_for_currency= m.drat_for_currency
                                        and s.DRAT_EFFECTIVE_DATE < DATWORKDATE
                                        and DRAT_SPOT_BID is not null
              and DRAT_SPOT_ASK is not null and DRAT_MONTH1_BID is not null
              and DRAT_MONTH2_BID is not null and DRAT_MONTH2_ASK is not null
              and DRAT_MONTH3_BID is not null and DRAT_MONTH3_ASK is not null
              and DRAT_MONTH6_BID  is not null and DRAT_MONTH6_ASK  is not null
              and DRAT_MONTH9_BID  is not null and DRAT_MONTH9_ASK  is not null
              and DRAT_MONTH12_BID  is not null and DRAT_MONTH12_ASK  is not null
              and DRAT_MONTH4_BID  is not null and DRAT_MONTH4_ASK  is not null
              and DRAT_MONTH5_BID  is not null and DRAT_MONTH5_ASK  is not null
              and DRAT_MONTH7_BID  is not null and DRAT_MONTH7_ASK  is not null
              and DRAT_MONTH8_BID  is not null and DRAT_MONTH8_ASK  is not null
              and DRAT_MONTH10_BID  is not null and DRAT_MONTH10_ASK  is not null
              and DRAT_MONTH11_BID  is not null and DRAT_MONTH11_ASK  is not null
                        group by drat_currency_code, drat_for_currency)
           and not exists
            (select 'x'from trtran012 V
              where v.drat_currency_code=  m.drat_currency_code
             AND v.drat_for_currency= m.drat_for_currency
             AND v.DRAT_EFFECTIVE_DATE = DATWORKDATE
              and DRAT_SPOT_BID is not null
              and DRAT_SPOT_ASK is not null and DRAT_MONTH1_BID is not null
              and DRAT_MONTH2_BID is not null and DRAT_MONTH2_ASK is not null
              and DRAT_MONTH3_BID is not null and DRAT_MONTH3_ASK is not null
              and DRAT_MONTH6_BID  is not null and DRAT_MONTH6_ASK  is not null
              and DRAT_MONTH9_BID  is not null and DRAT_MONTH9_ASK  is not null
              and DRAT_MONTH12_BID  is not null and DRAT_MONTH12_ASK  is not null
              and DRAT_MONTH4_BID  is not null and DRAT_MONTH4_ASK  is not null
              and DRAT_MONTH5_BID  is not null and DRAT_MONTH5_ASK  is not null
              and DRAT_MONTH7_BID  is not null and DRAT_MONTH7_ASK  is not null
              and DRAT_MONTH8_BID  is not null and DRAT_MONTH8_ASK  is not null
              and DRAT_MONTH10_BID  is not null and DRAT_MONTH10_ASK  is not null
              and DRAT_MONTH11_BID  is not null and DRAT_MONTH11_ASK  is not null
             )
          group by drat_currency_code, drat_for_currency,DRAT_EFFECTIVE_DATE
          ) Curr
       on m.drat_currency_code= Curr.CurrencyCode
        aND M.drat_for_currency= Curr.forCurrency
        AND M.DRAT_EFFECTIVE_DATE = Curr.EffectiveDate
        and m.DRAT_SERIAL_NUMBER = curr.SerialNumber;
        
       numRows:= sql%rowcount;
       commit;
   --  insert into temp2 values('Data has been inserted ' || numRows);
  
     
     
--       if length(nvl(STRSTRING,1)) < 6 then
--            MAIL_BODY :=' No Data Found To Process.';
--            
--       else
--             STRSTRING :=STRSTRING ||chr(13)||chr(10)|| 'Latest rate (of '|| DATlastDATE ||' ) have been updated for above currency pairs.'; 
--             MAIL_BODY :=MAIL_BODY || chr(13)|| CHR(10) || STRSTRING;
--             
--             UTL_MAIL.SEND(SENDER     => MAIL_FROM ,
--                RECIPIENTS => MAIL_TO,
--                CC         => mail_CC ,
--                BCC        => MAIL_BCC,
--                SUBJECT    => 'Forward Rates upload issue as on '|| DATWORKDATE ||' '||to_char(systimestamp ,'hh24:mi:ss'),
--                MESSAGE    => mail_body ) ;  
--       end if;
          
----return 0;
--exception
----when no_data_found then
----return 0;
--when others then
--varError:=varMessage || sqlerrm;
--raise_application_error(-20001,varError);
----return 1;

  Exception
    When others then
      numError := SQLCODE;
      varError := SQLERRM;
      varError := GConst.fncReturnError('pcrPopulateRates', numError, varMessage, 
                      varOperation, varError);


      
      raise_application_error(-20101, varError);                      


end prcpopulateratealert;

END PKGVARANALYSIS;
/